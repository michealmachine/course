This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-09T12:36:31.193Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
front/src/app/(dashboard)/permissions/
front/src/app/(dashboard)/roles/
front/src/app/(dashboard)/users/
front/src/app/courses/[id]/
front/src/models/
src/test/resources/
.gitattributes
.gitignore
docs/测试说明.md
docs/实现进度.md
docs/系统设计说明.md
docs/下一阶段开发需求.md
docs/项目结构说明.md
docs/项目配置说明.md
docs/api.md
docs/API接口说明.md
docs/fornt/开发进度.md
docs/fornt/前端开发规划.md
front/.cursorrules
front/.gitignore
front/components.json
front/eslint.config.mjs
front/next.config.ts
front/package.json
front/postcss.config.mjs
front/public/file.svg
front/public/globe.svg
front/public/next.svg
front/public/vercel.svg
front/public/window.svg
front/README.md
front/src/app/(auth)/layout.tsx
front/src/app/(auth)/login/page.tsx
front/src/app/(auth)/register/page.tsx
front/src/app/(dashboard)/layout.tsx
front/src/app/(dashboard)/page.tsx
front/src/app/globals.css
front/src/app/layout.tsx
front/src/app/page.tsx
front/src/components/dashboard/header.tsx
front/src/components/dashboard/sidebar.tsx
front/src/components/providers/theme-provider.tsx
front/src/components/ui/avatar.tsx
front/src/components/ui/button.tsx
front/src/components/ui/captcha.tsx
front/src/components/ui/card.tsx
front/src/components/ui/checkbox.tsx
front/src/components/ui/dialog.tsx
front/src/components/ui/dropdown-menu.tsx
front/src/components/ui/form.tsx
front/src/components/ui/input.tsx
front/src/components/ui/label.tsx
front/src/components/ui/pagination.tsx
front/src/components/ui/select.tsx
front/src/components/ui/separator.tsx
front/src/components/ui/sheet.tsx
front/src/components/ui/sonner.tsx
front/src/components/ui/switch.tsx
front/src/components/ui/table.tsx
front/src/components/ui/tabs.tsx
front/src/components/ui/tooltip.tsx
front/src/lib/utils.ts
front/src/middleware.ts
front/src/services/api.ts
front/src/services/auth.ts
front/src/stores/auth-store.ts
front/src/stores/ui-store.ts
front/src/types/api.ts
front/src/types/auth.ts
front/tsconfig.json
mvnw
mvnw.cmd
pom.xml
project-overview.md
src/main/java/com/zhangziqi/online_course_mine/config/JpaAuditingConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/KaptchaConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/MinioConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/OpenApiConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/redis/RedisConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/S3Config.java
src/main/java/com/zhangziqi/online_course_mine/config/security/JwtConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/security/SecurityConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/StorageConfigProperties.java
src/main/java/com/zhangziqi/online_course_mine/controller/AuthController.java
src/main/java/com/zhangziqi/online_course_mine/controller/PermissionController.java
src/main/java/com/zhangziqi/online_course_mine/controller/RoleController.java
src/main/java/com/zhangziqi/online_course_mine/controller/UserController.java
src/main/java/com/zhangziqi/online_course_mine/exception/BusinessException.java
src/main/java/com/zhangziqi/online_course_mine/exception/GlobalExceptionHandler.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/ChangePasswordDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/EmailUpdateDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/EmailVerificationDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/JwtTokenDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/LoginDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/PermissionDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/RefreshTokenDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/RegisterDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/RoleDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/UserDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/UserProfileDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/UserQueryDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/BaseEntity.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Institution.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Permission.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Role.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/User.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/RoleEnum.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/PermissionVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/Result.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/RoleVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/UserVO.java
src/main/java/com/zhangziqi/online_course_mine/OnlineCourseMineApplication.java
src/main/java/com/zhangziqi/online_course_mine/repository/InstitutionRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/PermissionRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/RoleRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/UserRepository.java
src/main/java/com/zhangziqi/online_course_mine/security/jwt/JwtAuthenticationFilter.java
src/main/java/com/zhangziqi/online_course_mine/security/jwt/JwtTokenProvider.java
src/main/java/com/zhangziqi/online_course_mine/security/jwt/TokenBlacklistService.java
src/main/java/com/zhangziqi/online_course_mine/security/UserDetailsServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/AuthService.java
src/main/java/com/zhangziqi/online_course_mine/service/CaptchaService.java
src/main/java/com/zhangziqi/online_course_mine/service/EmailService.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/AuthServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/CaptchaServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/EmailServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/MinioServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/PermissionServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/RoleServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/UserServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/MinioService.java
src/main/java/com/zhangziqi/online_course_mine/service/PermissionService.java
src/main/java/com/zhangziqi/online_course_mine/service/RoleService.java
src/main/java/com/zhangziqi/online_course_mine/service/UserService.java
src/main/java/com/zhangziqi/online_course_mine/util/DataInitializer.java
src/main/resources/application-dev.yml
src/main/resources/application-test.yml
src/main/resources/application.yml
src/main/resources/templates/email/email-update-code.html
src/main/resources/templates/email/verification-code.html
src/test/java/com/zhangziqi/online_course_mine/config/TestSecurityConfig.java
src/test/java/com/zhangziqi/online_course_mine/controller/AuthControllerTest.java
src/test/java/com/zhangziqi/online_course_mine/controller/UserControllerTest.java
src/test/java/com/zhangziqi/online_course_mine/integration/AuthControllerIntegrationTest.java
src/test/java/com/zhangziqi/online_course_mine/integration/MinioIntegrationTest.java
src/test/java/com/zhangziqi/online_course_mine/integration/S3IntegrationTest.java
src/test/java/com/zhangziqi/online_course_mine/OnlineCourseMineApplicationTests.java
src/test/java/com/zhangziqi/online_course_mine/service/AuthServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/CaptchaServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/EmailServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/MinioServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/UserServiceTest.java
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path=".gitignore">
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="docs/测试说明.md">
# 测试说明文档

## 测试策略

本项目采用分层测试策略，确保代码质量和功能稳定性。测试分为三个主要层次：单元测试、控制器测试和集成测试。

### 测试环境

- 使用H2内存数据库进行测试
- 所有测试类添加`@ActiveProfiles("test")`注解，确保使用测试环境配置
- 测试配置文件位于`src/test/resources/application-test.yml`
- 启用Bean覆盖：`spring.main.allow-bean-definition-overriding=true`

## 测试分层架构

### 1. 单元测试（Unit Tests）

**目标**：测试单个组件的功能，完全隔离于其他组件。

**配置**：
- 使用`@ExtendWith(MockitoExtension.class)`
- 通过`@Mock`模拟所有依赖
- 通过`@InjectMocks`注入被测试组件
- 不加载Spring上下文，运行效率最高

**位置**：`src/test/java/com/zhangziqi/online_course_mine/service`

**示例**：
```java
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test")
public class CaptchaServiceTest {
    @Mock
    private DefaultKaptcha captchaProducer;
    
    @InjectMocks
    private CaptchaServiceImpl captchaService;
    
    // 测试方法...
}
```

### 2. 控制器测试（Controller Tests）

**目标**：测试API的参数验证、请求处理和响应格式。

**配置**：
- 使用`@SpringBootTest`加载应用上下文
- 使用`@AutoConfigureMockMvc(addFilters = false)`禁用安全过滤器链
- 使用`@MockBean`模拟服务层组件

**位置**：`src/test/java/com/zhangziqi/online_course_mine/controller`

**示例**：
```java
@SpringBootTest
@AutoConfigureMockMvc(addFilters = false)
@ActiveProfiles("test")
public class AuthControllerTest {
    @Autowired
    private MockMvc mockMvc;
    
    @MockBean
    private AuthService authService;
    
    // 测试方法...
}
```

### 3. 集成测试（Integration Tests）

**目标**：测试多个组件协同工作，包括安全过滤器和服务层。

**配置**：
- 使用`@SpringBootTest`加载完整应用上下文
- 使用`@Import(TestSecurityConfig.class)`导入测试安全配置
- 结合真实组件和必要的模拟组件

**位置**：`src/test/java/com/zhangziqi/online_course_mine/integration`

**示例**：
```java
@SpringBootTest(properties = {"spring.main.allow-bean-definition-overriding=true"})
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Import(TestSecurityConfig.class)
public class AuthControllerIntegrationTest {
    @Autowired
    private MockMvc mockMvc;
    
    @MockBean
    private AuthService authService;
    
    // 测试方法...
}
```

### 4. 文件存储测试

**目标**：测试MinIO和S3 API的功能，包括文件上传、删除、URL生成等。

**配置**：
- 使用`@SpringBootTest`加载应用上下文
- 使用`@EnabledIfEnvironmentVariable`条件注解控制测试执行
- 测试结束后清理测试文件和存储桶

**位置**：`src/test/java/com/zhangziqi/online_course_mine/integration`

**示例**：
```java
@SpringBootTest
@ActiveProfiles("test")
class MinioIntegrationTest {
    @Autowired
    private MinioService minioService;
    
    @Test
    @EnabledIfEnvironmentVariable(named = "MINIO_ENABLED", matches = "true")
    void testMinioOperations() throws Exception {
        // 测试文件上传、获取URL、删除等操作
    }
    
    @Test
    void testSkippedByDefault() {
        // 默认跳过的测试
    }
}
```

```java
@SpringBootTest
@ActiveProfiles("test")
class S3IntegrationTest {
    @Autowired
    private S3Client s3Client;
    
    @Autowired
    private S3Presigner s3Presigner;
    
    @Autowired
    private S3Config s3Config;
    
    @Test
    @EnabledIfEnvironmentVariable(named = "S3_ENABLED", matches = "true")
    void testS3Operations() {
        // 测试S3操作，包括创建存储桶、上传对象、生成预签名URL等
    }
    
    private void createBucketIfNotExists() {
        // 检查并创建测试存储桶
    }
    
    @Test
    void testSkippedByDefault() {
        // 默认跳过的测试
    }
}
```

## 测试配置类

项目提供了专用的测试配置类`TestSecurityConfig`，用于集成测试：

```java
@TestConfiguration
@EnableWebSecurity
@Profile("test")
public class TestSecurityConfig {
    // 提供安全相关的模拟组件...
}
```

## 测试覆盖范围

### 已完成测试

- 认证控制器（AuthController）
  - 单元测试：`AuthControllerTest`
  - 集成测试：`AuthControllerIntegrationTest`
- 用户服务（UserService）
- 认证服务（AuthService）
- 验证码服务（CaptchaService）
- 用户自身管理功能
  - 获取当前用户信息
  - 更新个人资料
  - 修改密码
  - 更新头像
  - 更新邮箱

### 用户自身管理测试

用户自身管理相关功能的测试分为两部分：

1. **服务层测试 (UserServiceTest)**:
   - `getCurrentUserShouldReturnUserInfoWhenUserExists` - 测试获取当前用户信息
   - `updateCurrentUserProfileShouldUpdateUserInfoWhenValid` - 测试更新个人资料
   - `updateCurrentUserProfileShouldThrowExceptionWhenPhoneExists` - 测试手机号冲突检查
   - `changePasswordShouldSucceedWhenOldPasswordCorrect` - 测试成功修改密码
   - `changePasswordShouldThrowExceptionWhenOldPasswordIncorrect` - 测试旧密码错误
   - `changePasswordShouldThrowExceptionWhenNewPasswordSameAsOld` - 测试新旧密码相同
   - `updateAvatarShouldUpdateAvatarUrlWhenUserExists` - 测试更新头像
   - `updateEmailShouldUpdateEmailWhenValid` - 测试更新邮箱
   - `updateEmailShouldThrowExceptionWhenPasswordIncorrect` - 测试密码验证失败
   - `updateEmailShouldThrowExceptionWhenEmailExists` - 测试邮箱已存在
   - `updateEmailShouldThrowExceptionWhenEmailCodeInvalid` - 测试验证码无效
   - `getBasicUserInfoShouldReturnBasicInfoWhenUserExists` - 测试获取基本信息

2. **控制器测试 (UserControllerTest)**:
   - `testGetCurrentUser` - 测试获取当前用户API
   - `testUpdateCurrentUser` - 测试更新个人信息API
   - `testChangePassword` - 测试修改密码API
   - `testChangePasswordWithMismatchConfirmation` - 测试密码确认不匹配
   - `testUpdateEmail` - 测试更新邮箱API
   - `testUploadAvatar` - 测试上传头像API
   - `testGetBasicUserInfo` - 测试获取用户基本信息API

3. **邮箱更新验证码测试**:
   - `AuthControllerTest.testSendEmailUpdateCode` - 测试发送邮箱更新验证码API
   - `AuthControllerTest.testSendEmailUpdateCodeWithInvalidCaptcha` - 测试验证码无效场景
   - `EmailServiceTest.testSendEmailUpdateCode` - 测试邮箱更新验证码发送服务
   - `AuthControllerIntegrationTest.testSendEmailUpdateCode` - 集成测试邮箱更新验证码流程
   - `AuthControllerIntegrationTest.testSendEmailUpdateCodeWithInvalidCaptcha` - 集成测试无效验证码

### 待完成测试

- JWT相关组件测试
- Repository层测试
- 工具类测试

## 测试命令

```bash
# 运行所有测试
./mvnw test

# 运行特定测试类
./mvnw test -Dtest=AuthControllerTest

# 运行特定测试方法
./mvnw test -Dtest=AuthControllerTest#testLogin
```

## 最佳实践

1. **分层策略**：根据测试目标选择合适的测试层次
   - 单元测试：业务逻辑验证
   - 控制器测试：API接口验证
   - 集成测试：组件协作验证

2. **模拟依赖**：
   - 单元测试中模拟所有外部依赖
   - 控制器测试中模拟业务服务
   - 集成测试中仅模拟必要组件

3. **测试隔离**：
   - 使用独立的测试数据库（H2内存数据库）
   - 使用独立的Redis数据库（database=1）
   - 测试完成后自动清理数据

4. **覆盖率目标**：
   - 服务层：≥ 90%
   - 控制器层：≥ 80%
   - 工具类：≥ 95%

5. **测试设计原则**：
   - 每个测试方法只测试一个功能点
   - 测试名称清晰描述测试场景和预期结果
   - 遵循"准备-执行-验证"模式
   - 独立性：测试之间不应相互依赖
</file>

<file path="docs/实现进度.md">
# 在线课程平台实现进度

## 已完成内容

### 基础设施
- [x] 项目结构设计
- [x] 多环境配置（dev, test）
- [x] H2数据库集成（用于测试）
- [x] Redis缓存集成
- [x] 全局异常处理
- [x] 统一响应格式
- [x] OpenAPI文档支持
- [x] 验证码功能
- [x] 邮箱验证功能
  - [x] 邮件服务集成
  - [x] 验证码生成和验证
  - [x] Redis存储验证码
  - [x] 邮件模板支持
- [x] 文件存储集成
  - [x] MinIO对象存储服务集成
  - [x] AWS S3兼容API集成
  - [x] 文件上传、下载、删除功能
  - [x] 文件URL生成和预签名URL支持

### 实体类设计
- [x] 基础实体类（BaseEntity）
- [x] 用户实体（User）
- [x] 角色实体（Role）
- [x] 权限实体（Permission）
- [x] 机构实体（Institution）
- [x] 角色枚举（RoleEnum）

### 数据访问层
- [x] 用户Repository
- [x] 角色Repository
- [x] 权限Repository
- [x] 机构Repository

### 安全框架
- [x] Spring Security配置
- [x] JWT令牌配置
- [x] JWT令牌提供者
- [x] JWT认证过滤器
- [x] Token黑名单服务（基于Redis）

### 认证授权
- [x] 用户详情服务
- [x] 认证服务
- [x] 用户服务
- [x] 注册接口
- [x] 登录接口
- [x] 刷新令牌接口
- [x] 注销接口
- [x] 数据初始化（角色、权限）

### 权限管理
- [x] 用户管理接口
- [x] 角色管理接口
- [x] 权限管理接口

### 用户自身管理
- [x] 获取当前用户信息
- [x] 更新个人资料
- [x] 修改密码
- [x] 更新头像（MinIO存储）
- [x] 更新邮箱（验证码验证）
- [x] 获取用户基本信息
- [x] 邮箱更新专用验证码

## 待完成内容

### 业务功能
- [ ] 课程管理
- [ ] 内容审核
- [ ] 用户学习
- [ ] 评价系统
- [ ] 订单支付

## 测试计划
- [x] 测试环境配置
  - [x] H2内存数据库
  - [x] 测试专用配置文件
  - [x] Bean冲突解决方案
- [x] 单元测试
  - [x] 服务层测试
    - [x] 用户服务测试
    - [x] 认证服务测试
    - [x] 验证码服务测试
    - [x] 邮件服务测试
    - [x] 用户自身管理功能测试
  - [ ] 工具类测试
- [x] 控制器测试
  - [x] 认证控制器测试
    - [x] 图形验证码测试
    - [x] 邮箱验证码测试
    - [x] 注册登录测试
    - [x] 邮箱更新验证码测试
  - [x] 用户控制器测试
    - [x] 用户管理测试
    - [x] 用户自身管理测试
- [x] 集成测试
  - [x] 认证控制器集成测试
    - [x] 完整注册流程测试
    - [x] 邮箱验证失败测试
    - [x] 邮箱更新验证码测试
  - [ ] Repository测试
  - [ ] 端到端测试

## 下一步计划
1. ✓ 完善用户管理功能
2. ✓ 实现角色管理功能
3. ✓ 实现权限管理功能
4. ✓ 实现用户自身管理功能
5. 开始课程管理相关功能
   - 设计课程相关实体类（课程、章节、课时等）
   - 实现课程Repository层
   - 实现课程Service层
   - 实现课程Controller层
6. 完善权限管理接口的测试
   - 编写用户管理接口测试
   - 编写角色管理接口测试
   - 编写权限管理接口测试
7. 设计和实现课程内容审核功能

## 已实现API接口

### 认证管理
- `GET /api/auth/captcha/key` - 获取验证码key
- `GET /api/auth/captcha/image/{key}` - 获取验证码图片
- `POST /api/auth/email-verification-code` - 发送邮箱验证码（用于注册）
- `POST /api/auth/email-update-code` - 发送邮箱更新验证码（用于更新邮箱）
- `POST /api/auth/register` - 用户注册（包含邮箱验证）
- `POST /api/auth/login` - 用户登录
- `POST /api/auth/refresh-token` - 刷新令牌
- `POST /api/auth/logout` - 用户注销

### 用户管理
- `GET /api/users` - 分页查询用户列表
- `GET /api/users/{id}` - 获取用户详情
- `POST /api/users` - 创建用户
- `PUT /api/users/{id}` - 更新用户
- `DELETE /api/users/{id}` - 删除用户
- `PATCH /api/users/{id}/status` - 修改用户状态
- `PUT /api/users/{id}/roles` - 给用户分配角色
- `DELETE /api/users/batch` - 批量删除用户

### 用户自身管理
- `GET /api/users/current` - 获取当前用户信息
- `PUT /api/users/current` - 更新当前用户信息
- `PUT /api/users/current/password` - 修改当前用户密码
- `PUT /api/users/current/email` - 更新当前用户邮箱
- `POST /api/users/current/avatar` - 上传/更新当前用户头像
- `GET /api/users/basic/{userId}` - 获取用户基本信息

### 角色管理
- `GET /api/roles` - 获取角色列表
- `GET /api/roles/{id}` - 获取角色详情
- `POST /api/roles` - 创建角色
- `PUT /api/roles/{id}` - 更新角色
- `DELETE /api/roles/{id}` - 删除角色
- `PUT /api/roles/{id}/permissions` - 给角色分配权限
- `DELETE /api/roles/batch` - 批量删除角色

### 权限管理
- `GET /api/permissions` - 获取权限列表
- `GET /api/permissions/{id}` - 获取权限详情
- `POST /api/permissions` - 创建权限
- `PUT /api/permissions/{id}` - 更新权限
- `DELETE /api/permissions/{id}` - 删除权限
- `DELETE /api/permissions/batch` - 批量删除权限

## 技术栈

- Spring Boot 3.3.9
- Spring Security
- Spring Data JPA
- Spring Data Redis
- JWT (JSON Web Token)
- Kaptcha (验证码)
- Thymeleaf (邮件模板)
- MinIO/S3 (文件存储)
- OpenAPI/Swagger文档
- JUnit 5 (单元测试)
- Mockito (模拟测试)
- H2 Database (测试环境)
- MySQL (开发环境)
</file>

<file path="docs/系统设计说明.md">
# 在线课程平台系统设计说明

## 认证与授权设计

### 邮箱验证
- 采用邮箱验证码方式确保邮箱真实性
- 验证码有效期：5分钟
- 存储方式：Redis（key前缀：email:verification:）
- 邮件模板：使用Thymeleaf模板引擎
- 验证流程：
  1. 用户获取图形验证码
  2. 验证图形验证码后发送邮箱验证码
  3. 注册时验证邮箱验证码
  4. 验证通过后完成注册

### 邮箱更新
- 采用专门的邮箱更新验证码确保邮箱真实性和操作安全性
- 验证码有效期：5分钟
- 存储方式：与注册验证码相同，使用Redis存储
- 专用邮件模板：email-update-code.html
- 更新流程：
  1. 用户获取图形验证码
  2. 验证图形验证码后发送邮箱更新验证码到新邮箱
  3. 用户提交更新请求，提供验证码和当前密码
  4. 系统验证密码和验证码，验证通过后更新邮箱

### JWT认证
- 采用无状态JWT认证方式
- 实现方式：短token + 刷新token模式
- 访问token有效期：1小时
- 刷新token有效期：7天
- 刷新机制：访问token过期后，使用刷新token获取新的访问token
- token黑名单：使用Redis存储已注销但未过期的token

### 角色权限设计（RBAC）
系统定义了四种基本角色：

1. **普通用户（ROLE_USER）**
   - 默认角色，用户注册后即具有此角色
   - 权限：浏览课程、购买课程、学习课程、评价课程等

2. **管理员（ROLE_ADMIN）**
   - 系统管理员，具有最高权限
   - 权限：用户管理、角色管理、权限管理、系统配置等

3. **审核人员（ROLE_REVIEWER）**
   - 负责内容审核
   - 权限：审核课程内容、审核评论、内容管理等

4. **机构用户（ROLE_INSTITUTION）**
   - 课程提供机构账号
   - 特殊属性：机构ID（institutionId）
   - 权限：创建课程、管理课程、查看统计数据等

### 权限粒度控制
- 基于URL的权限控制
- 基于方法的权限控制（@PreAuthorize）
- 自定义权限评估器
- 接口权限文档化

## 缓存设计

### Redis缓存
- 用途：
  - 会话管理
  - 接口限流
  - 热点数据缓存
  - Token黑名单
  - 验证码存储
    - 图形验证码：5分钟过期
    - 邮箱验证码：5分钟过期
  
- 缓存策略：
  - 热门课程列表：60分钟
  - 用户信息：30分钟
  - 课程详情：60分钟
  - 分类数据：120分钟
  
- 缓存前缀设计：
  - 用户相关：`user:${userId}:*`
  - 课程相关：`course:${courseId}:*`
  - 令牌黑名单：`token:blacklist:*`
  - 图形验证码：`captcha:${key}`
  - 邮箱验证码：`email:verification:${email}`
  - 邮箱更新验证码：`email:update:code:${userId}:${newEmail}`

- 缓存更新策略：
  - 更新数据库同时更新缓存
  - 设置合理的过期时间
  - 对热点数据采用预热机制

## 数据库设计

### 用户权限相关表
- `users` - 用户基本信息
  - id：主键
  - username：用户名
  - password：密码（加密存储）
  - email：邮箱
  - phone：手机号
  - avatar：头像
  - nickname：昵称
  - status：状态（正常、禁用、锁定）
  - created_at：创建时间
  - updated_at：更新时间
  - last_login_at：最后登录时间
  - institution_id：机构ID（仅机构用户）

- `roles` - 角色信息
  - id：主键
  - name：角色名称
  - code：角色编码（ROLE_USER, ROLE_ADMIN等）
  - description：角色描述
  - created_at：创建时间
  - updated_at：更新时间

- `permissions` - 权限信息
  - id：主键
  - name：权限名称
  - code：权限编码
  - description：权限描述
  - url：资源路径
  - method：HTTP方法
  - created_at：创建时间
  - updated_at：更新时间

- `user_roles` - 用户角色关联
  - user_id：用户ID
  - role_id：角色ID
  - created_at：创建时间

- `role_permissions` - 角色权限关联
  - role_id：角色ID
  - permission_id：权限ID
  - created_at：创建时间

- `institutions` - 机构信息
  - id：主键
  - name：机构名称
  - logo：机构Logo
  - description：机构描述
  - status：状态
  - contact_person：联系人
  - contact_phone：联系电话
  - contact_email：联系邮箱
  - address：地址
  - created_at：创建时间
  - updated_at：更新时间

### 课程相关表
- `courses` - 课程基本信息
- `chapters` - 课程章节
- `lessons` - 课程小节
- `resources` - 课程资源（视频、文档等）
- `categories` - 课程分类
- `tags` - 课程标签
- `course_tags` - 课程与标签关联

### 用户学习相关表
- `enrollments` - 课程报名/购买记录
- `learning_progress` - 学习进度
- `user_notes` - 用户笔记
- `favorites` - 用户收藏

### 评价与互动相关表
- `comments` - 评论信息
- `replies` - 回复信息
- `ratings` - 评分信息

### 交易相关表
- `orders` - 订单信息
- `payments` - 支付记录
- `refunds` - 退款记录
- `coupons` - 优惠券

## 业务流程

### 注册登录流程
1. 用户注册：输入基本信息 → 验证邮箱/手机 → 创建账号 → 分配默认角色
2. 用户登录：验证身份 → 生成JWT令牌（访问+刷新）→ 返回给客户端
3. 令牌刷新：访问令牌过期 → 使用刷新令牌请求新令牌 → 验证刷新令牌有效性 → 生成新令牌

### 用户自身管理流程

#### 个人信息管理
1. 获取个人信息：调用`/api/users/current`接口获取当前登录用户详细信息
2. 更新个人信息：调用`/api/users/current`接口更新昵称、手机号等信息

#### 密码修改
1. 输入旧密码和新密码
2. 系统验证旧密码正确性
3. 系统验证新旧密码不同
4. 更新密码并加密存储

#### 头像上传
1. 用户选择头像文件
2. 系统验证文件类型（只允许图片）和大小（最大2MB）
3. 上传到MinIO存储服务，生成唯一文件名
4. 生成访问URL并更新用户头像字段

#### 邮箱更新
1. 用户输入新邮箱
2. 系统向新邮箱发送验证码（使用专用邮件模板）
3. 用户提交验证码和当前密码
4. 系统验证密码和验证码
5. 更新用户邮箱

## 用户自身管理功能详细设计

### 功能概述
用户自身管理功能是指已登录用户对自己账号信息进行管理的功能集合，包括查看个人信息、修改个人资料、修改密码、上传头像和更新邮箱等。此功能模块的目标是提供用户对自身信息的完整管理能力，提升用户体验。

### API设计

#### 1. 获取当前用户信息

- **请求方法**: `GET`
- **接口路径**: `/api/users/current`
- **权限要求**: 已登录用户
- **实现逻辑**:
  1. 从安全上下文中获取当前用户ID
  2. 根据用户ID从数据库中查询用户信息
  3. 返回用户信息，包括基本信息和角色信息

#### 2. 更新个人资料

- **请求方法**: `PUT`
- **接口路径**: `/api/users/current`
- **权限要求**: 已登录用户
- **请求参数**: 用户可修改的信息字段（昵称、手机号等）
- **实现逻辑**:
  1. 从安全上下文中获取当前用户ID
  2. 验证请求参数（昵称长度、手机号格式等）
  3. 更新用户信息到数据库
  4. 返回更新后的用户信息

#### 3. 修改密码

- **请求方法**: `PUT`
- **接口路径**: `/api/users/current/password`
- **权限要求**: 已登录用户
- **请求参数**: 旧密码、新密码、确认密码
- **实现逻辑**:
  1. 从安全上下文中获取当前用户ID
  2. 验证旧密码是否正确
  3. 验证新密码与确认密码是否一致
  4. 验证新密码是否符合强度要求
  5. 加密新密码并更新到数据库
  6. 返回成功响应
- **安全考量**:
  - 验证旧密码以确保是用户本人操作
  - 新密码与确认密码必须一致
  - 新密码必须满足一定的强度要求
  - 新密码不能与旧密码相同

#### 4. 上传头像

- **请求方式**: `POST`
- **接口路径**: `/api/users/current/avatar`
- **权限要求**: 已登录用户
- **请求参数**: 头像图片文件（MultipartFile）
- **实现逻辑**:
  1. 从安全上下文中获取当前用户ID
  2. 验证上传的文件类型和大小
  3. 生成文件存储路径和文件名
  4. 上传文件到MinIO/S3服务
  5. 更新用户头像URL到数据库
  6. 返回头像URL
- **技术实现**:
  - 使用MinIO/S3服务作为文件存储基础设施
  - 采用统一的存储路径格式：`avatars/{userId}/{timestamp}_{filename}`
  - 对上传的图片进行压缩和格式转换，优化存储和加载性能
  - 设置文件大小限制（如最大2MB）和类型限制（仅允许jpg、png等图片格式）
  - 为每个用户创建唯一的存储路径，避免文件名冲突
  - 生成带有时间戳的文件名，防止缓存问题

#### 5. 更新邮箱

a. **获取邮箱更新验证码**
- **请求方法**: `POST`
- **接口路径**: `/api/users/current/email-code`
- **权限要求**: 已登录用户
- **请求参数**: 新邮箱地址
- **实现逻辑**:
  - 从安全上下文中获取当前用户ID
  - 验证新邮箱格式和唯一性
  - 生成6位数字验证码
  - 使用模板发送包含验证码的邮件到新邮箱
  - 将验证码存储到Redis中，设置过期时间
  - 返回发送成功响应

b. **更新邮箱**
- **请求方法**: `PUT`
- **接口路径**: `/api/users/current/email`
- **权限要求**: 已登录用户
- **请求参数**: 新邮箱地址、验证码
- **实现逻辑**:
  - 从安全上下文中获取当前用户ID
  - 从Redis中获取之前存储的验证码
  - 验证用户提交的验证码是否正确
  - 如果验证通过，更新用户邮箱到数据库
  - 删除Redis中的验证码记录
  - 返回更新成功响应

### 安全控制

- **接口权限控制**: 所有用户自身管理的接口都需要用户登录才能访问，不需要额外的角色权限
- **数据权限控制**: 用户只能查看和修改自己的信息，通过JWT令牌中的用户ID来限制数据访问范围
- **数据验证**:
  - 所有输入数据都进行验证，防止恶意数据
  - 邮箱唯一性验证
  - 密码强度检查（长度、复杂度）
  - 文件上传类型和大小限制

### 性能优化

- **头像处理**:
  - 对上传的头像进行压缩和裁剪，减小存储空间和传输大小
  - 使用MinIO/S3等对象存储服务，提高文件存取效率
  - 考虑使用CDN加速头像加载
- **并发控制**:
  - 对频繁操作（如发送验证码）设置请求频率限制
  - 使用乐观锁防止数据并发修改冲突

## 文件存储设计

本系统实现了双重文件存储方案，支持MinIO对象存储和AWS S3兼容API，为文件上传、头像存储等功能提供基础设施。

### MinIO存储
- **配置属性**：
  - endpoint：MinIO服务端点
  - accessKey：访问密钥
  - secretKey：访问密钥密文
  - bucketName：存储桶名称
  
- **功能实现**：
  - 文件上传：支持流式上传，自动设置内容类型
  - 文件删除：根据对象名删除文件
  - URL生成：获取文件访问URL
  - 文件列表：获取存储桶中所有文件
  - 自动创建存储桶：检查并创建存储桶
  
- **应用场景**：
  - 用户头像存储
  - 课程资源文件存储
  - 临时文件存储

### AWS S3兼容API
- **配置属性**：
  - endpoint：S3服务端点
  - region：区域
  - accessKey：访问密钥
  - secretKey：访问密钥密文
  - bucketName：存储桶名称
  - pathStyleAccess：是否使用路径样式访问
  
- **功能实现**：
  - 对象操作：上传、下载、删除
  - 存储桶管理：创建、检查、列出
  - 预签名URL：生成带有时效性的访问URL
  
- **测试策略**：
  - 集成测试采用环境变量控制（MINIO_ENABLED, S3_ENABLED）
  - 在CI/CD环境中可按需启用

### 存储策略
- **存储路径设计**：
  - 用户头像：`avatars/{userId}/{filename}`
  - 课程资源：`courses/{courseId}/{resourceType}/{filename}`
  - 临时文件：`temp/{uuid}/{filename}`
  
- **文件命名规则**：
  - 使用UUID生成唯一文件名
  - 保留原始文件扩展名
  - 添加时间戳避免缓存问题
  
- **安全考量**：
  - 访问控制：非公开文件通过预签名URL访问
  - 文件验证：检查文件类型和大小
  - 过期策略：临时文件设置TTL自动清理

### 课程发布流程
1. 机构用户创建课程草稿
2. 上传课程内容和资料
3. 提交审核
4. 审核人员审核课程内容
5. 审核通过后发布课程
6. 课程上线

### 购买学习流程
1. 用户浏览课程
2. 下单购买（或免费报名）
3. 支付完成
4. 开始学习
5. 记录学习进度
6. 完成学习后评价
</file>

<file path="docs/下一阶段开发需求.md">
# 在线课程平台下一阶段开发需求

## 当前系统状态

目前系统已经实现了以下功能：

1. **用户认证模块**
   - 用户注册（包含邮箱验证）
   - 用户登录
   - 令牌刷新
   - 用户注销

2. **邮箱验证模块**
   - 邮件服务集成
   - 验证码生成和验证
   - Redis存储验证码
   - 邮件模板支持

3. **权限管理模块**
   - 用户管理
   - 角色管理
   - 权限管理
   - 基于RBAC的权限控制

4. **用户自身管理模块**
   - 获取当前用户信息
   - 更新个人资料
   - 修改密码
   - 上传头像（MinIO存储）
   - 更新邮箱（验证码验证）
   - 专用邮箱更新验证码

5. **基础设施**
   - JWT认证
   - Redis缓存
   - H2测试数据库
   - 全局异常处理
   - API文档支持
   - 文件存储服务

## 下一阶段开发任务

根据项目进度和系统需求，下一阶段的开发任务将集中在课程管理功能上。

### 一、课程管理基础模块（最高优先级）

实现平台的核心业务功能，包括课程的管理、分类和标签等。

#### 1. 课程基础实体设计

**实体类设计**:
- `Course`: 课程基本信息
- `Chapter`: 课程章节
- `Lesson`: 课程小节
- `Resource`: 课程资源（视频、文档等）
- `Category`: 课程分类
- `Tag`: 课程标签
- `CourseTag`: 课程与标签关联

**实现步骤**:
1. 创建上述实体类及其关联关系
2. 设计合理的字段和约束
3. 实现对应的Repository接口

#### 2. 课程分类管理API

**API设计**:
- `GET /api/categories` - 获取分类列表
- `GET /api/categories/{id}` - 获取分类详情
- `POST /api/categories` - 创建分类（管理员）
- `PUT /api/categories/{id}` - 更新分类（管理员）
- `DELETE /api/categories/{id}` - 删除分类（管理员）

**实现步骤**:
1. 创建`CategoryController`及相关DTO/VO类
2. 实现`CategoryService`及其实现类
3. 实现分类的树形结构处理逻辑

#### 3. 课程标签管理API

**API设计**:
- `GET /api/tags` - 获取标签列表
- `GET /api/tags/{id}` - 获取标签详情
- `POST /api/tags` - 创建标签（管理员）
- `PUT /api/tags/{id}` - 更新标签（管理员）
- `DELETE /api/tags/{id}` - 删除标签（管理员）

**实现步骤**:
1. 创建`TagController`及相关DTO/VO类
2. 实现`TagService`及其实现类
3. 实现标签的热门标签推荐逻辑

#### 4. 课程基础管理API

**API设计**:
- `GET /api/courses` - 获取课程列表（支持分页、筛选）
- `GET /api/courses/{id}` - 获取课程详情
- `POST /api/courses` - 创建课程（机构用户和管理员）
- `PUT /api/courses/{id}` - 更新课程（课程创建者和管理员）
- `DELETE /api/courses/{id}` - 删除课程（课程创建者和管理员）
- `GET /api/courses/{id}/chapters` - 获取课程章节
- `POST /api/courses/{id}/chapters` - 创建课程章节

**实现步骤**:
1. 创建`CourseController`及相关DTO/VO类
2. 实现`CourseService`及其实现类
3. 实现课程的搜索和筛选逻辑
4. 实现课程内容管理逻辑

### 二、内容审核功能（次高优先级）

实现课程内容审核功能，确保平台内容质量。

#### 1. 审核流程设计

**功能设计**:
- 课程内容提交审核
- 审核人员审核内容
- 审核结果通知
- 驳回原因反馈

**实现步骤**:
1. 设计审核相关实体类
2. 设计审核流程和状态机
3. 实现审核服务和API接口

#### 2. 审核管理API

**API设计**:
- `POST /api/courses/{id}/submit` - 提交课程审核
- `GET /api/reviews` - 获取待审核列表（审核人员）
- `PUT /api/reviews/{id}` - 更新审核状态（审核人员）
- `GET /api/reviews/history` - 获取审核历史记录

**实现步骤**:
1. 创建`ReviewController`及相关DTO/VO类
2. 实现`ReviewService`及其实现类
3. 实现审核流程和权限控制

## 技术实现要点

1. **安全性考虑**
   - 严格的权限控制，确保只有授权用户能创建和管理课程
   - 文件上传安全验证，防止恶意文件

2. **性能优化**
   - 课程列表和搜索的缓存策略
   - 文件资源的CDN加速策略

3. **权限控制**
   - 基于角色的课程管理权限
   - 基于机构的资源隔离

4. **数据验证**
   - 严格验证课程内容的完整性和合法性
   - 确保资源引用的有效性

## 开发优先级

1. 完成课程基础实体设计（最高优先级）
2. 实现课程分类和标签管理（高优先级）
3. 实现课程基础管理功能（高优先级）
4. 实现课程内容结构管理（中优先级）
5. 实现内容审核流程（中优先级）

通过以上功能的实现，可以搭建起平台的核心课程管理框架，为后续的用户学习、评价、订单等功能提供基础。
</file>

<file path="docs/项目结构说明.md">
# 项目结构说明

本项目采用分层架构，遵循最佳实践进行组织：

```
src/main/java/com/zhangziqi/online_course_mine
├── config                 # 配置类
│   ├── security          # 安全相关配置
│   ├── redis            # Redis相关配置
├── constant               # 常量定义
├── controller             # 控制器层
├── exception              # 自定义异常
├── model                  # 数据模型
│   ├── entity           # 实体类
│   ├── dto              # 数据传输对象
│   ├── vo               # 视图对象
│   ├── enums            # 枚举类型
├── repository             # 数据访问层
├── security               # 安全相关组件
│   ├── jwt              # JWT相关
├── service                # 服务层
│   ├── impl             # 服务实现
├── util                   # 工具类
```

## 分层职责

1. **Controller层**：负责处理HTTP请求，参数验证，返回响应
2. **Service层**：实现业务逻辑
3. **Repository层**：数据访问操作
4. **Model层**：数据结构定义
   - Entity: JPA实体类
   - DTO: 数据传输对象，用于服务层之间的数据传递
   - VO: 视图对象，用于前端展示
5. **Config层**：应用配置
6. **Security层**：安全相关组件
7. **Util层**：通用工具类

## 命名规范

- **Controller**: 以Controller结尾（如UserController）
- **Service**: 接口以Service结尾，实现类以ServiceImpl结尾
- **Repository**: 以Repository结尾
- **Entity**: 实体类名与表名对应
- **DTO**: 以DTO结尾
- **VO**: 以VO结尾

## 代码规范

- 使用Lombok简化代码
- 使用统一的返回格式
- 异常统一处理
- 注释完善
- 单元测试覆盖关键逻辑
</file>

<file path="docs/项目配置说明.md">
# 在线课程平台项目配置说明

## 环境配置

### 开发环境 (dev)
- 数据库：MySQL
- 端口：8080
- 配置文件：`application-dev.yml`
- 特点：
  - JPA自动更新表结构（ddl-auto: update）
  - SQL语句以单行形式显示
  - 详细的SQL日志记录
  - 使用163邮箱服务
  - Redis存储验证码

### 测试环境 (test)
- 数据库：H2（内存数据库）
- 端口：8081
- 配置文件：`application-test.yml`
- 特点：
  - 每次启动重新创建表（ddl-auto: create-drop）
  - H2控制台访问：http://localhost:8081/h2-console
  - SQL语句以单行形式显示
  - 详细的SQL日志记录
  - 允许Bean覆盖：`spring.main.allow-bean-definition-overriding=true`
  - Redis使用独立数据库（database=1）
  - 使用测试邮箱配置

## 测试环境特殊配置

测试环境下启用了一些特殊配置以支持测试：

```yaml
spring:
  main:
    allow-bean-definition-overriding: true  # 允许Bean覆盖，解决集成测试中的Bean冲突
```

测试环境还配置了专用的安全配置类：

```java
@TestConfiguration
@EnableWebSecurity
@Profile("test")  // 确保只在测试环境激活
public class TestSecurityConfig {
    // 提供测试环境下的安全组件
}
```

## 日志配置
```yaml
logging:
  level:
    org.hibernate.SQL: DEBUG                           # 显示SQL语句
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE   # 显示SQL参数
    com.zhangziqi: DEBUG                              # 应用日志级别
```

## JWT配置
- 访问令牌有效期：1小时
- 刷新令牌有效期：7天
- 密钥：环境相关，需要在生产环境中妥善保管

## 数据库配置

### MySQL（开发环境）
```yaml
url: jdbc:mysql://localhost:3306/online_course?useSSL=false&serverTimezone=Asia/Shanghai&characterEncoding=utf-8
username: root
password: root
```

### H2（测试环境）
```yaml
url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
username: sa
password: 
```

## 切换环境
1. 通过配置文件：
   ```yaml
   spring:
     profiles:
       active: dev  # 或 test
   ```

2. 通过命令行：
   ```bash
   java -jar app.jar --spring.profiles.active=dev
   ```

3. 通过环境变量：
   ```bash
   export SPRING_PROFILES_ACTIVE=dev
   ```

## 注意事项
1. 生产环境配置文件未包含在版本控制中
2. 测试环境使用H2数据库，无需额外配置
3. JWT密钥在不同环境中应该不同
4. SQL日志格式化配置已优化为单行显示
5. 测试环境下Redis使用单独的数据库，避免与开发环境冲突

## 依赖版本
- Spring Boot: 3.3.9
- Java: 17
- JWT: 0.12.5
- 其他依赖版本由Spring Boot管理

## 文件存储配置

### MinIO配置
```yaml
minio:
  endpoint: http://localhost:9000
  access-key: minioadmin
  secret-key: minioadmin
  bucket-name: online-course
```

### AWS S3兼容API配置
```yaml
aws:
  s3:
    endpoint: http://localhost:9000
    region: us-east-1
    access-key: minioadmin
    secret-key: minioadmin
    bucket-name: online-course-s3
    path-style-access: true
```

### 开发环境文件存储配置
在开发环境中，可以使用Docker快速启动MinIO服务：
```bash
docker run -p 9000:9000 -p 9001:9001 --name minio \
  -e "MINIO_ROOT_USER=minioadmin" \
  -e "MINIO_ROOT_PASSWORD=minioadmin" \
  -v $(pwd)/minio-data:/data \
  minio/minio server /data --console-address ":9001"
```

### 测试环境文件存储配置
测试环境下通过环境变量控制是否执行集成测试：
- MINIO_ENABLED=true：启用MinIO测试
- S3_ENABLED=true：启用S3 API测试

测试中默认跳过这些需要外部依赖的测试，只在明确设置环境变量时执行。

## 邮件服务配置

### 开发环境（163邮箱）
```yaml
spring:
  mail:
    host: smtp.163.com
    username: your-email@163.com
    password: your-smtp-password
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
```

### 测试环境（模拟邮箱）
```yaml
spring:
  mail:
    host: smtp.qq.com
    port: 587
    username: test@qq.com
    password: test-password
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
```

## Redis配置

### 开发环境
```yaml
spring:
  data:
    redis:
      host: localhost
      port: 6379
      database: 0
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
```

### 测试环境
```yaml
spring:
  data:
    redis:
      host: localhost
      database: 1  # 使用独立数据库
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
```
</file>

<file path="docs/api.md">
{
  "openapi": "3.0.1",
  "info": {
    "title": "在线课程平台API",
    "description": "在线课程平台的RESTful API文档",
    "contact": {
      "name": "在线课程平台团队",
      "url": "https://example.com",
      "email": "support@example.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "Bearer Authentication": []
    }
  ],
  "tags": [
    {
      "name": "角色管理",
      "description": "角色查询、创建、编辑、删除等功能"
    },
    {
      "name": "用户管理",
      "description": "用户查询、创建、编辑、删除等功能"
    },
    {
      "name": "认证接口",
      "description": "包括注册、登录、刷新令牌等接口"
    },
    {
      "name": "权限管理",
      "description": "权限查询、创建、编辑、删除等功能"
    }
  ],
  "paths": {
    "/api/users/{id}": {
      "get": {
        "tags": [
          "用户管理"
        ],
        "summary": "获取用户详情",
        "description": "根据用户ID获取用户详情",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "用户ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultUserVO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "用户管理"
        ],
        "summary": "更新用户",
        "description": "更新用户信息",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "用户ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultUserVO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "用户管理"
        ],
        "summary": "删除用户",
        "description": "根据用户ID删除用户",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "用户ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}/roles": {
      "put": {
        "tags": [
          "用户管理"
        ],
        "summary": "给用户分配角色",
        "description": "给用户分配角色",
        "operationId": "assignRoles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "用户ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "description": "角色ID列表",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultUserVO"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": [
          "用户管理"
        ],
        "summary": "获取当前用户信息",
        "description": "获取当前登录用户的详细信息",
        "operationId": "getCurrentUser",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultUserVO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "用户管理"
        ],
        "summary": "更新当前用户信息",
        "description": "更新当前登录用户的个人信息",
        "operationId": "updateCurrentUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultUserVO"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/current/password": {
      "put": {
        "tags": [
          "用户管理"
        ],
        "summary": "修改密码",
        "description": "修改当前用户密码",
        "operationId": "changePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/current/email": {
      "put": {
        "tags": [
          "用户管理"
        ],
        "summary": "更新邮箱",
        "description": "更新当前用户邮箱（需验证码）",
        "operationId": "updateEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailUpdateDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultUserVO"
                }
              }
            }
          }
        }
      }
    },
    "/api/roles/{id}": {
      "get": {
        "tags": [
          "角色管理"
        ],
        "summary": "获取角色详情",
        "description": "根据角色ID获取角色详情",
        "operationId": "getRoleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "角色ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultRoleVO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "角色管理"
        ],
        "summary": "更新角色",
        "description": "更新角色信息",
        "operationId": "updateRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "角色ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultRoleVO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "角色管理"
        ],
        "summary": "删除角色",
        "description": "根据角色ID删除角色",
        "operationId": "deleteRole",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "角色ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/roles/{id}/permissions": {
      "put": {
        "tags": [
          "角色管理"
        ],
        "summary": "给角色分配权限",
        "description": "给角色分配权限",
        "operationId": "assignPermissions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "角色ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "description": "权限ID列表",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultRoleVO"
                }
              }
            }
          }
        }
      }
    },
    "/api/permissions/{id}": {
      "get": {
        "tags": [
          "权限管理"
        ],
        "summary": "获取权限详情",
        "description": "根据权限ID获取权限详情",
        "operationId": "getPermissionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "权限ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultPermissionVO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "权限管理"
        ],
        "summary": "更新权限",
        "description": "更新权限信息",
        "operationId": "updatePermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "权限ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultPermissionVO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "权限管理"
        ],
        "summary": "删除权限",
        "description": "根据权限ID删除权限",
        "operationId": "deletePermission",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "权限ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "用户管理"
        ],
        "summary": "分页查询用户列表",
        "description": "根据条件分页查询用户列表",
        "operationId": "getUserList",
        "parameters": [
          {
            "name": "queryDTO",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UserQueryDTO"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultPageUserVO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "用户管理"
        ],
        "summary": "创建用户",
        "description": "创建新用户",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultUserVO"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/current/avatar": {
      "post": {
        "tags": [
          "用户管理"
        ],
        "summary": "上传头像",
        "description": "上传当前用户头像",
        "operationId": "uploadAvatar",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultMapStringString"
                }
              }
            }
          }
        }
      }
    },
    "/api/roles": {
      "get": {
        "tags": [
          "角色管理"
        ],
        "summary": "获取角色列表",
        "description": "获取所有角色列表",
        "operationId": "getRoleList",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultListRoleVO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "角色管理"
        ],
        "summary": "创建角色",
        "description": "创建新角色",
        "operationId": "createRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultRoleVO"
                }
              }
            }
          }
        }
      }
    },
    "/api/permissions": {
      "get": {
        "tags": [
          "权限管理"
        ],
        "summary": "获取权限列表",
        "description": "获取所有权限列表",
        "operationId": "getPermissionList",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultListPermissionVO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "权限管理"
        ],
        "summary": "创建权限",
        "description": "创建新权限",
        "operationId": "createPermission",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultPermissionVO"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "认证接口"
        ],
        "summary": "用户注册",
        "description": "注册新用户",
        "operationId": "register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/refresh-token": {
      "post": {
        "tags": [
          "认证接口"
        ],
        "summary": "刷新令牌",
        "description": "刷新JWT令牌",
        "operationId": "refreshToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultJwtTokenDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "认证接口"
        ],
        "summary": "注销",
        "description": "用户注销",
        "operationId": "logout",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "认证接口"
        ],
        "summary": "用户登录",
        "description": "用户登录获取JWT令牌",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultJwtTokenDTO"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/email-verification-code": {
      "post": {
        "tags": [
          "认证接口"
        ],
        "summary": "发送邮箱验证码",
        "description": "发送邮箱验证码（用于用户注册）",
        "operationId": "sendEmailVerificationCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailVerificationDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/email-update-code": {
      "post": {
        "tags": [
          "认证接口"
        ],
        "summary": "发送邮箱更新验证码",
        "description": "发送邮箱更新验证码（用于更换邮箱）",
        "operationId": "sendEmailUpdateCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailVerificationDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{id}/status": {
      "patch": {
        "tags": [
          "用户管理"
        ],
        "summary": "修改用户状态",
        "description": "修改用户状态（0-禁用，1-正常）",
        "operationId": "updateUserStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "用户ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "状态（0-禁用，1-正常）",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultUserVO"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/basic/{userId}": {
      "get": {
        "tags": [
          "用户管理"
        ],
        "summary": "获取用户基本信息",
        "description": "获取用户基本信息（用于前端展示）",
        "operationId": "getBasicUserInfo",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultUserVO"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/captcha/key": {
      "get": {
        "tags": [
          "认证接口"
        ],
        "summary": "获取验证码key",
        "description": "获取验证码key，用于后续获取验证码图片",
        "operationId": "getCaptchaKey",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultString"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/captcha/image/{key}": {
      "get": {
        "tags": [
          "认证接口"
        ],
        "summary": "获取验证码图片",
        "description": "根据验证码key获取对应的验证码图片",
        "operationId": "getCaptchaImage",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "验证码key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/batch": {
      "delete": {
        "tags": [
          "用户管理"
        ],
        "summary": "批量删除用户",
        "description": "批量删除用户",
        "operationId": "batchDeleteUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "用户ID列表",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/roles/batch": {
      "delete": {
        "tags": [
          "角色管理"
        ],
        "summary": "批量删除角色",
        "description": "批量删除角色",
        "operationId": "batchDeleteRoles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "角色ID列表",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/permissions/batch": {
      "delete": {
        "tags": [
          "权限管理"
        ],
        "summary": "批量删除权限",
        "description": "批量删除权限",
        "operationId": "batchDeletePermissions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "权限ID列表",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          },
          "204": {
            "description": "No Content",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResultVoid"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ResultVoid": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "UserDTO": {
        "required": [
          "email",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "用户ID",
            "format": "int64"
          },
          "username": {
            "maxLength": 20,
            "minLength": 4,
            "pattern": "^[a-zA-Z0-9_]+$",
            "type": "string",
            "description": "用户名",
            "example": "zhangsan"
          },
          "password": {
            "type": "string",
            "description": "密码"
          },
          "email": {
            "type": "string",
            "description": "邮箱",
            "example": "zhangsan@example.com"
          },
          "phone": {
            "pattern": "^1[3-9]\\d{9}$",
            "type": "string",
            "description": "手机号",
            "example": "13812345678"
          },
          "avatar": {
            "type": "string",
            "description": "头像"
          },
          "nickname": {
            "type": "string",
            "description": "昵称"
          },
          "status": {
            "type": "integer",
            "description": "状态：0-禁用，1-正常",
            "format": "int32"
          },
          "institutionId": {
            "type": "integer",
            "description": "机构ID",
            "format": "int64"
          },
          "roleIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "角色ID列表",
            "items": {
              "type": "integer",
              "description": "角色ID列表",
              "format": "int64"
            }
          }
        },
        "description": "用户数据"
      },
      "Permission": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "method": {
            "type": "string"
          }
        }
      },
      "ResultUserVO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/UserVO"
          }
        }
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "permissions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          }
        },
        "description": "角色列表"
      },
      "UserVO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "用户ID",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "email": {
            "type": "string",
            "description": "邮箱"
          },
          "phone": {
            "type": "string",
            "description": "手机号"
          },
          "avatar": {
            "type": "string",
            "description": "头像"
          },
          "nickname": {
            "type": "string",
            "description": "昵称"
          },
          "status": {
            "type": "integer",
            "description": "状态：0-禁用，1-正常",
            "format": "int32"
          },
          "institutionId": {
            "type": "integer",
            "description": "机构ID",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "description": "创建时间",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "更新时间",
            "format": "date-time"
          },
          "lastLoginAt": {
            "type": "string",
            "description": "最后登录时间",
            "format": "date-time"
          },
          "roles": {
            "uniqueItems": true,
            "type": "array",
            "description": "角色列表",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          }
        },
        "description": "用户信息"
      },
      "UserProfileDTO": {
        "type": "object",
        "properties": {
          "nickname": {
            "type": "string",
            "description": "昵称",
            "example": "张三"
          },
          "phone": {
            "pattern": "^1[3-9]\\d{9}$",
            "type": "string",
            "description": "手机号",
            "example": "13800138000"
          }
        },
        "description": "用户个人信息更新请求"
      },
      "ChangePasswordDTO": {
        "required": [
          "confirmPassword",
          "newPassword",
          "oldPassword"
        ],
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "description": "旧密码",
            "example": "oldPassword123"
          },
          "newPassword": {
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,20}$",
            "type": "string",
            "description": "新密码",
            "example": "newPassword123"
          },
          "confirmPassword": {
            "type": "string",
            "description": "确认密码",
            "example": "newPassword123"
          }
        },
        "description": "密码修改请求"
      },
      "EmailUpdateDTO": {
        "required": [
          "emailCode",
          "newEmail",
          "password"
        ],
        "type": "object",
        "properties": {
          "newEmail": {
            "type": "string",
            "description": "新邮箱",
            "example": "newemail@example.com"
          },
          "emailCode": {
            "type": "string",
            "description": "邮箱验证码",
            "example": "123456"
          },
          "password": {
            "type": "string",
            "description": "当前密码",
            "example": "password123"
          }
        },
        "description": "邮箱更新请求"
      },
      "RoleDTO": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "角色ID",
            "format": "int64"
          },
          "name": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string",
            "description": "角色名称",
            "example": "系统管理员"
          },
          "code": {
            "maxLength": 50,
            "minLength": 4,
            "pattern": "^ROLE_[A-Z0-9_]+$",
            "type": "string",
            "description": "角色编码",
            "example": "ROLE_ADMIN"
          },
          "description": {
            "type": "string",
            "description": "角色描述"
          },
          "permissionIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "权限ID列表",
            "items": {
              "type": "integer",
              "description": "权限ID列表",
              "format": "int64"
            }
          }
        },
        "description": "角色数据"
      },
      "ResultRoleVO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/RoleVO"
          }
        }
      },
      "RoleVO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "角色ID",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "角色名称"
          },
          "code": {
            "type": "string",
            "description": "角色编码"
          },
          "description": {
            "type": "string",
            "description": "角色描述"
          },
          "createdAt": {
            "type": "string",
            "description": "创建时间",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "更新时间",
            "format": "date-time"
          },
          "permissions": {
            "uniqueItems": true,
            "type": "array",
            "description": "权限列表",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          }
        },
        "description": "角色信息"
      },
      "PermissionDTO": {
        "required": [
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "权限ID",
            "format": "int64"
          },
          "name": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string",
            "description": "权限名称",
            "example": "用户查询"
          },
          "code": {
            "maxLength": 50,
            "minLength": 4,
            "pattern": "^[A-Z0-9_]+$",
            "type": "string",
            "description": "权限编码",
            "example": "USER_QUERY"
          },
          "description": {
            "type": "string",
            "description": "权限描述"
          },
          "url": {
            "type": "string",
            "description": "资源URL"
          },
          "method": {
            "type": "string",
            "description": "HTTP方法",
            "example": "GET"
          }
        },
        "description": "权限数据"
      },
      "PermissionVO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "权限ID",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "权限名称"
          },
          "code": {
            "type": "string",
            "description": "权限编码"
          },
          "description": {
            "type": "string",
            "description": "权限描述"
          },
          "url": {
            "type": "string",
            "description": "资源URL"
          },
          "method": {
            "type": "string",
            "description": "HTTP方法"
          },
          "createdAt": {
            "type": "string",
            "description": "创建时间",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "更新时间",
            "format": "date-time"
          }
        },
        "description": "权限信息"
      },
      "ResultPermissionVO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/PermissionVO"
          }
        }
      },
      "ResultMapStringString": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RegisterDTO": {
        "required": [
          "captchaCode",
          "captchaKey",
          "email",
          "emailCode",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "maxLength": 20,
            "minLength": 4,
            "pattern": "^[a-zA-Z0-9_]+$",
            "type": "string",
            "description": "用户名",
            "example": "zhangsan"
          },
          "password": {
            "maxLength": 20,
            "minLength": 6,
            "type": "string",
            "description": "密码",
            "example": "password123"
          },
          "email": {
            "type": "string",
            "description": "邮箱",
            "example": "zhangsan@example.com"
          },
          "phone": {
            "pattern": "^1[3-9]\\d{9}$",
            "type": "string",
            "description": "手机号",
            "example": "13812345678"
          },
          "captchaKey": {
            "type": "string",
            "description": "验证码Key",
            "example": "123456"
          },
          "captchaCode": {
            "type": "string",
            "description": "验证码",
            "example": "1234"
          },
          "emailCode": {
            "maxLength": 6,
            "minLength": 6,
            "pattern": "^\\d{6}$",
            "type": "string",
            "description": "邮箱验证码",
            "example": "123456"
          }
        },
        "description": "注册请求"
      },
      "RefreshTokenDTO": {
        "required": [
          "refreshToken"
        ],
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "刷新令牌",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "description": "刷新令牌请求"
      },
      "JwtTokenDTO": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "tokenType": {
            "type": "string"
          },
          "expiresIn": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ResultJwtTokenDTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/JwtTokenDTO"
          }
        }
      },
      "LoginDTO": {
        "required": [
          "captchaCode",
          "captchaKey",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "用户名",
            "example": "zhangsan"
          },
          "password": {
            "type": "string",
            "description": "密码",
            "example": "password123"
          },
          "captchaKey": {
            "type": "string",
            "description": "验证码Key",
            "example": "123456"
          },
          "captchaCode": {
            "type": "string",
            "description": "验证码",
            "example": "1234"
          }
        },
        "description": "登录请求"
      },
      "EmailVerificationDTO": {
        "required": [
          "captchaCode",
          "captchaKey",
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "邮箱",
            "example": "zhangsan@example.com"
          },
          "captchaKey": {
            "type": "string",
            "description": "验证码Key",
            "example": "123456"
          },
          "captchaCode": {
            "type": "string",
            "description": "验证码",
            "example": "1234"
          }
        },
        "description": "邮箱验证码请求"
      },
      "UserQueryDTO": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "用户名"
          },
          "email": {
            "type": "string",
            "description": "邮箱"
          },
          "phone": {
            "type": "string",
            "description": "手机号"
          },
          "status": {
            "type": "integer",
            "description": "状态：0-禁用，1-正常",
            "format": "int32"
          },
          "institutionId": {
            "type": "integer",
            "description": "机构ID",
            "format": "int64"
          },
          "roleId": {
            "type": "integer",
            "description": "角色ID",
            "format": "int64"
          },
          "pageNum": {
            "type": "integer",
            "description": "页码",
            "format": "int32",
            "default": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "每页条数",
            "format": "int32",
            "default": 10
          }
        },
        "description": "用户查询参数"
      },
      "PageUserVO": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserVO"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortObject"
            }
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortObject"
            }
          },
          "paged": {
            "type": "boolean"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "unpaged": {
            "type": "boolean"
          }
        }
      },
      "ResultPageUserVO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/PageUserVO"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "direction": {
            "type": "string"
          },
          "nullHandling": {
            "type": "string"
          },
          "ascending": {
            "type": "boolean"
          },
          "property": {
            "type": "string"
          },
          "ignoreCase": {
            "type": "boolean"
          }
        }
      },
      "ResultListRoleVO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleVO"
            }
          }
        }
      },
      "ResultListPermissionVO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionVO"
            }
          }
        }
      },
      "ResultString": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer Authentication": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
</file>

<file path="docs/API接口说明.md">
# 在线课程平台API接口说明

## 基础信息

- 接口基础路径: `/api`
- 认证方式: Bearer Token
- 响应格式: JSON
- Swagger地址: `/swagger-ui.html`

## 通用响应格式

所有接口统一使用以下响应格式：

```json
{
  "code": 200,          // 状态码，200表示成功，其他值表示失败
  "message": "操作成功",  // 消息描述
  "data": {}            // 数据，可能为空
}
```

## 错误码说明

| 错误码 | 描述 |
| ------ | ---- |
| 200 | 操作成功 |
| 400 | 请求参数错误 |
| 401 | 未认证或认证失败 |
| 403 | 权限不足 |
| 404 | 资源不存在 |
| 500 | 服务器内部错误 |

## 认证接口

### 获取验证码key

获取验证码key，用于后续获取验证码图片

- 请求方式: `GET`
- 接口地址: `/api/auth/captcha/key`
- 权限要求: 无需认证

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": "123e4567-e89b-12d3-a456-426614174000"  // 验证码key
  }
  ```

### 获取验证码图片

根据验证码key获取验证码图片

- 请求方式: `GET`
- 接口地址: `/api/auth/captcha/image/{key}`
- 权限要求: 无需认证
- 路径参数:
  - `key`: 验证码key

- 响应:
  - 图片数据（JPEG格式）
  - 响应头:
    - `Content-Type: image/jpeg`
    - `Cache-Control: no-store, no-cache, must-revalidate`

### 发送邮箱验证码

发送邮箱验证码，用于用户注册

- 请求方式: `POST`
- 接口地址: `/api/auth/email-verification-code`
- 权限要求: 无需认证
- 请求参数:
  ```json
  {
    "email": "test@example.com",          // 邮箱地址
    "captchaKey": "123456",               // 验证码key
    "captchaCode": "1234"                 // 图形验证码
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

### 用户注册

注册新用户，需要先获取邮箱验证码

- 请求方式: `POST`
- 接口地址: `/api/auth/register`
- 权限要求: 无需认证
- 请求参数:
  ```json
  {
    "username": "zhangsan",               // 用户名，4-20位，只能包含字母、数字和下划线
    "password": "password123",            // 密码，6-20位
    "email": "zhangsan@example.com",      // 邮箱
    "phone": "13812345678",               // 手机号（可选）
    "captchaKey": "123456",               // 验证码key
    "captchaCode": "1234",                // 图形验证码
    "emailCode": "123456"                 // 邮箱验证码
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

### 用户登录

用户登录获取JWT令牌

- 请求方式: `POST`
- 接口地址: `/api/auth/login`
- 请求参数:
  ```json
  {
    "username": "zhangsan",               // 用户名
    "password": "password123",            // 密码
    "captchaKey": "123456",               // 验证码标识
    "captchaCode": "1234"                 // 验证码
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",  // 访问令牌
      "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...", // 刷新令牌
      "tokenType": "Bearer",                                     // 令牌类型
      "expiresIn": 3600000                                      // 过期时间（毫秒）
    }
  }
  ```

### 刷新令牌

刷新JWT令牌

- 请求方式: `POST`
- 接口地址: `/api/auth/refresh-token`
- 请求参数:
  ```json
  {
    "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."  // 刷新令牌
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",  // 新的访问令牌
      "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...", // 刷新令牌（不变）
      "tokenType": "Bearer",                                     // 令牌类型
      "expiresIn": 3600000                                      // 过期时间（毫秒）
    }
  }
  ```

### 注销

用户注销

- 请求方式: `POST`
- 接口地址: `/api/auth/logout`
- 请求头:
  - `Authorization`: Bearer Token

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

## 用户管理接口

### 获取用户列表

分页查询用户列表

- 请求方式: `GET`
- 接口地址: `/api/users`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  - `username`: 用户名（可选，模糊查询）
  - `email`: 邮箱（可选，模糊查询）
  - `phone`: 手机号（可选，模糊查询）
  - `status`: 状态（可选，0-禁用，1-正常）
  - `institutionId`: 机构ID（可选）
  - `roleId`: 角色ID（可选）
  - `pageNum`: 页码，默认1
  - `pageSize`: 每页条数，默认10

- 请求示例:
  ```
  GET /api/users?username=zhang&status=1&pageNum=1&pageSize=10
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "content": [
        {
          "id": 1,
          "username": "zhangsan",
          "email": "zhangsan@example.com",
          "phone": "13812345678",
          "avatar": "avatar.jpg",
          "nickname": "张三",
          "status": 1,
          "institutionId": null,
          "createdAt": "2023-01-01T12:00:00",
          "updatedAt": "2023-01-01T12:00:00",
          "lastLoginAt": "2023-01-01T12:00:00",
          "roles": [
            {
              "id": 1,
              "name": "普通用户",
              "code": "ROLE_USER"
            }
          ]
        }
      ],
      "pageable": {
        "pageNumber": 0,
        "pageSize": 10,
        "sort": {
          "empty": true,
          "sorted": false,
          "unsorted": true
        },
        "offset": 0,
        "paged": true,
        "unpaged": false
      },
      "last": true,
      "totalElements": 1,
      "totalPages": 1,
      "size": 10,
      "number": 0,
      "sort": {
        "empty": true,
        "sorted": false,
        "unsorted": true
      },
      "first": true,
      "numberOfElements": 1,
      "empty": false
    }
  }
  ```

### 获取用户详情

根据用户ID获取用户详情

- 请求方式: `GET`
- 接口地址: `/api/users/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 用户ID

- 请求示例:
  ```
  GET /api/users/1
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "zhangsan@example.com",
      "phone": "13812345678",
      "avatar": "avatar.jpg",
      "nickname": "张三",
      "status": 1,
      "institutionId": null,
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00",
      "lastLoginAt": "2023-01-01T12:00:00",
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        }
      ]
    }
  }
  ```

### 创建用户

创建新用户

- 请求方式: `POST`
- 接口地址: `/api/users`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  {
    "username": "zhangsan",               // 用户名，4-20位，只能包含字母、数字和下划线
    "password": "password123",            // 密码，6-20位
    "email": "zhangsan@example.com",      // 邮箱
    "phone": "13812345678",               // 手机号（可选）
    "avatar": "avatar.jpg",               // 头像（可选）
    "nickname": "张三",                    // 昵称（可选）
    "status": 1,                          // 状态：0-禁用，1-正常（可选，默认1）
    "institutionId": null,                // 机构ID（可选）
    "roleIds": [1]                        // 角色ID列表（可选，默认为普通用户）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "zhangsan@example.com",
      "phone": "13812345678",
      "avatar": "avatar.jpg",
      "nickname": "张三",
      "status": 1,
      "institutionId": null,
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00",
      "lastLoginAt": null,
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        }
      ]
    }
  }
  ```

### 更新用户

更新用户信息

- 请求方式: `PUT`
- 接口地址: `/api/users/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 用户ID
- 请求参数:
  ```json
  {
    "username": "zhangsan",               // 用户名（可选）
    "password": "newpassword123",         // 密码（可选）
    "email": "new_email@example.com",     // 邮箱（可选）
    "phone": "13812345678",               // 手机号（可选）
    "avatar": "new_avatar.jpg",           // 头像（可选）
    "nickname": "新昵称",                  // 昵称（可选）
    "status": 1,                          // 状态（可选）
    "institutionId": 1,                   // 机构ID（可选）
    "roleIds": [1, 2]                     // 角色ID列表（可选）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "new_email@example.com",
      "phone": "13812345678",
      "avatar": "new_avatar.jpg",
      "nickname": "新昵称",
      "status": 1,
      "institutionId": 1,
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:30:00",
      "lastLoginAt": "2023-01-01T12:00:00",
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        },
        {
          "id": 2,
          "name": "管理员",
          "code": "ROLE_ADMIN"
        }
      ]
    }
  }
  ```

### 删除用户

删除用户

- 请求方式: `DELETE`
- 接口地址: `/api/users/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 用户ID

- 请求示例:
  ```
  DELETE /api/users/1
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

### 修改用户状态

修改用户状态

- 请求方式: `PATCH`
- 接口地址: `/api/users/{id}/status`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 用户ID
- 请求参数:
  - `status`: 状态（0-禁用，1-正常）

- 请求示例:
  ```
  PATCH /api/users/1/status?status=0
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "zhangsan@example.com",
      "status": 0,
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        }
      ]
    }
  }
  ```

### 给用户分配角色

给用户分配角色

- 请求方式: `PUT`
- 接口地址: `/api/users/{id}/roles`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 用户ID
- 请求参数:
  ```json
  [1, 2]  // 角色ID列表
  ```

- 请求示例:
  ```
  PUT /api/users/1/roles
  [1, 2]
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        },
        {
          "id": 2,
          "name": "管理员",
          "code": "ROLE_ADMIN"
        }
      ]
    }
  }
  ```

### 批量删除用户

批量删除用户

- 请求方式: `DELETE`
- 接口地址: `/api/users/batch`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  [1, 2]  // 用户ID列表
  ```

- 请求示例:
  ```
  DELETE /api/users/batch
  [1, 2]
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

## 角色管理接口

### 获取角色列表

获取角色列表

- 请求方式: `GET`
- 接口地址: `/api/roles`
- 权限要求: `ROLE_ADMIN`

- 请求示例:
  ```
  GET /api/roles
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": [
      {
        "id": 1,
        "name": "普通用户",
        "code": "ROLE_USER",
        "description": "普通用户角色",
        "createdAt": "2023-01-01T12:00:00",
        "updatedAt": "2023-01-01T12:00:00",
        "permissions": [
          {
            "id": 1,
            "name": "查看课程",
            "code": "COURSE_VIEW"
          }
        ]
      },
      {
        "id": 2,
        "name": "管理员",
        "code": "ROLE_ADMIN",
        "description": "系统管理员角色",
        "createdAt": "2023-01-01T12:00:00",
        "updatedAt": "2023-01-01T12:00:00",
        "permissions": [
          {
            "id": 1,
            "name": "查看课程",
            "code": "COURSE_VIEW"
          },
          {
            "id": 2,
            "name": "创建课程",
            "code": "COURSE_CREATE"
          }
        ]
      }
    ]
  }
  ```

### 获取角色详情

根据角色ID获取角色详情

- 请求方式: `GET`
- 接口地址: `/api/roles/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 角色ID

- 请求示例:
  ```
  GET /api/roles/1
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "name": "普通用户",
      "code": "ROLE_USER",
      "description": "普通用户角色",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00",
      "permissions": [
        {
          "id": 1,
          "name": "查看课程",
          "code": "COURSE_VIEW"
        }
      ]
    }
  }
  ```

### 创建角色

创建新角色

- 请求方式: `POST`
- 接口地址: `/api/roles`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  {
    "name": "审核人员",                    // 角色名称
    "code": "ROLE_REVIEWER",              // 角色编码，必须以ROLE_开头
    "description": "内容审核人员角色",      // 角色描述（可选）
    "permissionIds": [1, 3, 5]           // 权限ID列表（可选）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 3,
      "name": "审核人员",
      "code": "ROLE_REVIEWER",
      "description": "内容审核人员角色",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00",
      "permissions": [
        {
          "id": 1,
          "name": "查看课程",
          "code": "COURSE_VIEW"
        },
        {
          "id": 3,
          "name": "审核课程",
          "code": "COURSE_REVIEW"
        },
        {
          "id": 5,
          "name": "查看评论",
          "code": "COMMENT_VIEW"
        }
      ]
    }
  }
  ```

### 更新角色

更新角色信息

- 请求方式: `PUT`
- 接口地址: `/api/roles/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 角色ID
- 请求参数:
  ```json
  {
    "name": "审核专员",                    // 角色名称（可选）
    "code": "ROLE_REVIEWER",              // 角色编码（可选）
    "description": "内容审核专员角色",      // 角色描述（可选）
    "permissionIds": [1, 3, 5, 7]        // 权限ID列表（可选）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 3,
      "name": "审核专员",
      "code": "ROLE_REVIEWER",
      "description": "内容审核专员角色",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:30:00",
      "permissions": [
        {
          "id": 1,
          "name": "查看课程",
          "code": "COURSE_VIEW"
        },
        {
          "id": 3,
          "name": "审核课程",
          "code": "COURSE_REVIEW"
        },
        {
          "id": 5,
          "name": "查看评论",
          "code": "COMMENT_VIEW"
        },
        {
          "id": 7,
          "name": "审核评论",
          "code": "COMMENT_REVIEW"
        }
      ]
    }
  }
  ```

### 删除角色

删除角色

- 请求方式: `DELETE`
- 接口地址: `/api/roles/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 角色ID

- 请求示例:
  ```
  DELETE /api/roles/3
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

### 给角色分配权限

给角色分配权限

- 请求方式: `PUT`
- 接口地址: `/api/roles/{id}/permissions`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 角色ID
- 请求参数:
  ```json
  [1, 2, 3, 4]  // 权限ID列表
  ```

- 请求示例:
  ```
  PUT /api/roles/1/permissions
  [1, 2, 3, 4]
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "name": "普通用户",
      "code": "ROLE_USER",
      "permissions": [
        {
          "id": 1,
          "name": "查看课程",
          "code": "COURSE_VIEW"
        },
        {
          "id": 2,
          "name": "创建课程",
          "code": "COURSE_CREATE"
        },
        {
          "id": 3,
          "name": "审核课程",
          "code": "COURSE_REVIEW"
        },
        {
          "id": 4,
          "name": "删除课程",
          "code": "COURSE_DELETE"
        }
      ]
    }
  }
  ```

### 批量删除角色

批量删除角色

- 请求方式: `DELETE`
- 接口地址: `/api/roles/batch`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  [3, 4]  // 角色ID列表
  ```

- 请求示例:
  ```
  DELETE /api/roles/batch
  [3, 4]
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

## 权限管理接口

### 获取权限列表

获取权限列表

- 请求方式: `GET`
- 接口地址: `/api/permissions`
- 权限要求: `ROLE_ADMIN`

- 请求示例:
  ```
  GET /api/permissions
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": [
      {
        "id": 1,
        "name": "查看课程",
        "code": "COURSE_VIEW",
        "description": "查看课程信息权限",
        "url": "/api/courses",
        "method": "GET",
        "createdAt": "2023-01-01T12:00:00",
        "updatedAt": "2023-01-01T12:00:00"
      },
      {
        "id": 2,
        "name": "创建课程",
        "code": "COURSE_CREATE",
        "description": "创建课程权限",
        "url": "/api/courses",
        "method": "POST",
        "createdAt": "2023-01-01T12:00:00",
        "updatedAt": "2023-01-01T12:00:00"
      }
    ]
  }
  ```

### 获取权限详情

根据权限ID获取权限详情

- 请求方式: `GET`
- 接口地址: `/api/permissions/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 权限ID

- 请求示例:
  ```
  GET /api/permissions/1
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "name": "查看课程",
      "code": "COURSE_VIEW",
      "description": "查看课程信息权限",
      "url": "/api/courses",
      "method": "GET",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00"
    }
  }
  ```

### 创建权限

创建新权限

- 请求方式: `POST`
- 接口地址: `/api/permissions`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  {
    "name": "编辑课程",                    // 权限名称
    "code": "COURSE_EDIT",                // 权限编码
    "description": "编辑课程信息权限",      // 权限描述（可选）
    "url": "/api/courses/{id}",           // 资源URL（可选）
    "method": "PUT"                       // HTTP方法（可选）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 3,
      "name": "编辑课程",
      "code": "COURSE_EDIT",
      "description": "编辑课程信息权限",
      "url": "/api/courses/{id}",
      "method": "PUT",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00"
    }
  }
  ```

### 更新权限

更新权限信息

- 请求方式: `PUT`
- 接口地址: `/api/permissions/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 权限ID
- 请求参数:
  ```json
  {
    "name": "修改课程",                    // 权限名称（可选）
    "code": "COURSE_UPDATE",              // 权限编码（可选）
    "description": "修改课程信息权限",      // 权限描述（可选）
    "url": "/api/courses/{id}",           // 资源URL（可选）
    "method": "PUT"                       // HTTP方法（可选）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 3,
      "name": "修改课程",
      "code": "COURSE_UPDATE",
      "description": "修改课程信息权限",
      "url": "/api/courses/{id}",
      "method": "PUT",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:30:00"
    }
  }
  ```

### 删除权限

删除权限

- 请求方式: `DELETE`
- 接口地址: `/api/permissions/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 权限ID

- 请求示例:
  ```
  DELETE /api/permissions/3
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

### 批量删除权限

批量删除权限

- 请求方式: `DELETE`
- 接口地址: `/api/permissions/batch`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  [3, 4]  // 权限ID列表
  ```

- 请求示例:
  ```
  DELETE /api/permissions/batch
  [3, 4]
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

## 开发说明

### 认证流程

1. 获取验证码key：调用 `/api/auth/captcha/key` 接口获取验证码key
2. 获取验证码图片：调用 `/api/auth/captcha/image/{key}` 接口获取验证码图片
3. 发送邮箱验证码：调用 `/api/auth/email-verification-code` 接口发送邮箱验证码
4. 用户注册：调用 `/api/auth/register` 接口注册用户（需要邮箱验证码）
5. 用户登录：调用 `/api/auth/login` 接口获取JWT令牌
6. 接口调用：在请求头中携带 `Authorization: Bearer {访问令牌}` 调用需要认证的接口
7. 刷新令牌：访问令牌过期时，调用 `/api/auth/refresh-token` 接口刷新令牌
8. 用户注销：调用 `/api/auth/logout` 接口注销用户

### 权限管理流程

1. 创建权限：管理员调用 `/api/permissions` 接口创建权限
2. 创建角色：管理员调用 `/api/roles` 接口创建角色
3. 给角色分配权限：管理员调用 `/api/roles/{id}/permissions` 接口给角色分配权限
4. 创建用户：管理员调用 `/api/users` 接口创建用户
5. 给用户分配角色：管理员调用 `/api/users/{id}/roles` 接口给用户分配角色

### 注意事项

1. 图形验证码有效期为5分钟，请在有效期内使用
2. 邮箱验证码有效期为5分钟，请在有效期内使用
3. 访问令牌有效期为1小时，刷新令牌有效期为7天
4. 请求头中的认证信息格式必须为 `Authorization: Bearer {访问令牌}`
5. 刷新令牌仅能使用一次，使用后会生成新的访问令牌，但刷新令牌本身不变
6. 权限编码必须以`ROLE_`开头的才是角色，其他的是普通权限
7. 系统内置了四种基本角色：普通用户(ROLE_USER)、管理员(ROLE_ADMIN)、审核人员(ROLE_REVIEWER)、机构用户(ROLE_INSTITUTION)

## 用户自身管理接口

### 获取当前用户信息

- **URL**: `/api/users/current`
- **方法**: `GET`
- **描述**: 获取当前登录用户的详细信息
- **请求头**: `Authorization: Bearer {accessToken}`
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "获取成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "zhangsan@example.com",
      "nickname": "张三",
      "phone": "13800138000",
      "avatar": "https://example.com/avatars/default.png",
      "status": 1,
      "createdAt": "2023-01-01T12:00:00Z",
      "lastLoginAt": "2023-01-01T12:00:00Z",
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        }
      ]
    }
  }
  ```
- **错误响应**:
  - 401 Unauthorized: 未授权

### 更新当前用户信息

- **URL**: `/api/users/current`
- **方法**: `PUT`
- **描述**: 更新当前登录用户的个人资料
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**:
  ```json
  {
    "nickname": "新昵称",
    "phone": "13812345678"
  }
  ```
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "更新成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "zhangsan@example.com",
      "nickname": "新昵称",
      "phone": "13812345678",
      "avatar": "https://example.com/avatars/default.png",
      "updatedAt": "2023-01-01T13:00:00Z"
    }
  }
  ```
- **错误响应**:
  - 400 Bad Request: 参数错误
  - 401 Unauthorized: 未授权

### 修改当前用户密码

- **URL**: `/api/users/current/password`
- **方法**: `PUT`
- **描述**: 修改当前登录用户的密码
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**:
  ```json
  {
    "oldPassword": "Password123",
    "newPassword": "NewPassword456",
    "confirmPassword": "NewPassword456"
  }
  ```
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "密码修改成功",
    "data": null
  }
  ```
- **错误响应**:
  - 400 Bad Request: 参数错误或新密码与确认密码不匹配
  - 401 Unauthorized: 未授权或旧密码不正确

### 上传用户头像

- **URL**: `/api/users/current/avatar`
- **方法**: `POST`
- **描述**: 上传并设置当前用户的头像
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**: `multipart/form-data` 类型，包含名为 `avatar` 的文件字段
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "头像上传成功",
    "data": {
      "avatarUrl": "https://example.com/avatars/user1/avatar.jpg"
    }
  }
  ```
- **错误响应**:
  - 400 Bad Request: 文件格式不支持或文件大小超限
  - 401 Unauthorized: 未授权

### 获取邮箱更新验证码

- **URL**: `/api/users/current/email-code`
- **方法**: `POST`
- **描述**: 向用户新邮箱发送验证码，用于更新邮箱地址
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**:
  ```json
  {
    "newEmail": "new-email@example.com"
  }
  ```
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "验证码已发送到新邮箱，请查收",
    "data": null
  }
  ```
- **错误响应**:
  - 400 Bad Request: 邮箱格式不正确或已被其他用户使用
  - 401 Unauthorized: 未授权
  - 429 Too Many Requests: 请求频率过高

### 更新用户邮箱

- **URL**: `/api/users/current/email`
- **方法**: `PUT`
- **描述**: 使用验证码更新用户邮箱
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**:
  ```json
  {
    "newEmail": "new-email@example.com",
    "verificationCode": "123456"
  }
  ```
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "邮箱更新成功",
    "data": {
      "email": "new-email@example.com",
      "updatedAt": "2023-01-01T14:00:00Z"
    }
  }
  ```
- **错误响应**:
  - 400 Bad Request: 参数错误
  - 401 Unauthorized: 未授权
  - 403 Forbidden: 验证码错误
  - 410 Gone: 验证码已过期

## 系统设置接口

### 获取系统配置 (管理员)

- **URL**: `/api/admin/settings`
- **方法**: `GET`
- **描述**: 获取系统配置信息
- **请求头**: `Authorization: Bearer {accessToken}`
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "获取成功",
    "data": {
      "siteName": "在线课程平台",
      "siteDescription": "提供优质的在线课程学习平台",
      "contactEmail": "contact@example.com",
      "registrationEnabled": true,
      "maintenanceMode": false,
      "fileStorageType": "minio",
      "maxUploadSize": 10485760
    }
  }
  ```
- **错误响应**:
  - 401 Unauthorized: 未授权
  - 403 Forbidden: 无权限

### 更新系统配置 (管理员)

- **URL**: `/api/admin/settings`
- **方法**: `PUT`
- **描述**: 更新系统配置信息
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**:
  ```json
  {
    "siteName": "优质在线教育平台",
    "siteDescription": "提供高质量的在线课程学习体验",
    "contactEmail": "support@example.com",
    "registrationEnabled": true,
    "maintenanceMode": false,
    "maxUploadSize": 20971520
  }
  ```
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "更新成功",
    "data": {
      "siteName": "优质在线教育平台",
      "siteDescription": "提供高质量的在线课程学习体验",
      "contactEmail": "support@example.com",
      "registrationEnabled": true,
      "maintenanceMode": false,
      "maxUploadSize": 20971520,
      "updatedAt": "2023-01-01T13:00:00Z"
    }
  }
  ```
- **错误响应**:
  - 400 Bad Request: 参数错误
  - 401 Unauthorized: 未授权
  - 403 Forbidden: 无权限

## 课程相关接口

### 获取课程分类列表（待实现）

- **URL**: `/api/categories`
- **方法**: `GET`
- **描述**: 获取所有课程分类
- **请求参数**: 无
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "获取成功",
    "data": [
      {
        "id": 1,
        "name": "计算机科学",
        "code": "computer-science",
        "parentId": null,
        "level": 1,
        "children": [
          {
            "id": 2,
            "name": "编程语言",
            "code": "programming-languages",
            "parentId": 1,
            "level": 2,
            "children": []
          },
          {
            "id": 3,
            "name": "数据库",
            "code": "databases",
            "parentId": 1,
            "level": 2,
            "children": []
          }
        ]
      },
      {
        "id": 4,
        "name": "数学",
        "code": "mathematics",
        "parentId": null,
        "level": 1,
        "children": []
      }
    ]
  }
  ```

### 获取课程标签列表（待实现）

- **URL**: `/api/tags`
- **方法**: `GET`
- **描述**: 获取所有课程标签
- **请求参数**:
  - `size`: 返回标签数量，默认为20
  - `popular`: 是否返回热门标签，默认为false
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "获取成功",
    "data": [
      {
        "id": 1,
        "name": "Java",
        "courseCount": 42
      },
      {
        "id": 2,
        "name": "Spring Boot",
        "courseCount": 38
      },
      {
        "id": 3,
        "name": "JavaScript",
        "courseCount": 56
      }
    ]
  }
  ```

### 获取课程列表（待实现）

- **URL**: `/api/courses`
- **方法**: `GET`
- **描述**: 获取课程列表
- **请求参数**:
  - `page`: 页码，默认为0
  - `size`: 每页大小，默认为10
  - `sort`: 排序字段，默认为createdAt,desc
  - `categoryId`: 按分类筛选
  - `tagId`: 按标签筛选
  - `keyword`: 搜索关键词
  - `price`: 价格区间，格式为"min,max"，如"0,100"
  - `level`: 难度级别，值为1(初级)、2(中级)或3(高级)
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "获取成功",
    "data": {
      "content": [
        {
          "id": 1,
          "title": "Spring Boot实战入门到精通",
          "summary": "全面讲解Spring Boot框架的使用方法和最佳实践",
          "coverUrl": "https://example.com/covers/spring-boot.jpg",
          "price": 199.00,
          "discountPrice": 149.00,
          "level": 2,
          "totalDuration": 1240,
          "studentCount": 1205,
          "rating": 4.8,
          "categoryId": 2,
          "categoryName": "编程语言",
          "teacherName": "张教授",
          "tags": [
            {
              "id": 2,
              "name": "Spring Boot"
            },
            {
              "id": 8,
              "name": "Java"
            }
          ]
        }
      ],
      "pageable": {
        "pageNumber": 0,
        "pageSize": 10,
        "sort": [
          {
            "direction": "DESC",
            "property": "createdAt"
          }
        ]
      },
      "totalElements": 42,
      "totalPages": 5,
      "last": false,
      "size": 10,
      "number": 0,
      "sort": {
        "sorted": true,
        "unsorted": false,
        "empty": false
      },
      "numberOfElements": 10,
      "first": true,
      "empty": false
    }
  }
  ```

## 访问权限说明

对API接口的访问权限采用基于角色的访问控制(RBAC)策略：

- **公开接口**: 不需要任何权限即可访问，如注册、登录、公共课程列表等
- **用户接口**: 需要普通用户权限(`ROLE_USER`)，如个人信息管理、课程观看等
- **机构接口**: 需要机构权限(`ROLE_INSTITUTION`)，如创建和管理课程等
- **管理员接口**: 需要管理员权限(`ROLE_ADMIN`)，如用户管理、系统设置等

## 附录：错误码说明

| 错误码 | 描述                       |
|--------|----------------------------|
| 40001  | 请求参数错误               |
| 40002  | 表单验证失败               |
| 40003  | 数据不存在                 |
| 40004  | 用户名或密码错误           |
| 40005  | 账号被锁定                 |
| 40006  | 验证码错误或已过期         |
| 40007  | 文件上传失败               |
| 40008  | 操作频率超限               |
| 40009  | 数据已存在                 |
| 40010  | 数据关联，无法删除         |
| 50001  | 系统内部错误               |
| 50002  | 数据库操作失败             |
| 50003  | 第三方服务调用失败         |
</file>

<file path="docs/fornt/开发进度.md">
# 在线课程平台前端开发进度

## 已完成工作

### 项目初始化与配置
- [x] 项目基础架构创建（React + TypeScript + Vite）
- [x] 安装和配置核心依赖
  - React Router DOM
  - Zustand
  - Axios
  - React Hook Form + Zod
  - Shadcn UI组件库
  - Tailwind CSS
  - 其他工具库
- [x] 路径别名配置（@/ -> src/）
- [x] ESLint和TypeScript配置
- [x] Vite代理配置（解决跨域问题）

### 目录结构设计
- [x] 创建核心目录结构
  - assets：静态资源
  - components：通用组件
  - hooks：自定义钩子
  - lib：工具函数库
  - pages：页面组件
  - services：API服务
  - stores：状态管理
  - types：类型定义

### API服务与数据类型
- [x] 定义API接口返回数据类型（ApiResponse, PageResponse等）
- [x] 定义用户、角色、权限等模型类型
- [x] 实现基于Axios的API请求工具
  - 请求拦截器（添加token）
  - 响应拦截器（处理错误、刷新token）
  - 封装GET、POST、PUT、DELETE方法
- [x] 实现认证服务（登录、注册、获取验证码等）
- [x] 优化认证请求处理，修复认证相关错误

### 状态管理
- [x] 实现认证状态管理（authStore）
  - 用户登录状态
  - Token管理
  - 登录/注册/注销功能
- [x] 实现UI状态管理（uiStore）
  - 侧边栏状态
  - 主题管理（亮色/暗色/系统）

### 路由管理
- [x] 定义应用路由结构
- [x] 实现路由守卫（RequireAuth）
- [x] 实现懒加载

### 页面开发
- [x] 布局组件
  - MainLayout：主布局（包含导航栏和侧边栏）
  - AuthLayout：认证页面布局
- [x] 认证页面
  - 登录页面（包含表单验证和验证码）
  - 注册页面（包含表单验证和验证码）
- [x] 基础页面
  - 首页
  - 404页面
- [x] 用户页面（占位实现）
  - 个人资料页
  - 设置页面
- [x] 管理页面（占位实现）
  - 用户管理
  - 角色管理
  - 权限管理

### UI组件
- [x] 实现导航栏组件（Navbar）
- [x] 实现侧边栏组件（Sidebar）
- [x] 实现主题切换组件（ThemeSwitcher）
- [x] 实现验证码组件（Captcha）
- [x] 默认使用亮色主题

## 进行中工作

### 用户管理功能
- [ ] 创建用户服务(userService.ts)
  - GET `/api/users` - 获取用户列表
  - GET `/api/users/{id}` - 获取用户详情
  - POST `/api/users` - 创建用户
  - PUT `/api/users/{id}` - 更新用户
  - DELETE `/api/users/{id}` - 删除用户
- [ ] 实现用户管理状态(userManagementStore.ts)
- [ ] 完善用户列表页面
  - 添加数据表格组件
  - 实现分页功能
  - 实现搜索筛选
- [ ] 实现用户表单组件
  - 创建用户表单
  - 编辑用户表单
  - 表单验证

### 角色与权限管理
- [ ] 创建角色服务(roleService.ts)
  - GET `/api/roles` - 获取角色列表
  - GET `/api/roles/{id}` - 获取角色详情
  - POST `/api/roles` - 创建角色
  - PUT `/api/roles/{id}` - 更新角色
  - DELETE `/api/roles/{id}` - 删除角色
  - PUT `/api/roles/{id}/permissions` - 分配权限
- [ ] 创建权限服务(permissionService.ts)
  - GET `/api/permissions` - 获取权限列表
  - GET `/api/permissions/{id}` - 获取权限详情
- [ ] 实现角色管理页面
- [ ] 实现权限管理页面

### 个人中心功能
- [ ] 获取当前用户信息
- [ ] 实现个人资料页面
- [ ] 实现设置页面

## 待开发工作
- [ ] 课程模块页面
  - 课程列表
  - 课程详情
  - 课程搜索
- [ ] 学习模块页面
  - 视频播放
  - 课程笔记
  - 进度记录
- [ ] 订单与支付模块
  - 课程购买
  - 订单管理
- [ ] 管理模块完善
  - 用户管理CRUD
  - 角色管理CRUD
  - 权限管理CRUD
  - 课程管理
  - 内容审核

## 问题与解决方案
- [x] 路由加载问题：创建了页面占位组件解决路由导入错误
- [x] 暗色背景问题：添加了主题切换器并默认使用亮色主题
- [x] 跨域问题：通过配置Vite代理解决
- [x] 验证码获取问题：修复验证码请求URL和处理方式，确保正确显示验证码图片
- [x] 验证码处理流程：优化验证码组件，确保正确使用后端生成的验证码Key
- [x] 登录会话问题：修复响应拦截器对认证请求的处理，避免误报"会话过期"
- [x] 错误处理问题：增强错误处理和日志记录，提供更明确的错误提示
- [ ] 移动端适配：需要优化布局和响应式设计

## 验证码实现说明

### 后端验证码机制
- 后端使用Kaptcha库生成验证码图片
- 验证码存储在Redis中，键名格式为`captcha:{captchaKey}`
- 验证码有效期为5分钟，验证后立即删除（一次性使用）
- 验证码Key在响应头`Captcha-Key`中返回

### 前端验证码处理
- 创建了专用的`Captcha`组件封装验证码获取和显示逻辑
- 验证码请求使用查询参数传递自生成的captchaKey
- 优先使用响应头中返回的`Captcha-Key`
- 验证码图片数据转换为base64格式显示
- 点击验证码图片可刷新获取新验证码

## 下一步具体计划（1-2周）

### 第1周：用户管理功能
1. 创建用户服务模块
   - 实现用户列表获取
   - 实现用户详情获取
   - 实现用户创建/编辑/删除
2. 实现用户管理状态库
   - 定义状态结构
   - 实现用户数据获取与更新
3. 完善用户列表页面
   - 实现数据表格
   - 实现分页和筛选
   - 添加创建/编辑/删除操作

### 第2周：角色权限管理
1. 创建角色和权限服务模块
   - 实现角色列表获取
   - 实现权限列表获取
   - 实现角色创建/编辑/删除
   - 实现角色权限分配
2. 实现角色和权限管理状态库
   - 定义状态结构
   - 实现数据获取与更新
3. 完善角色和权限管理页面
   - 实现数据表格
   - 实现角色创建/编辑表单
   - 实现权限分配界面

### 并行任务：个人中心功能
1. 获取当前用户信息
   - 在登录成功后获取用户详情
   - 在authStore中保存用户信息
2. 完善个人资料页面
   - 显示用户基本信息
   - 实现个人信息编辑功能
3. 实现设置页面
   - 界面偏好设置
   - 密码修改功能
</file>

<file path="docs/fornt/前端开发规划.md">
# 在线课程平台前端开发规划 (Next.js版)

## 技术栈

### 核心框架
- Next.js 15.2.1
- React 19
- TypeScript 5

### 状态管理与数据获取
- Zustand：轻量级客户端状态管理
- Axios：HTTP请求库（用于客户端组件）
- SWR/React Query：(可选) 数据获取与缓存

### UI组件
- Tailwind CSS：已配置，用于样式开发
- shadcn/ui：基于Radix UI的组件集合，按需复制使用
- Lucide React：图标库
- Framer Motion：动画库

### 表单处理
- React Hook Form：表单处理库
- Zod：TypeScript优先的模式验证库

### 工具库
- date-fns：日期处理库
- clsx：条件类名合并
- Sonner：现代化 Toast 通知

### 开发工具
- ESLint：代码规范检查
- TypeScript：静态类型检查
- Next.js开发服务器（支持Fast Refresh）

## 项目结构 (Next.js应用路由)

```
src/
├── app/                    # Next.js应用路由
│   ├── (auth)/             # 认证相关路由组
│   │   ├── login/          # 登录页面
│   │   │   └── page.tsx    
│   │   └── register/       # 注册页面
│   │       └── page.tsx
│   ├── (dashboard)/        # 需要认证的路由组
│   │   ├── layout.tsx      # 认证后的布局（侧边栏和导航栏）
│   │   ├── page.tsx        # 仪表盘首页
│   │   ├── users/          # 用户管理
│   │   ├── roles/          # 角色管理
│   │   └── permissions/    # 权限管理
│   ├── courses/            # 公开的课程路由
│   │   ├── page.tsx        # 课程列表
│   │   └── [id]/           # 动态路由-课程详情
│   │       └── page.tsx
│   ├── api/                # API路由（可选，用于简单BFF）
│   ├── layout.tsx          # 根布局
│   └── page.tsx            # 首页
├── components/             # 通用组件
│   ├── ui/                 # 基础UI组件（shadcn）
│   ├── auth/               # 认证相关组件
│   └── dashboard/          # 仪表盘相关组件
├── lib/                    # 工具函数库
│   ├── utils.ts            # 通用工具函数
│   └── constants.ts        # 常量定义
├── services/               # API服务（客户端）
│   ├── api.ts              # API基础配置
│   ├── auth.ts             # 认证服务
│   └── user.ts             # 用户服务
├── types/                  # 类型定义
│   ├── auth.ts             # 认证相关类型
│   └── user.ts             # 用户相关类型
├── stores/                 # 客户端状态管理
│   ├── auth-store.ts       # 认证状态
│   └── ui-store.ts         # UI状态
└── middleware.ts           # Next.js中间件（认证路由保护）
```

## Next.js最佳实践

### 组件设计
1. **服务器组件与客户端组件分离**
   - 默认使用服务器组件（不添加'use client'）
   - 需要交互、hooks、浏览器API的组件使用客户端组件（添加'use client'）
   - 尽可能将状态提升到叶子组件，保持大部分UI为服务器组件

2. **布局与页面**
   - 使用嵌套布局（layouts）共享UI
   - 使用路由组（route groups）组织相关路由
   - 使用loading.tsx实现加载状态
   - 使用error.tsx处理错误边界

3. **数据获取**
   - 服务器组件中直接使用async/await获取数据
   - 客户端组件使用SWR或React Query进行数据获取
   - 使用服务器操作（server actions）处理表单提交（如果适用）

### 状态管理
1. **仅在客户端组件中使用Zustand**
   - 状态管理用于用户会话、UI状态等客户端数据
   - 所有使用Zustand的组件必须标记为'use client'

2. **认证状态**
```typescript
interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  login: (credentials: LoginRequest) => Promise<void>;
  register: (data: RegisterRequest) => Promise<void>;
  logout: () => Promise<void>;
  refreshToken: () => Promise<void>;
  setUser: (user: User | null) => void;
  clearError: () => void;
}
```

3. **UI状态**
```typescript
interface UIState {
  sidebarOpen: boolean;
  theme: 'light' | 'dark' | 'system';
  toggleSidebar: () => void;
  setSidebarOpen: (open: boolean) => void;
  setTheme: (theme: 'light' | 'dark' | 'system') => void;
}
```

### 路由与认证
1. **使用Next.js中间件保护路由**
   - 检查认证状态，根据需要重定向
   - 实现基于角色的访问控制

2. **路由组分离公共和受保护内容**
   - (auth)：认证相关页面
   - (dashboard)：需要认证的管理功能

## 验证码机制的详细设计

### 后端验证码流程
1. **验证码生成**:
   - 使用Kaptcha库生成验证码图片
   - 验证码文本存储在Redis中，键名格式为`captcha:{captchaKey}`
   - 设置5分钟的过期时间
   - 验证码Key通过响应头`Captcha-Key`返回

2. **验证码校验**:
   - 登录/注册请求中需携带`captchaKey`和`captchaCode`
   - 后端从Redis获取对应的验证码文本
   - 比较用户提交的验证码与存储的验证码（忽略大小写）
   - 验证后立即删除验证码，确保一次性使用

### 前端验证码实现
1. **验证码组件设计**:
```tsx
interface CaptchaProps {
  onCaptchaKeyChange: (captchaKey: string) => void;
}

export function Captcha({ onCaptchaKeyChange }: CaptchaProps) {
  // 验证码状态管理与获取逻辑
  // 优先使用响应头中的Captcha-Key
  // 图片数据转base64显示
}
```

2. **验证码获取流程**:
   - 组件挂载时自动获取验证码
   - 点击验证码图片可刷新获取新验证码
   - 从响应头中获取`Captcha-Key`
   - 将验证码Key传递给父组件

3. **登录/注册表单集成**:
   - 表单中包含验证码输入字段
   - 通过props回调获取验证码Key
   - 提交表单时将验证码Key和用户输入的验证码一起发送

4. **错误处理与用户体验**:
   - 验证码错误时提供明确的错误提示
   - 自动刷新过期验证码
   - 加载状态提示

## 功能模块规划

### 1. 认证模块
- 登录页面
- 注册页面
- 验证码获取与验证
- JWT令牌管理（存储、刷新、清除）
- 认证状态管理
- 认证中间件实现

### 2. 公共布局模块
- 根布局组件
- 不同区域特定布局
- 导航栏
- 侧边菜单
- 主题切换

### 3. 用户中心模块
- 用户信息展示
- 用户信息编辑
- 密码修改
- 个人头像上传

### 4. 课程模块
- 课程列表页
- 课程详情页
- 课程搜索与筛选
- 课程分类浏览
- 课程收藏

### 5. 学习模块
- 课程学习页面
- 视频播放器
- 课程进度记录
- 课程笔记
- 课程评价

### 6. 管理模块
- 用户管理
- 角色管理
- 权限管理
- 课程管理
- 内容审核

### 7. 订单与支付模块
- 课程购买
- 订单管理
- 支付流程
- 优惠券管理

## 路由规划 (Next.js格式)

```
/                                # 首页
/login                           # 登录
/register                        # 注册
/courses                         # 课程列表
/courses/[id]                    # 课程详情
/courses/[id]/learn              # 课程学习
/dashboard                       # 仪表盘首页
/dashboard/profile               # 个人信息
/dashboard/settings              # 个人设置
/dashboard/favorites             # 收藏课程
/dashboard/orders                # 订单记录
/dashboard/users                 # 用户管理
/dashboard/roles                 # 角色管理
/dashboard/permissions           # 权限管理
/dashboard/courses               # 课程管理
/dashboard/reviews               # 审核管理
/dashboard/statistics            # 统计数据
```

## API对接规划

### 1. 认证相关API
- **验证码API**
  - `GET /api/auth/captcha` - 获取验证码
  - 请求参数: 可选`captchaKey`
  - 响应: 验证码图片（二进制）和`Captcha-Key`响应头
  - 集成方式: 使用axios直接请求，处理二进制响应和响应头

- **注册API**
  - `POST /api/auth/register` - 用户注册
  - 请求参数: 用户名、密码、邮箱、验证码Key、验证码
  - 响应: 成功消息
  - 表单验证: 使用Zod进行客户端验证

- **登录API**
  - `POST /api/auth/login` - 用户登录
  - 请求参数: 用户名、密码、验证码Key、验证码
  - 响应: JWT令牌（accessToken、refreshToken）
  - 状态管理: 登录成功后将令牌存储在localStorage和Zustand状态中

- **其他认证API**
  - `POST /api/auth/refresh-token` - 刷新令牌
  - `POST /api/auth/logout` - 用户注销

### 2. 用户相关API
- `/api/users` - 用户列表/创建用户
- `/api/users/:id` - 用户详情/更新/删除
- `/api/users/:id/status` - 修改用户状态
- `/api/users/:id/roles` - 用户角色分配
- `/api/users/batch` - 批量处理用户

### 3. 角色权限相关API
- `/api/roles` - 角色列表/创建角色
- `/api/roles/:id` - 角色详情/更新/删除
- `/api/roles/:id/permissions` - 角色权限分配
- `/api/permissions` - 权限列表/创建权限
- `/api/permissions/:id` - 权限详情/更新/删除

### 4. 课程相关API
- `/api/courses` - 课程列表/创建课程
- `/api/courses/:id` - 课程详情/更新/删除
- `/api/courses/:id/chapters` - 课程章节
- `/api/courses/:id/resources` - 课程资源
- `/api/courses/:id/enrollments` - 课程报名

### 5. 学习相关API
- `/api/learning/progress` - 学习进度
- `/api/learning/notes` - 学习笔记
- `/api/learning/favorites` - 收藏课程

### 6. 订单相关API
- `/api/orders` - 订单列表/创建订单
- `/api/orders/:id` - 订单详情/更新
- `/api/payments` - 支付管理

## 开发计划与时间线

### 第一阶段：基础框架与认证模块
- [x] 创建Next.js项目结构
- [x] 安装核心依赖（Zustand、Axios等）
- [x] 设置Tailwind CSS和shadcn UI
- [x] 实现基础布局组件
- [x] 创建认证页面（登录/注册）
- [x] 实现JWT令牌管理
- [x] 设置路由中间件保护
- [x] 实现认证状态管理
- [x] 完成验证码组件和集成

### 第二阶段：用户与管理模块
- [ ] 实现用户服务接口
- [ ] 完成用户管理页面
- [ ] 实现角色与权限管理
- [ ] 完成用户个人资料页面
- [ ] 实现用户设置功能

### 第三阶段：课程模块
- [ ] 实现课程列表页面
- [ ] 实现课程详情页面
- [ ] 添加课程搜索与筛选功能
- [ ] 实现课程管理功能

### 第四阶段：学习与订单功能
- [ ] 实现学习进度跟踪
- [ ] 实现课程笔记功能
- [ ] 实现课程评价功能
- [ ] 实现课程购买流程
- [ ] 实现订单管理功能

### 第五阶段：优化与测试
- [ ] 性能优化
- [ ] 兼容性测试
- [ ] 用户体验优化
- [ ] 文档编写
- [ ] 部署准备

## 组件设计

### 通用UI组件
- Button
- Input
- Select
- Checkbox
- RadioGroup
- Switch
- Dialog
- Dropdown
- Tabs
- Card
- Avatar
- Badge
- Toast
- Tooltip
- Captcha (验证码组件)

### 布局组件
- RootLayout
- DashboardLayout
- AuthLayout

### 业务组件
- 用户相关：UserTable, UserForm, UserProfile
- 角色相关：RoleTable, RoleForm, PermissionSelect
- 课程相关：CourseCard, CourseList, CourseDetails
- 学习相关：VideoPlayer, ProgressBar, NoteEditor

## 开发规范

### 代码规范
- 使用ESLint确保代码质量
- 组件文件名使用Pascal Case (ButtonComponent.tsx)
- 工具函数文件名使用kebab-case (date-utils.ts)
- 每个组件一个文件，相关组件可放在同一目录下

### Next.js特定规范
- 页面组件放在app/路径下的page.tsx文件中
- 布局组件放在对应目录的layout.tsx文件中
- 路由组使用括号命名(groupName)
- 动态路由使用方括号[param]
- 客户端组件顶部添加'use client'指令

### Git工作流
- 使用feature分支开发新功能
- 使用pull request进行代码审查
- 提交信息使用语义化前缀(feat:, fix:, docs:, etc.)

## 需要注意的问题

1. **服务器组件与客户端组件区分**
   - 谨慎使用'use client'，仅在需要时添加
   - 注意数据获取模式的差异

2. **状态管理**
   - Zustand仅用于客户端状态
   - 服务器状态使用React Query或SWR管理

3. **性能优化**
   - 利用Next.js的图像优化
   - 合理使用动态导入和懒加载
   - 避免不必要的客户端渲染

4. **安全考虑**
   - 敏感操作在服务器组件或服务器操作中处理
   - 使用Next.js中间件进行认证和授权
   - 注意API路由的安全性

5. **验证码处理**
   - 正确处理验证码Key，优先使用响应头中的值
   - 加强错误处理，提供用户友好的错误提示
   - 优化验证码刷新逻辑，避免多次不必要请求
</file>

<file path="front/.cursorrules">
<cursor-tools Integration>
# Instructions
Use the following commands to get AI assistance:

**Web Search:**
`cursor-tools web "<your question>"` - Get answers from the web using Perplexity AI (e.g., `cursor-tools web "latest weather in London"`)
when using web for complex queries suggest writing the output to a file somewhere like local-research/<query summary>.md.

**Repository Context:**
`cursor-tools repo "<your question>"` - Get context-aware answers about this repository using Google Gemini (e.g., `cursor-tools repo "explain authentication flow"`)

**Documentation Generation:**
`cursor-tools doc [options]` - Generate comprehensive documentation for this repository (e.g., `cursor-tools doc --output docs.md`)
when using doc for remote repos suggest writing the output to a file somewhere like local-docs/<repo-name>.md.

**GitHub Information:**
`cursor-tools github pr [number]` - Get the last 10 PRs, or a specific PR by number (e.g., `cursor-tools github pr 123`)
`cursor-tools github issue [number]` - Get the last 10 issues, or a specific issue by number (e.g., `cursor-tools github issue 456`)

**Browser Automation (Stateless):**
`cursor-tools browser open <url> [options]` - Open a URL and capture page content, console logs, and network activity (e.g., `cursor-tools browser open "https://example.com" --html`)
`cursor-tools browser act "<instruction>" --url=<url> [options]` - Execute actions on a webpage using natural language instructions (e.g., `cursor-tools browser act "Click Login" --url=https://example.com`)
`cursor-tools browser observe "<instruction>" --url=<url> [options]` - Observe interactive elements on a webpage and suggest possible actions (e.g., `cursor-tools browser observe "interactive elements" --url=https://example.com`)
`cursor-tools browser extract "<instruction>" --url=<url> [options]` - Extract data from a webpage based on natural language instructions (e.g., `cursor-tools browser extract "product names" --url=https://example.com/products`)

**Notes on Browser Commands:**
- All browser commands are stateless: each command starts with a fresh browser instance and closes it when done.
- When using `--connect-to`, special URL values are supported:
  - `current`: Use the existing page without reloading
  - `reload-current`: Use the existing page and refresh it (useful in development)
- Multi step workflows involving state or combining multiple actions are supported in the `act` command using the pipe (|) separator (e.g., `cursor-tools browser act "Click Login | Type 'user@example.com' into email | Click Submit" --url=https://example.com`)
- Video recording is available for all browser commands using the `--video=<directory>` option. This will save a video of the entire browser interaction at 1280x720 resolution. The video file will be saved in the specified directory with a timestamp.
- DO NOT ask browser act to "wait" for anything, the wait command is currently disabled in Stagehand.

**Tool Recommendations:**
- `cursor-tools web` is best for general web information not specific to the repository.
- `cursor-tools repo` is ideal for repository-specific questions, planning, code review and debugging.
- `cursor-tools doc` generates documentation for local or remote repositories.
- `cursor-tools browser` is useful for testing and debugging web apps.

**Running Commands:**
1. **Installed version:** Use `cursor-tools <command>` (if in PATH) or `npm exec cursor-tools "<command>"`, `yarn cursor-tools "<command>"`, `pnpm cursor-tools "<command>"`.
2. **Without installation:** Use `npx -y cursor-tools@latest "<command>"` or `bunx -y cursor-tools@latest "<command>"`.

**General Command Options (Supported by all commands):**
--model=<model name>: Specify an alternative AI model to use
--max-tokens=<number>: Control response length
--save-to=<file path>: Save command output to a file (in *addition* to displaying it)
--help: View all available options (help is not fully implemented yet)

**Documentation Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Generate documentation for a remote GitHub repository

**GitHub Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Access PRs/issues from a specific GitHub repository

**Browser Command Options (for 'open', 'act', 'observe', 'extract'):**
--console: Capture browser console logs (enabled by default, use --no-console to disable)
--html: Capture page HTML content
--network: Capture network activity (enabled by default, use --no-network to disable)
--screenshot=<file path>: Save a screenshot of the page
--timeout=<milliseconds>: Set navigation timeout (default: 30000ms)
--viewport=<width>x<height>: Set viewport size (e.g., 1280x720). When using --connect-to, viewport is only changed if this option is explicitly provided
--headless: Run browser in headless mode (default: true)
--no-headless: Show browser UI (non-headless mode) for debugging
--connect-to=<port>: Connect to existing Chrome instance
--wait=<duration or selector>: Wait after page load (e.g., '5s', '#element-id', 'selector:.my-class')
--video=<directory>: Save a video recording of the browser interaction to the specified directory (1280x720 resolution). Not available when using --connect-to

**Additional Notes:**
- For detailed information, see `node_modules/cursor-tools/README.md` (if installed locally).
- Configuration is in `cursor-tools.config.json` (or `~/.cursor-tools/config.json`).
- API keys are loaded from `.cursor-tools.env` (or `~/.cursor-tools/.env`).
- Browser commands require separate installation of Playwright: `npm install --save-dev playwright` or `npm install -g playwright`.
- **Remember:** You're part of a team of superhuman expert AIs. Work together to solve complex problems.
<!-- cursor-tools-version: 0.5.0 -->
</cursor-tools Integration>
</file>

<file path="front/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="front/components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "gray",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="front/eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="front/next.config.ts">
import type { NextConfig } from "next";
/** @type {import('next').NextConfig} */
const nextConfig: NextConfig = {
  reactStrictMode: true,
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: 'http://localhost:8080/api/:path*',
      }
    ];
  }
};
export default nextConfig;
</file>

<file path="front/package.json">
{
  "name": "front",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.1.8",
    "axios": "^1.8.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "framer-motion": "^12.4.10",
    "lucide-react": "^0.479.0",
    "next": "15.2.1",
    "next-themes": "^0.4.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "sonner": "^2.0.1",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@shadcn/ui": "^0.0.4",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.1",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="front/postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="front/public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="front/public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="front/public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="front/public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="front/public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="front/README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="front/src/app/(auth)/layout.tsx">
import { Metadata } from 'next';
import Link from 'next/link';
import Image from 'next/image';
export const metadata: Metadata = {
  title: '认证 - 在线课程平台',
  description: '登录或注册在线课程平台账户',
};
export default function AuthLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <div className="min-h-screen flex flex-col md:flex-row">
      {/* 左侧品牌区域 */}
      <div className="w-full md:w-1/2 bg-primary p-8 flex flex-col justify-between text-white">
        <div>
          <div className="mb-4">
            <Link href="/" className="text-xl font-bold flex items-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="mr-2"
              >
                <path d="M22 2 11 13"></path>
                <path d="m22 2-7 20-4-9-9-4 20-7z"></path>
              </svg>
              在线课程平台
            </Link>
          </div>
          <h1 className="text-3xl md:text-4xl font-bold mb-4">欢迎来到在线教育新时代</h1>
          <p className="text-lg mb-6">
            我们提供高质量的在线课程，帮助您在任何时间、任何地点拓展知识和技能。
          </p>
        </div>
        <div className="hidden md:block">
          <p className="text-sm">© {new Date().getFullYear()} 在线课程平台. 保留所有权利.</p>
        </div>
      </div>
      {/* 右侧表单区域 */}
      <div className="w-full md:w-1/2 p-8 flex items-center justify-center">
        <div className="w-full max-w-md">
          {children}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/(auth)/login/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { toast } from 'sonner';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { useAuthStore } from '@/stores/auth-store';
import authService from '@/services/auth';
import { Captcha } from '@/components/ui/captcha';
// 登录表单模式验证
const loginSchema = z.object({
  username: z.string().min(2, '用户名至少需要2个字符'),
  password: z.string().min(6, '密码至少需要6个字符'),
  captchaCode: z.string().min(4, '验证码格式不正确'),
});
// 类型推断
type LoginFormValues = z.infer<typeof loginSchema>;
export default function LoginPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const redirectTo = searchParams.get('redirectTo') || '/dashboard';
  const [captchaKey, setCaptchaKey] = useState('');
  const { login, isLoading, error, clearError } = useAuthStore();
  // 初始化表单
  const form = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      username: '',
      password: '',
      captchaCode: '',
    },
  });
  // 处理验证码Key变化
  const handleCaptchaKeyChange = (newCaptchaKey: string) => {
    console.log('登录页面：验证码Key已更新', newCaptchaKey);
    setCaptchaKey(newCaptchaKey);
  };
  // 提交表单
  const onSubmit = async (data: LoginFormValues) => {
    clearError();
    // 确保验证码Key存在
    if (!captchaKey) {
      console.error('验证码Key不存在，重新获取验证码');
      toast.error('验证码已失效，请点击验证码图片刷新');
      return;
    }
    console.log('表单提交，验证码信息：', {
      captchaCode: data.captchaCode,
      captchaKey: captchaKey,
    });
    try {
      // 将captchaKey添加到请求中
      await login({
        ...data,
        captchaKey,
      });
      toast.success('登录成功');
      router.push(redirectTo);
    } catch (error: any) {
      console.error('登录失败详情：', error);
      // 提取详细的错误信息
      const errorMessage = error.message || '未知错误';
      const errorCode = error.code || '未知错误码';
      console.error(`登录错误：${errorCode} - ${errorMessage}`);
      // 针对不同类型的错误提供特定提示
      if (errorMessage.includes('验证码')) {
        toast.error('验证码错误，请重新输入');
        // 自动刷新验证码
        const captchaElement = document.querySelector('.captcha-component') as HTMLElement;
        if (captchaElement) {
          captchaElement.click();
        }
      } else if (errorMessage.includes('会话') || errorMessage.includes('过期')) {
        toast.error('登录信息已过期，请重新尝试');
        // 清理可能存在的旧令牌
        localStorage.removeItem('token');
        localStorage.removeItem('refreshToken');
      } else if (errorMessage.includes('用户名') || errorMessage.includes('密码')) {
        toast.error('用户名或密码错误');
      } else {
        toast.error(`登录失败: ${errorMessage}`);
      }
    }
  };
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="text-2xl">登录</CardTitle>
        <CardDescription>
          输入您的用户名和密码登录账户
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            {error && (
              <div className="bg-destructive/10 text-destructive text-sm p-3 rounded-md">
                {error}
              </div>
            )}
            <FormField
              control={form.control}
              name="username"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>用户名</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入用户名" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>密码</FormLabel>
                  <FormControl>
                    <Input type="password" placeholder="请输入密码" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="captchaCode"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>验证码</FormLabel>
                  <div className="flex space-x-2">
                    <FormControl>
                      <Input placeholder="请输入验证码" {...field} />
                    </FormControl>
                    <Captcha onCaptchaKeyChange={handleCaptchaKeyChange} />
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit" className="w-full" disabled={isLoading}>
              {isLoading ? '登录中...' : '登录'}
            </Button>
          </form>
        </Form>
      </CardContent>
      <CardFooter className="flex justify-center">
        <p className="text-sm">
          还没有账号？{' '}
          <Link href="/register" className="text-primary hover:underline">
            注册新账户
          </Link>
        </p>
      </CardFooter>
    </Card>
  );
}
</file>

<file path="front/src/app/(auth)/register/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { toast } from 'sonner';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { useAuthStore } from '@/stores/auth-store';
import authService from '@/services/auth';
import { Captcha } from '@/components/ui/captcha';
// 注册表单模式验证
const registerSchema = z.object({
  username: z.string().min(4, '用户名至少需要4个字符').max(20, '用户名最多20个字符'),
  email: z.string().email('请输入有效的邮箱地址'),
  password: z.string().min(6, '密码至少需要6个字符').max(20, '密码最多20个字符'),
  confirmPassword: z.string(),
  captchaCode: z.string().min(4, '验证码格式不正确'),
}).refine((data) => data.password === data.confirmPassword, {
  message: '两次输入的密码不一致',
  path: ['confirmPassword'],
});
// 类型推断
type RegisterFormValues = z.infer<typeof registerSchema>;
export default function RegisterPage() {
  const router = useRouter();
  const [captchaKey, setCaptchaKey] = useState('');
  const { register, isLoading, error, clearError } = useAuthStore();
  // 初始化表单
  const form = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      username: '',
      email: '',
      password: '',
      confirmPassword: '',
      captchaCode: '',
    },
  });
  // 处理验证码Key变化
  const handleCaptchaKeyChange = (newCaptchaKey: string) => {
    console.log('注册页面：验证码Key已更新', newCaptchaKey);
    setCaptchaKey(newCaptchaKey);
  };
  // 提交表单
  const onSubmit = async (data: RegisterFormValues) => {
    clearError();
    // 确保验证码Key存在
    if (!captchaKey) {
      console.error('验证码Key不存在，重新获取验证码');
      toast.error('验证码已失效，请点击验证码图片刷新');
      return;
    }
    console.log('表单提交，验证码信息：', {
      captchaCode: data.captchaCode,
      captchaKey: captchaKey,
    });
    try {
      // 将captchaKey添加到请求中
      await register({
        ...data,
        captchaKey,
      });
      toast.success('注册成功，请登录');
      router.push('/login');
    } catch (error: any) {
      console.error('注册失败：', error);
      // 针对验证码错误提供特定提示
      if (error.message?.includes('验证码')) {
        toast.error('验证码错误，请重新输入');
      } else {
        toast.error(error.message || '注册失败，请重试');
      }
    }
  };
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="text-2xl">注册</CardTitle>
        <CardDescription>
          创建您的账户以开始使用在线课程平台
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            {error && (
              <div className="bg-destructive/10 text-destructive text-sm p-3 rounded-md">
                {error}
              </div>
            )}
            <FormField
              control={form.control}
              name="username"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>用户名</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入用户名" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>电子邮件</FormLabel>
                  <FormControl>
                    <Input type="email" placeholder="请输入邮箱地址" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>密码</FormLabel>
                  <FormControl>
                    <Input type="password" placeholder="请输入密码" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="confirmPassword"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>确认密码</FormLabel>
                  <FormControl>
                    <Input type="password" placeholder="请再次输入密码" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="captchaCode"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>验证码</FormLabel>
                  <div className="flex space-x-2">
                    <FormControl>
                      <Input placeholder="请输入验证码" {...field} />
                    </FormControl>
                    <Captcha onCaptchaKeyChange={handleCaptchaKeyChange} />
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit" className="w-full" disabled={isLoading}>
              {isLoading ? '注册中...' : '注册'}
            </Button>
          </form>
        </Form>
      </CardContent>
      <CardFooter className="flex justify-center">
        <p className="text-sm">
          已有账号？{' '}
          <Link href="/login" className="text-primary hover:underline">
            登录
          </Link>
        </p>
      </CardFooter>
    </Card>
  );
}
</file>

<file path="front/src/app/(dashboard)/layout.tsx">
'use client';
import { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { useAuthStore } from '@/stores/auth-store';
import Sidebar from '@/components/dashboard/sidebar';
import Header from '@/components/dashboard/header';
export default function DashboardLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const router = useRouter();
  const { user, isAuthenticated, isLoading, refreshToken } = useAuthStore();
  // 检查认证状态
  useEffect(() => {
    const checkAuth = async () => {
      if (!isAuthenticated && !isLoading) {
        try {
          await refreshToken();
        } catch (error) {
          toast.error('您的会话已过期，请重新登录');
          router.push('/login');
        }
      }
    };
    checkAuth();
  }, [isAuthenticated, isLoading, refreshToken, router]);
  // 加载状态
  if (isLoading) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="text-center">
          <div className="inline-block animate-spin rounded-full border-4 border-solid border-primary border-t-transparent h-8 w-8 mr-2"></div>
          <p className="mt-2 text-muted-foreground">加载中...</p>
        </div>
      </div>
    );
  }
  return (
    <div className="min-h-screen flex flex-col md:flex-row bg-muted/20">
      {/* 侧边栏 */}
      <Sidebar />
      {/* 主内容区 */}
      <div className="flex-1 flex flex-col min-h-screen">
        <Header />
        <main className="flex-1 p-4 md:p-6">
          {children}
        </main>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/(dashboard)/page.tsx">
'use client';
import { useEffect, useState } from 'react';
import { useAuthStore } from '@/stores/auth-store';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { BookOpen, Users, ShoppingCart, Activity } from 'lucide-react';
export default function DashboardPage() {
  const { user } = useAuthStore();
  const [greeting, setGreeting] = useState('欢迎');
  const [mounted, setMounted] = useState(false);
  // 确保只在客户端运行
  useEffect(() => {
    setMounted(true);
    // 根据时间设置问候语
    const hours = new Date().getHours();
    let greet = '';
    if (hours < 6) {
      greet = '夜深了';
    } else if (hours < 9) {
      greet = '早上好';
    } else if (hours < 12) {
      greet = '上午好';
    } else if (hours < 14) {
      greet = '中午好';
    } else if (hours < 17) {
      greet = '下午好';
    } else if (hours < 22) {
      greet = '晚上好';
    } else {
      greet = '夜深了';
    }
    setGreeting(greet);
  }, []);
  return (
    <div className="space-y-6">
      {/* 欢迎区域 */}
      <div>
        <h1 className="text-3xl font-bold tracking-tight">
          {greeting}，{user?.username || '同学'}
        </h1>
        <p className="text-muted-foreground mt-2">
          欢迎回到您的在线课程平台仪表盘，这里是您的学习中心。
        </p>
      </div>
      {/* 统计卡片 */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">已学课程</CardTitle>
            <BookOpen className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">12</div>
            <p className="text-xs text-muted-foreground mt-1">
              共计学习 42 小时
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">学习社区</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">+573</div>
            <p className="text-xs text-muted-foreground mt-1">
              平台活跃学习者
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">订单记录</CardTitle>
            <ShoppingCart className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">5</div>
            <p className="text-xs text-muted-foreground mt-1">
              最近30天内
            </p>
          </CardContent>
        </Card>
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">学习进度</CardTitle>
            <Activity className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">82%</div>
            <p className="text-xs text-muted-foreground mt-1">
              当前课程完成度
            </p>
          </CardContent>
        </Card>
      </div>
      {/* 最近课程 */}
      <div>
        <h2 className="text-xl font-semibold mb-4">最近学习</h2>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {[1, 2, 3].map((i) => (
            <Card key={i}>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg">Web开发进阶课程 {i}</CardTitle>
                <CardDescription>前端框架与工程化实践</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-2 w-full bg-muted rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-primary rounded-full" 
                    style={{ width: `${30 * i}%` }}
                  />
                </div>
                <div className="text-sm text-muted-foreground mt-2">
                  完成度: {30 * i}%
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/globals.css">
@import "tailwindcss";
@plugin "tailwindcss-animate";
@custom-variant dark (&:is(.dark *));
@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}
:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.13 0.028 261.692);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.13 0.028 261.692);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.13 0.028 261.692);
  --primary: oklch(0.21 0.034 264.665);
  --primary-foreground: oklch(0.985 0.002 247.839);
  --secondary: oklch(0.967 0.003 264.542);
  --secondary-foreground: oklch(0.21 0.034 264.665);
  --muted: oklch(0.967 0.003 264.542);
  --muted-foreground: oklch(0.551 0.027 264.364);
  --accent: oklch(0.967 0.003 264.542);
  --accent-foreground: oklch(0.21 0.034 264.665);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.928 0.006 264.531);
  --input: oklch(0.928 0.006 264.531);
  --ring: oklch(0.707 0.022 261.325);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0.002 247.839);
  --sidebar-foreground: oklch(0.13 0.028 261.692);
  --sidebar-primary: oklch(0.21 0.034 264.665);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.967 0.003 264.542);
  --sidebar-accent-foreground: oklch(0.21 0.034 264.665);
  --sidebar-border: oklch(0.928 0.006 264.531);
  --sidebar-ring: oklch(0.707 0.022 261.325);
}
.dark {
  --background: oklch(0.13 0.028 261.692);
  --foreground: oklch(0.985 0.002 247.839);
  --card: oklch(0.13 0.028 261.692);
  --card-foreground: oklch(0.985 0.002 247.839);
  --popover: oklch(0.13 0.028 261.692);
  --popover-foreground: oklch(0.985 0.002 247.839);
  --primary: oklch(0.985 0.002 247.839);
  --primary-foreground: oklch(0.21 0.034 264.665);
  --secondary: oklch(0.278 0.033 256.848);
  --secondary-foreground: oklch(0.985 0.002 247.839);
  --muted: oklch(0.278 0.033 256.848);
  --muted-foreground: oklch(0.707 0.022 261.325);
  --accent: oklch(0.278 0.033 256.848);
  --accent-foreground: oklch(0.985 0.002 247.839);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.278 0.033 256.848);
  --input: oklch(0.278 0.033 256.848);
  --ring: oklch(0.446 0.03 256.802);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.034 264.665);
  --sidebar-foreground: oklch(0.985 0.002 247.839);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.278 0.033 256.848);
  --sidebar-accent-foreground: oklch(0.985 0.002 247.839);
  --sidebar-border: oklch(0.278 0.033 256.848);
  --sidebar-ring: oklch(0.446 0.03 256.802);
}
@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="front/src/app/layout.tsx">
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { Toaster } from "@/components/ui/sonner";
import "./globals.css";
import ThemeProvider from "@/components/providers/theme-provider";
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});
const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});
export const metadata: Metadata = {
  title: "在线课程平台",
  description: "现代化的在线教育平台，提供优质课程和学习体验",
};
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="zh-CN" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased min-h-screen`}
      >
        <ThemeProvider>
          {children}
          <Toaster />
        </ThemeProvider>
      </body>
    </html>
  );
}
</file>

<file path="front/src/app/page.tsx">
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
export default function HomePage() {
  return (
    <div className="min-h-screen flex flex-col">
      {/* 导航栏 */}
      <header className="border-b bg-background">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="mr-2 text-primary"
            >
              <path d="M22 2 11 13"></path>
              <path d="m22 2-7 20-4-9-9-4 20-7z"></path>
            </svg>
            <span className="text-xl font-semibold">在线课程平台</span>
          </div>
          <div className="flex gap-4">
            <Button variant="outline" asChild>
              <Link href="/login">登录</Link>
            </Button>
            <Button asChild>
              <Link href="/register">注册</Link>
            </Button>
          </div>
        </div>
      </header>
      {/* 英雄区域 */}
      <section className="bg-primary text-primary-foreground py-20">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl md:text-5xl font-bold mb-6">提升技能，开启未来</h1>
          <p className="text-xl mb-8 max-w-2xl mx-auto">
            我们的在线课程平台提供高质量的学习内容，帮助您掌握最前沿的技能和知识
          </p>
          <Button size="lg" asChild>
            <Link href="/courses">浏览课程</Link>
          </Button>
        </div>
      </section>
      {/* 特色区域 */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-12">为什么选择我们</h2>
          <div className="grid md:grid-cols-3 gap-8">
            {[
              {
                title: '高质量内容',
                description: '由行业专家精心打造的课程内容，确保学习效果',
                icon: (
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-primary">
                    <path d="m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z" />
                  </svg>
                ),
              },
              {
                title: '灵活学习',
                description: '随时随地学习，按照自己的节奏掌握新技能',
                icon: (
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-primary">
                    <path d="M12 22a10 10 0 1 0 0-20 10 10 0 0 0 0 20Z" />
                    <path d="M10 2v2" />
                    <path d="M18 12h2" />
                    <path d="M12 18v2" />
                    <path d="M4 12H2" />
                    <path d="M12 6v6l4 2" />
                  </svg>
                ),
              },
              {
                title: '专业支持',
                description: '遇到问题随时可获得讲师和社区的专业支持',
                icon: (
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-primary">
                    <path d="M21 12a9 9 0 0 1-9 9 9 9 0 0 1-9-9 9 9 0 0 1 9-9 9 9 0 0 1 9 9z" />
                    <path d="M12 16v-3" />
                    <path d="M12 8h.01" />
                  </svg>
                ),
              },
            ].map((feature, i) => (
              <Card key={i}>
                <CardContent className="text-center p-6">
                  <div className="h-12 w-12 mx-auto mb-4 flex items-center justify-center rounded-full bg-primary/10">
                    {feature.icon}
                  </div>
                  <h3 className="text-xl font-semibold mb-2">{feature.title}</h3>
                  <p className="text-muted-foreground">{feature.description}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>
      {/* 热门课程 */}
      <section className="py-16 bg-muted/30">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-12">热门课程</h2>
          <div className="grid md:grid-cols-3 gap-8">
            {[
              {
                title: 'Web前端开发',
                description: '掌握HTML、CSS、JavaScript和现代前端框架',
                image: 'https://source.unsplash.com/random/300x200?web',
              },
              {
                title: '数据科学入门',
                description: '学习数据分析、可视化和机器学习基础',
                image: 'https://source.unsplash.com/random/300x200?data',
              },
              {
                title: '移动应用开发',
                description: '创建跨平台移动应用的技能和最佳实践',
                image: 'https://source.unsplash.com/random/300x200?mobile',
              },
            ].map((course, i) => (
              <Card key={i} className="overflow-hidden">
                <div className="h-48 bg-muted relative">
                  <div className="absolute inset-0 flex items-center justify-center bg-primary/10">
                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1" strokeLinecap="round" strokeLinejoin="round" className="text-muted-foreground">
                      <rect width="18" height="18" x="3" y="3" rx="2" />
                      <path d="M7 3v18" />
                      <path d="M3 7h18" />
                    </svg>
                  </div>
                </div>
                <CardContent className="p-6">
                  <h3 className="text-xl font-semibold mb-2">{course.title}</h3>
                  <p className="text-muted-foreground mb-4">{course.description}</p>
                  <Button variant="outline" className="w-full" asChild>
                    <Link href="/courses">查看详情</Link>
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
          <div className="text-center mt-10">
            <Button variant="outline" size="lg" asChild>
              <Link href="/courses">查看全部课程</Link>
            </Button>
          </div>
        </div>
      </section>
      {/* 底部 */}
      <footer className="py-12 bg-muted">
        <div className="container mx-auto px-4">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="flex items-center mb-6 md:mb-0">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="mr-2 text-primary"
              >
                <path d="M22 2 11 13"></path>
                <path d="m22 2-7 20-4-9-9-4 20-7z"></path>
              </svg>
              <span className="text-xl font-semibold">在线课程平台</span>
            </div>
            <div className="flex gap-6">
              <Link href="/about" className="hover:text-primary">关于我们</Link>
              <Link href="/contact" className="hover:text-primary">联系我们</Link>
              <Link href="/privacy" className="hover:text-primary">隐私政策</Link>
              <Link href="/terms" className="hover:text-primary">服务条款</Link>
            </div>
          </div>
          <div className="mt-8 text-center text-muted-foreground">
            <p>© {new Date().getFullYear()} 在线课程平台. 保留所有权利.</p>
          </div>
        </div>
      </footer>
    </div>
  );
}
</file>

<file path="front/src/components/dashboard/header.tsx">
'use client';
import { useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { useAuthStore } from '@/stores/auth-store';
import { useUIStore } from '@/stores/ui-store';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Menu, User, Settings, LogOut, Sun, Moon, Monitor } from 'lucide-react';
export default function Header() {
  const router = useRouter();
  const { user, logout } = useAuthStore();
  const { sidebarOpen, setSidebarOpen, theme, setTheme } = useUIStore();
  const [isLoggingOut, setIsLoggingOut] = useState(false);
  // 获取用户名首字母（用于头像）
  const getUserInitials = () => {
    if (!user || !user.username) return '用';
    return user.username.charAt(0).toUpperCase();
  };
  // 登出处理
  const handleLogout = async () => {
    setIsLoggingOut(true);
    try {
      await logout();
      toast.success('已成功登出');
      router.push('/login');
    } catch (error) {
      toast.error('登出时发生错误');
    } finally {
      setIsLoggingOut(false);
    }
  };
  return (
    <header className="sticky top-0 z-30 flex h-16 items-center justify-between border-b bg-background px-4 md:px-6">
      {/* 移动端菜单按钮 */}
      <Button
        variant="ghost"
        size="icon"
        className="md:hidden"
        onClick={() => setSidebarOpen(!sidebarOpen)}
      >
        <Menu className="h-5 w-5" />
        <span className="sr-only">切换菜单</span>
      </Button>
      {/* 页面标题（仅桌面端显示） */}
      <div className="hidden md:block">
        <h1 className="text-lg font-medium">仪表盘</h1>
      </div>
      {/* 右侧工具栏 */}
      <div className="flex items-center gap-4">
        {/* 主题切换 */}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon">
              {theme === 'light' && <Sun className="h-[1.2rem] w-[1.2rem]" />}
              {theme === 'dark' && <Moon className="h-[1.2rem] w-[1.2rem]" />}
              {theme === 'system' && <Monitor className="h-[1.2rem] w-[1.2rem]" />}
              <span className="sr-only">切换主题</span>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => setTheme('light')}>
              <Sun className="mr-2 h-4 w-4" />
              <span>亮色</span>
            </DropdownMenuItem>
            <DropdownMenuItem onClick={() => setTheme('dark')}>
              <Moon className="mr-2 h-4 w-4" />
              <span>暗色</span>
            </DropdownMenuItem>
            <DropdownMenuItem onClick={() => setTheme('system')}>
              <Monitor className="mr-2 h-4 w-4" />
              <span>系统</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
        {/* 用户菜单 */}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="rounded-full">
              <Avatar>
                <AvatarImage src={user?.avatar} alt={user?.username || '用户'} />
                <AvatarFallback>{getUserInitials()}</AvatarFallback>
              </Avatar>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>
              <div className="flex flex-col">
                <span>{user?.username || '用户'}</span>
                <span className="text-xs text-muted-foreground">{user?.email}</span>
              </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem asChild>
              <Link href="/dashboard/profile">
                <User className="mr-2 h-4 w-4" />
                <span>个人资料</span>
              </Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <Link href="/dashboard/settings">
                <Settings className="mr-2 h-4 w-4" />
                <span>设置</span>
              </Link>
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem
              disabled={isLoggingOut}
              onClick={handleLogout}
              className="text-destructive focus:text-destructive"
            >
              <LogOut className="mr-2 h-4 w-4" />
              <span>{isLoggingOut ? '登出中...' : '登出'}</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </header>
  );
}
</file>

<file path="front/src/components/dashboard/sidebar.tsx">
'use client';
import { usePathname } from 'next/navigation';
import Link from 'next/link';
import { UserRole } from '@/types/auth';
import { useAuthStore } from '@/stores/auth-store';
import { useUIStore } from '@/stores/ui-store';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import {
  Home,
  User,
  Users,
  ShieldCheck,
  BookOpen,
  FileText,
  BarChart2,
  Heart,
  ShoppingCart,
  Menu,
  X,
} from 'lucide-react';
// 侧边栏菜单项
interface MenuItem {
  title: string;
  href: string;
  icon: React.ReactNode;
  roles?: UserRole[];
}
const menuItems: MenuItem[] = [
  {
    title: '仪表盘',
    href: '/dashboard',
    icon: <Home className="w-5 h-5" />,
  },
  {
    title: '个人资料',
    href: '/dashboard/profile',
    icon: <User className="w-5 h-5" />,
  },
  {
    title: '我的收藏',
    href: '/dashboard/favorites',
    icon: <Heart className="w-5 h-5" />,
  },
  {
    title: '我的订单',
    href: '/dashboard/orders',
    icon: <ShoppingCart className="w-5 h-5" />,
  },
  {
    title: '用户管理',
    href: '/dashboard/users',
    icon: <Users className="w-5 h-5" />,
    roles: [UserRole.ADMIN],
  },
  {
    title: '角色管理',
    href: '/dashboard/roles',
    icon: <ShieldCheck className="w-5 h-5" />,
    roles: [UserRole.ADMIN],
  },
  {
    title: '权限管理',
    href: '/dashboard/permissions',
    icon: <ShieldCheck className="w-5 h-5" />,
    roles: [UserRole.ADMIN],
  },
  {
    title: '课程管理',
    href: '/dashboard/courses',
    icon: <BookOpen className="w-5 h-5" />,
    roles: [UserRole.ADMIN, UserRole.TEACHER],
  },
  {
    title: '内容审核',
    href: '/dashboard/reviews',
    icon: <FileText className="w-5 h-5" />,
    roles: [UserRole.ADMIN],
  },
  {
    title: '统计数据',
    href: '/dashboard/statistics',
    icon: <BarChart2 className="w-5 h-5" />,
    roles: [UserRole.ADMIN],
  },
];
export default function Sidebar() {
  const pathname = usePathname();
  const { user } = useAuthStore();
  const { sidebarOpen, setSidebarOpen } = useUIStore();
  // 根据用户角色过滤菜单项
  const filteredMenuItems = menuItems.filter(
    (item) => !item.roles || (user && item.roles.includes(user.role))
  );
  return (
    <>
      {/* 移动端侧边栏遮罩 */}
      {sidebarOpen && (
        <div
          className="fixed inset-0 z-40 bg-background/80 backdrop-blur-sm md:hidden"
          onClick={() => setSidebarOpen(false)}
        />
      )}
      {/* 侧边栏 */}
      <aside
        className={cn(
          'fixed top-0 left-0 z-50 h-full w-72 bg-card border-r shadow-sm md:static md:z-0',
          'transform transition-transform duration-200 ease-in-out',
          sidebarOpen ? 'translate-x-0' : '-translate-x-full md:translate-x-0'
        )}
      >
        <div className="flex h-16 items-center justify-between px-4 py-4">
          <Link href="/" className="flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="mr-2 text-primary"
            >
              <path d="M22 2 11 13"></path>
              <path d="m22 2-7 20-4-9-9-4 20-7z"></path>
            </svg>
            <span className="text-xl font-semibold">课程平台</span>
          </Link>
          <Button
            variant="ghost"
            size="icon"
            className="md:hidden"
            onClick={() => setSidebarOpen(false)}
          >
            <X className="h-5 w-5" />
          </Button>
        </div>
        <Separator />
        <nav className="flex flex-col gap-1 p-4">
          {filteredMenuItems.map((item) => (
            <Link
              key={item.href}
              href={item.href}
              className={cn(
                'flex items-center gap-3 rounded-md px-3 py-2 text-sm transition-colors',
                pathname === item.href
                  ? 'bg-primary text-primary-foreground'
                  : 'hover:bg-muted'
              )}
            >
              {item.icon}
              <span>{item.title}</span>
            </Link>
          ))}
        </nav>
      </aside>
    </>
  );
}
</file>

<file path="front/src/components/providers/theme-provider.tsx">
'use client';
import { useEffect, useState } from 'react';
import { useUIStore, Theme } from '@/stores/ui-store';
interface ThemeProviderProps {
  children: React.ReactNode;
}
export default function ThemeProvider({ children }: ThemeProviderProps) {
  const { theme, setTheme } = useUIStore();
  const [mounted, setMounted] = useState(false);
  // 仅在客户端挂载后执行
  useEffect(() => {
    setMounted(true);
  }, []);
  // 监听系统主题变化
  useEffect(() => {
    if (!mounted) return;
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const handleChange = () => {
      if (theme === 'system') {
        const root = document.documentElement;
        const isDark = mediaQuery.matches;
        root.classList.remove('light', 'dark');
        root.classList.add(isDark ? 'dark' : 'light');
      }
    };
    // 初始设置
    if (theme === 'system') {
      handleChange();
    } else {
      const root = document.documentElement;
      root.classList.remove('light', 'dark');
      root.classList.add(theme);
    }
    // 添加监听
    mediaQuery.addEventListener('change', handleChange);
    return () => {
      // 清理监听
      mediaQuery.removeEventListener('change', handleChange);
    };
  }, [theme, mounted]);
  // 防止服务器端渲染和客户端渲染不匹配
  if (!mounted) {
    // 返回一个空的占位符，避免闪烁
    return <>{children}</>;
  }
  return <>{children}</>;
}
</file>

<file path="front/src/components/ui/avatar.tsx">
"use client"
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"
import { cn } from "@/lib/utils"
function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}
function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}
function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}
export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="front/src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)
function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}
export { Button, buttonVariants }
</file>

<file path="front/src/components/ui/captcha.tsx">
'use client';
import { useState, useEffect } from 'react';
import { toast } from 'sonner';
import Image from 'next/image';
import authService from '@/services/auth';
interface CaptchaProps {
  onCaptchaKeyChange: (captchaKey: string) => void;
}
export function Captcha({ onCaptchaKeyChange }: CaptchaProps) {
  const [captchaImage, setCaptchaImage] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const fetchCaptcha = async () => {
    setIsLoading(true);
    try {
      console.log('验证码组件：开始获取验证码');
      const captchaData = await authService.getCaptcha();
      if (!captchaData.captchaId) {
        throw new Error('获取验证码Key失败');
      }
      console.log('验证码组件：获取到验证码Key', captchaData.captchaId);
      setCaptchaImage(captchaData.captchaImage);
      onCaptchaKeyChange(captchaData.captchaId);
    } catch (error) {
      console.error('验证码组件：获取验证码失败', error);
      toast.error('获取验证码失败，请点击刷新');
    } finally {
      setIsLoading(false);
    }
  };
  // 组件挂载后获取验证码
  useEffect(() => {
    fetchCaptcha();
  }, []);
  return (
    <div 
      className="h-10 cursor-pointer border rounded-md overflow-hidden flex items-center justify-center min-w-[100px] captcha-component"
      onClick={fetchCaptcha}
      title="点击刷新验证码"
    >
      {isLoading ? (
        <div className="animate-pulse flex space-x-1 items-center">
          <div className="h-2 w-2 bg-gray-300 rounded-full"></div>
          <div className="h-2 w-2 bg-gray-300 rounded-full"></div>
          <div className="h-2 w-2 bg-gray-300 rounded-full"></div>
        </div>
      ) : captchaImage ? (
        <img 
          src={captchaImage} 
          alt="验证码" 
          className="h-full w-auto"
        />
      ) : (
        <span className="text-sm text-gray-500">点击获取</span>
      )}
    </div>
  );
}
</file>

<file path="front/src/components/ui/card.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}
function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn("flex flex-col gap-1.5 px-6", className)}
      {...props}
    />
  )
}
function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}
function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}
function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6", className)}
      {...props}
    />
  )
}
export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="front/src/components/ui/checkbox.tsx">
"use client"
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}
export { Checkbox }
</file>

<file path="front/src/components/ui/dialog.tsx">
"use client"
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}
function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}
function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}
function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}
function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}
function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}
function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}
function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}
function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}
function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}
</file>

<file path="front/src/components/ui/dropdown-menu.tsx">
"use client"
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}
function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}
function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}
function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}
function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}
function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive-foreground data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/40 data-[variant=destructive]:focus:text-destructive-foreground data-[variant=destructive]:*:[svg]:!text-destructive-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}
function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}
function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}
function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}
function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}
function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}
function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}
function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}
function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}
function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}
export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}
</file>

<file path="front/src/components/ui/form.tsx">
"use client"
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"
import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"
const Form = FormProvider
type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}
const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)
const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}
const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)
  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }
  const { id } = itemContext
  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}
type FormItemContextValue = {
  id: string
}
const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)
function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()
  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}
function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()
  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive-foreground", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}
function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()
  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}
function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()
  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children
  if (!body) {
    return null
  }
  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive-foreground text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}
export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="front/src/components/ui/input.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}
export { Input }
</file>

<file path="front/src/components/ui/label.tsx">
"use client"
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cn } from "@/lib/utils"
function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}
export { Label }
</file>

<file path="front/src/components/ui/pagination.tsx">
import * as React from "react"
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  MoreHorizontalIcon,
} from "lucide-react"
import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"
function Pagination({ className, ...props }: React.ComponentProps<"nav">) {
  return (
    <nav
      role="navigation"
      aria-label="pagination"
      data-slot="pagination"
      className={cn("mx-auto flex w-full justify-center", className)}
      {...props}
    />
  )
}
function PaginationContent({
  className,
  ...props
}: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="pagination-content"
      className={cn("flex flex-row items-center gap-1", className)}
      {...props}
    />
  )
}
function PaginationItem({ ...props }: React.ComponentProps<"li">) {
  return <li data-slot="pagination-item" {...props} />
}
type PaginationLinkProps = {
  isActive?: boolean
} & Pick<React.ComponentProps<typeof Button>, "size"> &
  React.ComponentProps<"a">
function PaginationLink({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) {
  return (
    <a
      aria-current={isActive ? "page" : undefined}
      data-slot="pagination-link"
      data-active={isActive}
      className={cn(
        buttonVariants({
          variant: isActive ? "outline" : "ghost",
          size,
        }),
        className
      )}
      {...props}
    />
  )
}
function PaginationPrevious({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to previous page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pl-2.5", className)}
      {...props}
    >
      <ChevronLeftIcon />
      <span className="hidden sm:block">Previous</span>
    </PaginationLink>
  )
}
function PaginationNext({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to next page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pr-2.5", className)}
      {...props}
    >
      <span className="hidden sm:block">Next</span>
      <ChevronRightIcon />
    </PaginationLink>
  )
}
function PaginationEllipsis({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      aria-hidden
      data-slot="pagination-ellipsis"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontalIcon className="size-4" />
      <span className="sr-only">More pages</span>
    </span>
  )
}
export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}
</file>

<file path="front/src/components/ui/select.tsx">
"use client"
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}
function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}
function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}
function SelectTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger>) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex h-9 w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}
function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}
function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("px-2 py-1.5 text-sm font-medium", className)}
      {...props}
    />
  )
}
function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}
function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}
function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}
function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}
export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}
</file>

<file path="front/src/components/ui/separator.tsx">
"use client"
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"
import { cn } from "@/lib/utils"
function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}
export { Separator }
</file>

<file path="front/src/components/ui/sheet.tsx">
"use client"
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}
function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}
function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}
function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}
function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}
function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}
function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}
function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}
function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}
function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="front/src/components/ui/sonner.tsx">
"use client"
import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"
const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()
  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground font-medium",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground font-medium",
        },
      }}
      {...props}
    />
  )
}
export { Toaster }
</file>

<file path="front/src/components/ui/switch.tsx">
"use client"
import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"
import { cn } from "@/lib/utils"
function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 inline-flex h-5 w-9 shrink-0 items-center rounded-full border-2 border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background pointer-events-none block size-4 rounded-full ring-0 shadow-lg transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}
export { Switch }
</file>

<file path="front/src/components/ui/table.tsx">
"use client"
import * as React from "react"
import { cn } from "@/lib/utils"
function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}
function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}
function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}
function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}
function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}
function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-muted-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}
function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}
function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}
export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="front/src/components/ui/tabs.tsx">
"use client"
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"
import { cn } from "@/lib/utils"
function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}
function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-1",
        className
      )}
      {...props}
    />
  )
}
function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring inline-flex flex-1 items-center justify-center gap-1.5 rounded-md px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}
function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}
export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="front/src/components/ui/tooltip.tsx">
"use client"
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"
import { cn } from "@/lib/utils"
function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}
function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}
function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}
function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}
export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="front/src/lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="front/src/middleware.ts">
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
// 需要保护的路由前缀
const PROTECTED_PATHS = ['/dashboard'];
// 不需要认证的路由
const PUBLIC_PATHS = ['/login', '/register', '/courses', '/'];
// 路由中间件
export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  // 检查是否是受保护的路由
  const isProtectedPath = PROTECTED_PATHS.some(path => pathname.startsWith(path));
  // 如果不是受保护的路由，直接放行
  if (!isProtectedPath) return NextResponse.next();
  // 获取令牌
  const token = request.cookies.get('token')?.value;
  // 如果没有令牌，重定向到登录页
  if (!token) {
    // 创建登录重定向URL，包含原始目标URL作为参数
    const redirectUrl = new URL('/login', request.url);
    redirectUrl.searchParams.set('redirectTo', pathname);
    return NextResponse.redirect(redirectUrl);
  }
  // 有令牌，放行请求
  return NextResponse.next();
}
// 配置需要执行中间件的路径
export const config = {
  matcher: [
    // 需要保护的路由
    '/dashboard/:path*',
    // 也可以添加其他需要保护的路由
  ],
};
</file>

<file path="front/src/services/api.ts">
'use client';
import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { ApiError, ApiResponse } from '@/types/api';
// 安全获取localStorage中的值
const getStorageItem = (key: string): string | null => {
  if (typeof window === 'undefined') return null;
  return localStorage.getItem(key);
};
// 安全设置localStorage中的值
const setStorageItem = (key: string, value: string): void => {
  if (typeof window === 'undefined') return;
  localStorage.setItem(key, value);
};
// 安全删除localStorage中的值
const removeStorageItem = (key: string): void => {
  if (typeof window === 'undefined') return;
  localStorage.removeItem(key);
};
// 创建axios实例
const api = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});
// 请求拦截器
api.interceptors.request.use(
  (config) => {
    // 从localStorage获取token
    const token = getStorageItem('token');
    // 如果存在token，添加到请求头
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);
// 响应拦截器
api.interceptors.response.use(
  (response: AxiosResponse<ApiResponse>) => {
    // 直接返回响应数据
    return response;
  },
  async (error: AxiosError<ApiResponse>) => {
    const originalRequest = error.config as AxiosRequestConfig & { _retry?: boolean };
    const requestUrl = originalRequest.url || '';
    // 检查是否为登录或注册请求
    const isAuthRequest = requestUrl.includes('/auth/login') || 
                          requestUrl.includes('/auth/register') ||
                          requestUrl.includes('/auth/captcha');
    // 处理401错误（未授权），但不处理认证请求
    if (error.response?.status === 401 && !originalRequest._retry && !isAuthRequest) {
      originalRequest._retry = true;
      console.log('收到401错误，尝试刷新令牌');
      try {
        // 尝试刷新令牌
        const refreshToken = getStorageItem('refreshToken');
        if (refreshToken) {
          console.log('开始刷新令牌');
          const response = await axios.post<ApiResponse<{ accessToken: string; refreshToken: string; tokenType: string; expiresIn: number }>>(
            `${api.defaults.baseURL}/auth/refresh-token`,
            { refreshToken }
          );
          console.log('刷新令牌响应：', response);
          // 检查响应状态码
          if (response.data.code !== 200 || !response.data.data) {
            console.error('刷新令牌失败：', response.data.message);
            throw new Error(response.data.message || '刷新令牌失败');
          }
          const { accessToken, refreshToken: newRefreshToken, tokenType = 'Bearer' } = response.data.data;
          if (!accessToken) {
            console.error('刷新令牌失败：未获取到有效的访问令牌');
            throw new Error('刷新令牌失败：未获取到有效的访问令牌');
          }
          console.log('刷新令牌成功，新令牌：', accessToken);
          // 更新localStorage中的令牌
          setStorageItem('token', accessToken);
          setStorageItem('refreshToken', newRefreshToken);
          // 更新请求头并重试原始请求
          const authHeader = `${tokenType} ${accessToken}`;
          api.defaults.headers.common.Authorization = authHeader;
          originalRequest.headers = originalRequest.headers || {};
          originalRequest.headers.Authorization = authHeader;
          console.log('使用新令牌重试原始请求');
          return api(originalRequest);
        } else {
          console.error('刷新令牌失败：本地没有刷新令牌');
          throw new Error('会话已过期，请重新登录');
        }
      } catch (refreshError) {
        console.error('刷新令牌出错：', refreshError);
        // 刷新令牌失败，清除本地存储的令牌
        removeStorageItem('token');
        removeStorageItem('refreshToken');
        // 重定向到登录页
        if (typeof window !== 'undefined') {
          console.log('重定向到登录页');
          window.location.href = '/login';
        }
        return Promise.reject(refreshError);
      }
    }
    // 对于认证请求的错误，直接返回错误，不尝试刷新令牌
    if (isAuthRequest) {
      console.log('认证请求失败，不尝试刷新令牌');
    }
    // 构造API错误对象
    const apiError: ApiError = {
      code: error.response?.data?.code || error.response?.status || 500,
      message: error.response?.data?.message || error.message || '请求失败',
      errors: error.response?.data?.errors,
    };
    return Promise.reject(apiError);
  }
);
// 通用请求方法
export const request = {
  get: <T>(url: string, params?: any, config?: AxiosRequestConfig) =>
    api.get<ApiResponse<T>>(url, { params, ...config }),
  post: <T>(url: string, data?: any, config?: AxiosRequestConfig) =>
    api.post<ApiResponse<T>>(url, data, config),
  put: <T>(url: string, data?: any, config?: AxiosRequestConfig) =>
    api.put<ApiResponse<T>>(url, data, config),
  delete: <T>(url: string, config?: AxiosRequestConfig) =>
    api.delete<ApiResponse<T>>(url, config),
};
export default api;
</file>

<file path="front/src/services/auth.ts">
'use client';
import { CaptchaResponse, LoginRequest, LoginResponse, RegisterRequest, User } from '@/types/auth';
import { request } from './api';
import axios from 'axios';
/**
 * 认证服务
 */
const authService = {
  /**
   * 获取验证码
   */
  getCaptcha: async () => {
    try {
      console.log('开始获取验证码');
      // 先生成一个随机的captchaKey
      const generatedCaptchaKey = Math.random().toString(36).substring(2, 15);
      console.log('生成的captchaKey：', generatedCaptchaKey);
      // 将captchaKey作为查询参数传递给后端
      const response = await axios.get(
        `${process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080/api'}/auth/captcha?captchaKey=${encodeURIComponent(generatedCaptchaKey)}`, 
        { 
          responseType: 'arraybuffer',
          // 添加请求完成回调以记录响应头
          onDownloadProgress: (progressEvent) => {
            if (progressEvent.loaded === progressEvent.total) {
              console.log('验证码请求完成');
            }
          }
        }
      );
      console.log('验证码响应状态：', response.status);
      console.log('验证码响应头：', response.headers);
      // 优先使用响应头中的Captcha-Key，如果不存在再使用自生成的captchaKey
      // 尝试各种大小写形式获取Captcha-Key
      const headerCaptchaKey = response.headers['captcha-key'] ||
                              response.headers['Captcha-Key'] ||
                              response.headers['CAPTCHA-KEY'];
      const captchaKey = headerCaptchaKey || generatedCaptchaKey;
      console.log('最终使用的验证码Key：', captchaKey);
      // 将图片数据转换为base64
      const captchaImage = `data:image/jpeg;base64,${Buffer.from(response.data).toString('base64')}`;
      return { captchaId: captchaKey, captchaImage };
    } catch (error) {
      console.error('获取验证码失败：', error);
      throw new Error('获取验证码失败，请刷新页面重试');
    }
  },
  /**
   * 用户登录
   */
  login: async (data: LoginRequest) => {
    // 确保captchaKey和captchaCode正确传递
    console.log('开始登录，验证码参数：', {
      captchaKey: data.captchaKey,
      captchaCode: data.captchaCode
    });
    // 打印完整的请求参数（密码用星号隐藏）
    const logData = {
      ...data,
      password: '******'
    };
    console.log('登录请求参数：', logData);
    // 发起登录请求
    const response = await request.post<any>('/auth/login', data);
    console.log('登录响应：', response);
    // 检查是否有响应和响应数据
    if (!response || !response.data) {
      console.error('登录响应为空');
      throw new Error('登录失败，响应为空');
    }
    // 检查响应状态码
    if (response.data.code !== 200) {
      console.error('登录失败，错误码：', response.data.code, '错误信息：', response.data.message);
      throw new Error(response.data.message || '登录失败');
    }
    // 提取令牌数据
    const tokenData = response.data.data;
    console.log('提取的令牌数据：', tokenData);
    if (!tokenData) {
      console.error('令牌数据为空');
      throw new Error('登录失败，未获取到令牌数据');
    }
    if (!tokenData.accessToken) {
      console.error('访问令牌为空', tokenData);
      throw new Error('登录失败，未获取到有效的访问令牌');
    }
    // 为了兼容旧代码，设置token字段
    const loginResponse: LoginResponse = {
      accessToken: tokenData.accessToken,
      refreshToken: tokenData.refreshToken,
      tokenType: tokenData.tokenType || 'Bearer',
      expiresIn: tokenData.expiresIn || 0,
      token: tokenData.accessToken, // 兼容旧代码
      user: undefined // 稍后会尝试获取
    };
    try {
      // 获取用户信息
      console.log('尝试获取用户信息，使用令牌：', loginResponse.accessToken);
      const authHeader = {
        headers: {
          Authorization: `${loginResponse.tokenType} ${loginResponse.accessToken}`
        }
      };
      // 获取用户信息
      const userResponse = await request.get<User>('/auth/me', authHeader);
      console.log('用户信息响应：', userResponse);
      if (userResponse?.data?.data) {
        loginResponse.user = userResponse.data.data;
      } else {
        console.warn('未获取到用户信息或格式不正确');
      }
    } catch (error) {
      console.error('获取用户信息失败', error);
      // 继续返回令牌数据，但没有用户信息
    }
    return loginResponse;
  },
  /**
   * 用户注册
   */
  register: async (data: RegisterRequest) => {
    const response = await request.post<{ message: string }>('/auth/register', data);
    return response.data.data;
  },
  /**
   * 刷新令牌
   */
  refreshToken: async (refreshToken: string) => {
    // 发起刷新令牌请求
    const response = await request.post<any>(
      '/auth/refresh-token',
      { refreshToken }
    );
    console.log('刷新令牌响应：', response);
    // 检查是否有响应和响应数据
    if (!response || !response.data) {
      console.error('刷新令牌响应为空');
      throw new Error('刷新令牌失败，响应为空');
    }
    // 检查响应状态码
    if (response.data.code !== 200) {
      console.error('刷新令牌失败，错误码：', response.data.code, '错误信息：', response.data.message);
      throw new Error(response.data.message || '刷新令牌失败');
    }
    // 提取令牌数据
    const tokenData = response.data.data;
    console.log('提取的令牌数据：', tokenData);
    if (!tokenData) {
      console.error('令牌数据为空');
      throw new Error('刷新令牌失败，未获取到令牌数据');
    }
    if (!tokenData.accessToken) {
      console.error('访问令牌为空', tokenData);
      throw new Error('刷新令牌失败，未获取到有效的访问令牌');
    }
    // 构造响应对象
    const loginResponse: LoginResponse = {
      accessToken: tokenData.accessToken,
      refreshToken: tokenData.refreshToken,
      tokenType: tokenData.tokenType || 'Bearer',
      expiresIn: tokenData.expiresIn || 0,
      token: tokenData.accessToken // 兼容旧代码
    };
    return loginResponse;
  },
  /**
   * 用户注销
   */
  logout: async () => {
    const response = await request.post<{ message: string }>('/auth/logout');
    return response.data.data;
  },
  /**
   * 获取当前用户信息
   */
  getCurrentUser: async () => {
    console.log('开始获取当前用户信息');
    try {
      const response = await request.get<any>('/auth/me');
      console.log('获取用户信息响应：', response);
      // 检查是否有响应和响应数据
      if (!response || !response.data) {
        console.error('获取用户信息响应为空');
        throw new Error('获取用户信息失败，响应为空');
      }
      // 检查响应状态码
      if (response.data.code !== 200) {
        console.error('获取用户信息失败，错误码：', response.data.code, '错误信息：', response.data.message);
        throw new Error(response.data.message || '获取用户信息失败');
      }
      // 提取用户数据
      const userData = response.data.data;
      console.log('提取的用户数据：', userData);
      if (!userData) {
        console.error('用户数据为空');
        throw new Error('获取用户信息失败，用户数据为空');
      }
      return userData;
    } catch (error) {
      console.error('获取用户信息出错：', error);
      throw error;
    }
  }
};
export default authService;
</file>

<file path="front/src/stores/auth-store.ts">
'use client';
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { User, LoginRequest, RegisterRequest } from '@/types/auth';
import authService from '@/services/auth';
import { ApiError } from '@/types/api';
// 认证状态接口
interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  // 认证方法
  login: (credentials: LoginRequest) => Promise<void>;
  register: (data: RegisterRequest) => Promise<void>;
  logout: () => Promise<void>;
  refreshToken: () => Promise<void>;
  // 状态管理方法
  setUser: (user: User | null) => void;
  clearError: () => void;
}
// 创建认证状态
export const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      user: null,
      isAuthenticated: false,
      isLoading: false,
      error: null,
      // 登录方法
      login: async (credentials: LoginRequest) => {
        set({ isLoading: true, error: null });
        console.log('开始登录，凭据：', { ...credentials, password: '******' });
        try {
          const response = await authService.login(credentials);
          console.log('登录成功，响应：', { ...response, accessToken: '******', refreshToken: '******' });
          if (!response.accessToken) {
            console.error('登录失败：未获取到有效的访问令牌');
            set({
              isLoading: false,
              error: '登录失败：未获取到有效的访问令牌',
            });
            throw new Error('登录失败：未获取到有效的访问令牌');
          }
          // 存储令牌 - 使用accessToken作为主要的认证令牌
          localStorage.setItem('token', response.accessToken);
          localStorage.setItem('refreshToken', response.refreshToken);
          if (!response.user) {
            console.warn('登录成功但未获取到用户信息');
          }
          // 更新状态
          set({
            user: response.user || null,
            isAuthenticated: true,
            isLoading: false,
          });
          console.log('认证状态已更新，isAuthenticated: true');
        } catch (error) {
          const apiError = error as ApiError;
          console.error('登录失败：', apiError);
          set({
            isLoading: false,
            error: apiError.message || '登录失败',
          });
          throw error;
        }
      },
      // 注册方法
      register: async (data: RegisterRequest) => {
        set({ isLoading: true, error: null });
        try {
          await authService.register(data);
          set({ isLoading: false });
        } catch (error) {
          const apiError = error as ApiError;
          set({
            isLoading: false,
            error: apiError.message || '注册失败',
          });
          throw error;
        }
      },
      // 注销方法
      logout: async () => {
        set({ isLoading: true });
        try {
          await authService.logout();
          // 清除令牌
          localStorage.removeItem('token');
          localStorage.removeItem('refreshToken');
          // 更新状态
          set({
            user: null,
            isAuthenticated: false,
            isLoading: false,
          });
        } catch (error) {
          set({ isLoading: false });
          // 即使注销失败，也清除本地状态
          localStorage.removeItem('token');
          localStorage.removeItem('refreshToken');
          set({
            user: null,
            isAuthenticated: false,
          });
        }
      },
      // 刷新令牌
      refreshToken: async () => {
        const refreshToken = localStorage.getItem('refreshToken');
        console.log('尝试刷新令牌，有刷新令牌：', !!refreshToken);
        if (!refreshToken) {
          console.warn('无法刷新令牌：没有刷新令牌');
          set({ isAuthenticated: false, user: null });
          return;
        }
        set({ isLoading: true });
        try {
          const response = await authService.refreshToken(refreshToken);
          console.log('刷新令牌成功，响应：', { ...response, accessToken: '******', refreshToken: '******' });
          if (!response.accessToken) {
            console.error('刷新令牌失败：未获取到有效的访问令牌');
            throw new Error('刷新令牌失败：未获取到有效的访问令牌');
          }
          // 更新令牌 - 使用accessToken作为主要的认证令牌
          localStorage.setItem('token', response.accessToken);
          localStorage.setItem('refreshToken', response.refreshToken);
          // 尝试获取用户信息
          try {
            console.log('刷新令牌后获取用户信息');
            const user = await authService.getCurrentUser();
            set({
              isLoading: false,
              isAuthenticated: true,
              user,
            });
            console.log('用户信息获取成功，认证状态已更新');
          } catch (userError) {
            console.error('获取用户信息失败：', userError);
            // 即使获取用户信息失败，令牌仍然有效
            set({
              isLoading: false,
              isAuthenticated: true,
            });
          }
        } catch (error) {
          console.error('刷新令牌失败：', error);
          // 刷新失败，清除状态
          localStorage.removeItem('token');
          localStorage.removeItem('refreshToken');
          set({
            isLoading: false,
            isAuthenticated: false,
            user: null,
            error: '会话已过期，请重新登录',
          });
        }
      },
      // 设置用户
      setUser: (user: User | null) => {
        set({
          user,
          isAuthenticated: !!user,
        });
      },
      // 清除错误
      clearError: () => {
        set({ error: null });
      },
    }),
    {
      name: 'auth-storage', // localStorage的键名
      partialize: (state) => ({ user: state.user, isAuthenticated: state.isAuthenticated }), // 只持久化这些字段
    }
  )
);
</file>

<file path="front/src/stores/ui-store.ts">
'use client';
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
// 主题类型
export type Theme = 'light' | 'dark' | 'system';
// UI状态接口
interface UIState {
  // 侧边栏状态
  sidebarOpen: boolean;
  toggleSidebar: () => void;
  setSidebarOpen: (open: boolean) => void;
  // 主题状态
  theme: Theme;
  setTheme: (theme: Theme) => void;
}
// 创建UI状态
export const useUIStore = create<UIState>()(
  persist(
    (set) => ({
      // 侧边栏状态（默认收起）
      sidebarOpen: false,
      toggleSidebar: () => set((state) => ({ sidebarOpen: !state.sidebarOpen })),
      setSidebarOpen: (open: boolean) => set({ sidebarOpen: open }),
      // 主题状态（默认跟随系统）
      theme: 'system',
      setTheme: (theme: Theme) => {
        set({ theme });
        // 根据主题更新文档类
        const root = document.documentElement;
        root.classList.remove('light', 'dark');
        // 如果是系统主题，则根据系统偏好设置
        if (theme === 'system') {
          const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches
            ? 'dark'
            : 'light';
          root.classList.add(systemTheme);
        } else {
          root.classList.add(theme);
        }
      },
    }),
    {
      name: 'ui-storage', // localStorage的键名
    }
  )
);
</file>

<file path="front/src/types/api.ts">
// API响应通用结构
export interface ApiResponse<T = any> {
  code: number;
  message: string;
  data: T;
  errors?: Record<string, string[]>;
}
// 分页请求参数
export interface PaginationParams {
  page: number;
  pageSize: number;
}
// 分页响应结构
export interface PaginationResult<T> {
  list: T[];
  total: number;
  page: number;
  pageSize: number;
  totalPages: number;
}
// API错误
export interface ApiError {
  code: number;
  message: string;
  errors?: Record<string, string[]>;
}
</file>

<file path="front/src/types/auth.ts">
// 用户角色枚举
export enum UserRole {
  ADMIN = 'ADMIN',           // 管理员
  REVIEWER = 'REVIEWER',     // 审核员
  USER = 'USER',             // 普通用户
  INSTITUTION = 'INSTITUTION' // 机构用户
}
// 用户类型定义
export interface User {
  id: number;
  username: string;
  email: string;
  avatar?: string;
  role: UserRole;
  createdAt: string;
  updatedAt: string;
}
// 登录请求参数
export interface LoginRequest {
  username: string;
  password: string;
  captchaCode: string;
  captchaKey: string;
}
// 注册请求参数
export interface RegisterRequest {
  username: string;
  email: string;
  password: string;
  confirmPassword: string;
  captchaCode: string;
  captchaKey: string;
}
// 登录响应
export interface LoginResponse {
  accessToken: string;      // 访问令牌
  token?: string;           // 兼容旧代码
  refreshToken: string;     // 刷新令牌
  tokenType: string;        // 令牌类型
  expiresIn: number;        // 过期时间（毫秒）
  user?: User;              // 用户信息（可能需要单独获取）
}
// 验证码响应
export interface CaptchaResponse {
  captchaId: string;
  captchaImage: string;
}
</file>

<file path="front/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
</file>

<file path="mvnw.cmd">
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
</file>

<file path="pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.9</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.zhangziqi</groupId>
    <artifactId>online_course_mine</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>online_course_mine</name>
    <description>online_course_mine</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.12.5</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>0.12.5</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>0.12.5</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>
        <!-- Swagger/OpenAPI -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.5.0</version>
        </dependency>
        <!-- 验证码 -->
        <dependency>
            <groupId>com.github.penggle</groupId>
            <artifactId>kaptcha</artifactId>
            <version>2.3.2</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>2.3.232</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <!-- MinIO 依赖 -->
        <dependency>
            <groupId>io.minio</groupId>
            <artifactId>minio</artifactId>
            <version>8.5.7</version>
        </dependency>
        <!-- AWS S3 依赖 -->
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>s3</artifactId>
            <version>2.20.68</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>aws-core</artifactId>
            <version>2.20.68</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
</file>

<file path="project-overview.md">
## Documentation for Online Course Platform Repository

### Overview

This repository contains the backend code for an online course platform. It is built using Spring Boot and implements features for user authentication, authorization, user and role management, and content management infrastructure. The repository is designed for AI consumption and provides a packed representation of the entire codebase for analysis and automation.

### Quick Start

1. **Prerequisites:**
    - Java 17
    - Maven
    - MySQL Database (for development environment)
    - Docker (optional, for MinIO)

2. **Clone the repository:**
   ```bash
   git clone <repository_url>
   cd online_course_mine
   ```

3. **Build the application:**
   ```bash
   ./mvnw clean install
   ```

4. **Run the application:**
   ```bash
   ./mvnw spring-boot:run -Dspring-boot.run.profiles=dev
   ```
   The application will be accessible at `http://localhost:8080`.

5. **Access API Documentation:**
   Visit Swagger UI at `http://localhost:8080/swagger-ui.html` to explore and test the API endpoints.

### Configuration

The application uses Spring Boot profiles for environment-specific configurations.

**Configuration Files:**

- `src/main/resources/application.yml`: Default application configuration.
- `src/main/resources/application-dev.yml`: Development environment configuration.
- `src/main/resources/application-test.yml`: Test environment configuration.

**Key Configuration Options:**

- **Database (MySQL & H2):**
    - Configuration in `application-dev.yml` and `application-test.yml`.
    - MySQL for development, H2 in-memory for testing.
    - JDBC URL, username, and password can be configured.

- **Redis:**
    - Configuration in `application-dev.yml` and `application-test.yml`.
    - Host, port, database, and password settings.
    - Used for caching, session management, and token blacklist.

- **JWT (JSON Web Token):**
    - Configuration in `src/main/java/com/zhangziqi/online_course_mine/config/security/JwtConfig.java`.
    - Secret key, access token expiration, and refresh token expiration.
    - Secret key should be securely managed, especially in production.

- **Email Service:**
    - Configuration in `application-dev.yml` and `application-test.yml`.
    - SMTP host, username, password, and properties.
    - Used for sending verification and email update codes.

- **File Storage (MinIO & AWS S3 compatible):**
    - Configuration in `src/main/java/com/zhangziqi/online_course_mine/config/MinioConfig.java` and `src/main/java/com/zhangziqi/online_course_mine/config/S3Config.java`.
    - Endpoint, access key, secret key, and bucket name for both MinIO and S3.
    - Choose between MinIO or S3 compatible storage using configuration profiles.

- **Verification Code (Captcha & Email):**
    - Captcha configuration in `src/main/java/com/zhangziqi/online_course_mine/config/KaptchaConfig.java`.
    - Email verification code settings (prefix, expiration) in `src/main/java/com/zhangziqi/online_course_mine/service/impl/EmailServiceImpl.java`.

**Environment Profiles:**

- **dev:** Development profile, using MySQL and detailed logging.
- **test:** Test profile, using H2 in-memory database and specific test configurations.

You can activate profiles using:
- `spring.profiles.active` property in `application.yml`.
- `-Dspring.profiles.active=dev` command line argument when running the application.
- `SPRING_PROFILES_ACTIVE=dev` environment variable.

### API Documentation

The API documentation is available in Swagger UI at `/swagger-ui.html` when the application is running.

**API Categories:**

#### Authentication API (`/api/auth`)

- **`GET /captcha/key`**:  Get captcha key.
- **`GET /captcha/image/{key}`**: Get captcha image by key.
- **`POST /email-verification-code`**: Send email verification code (for registration).
- **`POST /email-update-code`**: Send email update code (for email change).
- **`POST /register`**: Register a new user.
- **`POST /login`**: User login, retrieves JWT tokens.
- **`POST /refresh-token`**: Refresh JWT access token using refresh token.
- **`POST /logout`**: User logout.

#### User Management API (`/api/users`)

- **`GET /users`**: Get paginated user list (ADMIN role required).
- **`GET /users/{id}`**: Get user details by ID (ADMIN role required).
- **`POST /users`**: Create a new user (ADMIN role required).
- **`PUT /users/{id}`**: Update user information (ADMIN role required).
- **`DELETE /users/{id}`**: Delete user by ID (ADMIN role required).
- **`PATCH /users/{id}/status`**: Modify user status (ADMIN role required).
- **`PUT /users/{id}/roles`**: Assign roles to a user (ADMIN role required).
- **`DELETE /users/batch`**: Batch delete users (ADMIN role required).
- **`GET /users/current`**: Get current user information (authenticated user required).
- **`PUT /users/current`**: Update current user profile (authenticated user required).
- **`PUT /users/current/password`**: Change current user password (authenticated user required).
- **`PUT /users/current/email`**: Update current user email (authenticated user required).
- **`POST /users/current/avatar`**: Upload/update current user avatar (authenticated user required).
- **`GET /users/basic/{userId}`**: Get basic user information by ID (public access).

#### Role Management API (`/api/roles`)

- **`GET /roles`**: Get role list (ADMIN role required).
- **`GET /roles/{id}`**: Get role details by ID (ADMIN role required).
- **`POST /roles`**: Create a new role (ADMIN role required).
- **`PUT /roles/{id}`**: Update role information (ADMIN role required).
- **`DELETE /roles/{id}`**: Delete role by ID (ADMIN role required).
- **`PUT /roles/{id}/permissions`**: Assign permissions to a role (ADMIN role required).
- **`DELETE /roles/batch`**: Batch delete roles (ADMIN role required).

#### Permission Management API (`/api/permissions`)

- **`GET /permissions`**: Get permission list (ADMIN role required).
- **`GET /permissions/{id}`**: Get permission details by ID (ADMIN role required).
- **`POST /permissions`**: Create a new permission (ADMIN role required).
- **`PUT /permissions/{id}`**: Update permission information (ADMIN role required).
- **`DELETE /permissions/{id}`**: Delete permission by ID (ADMIN role required).
- **`DELETE /permissions/batch`**: Batch delete permissions (ADMIN role required).

### Dependencies and Requirements

- **Java:** 17
- **Maven:**  For build management.
- **Spring Boot:** 3.3.9
- **Spring Security:** For authentication and authorization.
- **Spring Data JPA:** For database interaction.
- **MySQL:** Relational database for development environment.
- **H2 Database:** In-memory database for testing environment.
- **Redis:** For caching, session management, and token blacklist.
- **JWT (JSON Web Token):** For secure API authentication.
- **Kaptcha:** For generating captcha images.
- **Thymeleaf:** For email templating.
- **MinIO/S3:** For file storage.
- **OpenAPI (Swagger):** For API documentation.
- **Lombok:** For reducing boilerplate code.

Dependencies are managed using Maven, refer to `pom.xml` for detailed versions.

### Advanced Usage Examples

1. **Setting up different environments:**
   - Utilize Spring Boot profiles to manage configurations for development, testing, and production environments.
   - Create separate `application-*.yml` files for each environment and activate them using profiles.

2. **Extending User Roles and Permissions:**
   - Define new roles in `src/main/java/com/zhangziqi/online_course_mine/model/enums/RoleEnum.java`.
   - Create new permissions using the Permission Management API.
   - Assign permissions to roles and roles to users via API or database.
   - Implement custom authorization logic using `@PreAuthorize` annotations or custom security components.

3. **Integrating with Frontend Application:**
   - Configure the frontend application to communicate with the backend API using the base URL (e.g., `http://localhost:8080/api`).
   - Implement JWT token handling in the frontend to authenticate API requests.
   - Use API documentation (`/swagger-ui.html`) to understand and integrate with backend endpoints.

4. **Using File Storage for Course Content:**
   - Configure either MinIO or AWS S3 compatible storage using application properties.
   - Use `MinioService` or `S3Service` (if implemented, based on `S3Config`) to upload, download, and manage course related files (videos, documents, etc.).
   - Store file URLs in the database and serve them to users as needed.

This documentation provides a comprehensive guide to understand, set up, and use the Online Course Platform Backend Repository. For detailed API usage, please refer to the Swagger UI documentation.
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/JpaAuditingConfig.java">
package com.zhangziqi.online_course_mine.config;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.AuditorAware;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import java.util.Optional;
/**
 * JPA审计配置
 */
@Configuration
@EnableJpaAuditing
public class JpaAuditingConfig {
    /**
     * 当前操作用户
     */
    @Bean
    public AuditorAware<String> auditorProvider() {
        return () -> Optional.of("System");
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/KaptchaConfig.java">
package com.zhangziqi.online_course_mine.config;
import com.google.code.kaptcha.impl.DefaultKaptcha;
import com.google.code.kaptcha.util.Config;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import java.util.Properties;
/**
 * 验证码配置
 */
@Configuration
public class KaptchaConfig {
    /**
     * 图形验证码生成器
     */
    @Bean
    public DefaultKaptcha captchaProducer() {
        DefaultKaptcha defaultKaptcha = new DefaultKaptcha();
        Properties properties = new Properties();
        // 图片宽度
        properties.setProperty("kaptcha.image.width", "150");
        // 图片高度
        properties.setProperty("kaptcha.image.height", "50");
        // 字体大小
        properties.setProperty("kaptcha.textproducer.font.size", "38");
        // 字体颜色
        properties.setProperty("kaptcha.textproducer.font.color", "0,0,0");
        // 字体
        properties.setProperty("kaptcha.textproducer.font.names", "Arial,Courier");
        // 字符间距
        properties.setProperty("kaptcha.textproducer.char.space", "5");
        // 验证码长度
        properties.setProperty("kaptcha.textproducer.char.length", "4");
        // 干扰线颜色
        properties.setProperty("kaptcha.noise.color", "blue");
        // 图片边框
        properties.setProperty("kaptcha.border", "no");
        // 背景颜色渐变，开始颜色
        properties.setProperty("kaptcha.background.clear.from", "white");
        // 背景颜色渐变，结束颜色
        properties.setProperty("kaptcha.background.clear.to", "white");
        Config config = new Config(properties);
        defaultKaptcha.setConfig(config);
        return defaultKaptcha;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/MinioConfig.java">
package com.zhangziqi.online_course_mine.config;
import io.minio.MinioClient;
import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
@Data
@Configuration
@ConfigurationProperties(prefix = "minio")
public class MinioConfig {
    private String endpoint;
    private String accessKey;
    private String secretKey;
    private String bucketName;
    @Bean
    public MinioClient minioClient() {
        return MinioClient.builder()
                .endpoint(endpoint)
                .credentials(accessKey, secretKey)
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/OpenApiConfig.java">
package com.zhangziqi.online_course_mine.config;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
/**
 * OpenAPI配置
 */
@Configuration
public class OpenApiConfig {
    /**
     * 配置OpenAPI
     */
    @Bean
    public OpenAPI openAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("在线课程平台API")
                        .description("在线课程平台的RESTful API文档")
                        .version("1.0.0")
                        .contact(new Contact()
                                .name("在线课程平台团队")
                                .email("support@example.com")
                                .url("https://example.com"))
                        .license(new License()
                                .name("MIT License")
                                .url("https://opensource.org/licenses/MIT")))
                // 添加JWT认证
                .addSecurityItem(new SecurityRequirement().addList("Bearer Authentication"))
                .components(new Components()
                        .addSecuritySchemes("Bearer Authentication", createAPIKeyScheme()));
    }
    /**
     * 创建API密钥方案
     */
    private SecurityScheme createAPIKeyScheme() {
        return new SecurityScheme()
                .type(SecurityScheme.Type.HTTP)
                .bearerFormat("JWT")
                .scheme("bearer");
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/redis/RedisConfig.java">
package com.zhangziqi.online_course_mine.config.redis;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;
/**
 * Redis配置
 */
@Configuration
public class RedisConfig {
    /**
     * Redis模板
     */
    @Bean
    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(factory);
        // 使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值
        Jackson2JsonRedisSerializer<Object> jacksonSerializer = new Jackson2JsonRedisSerializer<>(Object.class);
        ObjectMapper om = new ObjectMapper();
        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        // 指定序列化输入的类型，类必须是非final修饰的
        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);
        jacksonSerializer.setObjectMapper(om);
        // 值采用json序列化
        template.setValueSerializer(jacksonSerializer);
        // 使用StringRedisSerializer来序列化和反序列化redis的key值
        template.setKeySerializer(new StringRedisSerializer());
        template.setHashKeySerializer(new StringRedisSerializer());
        template.setHashValueSerializer(jacksonSerializer);
        template.afterPropertiesSet();
        return template;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/S3Config.java">
package com.zhangziqi.online_course_mine.config;
import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.AwsCredentials;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.S3Configuration;
import software.amazon.awssdk.services.s3.presigner.S3Presigner;
import java.net.URI;
@Data
@Configuration
@ConfigurationProperties(prefix = "aws.s3")
public class S3Config {
    private String endpoint;
    private String region;
    private String accessKey;
    private String secretKey;
    private String bucketName;
    private boolean pathStyleAccess;
    @Bean
    public S3Client s3Client() {
        AwsCredentials credentials = AwsBasicCredentials.create(accessKey, secretKey);
        S3Configuration serviceConfiguration = S3Configuration.builder()
            .pathStyleAccessEnabled(pathStyleAccess)
            .chunkedEncodingEnabled(true)
            .build();
        return S3Client.builder()
            .endpointOverride(URI.create(endpoint))
            .credentialsProvider(() -> credentials)
            .region(Region.of(region))
            .serviceConfiguration(serviceConfiguration)
            .build();
    }
    @Bean
    public S3Presigner s3Presigner() {
        AwsCredentials credentials = AwsBasicCredentials.create(accessKey, secretKey);
        S3Configuration serviceConfiguration = S3Configuration.builder()
            .pathStyleAccessEnabled(pathStyleAccess)
            .build();
        return S3Presigner.builder()
            .endpointOverride(URI.create(endpoint))
            .credentialsProvider(() -> credentials)
            .region(Region.of(region))
            .serviceConfiguration(serviceConfiguration)
            .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/security/JwtConfig.java">
package com.zhangziqi.online_course_mine.config.security;
import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;
/**
 * JWT配置
 */
@Data
@Configuration
@ConfigurationProperties(prefix = "jwt")
public class JwtConfig {
    /**
     * 密钥
     */
    private String secret;
    /**
     * 访问令牌过期时间（毫秒）
     */
    private long accessTokenExpiration;
    /**
     * 刷新令牌过期时间（毫秒）
     */
    private long refreshTokenExpiration;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/security/SecurityConfig.java">
package com.zhangziqi.online_course_mine.config.security;
import com.zhangziqi.online_course_mine.security.jwt.JwtAuthenticationFilter;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import java.util.Arrays;
/**
 * 安全配置
 */
@Configuration
@EnableWebSecurity
@EnableMethodSecurity
@RequiredArgsConstructor
public class SecurityConfig {
    private final JwtAuthenticationFilter jwtAuthenticationFilter;
    /**
     * 安全过滤器链
     */
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            // 禁用CSRF
            .csrf(AbstractHttpConfigurer::disable)
            // 启用CORS
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            // 设置Session管理策略为无状态
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            // 授权请求配置
            .authorizeHttpRequests(auth -> auth
                // 公开接口
                .requestMatchers("/api/auth/**", "/api/public/**", "/h2-console/**").permitAll()
                // Swagger相关接口
                .requestMatchers("/swagger-ui/**", "/v3/api-docs/**", "/swagger-resources/**").permitAll()
                // 其他所有请求需要认证
                .anyRequest().authenticated()
            )
            // 添加JWT过滤器
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }
    /**
     * 密码编码器
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
    /**
     * 认证管理器
     */
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }
    /**
     * CORS配置源
     */
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("*"));
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("authorization", "content-type", "x-auth-token"));
        configuration.setExposedHeaders(Arrays.asList("x-auth-token"));
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/StorageConfigProperties.java">
package com.zhangziqi.online_course_mine.config;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Configuration;
@Configuration
@EnableConfigurationProperties({MinioConfig.class, S3Config.class})
public class StorageConfigProperties {
    // 此类仅用于启用ConfigurationProperties注解的绑定
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/AuthController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.LoginDTO;
import com.zhangziqi.online_course_mine.model.dto.RefreshTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.dto.EmailVerificationDTO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.AuthService;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import com.zhangziqi.online_course_mine.service.EmailService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.UUID;
/**
 * 认证控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/auth")
@Tag(name = "认证接口", description = "包括注册、登录、刷新令牌等接口")
public class AuthController {
    private final AuthService authService;
    private final CaptchaService captchaService;
    private final EmailService emailService;
    /**
     * 获取验证码key
     */
    @GetMapping("/captcha/key")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
        summary = "获取验证码key",
        description = "获取验证码key，用于后续获取验证码图片"
    )
    public Result<String> getCaptchaKey() {
        return Result.success(UUID.randomUUID().toString());
    }
    /**
     * 获取验证码图片
     */
    @GetMapping("/captcha/image/{key}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
        summary = "获取验证码图片",
        description = "根据验证码key获取对应的验证码图片"
    )
    public void getCaptchaImage(
        @Parameter(description = "验证码key") 
        @PathVariable String key,
        HttpServletResponse response
    ) throws IOException {
        BufferedImage image = captchaService.generateCaptcha(key);
        response.setContentType(MediaType.IMAGE_JPEG_VALUE);
        response.setHeader(HttpHeaders.CACHE_CONTROL, "no-store, no-cache, must-revalidate");
        response.setHeader(HttpHeaders.PRAGMA, "no-cache");
        response.setDateHeader(HttpHeaders.EXPIRES, 0);
        ImageIO.write(image, "jpg", response.getOutputStream());
    }
    /**
     * 发送邮箱验证码
     *
     * @param emailVerificationDTO 邮箱验证码请求
     * @return 结果
     */
    @PostMapping("/email-verification-code")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "发送邮箱验证码", description = "发送邮箱验证码（用于用户注册）")
    public Result<Void> sendEmailVerificationCode(@Valid @RequestBody EmailVerificationDTO emailVerificationDTO) {
        // 验证图形验证码
        if (!captchaService.validateCaptcha(emailVerificationDTO.getCaptchaKey(), emailVerificationDTO.getCaptchaCode())) {
            return Result.fail("验证码错误");
        }
        // 生成邮箱验证码
        String code = emailService.generateVerificationCode();
        // 发送验证码
        emailService.sendVerificationCode(emailVerificationDTO.getEmail(), code);
        // 保存验证码到Redis
        emailService.saveVerificationCode(emailVerificationDTO.getEmail(), code);
        return Result.success();
    }
    /**
     * 发送邮箱更新验证码
     *
     * @param emailVerificationDTO 邮箱验证码请求
     * @return 结果
     */
    @PostMapping("/email-update-code")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "发送邮箱更新验证码", description = "发送邮箱更新验证码（用于更换邮箱）")
    public Result<Void> sendEmailUpdateCode(@Valid @RequestBody EmailVerificationDTO emailVerificationDTO) {
        // 验证图形验证码
        if (!captchaService.validateCaptcha(emailVerificationDTO.getCaptchaKey(), emailVerificationDTO.getCaptchaCode())) {
            return Result.fail("验证码错误");
        }
        // 生成邮箱验证码
        String code = emailService.generateVerificationCode();
        // 发送更新验证码邮件
        emailService.sendEmailUpdateCode(emailVerificationDTO.getEmail(), code);
        // 保存验证码到Redis
        emailService.saveVerificationCode(emailVerificationDTO.getEmail(), code);
        return Result.success();
    }
    /**
     * 用户注册
     *
     * @param registerDTO 注册请求
     * @return 结果
     */
    @PostMapping("/register")
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(summary = "用户注册", description = "注册新用户")
    public Result<Void> register(@Valid @RequestBody RegisterDTO registerDTO) {
        authService.register(registerDTO);
        return Result.success();
    }
    /**
     * 用户登录
     *
     * @param loginDTO 登录请求
     * @return JWT令牌
     */
    @PostMapping("/login")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "用户登录", description = "用户登录获取JWT令牌")
    public Result<JwtTokenDTO> login(@Valid @RequestBody LoginDTO loginDTO) {
        JwtTokenDTO jwtTokenDTO = authService.login(loginDTO);
        return Result.success(jwtTokenDTO);
    }
    /**
     * 刷新令牌
     *
     * @param refreshTokenDTO 刷新令牌请求
     * @return JWT令牌
     */
    @PostMapping("/refresh-token")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "刷新令牌", description = "刷新JWT令牌")
    public Result<JwtTokenDTO> refreshToken(@Valid @RequestBody RefreshTokenDTO refreshTokenDTO) {
        JwtTokenDTO jwtTokenDTO = authService.refreshToken(refreshTokenDTO);
        return Result.success(jwtTokenDTO);
    }
    /**
     * 注销
     *
     * @param request 请求
     * @return 结果
     */
    @PostMapping("/logout")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "注销", description = "用户注销")
    public Result<Void> logout(HttpServletRequest request) {
        // 从请求头中获取JWT令牌
        String bearerToken = request.getHeader("Authorization");
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            String token = bearerToken.substring(7);
            authService.logout(token);
        }
        return Result.success();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/PermissionController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.PermissionDTO;
import com.zhangziqi.online_course_mine.model.vo.PermissionVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.PermissionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;
/**
 * 权限管理控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/permissions")
@Tag(name = "权限管理", description = "权限查询、创建、编辑、删除等功能")
public class PermissionController {
    private final PermissionService permissionService;
    /**
     * 获取权限列表
     *
     * @return 权限列表
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "获取权限列表", description = "获取所有权限列表")
    public Result<List<PermissionVO>> getPermissionList() {
        log.info("获取权限列表");
        List<PermissionVO> permissionList = permissionService.getPermissionList();
        return Result.success(permissionList);
    }
    /**
     * 获取权限详情
     *
     * @param id 权限ID
     * @return 权限详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "获取权限详情", description = "根据权限ID获取权限详情")
    public Result<PermissionVO> getPermissionById(@Parameter(description = "权限ID") @PathVariable("id") Long id) {
        log.info("获取权限详情: {}", id);
        PermissionVO permissionVO = permissionService.getPermissionById(id);
        return Result.success(permissionVO);
    }
    /**
     * 创建权限
     *
     * @param permissionDTO 权限信息
     * @return 创建后的权限信息
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "创建权限", description = "创建新权限")
    public Result<PermissionVO> createPermission(@Valid @RequestBody PermissionDTO permissionDTO) {
        log.info("创建权限: {}", permissionDTO);
        PermissionVO permissionVO = permissionService.createPermission(permissionDTO);
        return Result.success(permissionVO);
    }
    /**
     * 更新权限
     *
     * @param id            权限ID
     * @param permissionDTO 权限信息
     * @return 更新后的权限信息
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "更新权限", description = "更新权限信息")
    public Result<PermissionVO> updatePermission(
            @Parameter(description = "权限ID") @PathVariable("id") Long id,
            @Valid @RequestBody PermissionDTO permissionDTO) {
        log.info("更新权限: {}, {}", id, permissionDTO);
        PermissionVO permissionVO = permissionService.updatePermission(id, permissionDTO);
        return Result.success(permissionVO);
    }
    /**
     * 删除权限
     *
     * @param id 权限ID
     * @return 无
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "删除权限", description = "根据权限ID删除权限")
    public Result<Void> deletePermission(@Parameter(description = "权限ID") @PathVariable("id") Long id) {
        log.info("删除权限: {}", id);
        permissionService.deletePermission(id);
        return Result.success();
    }
    /**
     * 批量删除权限
     *
     * @param ids 权限ID列表
     * @return 无
     */
    @DeleteMapping("/batch")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "批量删除权限", description = "批量删除权限")
    public Result<Void> batchDeletePermissions(@Parameter(description = "权限ID列表") @RequestBody List<Long> ids) {
        log.info("批量删除权限: {}", ids);
        permissionService.batchDeletePermissions(ids);
        return Result.success();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/RoleController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.RoleDTO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.model.vo.RoleVO;
import com.zhangziqi.online_course_mine.service.RoleService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Set;
/**
 * 角色管理控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/roles")
@Tag(name = "角色管理", description = "角色查询、创建、编辑、删除等功能")
public class RoleController {
    private final RoleService roleService;
    /**
     * 获取角色列表
     *
     * @return 角色列表
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "获取角色列表", description = "获取所有角色列表")
    public Result<List<RoleVO>> getRoleList() {
        log.info("获取角色列表");
        List<RoleVO> roleList = roleService.getRoleList();
        return Result.success(roleList);
    }
    /**
     * 获取角色详情
     *
     * @param id 角色ID
     * @return 角色详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "获取角色详情", description = "根据角色ID获取角色详情")
    public Result<RoleVO> getRoleById(@Parameter(description = "角色ID") @PathVariable("id") Long id) {
        log.info("获取角色详情: {}", id);
        RoleVO roleVO = roleService.getRoleById(id);
        return Result.success(roleVO);
    }
    /**
     * 创建角色
     *
     * @param roleDTO 角色信息
     * @return 创建后的角色信息
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "创建角色", description = "创建新角色")
    public Result<RoleVO> createRole(@Valid @RequestBody RoleDTO roleDTO) {
        log.info("创建角色: {}", roleDTO);
        RoleVO roleVO = roleService.createRole(roleDTO);
        return Result.success(roleVO);
    }
    /**
     * 更新角色
     *
     * @param id      角色ID
     * @param roleDTO 角色信息
     * @return 更新后的角色信息
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "更新角色", description = "更新角色信息")
    public Result<RoleVO> updateRole(
            @Parameter(description = "角色ID") @PathVariable("id") Long id,
            @Valid @RequestBody RoleDTO roleDTO) {
        log.info("更新角色: {}, {}", id, roleDTO);
        RoleVO roleVO = roleService.updateRole(id, roleDTO);
        return Result.success(roleVO);
    }
    /**
     * 删除角色
     *
     * @param id 角色ID
     * @return 无
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "删除角色", description = "根据角色ID删除角色")
    public Result<Void> deleteRole(@Parameter(description = "角色ID") @PathVariable("id") Long id) {
        log.info("删除角色: {}", id);
        roleService.deleteRole(id);
        return Result.success();
    }
    /**
     * 给角色分配权限
     *
     * @param id            角色ID
     * @param permissionIds 权限ID列表
     * @return 更新后的角色信息
     */
    @PutMapping("/{id}/permissions")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "给角色分配权限", description = "给角色分配权限")
    public Result<RoleVO> assignPermissions(
            @Parameter(description = "角色ID") @PathVariable("id") Long id,
            @Parameter(description = "权限ID列表") @RequestBody Set<Long> permissionIds) {
        log.info("给角色分配权限: {}, {}", id, permissionIds);
        RoleVO roleVO = roleService.assignPermissions(id, permissionIds);
        return Result.success(roleVO);
    }
    /**
     * 批量删除角色
     *
     * @param ids 角色ID列表
     * @return 无
     */
    @DeleteMapping("/batch")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "批量删除角色", description = "批量删除角色")
    public Result<Void> batchDeleteRoles(@Parameter(description = "角色ID列表") @RequestBody List<Long> ids) {
        log.info("批量删除角色: {}", ids);
        roleService.batchDeleteRoles(ids);
        return Result.success();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/UserController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.ChangePasswordDTO;
import com.zhangziqi.online_course_mine.model.dto.EmailUpdateDTO;
import com.zhangziqi.online_course_mine.model.dto.UserDTO;
import com.zhangziqi.online_course_mine.model.dto.UserProfileDTO;
import com.zhangziqi.online_course_mine.model.dto.UserQueryDTO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import com.zhangziqi.online_course_mine.service.MinioService;
import com.zhangziqi.online_course_mine.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
/**
 * 用户管理控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/users")
@Tag(name = "用户管理", description = "用户查询、创建、编辑、删除等功能")
public class UserController {
    private final UserService userService;
    private final MinioService minioService;
    /**
     * 分页查询用户列表
     *
     * @param queryDTO 查询条件
     * @return 用户列表（分页）
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "分页查询用户列表", description = "根据条件分页查询用户列表")
    public Result<Page<UserVO>> getUserList(@Valid UserQueryDTO queryDTO) {
        log.info("分页查询用户列表: {}", queryDTO);
        Page<UserVO> page = userService.getUserList(queryDTO);
        return Result.success(page);
    }
    /**
     * 获取用户详情
     *
     * @param id 用户ID
     * @return 用户详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "获取用户详情", description = "根据用户ID获取用户详情")
    public Result<UserVO> getUserById(@Parameter(description = "用户ID") @PathVariable("id") Long id) {
        log.info("获取用户详情: {}", id);
        UserVO userVO = userService.getUserById(id);
        return Result.success(userVO);
    }
    /**
     * 创建用户
     *
     * @param userDTO 用户信息
     * @return 创建后的用户信息
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "创建用户", description = "创建新用户")
    public Result<UserVO> createUser(@Valid @RequestBody UserDTO userDTO) {
        log.info("创建用户: {}", userDTO);
        UserVO userVO = userService.createUser(userDTO);
        return Result.success(userVO);
    }
    /**
     * 更新用户
     *
     * @param id 用户ID
     * @param userDTO 用户信息
     * @return 更新后的用户信息
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "更新用户", description = "更新用户信息")
    public Result<UserVO> updateUser(
            @Parameter(description = "用户ID") @PathVariable("id") Long id,
            @Valid @RequestBody UserDTO userDTO) {
        log.info("更新用户: {}, {}", id, userDTO);
        UserVO userVO = userService.updateUser(id, userDTO);
        return Result.success(userVO);
    }
    /**
     * 删除用户
     *
     * @param id 用户ID
     * @return 无
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "删除用户", description = "根据用户ID删除用户")
    public Result<Void> deleteUser(@Parameter(description = "用户ID") @PathVariable("id") Long id) {
        log.info("删除用户: {}", id);
        userService.deleteUser(id);
        return Result.success();
    }
    /**
     * 修改用户状态
     *
     * @param id 用户ID
     * @param status 状态（0-禁用，1-正常）
     * @return 更新后的用户信息
     */
    @PatchMapping("/{id}/status")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "修改用户状态", description = "修改用户状态（0-禁用，1-正常）")
    public Result<UserVO> updateUserStatus(
            @Parameter(description = "用户ID") @PathVariable("id") Long id,
            @Parameter(description = "状态（0-禁用，1-正常）") @RequestParam("status") Integer status) {
        log.info("修改用户状态: {}, {}", id, status);
        UserVO userVO = userService.updateUserStatus(id, status);
        return Result.success(userVO);
    }
    /**
     * 给用户分配角色
     *
     * @param id 用户ID
     * @param roleIds 角色ID列表
     * @return 更新后的用户信息
     */
    @PutMapping("/{id}/roles")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "给用户分配角色", description = "给用户分配角色")
    public Result<UserVO> assignRoles(
            @Parameter(description = "用户ID") @PathVariable("id") Long id,
            @Parameter(description = "角色ID列表") @RequestBody Set<Long> roleIds) {
        log.info("给用户分配角色: {}, {}", id, roleIds);
        UserVO userVO = userService.assignRoles(id, roleIds);
        return Result.success(userVO);
    }
    /**
     * 批量删除用户
     *
     * @param ids 用户ID列表
     * @return 无
     */
    @DeleteMapping("/batch")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "批量删除用户", description = "批量删除用户")
    public Result<Void> batchDeleteUsers(@Parameter(description = "用户ID列表") @RequestBody List<Long> ids) {
        log.info("批量删除用户: {}", ids);
        userService.batchDeleteUsers(ids);
        return Result.success();
    }
    /**
     * 获取当前用户信息
     *
     * @return 当前用户信息
     */
    @GetMapping("/current")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取当前用户信息", description = "获取当前登录用户的详细信息")
    public Result<UserVO> getCurrentUser() {
        String username = getCurrentUsername();
        log.info("获取当前用户信息: {}", username);
        UserVO userVO = userService.getCurrentUser(username);
        return Result.success(userVO);
    }
    /**
     * 更新当前用户信息
     *
     * @param profileDTO 用户个人信息
     * @return 更新后的用户信息
     */
    @PutMapping("/current")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "更新当前用户信息", description = "更新当前登录用户的个人信息")
    public Result<UserVO> updateCurrentUser(@Valid @RequestBody UserProfileDTO profileDTO) {
        String username = getCurrentUsername();
        log.info("更新当前用户信息: {}, {}", username, profileDTO);
        UserVO userVO = userService.updateCurrentUserProfile(username, profileDTO.getNickname(), profileDTO.getPhone());
        return Result.success(userVO);
    }
    /**
     * 修改当前用户密码
     *
     * @param changePasswordDTO 密码修改请求
     * @return 操作结果
     */
    @PutMapping("/current/password")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "修改密码", description = "修改当前用户密码")
    public Result<Void> changePassword(@Valid @RequestBody ChangePasswordDTO changePasswordDTO) {
        String username = getCurrentUsername();
        // 校验新密码与确认密码是否一致
        if (!changePasswordDTO.getNewPassword().equals(changePasswordDTO.getConfirmPassword())) {
            return Result.fail(400, "新密码与确认密码不一致");
        }
        log.info("修改当前用户密码: {}", username);
        boolean result = userService.changePassword(username, 
                changePasswordDTO.getOldPassword(), 
                changePasswordDTO.getNewPassword());
        return result ? Result.success() : Result.fail(400, "密码修改失败");
    }
    /**
     * 更新当前用户邮箱
     *
     * @param emailUpdateDTO 邮箱更新请求
     * @return 操作结果
     */
    @PutMapping("/current/email")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "更新邮箱", description = "更新当前用户邮箱（需验证码）")
    public Result<UserVO> updateEmail(@Valid @RequestBody EmailUpdateDTO emailUpdateDTO) {
        String username = getCurrentUsername();
        log.info("更新当前用户邮箱: {}, 新邮箱: {}", username, emailUpdateDTO.getNewEmail());
        UserVO userVO = userService.updateEmail(username, 
                emailUpdateDTO.getNewEmail(), 
                emailUpdateDTO.getEmailCode(), 
                emailUpdateDTO.getPassword());
        return Result.success(userVO);
    }
    /**
     * 上传头像
     *
     * @param file 头像文件
     * @return 头像URL
     */
    @PostMapping(value = "/current/avatar", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "上传头像", description = "上传当前用户头像")
    public Result<Map<String, String>> uploadAvatar(@RequestParam("file") MultipartFile file) {
        String username = getCurrentUsername();
        log.info("上传头像: {}, 文件大小: {}", username, file.getSize());
        // 检查文件类型
        String contentType = file.getContentType();
        if (contentType == null || !contentType.startsWith("image/")) {
            return Result.fail(400, "只支持上传图片文件");
        }
        // 检查文件大小（最大2MB）
        if (file.getSize() > 2 * 1024 * 1024) {
            return Result.fail(400, "文件大小不能超过2MB");
        }
        try {
            // 生成唯一的对象名
            String objectName = "avatars/" + username + "/" + UUID.randomUUID() + "-" + file.getOriginalFilename();
            // 上传到MinIO
            String avatarUrl = minioService.uploadFile(objectName, file.getInputStream(), file.getContentType());
            // 更新用户头像
            userService.updateAvatar(username, avatarUrl);
            Map<String, String> result = new HashMap<>();
            result.put("avatarUrl", avatarUrl);
            return Result.success(result);
        } catch (IOException e) {
            log.error("头像上传失败", e);
            return Result.fail(500, "头像上传失败: " + e.getMessage());
        }
    }
    /**
     * 获取用户基本信息（用于前端展示）
     *
     * @param userId 用户ID
     * @return 用户基本信息
     */
    @GetMapping("/basic/{userId}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取用户基本信息", description = "获取用户基本信息（用于前端展示）")
    public Result<UserVO> getBasicUserInfo(@PathVariable("userId") Long userId) {
        log.info("获取用户基本信息: {}", userId);
        UserVO userVO = userService.getBasicUserInfo(userId);
        return Result.success(userVO);
    }
    /**
     * 获取当前登录用户名
     *
     * @return 当前登录用户名
     */
    private String getCurrentUsername() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        return authentication.getName();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/exception/BusinessException.java">
package com.zhangziqi.online_course_mine.exception;
import lombok.Getter;
/**
 * 业务异常
 */
@Getter
public class BusinessException extends RuntimeException {
    /**
     * 错误码
     */
    private final int code;
    /**
     * 错误消息
     */
    private final String message;
    public BusinessException(int code, String message) {
        super(message);
        this.code = code;
        this.message = message;
    }
    public BusinessException(String message) {
        this(500, message);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/exception/GlobalExceptionHandler.java">
package com.zhangziqi.online_course_mine.exception;
import com.zhangziqi.online_course_mine.model.vo.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.AuthenticationException;
import org.springframework.validation.BindException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import java.util.List;
import java.util.stream.Collectors;
/**
 * 全局异常处理
 */
@Slf4j
@RestControllerAdvice
public class GlobalExceptionHandler {
    /**
     * 处理业务异常
     */
    @ExceptionHandler(BusinessException.class)
    public Result<Void> handleBusinessException(BusinessException e) {
        log.error("业务异常: {}", e.getMessage());
        return Result.fail(e.getCode(), e.getMessage());
    }
    /**
     * 处理认证异常
     */
    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    @ExceptionHandler(AuthenticationException.class)
    public Result<Void> handleAuthenticationException(AuthenticationException e) {
        log.error("认证异常: {}", e.getMessage());
        String message = e instanceof BadCredentialsException ? "用户名或密码错误" : "认证失败";
        return Result.fail(401, message);
    }
    /**
     * 处理授权异常
     */
    @ResponseStatus(HttpStatus.FORBIDDEN)
    @ExceptionHandler(AccessDeniedException.class)
    public Result<Void> handleAccessDeniedException(AccessDeniedException e) {
        log.error("权限不足: {}", e.getMessage());
        return Result.fail(403, "权限不足");
    }
    /**
     * 处理参数校验异常
     */
    @ExceptionHandler({MethodArgumentNotValidException.class, BindException.class})
    public Result<Void> handleValidationException(Exception e) {
        List<FieldError> fieldErrors;
        if (e instanceof MethodArgumentNotValidException) {
            fieldErrors = ((MethodArgumentNotValidException) e).getBindingResult().getFieldErrors();
        } else {
            fieldErrors = ((BindException) e).getBindingResult().getFieldErrors();
        }
        String message = fieldErrors.stream()
                .map(error -> error.getField() + ": " + error.getDefaultMessage())
                .collect(Collectors.joining(", "));
        log.error("参数校验异常: {}", message);
        return Result.fail(400, message);
    }
    /**
     * 处理其他异常
     */
    @ExceptionHandler(Exception.class)
    public Result<Void> handleException(Exception e) {
        log.error("系统异常", e);
        return Result.fail(500, "系统异常，请联系管理员");
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/ChangePasswordDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 密码修改DTO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "密码修改请求")
public class ChangePasswordDTO {
    @NotBlank(message = "旧密码不能为空")
    @Schema(description = "旧密码", example = "oldPassword123")
    private String oldPassword;
    @NotBlank(message = "新密码不能为空")
    @Pattern(regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,20}$", 
            message = "密码必须包含大小写字母和数字，长度为8-20位")
    @Schema(description = "新密码", example = "newPassword123")
    private String newPassword;
    @NotBlank(message = "确认密码不能为空")
    @Schema(description = "确认密码", example = "newPassword123")
    private String confirmPassword;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/EmailUpdateDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 邮箱更新DTO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "邮箱更新请求")
public class EmailUpdateDTO {
    @NotBlank(message = "新邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "新邮箱", example = "newemail@example.com")
    private String newEmail;
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "邮箱验证码", example = "123456")
    private String emailCode;
    @NotBlank(message = "当前密码不能为空")
    @Schema(description = "当前密码", example = "password123")
    private String password;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/EmailVerificationDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
/**
 * 邮箱验证码请求DTO
 */
@Data
@Schema(description = "邮箱验证码请求")
public class EmailVerificationDTO {
    /**
     * 邮箱
     */
    @NotBlank(message = "邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "邮箱", example = "zhangsan@example.com")
    private String email;
    /**
     * 验证码Key
     */
    @NotBlank(message = "验证码Key不能为空")
    @Schema(description = "验证码Key", example = "123456")
    private String captchaKey;
    /**
     * 验证码
     */
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "验证码", example = "1234")
    private String captchaCode;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/JwtTokenDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * JWT令牌数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class JwtTokenDTO {
    /**
     * 访问令牌
     */
    private String accessToken;
    /**
     * 刷新令牌
     */
    private String refreshToken;
    /**
     * 令牌类型
     */
    @Builder.Default
    private String tokenType = "Bearer";
    /**
     * 过期时间（毫秒）
     */
    private long expiresIn;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/LoginDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
/**
 * 登录请求DTO
 */
@Data
@Schema(description = "登录请求")
public class LoginDTO {
    /**
     * 用户名
     */
    @NotBlank(message = "用户名不能为空")
    @Schema(description = "用户名", example = "zhangsan")
    private String username;
    /**
     * 密码
     */
    @NotBlank(message = "密码不能为空")
    @Schema(description = "密码", example = "password123")
    private String password;
    /**
     * 验证码Key
     */
    @NotBlank(message = "验证码Key不能为空")
    @Schema(description = "验证码Key", example = "123456")
    private String captchaKey;
    /**
     * 验证码
     */
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "验证码", example = "1234")
    private String captchaCode;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/PermissionDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 权限数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "权限数据")
public class PermissionDTO {
    @Schema(description = "权限ID")
    private Long id;
    @NotBlank(message = "权限名称不能为空")
    @Size(min = 2, max = 50, message = "权限名称长度为2-50个字符")
    @Schema(description = "权限名称", example = "用户查询")
    private String name;
    @NotBlank(message = "权限编码不能为空")
    @Size(min = 4, max = 50, message = "权限编码长度为4-50个字符")
    @Pattern(regexp = "^[A-Z0-9_]+$", message = "权限编码只能包含大写字母、数字和下划线")
    @Schema(description = "权限编码", example = "USER_QUERY")
    private String code;
    @Schema(description = "权限描述")
    private String description;
    @Schema(description = "资源URL")
    private String url;
    @Schema(description = "HTTP方法", example = "GET")
    private String method;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/RefreshTokenDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
/**
 * 刷新令牌请求DTO
 */
@Data
@Schema(description = "刷新令牌请求")
public class RefreshTokenDTO {
    /**
     * 刷新令牌
     */
    @NotBlank(message = "刷新令牌不能为空")
    @Schema(description = "刷新令牌", example = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...")
    private String refreshToken;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/RegisterDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Data;
/**
 * 注册请求DTO
 */
@Data
@Schema(description = "注册请求")
public class RegisterDTO {
    /**
     * 用户名
     */
    @NotBlank(message = "用户名不能为空")
    @Size(min = 4, max = 20, message = "用户名长度为4-20位")
    @Pattern(regexp = "^[a-zA-Z0-9_]+$", message = "用户名只能包含字母、数字和下划线")
    @Schema(description = "用户名", example = "zhangsan")
    private String username;
    /**
     * 密码
     */
    @NotBlank(message = "密码不能为空")
    @Size(min = 6, max = 20, message = "密码长度为6-20位")
    @Schema(description = "密码", example = "password123")
    private String password;
    /**
     * 邮箱
     */
    @NotBlank(message = "邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "邮箱", example = "zhangsan@example.com")
    private String email;
    /**
     * 手机号
     */
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    @Schema(description = "手机号", example = "13812345678")
    private String phone;
    /**
     * 验证码Key
     */
    @NotBlank(message = "验证码Key不能为空")
    @Schema(description = "验证码Key", example = "123456")
    private String captchaKey;
    /**
     * 验证码
     */
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "验证码", example = "1234")
    private String captchaCode;
    /**
     * 邮箱验证码
     */
    @NotBlank(message = "邮箱验证码不能为空")
    @Size(min = 6, max = 6, message = "邮箱验证码长度必须为6位")
    @Pattern(regexp = "^\\d{6}$", message = "邮箱验证码必须为6位数字")
    @Schema(description = "邮箱验证码", example = "123456")
    private String emailCode;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/RoleDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.Set;
/**
 * 角色数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "角色数据")
public class RoleDTO {
    @Schema(description = "角色ID")
    private Long id;
    @NotBlank(message = "角色名称不能为空")
    @Size(min = 2, max = 50, message = "角色名称长度为2-50个字符")
    @Schema(description = "角色名称", example = "系统管理员")
    private String name;
    @NotBlank(message = "角色编码不能为空")
    @Size(min = 4, max = 50, message = "角色编码长度为4-50个字符")
    @Pattern(regexp = "^ROLE_[A-Z0-9_]+$", message = "角色编码必须以ROLE_开头，且只能包含大写字母、数字和下划线")
    @Schema(description = "角色编码", example = "ROLE_ADMIN")
    private String code;
    @Schema(description = "角色描述")
    private String description;
    @Schema(description = "权限ID列表")
    private Set<Long> permissionIds;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/UserDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.Set;
/**
 * 用户数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "用户数据")
public class UserDTO {
    @Schema(description = "用户ID")
    private Long id;
    @NotBlank(message = "用户名不能为空")
    @Size(min = 4, max = 20, message = "用户名长度为4-20位")
    @Pattern(regexp = "^[a-zA-Z0-9_]+$", message = "用户名只能包含字母、数字和下划线")
    @Schema(description = "用户名", example = "zhangsan")
    private String username;
    @Schema(description = "密码")
    private String password;
    @NotBlank(message = "邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "邮箱", example = "zhangsan@example.com")
    private String email;
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    @Schema(description = "手机号", example = "13812345678")
    private String phone;
    @Schema(description = "头像")
    private String avatar;
    @Schema(description = "昵称")
    private String nickname;
    @Schema(description = "状态：0-禁用，1-正常")
    private Integer status;
    @Schema(description = "机构ID")
    private Long institutionId;
    @Schema(description = "角色ID列表")
    private Set<Long> roleIds;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/UserProfileDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Pattern;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 用户个人信息更新DTO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "用户个人信息更新请求")
public class UserProfileDTO {
    @Schema(description = "昵称", example = "张三")
    private String nickname;
    @Schema(description = "手机号", example = "13800138000")
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    private String phone;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/UserQueryDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Data;
/**
 * 用户查询参数
 */
@Data
@Schema(description = "用户查询参数")
public class UserQueryDTO {
    @Schema(description = "用户名")
    private String username;
    @Schema(description = "邮箱")
    private String email;
    @Schema(description = "手机号")
    private String phone;
    @Schema(description = "状态：0-禁用，1-正常")
    private Integer status;
    @Schema(description = "机构ID")
    private Long institutionId;
    @Schema(description = "角色ID")
    private Long roleId;
    @Schema(description = "页码", defaultValue = "1")
    private Integer pageNum = 1;
    @Schema(description = "每页条数", defaultValue = "10")
    private Integer pageSize = 10;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/BaseEntity.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import java.time.LocalDateTime;
/**
 * 基础实体类
 */
@Data
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
public abstract class BaseEntity {
    /**
     * 主键ID
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    /**
     * 创建时间
     */
    @CreatedDate
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;
    /**
     * 更新时间
     */
    @LastModifiedDate
    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Institution.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
/**
 * 机构实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "institutions")
public class Institution extends BaseEntity {
    /**
     * 机构名称
     */
    @Column(nullable = false, length = 100)
    private String name;
    /**
     * 机构Logo
     */
    private String logo;
    /**
     * 机构描述
     */
    @Column(length = 500)
    private String description;
    /**
     * 状态（0-待审核，1-正常，2-禁用）
     */
    @Builder.Default
    private Integer status = 0;
    /**
     * 联系人
     */
    @Column(length = 50)
    private String contactPerson;
    /**
     * 联系电话
     */
    @Column(length = 20)
    private String contactPhone;
    /**
     * 联系邮箱
     */
    private String contactEmail;
    /**
     * 地址
     */
    @Column(length = 255)
    private String address;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Permission.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
/**
 * 权限实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "permissions")
@EqualsAndHashCode(callSuper = true)
public class Permission extends BaseEntity {
    /**
     * 权限名称
     */
    @Column(nullable = false, length = 50)
    private String name;
    /**
     * 权限编码
     */
    @Column(nullable = false, unique = true, length = 50)
    private String code;
    /**
     * 权限描述
     */
    @Column(length = 255)
    private String description;
    /**
     * 资源路径
     */
    @Column(length = 255)
    private String url;
    /**
     * HTTP方法
     */
    @Column(length = 10)
    private String method;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Role.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.util.HashSet;
import java.util.Set;
/**
 * 角色实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "roles")
@EqualsAndHashCode(callSuper = true)
public class Role extends BaseEntity {
    /**
     * 角色名称
     */
    @Column(nullable = false, unique = true, length = 50)
    private String name;
    /**
     * 角色编码
     */
    @Column(nullable = false, unique = true, length = 50)
    private String code;
    /**
     * 角色描述
     */
    @Column(length = 255)
    private String description;
    /**
     * 角色权限
     */
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
        name = "role_permissions",
        joinColumns = @JoinColumn(name = "role_id"),
        inverseJoinColumns = @JoinColumn(name = "permission_id")
    )
    @Builder.Default
    private Set<Permission> permissions = new HashSet<>();
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/User.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import org.hibernate.annotations.DynamicUpdate;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;
/**
 * 用户实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@DynamicUpdate
@Table(name = "users")
public class User extends BaseEntity {
    /**
     * 用户名
     */
    @Column(nullable = false, unique = true, length = 50)
    private String username;
    /**
     * 密码
     */
    @Column(nullable = false)
    private String password;
    /**
     * 邮箱
     */
    @Column(unique = true)
    private String email;
    /**
     * 手机号
     */
    @Column(unique = true)
    private String phone;
    /**
     * 头像
     */
    private String avatar;
    /**
     * 昵称
     */
    @Column(length = 50)
    private String nickname;
    /**
     * 状态（0-禁用，1-正常）
     */
    @Builder.Default
    private Integer status = 1;
    /**
     * 机构ID（仅机构用户）
     */
    private Long institutionId;
    /**
     * 最后登录时间
     */
    private LocalDateTime lastLoginAt;
    /**
     * 用户角色
     */
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
        name = "user_roles",
        joinColumns = @JoinColumn(name = "user_id"),
        inverseJoinColumns = @JoinColumn(name = "role_id")
    )
    @Builder.Default
    private Set<Role> roles = new HashSet<>();
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/RoleEnum.java">
package com.zhangziqi.online_course_mine.model.enums;
import lombok.Getter;
/**
 * 角色枚举
 */
@Getter
public enum RoleEnum {
    /**
     * 普通用户
     */
    USER("普通用户", "ROLE_USER"),
    /**
     * 管理员
     */
    ADMIN("管理员", "ROLE_ADMIN"),
    /**
     * 审核人员
     */
    REVIEWER("审核人员", "ROLE_REVIEWER"),
    /**
     * 机构用户
     */
    INSTITUTION("机构用户", "ROLE_INSTITUTION");
    /**
     * 角色名称
     */
    private final String name;
    /**
     * 角色编码
     */
    private final String code;
    RoleEnum(String name, String code) {
        this.name = name;
        this.code = code;
    }
    /**
     * 根据编码获取角色枚举
     *
     * @param code 编码
     * @return 角色枚举
     */
    public static RoleEnum getByCode(String code) {
        for (RoleEnum role : RoleEnum.values()) {
            if (role.getCode().equals(code)) {
                return role;
            }
        }
        return null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/PermissionVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
/**
 * 权限视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "权限信息")
public class PermissionVO {
    @Schema(description = "权限ID")
    private Long id;
    @Schema(description = "权限名称")
    private String name;
    @Schema(description = "权限编码")
    private String code;
    @Schema(description = "权限描述")
    private String description;
    @Schema(description = "资源URL")
    private String url;
    @Schema(description = "HTTP方法")
    private String method;
    @Schema(description = "创建时间")
    private LocalDateTime createdAt;
    @Schema(description = "更新时间")
    private LocalDateTime updatedAt;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/Result.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 统一返回结果
 * @param <T> 数据类型
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Result<T> {
    /**
     * 状态码
     */
    private Integer code;
    /**
     * 消息
     */
    private String message;
    /**
     * 数据
     */
    private T data;
    /**
     * 成功
     */
    public static <T> Result<T> success() {
        return success(null);
    }
    /**
     * 成功
     * @param data 数据
     */
    public static <T> Result<T> success(T data) {
        return Result.<T>builder()
                .code(200)
                .message("操作成功")
                .data(data)
                .build();
    }
    /**
     * 失败
     * @param code 状态码
     * @param message 消息
     */
    public static <T> Result<T> fail(Integer code, String message) {
        return Result.<T>builder()
                .code(code)
                .message(message)
                .build();
    }
    /**
     * 失败
     * @param message 消息
     */
    public static <T> Result<T> fail(String message) {
        return fail(500, message);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/RoleVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
import java.util.Set;
/**
 * 角色视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "角色信息")
public class RoleVO {
    @Schema(description = "角色ID")
    private Long id;
    @Schema(description = "角色名称")
    private String name;
    @Schema(description = "角色编码")
    private String code;
    @Schema(description = "角色描述")
    private String description;
    @Schema(description = "创建时间")
    private LocalDateTime createdAt;
    @Schema(description = "更新时间")
    private LocalDateTime updatedAt;
    @Schema(description = "权限列表")
    private Set<Permission> permissions;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/UserVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import com.zhangziqi.online_course_mine.model.entity.Role;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
import java.util.Set;
/**
 * 用户视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "用户信息")
public class UserVO {
    @Schema(description = "用户ID")
    private Long id;
    @Schema(description = "用户名")
    private String username;
    @Schema(description = "邮箱")
    private String email;
    @Schema(description = "手机号")
    private String phone;
    @Schema(description = "头像")
    private String avatar;
    @Schema(description = "昵称")
    private String nickname;
    @Schema(description = "状态：0-禁用，1-正常")
    private Integer status;
    @Schema(description = "机构ID")
    private Long institutionId;
    @Schema(description = "创建时间")
    private LocalDateTime createdAt;
    @Schema(description = "更新时间")
    private LocalDateTime updatedAt;
    @Schema(description = "最后登录时间")
    private LocalDateTime lastLoginAt;
    @Schema(description = "角色列表")
    private Set<Role> roles;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/OnlineCourseMineApplication.java">
package com.zhangziqi.online_course_mine;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
@SpringBootApplication
public class OnlineCourseMineApplication {
    public static void main(String[] args) {
        SpringApplication.run(OnlineCourseMineApplication.class, args);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/InstitutionRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 机构Repository
 */
@Repository
public interface InstitutionRepository extends JpaRepository<Institution, Long> {
    /**
     * 根据机构名称查找机构
     *
     * @param name 机构名称
     * @return 机构
     */
    Optional<Institution> findByName(String name);
    /**
     * 根据状态查找机构列表
     *
     * @param status 状态
     * @return 机构列表
     */
    List<Institution> findByStatus(Integer status);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/PermissionRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.Optional;
/**
 * 权限Repository
 */
@Repository
public interface PermissionRepository extends JpaRepository<Permission, Long> {
    /**
     * 根据权限编码查找权限
     *
     * @param code 权限编码
     * @return 权限
     */
    Optional<Permission> findByCode(String code);
    /**
     * 根据URL和请求方法查找权限
     *
     * @param url URL
     * @param method 请求方法
     * @return 权限
     */
    Optional<Permission> findByUrlAndMethod(String url, String method);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/RoleRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Role;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.Optional;
/**
 * 角色Repository
 */
@Repository
public interface RoleRepository extends JpaRepository<Role, Long> {
    /**
     * 根据角色编码查找角色
     *
     * @param code 角色编码
     * @return 角色
     */
    Optional<Role> findByCode(String code);
    /**
     * 根据角色名称查找角色
     *
     * @param name 角色名称
     * @return 角色
     */
    Optional<Role> findByName(String name);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/UserRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.stereotype.Repository;
import java.util.Optional;
/**
 * 用户Repository
 */
@Repository
public interface UserRepository extends JpaRepository<User, Long>, JpaSpecificationExecutor<User> {
    /**
     * 根据用户名查找用户
     *
     * @param username 用户名
     * @return 用户
     */
    Optional<User> findByUsername(String username);
    /**
     * 根据邮箱查找用户
     *
     * @param email 邮箱
     * @return 用户
     */
    Optional<User> findByEmail(String email);
    /**
     * 根据手机号查找用户
     *
     * @param phone 手机号
     * @return 用户
     */
    Optional<User> findByPhone(String phone);
    /**
     * 判断用户名是否存在
     *
     * @param username 用户名
     * @return 是否存在
     */
    boolean existsByUsername(String username);
    /**
     * 判断邮箱是否存在
     *
     * @param email 邮箱
     * @return 是否存在
     */
    boolean existsByEmail(String email);
    /**
     * 判断手机号是否存在
     *
     * @param phone 手机号
     * @return 是否存在
     */
    boolean existsByPhone(String phone);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/security/jwt/JwtAuthenticationFilter.java">
package com.zhangziqi.online_course_mine.security.jwt;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;
import java.io.IOException;
/**
 * JWT认证过滤器
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {
    private final JwtTokenProvider tokenProvider;
    private final TokenBlacklistService tokenBlacklistService;
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        try {
            String jwt = resolveToken(request);
            if (StringUtils.hasText(jwt) && validateToken(jwt)) {
                Authentication authentication = tokenProvider.getAuthentication(jwt);
                SecurityContextHolder.getContext().setAuthentication(authentication);
                log.debug("已设置认证 '{}' 到安全上下文", authentication.getName());
            }
        } catch (Exception e) {
            log.error("无法设置用户认证到安全上下文", e);
        }
        filterChain.doFilter(request, response);
    }
    /**
     * 从请求头中获取令牌
     */
    private String resolveToken(HttpServletRequest request) {
        String bearerToken = request.getHeader("Authorization");
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7);
        }
        return null;
    }
    /**
     * 验证令牌
     */
    private boolean validateToken(String token) {
        // 先检查令牌是否在黑名单中
        if (tokenBlacklistService.isBlacklisted(token)) {
            log.warn("令牌已被注销: {}", token);
            return false;
        }
        // 再验证令牌有效性
        return tokenProvider.validateToken(token);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/security/jwt/JwtTokenProvider.java">
package com.zhangziqi.online_course_mine.security.jwt;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.UnsupportedJwtException;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.stereotype.Component;
import javax.crypto.SecretKey;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.stream.Collectors;
/**
 * JWT令牌提供者
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class JwtTokenProvider {
    private final JwtConfig jwtConfig;
    /**
     * 获取密钥
     */
    private SecretKey getSigningKey() {
        // 直接使用密钥字符串，不再进行Base64解码
        return Keys.hmacShaKeyFor(jwtConfig.getSecret().getBytes());
    }
    /**
     * 创建令牌
     *
     * @param authentication 认证信息
     * @return JWT令牌
     */
    public JwtTokenDTO createToken(Authentication authentication) {
        String username = authentication.getName();
        Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();
        String roles = authorities.stream()
                .map(GrantedAuthority::getAuthority)
                .collect(Collectors.joining(","));
        long now = System.currentTimeMillis();
        Date accessTokenValidity = new Date(now + jwtConfig.getAccessTokenExpiration());
        // 创建访问令牌
        String accessToken = Jwts.builder()
                .subject(username)
                .claim("auth", roles)
                .issuedAt(new Date(now))
                .expiration(accessTokenValidity)
                .signWith(getSigningKey())
                .compact();
        // 创建刷新令牌
        Date refreshTokenValidity = new Date(now + jwtConfig.getRefreshTokenExpiration());
        String refreshToken = Jwts.builder()
                .subject(username)
                .issuedAt(new Date(now))
                .expiration(refreshTokenValidity)
                .signWith(getSigningKey())
                .compact();
        return JwtTokenDTO.builder()
                .accessToken(accessToken)
                .refreshToken(refreshToken)
                .expiresIn(jwtConfig.getAccessTokenExpiration())
                .build();
    }
    /**
     * 刷新令牌
     *
     * @param refreshToken 刷新令牌
     * @return JWT令牌
     */
    public JwtTokenDTO refreshToken(String refreshToken) {
        String username = getUsernameFromToken(refreshToken);
        // 这里简化处理，实际应用中应从数据库或缓存获取用户角色
        String roles = "ROLE_USER";
        long now = System.currentTimeMillis();
        Date accessTokenValidity = new Date(now + jwtConfig.getAccessTokenExpiration());
        // 创建新的访问令牌
        String accessToken = Jwts.builder()
                .subject(username)
                .claim("auth", roles)
                .issuedAt(new Date(now))
                .expiration(accessTokenValidity)
                .signWith(getSigningKey())
                .compact();
        return JwtTokenDTO.builder()
                .accessToken(accessToken)
                .refreshToken(refreshToken)
                .expiresIn(jwtConfig.getAccessTokenExpiration())
                .build();
    }
    /**
     * 从令牌中获取用户信息
     *
     * @param token 令牌
     * @return 认证信息
     */
    public Authentication getAuthentication(String token) {
        Claims claims = parseToken(token);
        String auth = claims.get("auth", String.class);
        Collection<? extends GrantedAuthority> authorities = auth != null ?
                Arrays.stream(auth.split(","))
                        .filter(role -> !role.isEmpty())
                        .map(SimpleGrantedAuthority::new)
                        .collect(Collectors.toList()) :
                java.util.Collections.emptyList();
        User principal = new User(claims.getSubject(), "", authorities);
        return new UsernamePasswordAuthenticationToken(principal, token, authorities);
    }
    /**
     * 解析令牌
     *
     * @param token 令牌
     * @return 声明
     */
    private Claims parseToken(String token) {
        return Jwts.parser()
                .verifyWith(getSigningKey())
                .build()
                .parseSignedClaims(token)
                .getPayload();
    }
    /**
     * 从令牌中获取用户名
     *
     * @param token 令牌
     * @return 用户名
     */
    public String getUsernameFromToken(String token) {
        return parseToken(token).getSubject();
    }
    /**
     * 验证令牌
     *
     * @param token 令牌
     * @return 是否有效
     */
    public boolean validateToken(String token) {
        try {
            Jwts.parser().verifyWith(getSigningKey()).build().parseSignedClaims(token);
            return true;
        } catch (io.jsonwebtoken.security.SecurityException | MalformedJwtException e) {
            log.error("无效的JWT签名: {}", e.getMessage());
        } catch (ExpiredJwtException e) {
            log.error("JWT令牌已过期: {}", e.getMessage());
        } catch (UnsupportedJwtException e) {
            log.error("不支持的JWT令牌: {}", e.getMessage());
        } catch (IllegalArgumentException e) {
            log.error("JWT令牌为空: {}", e.getMessage());
        }
        return false;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/security/jwt/TokenBlacklistService.java">
package com.zhangziqi.online_course_mine.security.jwt;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import java.util.concurrent.TimeUnit;
/**
 * Token黑名单服务
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class TokenBlacklistService {
    private final RedisTemplate<String, Object> redisTemplate;
    private static final String TOKEN_BLACKLIST_PREFIX = "token:blacklist:";
    /**
     * 将令牌加入黑名单
     *
     * @param token 令牌
     * @param expireTime 过期时间（毫秒）
     */
    public void addToBlacklist(String token, long expireTime) {
        String key = TOKEN_BLACKLIST_PREFIX + token;
        redisTemplate.opsForValue().set(key, "1", expireTime, TimeUnit.MILLISECONDS);
        log.info("Token已加入黑名单: {}", token);
    }
    /**
     * 检查令牌是否在黑名单中
     *
     * @param token 令牌
     * @return 是否在黑名单中
     */
    public boolean isBlacklisted(String token) {
        String key = TOKEN_BLACKLIST_PREFIX + token;
        return Boolean.TRUE.equals(redisTemplate.hasKey(key));
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/security/UserDetailsServiceImpl.java">
package com.zhangziqi.online_course_mine.security;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.stream.Collectors;
/**
 * 用户详情服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class UserDetailsServiceImpl implements UserDetailsService {
    private final UserRepository userRepository;
    /**
     * 根据用户名加载用户
     *
     * @param username 用户名
     * @return 用户详情
     * @throws UsernameNotFoundException 用户名不存在
     */
    @Override
    @Transactional(readOnly = true)
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        log.debug("根据用户名查询用户: {}", username);
        // 查询用户
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("用户不存在: " + username));
        // 状态检查
        if (user.getStatus() != 1) {
            log.warn("用户已被禁用: {}", username);
            throw new UsernameNotFoundException("用户已被禁用");
        }
        // 构建UserDetails对象
        return org.springframework.security.core.userdetails.User.builder()
                .username(user.getUsername())
                .password(user.getPassword())
                .accountLocked(false)
                .credentialsExpired(false)
                .disabled(false)
                .accountExpired(false)
                // 设置用户角色
                .authorities(user.getRoles().stream()
                        .map(role -> new SimpleGrantedAuthority(role.getCode()))
                        .collect(Collectors.toList()))
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/AuthService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.LoginDTO;
import com.zhangziqi.online_course_mine.model.dto.RefreshTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
/**
 * 认证服务接口
 */
public interface AuthService {
    /**
     * 用户注册
     *
     * @param registerDTO 注册请求
     */
    void register(RegisterDTO registerDTO);
    /**
     * 用户登录
     *
     * @param loginDTO 登录请求
     * @return JWT令牌
     */
    JwtTokenDTO login(LoginDTO loginDTO);
    /**
     * 刷新令牌
     *
     * @param refreshTokenDTO 刷新令牌请求
     * @return 新的JWT令牌
     */
    JwtTokenDTO refreshToken(RefreshTokenDTO refreshTokenDTO);
    /**
     * 注销
     *
     * @param token 访问令牌
     */
    void logout(String token);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/CaptchaService.java">
package com.zhangziqi.online_course_mine.service;
import java.awt.image.BufferedImage;
/**
 * 验证码服务接口
 */
public interface CaptchaService {
    /**
     * 生成验证码
     *
     * @param captchaKey 验证码标识
     * @return 验证码图片
     */
    BufferedImage generateCaptcha(String captchaKey);
    /**
     * 验证验证码
     *
     * @param captchaKey   验证码标识
     * @param captchaCode 验证码
     * @return 是否验证成功
     */
    boolean validateCaptcha(String captchaKey, String captchaCode);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/EmailService.java">
package com.zhangziqi.online_course_mine.service;
/**
 * 邮件服务接口
 */
public interface EmailService {
    /**
     * 发送验证码邮件
     *
     * @param to 收件人邮箱
     * @param code 验证码
     */
    void sendVerificationCode(String to, String code);
    /**
     * 发送邮箱更新验证码邮件
     *
     * @param to 新邮箱地址
     * @param code 验证码
     */
    void sendEmailUpdateCode(String to, String code);
    /**
     * 生成验证码
     *
     * @return 6位数字验证码
     */
    String generateVerificationCode();
    /**
     * 保存验证码到Redis
     *
     * @param email 邮箱
     * @param code 验证码
     */
    void saveVerificationCode(String email, String code);
    /**
     * 验证邮箱验证码
     *
     * @param email 邮箱
     * @param code 验证码
     * @return 是否验证通过
     */
    boolean validateVerificationCode(String email, String code);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/AuthServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.LoginDTO;
import com.zhangziqi.online_course_mine.model.dto.RefreshTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.security.jwt.JwtTokenProvider;
import com.zhangziqi.online_course_mine.security.jwt.TokenBlacklistService;
import com.zhangziqi.online_course_mine.service.AuthService;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import com.zhangziqi.online_course_mine.service.EmailService;
import com.zhangziqi.online_course_mine.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
/**
 * 认证服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class AuthServiceImpl implements AuthService {
    private final AuthenticationManager authenticationManager;
    private final JwtTokenProvider tokenProvider;
    private final UserService userService;
    private final CaptchaService captchaService;
    private final EmailService emailService;
    private final TokenBlacklistService tokenBlacklistService;
    private final JwtConfig jwtConfig;
    /**
     * 用户注册
     *
     * @param registerDTO 注册请求
     */
    @Override
    @Transactional
    public void register(RegisterDTO registerDTO) {
        // 验证邮箱验证码
        if (!emailService.validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode())) {
            throw new BusinessException("邮箱验证码错误或已过期");
        }
        // 注册用户
        userService.register(registerDTO);
        log.info("用户注册成功: {}", registerDTO.getUsername());
    }
    /**
     * 用户登录
     *
     * @param loginDTO 登录请求
     * @return JWT令牌
     */
    @Override
    @Transactional
    public JwtTokenDTO login(LoginDTO loginDTO) {
        // 验证验证码
        if (!captchaService.validateCaptcha(loginDTO.getCaptchaKey(), loginDTO.getCaptchaCode())) {
            throw new BusinessException("验证码错误");
        }
        // 认证用户
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(loginDTO.getUsername(), loginDTO.getPassword())
        );
        SecurityContextHolder.getContext().setAuthentication(authentication);
        // 更新最后登录时间
        userService.updateLastLoginTime(loginDTO.getUsername());
        // 生成JWT令牌
        JwtTokenDTO jwtTokenDTO = tokenProvider.createToken(authentication);
        log.info("用户登录成功: {}", loginDTO.getUsername());
        return jwtTokenDTO;
    }
    /**
     * 刷新令牌
     *
     * @param refreshTokenDTO 刷新令牌请求
     * @return 新的JWT令牌
     */
    @Override
    @Transactional
    public JwtTokenDTO refreshToken(RefreshTokenDTO refreshTokenDTO) {
        String refreshToken = refreshTokenDTO.getRefreshToken();
        // 验证刷新令牌
        if (!tokenProvider.validateToken(refreshToken)) {
            throw new BusinessException("刷新令牌无效或已过期");
        }
        // 检查刷新令牌是否在黑名单中
        if (tokenBlacklistService.isBlacklisted(refreshToken)) {
            throw new BusinessException("刷新令牌已被注销");
        }
        // 刷新令牌
        JwtTokenDTO jwtTokenDTO = tokenProvider.refreshToken(refreshToken);
        log.info("刷新令牌成功: {}", tokenProvider.getUsernameFromToken(refreshToken));
        return jwtTokenDTO;
    }
    /**
     * 注销
     *
     * @param token 访问令牌
     */
    @Override
    public void logout(String token) {
        if (token == null || token.isEmpty()) {
            return;
        }
        // 从令牌中提取用户名
        String username = tokenProvider.getUsernameFromToken(token);
        // 将令牌加入黑名单
        tokenBlacklistService.addToBlacklist(token, jwtConfig.getAccessTokenExpiration());
        log.info("用户注销成功: {}", username);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/CaptchaServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.google.code.kaptcha.impl.DefaultKaptcha;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import java.awt.image.BufferedImage;
import java.util.concurrent.TimeUnit;
/**
 * 验证码服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CaptchaServiceImpl implements CaptchaService {
    private final DefaultKaptcha captchaProducer;
    private final RedisTemplate<String, Object> redisTemplate;
    private static String CAPTCHA_PREFIX = "captcha:";
    private static long CAPTCHA_EXPIRATION = 5 * 60; // 5分钟
    /**
     * 生成验证码
     *
     * @param captchaKey 验证码标识
     * @return 验证码图片
     */
    @Override
    public BufferedImage generateCaptcha(String captchaKey) {
        // 生成验证码文本
        String captchaText = captchaProducer.createText();
        log.debug("生成验证码: {} -> {}", captchaKey, captchaText);
        // 保存验证码到Redis
        String redisKey = CAPTCHA_PREFIX + captchaKey;
        redisTemplate.opsForValue().set(redisKey, captchaText, CAPTCHA_EXPIRATION, TimeUnit.SECONDS);
        // 生成验证码图片
        return captchaProducer.createImage(captchaText);
    }
    /**
     * 验证验证码
     *
     * @param captchaKey   验证码标识
     * @param captchaCode 验证码
     * @return 是否验证成功
     */
    @Override
    public boolean validateCaptcha(String captchaKey, String captchaCode) {
        if (!StringUtils.hasText(captchaKey) || !StringUtils.hasText(captchaCode)) {
            return false;
        }
        // 从Redis获取验证码
        String redisKey = CAPTCHA_PREFIX + captchaKey;
        Object value = redisTemplate.opsForValue().get(redisKey);
        if (value == null) {
            log.debug("验证码不存在或已过期: {}", captchaKey);
            return false;
        }
        // 验证后删除验证码
        redisTemplate.delete(redisKey);
        // 忽略大小写比较
        boolean result = captchaCode.equalsIgnoreCase(value.toString());
        log.debug("验证码校验: {} -> {} vs {}, 结果: {}", captchaKey, captchaCode, value, result);
        return result;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/EmailServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.service.EmailService;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import java.util.Random;
import java.util.concurrent.TimeUnit;
/**
 * 邮件服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class EmailServiceImpl implements EmailService {
    private final JavaMailSender mailSender;
    private final StringRedisTemplate redisTemplate;
    private final TemplateEngine templateEngine;
    /**
     * Redis中验证码的key前缀
     */
    @Setter
    private String verificationCodePrefix = "email:verification:";
    /**
     * 验证码有效期（分钟）
     */
    @Setter
    private long verificationCodeExpiration = 5;
    @Override
    public void sendVerificationCode(String to, String code) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true);
            helper.setFrom("no-reply@example.com");
            helper.setTo(to);
            helper.setSubject("在线课程平台 - 邮箱验证码");
            // 使用Thymeleaf模板引擎渲染邮件内容
            Context context = new Context();
            context.setVariable("code", code);
            context.setVariable("expirationMinutes", verificationCodeExpiration);
            String content = templateEngine.process("email/verification-code", context);
            helper.setText(content, true);
            mailSender.send(message);
            log.info("验证码邮件发送成功: {}", to);
        } catch (MessagingException e) {
            log.error("验证码邮件发送失败: {}", to, e);
            throw new RuntimeException("验证码邮件发送失败", e);
        }
    }
    @Override
    public void sendEmailUpdateCode(String to, String code) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true);
            helper.setFrom("no-reply@example.com");
            helper.setTo(to);
            helper.setSubject("在线课程平台 - 邮箱更新验证码");
            // 使用Thymeleaf模板引擎渲染邮件内容
            Context context = new Context();
            context.setVariable("code", code);
            context.setVariable("expirationMinutes", verificationCodeExpiration);
            String content = templateEngine.process("email/email-update-code", context);
            helper.setText(content, true);
            mailSender.send(message);
            log.info("邮箱更新验证码邮件发送成功: {}", to);
        } catch (MessagingException e) {
            log.error("邮箱更新验证码邮件发送失败: {}", to, e);
            throw new RuntimeException("邮箱更新验证码邮件发送失败", e);
        }
    }
    @Override
    public String generateVerificationCode() {
        Random random = new Random();
        // 生成6位数字验证码
        return String.format("%06d", random.nextInt(1000000));
    }
    @Override
    public void saveVerificationCode(String email, String code) {
        String key = verificationCodePrefix + email;
        redisTemplate.opsForValue().set(key, code, verificationCodeExpiration, TimeUnit.MINUTES);
        log.info("验证码已保存到Redis: {}", email);
    }
    @Override
    public boolean validateVerificationCode(String email, String code) {
        String key = verificationCodePrefix + email;
        String savedCode = redisTemplate.opsForValue().get(key);
        if (savedCode != null && savedCode.equals(code)) {
            // 验证成功后删除验证码
            redisTemplate.delete(key);
            return true;
        }
        return false;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/MinioServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.config.MinioConfig;
import com.zhangziqi.online_course_mine.service.MinioService;
import io.minio.*;
import io.minio.http.Method;
import io.minio.messages.Item;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
@Slf4j
@Service
@RequiredArgsConstructor
public class MinioServiceImpl implements MinioService {
    private final MinioClient minioClient;
    private final MinioConfig minioConfig;
    @Override
    public String uploadFile(String objectName, InputStream inputStream, String contentType) {
        try {
            checkAndCreateBucket();
            // 上传文件
            minioClient.putObject(
                    PutObjectArgs.builder()
                            .bucket(minioConfig.getBucketName())
                            .object(objectName)
                            .stream(inputStream, inputStream.available(), -1)
                            .contentType(contentType)
                            .build()
            );
            return getFileUrl(objectName);
        } catch (Exception e) {
            log.error("文件上传失败: {}", e.getMessage(), e);
            throw new RuntimeException("文件上传失败", e);
        }
    }
    @Override
    public boolean deleteFile(String objectName) {
        try {
            minioClient.removeObject(
                    RemoveObjectArgs.builder()
                            .bucket(minioConfig.getBucketName())
                            .object(objectName)
                            .build()
            );
            return true;
        } catch (Exception e) {
            log.error("文件删除失败: {}", e.getMessage(), e);
            return false;
        }
    }
    @Override
    public String getFileUrl(String objectName) {
        try {
            return minioClient.getPresignedObjectUrl(
                    GetPresignedObjectUrlArgs.builder()
                            .bucket(minioConfig.getBucketName())
                            .object(objectName)
                            .method(Method.GET)
                            .expiry(7, TimeUnit.DAYS)
                            .build()
            );
        } catch (Exception e) {
            log.error("获取文件URL失败: {}", e.getMessage(), e);
            throw new RuntimeException("获取文件URL失败", e);
        }
    }
    @Override
    public List<String> listAllFiles() {
        List<String> files = new ArrayList<>();
        try {
            Iterable<Result<Item>> results = minioClient.listObjects(
                    ListObjectsArgs.builder()
                            .bucket(minioConfig.getBucketName())
                            .build()
            );
            for (Result<Item> result : results) {
                Item item = result.get();
                files.add(item.objectName());
            }
            return files;
        } catch (Exception e) {
            log.error("列出所有文件失败: {}", e.getMessage(), e);
            throw new RuntimeException("列出所有文件失败", e);
        }
    }
    @Override
    public void checkAndCreateBucket() {
        try {
            boolean bucketExists = minioClient.bucketExists(
                    BucketExistsArgs.builder()
                            .bucket(minioConfig.getBucketName())
                            .build()
            );
            if (!bucketExists) {
                minioClient.makeBucket(
                        MakeBucketArgs.builder()
                                .bucket(minioConfig.getBucketName())
                                .build()
                );
                log.info("Bucket '{}' 创建成功", minioConfig.getBucketName());
            }
        } catch (Exception e) {
            log.error("检查或创建存储桶失败: {}", e.getMessage(), e);
            throw new RuntimeException("检查或创建存储桶失败", e);
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/PermissionServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.PermissionDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.vo.PermissionVO;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.service.PermissionService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import java.util.List;
import java.util.stream.Collectors;
/**
 * 权限服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class PermissionServiceImpl implements PermissionService {
    private final PermissionRepository permissionRepository;
    private final RoleRepository roleRepository;
    /**
     * 获取权限列表
     *
     * @return 权限列表
     */
    @Override
    @Transactional(readOnly = true)
    public List<PermissionVO> getPermissionList() {
        List<Permission> permissions = permissionRepository.findAll();
        return permissions.stream()
                .map(this::convertToPermissionVO)
                .collect(Collectors.toList());
    }
    /**
     * 获取权限详情
     *
     * @param id 权限ID
     * @return 权限详情
     */
    @Override
    @Transactional(readOnly = true)
    public PermissionVO getPermissionById(Long id) {
        Permission permission = permissionRepository.findById(id)
                .orElseThrow(() -> new BusinessException("权限不存在"));
        return convertToPermissionVO(permission);
    }
    /**
     * 获取权限（根据编码）
     *
     * @param code 权限编码
     * @return 权限
     */
    @Override
    @Transactional(readOnly = true)
    public Permission getPermissionByCode(String code) {
        return permissionRepository.findByCode(code)
                .orElseThrow(() -> new BusinessException("权限不存在"));
    }
    /**
     * 创建权限
     *
     * @param permissionDTO 权限信息
     * @return 创建后的权限信息
     */
    @Override
    @Transactional
    public PermissionVO createPermission(PermissionDTO permissionDTO) {
        // 检查权限编码是否存在
        if (permissionRepository.findByCode(permissionDTO.getCode()).isPresent()) {
            throw new BusinessException("权限编码已存在");
        }
        // 检查URL和方法是否已存在权限
        if (StringUtils.hasText(permissionDTO.getUrl()) && StringUtils.hasText(permissionDTO.getMethod())) {
            if (permissionRepository.findByUrlAndMethod(permissionDTO.getUrl(), permissionDTO.getMethod()).isPresent()) {
                throw new BusinessException("该URL和请求方法的权限已存在");
            }
        }
        // 创建权限
        Permission permission = Permission.builder()
                .name(permissionDTO.getName())
                .code(permissionDTO.getCode())
                .description(permissionDTO.getDescription())
                .url(permissionDTO.getUrl())
                .method(permissionDTO.getMethod())
                .build();
        // 保存权限
        Permission savedPermission = permissionRepository.save(permission);
        log.info("创建权限成功: {}", savedPermission.getName());
        return convertToPermissionVO(savedPermission);
    }
    /**
     * 更新权限
     *
     * @param id            权限ID
     * @param permissionDTO 权限信息
     * @return 更新后的权限信息
     */
    @Override
    @Transactional
    public PermissionVO updatePermission(Long id, PermissionDTO permissionDTO) {
        Permission permission = permissionRepository.findById(id)
                .orElseThrow(() -> new BusinessException("权限不存在"));
        // 检查权限编码是否存在
        if (StringUtils.hasText(permissionDTO.getCode()) &&
                !permission.getCode().equals(permissionDTO.getCode()) &&
                permissionRepository.findByCode(permissionDTO.getCode()).isPresent()) {
            throw new BusinessException("权限编码已存在");
        }
        // 检查URL和方法是否已存在权限
        if (StringUtils.hasText(permissionDTO.getUrl()) && StringUtils.hasText(permissionDTO.getMethod())) {
            if (!permission.getUrl().equals(permissionDTO.getUrl()) || 
                !permission.getMethod().equals(permissionDTO.getMethod())) {
                if (permissionRepository.findByUrlAndMethod(permissionDTO.getUrl(), permissionDTO.getMethod()).isPresent()) {
                    throw new BusinessException("该URL和请求方法的权限已存在");
                }
            }
        }
        // 更新基本信息
        if (StringUtils.hasText(permissionDTO.getName())) {
            permission.setName(permissionDTO.getName());
        }
        if (StringUtils.hasText(permissionDTO.getCode())) {
            permission.setCode(permissionDTO.getCode());
        }
        if (permissionDTO.getDescription() != null) {
            permission.setDescription(permissionDTO.getDescription());
        }
        if (StringUtils.hasText(permissionDTO.getUrl())) {
            permission.setUrl(permissionDTO.getUrl());
        }
        if (StringUtils.hasText(permissionDTO.getMethod())) {
            permission.setMethod(permissionDTO.getMethod());
        }
        // 保存权限
        Permission savedPermission = permissionRepository.save(permission);
        log.info("更新权限成功: {}", savedPermission.getName());
        return convertToPermissionVO(savedPermission);
    }
    /**
     * 删除权限
     *
     * @param id 权限ID
     */
    @Override
    @Transactional
    public void deletePermission(Long id) {
        Permission permission = permissionRepository.findById(id)
                .orElseThrow(() -> new BusinessException("权限不存在"));
        // 检查权限是否被角色引用
        List<Role> roles = roleRepository.findAll();
        for (Role role : roles) {
            if (role.getPermissions().contains(permission)) {
                throw new BusinessException("权限已被角色引用，无法删除");
            }
        }
        permissionRepository.delete(permission);
        log.info("删除权限成功: {}", permission.getName());
    }
    /**
     * 批量删除权限
     *
     * @param ids 权限ID列表
     */
    @Override
    @Transactional
    public void batchDeletePermissions(List<Long> ids) {
        if (ids == null || ids.isEmpty()) {
            throw new BusinessException("权限ID列表不能为空");
        }
        for (Long id : ids) {
            deletePermission(id);
        }
    }
    /**
     * 转换为权限VO
     *
     * @param permission 权限实体
     * @return 权限VO
     */
    private PermissionVO convertToPermissionVO(Permission permission) {
        return PermissionVO.builder()
                .id(permission.getId())
                .name(permission.getName())
                .code(permission.getCode())
                .description(permission.getDescription())
                .url(permission.getUrl())
                .method(permission.getMethod())
                .createdAt(permission.getCreatedAt())
                .updatedAt(permission.getUpdatedAt())
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/RoleServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.RoleDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.vo.RoleVO;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.RoleService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
/**
 * 角色服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class RoleServiceImpl implements RoleService {
    private final RoleRepository roleRepository;
    private final PermissionRepository permissionRepository;
    private final UserRepository userRepository;
    /**
     * 获取角色列表
     *
     * @return 角色列表
     */
    @Override
    @Transactional(readOnly = true)
    public List<RoleVO> getRoleList() {
        List<Role> roles = roleRepository.findAll();
        return roles.stream()
                .map(this::convertToRoleVO)
                .collect(Collectors.toList());
    }
    /**
     * 获取角色详情
     *
     * @param id 角色ID
     * @return 角色详情
     */
    @Override
    @Transactional(readOnly = true)
    public RoleVO getRoleById(Long id) {
        Role role = roleRepository.findById(id)
                .orElseThrow(() -> new BusinessException("角色不存在"));
        return convertToRoleVO(role);
    }
    /**
     * 获取角色（根据编码）
     *
     * @param code 角色编码
     * @return 角色
     */
    @Override
    @Transactional(readOnly = true)
    public Role getRoleByCode(String code) {
        return roleRepository.findByCode(code)
                .orElseThrow(() -> new BusinessException("角色不存在"));
    }
    /**
     * 创建角色
     *
     * @param roleDTO 角色信息
     * @return 创建后的角色信息
     */
    @Override
    @Transactional
    public RoleVO createRole(RoleDTO roleDTO) {
        // 检查角色编码是否存在
        if (roleRepository.findByCode(roleDTO.getCode()).isPresent()) {
            throw new BusinessException("角色编码已存在");
        }
        // 检查角色名称是否存在
        if (roleRepository.findByName(roleDTO.getName()).isPresent()) {
            throw new BusinessException("角色名称已存在");
        }
        // 获取权限
        Set<Permission> permissions = new HashSet<>();
        if (roleDTO.getPermissionIds() != null && !roleDTO.getPermissionIds().isEmpty()) {
            permissions = roleDTO.getPermissionIds().stream()
                    .map(permissionId -> permissionRepository.findById(permissionId)
                            .orElseThrow(() -> new BusinessException("权限不存在: " + permissionId)))
                    .collect(Collectors.toSet());
        }
        // 创建角色
        Role role = Role.builder()
                .name(roleDTO.getName())
                .code(roleDTO.getCode())
                .description(roleDTO.getDescription())
                .permissions(permissions)
                .build();
        // 保存角色
        Role savedRole = roleRepository.save(role);
        log.info("创建角色成功: {}", savedRole.getName());
        return convertToRoleVO(savedRole);
    }
    /**
     * 更新角色
     *
     * @param id      角色ID
     * @param roleDTO 角色信息
     * @return 更新后的角色信息
     */
    @Override
    @Transactional
    public RoleVO updateRole(Long id, RoleDTO roleDTO) {
        Role role = roleRepository.findById(id)
                .orElseThrow(() -> new BusinessException("角色不存在"));
        // 检查角色编码是否存在
        if (StringUtils.hasText(roleDTO.getCode()) &&
                !role.getCode().equals(roleDTO.getCode()) &&
                roleRepository.findByCode(roleDTO.getCode()).isPresent()) {
            throw new BusinessException("角色编码已存在");
        }
        // 检查角色名称是否存在
        if (StringUtils.hasText(roleDTO.getName()) &&
                !role.getName().equals(roleDTO.getName()) &&
                roleRepository.findByName(roleDTO.getName()).isPresent()) {
            throw new BusinessException("角色名称已存在");
        }
        // 更新权限
        if (roleDTO.getPermissionIds() != null) {
            Set<Permission> permissions = roleDTO.getPermissionIds().stream()
                    .map(permissionId -> permissionRepository.findById(permissionId)
                            .orElseThrow(() -> new BusinessException("权限不存在: " + permissionId)))
                    .collect(Collectors.toSet());
            role.setPermissions(permissions);
        }
        // 更新基本信息
        if (StringUtils.hasText(roleDTO.getName())) {
            role.setName(roleDTO.getName());
        }
        if (StringUtils.hasText(roleDTO.getCode())) {
            role.setCode(roleDTO.getCode());
        }
        if (StringUtils.hasText(roleDTO.getDescription())) {
            role.setDescription(roleDTO.getDescription());
        }
        // 保存角色
        Role savedRole = roleRepository.save(role);
        log.info("更新角色成功: {}", savedRole.getName());
        return convertToRoleVO(savedRole);
    }
    /**
     * 删除角色
     *
     * @param id 角色ID
     */
    @Override
    @Transactional
    public void deleteRole(Long id) {
        Role role = roleRepository.findById(id)
                .orElseThrow(() -> new BusinessException("角色不存在"));
        // 检查角色是否被用户引用
        if (userRepository.findAll().stream().anyMatch(user -> user.getRoles().contains(role))) {
            throw new BusinessException("角色已被用户引用，无法删除");
        }
        roleRepository.delete(role);
        log.info("删除角色成功: {}", role.getName());
    }
    /**
     * 给角色分配权限
     *
     * @param roleId        角色ID
     * @param permissionIds 权限ID列表
     * @return 更新后的角色信息
     */
    @Override
    @Transactional
    public RoleVO assignPermissions(Long roleId, Set<Long> permissionIds) {
        Role role = roleRepository.findById(roleId)
                .orElseThrow(() -> new BusinessException("角色不存在"));
        if (permissionIds == null || permissionIds.isEmpty()) {
            throw new BusinessException("权限ID列表不能为空");
        }
        Set<Permission> permissions = permissionIds.stream()
                .map(permissionId -> permissionRepository.findById(permissionId)
                        .orElseThrow(() -> new BusinessException("权限不存在: " + permissionId)))
                .collect(Collectors.toSet());
        role.setPermissions(permissions);
        Role savedRole = roleRepository.save(role);
        log.info("给角色分配权限成功: {}, 权限IDs: {}", savedRole.getName(), permissionIds);
        return convertToRoleVO(savedRole);
    }
    /**
     * 批量删除角色
     *
     * @param ids 角色ID列表
     */
    @Override
    @Transactional
    public void batchDeleteRoles(List<Long> ids) {
        if (ids == null || ids.isEmpty()) {
            throw new BusinessException("角色ID列表不能为空");
        }
        for (Long id : ids) {
            deleteRole(id);
        }
    }
    /**
     * 转换为角色VO
     *
     * @param role 角色实体
     * @return 角色VO
     */
    private RoleVO convertToRoleVO(Role role) {
        return RoleVO.builder()
                .id(role.getId())
                .name(role.getName())
                .code(role.getCode())
                .description(role.getDescription())
                .createdAt(role.getCreatedAt())
                .updatedAt(role.getUpdatedAt())
                .permissions(role.getPermissions())
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/UserServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.dto.UserDTO;
import com.zhangziqi.online_course_mine.model.dto.UserQueryDTO;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.RoleEnum;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.EmailService;
import com.zhangziqi.online_course_mine.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import jakarta.persistence.criteria.Predicate;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
/**
 * 用户服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;
    private final EmailService emailService;
    /**
     * 注册用户
     *
     * @param registerDTO 注册请求
     * @return 用户信息
     */
    @Override
    @Transactional
    public User register(RegisterDTO registerDTO) {
        // 检查用户名是否存在
        if (userRepository.existsByUsername(registerDTO.getUsername())) {
            throw new BusinessException("用户名已存在");
        }
        // 检查邮箱是否存在
        if (registerDTO.getEmail() != null && userRepository.existsByEmail(registerDTO.getEmail())) {
            throw new BusinessException("邮箱已存在");
        }
        // 检查手机号是否存在
        if (registerDTO.getPhone() != null && userRepository.existsByPhone(registerDTO.getPhone())) {
            throw new BusinessException("手机号已存在");
        }
        // 获取普通用户角色
        Role userRole = roleRepository.findByCode(RoleEnum.USER.getCode())
                .orElseThrow(() -> new BusinessException("角色不存在"));
        // 创建用户
        User user = User.builder()
                .username(registerDTO.getUsername())
                .password(passwordEncoder.encode(registerDTO.getPassword()))
                .email(registerDTO.getEmail())
                .phone(registerDTO.getPhone())
                .status(1) // 正常状态
                .roles(Collections.singleton(userRole))
                .build();
        // 保存用户
        User savedUser = userRepository.save(user);
        log.info("用户注册成功: {}", savedUser.getUsername());
        return savedUser;
    }
    /**
     * 根据用户名查询用户
     *
     * @param username 用户名
     * @return 用户信息
     */
    @Override
    @Transactional(readOnly = true)
    public User getUserByUsername(String username) {
        return userRepository.findByUsername(username)
                .orElseThrow(() -> new BusinessException("用户不存在"));
    }
    /**
     * 检查用户名是否存在
     *
     * @param username 用户名
     * @return 是否存在
     */
    @Override
    @Transactional(readOnly = true)
    public boolean existsByUsername(String username) {
        return userRepository.existsByUsername(username);
    }
    /**
     * 检查邮箱是否存在
     *
     * @param email 邮箱
     * @return 是否存在
     */
    @Override
    @Transactional(readOnly = true)
    public boolean existsByEmail(String email) {
        return userRepository.existsByEmail(email);
    }
    /**
     * 检查手机号是否存在
     *
     * @param phone 手机号
     * @return 是否存在
     */
    @Override
    @Transactional(readOnly = true)
    public boolean existsByPhone(String phone) {
        return userRepository.existsByPhone(phone);
    }
    /**
     * 更新最后登录时间
     *
     * @param username 用户名
     */
    @Override
    @Transactional
    public void updateLastLoginTime(String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        user.setLastLoginAt(LocalDateTime.now());
        userRepository.save(user);
        log.debug("更新用户最后登录时间: {}", username);
    }
    /**
     * 分页查询用户列表
     *
     * @param queryDTO 查询条件
     * @return 用户列表（分页）
     */
    @Override
    @Transactional(readOnly = true)
    public Page<UserVO> getUserList(UserQueryDTO queryDTO) {
        Pageable pageable = PageRequest.of(queryDTO.getPageNum() - 1, queryDTO.getPageSize());
        // 构建查询条件
        Specification<User> spec = (root, query, cb) -> {
            var predicates = new HashSet<Predicate>();
            // 按用户名模糊查询
            if (StringUtils.hasText(queryDTO.getUsername())) {
                predicates.add(cb.like(root.get("username"), "%" + queryDTO.getUsername() + "%"));
            }
            // 按邮箱模糊查询
            if (StringUtils.hasText(queryDTO.getEmail())) {
                predicates.add(cb.like(root.get("email"), "%" + queryDTO.getEmail() + "%"));
            }
            // 按手机号模糊查询
            if (StringUtils.hasText(queryDTO.getPhone())) {
                predicates.add(cb.like(root.get("phone"), "%" + queryDTO.getPhone() + "%"));
            }
            // 按状态精确查询
            if (queryDTO.getStatus() != null) {
                predicates.add(cb.equal(root.get("status"), queryDTO.getStatus()));
            }
            // 按机构ID精确查询
            if (queryDTO.getInstitutionId() != null) {
                predicates.add(cb.equal(root.get("institutionId"), queryDTO.getInstitutionId()));
            }
            // 按角色ID查询
            if (queryDTO.getRoleId() != null) {
                var join = root.join("roles");
                predicates.add(cb.equal(join.get("id"), queryDTO.getRoleId()));
            }
            return cb.and(predicates.toArray(new Predicate[0]));
        };
        // 执行查询
        Page<User> userPage = userRepository.findAll(spec, pageable);
        // 转换为VO
        List<UserVO> userVOList = userPage.getContent().stream()
                .map(this::convertToUserVO)
                .collect(Collectors.toList());
        return new PageImpl<>(userVOList, pageable, userPage.getTotalElements());
    }
    /**
     * 获取用户详情
     *
     * @param id 用户ID
     * @return 用户详情
     */
    @Override
    @Transactional(readOnly = true)
    public UserVO getUserById(Long id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        return convertToUserVO(user);
    }
    /**
     * 创建用户
     *
     * @param userDTO 用户信息
     * @return 创建后的用户信息
     */
    @Override
    @Transactional
    public UserVO createUser(UserDTO userDTO) {
        // 检查用户名是否存在
        if (userRepository.existsByUsername(userDTO.getUsername())) {
            throw new BusinessException("用户名已存在");
        }
        // 检查邮箱是否存在
        if (userDTO.getEmail() != null && userRepository.existsByEmail(userDTO.getEmail())) {
            throw new BusinessException("邮箱已存在");
        }
        // 检查手机号是否存在
        if (userDTO.getPhone() != null && userRepository.existsByPhone(userDTO.getPhone())) {
            throw new BusinessException("手机号已存在");
        }
        // 获取角色
        Set<Role> roles = new HashSet<>();
        if (userDTO.getRoleIds() != null && !userDTO.getRoleIds().isEmpty()) {
            roles = userDTO.getRoleIds().stream()
                    .map(roleId -> roleRepository.findById(roleId)
                            .orElseThrow(() -> new BusinessException("角色不存在: " + roleId)))
                    .collect(Collectors.toSet());
        } else {
            // 默认分配普通用户角色
            Role userRole = roleRepository.findByCode(RoleEnum.USER.getCode())
                    .orElseThrow(() -> new BusinessException("角色不存在"));
            roles.add(userRole);
        }
        // 创建用户
        User user = User.builder()
                .username(userDTO.getUsername())
                .password(passwordEncoder.encode(userDTO.getPassword()))
                .email(userDTO.getEmail())
                .phone(userDTO.getPhone())
                .avatar(userDTO.getAvatar())
                .nickname(userDTO.getNickname())
                .status(userDTO.getStatus() != null ? userDTO.getStatus() : 1)
                .institutionId(userDTO.getInstitutionId())
                .roles(roles)
                .build();
        // 保存用户
        User savedUser = userRepository.save(user);
        log.info("创建用户成功: {}", savedUser.getUsername());
        return convertToUserVO(savedUser);
    }
    /**
     * 更新用户
     *
     * @param id 用户ID
     * @param userDTO 用户信息
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO updateUser(Long id, UserDTO userDTO) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        // 检查用户名是否存在
        if (StringUtils.hasText(userDTO.getUsername()) && 
                !user.getUsername().equals(userDTO.getUsername()) && 
                userRepository.existsByUsername(userDTO.getUsername())) {
            throw new BusinessException("用户名已存在");
        }
        // 检查邮箱是否存在
        if (StringUtils.hasText(userDTO.getEmail()) && 
                (user.getEmail() == null || !user.getEmail().equals(userDTO.getEmail())) && 
                userRepository.existsByEmail(userDTO.getEmail())) {
            throw new BusinessException("邮箱已存在");
        }
        // 检查手机号是否存在
        if (StringUtils.hasText(userDTO.getPhone()) && 
                (user.getPhone() == null || !user.getPhone().equals(userDTO.getPhone())) && 
                userRepository.existsByPhone(userDTO.getPhone())) {
            throw new BusinessException("手机号已存在");
        }
        // 更新角色
        if (userDTO.getRoleIds() != null && !userDTO.getRoleIds().isEmpty()) {
            Set<Role> roles = userDTO.getRoleIds().stream()
                    .map(roleId -> roleRepository.findById(roleId)
                            .orElseThrow(() -> new BusinessException("角色不存在: " + roleId)))
                    .collect(Collectors.toSet());
            user.setRoles(roles);
        }
        // 更新基本信息
        if (StringUtils.hasText(userDTO.getUsername())) {
            user.setUsername(userDTO.getUsername());
        }
        if (StringUtils.hasText(userDTO.getPassword())) {
            user.setPassword(passwordEncoder.encode(userDTO.getPassword()));
        }
        if (StringUtils.hasText(userDTO.getEmail())) {
            user.setEmail(userDTO.getEmail());
        }
        if (StringUtils.hasText(userDTO.getPhone())) {
            user.setPhone(userDTO.getPhone());
        }
        if (StringUtils.hasText(userDTO.getAvatar())) {
            user.setAvatar(userDTO.getAvatar());
        }
        if (StringUtils.hasText(userDTO.getNickname())) {
            user.setNickname(userDTO.getNickname());
        }
        if (userDTO.getStatus() != null) {
            user.setStatus(userDTO.getStatus());
        }
        if (userDTO.getInstitutionId() != null) {
            user.setInstitutionId(userDTO.getInstitutionId());
        }
        // 保存用户
        User savedUser = userRepository.save(user);
        log.info("更新用户成功: {}", savedUser.getUsername());
        return convertToUserVO(savedUser);
    }
    /**
     * 删除用户
     *
     * @param id 用户ID
     */
    @Override
    @Transactional
    public void deleteUser(Long id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        userRepository.delete(user);
        log.info("删除用户成功: {}", user.getUsername());
    }
    /**
     * 修改用户状态
     *
     * @param id 用户ID
     * @param status 状态（0-禁用，1-正常）
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO updateUserStatus(Long id, Integer status) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        user.setStatus(status);
        User savedUser = userRepository.save(user);
        log.info("更新用户状态成功: {}, 状态: {}", savedUser.getUsername(), status);
        return convertToUserVO(savedUser);
    }
    /**
     * 给用户分配角色
     *
     * @param userId 用户ID
     * @param roleIds 角色ID列表
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO assignRoles(Long userId, Set<Long> roleIds) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        if (roleIds == null || roleIds.isEmpty()) {
            throw new BusinessException("角色ID列表不能为空");
        }
        Set<Role> roles = roleIds.stream()
                .map(roleId -> roleRepository.findById(roleId)
                        .orElseThrow(() -> new BusinessException("角色不存在: " + roleId)))
                .collect(Collectors.toSet());
        user.setRoles(roles);
        User savedUser = userRepository.save(user);
        log.info("给用户分配角色成功: {}, 角色IDs: {}", savedUser.getUsername(), roleIds);
        return convertToUserVO(savedUser);
    }
    /**
     * 批量删除用户
     *
     * @param ids 用户ID列表
     */
    @Override
    @Transactional
    public void batchDeleteUsers(List<Long> ids) {
        for (Long id : ids) {
            deleteUser(id);
        }
    }
    /**
     * 转换为用户VO
     *
     * @param user 用户实体
     * @return 用户VO
     */
    private UserVO convertToUserVO(User user) {
        return UserVO.builder()
                .id(user.getId())
                .username(user.getUsername())
                .email(user.getEmail())
                .phone(user.getPhone())
                .avatar(user.getAvatar())
                .nickname(user.getNickname())
                .status(user.getStatus())
                .institutionId(user.getInstitutionId())
                .createdAt(user.getCreatedAt())
                .updatedAt(user.getUpdatedAt())
                .lastLoginAt(user.getLastLoginAt())
                .roles(user.getRoles())
                .build();
    }
    /**
     * 获取当前登录用户信息
     *
     * @param username 当前登录用户名
     * @return 用户详细信息
     */
    @Override
    @Transactional(readOnly = true)
    public UserVO getCurrentUser(String username) {
        User user = getUserByUsername(username);
        return convertToUserVO(user);
    }
    /**
     * 更新当前用户个人信息
     *
     * @param username 当前登录用户名
     * @param nickname 昵称
     * @param phone 手机号
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO updateCurrentUserProfile(String username, String nickname, String phone) {
        User user = getUserByUsername(username);
        // 检查手机号是否已被其他用户使用
        if (StringUtils.hasText(phone) && !phone.equals(user.getPhone()) && existsByPhone(phone)) {
            throw new BusinessException("手机号已存在");
        }
        // 更新用户信息
        if (StringUtils.hasText(nickname)) {
            user.setNickname(nickname);
        }
        if (StringUtils.hasText(phone)) {
            user.setPhone(phone);
        }
        User updatedUser = userRepository.save(user);
        log.info("用户个人信息更新成功: {}", username);
        return convertToUserVO(updatedUser);
    }
    /**
     * 修改当前用户密码
     *
     * @param username 当前登录用户名
     * @param oldPassword 旧密码
     * @param newPassword 新密码
     * @return 是否修改成功
     */
    @Override
    @Transactional
    public boolean changePassword(String username, String oldPassword, String newPassword) {
        User user = getUserByUsername(username);
        // 验证旧密码
        if (!passwordEncoder.matches(oldPassword, user.getPassword())) {
            throw new BusinessException("旧密码不正确");
        }
        // 验证新旧密码不能相同
        if (passwordEncoder.matches(newPassword, user.getPassword())) {
            throw new BusinessException("新密码不能与旧密码相同");
        }
        // 更新密码
        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);
        log.info("用户密码修改成功: {}", username);
        return true;
    }
    /**
     * 更新当前用户头像
     *
     * @param username 当前登录用户名
     * @param avatarUrl 头像URL
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO updateAvatar(String username, String avatarUrl) {
        User user = getUserByUsername(username);
        // 更新头像
        user.setAvatar(avatarUrl);
        User updatedUser = userRepository.save(user);
        log.info("用户头像更新成功: {}", username);
        return convertToUserVO(updatedUser);
    }
    /**
     * 更新当前用户邮箱
     *
     * @param username 当前登录用户名
     * @param newEmail 新邮箱
     * @param emailCode 邮箱验证码
     * @param password 当前密码 (用于安全验证)
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO updateEmail(String username, String newEmail, String emailCode, String password) {
        User user = getUserByUsername(username);
        // 验证用户密码
        if (!passwordEncoder.matches(password, user.getPassword())) {
            throw new BusinessException("密码不正确");
        }
        // 检查邮箱是否已被其他用户使用
        if (existsByEmail(newEmail)) {
            throw new BusinessException("邮箱已存在");
        }
        // 验证邮箱验证码
        boolean isValid = emailService.validateVerificationCode(newEmail, emailCode);
        if (!isValid) {
            throw new BusinessException("邮箱验证码不正确或已过期");
        }
        // 更新邮箱
        user.setEmail(newEmail);
        User updatedUser = userRepository.save(user);
        log.info("用户邮箱更新成功: {}, 新邮箱: {}", username, newEmail);
        return convertToUserVO(updatedUser);
    }
    /**
     * 获取用户基本信息（用于前端展示）
     *
     * @param userId 用户ID
     * @return 用户基本信息
     */
    @Override
    @Transactional(readOnly = true)
    public UserVO getBasicUserInfo(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        // 创建基本信息VO，不包含敏感信息
        return UserVO.builder()
                .id(user.getId())
                .username(user.getUsername())
                .nickname(user.getNickname())
                .avatar(user.getAvatar())
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/MinioService.java">
package com.zhangziqi.online_course_mine.service;
import java.io.InputStream;
import java.util.List;
public interface MinioService {
    /**
     * 上传文件
     * 
     * @param objectName 对象名称
     * @param inputStream 文件输入流
     * @param contentType 文件类型
     * @return 文件访问URL
     */
    String uploadFile(String objectName, InputStream inputStream, String contentType);
    /**
     * 删除文件
     * 
     * @param objectName 对象名称
     * @return 是否删除成功
     */
    boolean deleteFile(String objectName);
    /**
     * 获取文件URL
     * 
     * @param objectName 对象名称
     * @return 文件访问URL
     */
    String getFileUrl(String objectName);
    /**
     * 列出所有文件
     * 
     * @return 文件名列表
     */
    List<String> listAllFiles();
    /**
     * 检查存储桶是否存在，不存在则创建
     */
    void checkAndCreateBucket();
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/PermissionService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.PermissionDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.vo.PermissionVO;
import java.util.List;
/**
 * 权限服务接口
 */
public interface PermissionService {
    /**
     * 获取权限列表
     *
     * @return 权限列表
     */
    List<PermissionVO> getPermissionList();
    /**
     * 获取权限详情
     *
     * @param id 权限ID
     * @return 权限详情
     */
    PermissionVO getPermissionById(Long id);
    /**
     * 获取权限（根据编码）
     *
     * @param code 权限编码
     * @return 权限
     */
    Permission getPermissionByCode(String code);
    /**
     * 创建权限
     *
     * @param permissionDTO 权限信息
     * @return 创建后的权限信息
     */
    PermissionVO createPermission(PermissionDTO permissionDTO);
    /**
     * 更新权限
     *
     * @param id 权限ID
     * @param permissionDTO 权限信息
     * @return 更新后的权限信息
     */
    PermissionVO updatePermission(Long id, PermissionDTO permissionDTO);
    /**
     * 删除权限
     *
     * @param id 权限ID
     */
    void deletePermission(Long id);
    /**
     * 批量删除权限
     *
     * @param ids 权限ID列表
     */
    void batchDeletePermissions(List<Long> ids);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/RoleService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.RoleDTO;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.vo.RoleVO;
import java.util.List;
import java.util.Set;
/**
 * 角色服务接口
 */
public interface RoleService {
    /**
     * 获取角色列表
     *
     * @return 角色列表
     */
    List<RoleVO> getRoleList();
    /**
     * 获取角色详情
     *
     * @param id 角色ID
     * @return 角色详情
     */
    RoleVO getRoleById(Long id);
    /**
     * 获取角色（根据编码）
     *
     * @param code 角色编码
     * @return 角色
     */
    Role getRoleByCode(String code);
    /**
     * 创建角色
     *
     * @param roleDTO 角色信息
     * @return 创建后的角色信息
     */
    RoleVO createRole(RoleDTO roleDTO);
    /**
     * 更新角色
     *
     * @param id 角色ID
     * @param roleDTO 角色信息
     * @return 更新后的角色信息
     */
    RoleVO updateRole(Long id, RoleDTO roleDTO);
    /**
     * 删除角色
     *
     * @param id 角色ID
     */
    void deleteRole(Long id);
    /**
     * 给角色分配权限
     *
     * @param roleId 角色ID
     * @param permissionIds 权限ID列表
     * @return 更新后的角色信息
     */
    RoleVO assignPermissions(Long roleId, Set<Long> permissionIds);
    /**
     * 批量删除角色
     *
     * @param ids 角色ID列表
     */
    void batchDeleteRoles(List<Long> ids);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/UserService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.dto.UserDTO;
import com.zhangziqi.online_course_mine.model.dto.UserQueryDTO;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import org.springframework.data.domain.Page;
import java.util.List;
import java.util.Set;
/**
 * 用户服务接口
 */
public interface UserService {
    /**
     * 注册用户
     *
     * @param registerDTO 注册请求
     * @return 用户信息
     */
    User register(RegisterDTO registerDTO);
    /**
     * 根据用户名查询用户
     *
     * @param username 用户名
     * @return 用户信息
     */
    User getUserByUsername(String username);
    /**
     * 检查用户名是否存在
     *
     * @param username 用户名
     * @return 是否存在
     */
    boolean existsByUsername(String username);
    /**
     * 检查邮箱是否存在
     *
     * @param email 邮箱
     * @return 是否存在
     */
    boolean existsByEmail(String email);
    /**
     * 检查手机号是否存在
     *
     * @param phone 手机号
     * @return 是否存在
     */
    boolean existsByPhone(String phone);
    /**
     * 更新最后登录时间
     *
     * @param username 用户名
     */
    void updateLastLoginTime(String username);
    /**
     * 分页查询用户列表
     *
     * @param queryDTO 查询条件
     * @return 用户列表（分页）
     */
    Page<UserVO> getUserList(UserQueryDTO queryDTO);
    /**
     * 获取用户详情
     *
     * @param id 用户ID
     * @return 用户详情
     */
    UserVO getUserById(Long id);
    /**
     * 创建用户
     *
     * @param userDTO 用户信息
     * @return 创建后的用户信息
     */
    UserVO createUser(UserDTO userDTO);
    /**
     * 更新用户
     *
     * @param id 用户ID
     * @param userDTO 用户信息
     * @return 更新后的用户信息
     */
    UserVO updateUser(Long id, UserDTO userDTO);
    /**
     * 删除用户
     *
     * @param id 用户ID
     */
    void deleteUser(Long id);
    /**
     * 修改用户状态
     *
     * @param id 用户ID
     * @param status 状态（0-禁用，1-正常）
     * @return 更新后的用户信息
     */
    UserVO updateUserStatus(Long id, Integer status);
    /**
     * 给用户分配角色
     *
     * @param userId 用户ID
     * @param roleIds 角色ID列表
     * @return 更新后的用户信息
     */
    UserVO assignRoles(Long userId, Set<Long> roleIds);
    /**
     * 批量删除用户
     *
     * @param ids 用户ID列表
     */
    void batchDeleteUsers(List<Long> ids);
    /**
     * 获取当前登录用户信息
     *
     * @param username 当前登录用户名
     * @return 用户详细信息
     */
    UserVO getCurrentUser(String username);
    /**
     * 更新当前用户个人信息
     *
     * @param username 当前登录用户名
     * @param nickname 昵称
     * @param phone 手机号
     * @return 更新后的用户信息
     */
    UserVO updateCurrentUserProfile(String username, String nickname, String phone);
    /**
     * 修改当前用户密码
     *
     * @param username 当前登录用户名
     * @param oldPassword 旧密码
     * @param newPassword 新密码
     * @return 是否修改成功
     */
    boolean changePassword(String username, String oldPassword, String newPassword);
    /**
     * 更新当前用户头像
     *
     * @param username 当前登录用户名
     * @param avatarUrl 头像URL
     * @return 更新后的用户信息
     */
    UserVO updateAvatar(String username, String avatarUrl);
    /**
     * 更新当前用户邮箱
     *
     * @param username 当前登录用户名
     * @param newEmail 新邮箱
     * @param emailCode 邮箱验证码
     * @param password 当前密码 (用于安全验证)
     * @return 更新后的用户信息
     */
    UserVO updateEmail(String username, String newEmail, String emailCode, String password);
    /**
     * 获取用户基本信息（用于前端展示）
     *
     * @param userId 用户ID
     * @return 用户基本信息
     */
    UserVO getBasicUserInfo(Long userId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/util/DataInitializer.java">
package com.zhangziqi.online_course_mine.util;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.RoleEnum;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Profile;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
/**
 * 数据初始化
 * 用于初始化角色和权限数据
 */
@Slf4j
@Component
@RequiredArgsConstructor
@Profile({"dev", "test"}) // 仅在开发和测试环境下运行
public class DataInitializer {
    private final RoleRepository roleRepository;
    private final PermissionRepository permissionRepository;
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    /**
     * 初始化数据
     */
    @PostConstruct
    @Transactional
    public void init() {
        log.info("开始初始化角色和权限数据");
        // 初始化角色
        initRoles();
        // 初始化权限
        initPermissions();
        // 初始化角色权限关系
        initRolePermissions();
        // 初始化管理员
        initAdmin();
        log.info("角色和权限数据初始化完成");
    }
    /**
     * 初始化角色
     */
    private void initRoles() {
        // 检查角色是否已存在
        if (roleRepository.count() > 0) {
            log.info("角色数据已存在，跳过初始化");
            return;
        }
        // 创建角色
        List<Role> roles = (List<Role>) Arrays.stream(RoleEnum.values())
                .map(roleEnum -> Role.builder()
                        .name(roleEnum.getName())
                        .code(roleEnum.getCode())
                        .description(roleEnum.getName() + "角色")
                        .build())
                .toList();
        // 保存角色
        roleRepository.saveAll(roles);
        log.info("角色数据初始化完成，共{}条", roles.size());
    }
    /**
     * 初始化权限
     */
    private void initPermissions() {
        // 检查权限是否已存在
        if (permissionRepository.count() > 0) {
            log.info("权限数据已存在，跳过初始化");
            return;
        }
        // 创建权限
        List<Permission> permissions = Arrays.asList(
                Permission.builder().name("用户查询").code("user:read").url("/api/users/**").method("GET").build(),
                Permission.builder().name("用户创建").code("user:create").url("/api/users").method("POST").build(),
                Permission.builder().name("用户修改").code("user:update").url("/api/users/**").method("PUT").build(),
                Permission.builder().name("用户删除").code("user:delete").url("/api/users/**").method("DELETE").build(),
                Permission.builder().name("角色查询").code("role:read").url("/api/roles/**").method("GET").build(),
                Permission.builder().name("角色创建").code("role:create").url("/api/roles").method("POST").build(),
                Permission.builder().name("角色修改").code("role:update").url("/api/roles/**").method("PUT").build(),
                Permission.builder().name("角色删除").code("role:delete").url("/api/roles/**").method("DELETE").build(),
                Permission.builder().name("权限查询").code("permission:read").url("/api/permissions/**").method("GET").build(),
                Permission.builder().name("权限创建").code("permission:create").url("/api/permissions").method("POST").build(),
                Permission.builder().name("权限修改").code("permission:update").url("/api/permissions/**").method("PUT").build(),
                Permission.builder().name("权限删除").code("permission:delete").url("/api/permissions/**").method("DELETE").build(),
                Permission.builder().name("课程查询").code("course:read").url("/api/courses/**").method("GET").build(),
                Permission.builder().name("课程创建").code("course:create").url("/api/courses").method("POST").build(),
                Permission.builder().name("课程修改").code("course:update").url("/api/courses/**").method("PUT").build(),
                Permission.builder().name("课程删除").code("course:delete").url("/api/courses/**").method("DELETE").build(),
                Permission.builder().name("课程审核").code("course:review").url("/api/courses/*/review").method("POST").build()
        );
        // 保存权限
        permissionRepository.saveAll(permissions);
        log.info("权限数据初始化完成，共{}条", permissions.size());
    }
    /**
     * 初始化角色权限关系
     */
    private void initRolePermissions() {
        // 获取角色
        Role adminRole = roleRepository.findByCode(RoleEnum.ADMIN.getCode())
                .orElseThrow(() -> new RuntimeException("管理员角色不存在"));
        Role userRole = roleRepository.findByCode(RoleEnum.USER.getCode())
                .orElseThrow(() -> new RuntimeException("普通用户角色不存在"));
        Role reviewerRole = roleRepository.findByCode(RoleEnum.REVIEWER.getCode())
                .orElseThrow(() -> new RuntimeException("审核人员角色不存在"));
        Role institutionRole = roleRepository.findByCode(RoleEnum.INSTITUTION.getCode())
                .orElseThrow(() -> new RuntimeException("机构用户角色不存在"));
        // 获取所有权限
        List<Permission> allPermissions = permissionRepository.findAll();
        if (allPermissions.isEmpty()) {
            log.warn("权限数据为空，跳过初始化角色权限关系");
            return;
        }
        // 如果角色已经有权限，则跳过
        if (!adminRole.getPermissions().isEmpty()) {
            log.info("角色权限关系已存在，跳过初始化");
            return;
        }
        // 设置管理员角色的权限（所有权限）
        adminRole.setPermissions(new HashSet<>(allPermissions));
        // 设置普通用户角色的权限（查询权限）
        userRole.setPermissions(allPermissions.stream()
                .filter(permission -> permission.getCode().endsWith(":read"))
                .filter(permission -> !permission.getCode().startsWith("role:") && !permission.getCode().startsWith("permission:"))
                .collect(java.util.stream.Collectors.toSet()));
        // 设置审核人员角色的权限（查询权限 + 课程审核权限）
        reviewerRole.setPermissions(allPermissions.stream()
                .filter(permission -> permission.getCode().endsWith(":read") || permission.getCode().equals("course:review"))
                .collect(java.util.stream.Collectors.toSet()));
        // 设置机构用户角色的权限（查询权限 + 课程管理权限）
        institutionRole.setPermissions(allPermissions.stream()
                .filter(permission -> permission.getCode().endsWith(":read") || 
                                      permission.getCode().startsWith("course:"))
                .collect(java.util.stream.Collectors.toSet()));
        // 保存角色
        roleRepository.saveAll(Arrays.asList(adminRole, userRole, reviewerRole, institutionRole));
        log.info("角色权限关系初始化完成");
    }
    /**
     * 初始化管理员
     */
    private void initAdmin() {
        // 检查管理员是否已存在
        if (userRepository.findByUsername("admin").isPresent()) {
            log.info("管理员已存在，跳过初始化");
            return;
        }
        // 获取管理员角色
        Role adminRole = roleRepository.findByCode(RoleEnum.ADMIN.getCode())
                .orElseThrow(() -> new RuntimeException("管理员角色不存在"));
        // 创建管理员
        User admin = User.builder()
                .username("admin")
                .password(passwordEncoder.encode("admin123"))
                .email("admin@example.com")
                .status(1)
                .roles(Collections.singleton(adminRole))
                .build();
        // 保存管理员
        userRepository.save(admin);
        log.info("管理员初始化完成");
    }
}
</file>

<file path="src/main/resources/application-dev.yml">
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/online_course?useSSL=false&serverTimezone=Asia/Shanghai&characterEncoding=utf-8
    username: root
    password: Zzq664450274
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.MySQL8Dialect
  data:
    redis:
      port: 6379
      host: localhost
      database: 0
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
      password: Zzq664450274
  mail:
    # 163邮箱的地址为smtp.163.com，直接填写即可
    host: smtp.163.com
    # 你申请的163邮箱
    username: madpsycho@163.com
    # 注意密码是在开启smtp/pop3时自动生成的，记得保存一下，不然就找不到了
    password: PFVIMQPDCKMNWZHI
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    com.zhangziqi: DEBUG
jwt:
  secret: ZGV2and0c2VjcmV0a2V5aGVyZW1ha2VpdGxvbmdhbmRzZWN1cmVhdGxlYXN0MjU2Yml0cw==
  access-token-expiration: 3600000  # 1小时
  refresh-token-expiration: 604800000 # 7天
server:
  port: 8080 
# MinIO配置
minio:
  endpoint: http://localhost:8999
  accessKey: double2and9
  secretKey: Zzq664450274
  bucketName: media
# AWS S3配置
aws:
  s3:
    endpoint: http://localhost:8999
    region: us-east-1
    access-key: double2and9
    secret-key: Zzq664450274
    bucket-name: media
    path-style-access: true
</file>

<file path="src/main/resources/application-test.yml">
spring:
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: 
    driver-class-name: org.h2.Driver
  h2:
    console:
      enabled: true
      path: /h2-console
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.H2Dialect
  data:
    redis:
      host: localhost
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
  mail:
    host: smtp.qq.com
    port: 587
    username: test@qq.com
    password: test-password
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    com.zhangziqi: DEBUG
jwt:
  secret: dGVzdGp3dHNlY3JldGtleWhlcmVtYWtlaXRsb25nYW5kc2VjdXJlYXRsZWFzdDI1NmJpdHM=
  access-token-expiration: 3600000  # 1小时
  refresh-token-expiration: 604800000 # 7天
server:
  port: 8081 
# MinIO配置
minio:
  endpoint: http://localhost:8999
  accessKey: double2and9
  secretKey: Zzq664450274
  bucketName: media
# AWS S3配置
aws:
  s3:
    endpoint: http://localhost:8999
    region: us-east-1
    access-key: double2and9
    secret-key: Zzq664450274
    bucket-name: media
    path-style-access: true
</file>

<file path="src/main/resources/application.yml">
spring:
  profiles:
    active: dev
</file>

<file path="src/main/resources/templates/email/email-update-code.html">
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>邮箱更新验证码</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 20px;
            margin-top: 20px;
        }
        .code {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
            letter-spacing: 2px;
            text-align: center;
            padding: 10px;
            background-color: #e9ecef;
            border-radius: 3px;
            margin: 20px 0;
        }
        .warning {
            color: #dc3545;
            font-size: 14px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>邮箱更新验证码</h2>
        <p>您好！</p>
        <p>您正在进行邮箱更新操作，以下是您的验证码：</p>
        <div class="code" th:text="${code}">123456</div>
        <p>此验证码将在 <span th:text="${expirationMinutes}">5</span> 分钟后失效。</p>
        <p class="warning">
            注意：如果这不是您的操作，请忽略此邮件并考虑修改您的账户密码以确保账户安全。
        </p>
        <p>
            祝您使用愉快！<br>
            在线课程平台团队
        </p>
    </div>
</body>
</html>
</file>

<file path="src/main/resources/templates/email/verification-code.html">
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>邮箱验证码</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 20px;
            margin-top: 20px;
        }
        .code {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
            letter-spacing: 2px;
            text-align: center;
            padding: 10px;
            background-color: #e9ecef;
            border-radius: 3px;
            margin: 20px 0;
        }
        .warning {
            color: #dc3545;
            font-size: 14px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>邮箱验证码</h2>
        <p>您好！</p>
        <p>感谢您注册在线课程平台。您的验证码是：</p>
        <div class="code" th:text="${code}">123456</div>
        <p>此验证码将在 <span th:text="${expirationMinutes}">5</span> 分钟后失效。</p>
        <p class="warning">
            注意：请勿将验证码泄露给他人。如果这不是您的操作，请忽略此邮件。
        </p>
        <p>
            祝您使用愉快！<br>
            在线课程平台团队
        </p>
    </div>
</body>
</html>
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/config/TestSecurityConfig.java">
package com.zhangziqi.online_course_mine.config;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import com.zhangziqi.online_course_mine.security.jwt.JwtAuthenticationFilter;
import com.zhangziqi.online_course_mine.security.jwt.JwtTokenProvider;
import com.zhangziqi.online_course_mine.security.jwt.TokenBlacklistService;
import org.mockito.ArgumentMatchers;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.Profile;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
/**
 * 测试环境安全配置
 * 用于集成测试，提供尽可能接近生产环境的配置
 */
@TestConfiguration
@EnableWebSecurity
@Profile("test") // 确保只在测试环境下激活
public class TestSecurityConfig {
    @Bean
    @Primary
    public JwtTokenProvider jwtTokenProvider() {
        JwtTokenProvider mockProvider = mock(JwtTokenProvider.class);
        // 可以在这里添加一些基本的行为
        when(mockProvider.validateToken(ArgumentMatchers.anyString())).thenReturn(true);
        return mockProvider;
    }
    @Bean
    @Primary
    public TokenBlacklistService tokenBlacklistService() {
        TokenBlacklistService mockService = mock(TokenBlacklistService.class);
        // 可以在这里添加一些基本的行为
        when(mockService.isBlacklisted(ArgumentMatchers.anyString())).thenReturn(false);
        return mockService;
    }
    @Bean
    @Primary
    public JwtConfig jwtConfig() {
        JwtConfig config = new JwtConfig();
        config.setSecret("test-secret-key-for-testing-purposes-only");
        config.setAccessTokenExpiration(3600000L); // 1小时
        config.setRefreshTokenExpiration(86400000L); // 24小时
        return config;
    }
    @Bean
    @Primary
    public AuthenticationManager authenticationManager() {
        return mock(AuthenticationManager.class);
    }
    @Bean
    @Primary
    public UserDetailsService userDetailsService() {
        return mock(UserDetailsService.class);
    }
    @Bean
    @Primary
    public JwtAuthenticationFilter jwtAuthenticationFilter(JwtTokenProvider tokenProvider, TokenBlacklistService blacklistService) {
        return new JwtAuthenticationFilter(tokenProvider, blacklistService);
    }
    @Bean
    @Primary
    public SecurityFilterChain securityFilterChain(HttpSecurity http, JwtAuthenticationFilter jwtAuthenticationFilter) throws Exception {
        http
            .csrf(AbstractHttpConfigurer::disable)
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/auth/**").permitAll() // 开放认证相关接口
                .anyRequest().authenticated() // 其他接口需要认证
            )
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/controller/AuthControllerTest.java">
package com.zhangziqi.online_course_mine.controller;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zhangziqi.online_course_mine.OnlineCourseMineApplication;
import com.zhangziqi.online_course_mine.model.dto.*;
import com.zhangziqi.online_course_mine.security.jwt.JwtTokenProvider;
import com.zhangziqi.online_course_mine.security.jwt.TokenBlacklistService;
import com.zhangziqi.online_course_mine.service.AuthService;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import com.zhangziqi.online_course_mine.service.EmailService;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatchers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import java.awt.image.BufferedImage;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
/**
 * 认证控制器测试
 */
@SpringBootTest
@AutoConfigureMockMvc(addFilters = false) // 禁用Spring Security过滤器
@ActiveProfiles("test") // 使用测试环境配置
public class AuthControllerTest {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;
    @MockBean
    private AuthService authService;
    @MockBean
    private CaptchaService captchaService;
    @MockBean
    private EmailService emailService;
    @MockBean
    private JwtTokenProvider jwtTokenProvider;
    @MockBean
    private TokenBlacklistService tokenBlacklistService;
    @Test
    public void testGetCaptchaKey() throws Exception {
        mockMvc.perform(get("/api/auth/captcha/key"))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data").isString());
    }
    @Test
    public void testGetCaptchaImage() throws Exception {
        // 模拟验证码服务
        BufferedImage mockImage = new BufferedImage(150, 50, BufferedImage.TYPE_INT_RGB);
        given(captchaService.generateCaptcha("test-key")).willReturn(mockImage);
        // 执行请求
        mockMvc.perform(get("/api/auth/captcha/image/{key}", "test-key"))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(header().string(HttpHeaders.CONTENT_TYPE, MediaType.IMAGE_JPEG_VALUE))
                .andExpect(header().string(HttpHeaders.CACHE_CONTROL, "no-store, no-cache, must-revalidate"));
        verify(captchaService).generateCaptcha("test-key");
    }
    @Test
    public void testSendEmailVerificationCode() throws Exception {
        // 创建邮箱验证码请求
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("test@example.com");
        emailVerificationDTO.setCaptchaKey("test-key");
        emailVerificationDTO.setCaptchaCode("1234");
        // 模拟验证码验证通过
        when(captchaService.validateCaptcha(emailVerificationDTO.getCaptchaKey(), emailVerificationDTO.getCaptchaCode()))
                .thenReturn(true);
        // 模拟生成验证码
        when(emailService.generateVerificationCode()).thenReturn("123456");
        // 执行请求
        mockMvc.perform(post("/api/auth/email-verification-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.message").value("操作成功"));
        verify(captchaService).validateCaptcha(emailVerificationDTO.getCaptchaKey(), emailVerificationDTO.getCaptchaCode());
        verify(emailService).generateVerificationCode();
        verify(emailService).sendVerificationCode(eq(emailVerificationDTO.getEmail()), any());
        verify(emailService).saveVerificationCode(eq(emailVerificationDTO.getEmail()), any());
    }
    @Test
    public void testSendEmailVerificationCodeWithInvalidCaptcha() throws Exception {
        // 创建邮箱验证码请求
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("test@example.com");
        emailVerificationDTO.setCaptchaKey("test-key");
        emailVerificationDTO.setCaptchaCode("1234");
        // 模拟验证码验证失败
        when(captchaService.validateCaptcha(emailVerificationDTO.getCaptchaKey(), emailVerificationDTO.getCaptchaCode()))
                .thenReturn(false);
        // 执行请求
        mockMvc.perform(post("/api/auth/email-verification-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(500))
                .andExpect(jsonPath("$.message").value("验证码错误"));
        verify(captchaService).validateCaptcha(emailVerificationDTO.getCaptchaKey(), emailVerificationDTO.getCaptchaCode());
        verify(emailService, never()).generateVerificationCode();
        verify(emailService, never()).sendVerificationCode(any(), any());
        verify(emailService, never()).saveVerificationCode(any(), any());
    }
    @Test
    public void testRegister() throws Exception {
        // 创建注册请求
        RegisterDTO registerDTO = new RegisterDTO();
        registerDTO.setUsername("testuser");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("test@example.com");
        registerDTO.setPhone("13812345678");
        registerDTO.setCaptchaKey("test-key");
        registerDTO.setCaptchaCode("1234");
        registerDTO.setEmailCode("123456");
        // 模拟服务
        doNothing().when(authService).register(any(RegisterDTO.class));
        // 执行请求
        mockMvc.perform(post("/api/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(registerDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.message").value("操作成功"));
        verify(authService, times(1)).register(any(RegisterDTO.class));
    }
    @Test
    public void testLogin() throws Exception {
        // 创建登录请求
        LoginDTO loginDTO = new LoginDTO();
        loginDTO.setUsername("testuser");
        loginDTO.setPassword("password123");
        loginDTO.setCaptchaKey("test-key");
        loginDTO.setCaptchaCode("1234");
        // 模拟JWT令牌
        JwtTokenDTO jwtTokenDTO = JwtTokenDTO.builder()
                .accessToken("access-token")
                .refreshToken("refresh-token")
                .expiresIn(3600000)
                .build();
        // 模拟服务
        given(authService.login(any(LoginDTO.class))).willReturn(jwtTokenDTO);
        // 执行请求
        mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginDTO)))
                .andDo(MockMvcResultHandlers.print()) // 打印结果
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.accessToken").value("access-token"))
                .andExpect(jsonPath("$.data.refreshToken").value("refresh-token"))
                .andExpect(jsonPath("$.data.expiresIn").value(3600000));
        verify(authService, times(1)).login(any(LoginDTO.class));
    }
    @Test
    public void testRefreshToken() throws Exception {
        // 创建刷新令牌请求
        RefreshTokenDTO refreshTokenDTO = new RefreshTokenDTO();
        refreshTokenDTO.setRefreshToken("refresh-token");
        // 模拟JWT令牌
        JwtTokenDTO jwtTokenDTO = JwtTokenDTO.builder()
                .accessToken("new-access-token")
                .refreshToken("refresh-token")
                .expiresIn(3600000)
                .build();
        // 模拟服务
        given(authService.refreshToken(any(RefreshTokenDTO.class))).willReturn(jwtTokenDTO);
        // 执行请求
        mockMvc.perform(post("/api/auth/refresh-token")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(refreshTokenDTO)))
                .andDo(MockMvcResultHandlers.print()) // 打印结果
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.accessToken").value("new-access-token"))
                .andExpect(jsonPath("$.data.refreshToken").value("refresh-token"))
                .andExpect(jsonPath("$.data.expiresIn").value(3600000));
        verify(authService, times(1)).refreshToken(any(RefreshTokenDTO.class));
    }
    @Test
    public void testLogout() throws Exception {
        // 模拟服务
        doNothing().when(authService).logout(anyString());
        // 执行请求
        mockMvc.perform(post("/api/auth/logout")
                        .header("Authorization", "Bearer test-token"))
                .andDo(MockMvcResultHandlers.print()) // 打印结果
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.message").value("操作成功"));
        verify(authService, times(1)).logout(eq("test-token"));
    }
    @Test
    public void testSendEmailUpdateCode() throws Exception {
        // 准备
        EmailVerificationDTO dto = new EmailVerificationDTO();
        dto.setEmail("newemail@example.com");
        dto.setCaptchaKey("123456");
        dto.setCaptchaCode("1234");
        String code = "654321";
        when(captchaService.validateCaptcha("123456", "1234")).thenReturn(true);
        when(emailService.generateVerificationCode()).thenReturn(code);
        doNothing().when(emailService).sendEmailUpdateCode(eq("newemail@example.com"), eq(code));
        doNothing().when(emailService).saveVerificationCode(eq("newemail@example.com"), eq(code));
        // 执行 & 验证
        mockMvc.perform(post("/api/auth/email-update-code")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(dto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200));
        verify(captchaService, times(1)).validateCaptcha("123456", "1234");
        verify(emailService, times(1)).generateVerificationCode();
        verify(emailService, times(1)).sendEmailUpdateCode("newemail@example.com", code);
        verify(emailService, times(1)).saveVerificationCode("newemail@example.com", code);
    }
    @Test
    public void testSendEmailUpdateCodeWithInvalidCaptcha() throws Exception {
        // 准备
        EmailVerificationDTO dto = new EmailVerificationDTO();
        dto.setEmail("newemail@example.com");
        dto.setCaptchaKey("123456");
        dto.setCaptchaCode("1234");
        when(captchaService.validateCaptcha("123456", "1234")).thenReturn(false);
        // 执行 & 验证
        mockMvc.perform(post("/api/auth/email-update-code")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(dto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(500))
                .andExpect(jsonPath("$.message").value("验证码错误"));
        verify(captchaService, times(1)).validateCaptcha("123456", "1234");
        verify(emailService, times(0)).generateVerificationCode();
        verify(emailService, times(0)).sendEmailUpdateCode(anyString(), anyString());
        verify(emailService, times(0)).saveVerificationCode(anyString(), anyString());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/controller/UserControllerTest.java">
package com.zhangziqi.online_course_mine.controller;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zhangziqi.online_course_mine.model.dto.ChangePasswordDTO;
import com.zhangziqi.online_course_mine.model.dto.EmailUpdateDTO;
import com.zhangziqi.online_course_mine.model.dto.UserDTO;
import com.zhangziqi.online_course_mine.model.dto.UserProfileDTO;
import com.zhangziqi.online_course_mine.model.dto.UserQueryDTO;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import com.zhangziqi.online_course_mine.service.MinioService;
import com.zhangziqi.online_course_mine.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import java.time.LocalDateTime;
import java.util.*;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
/**
 * 用户控制器测试
 */
@SpringBootTest
@AutoConfigureMockMvc(addFilters = false)
@ActiveProfiles("test")
public class UserControllerTest {
    @Autowired
    private MockMvc mockMvc;
    @MockBean
    private UserService userService;
    @MockBean
    private MinioService minioService;
    @Autowired
    private ObjectMapper objectMapper;
    private UserVO userVO;
    private UserDTO userDTO;
    private List<UserVO> userVOList;
    private UserProfileDTO profileDTO;
    private ChangePasswordDTO changePasswordDTO;
    private EmailUpdateDTO emailUpdateDTO;
    @BeforeEach
    public void setup() {
        // 模拟角色
        Set<Role> roles = new HashSet<>();
        roles.add(Role.builder()
                .id(1L)
                .name("普通用户")
                .code("ROLE_USER")
                .permissions(new HashSet<>())
                .build());
        // 模拟用户VO
        userVO = UserVO.builder()
                .id(1L)
                .username("testuser")
                .email("test@example.com")
                .phone("13800138000")
                .avatar("avatar.jpg")
                .nickname("测试用户")
                .status(1)
                .institutionId(null)
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .lastLoginAt(LocalDateTime.now())
                .roles(roles)
                .build();
        // 模拟用户列表
        userVOList = new ArrayList<>();
        userVOList.add(userVO);
        userVOList.add(UserVO.builder()
                .id(2L)
                .username("testuser2")
                .email("test2@example.com")
                .phone("13800138001")
                .avatar("avatar2.jpg")
                .nickname("测试用户2")
                .status(1)
                .institutionId(null)
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .lastLoginAt(LocalDateTime.now())
                .roles(roles)
                .build());
        // 模拟用户DTO
        userDTO = UserDTO.builder()
                .username("testuser")
                .password("password123")
                .email("test@example.com")
                .phone("13800138000")
                .avatar("avatar.jpg")
                .nickname("测试用户")
                .status(1)
                .roleIds(Set.of(1L))
                .build();
        // 模拟个人信息DTO
        profileDTO = new UserProfileDTO();
        profileDTO.setNickname("新昵称");
        profileDTO.setPhone("13900001111");
        // 模拟密码修改DTO
        changePasswordDTO = new ChangePasswordDTO();
        changePasswordDTO.setOldPassword("oldPassword");
        changePasswordDTO.setNewPassword("newPassword123");
        changePasswordDTO.setConfirmPassword("newPassword123");
        // 模拟邮箱更新DTO
        emailUpdateDTO = new EmailUpdateDTO();
        emailUpdateDTO.setNewEmail("newemail@example.com");
        emailUpdateDTO.setEmailCode("123456");
        emailUpdateDTO.setPassword("password123");
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testGetUserList() throws Exception {
        // 构建分页结果
        Page<UserVO> page = new PageImpl<>(userVOList);
        when(userService.getUserList(any(UserQueryDTO.class))).thenReturn(page);
        // 执行测试
        mockMvc.perform(get("/api/users")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.content", hasSize(2)))
                .andExpect(jsonPath("$.data.content[0].username", is("testuser")))
                .andExpect(jsonPath("$.data.content[1].username", is("testuser2")));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testGetUserById() throws Exception {
        when(userService.getUserById(1L)).thenReturn(userVO);
        mockMvc.perform(get("/api/users/1")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.username", is("testuser")))
                .andExpect(jsonPath("$.data.email", is("test@example.com")));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testCreateUser() throws Exception {
        when(userService.createUser(any(UserDTO.class))).thenReturn(userVO);
        mockMvc.perform(post("/api/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(userDTO)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.username", is("testuser")));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testUpdateUser() throws Exception {
        when(userService.updateUser(eq(1L), any(UserDTO.class))).thenReturn(userVO);
        mockMvc.perform(put("/api/users/1")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(userDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.username", is("testuser")));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testDeleteUser() throws Exception {
        doNothing().when(userService).deleteUser(1L);
        mockMvc.perform(delete("/api/users/1")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNoContent());
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testUpdateUserStatus() throws Exception {
        UserVO updatedUserVO = UserVO.builder()
                .id(1L)
                .username("testuser")
                .email("test@example.com")
                .status(0) // 禁用状态
                .build();
        when(userService.updateUserStatus(eq(1L), eq(0))).thenReturn(updatedUserVO);
        mockMvc.perform(patch("/api/users/1/status")
                .param("status", "0")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.status", is(0)));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testAssignRoles() throws Exception {
        Set<Long> roleIds = Set.of(1L, 2L);
        when(userService.assignRoles(eq(1L), eq(roleIds))).thenReturn(userVO);
        mockMvc.perform(put("/api/users/1/roles")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(roleIds)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testBatchDeleteUsers() throws Exception {
        List<Long> ids = List.of(1L, 2L);
        doNothing().when(userService).batchDeleteUsers(ids);
        mockMvc.perform(delete("/api/users/batch")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(ids)))
                .andExpect(status().isNoContent());
    }
    @Test
    @WithMockUser(username = "testuser")
    public void testGetCurrentUser() throws Exception {
        when(userService.getCurrentUser("testuser")).thenReturn(userVO);
        mockMvc.perform(get("/api/users/current")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.username", is("testuser")))
                .andExpect(jsonPath("$.data.email", is("test@example.com")))
                .andExpect(jsonPath("$.data.nickname", is("测试用户")));
    }
    @Test
    @WithMockUser(username = "testuser")
    public void testUpdateCurrentUser() throws Exception {
        when(userService.updateCurrentUserProfile(eq("testuser"), anyString(), anyString())).thenReturn(userVO);
        mockMvc.perform(put("/api/users/current")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(profileDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.username", is("testuser")));
    }
    @Test
    @WithMockUser(username = "testuser")
    public void testChangePassword() throws Exception {
        when(userService.changePassword(eq("testuser"), eq("oldPassword"), eq("newPassword123"))).thenReturn(true);
        mockMvc.perform(put("/api/users/current/password")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(changePasswordDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)));
    }
    @Test
    @WithMockUser(username = "testuser")
    public void testChangePasswordWithMismatchConfirmation() throws Exception {
        // 设置确认密码不一致
        changePasswordDTO.setConfirmPassword("differentPassword");
        mockMvc.perform(put("/api/users/current/password")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(changePasswordDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(400)))
                .andExpect(jsonPath("$.message", is("新密码与确认密码不一致")));
    }
    @Test
    @WithMockUser(username = "testuser")
    public void testUpdateEmail() throws Exception {
        when(userService.updateEmail(
                eq("testuser"), 
                eq("newemail@example.com"), 
                eq("123456"), 
                eq("password123")
        )).thenReturn(userVO);
        mockMvc.perform(put("/api/users/current/email")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(emailUpdateDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.username", is("testuser")));
    }
    @Test
    @WithMockUser(username = "testuser")
    public void testUploadAvatar() throws Exception {
        String avatarUrl = "https://example.com/avatars/testuser/avatar.jpg";
        MockMultipartFile file = new MockMultipartFile(
                "file",
                "avatar.jpg",
                "image/jpeg",
                "test image content".getBytes()
        );
        when(minioService.uploadFile(anyString(), any(), anyString())).thenReturn(avatarUrl);
        when(userService.updateAvatar(eq("testuser"), eq(avatarUrl))).thenReturn(userVO);
        mockMvc.perform(multipart("/api/users/current/avatar")
                .file(file))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.avatarUrl", is(avatarUrl)));
    }
    @Test
    public void testGetBasicUserInfo() throws Exception {
        when(userService.getBasicUserInfo(1L)).thenReturn(userVO);
        mockMvc.perform(get("/api/users/basic/1")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.username", is("testuser")))
                .andExpect(jsonPath("$.data.nickname", is("测试用户")));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/integration/AuthControllerIntegrationTest.java">
package com.zhangziqi.online_course_mine.integration;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zhangziqi.online_course_mine.config.TestSecurityConfig;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.*;
import com.zhangziqi.online_course_mine.service.AuthService;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import com.zhangziqi.online_course_mine.service.EmailService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import java.awt.image.BufferedImage;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.*;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
/**
 * 认证控制器集成测试
 * 使用实际的安全过滤器链，但模拟了业务服务组件
 */
@SpringBootTest(
    // 可以在这里指定特定的配置属性
    properties = {
        "spring.main.allow-bean-definition-overriding=true"
    }
)
@AutoConfigureMockMvc
@ActiveProfiles("test") // 使用测试环境配置
@Import(TestSecurityConfig.class)
public class AuthControllerIntegrationTest {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;
    @MockBean
    private AuthService authService;
    @MockBean
    private CaptchaService captchaService;
    @MockBean
    private EmailService emailService;
    @Test
    public void testGetCaptcha() throws Exception {
        // 模拟验证码服务
        BufferedImage mockImage = new BufferedImage(150, 50, BufferedImage.TYPE_INT_RGB);
        given(captchaService.generateCaptcha(any())).willReturn(mockImage);
        // 1. 获取验证码key
        String result = mockMvc.perform(get("/api/auth/captcha/key"))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data").isString())
                .andReturn()
                .getResponse()
                .getContentAsString();
        // 从响应中提取验证码key
        String captchaKey = new ObjectMapper().readTree(result).get("data").asText();
        // 2. 使用key获取验证码图片
        mockMvc.perform(get("/api/auth/captcha/image/{key}", captchaKey))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(header().string(HttpHeaders.CONTENT_TYPE, MediaType.IMAGE_JPEG_VALUE))
                .andExpect(header().string(HttpHeaders.CACHE_CONTROL, "no-store, no-cache, must-revalidate"));
        verify(captchaService, times(1)).generateCaptcha(eq(captchaKey));
    }
    @Test
    public void testCompleteRegistrationFlow() throws Exception {
        // 1. 获取图形验证码key
        String result = mockMvc.perform(get("/api/auth/captcha/key"))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andReturn()
                .getResponse()
                .getContentAsString();
        String captchaKey = new ObjectMapper().readTree(result).get("data").asText();
        // 2. 获取验证码图片
        BufferedImage mockImage = new BufferedImage(150, 50, BufferedImage.TYPE_INT_RGB);
        given(captchaService.generateCaptcha(any())).willReturn(mockImage);
        mockMvc.perform(get("/api/auth/captcha/image/{key}", captchaKey))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(header().string(HttpHeaders.CONTENT_TYPE, MediaType.IMAGE_JPEG_VALUE));
        // 3. 发送邮箱验证码
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("test@example.com");
        emailVerificationDTO.setCaptchaKey(captchaKey);
        emailVerificationDTO.setCaptchaCode("1234");
        given(captchaService.validateCaptcha(eq(captchaKey), eq("1234"))).willReturn(true);
        given(emailService.generateVerificationCode()).willReturn("123456");
        doNothing().when(emailService).sendVerificationCode(anyString(), anyString());
        doNothing().when(emailService).saveVerificationCode(anyString(), anyString());
        mockMvc.perform(post("/api/auth/email-verification-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200));
        // 4. 完成注册
        RegisterDTO registerDTO = new RegisterDTO();
        registerDTO.setUsername("testuser");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("test@example.com");
        registerDTO.setPhone("13812345678");
        registerDTO.setCaptchaKey(captchaKey);
        registerDTO.setCaptchaCode("1234");
        registerDTO.setEmailCode("123456");
        // 注册时会先调用 emailService.validateVerificationCode，然后调用 userService
        doAnswer(invocation -> {
            RegisterDTO dto = invocation.getArgument(0);
            // 这会触发 emailService.validateVerificationCode 的调用
            emailService.validateVerificationCode(dto.getEmail(), dto.getEmailCode());
            return null;
        }).when(authService).register(any(RegisterDTO.class));
        given(emailService.validateVerificationCode(eq("test@example.com"), eq("123456"))).willReturn(true);
        mockMvc.perform(post("/api/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(registerDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.code").value(200));
        // 验证所有服务调用
        verify(captchaService).validateCaptcha(eq(captchaKey), eq("1234")); // 只在发送邮箱验证码时验证
        verify(emailService).generateVerificationCode();
        verify(emailService).sendVerificationCode(eq("test@example.com"), eq("123456"));
        verify(emailService).saveVerificationCode(eq("test@example.com"), eq("123456"));
        verify(emailService).validateVerificationCode(eq("test@example.com"), eq("123456"));
        verify(authService).register(any(RegisterDTO.class));
    }
    @Test
    public void testRegistrationWithInvalidEmailCode() throws Exception {
        // 准备注册数据
        RegisterDTO registerDTO = new RegisterDTO();
        registerDTO.setUsername("testuser");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("test@example.com");
        registerDTO.setCaptchaKey("test-key");
        registerDTO.setCaptchaCode("1234");
        registerDTO.setEmailCode("123456");
        // 模拟邮箱验证码验证失败
        given(emailService.validateVerificationCode(eq("test@example.com"), eq("123456"))).willReturn(false);
        doThrow(new BusinessException("邮箱验证码错误或已过期"))
            .when(authService).register(any(RegisterDTO.class));
        mockMvc.perform(post("/api/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(registerDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(500))
                .andExpect(jsonPath("$.message").value("邮箱验证码错误或已过期"));
        verify(emailService, never()).validateVerificationCode(eq("test@example.com"), eq("123456"));
        verify(authService).register(any(RegisterDTO.class));
    }
    @Test
    public void testSendEmailVerificationCodeWithInvalidCaptcha() throws Exception {
        // 准备邮箱验证码请求数据
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("test@example.com");
        emailVerificationDTO.setCaptchaKey("test-key");
        emailVerificationDTO.setCaptchaCode("1234");
        // 模拟图形验证码验证失败
        given(captchaService.validateCaptcha("test-key", "1234")).willReturn(false);
        mockMvc.perform(post("/api/auth/email-verification-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(500))
                .andExpect(jsonPath("$.message").value("验证码错误"));
        verify(captchaService).validateCaptcha(eq("test-key"), eq("1234"));
        verify(emailService, never()).generateVerificationCode();
        verify(emailService, never()).sendVerificationCode(any(), any());
        verify(emailService, never()).saveVerificationCode(any(), any());
    }
    @Test
    public void testSendEmailUpdateCode() throws Exception {
        // 准备邮箱更新验证码请求数据
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("newemail@example.com");
        emailVerificationDTO.setCaptchaKey("test-key");
        emailVerificationDTO.setCaptchaCode("1234");
        String verificationCode = "654321";
        // 模拟图形验证码验证通过
        given(captchaService.validateCaptcha("test-key", "1234")).willReturn(true);
        // 模拟验证码生成
        given(emailService.generateVerificationCode()).willReturn(verificationCode);
        // 模拟邮件发送
        doNothing().when(emailService).sendEmailUpdateCode(eq("newemail@example.com"), eq(verificationCode));
        // 模拟验证码保存
        doNothing().when(emailService).saveVerificationCode(eq("newemail@example.com"), eq(verificationCode));
        mockMvc.perform(post("/api/auth/email-update-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.message").value("操作成功"));
        verify(captchaService).validateCaptcha(eq("test-key"), eq("1234"));
        verify(emailService).generateVerificationCode();
        verify(emailService).sendEmailUpdateCode(eq("newemail@example.com"), eq(verificationCode));
        verify(emailService).saveVerificationCode(eq("newemail@example.com"), eq(verificationCode));
    }
    @Test
    public void testSendEmailUpdateCodeWithInvalidCaptcha() throws Exception {
        // 准备邮箱更新验证码请求数据
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("newemail@example.com");
        emailVerificationDTO.setCaptchaKey("test-key");
        emailVerificationDTO.setCaptchaCode("1234");
        // 模拟图形验证码验证失败
        given(captchaService.validateCaptcha("test-key", "1234")).willReturn(false);
        mockMvc.perform(post("/api/auth/email-update-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(500))
                .andExpect(jsonPath("$.message").value("验证码错误"));
        verify(captchaService).validateCaptcha(eq("test-key"), eq("1234"));
        verify(emailService, never()).generateVerificationCode();
        verify(emailService, never()).sendEmailUpdateCode(any(), any());
        verify(emailService, never()).saveVerificationCode(any(), any());
    }
    @Test
    public void testLogin() throws Exception {
        // 创建登录请求
        LoginDTO loginDTO = new LoginDTO();
        loginDTO.setUsername("testuser");
        loginDTO.setPassword("password123");
        loginDTO.setCaptchaKey("test-key");
        loginDTO.setCaptchaCode("1234");
        // 模拟JWT令牌
        JwtTokenDTO jwtTokenDTO = JwtTokenDTO.builder()
                .accessToken("access-token")
                .refreshToken("refresh-token")
                .expiresIn(3600000)
                .build();
        // 模拟服务
        given(authService.login(any(LoginDTO.class))).willReturn(jwtTokenDTO);
        // 执行请求
        mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.accessToken").value("access-token"))
                .andExpect(jsonPath("$.data.refreshToken").value("refresh-token"))
                .andExpect(jsonPath("$.data.expiresIn").value(3600000));
        verify(authService, times(1)).login(any(LoginDTO.class));
    }
    @Test
    public void testRefreshToken() throws Exception {
        // 创建刷新令牌请求
        RefreshTokenDTO refreshTokenDTO = new RefreshTokenDTO();
        refreshTokenDTO.setRefreshToken("refresh-token");
        // 模拟JWT令牌
        JwtTokenDTO jwtTokenDTO = JwtTokenDTO.builder()
                .accessToken("new-access-token")
                .refreshToken("refresh-token")
                .expiresIn(3600000)
                .build();
        // 模拟服务
        given(authService.refreshToken(any(RefreshTokenDTO.class))).willReturn(jwtTokenDTO);
        // 执行请求
        mockMvc.perform(post("/api/auth/refresh-token")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(refreshTokenDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.accessToken").value("new-access-token"))
                .andExpect(jsonPath("$.data.refreshToken").value("refresh-token"))
                .andExpect(jsonPath("$.data.expiresIn").value(3600000));
        verify(authService, times(1)).refreshToken(any(RefreshTokenDTO.class));
    }
    @Test
    public void testLogout() throws Exception {
        // 模拟服务
        doNothing().when(authService).logout(anyString());
        // 执行请求
        mockMvc.perform(post("/api/auth/logout")
                        .header("Authorization", "Bearer test-token"))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.message").value("操作成功"));
        verify(authService, times(1)).logout(eq("test-token"));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/integration/MinioIntegrationTest.java">
package com.zhangziqi.online_course_mine.integration;
import com.zhangziqi.online_course_mine.service.MinioService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.ActiveProfiles;
import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assumptions.assumeTrue;
@SpringBootTest
@ActiveProfiles("test")
class MinioIntegrationTest {
    @Autowired
    private MinioService minioService;
    /**
     * 这个测试只有在MINIO_ENABLED环境变量为true时才会运行
     * 可以在运行测试前设置环境变量：MINIO_ENABLED=true
     */
    @Test
    @EnabledIfEnvironmentVariable(named = "MINIO_ENABLED", matches = "true")
    void testMinioOperations() throws Exception {
        // 要测试的文件数据
        String objectName = "test-integration-" + System.currentTimeMillis() + ".txt";
        String content = "Hello MinIO Integration Test!";
        ByteArrayInputStream inputStream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));
        String contentType = "text/plain";
        try {
            // 1. 上传文件
            String url = minioService.uploadFile(objectName, inputStream, contentType);
            assertNotNull(url);
            assertTrue(url.contains(objectName));
            // 2. 获取文件URL
            String fileUrl = minioService.getFileUrl(objectName);
            assertNotNull(fileUrl);
            assertEquals(url, fileUrl);
            // 3. 列出所有文件
            List<String> files = minioService.listAllFiles();
            assertNotNull(files);
            assertTrue(files.contains(objectName));
        } finally {
            // 4. 删除测试文件（清理）
            boolean deleted = minioService.deleteFile(objectName);
            assertTrue(deleted);
            // 验证文件已被删除
            List<String> filesAfterDelete = minioService.listAllFiles();
            assertFalse(filesAfterDelete.contains(objectName));
        }
    }
    /**
     * 一个总是跳过的测试，用于演示如何运行集成测试
     */
    @Test
    void testSkippedByDefault() {
        // 默认跳过这个测试
        assumeTrue(false, "手动跳过的测试，需要正确配置MinIO才能运行");
        fail("这个测试不应该被执行");
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/integration/S3IntegrationTest.java">
package com.zhangziqi.online_course_mine.integration;
import com.zhangziqi.online_course_mine.config.S3Config;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.*;
import software.amazon.awssdk.services.s3.presigner.S3Presigner;
import software.amazon.awssdk.services.s3.presigner.model.GetObjectPresignRequest;
import software.amazon.awssdk.services.s3.presigner.model.PresignedGetObjectRequest;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assumptions.assumeTrue;
@SpringBootTest
@ActiveProfiles("test")
class S3IntegrationTest {
    @Autowired
    private S3Client s3Client;
    @Autowired
    private S3Presigner s3Presigner;
    @Autowired
    private S3Config s3Config;
    /**
     * 这个测试只有在S3_ENABLED环境变量为true时才会运行
     * 可以在运行测试前设置环境变量：S3_ENABLED=true
     */
    @Test
    @EnabledIfEnvironmentVariable(named = "S3_ENABLED", matches = "true")
    void testS3Operations() {
        // 要测试的文件数据
        String objectKey = "test-s3-integration-" + System.currentTimeMillis() + ".txt";
        String content = "Hello S3 Integration Test!";
        byte[] contentBytes = content.getBytes(StandardCharsets.UTF_8);
        try {
            // 1. 检查存储桶是否存在，不存在则创建
            createBucketIfNotExists();
            // 2. 上传文件
            PutObjectResponse putResponse = s3Client.putObject(
                    PutObjectRequest.builder()
                            .bucket(s3Config.getBucketName())
                            .key(objectKey)
                            .contentType("text/plain")
                            .build(),
                    RequestBody.fromBytes(contentBytes)
            );
            assertNotNull(putResponse.eTag());
            // 3. 获取文件的预签名URL
            PresignedGetObjectRequest presignedRequest = s3Presigner.presignGetObject(GetObjectPresignRequest.builder()
                    .getObjectRequest(GetObjectRequest.builder()
                            .bucket(s3Config.getBucketName())
                            .key(objectKey)
                            .build())
                    .signatureDuration(Duration.ofDays(7))
                    .build());
            String presignedUrl = presignedRequest.url().toString();
            assertNotNull(presignedUrl);
            assertTrue(presignedUrl.contains(objectKey));
            // 4. 列出所有文件
            ListObjectsV2Response listResponse = s3Client.listObjectsV2(
                    ListObjectsV2Request.builder()
                            .bucket(s3Config.getBucketName())
                            .build()
            );
            List<S3Object> objects = listResponse.contents();
            assertNotNull(objects);
            assertTrue(objects.stream().anyMatch(obj -> obj.key().equals(objectKey)));
            // 5. 获取文件元数据
            HeadObjectResponse headResponse = s3Client.headObject(
                    HeadObjectRequest.builder()
                            .bucket(s3Config.getBucketName())
                            .key(objectKey)
                            .build()
            );
            assertEquals("text/plain", headResponse.contentType());
            assertEquals(contentBytes.length, headResponse.contentLength());
        } finally {
            // 6. 删除测试文件（清理）
            DeleteObjectResponse deleteResponse = s3Client.deleteObject(
                    DeleteObjectRequest.builder()
                            .bucket(s3Config.getBucketName())
                            .key(objectKey)
                            .build()
            );
            assertNotNull(deleteResponse);
            // 验证文件已被删除
            ListObjectsV2Response listResponse = s3Client.listObjectsV2(
                    ListObjectsV2Request.builder()
                            .bucket(s3Config.getBucketName())
                            .build()
            );
            assertFalse(listResponse.contents().stream().anyMatch(obj -> obj.key().equals(objectKey)));
        }
    }
    private void createBucketIfNotExists() {
        try {
            s3Client.headBucket(HeadBucketRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .build());
        } catch (NoSuchBucketException e) {
            s3Client.createBucket(CreateBucketRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .build());
        }
    }
    /**
     * 一个总是跳过的测试，用于演示如何运行集成测试
     */
    @Test
    void testSkippedByDefault() {
        // 默认跳过这个测试
        assumeTrue(false, "手动跳过的测试，需要正确配置MinIO和S3才能运行");
        fail("这个测试不应该被执行");
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/OnlineCourseMineApplicationTests.java">
package com.zhangziqi.online_course_mine;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
@SpringBootTest
@ActiveProfiles("test")
class OnlineCourseMineApplicationTests {
    @Test
    void contextLoads() {
        // 测试应用上下文是否正常加载
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/AuthServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.LoginDTO;
import com.zhangziqi.online_course_mine.model.dto.RefreshTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.security.jwt.JwtTokenProvider;
import com.zhangziqi.online_course_mine.security.jwt.TokenBlacklistService;
import com.zhangziqi.online_course_mine.service.impl.AuthServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.test.context.ActiveProfiles;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.mockito.BDDMockito.given;
/**
 * 认证服务测试
 */
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test") // 使用测试环境配置
public class AuthServiceTest {
    @Mock
    private AuthenticationManager authenticationManager;
    @Mock
    private JwtTokenProvider tokenProvider;
    @Mock
    private UserService userService;
    @Mock
    private CaptchaService captchaService;
    @Mock
    private EmailService emailService;
    @Mock
    private TokenBlacklistService tokenBlacklistService;
    @Mock
    private JwtConfig jwtConfig;
    @Mock
    private Authentication authentication;
    @InjectMocks
    private AuthServiceImpl authService;
    private RegisterDTO registerDTO;
    private LoginDTO loginDTO;
    private RefreshTokenDTO refreshTokenDTO;
    private JwtTokenDTO jwtTokenDTO;
    @BeforeEach
    void setUp() {
        // 初始化注册DTO
        registerDTO = new RegisterDTO();
        registerDTO.setUsername("testuser");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("test@example.com");
        registerDTO.setCaptchaKey("captcha-key");
        registerDTO.setCaptchaCode("1234");
        registerDTO.setEmailCode("123456");
        // 初始化登录DTO
        loginDTO = new LoginDTO();
        loginDTO.setUsername("testuser");
        loginDTO.setPassword("password123");
        loginDTO.setCaptchaKey("captcha-key");
        loginDTO.setCaptchaCode("1234");
        // 初始化刷新令牌DTO
        refreshTokenDTO = new RefreshTokenDTO();
        refreshTokenDTO.setRefreshToken("refresh-token");
        // 初始化JWT令牌
        jwtTokenDTO = JwtTokenDTO.builder()
                .accessToken("access-token")
                .refreshToken("refresh-token")
                .tokenType("Bearer")
                .expiresIn(3600000)
                .build();
    }
    @Test
    void registerShouldSucceedWhenAllValidationsPass() {
        // 模拟验证通过
        given(emailService.validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode())).willReturn(true);
        // 模拟用户注册
        given(userService.register(registerDTO)).willReturn(new User());
        // 执行注册
        authService.register(registerDTO);
        // 验证调用
        verify(emailService).validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode());
        verify(userService).register(registerDTO);
    }
    @Test
    void registerShouldThrowExceptionWhenEmailCodeInvalid() {
        // 模拟邮箱验证码验证失败
        given(emailService.validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode())).willReturn(false);
        // 执行注册并验证异常
        BusinessException exception = assertThrows(BusinessException.class, () -> {
            authService.register(registerDTO);
        });
        // 验证异常消息
        assertEquals("邮箱验证码错误或已过期", exception.getMessage());
        // 验证调用
        verify(emailService).validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode());
        verify(userService, never()).register(registerDTO);
    }
    @Test
    void loginShouldSucceedWhenCredentialsValid() {
        // 准备
        when(captchaService.validateCaptcha(loginDTO.getCaptchaKey(), loginDTO.getCaptchaCode())).thenReturn(true);
        when(authenticationManager.authenticate(any(UsernamePasswordAuthenticationToken.class))).thenReturn(authentication);
        when(tokenProvider.createToken(authentication)).thenReturn(jwtTokenDTO);
        // 执行
        JwtTokenDTO result = authService.login(loginDTO);
        // 验证
        assertNotNull(result);
        assertEquals(jwtTokenDTO.getAccessToken(), result.getAccessToken());
        assertEquals(jwtTokenDTO.getRefreshToken(), result.getRefreshToken());
        verify(captchaService).validateCaptcha(loginDTO.getCaptchaKey(), loginDTO.getCaptchaCode());
        verify(authenticationManager).authenticate(any(UsernamePasswordAuthenticationToken.class));
        verify(userService).updateLastLoginTime(loginDTO.getUsername());
        verify(tokenProvider).createToken(authentication);
    }
    @Test
    void loginShouldThrowExceptionWhenCaptchaInvalid() {
        // 准备
        when(captchaService.validateCaptcha(loginDTO.getCaptchaKey(), loginDTO.getCaptchaCode())).thenReturn(false);
        // 执行并验证
        assertThrows(BusinessException.class, () -> authService.login(loginDTO));
        verify(captchaService).validateCaptcha(loginDTO.getCaptchaKey(), loginDTO.getCaptchaCode());
        verify(authenticationManager, never()).authenticate(any());
    }
    @Test
    void refreshTokenShouldSucceedWhenTokenValid() {
        // 准备
        when(tokenProvider.validateToken(refreshTokenDTO.getRefreshToken())).thenReturn(true);
        when(tokenBlacklistService.isBlacklisted(refreshTokenDTO.getRefreshToken())).thenReturn(false);
        when(tokenProvider.refreshToken(refreshTokenDTO.getRefreshToken())).thenReturn(jwtTokenDTO);
        // 执行
        JwtTokenDTO result = authService.refreshToken(refreshTokenDTO);
        // 验证
        assertNotNull(result);
        assertEquals(jwtTokenDTO.getAccessToken(), result.getAccessToken());
        assertEquals(jwtTokenDTO.getRefreshToken(), result.getRefreshToken());
        verify(tokenProvider).validateToken(refreshTokenDTO.getRefreshToken());
        verify(tokenBlacklistService).isBlacklisted(refreshTokenDTO.getRefreshToken());
        verify(tokenProvider).refreshToken(refreshTokenDTO.getRefreshToken());
    }
    @Test
    void refreshTokenShouldThrowExceptionWhenTokenInvalid() {
        // 准备
        when(tokenProvider.validateToken(refreshTokenDTO.getRefreshToken())).thenReturn(false);
        // 执行并验证
        assertThrows(BusinessException.class, () -> authService.refreshToken(refreshTokenDTO));
        verify(tokenProvider).validateToken(refreshTokenDTO.getRefreshToken());
        verify(tokenBlacklistService, never()).isBlacklisted(any());
    }
    @Test
    void refreshTokenShouldThrowExceptionWhenTokenBlacklisted() {
        // 准备
        when(tokenProvider.validateToken(refreshTokenDTO.getRefreshToken())).thenReturn(true);
        when(tokenBlacklistService.isBlacklisted(refreshTokenDTO.getRefreshToken())).thenReturn(true);
        // 执行并验证
        assertThrows(BusinessException.class, () -> authService.refreshToken(refreshTokenDTO));
        verify(tokenProvider).validateToken(refreshTokenDTO.getRefreshToken());
        verify(tokenBlacklistService).isBlacklisted(refreshTokenDTO.getRefreshToken());
        verify(tokenProvider, never()).refreshToken(any());
    }
    @Test
    void logoutShouldAddTokenToBlacklist() {
        // 准备
        String token = "test-token";
        when(tokenProvider.getUsernameFromToken(token)).thenReturn("testuser");
        when(jwtConfig.getAccessTokenExpiration()).thenReturn(3600000L);
        // 执行
        authService.logout(token);
        // 验证
        verify(tokenProvider).getUsernameFromToken(token);
        verify(tokenBlacklistService).addToBlacklist(token, jwtConfig.getAccessTokenExpiration());
    }
    @Test
    void logoutShouldDoNothingWhenTokenEmpty() {
        // 执行
        authService.logout("");
        // 验证
        verify(tokenProvider, never()).getUsernameFromToken(any());
        verify(tokenBlacklistService, never()).addToBlacklist(any(), anyLong());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/CaptchaServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.google.code.kaptcha.impl.DefaultKaptcha;
import com.zhangziqi.online_course_mine.service.impl.CaptchaServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.util.ReflectionTestUtils;
import java.awt.image.BufferedImage;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
/**
 * 验证码服务测试
 */
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test") // 使用测试环境配置
public class CaptchaServiceTest {
    @Mock
    private DefaultKaptcha captchaProducer;
    @Mock
    private RedisTemplate<String, Object> redisTemplate;
    @Mock
    private ValueOperations<String, Object> valueOperations;
    @InjectMocks
    private CaptchaServiceImpl captchaService;
    @BeforeEach
    void setUp() {
        // 只在需要使用到的测试方法中进行模拟，避免不必要的模拟
        // when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        // 设置私有常量字段的值
        ReflectionTestUtils.setField(captchaService, "CAPTCHA_PREFIX", "captcha:");
        ReflectionTestUtils.setField(captchaService, "CAPTCHA_EXPIRATION", 300L); // 5分钟
    }
    @Test
    void generateCaptchaShouldReturnImageAndSaveToRedis() {
        // 准备
        String captchaKey = "test-key";
        String captchaText = "1234";
        BufferedImage mockImage = new BufferedImage(150, 50, BufferedImage.TYPE_INT_RGB);
        // 在这个测试中才需要模拟opsForValue
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(captchaProducer.createText()).thenReturn(captchaText);
        when(captchaProducer.createImage(captchaText)).thenReturn(mockImage);
        // 使用when-thenReturn代替doNothing
        // doNothing().when(valueOperations).set(anyString(), anyString(), anyLong(), any(TimeUnit.class));
        // 执行
        BufferedImage result = captchaService.generateCaptcha(captchaKey);
        // 验证
        assertNotNull(result);
        assertEquals(mockImage, result);
        verify(captchaProducer).createText();
        verify(captchaProducer).createImage(captchaText);
        verify(valueOperations).set(eq("captcha:" + captchaKey), eq(captchaText), eq(300L), eq(TimeUnit.SECONDS));
    }
    @Test
    void validateCaptchaShouldReturnTrueWhenCaptchaValid() {
        // 准备
        String captchaKey = "test-key";
        String captchaCode = "1234";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("captcha:" + captchaKey)).thenReturn(captchaCode);
        // 对于返回值的方法，使用when-thenReturn而不是doNothing
        when(redisTemplate.delete(anyString())).thenReturn(Boolean.TRUE);
        // 执行
        boolean result = captchaService.validateCaptcha(captchaKey, captchaCode);
        // 验证
        assertTrue(result);
        verify(valueOperations).get("captcha:" + captchaKey);
        verify(redisTemplate).delete("captcha:" + captchaKey);
    }
    @Test
    void validateCaptchaShouldReturnFalseWhenCaptchaInvalid() {
        // 准备
        String captchaKey = "test-key";
        String captchaCode = "1234";
        String storedCaptchaCode = "5678";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("captcha:" + captchaKey)).thenReturn(storedCaptchaCode);
        // 对于返回值的方法，使用when-thenReturn而不是doNothing
        when(redisTemplate.delete(anyString())).thenReturn(Boolean.TRUE);
        // 执行
        boolean result = captchaService.validateCaptcha(captchaKey, captchaCode);
        // 验证
        assertFalse(result);
        verify(valueOperations).get("captcha:" + captchaKey);
        verify(redisTemplate).delete("captcha:" + captchaKey);
    }
    @Test
    void validateCaptchaShouldReturnFalseWhenCaptchaExpired() {
        // 准备
        String captchaKey = "test-key";
        String captchaCode = "1234";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("captcha:" + captchaKey)).thenReturn(null);
        // 执行
        boolean result = captchaService.validateCaptcha(captchaKey, captchaCode);
        // 验证
        assertFalse(result);
        verify(valueOperations).get("captcha:" + captchaKey);
        verify(redisTemplate, never()).delete(anyString());
    }
    @Test
    void validateCaptchaShouldReturnFalseWhenKeyOrCodeEmpty() {
        // 执行 - 空key
        boolean result1 = captchaService.validateCaptcha("", "1234");
        // 执行 - 空code
        boolean result2 = captchaService.validateCaptcha("test-key", "");
        // 执行 - 都为空
        boolean result3 = captchaService.validateCaptcha("", "");
        // 验证
        assertFalse(result1);
        assertFalse(result2);
        assertFalse(result3);
        verify(valueOperations, never()).get(anyString());
        verify(redisTemplate, never()).delete(anyString());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/EmailServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.service.impl.EmailServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.test.context.ActiveProfiles;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;
import org.mockito.ArgumentCaptor;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
/**
 * 邮件服务测试
 */
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test")
public class EmailServiceTest {
    @Mock
    private JavaMailSender mailSender;
    @Mock
    private StringRedisTemplate redisTemplate;
    @Mock
    private TemplateEngine templateEngine;
    @Mock
    private ValueOperations<String, String> valueOperations;
    @Mock
    private MimeMessage mimeMessage;
    @InjectMocks
    private EmailServiceImpl emailService;
    @BeforeEach
    void setUp() {
        emailService.setVerificationCodePrefix("email:verification:");
        emailService.setVerificationCodeExpiration(5L);
    }
    @Test
    void sendVerificationCodeShouldSendEmail() throws MessagingException {
        // 准备
        String email = "test@example.com";
        String code = "123456";
        String processedTemplate = "<html>验证码是: 123456</html>";
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);
        when(templateEngine.process(eq("email/verification-code"), any(Context.class))).thenReturn(processedTemplate);
        // 执行
        emailService.sendVerificationCode(email, code);
        // 验证
        verify(mailSender).createMimeMessage();
        verify(templateEngine).process(eq("email/verification-code"), any(Context.class));
        verify(mailSender).send(mimeMessage);
    }
    @Test
    void generateVerificationCodeShouldReturnSixDigitCode() {
        // 执行
        String code = emailService.generateVerificationCode();
        // 验证
        assertNotNull(code);
        assertEquals(6, code.length());
        assertTrue(code.matches("^\\d{6}$"));
    }
    @Test
    void saveVerificationCodeShouldSaveToRedis() {
        // 准备
        String email = "test@example.com";
        String code = "123456";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        // 执行
        emailService.saveVerificationCode(email, code);
        // 验证
        verify(valueOperations).set(
            eq("email:verification:test@example.com"),
            eq(code),
            eq(5L),
            eq(TimeUnit.MINUTES)
        );
    }
    @Test
    void validateVerificationCodeShouldReturnTrueWhenValid() {
        // 准备
        String email = "test@example.com";
        String code = "123456";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("email:verification:test@example.com")).thenReturn(code);
        // 执行
        boolean result = emailService.validateVerificationCode(email, code);
        // 验证
        assertTrue(result);
        verify(valueOperations).get("email:verification:test@example.com");
        verify(redisTemplate).delete("email:verification:test@example.com");
    }
    @Test
    void validateVerificationCodeShouldReturnFalseWhenInvalid() {
        // 准备
        String email = "test@example.com";
        String code = "123456";
        String wrongCode = "654321";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("email:verification:test@example.com")).thenReturn(wrongCode);
        // 执行
        boolean result = emailService.validateVerificationCode(email, code);
        // 验证
        assertFalse(result);
        verify(valueOperations).get("email:verification:test@example.com");
        verify(redisTemplate, never()).delete(anyString());
    }
    @Test
    void validateVerificationCodeShouldReturnFalseWhenExpired() {
        // 准备
        String email = "test@example.com";
        String code = "123456";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("email:verification:test@example.com")).thenReturn(null);
        // 执行
        boolean result = emailService.validateVerificationCode(email, code);
        // 验证
        assertFalse(result);
        verify(valueOperations).get("email:verification:test@example.com");
        verify(redisTemplate, never()).delete(anyString());
    }
    @Test
    public void testSendEmailUpdateCode() throws MessagingException {
        // 准备
        String to = "test@example.com";
        String code = "123456";
        String emailContent = "<div>邮箱更新验证码：123456</div>";
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);
        when(templateEngine.process(eq("email/email-update-code"), any(Context.class))).thenReturn(emailContent);
        // 执行
        emailService.sendEmailUpdateCode(to, code);
        // 验证
        verify(mailSender, times(1)).createMimeMessage();
        verify(mailSender, times(1)).send(any(MimeMessage.class));
        verify(templateEngine, times(1)).process(eq("email/email-update-code"), any(Context.class));
        // 验证上下文参数
        ArgumentCaptor<Context> contextCaptor = ArgumentCaptor.forClass(Context.class);
        verify(templateEngine).process(eq("email/email-update-code"), contextCaptor.capture());
        Context context = contextCaptor.getValue();
        assertNotNull(context);
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/MinioServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.config.MinioConfig;
import com.zhangziqi.online_course_mine.service.impl.MinioServiceImpl;
import io.minio.*;
import io.minio.messages.Item;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
class MinioServiceTest {
    @Mock
    private MinioClient minioClient;
    @Mock
    private MinioConfig minioConfig;
    private MinioService minioService;
    @BeforeEach
    void setUp() {
        minioService = new MinioServiceImpl(minioClient, minioConfig);
        when(minioConfig.getBucketName()).thenReturn("media-test");
    }
    @Test
    void uploadFile_Success() throws Exception {
        // 准备测试数据
        String objectName = "test-file.txt";
        String content = "Hello MinIO!";
        ByteArrayInputStream inputStream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));
        String contentType = "text/plain";
        // 模拟MinIO客户端行为
        when(minioClient.bucketExists(any(BucketExistsArgs.class))).thenReturn(true);
        // Mock获取预签名URL的响应
        String expectedUrl = "http://localhost:8999/media-test/test-file.txt";
        when(minioClient.getPresignedObjectUrl(any(GetPresignedObjectUrlArgs.class))).thenReturn(expectedUrl);
        // 执行测试
        String url = minioService.uploadFile(objectName, inputStream, contentType);
        // 验证结果
        assertNotNull(url);
        assertEquals(expectedUrl, url);
        // 验证MinIO客户端的方法被调用
        verify(minioClient).bucketExists(any(BucketExistsArgs.class));
        verify(minioClient).putObject(any(PutObjectArgs.class));
        verify(minioClient).getPresignedObjectUrl(any(GetPresignedObjectUrlArgs.class));
    }
    @Test
    void deleteFile_Success() throws Exception {
        // 准备测试数据
        String objectName = "test-file.txt";
        // 执行测试
        boolean result = minioService.deleteFile(objectName);
        // 验证结果
        assertTrue(result);
        // 验证MinIO客户端的方法被调用
        verify(minioClient).removeObject(any(RemoveObjectArgs.class));
    }
    @Test
    void listAllFiles_Success() throws Exception {
        // 准备测试数据
        List<String> expectedFiles = List.of("file1.txt", "file2.txt");
        // 创建模拟的Result<Item>
        List<Result<Item>> mockResults = new ArrayList<>();
        for (String fileName : expectedFiles) {
            Result<Item> mockResult = mock(Result.class);
            Item mockItem = mock(Item.class);
            when(mockItem.objectName()).thenReturn(fileName);
            when(mockResult.get()).thenReturn(mockItem);
            mockResults.add(mockResult);
        }
        // 创建一个可迭代的对象
        Iterable<Result<Item>> mockIterable = () -> mockResults.iterator();
        // 模拟MinIO客户端行为
        when(minioClient.listObjects(any(ListObjectsArgs.class))).thenReturn(mockIterable);
        // 执行测试
        List<String> files = minioService.listAllFiles();
        // 验证结果
        assertNotNull(files);
        assertEquals(expectedFiles.size(), files.size());
        assertTrue(files.containsAll(expectedFiles));
        // 验证MinIO客户端的方法被调用
        verify(minioClient).listObjects(any(ListObjectsArgs.class));
    }
    @Test
    void checkAndCreateBucket_BucketExists() throws Exception {
        // 模拟MinIO客户端行为
        when(minioClient.bucketExists(any(BucketExistsArgs.class))).thenReturn(true);
        // 执行测试
        minioService.checkAndCreateBucket();
        // 验证MinIO客户端的方法被调用
        verify(minioClient).bucketExists(any(BucketExistsArgs.class));
        verify(minioClient, never()).makeBucket(any(MakeBucketArgs.class));
    }
    @Test
    void checkAndCreateBucket_BucketDoesNotExist() throws Exception {
        // 模拟MinIO客户端行为
        when(minioClient.bucketExists(any(BucketExistsArgs.class))).thenReturn(false);
        // 执行测试
        minioService.checkAndCreateBucket();
        // 验证MinIO客户端的方法被调用
        verify(minioClient).bucketExists(any(BucketExistsArgs.class));
        verify(minioClient).makeBucket(any(MakeBucketArgs.class));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/UserServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.RoleEnum;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.impl.UserServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.ActiveProfiles;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
/**
 * 用户服务测试
 */
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test") // 使用测试环境配置
public class UserServiceTest {
    @Mock
    private UserRepository userRepository;
    @Mock
    private RoleRepository roleRepository;
    @Mock
    private PasswordEncoder passwordEncoder;
    @Mock
    private EmailService emailService;
    @InjectMocks
    private UserServiceImpl userService;
    private RegisterDTO registerDTO;
    private User user;
    private Role userRole;
    @BeforeEach
    void setUp() {
        // 初始化注册DTO
        registerDTO = new RegisterDTO();
        registerDTO.setUsername("testuser");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("test@example.com");
        registerDTO.setPhone("13812345678");
        // 初始化角色
        userRole = new Role();
        userRole.setName("普通用户");
        userRole.setCode(RoleEnum.USER.getCode());
        // 初始化用户
        user = User.builder()
                .username(registerDTO.getUsername())
                .password("encodedPassword")
                .email(registerDTO.getEmail())
                .phone(registerDTO.getPhone())
                .status(1)
                .roles(Collections.singleton(userRole))
                .build();
    }
    @Test
    void registerShouldSucceedWhenUserInfoValid() {
        // 准备
        when(userRepository.existsByUsername(registerDTO.getUsername())).thenReturn(false);
        when(userRepository.existsByEmail(registerDTO.getEmail())).thenReturn(false);
        when(userRepository.existsByPhone(registerDTO.getPhone())).thenReturn(false);
        when(roleRepository.findByCode(RoleEnum.USER.getCode())).thenReturn(Optional.of(userRole));
        when(passwordEncoder.encode(registerDTO.getPassword())).thenReturn("encodedPassword");
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        User result = userService.register(registerDTO);
        // 验证
        assertNotNull(result);
        assertEquals(registerDTO.getUsername(), result.getUsername());
        verify(userRepository).existsByUsername(registerDTO.getUsername());
        verify(userRepository).existsByEmail(registerDTO.getEmail());
        verify(userRepository).existsByPhone(registerDTO.getPhone());
        verify(roleRepository).findByCode(RoleEnum.USER.getCode());
        verify(passwordEncoder).encode(registerDTO.getPassword());
        verify(userRepository).save(any(User.class));
    }
    @Test
    void registerShouldThrowExceptionWhenUsernameExists() {
        // 准备
        when(userRepository.existsByUsername(registerDTO.getUsername())).thenReturn(true);
        // 执行并验证
        assertThrows(BusinessException.class, () -> userService.register(registerDTO));
        verify(userRepository).existsByUsername(registerDTO.getUsername());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void registerShouldThrowExceptionWhenEmailExists() {
        // 准备
        when(userRepository.existsByUsername(registerDTO.getUsername())).thenReturn(false);
        when(userRepository.existsByEmail(registerDTO.getEmail())).thenReturn(true);
        // 执行并验证
        assertThrows(BusinessException.class, () -> userService.register(registerDTO));
        verify(userRepository).existsByUsername(registerDTO.getUsername());
        verify(userRepository).existsByEmail(registerDTO.getEmail());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void registerShouldThrowExceptionWhenPhoneExists() {
        // 准备
        when(userRepository.existsByUsername(registerDTO.getUsername())).thenReturn(false);
        when(userRepository.existsByEmail(registerDTO.getEmail())).thenReturn(false);
        when(userRepository.existsByPhone(registerDTO.getPhone())).thenReturn(true);
        // 执行并验证
        assertThrows(BusinessException.class, () -> userService.register(registerDTO));
        verify(userRepository).existsByUsername(registerDTO.getUsername());
        verify(userRepository).existsByEmail(registerDTO.getEmail());
        verify(userRepository).existsByPhone(registerDTO.getPhone());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void getUserByUsernameShouldReturnUserWhenUserExists() {
        // 准备
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        // 执行
        User result = userService.getUserByUsername(user.getUsername());
        // 验证
        assertNotNull(result);
        assertEquals(user.getUsername(), result.getUsername());
        verify(userRepository).findByUsername(user.getUsername());
    }
    @Test
    void getUserByUsernameShouldThrowExceptionWhenUserNotExists() {
        // 准备
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.empty());
        // 执行并验证
        assertThrows(BusinessException.class, () -> userService.getUserByUsername("nonexistentuser"));
        verify(userRepository).findByUsername("nonexistentuser");
    }
    @Test
    void existsByUsernameShouldReturnTrueWhenUserExists() {
        // 准备
        when(userRepository.existsByUsername(user.getUsername())).thenReturn(true);
        // 执行
        boolean result = userService.existsByUsername(user.getUsername());
        // 验证
        assertTrue(result);
        verify(userRepository).existsByUsername(user.getUsername());
    }
    @Test
    void existsByEmailShouldReturnTrueWhenEmailExists() {
        // 准备
        when(userRepository.existsByEmail(user.getEmail())).thenReturn(true);
        // 执行
        boolean result = userService.existsByEmail(user.getEmail());
        // 验证
        assertTrue(result);
        verify(userRepository).existsByEmail(user.getEmail());
    }
    @Test
    void existsByPhoneShouldReturnTrueWhenPhoneExists() {
        // 准备
        when(userRepository.existsByPhone(user.getPhone())).thenReturn(true);
        // 执行
        boolean result = userService.existsByPhone(user.getPhone());
        // 验证
        assertTrue(result);
        verify(userRepository).existsByPhone(user.getPhone());
    }
    @Test
    void updateLastLoginTimeShouldUpdateTimeWhenUserExists() {
        // 准备
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        userService.updateLastLoginTime(user.getUsername());
        // 验证
        verify(userRepository).findByUsername(user.getUsername());
        verify(userRepository).save(any(User.class));
        assertNotNull(user.getLastLoginAt());
    }
    @Test
    void updateLastLoginTimeShouldThrowExceptionWhenUserNotExists() {
        // 准备
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.empty());
        // 执行并验证
        assertThrows(BusinessException.class, () -> userService.updateLastLoginTime("nonexistentuser"));
        verify(userRepository).findByUsername("nonexistentuser");
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void getCurrentUserShouldReturnUserInfoWhenUserExists() {
        // 准备
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        // 执行
        UserVO result = userService.getCurrentUser(user.getUsername());
        // 验证
        assertNotNull(result);
        assertEquals(user.getUsername(), result.getUsername());
        assertEquals(user.getEmail(), result.getEmail());
        assertEquals(user.getPhone(), result.getPhone());
        verify(userRepository).findByUsername(user.getUsername());
    }
    @Test
    void updateCurrentUserProfileShouldUpdateUserInfoWhenValid() {
        // 准备
        String nickname = "新昵称";
        String phone = "13900001111";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(userRepository.existsByPhone(phone)).thenReturn(false);
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        UserVO result = userService.updateCurrentUserProfile(user.getUsername(), nickname, phone);
        // 验证
        assertNotNull(result);
        assertEquals(nickname, user.getNickname());
        assertEquals(phone, user.getPhone());
        verify(userRepository).findByUsername(user.getUsername());
        verify(userRepository).existsByPhone(phone);
        verify(userRepository).save(user);
    }
    @Test
    void updateCurrentUserProfileShouldThrowExceptionWhenPhoneExists() {
        // 准备
        String nickname = "新昵称";
        String phone = "13900001111";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(userRepository.existsByPhone(phone)).thenReturn(true);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.updateCurrentUserProfile(user.getUsername(), nickname, phone)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(userRepository).existsByPhone(phone);
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void changePasswordShouldSucceedWhenOldPasswordCorrect() {
        // 准备
        String oldPassword = "oldPassword";
        String newPassword = "newPassword";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(oldPassword, user.getPassword())).thenReturn(true);
        when(passwordEncoder.matches(newPassword, user.getPassword())).thenReturn(false);
        when(passwordEncoder.encode(newPassword)).thenReturn("encodedNewPassword");
        // 执行
        boolean result = userService.changePassword(user.getUsername(), oldPassword, newPassword);
        // 验证
        assertTrue(result);
        assertEquals("encodedNewPassword", user.getPassword());
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder).encode(newPassword);
        verify(userRepository).save(user);
    }
    @Test
    void changePasswordShouldThrowExceptionWhenOldPasswordIncorrect() {
        // 准备
        String oldPassword = "wrongPassword";
        String newPassword = "newPassword";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(oldPassword, user.getPassword())).thenReturn(false);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.changePassword(user.getUsername(), oldPassword, newPassword)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder, never()).encode(any(String.class));
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void changePasswordShouldThrowExceptionWhenNewPasswordSameAsOld() {
        // 准备
        String oldPassword = "oldPassword";
        String newPassword = "oldPassword"; // 新密码与旧密码相同
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(oldPassword, user.getPassword())).thenReturn(true);
        when(passwordEncoder.matches(newPassword, user.getPassword())).thenReturn(true);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.changePassword(user.getUsername(), oldPassword, newPassword)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder, never()).encode(any(String.class));
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void updateAvatarShouldUpdateAvatarUrlWhenUserExists() {
        // 准备
        String avatarUrl = "https://example.com/avatar.jpg";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        UserVO result = userService.updateAvatar(user.getUsername(), avatarUrl);
        // 验证
        assertNotNull(result);
        assertEquals(avatarUrl, user.getAvatar());
        verify(userRepository).findByUsername(user.getUsername());
        verify(userRepository).save(user);
    }
    @Test
    void updateEmailShouldUpdateEmailWhenValid() {
        // 准备
        String newEmail = "newemail@example.com";
        String emailCode = "123456";
        String password = "password123";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(password, user.getPassword())).thenReturn(true);
        when(userRepository.existsByEmail(newEmail)).thenReturn(false);
        when(emailService.validateVerificationCode(newEmail, emailCode)).thenReturn(true);
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        UserVO result = userService.updateEmail(user.getUsername(), newEmail, emailCode, password);
        // 验证
        assertNotNull(result);
        assertEquals(newEmail, user.getEmail());
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder).matches(password, user.getPassword());
        verify(userRepository).existsByEmail(newEmail);
        verify(emailService).validateVerificationCode(newEmail, emailCode);
        verify(userRepository).save(user);
    }
    @Test
    void updateEmailShouldThrowExceptionWhenPasswordIncorrect() {
        // 准备
        String newEmail = "newemail@example.com";
        String emailCode = "123456";
        String password = "wrongPassword";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(password, user.getPassword())).thenReturn(false);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.updateEmail(user.getUsername(), newEmail, emailCode, password)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder).matches(password, user.getPassword());
        verify(userRepository, never()).existsByEmail(any());
        verify(emailService, never()).validateVerificationCode(any(), any());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void updateEmailShouldThrowExceptionWhenEmailExists() {
        // 准备
        String newEmail = "newemail@example.com";
        String emailCode = "123456";
        String password = "password123";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(password, user.getPassword())).thenReturn(true);
        when(userRepository.existsByEmail(newEmail)).thenReturn(true);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.updateEmail(user.getUsername(), newEmail, emailCode, password)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder).matches(password, user.getPassword());
        verify(userRepository).existsByEmail(newEmail);
        verify(emailService, never()).validateVerificationCode(any(), any());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void updateEmailShouldThrowExceptionWhenEmailCodeInvalid() {
        // 准备
        String newEmail = "newemail@example.com";
        String emailCode = "123456";
        String password = "password123";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(password, user.getPassword())).thenReturn(true);
        when(userRepository.existsByEmail(newEmail)).thenReturn(false);
        when(emailService.validateVerificationCode(newEmail, emailCode)).thenReturn(false);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.updateEmail(user.getUsername(), newEmail, emailCode, password)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder).matches(password, user.getPassword());
        verify(userRepository).existsByEmail(newEmail);
        verify(emailService).validateVerificationCode(newEmail, emailCode);
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void getBasicUserInfoShouldReturnBasicInfoWhenUserExists() {
        // 准备
        Long userId = 1L;
        user.setId(userId);
        user.setNickname("测试用户");
        user.setAvatar("https://example.com/avatar.jpg");
        when(userRepository.findById(userId)).thenReturn(Optional.of(user));
        // 执行
        UserVO result = userService.getBasicUserInfo(userId);
        // 验证
        assertNotNull(result);
        assertEquals(userId, result.getId());
        assertEquals(user.getUsername(), result.getUsername());
        assertEquals(user.getNickname(), result.getNickname());
        assertEquals(user.getAvatar(), result.getAvatar());
        verify(userRepository).findById(userId);
    }
    @Test
    void getBasicUserInfoShouldThrowExceptionWhenUserNotExists() {
        // 准备
        Long userId = 1L;
        when(userRepository.findById(userId)).thenReturn(Optional.empty());
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.getBasicUserInfo(userId)
        );
        verify(userRepository).findById(userId);
    }
}
</file>

</files>

This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-18T15:18:02.809Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
front/src/app/dashboard/course-preview/[courseId]/
front/src/app/dashboard/courses-browse/
front/src/app/dashboard/courses/search/
front/src/components/course/
src/main/resources/db/migration/
src/main/resources/templates/payment/
.gitattributes
.gitignore
docs.md
docs/测试说明.md
docs/当前进度描述.md
docs/课程流程设计.md
docs/实现进度.md
docs/系统设计说明.md
docs/下一阶段.md
docs/下一阶段开发需求.md
docs/项目结构说明.md
docs/项目配置说明.md
docs/api.md
docs/API接口说明.md
docs/fornt/开发进度.md
docs/fornt/前端开发规划.md
docs/fornt/前端说明.md
docs/front/开发进度.md
front/.cursorrules
front/.gitignore
front/components.json
front/eslint.config.mjs
front/next.config.ts
front/package.json
front/postcss.config.mjs
front/public/file.svg
front/public/globe.svg
front/public/next.svg
front/public/vercel.svg
front/public/window.svg
front/README.md
front/src/app/(auth)/layout.tsx
front/src/app/(auth)/login/page.tsx
front/src/app/(auth)/register/page.tsx
front/src/app/(dashboard)/(course-manager)/questions/components/QuestionDetailForm.tsx
front/src/app/(dashboard)/(course-manager)/questions/components/QuestionList.tsx
front/src/app/dashboard/course-detail/[id]/page.tsx
front/src/app/dashboard/course-metadata/page.tsx
front/src/app/dashboard/course-search/page.tsx
front/src/app/dashboard/courses/[id]/chapters/[chapterId]/create-section/page.tsx
front/src/app/dashboard/courses/[id]/chapters/[chapterId]/sections/[sectionId]/edit/page.tsx
front/src/app/dashboard/courses/[id]/chapters/[chapterId]/sections/[sectionId]/page.tsx
front/src/app/dashboard/courses/[id]/chapters/[chapterId]/sections/create/page.tsx
front/src/app/dashboard/courses/[id]/chapters/[chapterId]/sections/page.tsx
front/src/app/dashboard/courses/[id]/chapters/page.tsx
front/src/app/dashboard/courses/[id]/page.tsx
front/src/app/dashboard/courses/create/page.tsx
front/src/app/dashboard/courses/page.tsx
front/src/app/dashboard/favorites/page.tsx
front/src/app/dashboard/institutions/[id]/page.tsx
front/src/app/dashboard/institutions/page.tsx
front/src/app/dashboard/layout.tsx
front/src/app/dashboard/media/[id]/layout.tsx
front/src/app/dashboard/media/[id]/page.tsx
front/src/app/dashboard/media/layout.tsx
front/src/app/dashboard/media/page.tsx
front/src/app/dashboard/page.tsx
front/src/app/dashboard/permissions/page.tsx
front/src/app/dashboard/profile/page.tsx
front/src/app/dashboard/question-groups/[id]/add-questions/page.tsx
front/src/app/dashboard/question-groups/[id]/page.tsx
front/src/app/dashboard/question-groups/create/page.tsx
front/src/app/dashboard/question-groups/page.tsx
front/src/app/dashboard/question-tags/create/page.tsx
front/src/app/dashboard/questions/[id]/page.tsx
front/src/app/dashboard/questions/create/page.tsx
front/src/app/dashboard/questions/page.tsx
front/src/app/dashboard/reviews/[id]/course/page.tsx
front/src/app/dashboard/reviews/[id]/preview/page.tsx
front/src/app/dashboard/reviews/page.tsx
front/src/app/dashboard/roles/page.tsx
front/src/app/dashboard/storage/layout.tsx
front/src/app/dashboard/storage/page.tsx
front/src/app/dashboard/users/page.tsx
front/src/app/globals.css
front/src/app/institution/apply/page.tsx
front/src/app/institution/page.tsx
front/src/app/institution/register/page.tsx
front/src/app/institution/status/page.tsx
front/src/app/layout.tsx
front/src/app/page.tsx
front/src/app/preview/[token]/layout.tsx
front/src/app/preview/[token]/page.tsx
front/src/components/dashboard/course-metadata/category-management.tsx
front/src/components/dashboard/course-metadata/tag-management.tsx
front/src/components/dashboard/courses/chapter-list.tsx
front/src/components/dashboard/courses/chapter-sections.tsx
front/src/components/dashboard/courses/course-form.tsx
front/src/components/dashboard/courses/CoursePublishBadge.tsx
front/src/components/dashboard/courses/CourseStatusBadge.tsx
front/src/components/dashboard/header.tsx
front/src/components/dashboard/permissions/delete-confirmation-dialog.tsx
front/src/components/dashboard/permissions/permission-form.tsx
front/src/components/dashboard/reviews/course-preview-dialog.tsx
front/src/components/dashboard/reviews/review-content-player.tsx
front/src/components/dashboard/roles/delete-confirmation-dialog.tsx
front/src/components/dashboard/roles/permission-dialog.tsx
front/src/components/dashboard/roles/role-form.tsx
front/src/components/dashboard/sections/add-resource-dialog.tsx
front/src/components/dashboard/sections/section-dialog.tsx
front/src/components/dashboard/sections/section-drawer.tsx
front/src/components/dashboard/sections/section-edit-drawer.tsx
front/src/components/dashboard/sections/section-form.tsx
front/src/components/dashboard/sections/section-resource-list.tsx
front/src/components/dashboard/sidebar.tsx
front/src/components/dashboard/users/delete-confirmation-dialog.tsx
front/src/components/dashboard/users/role-assignment-dialog.tsx
front/src/components/dashboard/users/user-form.tsx
front/src/components/dashboard/users/user-list.tsx
front/src/components/preview/course-content-player.tsx
front/src/components/providers/theme-provider.tsx
front/src/components/question/index.ts
front/src/components/question/QuestionDetailForm.tsx
front/src/components/question/QuestionGroupList.tsx
front/src/components/question/QuestionImportModal.tsx
front/src/components/question/QuestionList.tsx
front/src/components/question/QuestionTagList.tsx
front/src/components/ui/accordion.tsx
front/src/components/ui/alert-dialog.tsx
front/src/components/ui/alert.tsx
front/src/components/ui/avatar.tsx
front/src/components/ui/badge.tsx
front/src/components/ui/breadcrumb.tsx
front/src/components/ui/button.tsx
front/src/components/ui/captcha.tsx
front/src/components/ui/card.tsx
front/src/components/ui/checkbox.tsx
front/src/components/ui/command.tsx
front/src/components/ui/dialog.tsx
front/src/components/ui/dropdown-menu.tsx
front/src/components/ui/empty.tsx
front/src/components/ui/form.tsx
front/src/components/ui/input.tsx
front/src/components/ui/label.tsx
front/src/components/ui/multi-select.tsx
front/src/components/ui/pagination.tsx
front/src/components/ui/popover.tsx
front/src/components/ui/progress.tsx
front/src/components/ui/radio-group.tsx
front/src/components/ui/review-pagination.tsx
front/src/components/ui/scroll-area.tsx
front/src/components/ui/select.tsx
front/src/components/ui/separator.tsx
front/src/components/ui/sheet.tsx
front/src/components/ui/skeleton.tsx
front/src/components/ui/slider.tsx
front/src/components/ui/sonner.tsx
front/src/components/ui/switch.tsx
front/src/components/ui/table.tsx
front/src/components/ui/tabs.tsx
front/src/components/ui/textarea.tsx
front/src/components/ui/tooltip.tsx
front/src/components/ui/use-toast.ts
front/src/hooks/use-debounce.ts
front/src/hooks/useDebounce.ts
front/src/hooks/useMediaUpload.ts
front/src/lib/http.ts
front/src/lib/request.ts
front/src/lib/utils.ts
front/src/middleware.ts
front/src/services/api.ts
front/src/services/auth.ts
front/src/services/category.ts
front/src/services/chapter.ts
front/src/services/course-service.ts
front/src/services/course.ts
front/src/services/favorite-service.ts
front/src/services/index.ts
front/src/services/institution.ts
front/src/services/institutionAuth.ts
front/src/services/institutionMember.ts
front/src/services/media-service.ts
front/src/services/permission.ts
front/src/services/question-group.ts
front/src/services/question-helper.ts
front/src/services/question-import.ts
front/src/services/question-tag.ts
front/src/services/question.ts
front/src/services/review-service.ts
front/src/services/reviewerInstitution.ts
front/src/services/role.ts
front/src/services/section.ts
front/src/services/storage-service.ts
front/src/services/tag.ts
front/src/services/user.ts
front/src/stores/auth-store.ts
front/src/stores/cache-store.ts
front/src/stores/course-store.ts
front/src/stores/permission-store.ts
front/src/stores/question-store.ts
front/src/stores/role-store.ts
front/src/stores/ui-store.ts
front/src/stores/user-management-store.ts
front/src/types/api.ts
front/src/types/auth.ts
front/src/types/course.ts
front/src/types/institution.ts
front/src/types/permission.ts
front/src/types/question.ts
front/src/types/review.ts
front/src/types/role.ts
front/src/types/user.ts
front/src/utils/cache.ts
front/src/utils/date.ts
front/src/utils/navigationUtils.ts
front/src/utils/questionUtils.ts
front/tsconfig.json
mvnw
mvnw.cmd
pom.xml
src/main/java/com/zhangziqi/online_course_mine/config/AlipayConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/AsyncConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/CacheConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/JpaAuditingConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/KaptchaConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/MinioConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/OpenApiConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/redis/RedisConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/S3Config.java
src/main/java/com/zhangziqi/online_course_mine/config/security/JwtConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/security/SecurityConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/StorageConfigProperties.java
src/main/java/com/zhangziqi/online_course_mine/constant/OrderConstants.java
src/main/java/com/zhangziqi/online_course_mine/controller/AlipayTestController.java
src/main/java/com/zhangziqi/online_course_mine/controller/AuthController.java
src/main/java/com/zhangziqi/online_course_mine/controller/CategoryController.java
src/main/java/com/zhangziqi/online_course_mine/controller/ChapterController.java
src/main/java/com/zhangziqi/online_course_mine/controller/CourseController.java
src/main/java/com/zhangziqi/online_course_mine/controller/CourseReviewController.java
src/main/java/com/zhangziqi/online_course_mine/controller/InstitutionAuthController.java
src/main/java/com/zhangziqi/online_course_mine/controller/InstitutionController.java
src/main/java/com/zhangziqi/online_course_mine/controller/InstitutionMemberController.java
src/main/java/com/zhangziqi/online_course_mine/controller/MediaController.java
src/main/java/com/zhangziqi/online_course_mine/controller/OrderController.java
src/main/java/com/zhangziqi/online_course_mine/controller/PermissionController.java
src/main/java/com/zhangziqi/online_course_mine/controller/PreviewResourceController.java
src/main/java/com/zhangziqi/online_course_mine/controller/QuestionController.java
src/main/java/com/zhangziqi/online_course_mine/controller/QuestionGroupController.java
src/main/java/com/zhangziqi/online_course_mine/controller/QuestionImportController.java
src/main/java/com/zhangziqi/online_course_mine/controller/QuestionTagController.java
src/main/java/com/zhangziqi/online_course_mine/controller/ReviewerCourseController.java
src/main/java/com/zhangziqi/online_course_mine/controller/ReviewerInstitutionController.java
src/main/java/com/zhangziqi/online_course_mine/controller/RoleController.java
src/main/java/com/zhangziqi/online_course_mine/controller/SectionController.java
src/main/java/com/zhangziqi/online_course_mine/controller/StorageQuotaController.java
src/main/java/com/zhangziqi/online_course_mine/controller/TagController.java
src/main/java/com/zhangziqi/online_course_mine/controller/UserController.java
src/main/java/com/zhangziqi/online_course_mine/controller/UserFavoriteController.java
src/main/java/com/zhangziqi/online_course_mine/excel/QuestionExcelListener.java
src/main/java/com/zhangziqi/online_course_mine/exception/BusinessException.java
src/main/java/com/zhangziqi/online_course_mine/exception/GlobalExceptionHandler.java
src/main/java/com/zhangziqi/online_course_mine/exception/ResourceNotFoundException.java
src/main/java/com/zhangziqi/online_course_mine/exception/ServiceException.java
src/main/java/com/zhangziqi/online_course_mine/model/converter/InstitutionApplicationConverter.java
src/main/java/com/zhangziqi/online_course_mine/model/converter/InstitutionConverter.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/CategoryDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/ChangePasswordDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/chapter/ChapterCreateDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/chapter/ChapterOrderDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/course/CourseCreateDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/course/CourseReviewDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/course/CourseSearchDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/CourseReviewDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/EmailUpdateDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/EmailVerificationDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/InstitutionApplicationQueryDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/InstitutionApplyDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/InstitutionRegisterDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/JwtTokenDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/LoginDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/media/CompleteUploadDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/media/MediaUploadInitDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/media/PresignedUrlInfo.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/media/UploadInitiationVO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/media/UploadStatusInfo.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/order/OrderCreateDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/order/OrderRefundDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/PermissionDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/QuestionDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/QuestionGroupDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/QuestionGroupItemDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/QuestionOptionDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/QuestionTagDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/RefreshTokenDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/RegisterDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/review/ReviewCreateDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/review/ReviewQueryDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/RoleDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/section/SectionCreateDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/section/SectionOrderDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/section/SectionQuestionGroupConfigDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/TagDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/UserDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/UserProfileDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/UserQueryDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/BaseEntity.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Category.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Chapter.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Course.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/CourseReview.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Institution.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/InstitutionApplication.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Media.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Order.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Permission.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Question.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/QuestionGroup.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/QuestionGroupItem.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/QuestionOption.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/QuestionTag.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/QuestionTagMapping.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Role.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Section.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/StorageQuota.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Tag.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/User.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/UserCourse.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/UserFavorite.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/ChapterAccessType.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/ContentType.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/CoursePaymentType.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/CourseStatus.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/CourseVersion.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/MediaStatus.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/MediaType.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/OrderStatus.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/QuestionType.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/QuotaType.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/ResourceType.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/RoleEnum.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/UserCourseStatus.java
src/main/java/com/zhangziqi/online_course_mine/model/excel/QuestionExcelData.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/CategoryTreeVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/CategoryVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/ChapterVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/CourseReviewSectionVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/CourseStructureVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/CourseVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/InstitutionApplicationVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/InstitutionVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/MediaVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/OrderVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/PermissionVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/PreviewUrlVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/QuestionGroupItemVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/QuestionGroupVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/QuestionImportResultVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/QuestionOptionVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/QuestionTagVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/QuestionVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/QuotaInfoVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/Result.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/ReviewStatsVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/ReviewVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/RoleVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/SectionVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/StorageQuotaVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/TagVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/UserCourseVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/UserFavoriteVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/UserVO.java
src/main/java/com/zhangziqi/online_course_mine/OnlineCourseMineApplication.java
src/main/java/com/zhangziqi/online_course_mine/repository/CategoryRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/ChapterRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/CourseRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/CourseReviewRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/InstitutionApplicationRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/InstitutionRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/MediaRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/OrderRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/PermissionRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/QuestionGroupItemRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/QuestionGroupRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/QuestionOptionRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/QuestionRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/QuestionTagMappingRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/QuestionTagRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/RoleRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/SectionRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/StorageQuotaRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/TagRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/UserCourseRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/UserFavoriteRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/UserRepository.java
src/main/java/com/zhangziqi/online_course_mine/security/jwt/JwtAuthenticationFilter.java
src/main/java/com/zhangziqi/online_course_mine/security/jwt/JwtTokenProvider.java
src/main/java/com/zhangziqi/online_course_mine/security/jwt/TokenBlacklistService.java
src/main/java/com/zhangziqi/online_course_mine/security/SecurityUtil.java
src/main/java/com/zhangziqi/online_course_mine/security/UserDetailsServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/AuthService.java
src/main/java/com/zhangziqi/online_course_mine/service/CaptchaService.java
src/main/java/com/zhangziqi/online_course_mine/service/CategoryService.java
src/main/java/com/zhangziqi/online_course_mine/service/ChapterService.java
src/main/java/com/zhangziqi/online_course_mine/service/CourseReviewService.java
src/main/java/com/zhangziqi/online_course_mine/service/CourseService.java
src/main/java/com/zhangziqi/online_course_mine/service/EmailService.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/AuthServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/CaptchaServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/CategoryServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/ChapterServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/CourseReviewServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/CourseServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/EmailServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/InstitutionAuthServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/InstitutionServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/MediaServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/MinioServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/OrderServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/PermissionServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/QuestionGroupServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/QuestionImportServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/QuestionServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/QuestionTagServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/RoleServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/S3MultipartUploadManager.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/SectionServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/StorageQuotaServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/TagServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/UploadStatusService.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/UserCourseServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/UserFavoriteServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/UserServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/InstitutionAuthService.java
src/main/java/com/zhangziqi/online_course_mine/service/InstitutionService.java
src/main/java/com/zhangziqi/online_course_mine/service/MediaService.java
src/main/java/com/zhangziqi/online_course_mine/service/MinioService.java
src/main/java/com/zhangziqi/online_course_mine/service/OrderService.java
src/main/java/com/zhangziqi/online_course_mine/service/PermissionService.java
src/main/java/com/zhangziqi/online_course_mine/service/QuestionGroupService.java
src/main/java/com/zhangziqi/online_course_mine/service/QuestionImportService.java
src/main/java/com/zhangziqi/online_course_mine/service/QuestionService.java
src/main/java/com/zhangziqi/online_course_mine/service/QuestionTagService.java
src/main/java/com/zhangziqi/online_course_mine/service/RoleService.java
src/main/java/com/zhangziqi/online_course_mine/service/SectionService.java
src/main/java/com/zhangziqi/online_course_mine/service/StorageQuotaService.java
src/main/java/com/zhangziqi/online_course_mine/service/TagService.java
src/main/java/com/zhangziqi/online_course_mine/service/UserCourseService.java
src/main/java/com/zhangziqi/online_course_mine/service/UserFavoriteService.java
src/main/java/com/zhangziqi/online_course_mine/service/UserService.java
src/main/java/com/zhangziqi/online_course_mine/util/DataInitializer.java
src/main/resources/application-dev.yml
src/main/resources/application-test.yml
src/main/resources/application.yml
src/main/resources/templates/email/application-approved.html
src/main/resources/templates/email/application-confirmation.html
src/main/resources/templates/email/application-rejected.html
src/main/resources/templates/email/email-update-code.html
src/main/resources/templates/email/verification-code.html
src/test/java/com/zhangziqi/online_course_mine/config/TestSecurityConfig.java
src/test/java/com/zhangziqi/online_course_mine/integration/AuthControllerIntegrationTest.java
src/test/java/com/zhangziqi/online_course_mine/integration/MinioIntegrationTest.java
src/test/java/com/zhangziqi/online_course_mine/integration/PermissionControllerIntegrationTest.java
src/test/java/com/zhangziqi/online_course_mine/integration/RoleControllerIntegrationTest.java
src/test/java/com/zhangziqi/online_course_mine/integration/S3IntegrationTest.java
src/test/java/com/zhangziqi/online_course_mine/OnlineCourseMineApplicationTests.java
src/test/java/com/zhangziqi/online_course_mine/security/jwt/JwtTokenProviderTest.java
src/test/java/com/zhangziqi/online_course_mine/security/TestUserDetailsService.java
src/test/java/com/zhangziqi/online_course_mine/service/AuthServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/CaptchaServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/ChapterServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/CourseServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/EmailServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/InstitutionAuthServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/InstitutionServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/MediaServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/MinioServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/OrderServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/PermissionServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/QuestionGroupServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/QuestionImportServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/QuestionServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/QuestionTagServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/RoleServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/SectionServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/StorageQuotaServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/UserCourseServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/UserServiceTest.java
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path=".gitignore">
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="docs.md">
--- Repository Documentation ---

## Documentation for Online Course Platform Repository

This document provides a comprehensive overview of the Online Course Platform repository.

### Repository Summary

This repository contains a packed representation of the entire codebase. It is designed for AI systems to facilitate:

- Analysis
- Code review
- Automated processes

The repository is structured as follows:

1. Summary section (this document)
2. Repository information
3. Directory structure
4. Repository files with file paths and contents

This file is read-only. Modify original repository files, not this packed version. Use file paths to differentiate files. Handle sensitive information securely. Some files may be excluded due to `.gitignore` rules. Binary files are not included, but their paths are listed in the directory structure.

### Directory Structure

The repository directory structure is as follows:

```markdown
.cursorrules
.gitattributes
.gitignore
docs/
front/
src/main/java/com/zhangziqi/online_course_mine/
src/main/resources/
src/test/java/com/zhangziqi/online_course_mine/
src/main/resources/application-dev.yml
src/main/resources/application-test.yml
src/main/resources/application.yml
mvnw
mvnw.cmd
pom.xml
```

### File Documentation

#### `.cursorrules`

Provides instructions for using AI cursor tools within the repository. Includes commands for:

- Web search
- Repository context queries
- Documentation generation
- GitHub information access
- Browser automation

#### `.gitattributes`

Defines attributes for files in the repository, such as line endings.

#### `.gitignore`

Specifies intentionally untracked files that Git should ignore. Includes common IDE and build artifacts.

#### `docs/`

Contains documentation files in markdown format, including:

- 测试说明.md (Testing instructions)
- 当前进度描述.md (Current progress description)
- 课程流程设计.md (Course flow design)
- 实现进度.md (Implementation progress)
- 系统设计说明.md (System design documentation)
- 下一阶段.md (Next phase plan)
- 下一阶段开发需求.md (Next phase development requirements)
- 项目结构说明.md (Project structure documentation)
- 项目配置说明.md (Project configuration documentation)
- api.md / API接口说明.md (API documentation)
- fornt/开发进度.md / front/开发进度.md (Frontend development progress)
- fornt/前端开发规划.md (Frontend development plan)
- fornt/前端说明.md (Frontend documentation)

#### `front/`

Contains the frontend application code. Key files and directories include:

- `.cursorrules`, `.gitignore`, `components.json`, `eslint.config.mjs`, `next.config.ts`, `package.json`, `postcss.config.mjs`, `README.md`, `tsconfig.json` : Configuration and setup files for the frontend application.
- `public/`: Static assets such as images and icons.
- `src/app/`: Next.js application routing structure.
  - `(auth)/`: Authentication related pages (login, register, institution).
  - `(dashboard)/`: Dashboard pages (course management, user management, settings, etc.).
  - `preview/`: Course preview pages.
  - `institution/`: Institution specific pages.
  - `api/`: Optional API routes (BFF).
  - `layout.tsx`, `page.tsx`, `global.css`: Core layout and styling.
- `src/components/`: React components.
  - `ui/`: Reusable UI components (using Shadcn UI).
  - `dashboard/`: Dashboard specific components.
  - `preview/`: Preview specific components.
  - `providers/`: Theme and other providers.
  - `question/`: Question related components.
  - `course/`: Course related components.
- `src/hooks/`: Custom React hooks.
  - `useDebounce.ts`: Hook for debouncing function calls.
  - `useMediaUpload.ts`: Hook for media upload functionality.
- `src/lib/`: Utility libraries.
  - `utils.ts`: General utility functions.
  - `http.ts`, `request.ts`: HTTP request utilities.
- `src/services/`: API service clients.
  - `auth.ts`: Authentication service API calls.
  - `course-service.ts`, `course.ts`: Course service API calls.
  - `media-service.ts`: Media service API calls.
  - `category.ts`: Category service API calls.
  - `tag.ts`: Tag service API calls.
  - Other service files for different entities.
- `src/stores/`: Zustand state management stores.
  - `auth-store.ts`: Authentication state management.
  - `ui-store.ts`: UI related state management (theme, sidebar).
  - `course-store.ts`: Course related state management.
  - Other store files for different entities.
- `src/types/`: TypeScript type definitions.
  - `api.ts`: API response and request types.
  - `auth.ts`: Authentication related types.
  - `course.ts`: Course related types.
  - Other type definition files for different entities.
- `src/middleware.ts`: Next.js middleware for route protection.

#### `src/main/java/com/zhangziqi/online_course_mine/`

Contains the backend Java application code. Key packages include:

- `config/`: Configuration classes for Spring Boot application, security, Redis, MinIO, S3, OpenAPI, and asynchronous tasks.
- `constant/`: Constant definitions.
- `controller/`: REST controllers for handling API requests.
  - `AuthController`: Authentication endpoints (login, register, etc.).
  - `UserController`: User management endpoints.
  - `RoleController`: Role management endpoints.
  - `PermissionController`: Permission management endpoints.
  - `InstitutionController`: Institution application endpoints.
  - `InstitutionAuthController`: Institution authentication endpoints.
  - `InstitutionMemberController`: Institution member endpoints.
  - `ReviewerInstitutionController`: Institution review endpoints.
  - `StorageQuotaController`: Storage quota management endpoints.
  - `MediaController`: Media management endpoints.
  - `QuestionController`: Question management endpoints.
  - `QuestionGroupController`: Question group management endpoints.
  - `QuestionTagController`: Question tag management endpoints.
  - `CourseController`: Course management endpoints.
  - `ChapterController`: Chapter management endpoints.
  - `SectionController`: Section management endpoints.
- `exception/`: Custom exception classes and global exception handler.
- `model/`: Data models (Entities, DTOs, and VOs).
  - `entity/`: JPA entities representing database tables.
  - `dto/`: Data Transfer Objects for API requests and responses.
  - `vo/`: View Objects for API responses to frontend.
  - `enums/`: Enumerations for different statuses, types, and roles.
- `repository/`: Spring Data JPA repositories for database interaction.
- `security/`: Security related components, including JWT implementation.
  - `jwt/`: JWT token provider, filter, and blacklist service.
- `service/`: Service layer containing business logic.
  - `impl/`: Implementations of service interfaces.
- `excel/`: Components related to Excel data handling for question import.
- `util/`: Utility classes and helper functions.

#### `src/main/resources/`

Contains application resources. Key files and directories include:

- `application.yml`, `application-dev.yml`, `application-test.yml`: Spring Boot configuration files for different environments.
- `db/migration/`: Database migration scripts (Flyway).
- `templates/`: Thymeleaf templates for email and payment related views.
- `static/`: Static resources.

#### `src/test/java/com/zhangziqi/online_course_mine/`

Contains test classes for different layers of the application. Key packages include:

- `config/`: Test configuration classes.
- `controller/`: Controller tests.
- `integration/`: Integration tests.
- `repository/`: Repository tests.
- `security/jwt/`: JWT security component tests.
- `service/`: Service layer tests.

#### `mvnw`, `mvnw.cmd`, `pom.xml`

Maven wrapper scripts and project configuration file for building the backend application.

### Usage Guidelines

- Treat this file as read-only.
- Make changes in the original repository files.
- Use file paths to distinguish between files.
- Handle sensitive information with care.

### Notes

- Some files may be excluded based on `.gitignore` and Repomix configuration.
- Binary files are excluded from the packed representation, but paths are in the directory structure.

### Additional Information

No additional information is provided in the document.

--- End of Documentation ---
</file>

<file path="docs/测试说明.md">
# 测试说明文档

## 测试策略

本项目采用分层测试策略，确保代码质量和功能稳定性。测试分为三个主要层次：单元测试、控制器测试和集成测试。

### 测试环境

- 使用H2内存数据库进行测试
- 所有测试类添加`@ActiveProfiles("test")`注解，确保使用测试环境配置
- 测试配置文件位于`src/test/resources/application-test.yml`
- 启用Bean覆盖：`spring.main.allow-bean-definition-overriding=true`

## 测试分层架构

### 1. 单元测试（Unit Tests）

**目标**：测试单个组件的功能，完全隔离于其他组件。

**配置**：
- 使用`@ExtendWith(MockitoExtension.class)`
- 通过`@Mock`模拟所有依赖
- 通过`@InjectMocks`注入被测试组件
- 不加载Spring上下文，运行效率最高

**位置**：`src/test/java/com/zhangziqi/online_course_mine/service`

**示例**：
```java
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test")
public class CaptchaServiceTest {
    @Mock
    private DefaultKaptcha captchaProducer;
    
    @InjectMocks
    private CaptchaServiceImpl captchaService;
    
    // 测试方法...
}
```

### 2. 控制器测试（Controller Tests）

**目标**：测试API的参数验证、请求处理和响应格式。

**配置**：
- 使用`@SpringBootTest`加载应用上下文
- 使用`@AutoConfigureMockMvc(addFilters = false)`禁用安全过滤器链
- 使用`@MockBean`模拟服务层组件

**位置**：`src/test/java/com/zhangziqi/online_course_mine/controller`

**示例**：
```java
@SpringBootTest
@AutoConfigureMockMvc(addFilters = false)
@ActiveProfiles("test")
public class AuthControllerTest {
    @Autowired
    private MockMvc mockMvc;
    
    @MockBean
    private AuthService authService;
    
    // 测试方法...
}
```

### 3. 集成测试（Integration Tests）

**目标**：测试多个组件协同工作，包括安全过滤器和服务层。

**配置**：
- 使用`@SpringBootTest`加载完整应用上下文
- 使用`@Import(TestSecurityConfig.class)`导入测试安全配置
- 结合真实组件和必要的模拟组件

**位置**：`src/test/java/com/zhangziqi/online_course_mine/integration`

**示例**：
```java
@SpringBootTest(properties = {"spring.main.allow-bean-definition-overriding=true"})
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Import(TestSecurityConfig.class)
public class AuthControllerIntegrationTest {
    @Autowired
    private MockMvc mockMvc;
    
    @MockBean
    private AuthService authService;
    
    // 测试方法...
}
```

### 4. 文件存储测试

**目标**：测试MinIO和S3 API的功能，包括文件上传、删除、URL生成等。

**配置**：
- 使用`@SpringBootTest`加载应用上下文
- 使用`@EnabledIfEnvironmentVariable`条件注解控制测试执行
- 测试结束后清理测试文件和存储桶

### 5. 存储配额测试

**目标**：测试机构存储配额管理功能，包括配额检查、更新和查询。

**测试类**：
```java
@ExtendWith(MockitoExtension.class)
class StorageQuotaServiceTest {
    @Mock
    private StorageQuotaRepository storageQuotaRepository;
    
    @Mock
    private InstitutionRepository institutionRepository;
    
    @InjectMocks
    private StorageQuotaServiceImpl storageQuotaService;
    
    // 测试方法...
}
```

**测试场景**：
1. **配额检查测试**
   - `hasEnoughQuota_WhenInstitutionNotExists_ThrowsException`
   - `hasEnoughQuota_WhenNotEnoughSpace_ReturnsFalse`
   - `hasEnoughQuota_WhenEnoughSpace_ReturnsTrue`

2. **配额更新测试**
   - `updateUsedQuota_WhenInstitutionNotExists_ThrowsException`
   - `updateUsedQuota_WhenQuotaExists_UpdatesSuccessfully`
   - `updateUsedQuota_WhenQuotaNotExists_InitializesQuota`

3. **配额查询测试**
   - `getQuotaInfo_WhenInstitutionNotExists_ThrowsException`
   - `getQuotaInfo_WhenQuotaExists_ReturnsQuotaInfo`
   - `getAllQuotas_WhenInstitutionNotExists_ThrowsException`
   - `getAllQuotas_WhenQuotasExist_ReturnsAllQuotas`

4. **配额设置测试**
   - `setQuota_WhenInstitutionNotExists_ThrowsException`
   - `setQuota_WhenSettingNewQuota_CreatesSuccessfully`

**测试要点**：
- 验证配额计算的准确性
- 测试配额更新时的并发处理
- 验证配额过期逻辑
- 测试默认配额创建
- 确保总配额同步更新

**位置**：`src/test/java/com/zhangziqi/online_course_mine/service/StorageQuotaServiceTest.java`

### 6. 媒体资源管理测试

**目标**：测试媒体资源管理功能，包括分片上传、状态追踪和访问控制。

**测试类**：
```java
@ExtendWith(MockitoExtension.class)
public class MediaServiceTest {
    @Mock
    private MediaRepository mediaRepository;
    
    @Mock
    private InstitutionRepository institutionRepository;
    
    @Mock
    private StorageQuotaService storageQuotaService;
    
    @Mock
    private S3MultipartUploadManager s3UploadManager;
    
    @Mock
    private UploadStatusService uploadStatusService;
    
    @InjectMocks
    private MediaServiceImpl mediaService;
    
    // 测试方法...
}
```

**测试场景**：
1. **上传初始化测试**
   - `testInitiateUpload` - 测试初始化分片上传
   - `testInitiateUploadWithInvalidFileType` - 测试非法文件类型处理
   - `testInitiateUploadWithoutEnoughQuota` - 测试配额不足情况

2. **上传状态测试**
   - `testGetUploadStatus` - 测试获取上传状态
   - `testNotifyPartCompleted` - 测试通知分片完成
   - `testCompleteUpload` - 测试完成上传流程

3. **媒体访问测试**
   - `testGetMediaAccessUrl` - 测试获取媒体访问URL
   - `testGetMediaList` - 测试获取媒体列表
   - `testGetMediaInfo` - 测试获取媒体信息

4. **断点续传测试**
   - `testResumeUpload` - 测试恢复上传功能
   - `testResumeUploadWithCompletedStatus` - 测试已完成上传的处理

**测试要点**：
- 验证配额检查的正确集成
- 测试分片上传的完整流程
- 测试异常情况（类型错误、配额不足等）
- 验证断点续传功能

**位置**：`src/test/java/com/zhangziqi/online_course_mine/service/MediaServiceTest.java`

### 7. S3分片上传管理测试

**目标**：测试与S3存储服务的交互，特别是分片上传功能。

**测试类**：
```java
@SpringBootTest
@EnabledIfEnvironmentVariable(named = "S3_ENABLED", matches = "true")
class S3MultipartUploadManagerTest {
    @Autowired
    private S3MultipartUploadManager uploadManager;
    
    // 测试方法...
}
```

**测试场景**：
1. **上传初始化测试**
   - `testInitiateMultipartUpload` - 测试初始化分片上传
   - `testGeneratePresignedUrlForPart` - 测试生成分片上传URL
   - `testBatchGeneratePresignedUrls` - 测试批量生成上传URL

2. **分片管理测试**
   - `testListParts` - 测试列出已上传分片
   - `testCompleteMultipartUpload` - 测试完成分片上传
   - `testAbortMultipartUpload` - 测试取消上传

3. **访问URL测试**
   - `testGeneratePresignedGetUrl` - 测试生成临时访问URL

**测试要点**：
- 验证S3 API的正确集成
- 测试分片上传的各个阶段
- 确保URL生成的正确性
- 测试完成后清理测试资源

**位置**：`src/test/java/com/zhangziqi/online_course_mine/service/S3MultipartUploadManagerTest.java`

### 8. 上传状态服务测试

**目标**：测试上传状态追踪服务，验证Redis存储和状态管理。

**测试类**：
```java
@ExtendWith(MockitoExtension.class)
class UploadStatusServiceTest {
    @Mock
    private RedisTemplate<String, Object> redisTemplate;
    
    @Mock
    private ValueOperations<String, Object> valueOperations;
    
    @Mock
    private ObjectMapper objectMapper;
    
    @InjectMocks
    private UploadStatusService uploadStatusService;
    
    // 测试方法...
}
```

**测试场景**：
1. **状态存储测试**
   - `testSaveUploadStatus` - 测试保存上传状态
   - `testGetUploadStatus` - 测试获取上传状态
   - `testDeleteUploadStatus` - 测试删除上传状态

2. **状态更新测试**
   - `testUpdatePartInfo` - 测试更新分片信息
   - `testUpdateStatus` - 测试更新上传状态

**测试要点**：
- 验证Redis交互的正确性
- 测试状态更新和转换
- 验证键过期设置

**位置**：`src/test/java/com/zhangziqi/online_course_mine/service/UploadStatusServiceTest.java`

## 测试配置类

项目提供了专用的测试配置类`TestSecurityConfig`，用于集成测试：

```java
@TestConfiguration
@EnableWebSecurity
@Profile("test")
public class TestSecurityConfig {
    // 提供安全相关的模拟组件...
}
```

## 测试覆盖范围

### 已完成测试

- 认证控制器（AuthController）
  - 单元测试：`AuthControllerTest`
  - 集成测试：`AuthControllerIntegrationTest`
- 用户服务（UserService）
- 认证服务（AuthService）
- 验证码服务（CaptchaService）
- 用户自身管理功能
  - 获取当前用户信息
  - 更新个人资料
  - 修改密码
  - 更新头像
  - 更新邮箱
- 权限管理功能
  - 单元测试：`PermissionControllerTest`、`PermissionServiceTest`
  - 集成测试：`PermissionControllerIntegrationTest`
- 机构管理功能
  - 单元测试：`InstitutionServiceTest`、`InstitutionAuthServiceTest`
  - 控制器测试：`InstitutionControllerTest`、`ReviewerInstitutionControllerTest`
  - 邮件通知测试：`EmailServiceTest`
- 存储配额管理功能
  - 单元测试：`StorageQuotaServiceTest`
  - 配额检查、更新和查询测试
  - 配额设置测试
  
- 媒体资源管理功能
  - 单元测试：`MediaServiceTest`、`S3MultipartUploadManagerTest`、`UploadStatusServiceTest`
  - 分片上传流程测试
  - 断点续传功能测试
  - 配额集成测试
  - 媒体访问控制测试

### 用户自身管理测试

用户自身管理相关功能的测试分为两部分：

1. **服务层测试 (UserServiceTest)**:
   - `getCurrentUserShouldReturnUserInfoWhenUserExists` - 测试获取当前用户信息
   - `updateCurrentUserProfileShouldUpdateUserInfoWhenValid` - 测试更新个人资料
   - `updateCurrentUserProfileShouldThrowExceptionWhenPhoneExists` - 测试手机号冲突检查
   - `changePasswordShouldSucceedWhenOldPasswordCorrect` - 测试成功修改密码
   - `changePasswordShouldThrowExceptionWhenOldPasswordIncorrect` - 测试旧密码错误
   - `changePasswordShouldThrowExceptionWhenNewPasswordSameAsOld` - 测试新旧密码相同
   - `updateAvatarShouldUpdateAvatarUrlWhenUserExists` - 测试更新头像
   - `updateEmailShouldUpdateEmailWhenValid` - 测试更新邮箱
   - `updateEmailShouldThrowExceptionWhenPasswordIncorrect` - 测试密码验证失败
   - `updateEmailShouldThrowExceptionWhenEmailExists` - 测试邮箱已存在
   - `updateEmailShouldThrowExceptionWhenEmailCodeInvalid` - 测试验证码无效
   - `getBasicUserInfoShouldReturnBasicInfoWhenUserExists` - 测试获取基本信息

2. **控制器测试 (UserControllerTest)**:
   - `testGetCurrentUser` - 测试获取当前用户API
   - `testUpdateCurrentUser` - 测试更新个人信息API
   - `testChangePassword` - 测试修改密码API
   - `testChangePasswordWithMismatchConfirmation` - 测试密码确认不匹配
   - `testUpdateEmail` - 测试更新邮箱API
   - `testUploadAvatar` - 测试上传头像API
   - `testGetBasicUserInfo` - 测试获取用户基本信息API

3. **邮箱更新验证码测试**:
   - `AuthControllerTest.testSendEmailUpdateCode` - 测试发送邮箱更新验证码API
   - `AuthControllerTest.testSendEmailUpdateCodeWithInvalidCaptcha` - 测试验证码无效场景
   - `EmailServiceTest.testSendEmailUpdateCode` - 测试邮箱更新验证码发送服务
   - `AuthControllerIntegrationTest.testSendEmailUpdateCode` - 集成测试邮箱更新验证码流程
   - `AuthControllerIntegrationTest.testSendEmailUpdateCodeWithInvalidCaptcha` - 集成测试无效验证码

### 权限管理测试

权限管理相关功能的测试也分为多个部分：

1. **服务层测试 (PermissionServiceTest)**:
   - `getPermissionListShouldReturnAllPermissions` - 测试获取所有权限
   - `getPermissionByIdShouldReturnPermissionWhenExists` - 测试根据ID获取权限
   - `getPermissionByIdShouldThrowExceptionWhenNotExists` - 测试权限不存在异常
   - `createPermissionShouldReturnCreatedPermission` - 测试创建权限
   - `createPermissionShouldThrowExceptionWhenCodeExists` - 测试权限代码已存在异常
   - `updatePermissionShouldReturnUpdatedPermission` - 测试更新权限
   - `updatePermissionShouldThrowExceptionWhenNotExists` - 测试更新不存在权限异常
   - `updatePermissionShouldThrowExceptionWhenCodeExists` - 测试更新权限代码冲突异常
   - `deletePermissionShouldSucceedWhenPermissionExists` - 测试删除权限
   - `deletePermissionShouldThrowExceptionWhenPermissionNotExists` - 测试删除不存在权限异常
   - `deletePermissionShouldThrowExceptionWhenPermissionInUse` - 测试删除被引用权限异常
   - `batchDeletePermissionsShouldSucceedWhenPermissionsExist`

## 媒体上传功能测试

### 测试策略

媒体上传功能的测试采用多层次测试策略：

1. **单元测试**：对关键组件进行隔离测试
   - S3组件测试：使用MinIO作为模拟S3服务
   - 服务层组件测试：使用Mockito模拟依赖

2. **集成测试**：测试组件之间的交互
   - 使用TestContainers启动MinIO容器
   - 验证完整的上传、查询和删除流程

3. **端到端测试**：模拟真实客户端交互
   - 使用WebTestClient测试API端点
   - 验证复杂业务场景

### 关键测试用例

#### MinioService测试

```java
@Test
void testInitiateMultipartUpload() {
    String objectKey = "test/video.mp4";
    String contentType = "video/mp4";
    
    String uploadId = minioService.initiateMultipartUpload(objectKey, contentType);
    
    assertNotNull(uploadId);
    assertFalse(uploadId.isEmpty());
}

@Test
void testGeneratePresignedUrlForPart() {
    String objectKey = "test/video.mp4";
    String contentType = "video/mp4";
    String uploadId = minioService.initiateMultipartUpload(objectKey, contentType);
    
    String url = minioService.generatePresignedUrlForPart(uploadId, objectKey, 1);
    
    assertNotNull(url);
    assertTrue(url.contains(uploadId));
    assertTrue(url.contains("partNumber=1"));
}

@Test
void testCompleteMultipartUpload() throws IOException {
    String objectKey = "test/complete-test.txt";
    String contentType = "text/plain";
    
    // 初始化上传
    String uploadId = minioService.initiateMultipartUpload(objectKey, contentType);
    
    // 上传一个测试分片
    String url = minioService.generatePresignedUrlForPart(uploadId, objectKey, 1);
    HttpClient client = HttpClient.newHttpClient();
    HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create(url))
            .method("PUT", HttpRequest.BodyPublishers.ofString("Test content"))
            .header("Content-Type", contentType)
            .build();
    HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
    String etag = response.headers().firstValue("ETag").orElseThrow();
    
    // 完成上传
    List<PartInfo> parts = List.of(new PartInfo(1, etag));
    CompleteMultipartUploadResponse result = minioService.completeMultipartUpload(uploadId, objectKey, parts);
    
    assertNotNull(result);
    assertEquals(objectKey, result.key());
}

@Test
void testAbortMultipartUpload() {
    String objectKey = "test/abort-test.txt";
    String contentType = "text/plain";
    
    // 初始化上传
    String uploadId = minioService.initiateMultipartUpload(objectKey, contentType);
    
    // 取消上传
    assertDoesNotThrow(() -> minioService.abortMultipartUpload(uploadId, objectKey));
}
```

#### MediaService测试

```java
@Test
void testInitiateUpload() {
    InitiateUploadDTO dto = new InitiateUploadDTO();
    dto.setFilename("test.mp4");
    dto.setContentType("video/mp4");
    dto.setFileSize(10485760L); // 10MB
    dto.setTitle("Test Video");
    
    when(minioService.initiateMultipartUpload(anyString(), anyString()))
            .thenReturn("test-upload-id");
    when(minioService.batchGeneratePresignedUrls(anyString(), anyString(), anyInt(), anyInt()))
            .thenReturn(getMockPresignedUrls(10));
    
    InitiateUploadResponseDTO response = mediaService.initiateUpload(dto, MOCK_USER_ID);
    
    assertNotNull(response);
    assertNotNull(response.getMediaId());
    assertEquals("test-upload-id", response.getUploadId());
    assertFalse(response.getPresignedUrls().isEmpty());
    
    verify(mediaRepository).save(any(Media.class));
}

@Test
void testCompleteUpload() {
    Long mediaId = 1L;
    String uploadId = "test-upload-id";
    
    // 准备测试数据
    Media media = new Media();
    media.setId(mediaId);
    media.setStatus(MediaStatus.UPLOADING);
    media.setUniqueKey("test/media-key");
    
    when(mediaRepository.findById(mediaId)).thenReturn(Optional.of(media));
    when(minioService.completeMultipartUpload(anyString(), anyString(), anyList()))
            .thenReturn(new CompleteMultipartUploadResponse(
                    "test/media-key", "bucket", "ETag", "location"));
    when(minioService.generatePresignedGetUrl(anyString(), anyLong()))
            .thenReturn("https://test-url/media");
    
    // 执行测试
    CompleteUploadDTO dto = new CompleteUploadDTO();
    dto.setUploadId(uploadId);
    dto.setCompletedParts(List.of(
            new CompleteUploadDTO.PartInfo(1, "etag1"),
            new CompleteUploadDTO.PartInfo(2, "etag2")
    ));
    
    MediaResponseDTO response = mediaService.completeUpload(mediaId, dto, MOCK_USER_ID);
    
    // 验证结果
    assertNotNull(response);
    assertEquals(mediaId, response.getId());
    verify(mediaRepository).save(any(Media.class));
}

@Test
void testCancelUpload() {
    Long mediaId = 1L;
    
    // 准备测试数据
    Media media = new Media();
    media.setId(mediaId);
    media.setStatus(MediaStatus.UPLOADING);
    media.setUniqueKey("test/media-key");
    
    when(mediaRepository.findById(mediaId)).thenReturn(Optional.of(media));
    doNothing().when(minioService).abortMultipartUpload(anyString(), anyString());
    
    // 执行测试
    mediaService.cancelUpload(mediaId, MOCK_USER_ID);
    
    // 验证结果
    verify(mediaRepository).save(argThat(m -> m.getStatus() == MediaStatus.CANCELLED));
    verify(minioService).abortMultipartUpload(anyString(), anyString());
}

@Test
void testDeleteMedia() {
    Long mediaId = 1L;
    
    // 准备测试数据
    Media media = new Media();
    media.setId(mediaId);
    media.setStatus(MediaStatus.COMPLETED);
    media.setUniqueKey("test/media-key");
    
    when(mediaRepository.findById(mediaId)).thenReturn(Optional.of(media));
    doNothing().when(minioService).deleteObject(anyString());
    
    // 执行测试
    mediaService.deleteMedia(mediaId, MOCK_USER_ID);
    
    // 验证结果
    verify(mediaRepository).delete(media);
    verify(minioService).deleteObject("test/media-key");
}
```

### 端到端测试示例

```java
@SpringBootTest
@AutoConfigureWebTestClient
@Testcontainers
class MediaControllerTests {

    @Container
    static MinioContainer minioContainer = new MinioContainer()
            .withUserName("minioadmin")
            .withPassword("minioadmin");

    @Autowired
    private WebTestClient webTestClient;
    
    @Test
    void testUploadWorkflow() {
        // 1. 初始化上传
        InitiateUploadDTO dto = new InitiateUploadDTO();
        dto.setFilename("test.txt");
        dto.setContentType("text/plain");
        dto.setFileSize(1024L);
        dto.setTitle("Test File");
        
        InitiateUploadResponseDTO initResponse = webTestClient.post()
                .uri("/api/media/initiate-upload")
                .bodyValue(dto)
                .exchange()
                .expectStatus().isOk()
                .expectBody(ApiResponse.class)
                .returnResult()
                .getResponseBody()
                .getData();
        
        // 2. 上传分片到MinIO (使用预签名URL)
        // 这里使用HttpClient直接上传到MinIO
        
        // 3. 完成上传
        CompleteUploadDTO completeDto = new CompleteUploadDTO();
        completeDto.setUploadId(initResponse.getUploadId());
        // 设置分片信息
        
        webTestClient.post()
                .uri("/api/media/" + initResponse.getMediaId() + "/complete")
                .bodyValue(completeDto)
                .exchange()
                .expectStatus().isOk();
                
        // 4. 验证媒体状态
        webTestClient.get()
                .uri("/api/media/" + initResponse.getMediaId())
                .exchange()
                .expectStatus().isOk()
                .expectBody()
                .jsonPath("$.data.status").isEqualTo("COMPLETED");
    }
}
```

### 性能测试考量

对于媒体上传功能，除了功能测试外，还需要考虑性能测试：

1. **大文件上传测试**
   - 测试10GB以上大文件的分片上传性能
   - 衡量完成大文件上传的端到端时间

2. **并发上传测试**
   - 测试多个用户同时上传文件的系统表现
   - 验证系统在高负载下的稳定性

3. **网络波动模拟**
   - 使用网络模拟工具测试在不稳定网络环境下的上传可靠性
   - 验证前端上传重试机制的有效性

### 测试覆盖率要求

媒体上传模块的测试覆盖率要求：
- 行覆盖率：≥85%
- 分支覆盖率：≥80%
- 方法覆盖率：≥90%

特别关注的高风险区域：
1. 分片合并逻辑
2. 错误处理和资源清理
3. 并发操作下的状态管理
4. 存储服务异常处理

### 9. 题目管理系统测试

**目标**：测试题目、题目组和题目标签管理功能的正确实现。

**测试类**：
```java
@ExtendWith(MockitoExtension.class)
class QuestionServiceTest {
    @Mock
    private QuestionRepository questionRepository;
    
    @Mock
    private QuestionOptionRepository optionRepository;
    
    @InjectMocks
    private QuestionServiceImpl questionService;
    
    // 测试方法...
}

@ExtendWith(MockitoExtension.class)
class QuestionGroupServiceTest {
    @Mock
    private QuestionGroupRepository groupRepository;
    
    @Mock
    private QuestionGroupItemRepository groupItemRepository;
    
    @InjectMocks
    private QuestionGroupServiceImpl questionGroupService;
    
    // 测试方法...
}

@ExtendWith(MockitoExtension.class)
class QuestionTagServiceTest {
    @Mock
    private QuestionTagRepository tagRepository;
    
    @Mock
    private QuestionTagMappingRepository tagMappingRepository;
    
    @InjectMocks
    private QuestionTagServiceImpl questionTagService;
    
    // 测试方法...
}
```

**测试场景**：

1. **题目服务测试**
   - **题目CRUD操作**：
     - `createQuestion_Success` - 测试成功创建题目
     - `updateQuestion_Success` - 测试成功更新题目
     - `getQuestionById_Success` - 测试获取题目详情
     - `deleteQuestion_Success` - 测试删除题目操作
   - **题目查询操作**：
     - `getQuestions_Success` - 测试分页查询题目
     - `getRandomQuestions_Success` - 测试随机获取题目
   - **异常场景处理**：
     - `createQuestion_InstitutionNotFound` - 测试机构不存在场景
     - `deleteQuestion_NoPermission` - 测试无权限删除场景

2. **题目组服务测试**
   - **题目组CRUD操作**：
     - `createGroup_Success` - 测试成功创建题目组
     - `updateGroup_Success` - 测试更新题目组信息
     - `getGroupById_Success` - 测试获取题目组详情
     - `deleteGroup_Success` - 测试删除题目组
   - **题目组项管理**：
     - `addQuestionToGroup_Success` - 测试添加题目到题目组
     - `updateGroupItem_Success` - 测试更新题目组项
     - `removeQuestionFromGroup_Success` - 测试从题目组移除题目
     - `updateItemsOrder_Success` - 测试更新题目顺序
   - **章节关联管理**：
     - `associateGroupToSection_Success` - 测试关联题目组到章节
     - `dissociateGroupFromSection_Success` - 测试取消题目组与章节的关联
     - `getGroupsBySectionId_Success` - 测试获取章节关联的题目组

3. **题目标签服务测试**
   - **标签CRUD操作**：
     - `createTag_Success` - 测试成功创建标签
     - `updateTag_Success` - 测试更新标签信息
     - `getTag_Success` - 测试获取标签详情
     - `deleteTag_Success` - 测试删除标签
   - **标签关联管理**：
     - `addTagToQuestion_Success` - 测试关联标签到题目
     - `removeTagFromQuestion_Success` - 测试从题目移除标签
   - **标签查询操作**：
     - `getAllTags_Success` - 测试获取所有标签
     - `getTags_Success` - 测试分页查询标签

**测试要点**：
- 验证题目、选项、题目组和标签的正确创建和关联
- 测试题目类型和难度系统的正确实现
- 验证题目组项排序逻辑
- 测试权限控制和资源隔离（机构级别）
- 验证标签与题目的多对多关系正确管理
- 确保章节与题目组关联的正确实现

**测试覆盖率要求**：
- 服务层行覆盖率：≥85%
- 关键业务逻辑分支覆盖率：≥90%
- 异常处理覆盖率：≥80%

该测试模块保证了题目管理系统的核心功能正确性，特别是题目与题目组、题目与标签的关联关系管理，以及各类业务规则的执行。

### 10. Excel导入功能测试

**目标**：测试Excel题目导入功能的正确性和稳定性。

**测试类**：
```java
@ExtendWith(MockitoExtension.class)
public class QuestionImportServiceTest {
    @Mock
    private QuestionService questionService;

    @Mock
    private QuestionTagService questionTagService;
    
    @Mock
    private Executor importTaskExecutor;

    @Spy
    @InjectMocks
    private QuestionImportServiceImpl questionImportService;

    // 测试方法...
}
```

**测试场景**：

1. **模板生成测试**
   - `testGenerateExcelTemplate` - 测试生成Excel模板
   - `testGenerateExcelTemplateWithError` - 测试生成模板异常处理

2. **顺序导入测试**
   - `testImportQuestions_Sequential` - 测试顺序导入处理
   - `testImportQuestionsWithInvalidFile` - 测试无效文件处理
   - `testImportQuestionsWithEmptyFile` - 测试空文件处理

3. **并发导入测试**
   - `testImportQuestions_Concurrent` - 测试并发导入处理
   - `testProcessBatchAsync` - 测试批量异步处理

4. **数据验证测试**
   - `testImportWithInvalidQuestionType` - 测试无效题目类型
   - `testImportWithInvalidDifficulty` - 测试无效难度级别
   - `testImportWithInvalidOptions` - 测试无效选项
   - `testImportWithInvalidAnswer` - 测试无效答案

**测试要点**：
- 验证Excel模板生成的正确性
- 测试文件类型和大小验证
- 验证数据验证规则
- 测试批量处理逻辑
- 验证并发处理的正确性
- 测试错误记录和统计

**测试数据准备**：
```java
private List<QuestionExcelData> createTestData() {
    List<QuestionExcelData> testData = new ArrayList<>();
    
    // 添加单选题测试数据
    testData.add(QuestionExcelData.builder()
            .title("测试单选题")
            .content("这是一道单选题内容")
            .type(1)
            .difficulty(1)
            .score(5)
            .analysis("这是解析")
            .optionA("选项A")
            .optionB("选项B")
            .optionC("选项C")
            .optionD("选项D")
            .correctAnswer("A")
            .tags("标签1,标签2")
            .build());
    
    // 添加多选题测试数据
    testData.add(QuestionExcelData.builder()
            .title("测试多选题")
            .content("这是一道多选题内容")
            .type(2)
            .difficulty(2)
            .score(10)
            .analysis("这是解析")
            .optionA("选项A")
            .optionB("选项B")
            .optionC("选项C")
            .optionD("选项D")
            .correctAnswer("ABC")
            .tags("标签3,标签4")
            .build());
    
    return testData;
}
```

**测试覆盖要求**：
- 服务层代码覆盖率：≥85%
- 关键业务逻辑分支覆盖率：≥90%
- 异常处理覆盖率：≥80%

### 11. 课程管理系统测试

**目标**：测试课程管理系统的核心功能，包括课程、章节和小节的CRUD操作，以及课程审核和预览功能。

**测试类**：
```java
@ExtendWith(MockitoExtension.class)
class CourseServiceTest {
    @Mock
    private CourseRepository courseRepository;
    
    @Mock
    private InstitutionRepository institutionRepository;
    
    @Mock
    private CategoryRepository categoryRepository;
    
    @Mock
    private TagRepository tagRepository;
    
    @Mock
    private StringRedisTemplate redisTemplate;
    
    @Mock
    private ValueOperations<String, String> valueOperations;
    
    @InjectMocks
    private CourseServiceImpl courseService;
    
    // 测试方法...
}

@ExtendWith(MockitoExtension.class)
class ChapterServiceTest {
    @Mock
    private ChapterRepository chapterRepository;
    
    @Mock
    private CourseRepository courseRepository;
    
    @InjectMocks
    private ChapterServiceImpl chapterService;
    
    // 测试方法...
}

@ExtendWith(MockitoExtension.class)
class SectionServiceTest {
    @Mock
    private SectionRepository sectionRepository;
    
    @Mock
    private ChapterRepository chapterRepository;
    
    @Mock
    private CourseRepository courseRepository;
    
    @Mock
    private MediaRepository mediaRepository;
    
    @Mock
    private QuestionGroupRepository questionGroupRepository;
    
    @Mock
    private SectionResourceRepository sectionResourceRepository;
    
    @Mock
    private SectionQuestionGroupRepository sectionQuestionGroupRepository;
    
    @InjectMocks
    private SectionServiceImpl sectionService;
    
    // 测试方法...
}
```

**测试场景**：

1. **课程服务测试**
   - **课程CRUD操作**：
     - `createCourse_Success` - 测试成功创建课程
     - `updateCourse_Success` - 测试更新课程信息
     - `getCourseById_Success` - 测试获取课程详情
     - `deleteCourse_Success` - 测试删除课程
   - **课程审核流程**：
     - `submitForReview_Success` - 测试提交课程审核
     - `startReview_Success` - 测试开始审核课程
     - `approveCourse_Success` - 测试审核通过
     - `rejectCourse_Success` - 测试审核拒绝
     - `reEditRejectedCourse_Success` - 测试重新编辑被拒绝课程
   - **课程预览功能**：
     - `generatePreviewUrl_Success` - 测试生成预览URL
     - `getCourseByPreviewToken_Success` - 测试通过预览令牌获取课程
   - **工作副本和版本控制**：
     - `approveCourse_FirstTimePublish_Success` - 测试首次发布创建副本
     - `approveCourse_UpdatePublishedVersion_Success` - 测试更新已发布版本
   - **异常场景处理**：
     - `submitForReview_NoChapters_ThrowsException` - 测试无章节提交失败
     - `deleteCourse_NotDraft_ThrowsException` - 测试非草稿状态无法删除

2. **章节服务测试**
   - **章节CRUD操作**：
     - `createChapter_Success` - 测试成功创建章节
     - `updateChapter_Success` - 测试更新章节信息
     - `getChapterById_Success` - 测试获取章节详情
     - `deleteChapter_Success` - 测试删除章节
   - **章节功能测试**：
     - `getChaptersByCourse_Success` - 测试获取课程章节列表
     - `updateAccessType_Success` - 测试更新章节访问类型
     - `reorderChapters_Success` - 测试调整章节顺序
   - **课程信息更新**：
     - `createChapter_UpdatesCourseTotalLessons` - 测试创建章节更新课程章节数
     - `deleteChapter_UpdatesCourseTotalLessons` - 测试删除章节更新课程章节数

3. **小节服务测试**
   - **小节CRUD操作**：
     - `createSection_Success` - 测试成功创建小节
     - `updateSection_Success` - 测试更新小节信息
     - `getSectionById_Success` - 测试获取小节详情
     - `deleteSection_Success` - 测试删除小节
   - **小节列表查询**：
     - `getSectionsByChapter_Success` - 测试获取章节下的小节列表
     - `getSectionsByCourse_Success` - 测试获取课程下的所有小节
   - **小节资源管理**：
     - `addSectionResource_Success` - 测试添加小节资源
     - `getSectionResources_Success` - 测试获取小节资源列表
     - `deleteSectionResource_Success` - 测试删除小节资源
   - **小节题目组管理**：
     - `addSectionQuestionGroup_Success` - 测试添加小节题目组
     - `getSectionQuestionGroups_Success` - 测试获取小节题目组列表
     - `updateSectionQuestionGroup_Success` - 测试更新小节题目组
     - `deleteSectionQuestionGroup_Success` - 测试删除小节题目组

**测试要点**：
- 验证课程管理的核心功能正确性
- 测试课程审核流程的状态转换
- 验证课程版本控制系统的正确实现
- 测试预览URL生成和访问控制
- 验证章节和小节排序、访问控制功能
- 测试小节资源和题目组的关联管理
- 确保课程-章节-小节层次结构的完整性
- 验证权限控制和机构资源隔离

**测试数据准备**：
```java
// 课程测试数据
private Course createTestCourse() {
    Course course = new Course();
    course.setId(1L);
    course.setTitle("测试课程");
    course.setDescription("测试课程描述");
    course.setStatus(CourseStatus.DRAFT.getValue());
    course.setVersionType(CourseVersion.DRAFT.getValue());
    course.setIsPublishedVersion(false);
    
    Institution institution = new Institution();
    institution.setId(1L);
    institution.setName("测试机构");
    course.setInstitution(institution);
    
    return course;
}

// 章节测试数据
private Chapter createTestChapter() {
    Chapter chapter = new Chapter();
    chapter.setId(1L);
    chapter.setTitle("测试章节");
    chapter.setDescription("测试章节描述");
    chapter.setOrderIndex(0);
    chapter.setAccessType(ChapterAccessType.FREE.getValue());
    chapter.setEstimatedMinutes(30);
    
    Course course = createTestCourse();
    chapter.setCourse(course);
    
    return chapter;
}

// 小节测试数据
private Section createTestSection() {
    Section section = new Section();
    section.setId(1L);
    section.setTitle("测试小节");
    section.setDescription("测试小节描述");
    section.setOrderIndex(0);
    section.setContentType(1); // 视频类型
    
    Chapter chapter = createTestChapter();
    section.setChapter(chapter);
    
    return section;
}
```

**测试覆盖要求**：
- 服务层行覆盖率：≥85%
- 核心业务逻辑分支覆盖率：≥90%
- 异常处理覆盖率：≥80%

### 12. 课程管理控制器测试

**目标**：测试课程管理相关的API接口功能正确性，包括参数验证、响应格式和权限控制。

**测试类**：
```java
@SpringBootTest
@AutoConfigureMockMvc(addFilters = false)
@ActiveProfiles("test")
class CourseControllerTest {
    @Autowired
    private MockMvc mockMvc;
    
    @MockBean
    private CourseService courseService;
    
    @MockBean
    private SecurityUtil securityUtil;
    
    // 测试方法...
}

@SpringBootTest
@AutoConfigureMockMvc(addFilters = false)
@ActiveProfiles("test")
class ChapterControllerTest {
    @Autowired
    private MockMvc mockMvc;
    
    @MockBean
    private ChapterService chapterService;
    
    @MockBean
    private SecurityUtil securityUtil;
    
    // 测试方法...
}

@SpringBootTest
@AutoConfigureMockMvc(addFilters = false)
@ActiveProfiles("test")
class SectionControllerTest {
    @Autowired
    private MockMvc mockMvc;
    
    @MockBean
    private SectionService sectionService;
    
    @MockBean
    private SecurityUtil securityUtil;
    
    // 测试方法...
}
```

**测试场景**：

1. **课程控制器测试**
   - **课程CRUD接口**：
     - `testCreateCourse` - 测试创建课程API
     - `testGetCourseById` - 测试获取课程详情API
     - `testUpdateCourse` - 测试更新课程API
     - `testDeleteCourse` - 测试删除课程API
     - `testGetCoursesByInstitution` - 测试获取机构课程列表API
   - **课程审核接口**：
     - `testSubmitForReview` - 测试提交课程审核API
     - `testStartReview` - 测试开始审核课程API
     - `testApproveCourse` - 测试通过课程审核API
     - `testRejectCourse` - 测试拒绝课程审核API
     - `testReEditRejectedCourse` - 测试重新编辑被拒绝课程API
   - **课程预览接口**：
     - `testGeneratePreviewUrl` - 测试生成课程预览URL API
     - `testPreviewCourse` - 测试通过预览令牌访问课程API
   - **其他课程接口**：
     - `testUpdateCourseCover` - 测试更新课程封面API
     - `testUpdatePaymentSettings` - 测试更新课程支付设置API

2. **章节控制器测试**
   - **章节CRUD接口**：
     - `testCreateChapter` - 测试创建章节API
     - `testGetChapterById` - 测试获取章节详情API
     - `testUpdateChapter` - 测试更新章节API
     - `testDeleteChapter` - 测试删除章节API
     - `testGetChaptersByCourse` - 测试获取课程章节列表API
   - **章节功能接口**：
     - `testUpdateAccessType` - 测试更新章节访问类型API
     - `testReorderChapters` - 测试调整章节顺序API

3. **小节控制器测试**
   - **小节CRUD接口**：
     - `testCreateSection` - 测试创建小节API
     - `testGetSectionById` - 测试获取小节详情API
     - `testUpdateSection` - 测试更新小节API
     - `testDeleteSection` - 测试删除小节API
   - **小节列表接口**：
     - `testGetSectionsByChapter` - 测试获取章节下的小节列表API
     - `testGetSectionsByCourse` - 测试获取课程下的所有小节API
     - `testReorderSections` - 测试调整小节顺序API
   - **小节资源接口**：
     - `testAddSectionResource` - 测试添加小节资源API
     - `testGetSectionResources` - 测试获取小节资源列表API
     - `testDeleteSectionResource` - 测试删除小节资源API
   - **小节题目组接口**：
     - `testAddSectionQuestionGroup` - 测试添加小节题目组API
     - `testGetSectionQuestionGroups` - 测试获取小节题目组列表API
     - `testUpdateSectionQuestionGroup` - 测试更新小节题目组API
     - `testDeleteSectionQuestionGroup` - 测试删除小节题目组API

**测试要点**：
- 验证API参数验证功能
- 测试响应格式和状态码正确性
- 测试权限控制注解生效
- 验证Controller和Service层的正确交互
- 测试异常情况下的错误处理和响应

**模拟请求示例**：
```java
// 创建课程请求示例
@Test
void testCreateCourse() throws Exception {
    // 准备测试数据
    CourseCreateDTO dto = new CourseCreateDTO();
    dto.setTitle("测试课程");
    dto.setDescription("测试课程描述");
    dto.setInstitutionId(1L);
    dto.setPaymentType(CoursePaymentType.FREE.getValue());
    
    Course mockCourse = new Course();
    mockCourse.setId(1L);
    mockCourse.setTitle("测试课程");
    
    // 模拟Service行为
    when(securityUtil.getCurrentInstitutionId()).thenReturn(1L);
    when(securityUtil.getCurrentUserId()).thenReturn(1L);
    when(courseService.createCourse(any(CourseCreateDTO.class), anyLong())).thenReturn(mockCourse);
    
    // 执行请求
    mockMvc.perform(post("/api/courses")
            .contentType(MediaType.APPLICATION_JSON)
            .content(objectMapper.writeValueAsString(dto)))
            .andExpect(status().isCreated())
            .andExpect(jsonPath("$.success").value(true))
            .andExpect(jsonPath("$.data.id").value(1L))
            .andExpect(jsonPath("$.data.title").value("测试课程"));
    
    // 验证Service调用
    verify(courseService).createCourse(any(CourseCreateDTO.class), eq(1L));
}
```

**测试覆盖要求**：
- API端点覆盖率：100%
- 参数验证场景覆盖率：≥90%
- 异常处理覆盖率：≥80%

### 13. 课程管理集成测试

**目标**：测试课程管理相关功能的完整流程，验证从控制器到服务层再到数据库的正确交互。

**测试类**：
```java
@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Transactional
@Import(TestSecurityConfig.class)
class CourseManagementIntegrationTest {
    @Autowired
    private MockMvc mockMvc;
    
    @Autowired
    private CourseRepository courseRepository;
    
    @Autowired
    private ChapterRepository chapterRepository;
    
    @Autowired
    private SectionRepository sectionRepository;
    
    @Autowired
    private TestUserDetailsService testUserDetailsService;
    
    // 测试方法...
}
```

**测试场景**：

1. **课程生命周期流程**：
   - `testCompleteCourseLifecycle` - 测试完整的课程创建、编辑、提交审核、审核通过和发布流程
   - `testCourseRejectionAndReEdit` - 测试课程被拒绝后重新编辑和提交流程
   - `testCourseUnpublishAndRepublish` - 测试课程下线和重新发布流程

2. **课程内容管理流程**：
   - `testChapterAndSectionManagement` - 测试章节和小节的创建、编辑和排序
   - `testSectionResourceManagement` - 测试小节资源的添加和管理
   - `testSectionQuestionGroupManagement` - 测试小节题目组的添加和管理

3. **课程预览和访问控制**：
   - `testCoursePreviewAndAccess` - 测试课程预览URL生成和访问
   - `testChapterAccessTypeControl` - 测试章节访问类型控制

**测试要点**：
- 验证完整业务流程的正确性
- 测试事务管理和数据一致性
- 验证不同角色权限控制的正确性
- 测试预览URL生成和验证机制
- 验证版本控制系统的正确工作

**测试流程示例**：
```java
@Test
@WithUserDetails(value = "institution_admin@example.com", userDetailsServiceBeanName = "testUserDetailsService")
void testCompleteCourseLifecycle() throws Exception {
    // 1. 创建课程
    CourseCreateDTO courseDto = new CourseCreateDTO();
    courseDto.setTitle("集成测试课程");
    courseDto.setDescription("集成测试课程描述");
    courseDto.setInstitutionId(1L);
    
    MvcResult createResult = mockMvc.perform(post("/api/courses")
            .contentType(MediaType.APPLICATION_JSON)
            .content(objectMapper.writeValueAsString(courseDto)))
            .andExpect(status().isCreated())
            .andExpect(jsonPath("$.success").value(true))
            .andReturn();
    
    JsonNode createResponse = objectMapper.readTree(createResult.getResponse().getContentAsString());
    Long courseId = createResponse.path("data").path("id").asLong();
    
    // 2. 添加章节
    ChapterCreateDTO chapterDto = new ChapterCreateDTO();
    chapterDto.setTitle("测试章节");
    chapterDto.setCourseId(courseId);
    
    mockMvc.perform(post("/api/chapters")
            .contentType(MediaType.APPLICATION_JSON)
            .content(objectMapper.writeValueAsString(chapterDto)))
            .andExpect(status().isCreated());
    
    // 3. 提交审核
    mockMvc.perform(post("/api/courses/" + courseId + "/submit")
            .contentType(MediaType.APPLICATION_JSON))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.data.status").value(CourseStatus.PENDING_REVIEW.getValue()));
    
    // 4. 切换到管理员角色，开始审核
    mockMvc.perform(post("/api/auth/logout"))
            .andExpect(status().isOk());
            
    mockMvc.perform(post("/api/auth/login")
            .contentType(MediaType.APPLICATION_JSON)
            .content("{\"username\":\"admin@example.com\",\"password\":\"password\"}"))
            .andExpect(status().isOk());
    
    // 5. 开始审核
    mockMvc.perform(post("/api/courses/" + courseId + "/review/start")
            .contentType(MediaType.APPLICATION_JSON))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.data.status").value(CourseStatus.REVIEWING.getValue()));
    
    // 6. 审核通过
    mockMvc.perform(post("/api/courses/" + courseId + "/review/approve")
            .contentType(MediaType.APPLICATION_JSON)
            .param("comment", "审核通过"))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.data.status").value(CourseStatus.PUBLISHED.getValue()));
    
    // 7. 验证是否创建了发布版本
    Course course = courseRepository.findById(courseId).orElseThrow();
    assertNotNull(course.getPublishedVersionId());
    
    Course publishedVersion = courseRepository.findById(course.getPublishedVersionId()).orElseThrow();
    assertTrue(publishedVersion.getIsPublishedVersion());
    assertEquals(course.getTitle(), publishedVersion.getTitle());
}
```

**测试覆盖要求**：
- 核心业务流程覆盖率：≥85%
- 权限控制场景覆盖率：≥90%
- 数据一致性验证：≥85%
</file>

<file path="docs/当前进度描述.md">
# 在线课程平台系统图表

基于已开发的代码，以下图表展示了系统的主要功能和流程。

## 一、用例图

```mermaid
flowchart TD
    %% 角色定义
    Guest([游客])
    User([普通用户])
    InstitutionUser([机构用户])
    InstitutionAdmin([机构管理员])
    Reviewer([审核员])
    Admin([系统管理员])
    
    %% 用例定义
    subgraph 用户与认证
      Register[注册账号]
      Login[登录系统]
      ResetPassword[重置密码]
      ManageProfile[管理个人信息]
      ApplyInstitution[申请创建机构]
      RegisterInstitution[使用注册码加入机构]
    end
    
    subgraph 机构管理
      ManageInstitution[管理机构信息]
      ManageMembers[管理机构成员]
      CheckQuota[查看存储配额]
      InviteMembers[邀请成员加入]
      ApproveApplication[审核机构申请]
      GenerateRegisterCode[生成注册码]
      UpdateQuota[更新存储配额]
    end
    
    subgraph 课程管理
      CreateCourse[创建课程]
      ManageCourse[管理课程内容]
      CreateChapter[创建章节]
      CreateSection[创建小节]
      SubmitReview[提交审核]
      PublishCourse[发布课程]
      UnpublishCourse[下线课程]
      RepublishCourse[重新发布]
      ReeditRejected[重新编辑被拒绝课程]
    end
    
    subgraph 内容与资源
      UploadMedia[上传媒体]
      ManageMedia[管理媒体]
      CreateQuestion[创建题目]
      CreateQuestionGroup[创建题组]
      ImportQuestions[批量导入题目]
      AddQuestionTag[添加题目标签]
    end
    
    subgraph 审核与管理
      ReviewCourse[审核课程]
      StartReviewing[开始审核]
      ApproveCourse[通过课程审核]
      RejectCourse[拒绝课程审核]
      ManageCategory[管理分类]
      ManageTag[管理标签]
      ManageUser[管理用户]
      ManageRole[管理角色]
      ManagePermission[管理权限]
    end
    
    %% 关系连接
    Guest --> Register
    Guest --> Login
    Guest --> ApplyInstitution
    
    User --> ManageProfile
    User --> ResetPassword
    User --> RegisterInstitution
    
    InstitutionUser --> ManageProfile
    InstitutionUser --> CreateCourse
    InstitutionUser --> ManageCourse
    InstitutionUser --> CreateChapter
    InstitutionUser --> CreateSection
    InstitutionUser --> UploadMedia
    InstitutionUser --> ManageMedia
    InstitutionUser --> CreateQuestion
    InstitutionUser --> CreateQuestionGroup
    InstitutionUser --> ImportQuestions
    InstitutionUser --> SubmitReview
    InstitutionUser --> ReeditRejected
    
    InstitutionAdmin --> ManageInstitution
    InstitutionAdmin --> ManageMembers
    InstitutionAdmin --> CheckQuota
    InstitutionAdmin --> InviteMembers
    
    Reviewer --> ReviewCourse
    Reviewer --> StartReviewing
    Reviewer --> ApproveCourse
    Reviewer --> RejectCourse
    Reviewer --> ManageCategory
    Reviewer --> ManageTag
    Reviewer --> ApproveApplication
    
    Admin --> ManageUser
    Admin --> ManageRole
    Admin --> ManagePermission
    Admin --> ManageCategory
    Admin --> ManageTag
    Admin --> UpdateQuota
    Admin --> GenerateRegisterCode
```

## 二、主要业务流程图

### 1. 课程创建与发布流程

```mermaid
flowchart TB
    Start([开始]) --> CreateCourse[创建课程]
    CreateCourse --> CreateChapter[创建章节]
    CreateChapter --> CreateSection[创建小节]
    CreateSection --> UploadMedia[上传媒体资源]
    UploadMedia --> SetMediaResource[设置小节媒体资源]
    
    SetMediaResource --> CreateQuestions[创建题目]
    CreateQuestions --> CreateQuestionGroup[创建题组]
    CreateQuestionGroup --> SetQuestionGroup[设置小节题组]
    
    SetQuestionGroup --> SubmitReview{提交审核}
    SubmitReview -->|待审核| PendingReview[课程状态变为待审核]
    PendingReview --> ReviewerCheck[审核员查看课程]
    
    ReviewerCheck --> StartReview[开始审核]
    StartReview --> ReviewDecision{审核决定}
    ReviewDecision -->|通过| ApproveProcess[通过审核]
    ReviewDecision -->|拒绝| RejectProcess[拒绝审核]
    
    ApproveProcess --> PublishCourse[课程发布]
    RejectProcess --> ReeditCourse[重新编辑]
    ReeditCourse --> SubmitReview
    
    PublishCourse --> CourseStatus{课程状态管理}
    CourseStatus -->|下线| UnpublishCourse[下线课程]
    CourseStatus -->|重新上线| RepublishCourse[重新上线]
    
    UnpublishCourse --> End([结束])
    RepublishCourse --> End
```

### 2. 机构入驻完整流程

```mermaid
flowchart TB
    Start([开始]) --> ApplyInstitution[申请创建机构]
    ApplyInstitution --> FillInfo[填写机构信息]
    FillInfo --> SubmitCaptcha[提交验证码]
    SubmitCaptcha --> SubmitApplication[提交申请]
    
    SubmitApplication --> ApplicationDB[(应用数据库)]
    ApplicationDB --> AdminReview[管理员或审核员查看]
    
    AdminReview --> ReviewDecision{审核决定}
    ReviewDecision -->|通过| ApproveProcess[通过申请]
    ReviewDecision -->|拒绝| RejectProcess[拒绝申请]
    
    ApproveProcess --> CreateInstitution[创建机构]
    CreateInstitution --> SetupStorage[设置存储配额]
    SetupStorage --> GenerateCode[生成注册码]
    GenerateCode --> NotifyApplicant[通知申请人]
    
    RejectProcess --> SendRejection[发送拒绝原因]
    SendRejection --> NotifyApplicant
    
    NotifyApplicant --> ApplicantRegister{申请人操作}
    ApplicantRegister -->|注册管理员| RegisterAdmin[注册机构管理员]
    
    RegisterAdmin --> AdminOperations[机构管理员操作]
    AdminOperations --> InviteMembers[邀请成员]
    InviteMembers --> MemberRegister[成员注册]
    MemberRegister --> VerifyRegCode[验证注册码]
    VerifyRegCode --> CompleteRegistration[完成注册]
    
    CompleteRegistration --> MemberManage[成员管理]
    MemberManage --> AssignRoles[分配角色]
    AssignRoles --> End([结束])
```

### 3. 机构成员注册流程

```mermaid
flowchart TB
    Start([开始]) --> HasCode{是否有注册码}
    HasCode -->|有| EnterCode[输入注册码]
    HasCode -->|没有| Contact[联系机构管理员]
    Contact --> GetCode[获取注册码]
    GetCode --> EnterCode
    
    EnterCode --> FillForm[填写注册信息]
    FillForm --> EnterCaptcha[输入验证码]
    EnterCaptcha --> SubmitEmail[提交邮箱]
    SubmitEmail --> RequestEmailCode[获取邮箱验证码]
    
    RequestEmailCode --> EmailService[邮件服务]
    EmailService --> SendCode[发送验证码]
    SendCode --> ReceiveCode[用户接收验证码]
    ReceiveCode --> EnterEmailCode[输入邮箱验证码]
    
    EnterEmailCode --> CompleteForm[完成注册表单]
    CompleteForm --> Submit[提交注册]
    
    Submit --> ValidateCode[验证注册码]
    ValidateCode --> ValidateEmailCode[验证邮箱验证码]
    ValidateEmailCode --> CreateAccount[创建账号]
    CreateAccount --> AssignRole[分配机构角色]
    
    AssignRole --> SendWelcome[发送欢迎邮件]
    SendWelcome --> End([结束])
```

### 4. 媒体上传流程

```mermaid
flowchart TB
    Start([开始]) --> InitUpload[初始化上传]
    InitUpload --> CheckQuota[检查存储配额]
    CheckQuota --> QuotaEnough{配额充足?}
    
    QuotaEnough -->|是| GetPresignedUrls[获取预签名URL]
    QuotaEnough -->|否| QuotaError[配额不足错误]
    QuotaError --> End([结束])
    
    GetPresignedUrls --> UploadChunks[上传分片文件]
    UploadChunks --> AllChunksUploaded{所有分片已上传?}
    AllChunksUploaded -->|否| ContinueUpload[继续上传]
    ContinueUpload --> UploadChunks
    
    AllChunksUploaded -->|是| CompleteUpload[完成上传]
    CompleteUpload --> ValidateUpload[验证上传完整性]
    ValidateUpload --> UploadValid{上传有效?}
    
    UploadValid -->|否| UploadError[上传错误]
    UploadError --> End
    
    UploadValid -->|是| MergeChunks[合并分片]
    MergeChunks --> SaveMediaInfo[保存媒体信息]
    SaveMediaInfo --> UpdateQuota[更新存储配额]
    UpdateQuota --> SuccessResponse[返回成功结果]
    
    SuccessResponse --> End
```

### 5. 权限与角色管理流程

```mermaid
flowchart TB
    Start([开始]) --> AdminLogin[管理员登录]
    AdminLogin --> AccessAdmin[访问管理界面]
    
    AccessAdmin --> ManageChoice{管理选择}
    ManageChoice -->|角色管理| RoleManagement[角色管理]
    ManageChoice -->|权限管理| PermissionManagement[权限管理]
    ManageChoice -->|用户管理| UserManagement[用户管理]
    
    RoleManagement --> CreateRole[创建角色]
    RoleManagement --> UpdateRole[更新角色]
    RoleManagement --> DeleteRole[删除角色]
    
    PermissionManagement --> CreatePermission[创建权限]
    PermissionManagement --> UpdatePermission[更新权限]
    PermissionManagement --> DeletePermission[删除权限]
    
    CreateRole --> AssignPermissions[分配权限]
    UpdateRole --> AssignPermissions
    
    UserManagement --> AssignRoles[为用户分配角色]
    AssignRoles --> AuthorizationUpdated[授权更新]
    AssignPermissions --> AuthorizationUpdated
    
    AuthorizationUpdated --> End([结束])
```

## 三、时序图

### 1. 用户注册流程

```mermaid
sequenceDiagram
    participant 用户
    participant 前端
    participant 认证控制器
    participant 认证服务
    participant 用户服务
    participant 邮件服务
    participant 数据库
    
    用户->>前端: 请求注册页面
    前端->>认证控制器: 获取验证码Key
    认证控制器->>前端: 返回验证码Key
    前端->>认证控制器: 获取验证码图片
    认证控制器->>前端: 返回验证码图片
    
    用户->>前端: 输入验证码和邮箱
    前端->>认证控制器: 请求发送邮箱验证码
    认证控制器->>邮件服务: 生成并发送验证码
    邮件服务->>用户: 发送邮箱验证码
    
    用户->>前端: 填写注册信息并提交
    前端->>认证控制器: 提交注册请求
    认证控制器->>认证服务: 注册用户
    认证服务->>邮件服务: 验证邮箱验证码
    认证服务->>用户服务: 创建用户
    用户服务->>数据库: 保存用户信息
    数据库-->>用户服务: 保存成功
    用户服务-->>认证服务: 返回用户信息
    认证服务-->>认证控制器: 注册成功
    认证控制器-->>前端: 返回注册结果
    前端-->>用户: 显示注册成功
```

### 2. 机构入驻申请与审核时序图

```mermaid
sequenceDiagram
    participant 申请人
    participant 前端
    participant 机构控制器
    participant 验证码服务
    participant 机构服务
    participant 邮件服务
    participant 数据库
    participant 审核员
    
    申请人->>前端: 访问机构申请页面
    前端->>验证码服务: 请求验证码Key
    验证码服务->>前端: 返回验证码Key
    前端->>验证码服务: 请求验证码图片
    验证码服务->>前端: 显示验证码
    
    申请人->>前端: 填写机构信息和验证码
    前端->>机构控制器: 提交申请
    机构控制器->>验证码服务: 验证验证码
    验证码服务-->>机构控制器: 验证结果
    
    alt 验证码正确
        机构控制器->>机构服务: 创建申请
        机构服务->>数据库: 保存申请信息
        数据库-->>机构服务: 保存成功
        机构服务->>邮件服务: 发送申请确认邮件
        邮件服务->>申请人: 发送确认邮件
        机构服务-->>机构控制器: 返回申请ID
        机构控制器-->>前端: 返回申请提交成功
        前端-->>申请人: 显示申请成功和申请ID
    else 验证码错误
        机构控制器-->>前端: 返回验证码错误
        前端-->>申请人: 显示验证码错误
    end
    
    申请人->>前端: 查询申请状态
    前端->>机构控制器: 获取申请状态
    机构控制器->>机构服务: 查询申请状态
    机构服务->>数据库: 查询申请数据
    数据库-->>机构服务: 返回申请数据
    机构服务-->>机构控制器: 返回申请状态
    机构控制器-->>前端: 返回申请状态
    前端-->>申请人: 显示申请状态
    
    审核员->>前端: 查看待审核申请
    前端->>机构控制器: 获取待审核申请
    机构控制器->>机构服务: 查询待审核申请
    机构服务->>数据库: 查询申请数据
    数据库-->>机构服务: 返回申请列表
    机构服务-->>机构控制器: 返回申请列表
    机构控制器-->>前端: 返回待审核申请
    前端-->>审核员: 显示待审核申请列表
    
    审核员->>前端: 审核申请
    alt 通过申请
        前端->>机构控制器: 提交通过决定
        机构控制器->>机构服务: 通过申请
        机构服务->>数据库: 创建机构记录
        机构服务->>数据库: 生成注册码
        机构服务->>邮件服务: 发送通过通知
        邮件服务->>申请人: 发送通过邮件(含注册码)
    else 拒绝申请
        前端->>机构控制器: 提交拒绝决定和原因
        机构控制器->>机构服务: 拒绝申请
        机构服务->>数据库: 更新申请状态
        机构服务->>邮件服务: 发送拒绝通知
        邮件服务->>申请人: 发送拒绝邮件(含原因)
    end
    
    数据库-->>机构服务: 操作成功
    机构服务-->>机构控制器: 返回操作结果
    机构控制器-->>前端: 返回审核结果
    前端-->>审核员: 显示审核完成
```

### 3. 机构成员注册时序图

```mermaid
sequenceDiagram
    participant 用户
    participant 前端
    participant 机构认证控制器
    participant 认证服务
    participant 机构认证服务
    participant 用户服务
    participant 邮件服务
    participant 验证码服务
    participant 数据库
    
    用户->>前端: 访问机构用户注册页面
    前端->>验证码服务: 请求验证码Key
    验证码服务->>前端: 返回验证码Key
    前端->>验证码服务: 请求验证码图片
    验证码服务->>前端: 返回验证码图片
    
    用户->>前端: 输入邮箱和验证码
    前端->>机构认证控制器: 请求发送邮箱验证码
    机构认证控制器->>验证码服务: 验证图形验证码
    验证码服务-->>机构认证控制器: 验证结果
    
    alt 验证码正确
        机构认证控制器->>邮件服务: 发送邮箱验证码
        邮件服务->>用户: 发送验证码邮件
        机构认证控制器-->>前端: 返回发送成功
        前端-->>用户: 显示邮件已发送
    else 验证码错误
        机构认证控制器-->>前端: 返回验证码错误
        前端-->>用户: 显示验证码错误
    end
    
    用户->>前端: 输入注册信息(用户名、密码、注册码、邮箱验证码)
    前端->>机构认证控制器: 提交注册请求
    机构认证控制器->>验证码服务: 验证图形验证码
    验证码服务-->>机构认证控制器: 验证结果
    
    机构认证控制器->>邮件服务: 验证邮箱验证码
    邮件服务-->>机构认证控制器: 验证结果
    
    alt 验证通过
        机构认证控制器->>机构认证服务: 验证注册码并注册
        机构认证服务->>数据库: 验证注册码
        数据库-->>机构认证服务: 验证结果
        
        alt 注册码有效
            机构认证服务->>用户服务: 创建用户并关联机构
            用户服务->>数据库: 保存用户信息
            数据库-->>用户服务: 保存成功
            用户服务-->>机构认证服务: 返回用户信息
            机构认证服务-->>机构认证控制器: 返回注册成功
            机构认证控制器-->>前端: 返回注册结果
            前端-->>用户: 显示注册成功
        else 注册码无效
            机构认证服务-->>机构认证控制器: 返回注册码无效
            机构认证控制器-->>前端: 返回注册失败
            前端-->>用户: 显示注册码无效
        end
    else 验证失败
        机构认证控制器-->>前端: 返回验证失败
        前端-->>用户: 显示验证失败
    end
```

### 4. 课程审核流程

```mermaid
sequenceDiagram
    participant 机构用户
    participant 前端
    participant 课程控制器
    participant 课程服务
    participant 审核员控制器
    participant 审核员
    participant 数据库
    
    机构用户->>前端: 提交课程审核
    前端->>课程控制器: 提交审核请求
    课程控制器->>课程服务: 更新课程状态为待审核
    课程服务->>数据库: 保存课程状态
    课程服务-->>课程控制器: 返回更新后的课程
    课程控制器-->>前端: 返回提交结果
    前端-->>机构用户: 显示已提交审核
    
    审核员->>前端: 查看待审核课程列表
    前端->>审核员控制器: 获取待审核课程
    审核员控制器->>课程服务: 查询待审核课程
    课程服务->>数据库: 查询课程数据
    数据库-->>课程服务: 返回课程列表
    课程服务-->>审核员控制器: 返回课程列表
    审核员控制器-->>前端: 返回待审核课程
    前端-->>审核员: 显示待审核课程列表
    
    审核员->>前端: 开始审核特定课程
    前端->>审核员控制器: 提交开始审核请求
    审核员控制器->>课程服务: 更新课程状态为审核中
    课程服务->>数据库: 更新课程状态
    数据库-->>课程服务: 更新成功
    课程服务-->>审核员控制器: 返回更新后的课程
    审核员控制器-->>前端: 返回操作结果
    
    审核员->>前端: 查看课程预览
    前端->>审核员控制器: 获取预览URL
    审核员控制器->>课程服务: 生成预览URL
    课程服务->>数据库: 创建预览令牌
    数据库-->>课程服务: 保存成功
    课程服务-->>审核员控制器: 返回预览URL
    审核员控制器-->>前端: 返回预览URL
    前端-->>审核员: 显示课程预览
    
    审核员->>前端: 提交审核决定
    前端->>审核员控制器: 提交审核结果
    alt 通过审核
        审核员控制器->>课程服务: 通过课程审核
        课程服务->>数据库: 更新课程状态为已发布
    else 拒绝审核
        审核员控制器->>课程服务: 拒绝课程审核
        课程服务->>数据库: 更新课程状态为已拒绝
    end
    数据库-->>课程服务: 更新成功
    课程服务-->>审核员控制器: 返回更新后的课程
    审核员控制器-->>前端: 返回操作结果
    前端-->>审核员: 显示操作成功
    
    alt 课程已发布
        机构用户->>前端: 查看课程状态
        前端->>课程控制器: 获取课程详情
        课程控制器->>课程服务: 查询课程
        课程服务->>数据库: 查询课程数据
        数据库-->>课程服务: 返回课程数据
        课程服务-->>课程控制器: 返回课程详情
        课程控制器-->>前端: 返回课程信息
        前端-->>机构用户: 显示课程已发布
    else 课程被拒绝
        机构用户->>前端: 查看课程状态
        前端->>课程控制器: 获取课程详情
        课程控制器->>课程服务: 查询课程
        课程服务->>数据库: 查询课程数据
        数据库-->>课程服务: 返回课程数据
        课程服务-->>课程控制器: 返回课程详情
        课程控制器-->>前端: 返回课程信息
        前端-->>机构用户: 显示拒绝原因
    end
```

### 5. 媒体上传流程

```mermaid
sequenceDiagram
    participant 机构用户
    participant 前端
    participant 媒体控制器
    participant 媒体服务
    participant 存储配额服务
    participant S3服务
    participant 数据库
    
    机构用户->>前端: 选择文件上传
    前端->>媒体控制器: 初始化上传请求
    媒体控制器->>媒体服务: 校验存储配额
    媒体服务->>存储配额服务: 检查配额
    存储配额服务->>数据库: 查询配额信息
    数据库-->>存储配额服务: 返回配额数据
    
    alt 配额充足
        存储配额服务-->>媒体服务: 配额充足
        媒体服务->>S3服务: 创建分片上传任务
        S3服务-->>媒体服务: 返回上传ID
        媒体服务->>数据库: 创建媒体记录
        媒体服务->>S3服务: 生成分片预签名URL
        S3服务-->>媒体服务: 返回预签名URL列表
        媒体服务-->>媒体控制器: 返回上传初始化结果
        媒体控制器-->>前端: 返回分片上传URL
        
        loop 上传分片
            前端->>S3服务: 上传分片
            S3服务-->>前端: 上传成功
        end
        
        前端->>媒体控制器: 完成上传请求
        媒体控制器->>媒体服务: 完成上传
        媒体服务->>S3服务: 合并分片
        S3服务-->>媒体服务: 合并成功
        媒体服务->>数据库: 更新媒体状态
        媒体服务->>存储配额服务: 更新存储配额
        存储配额服务->>数据库: 更新配额使用量
        数据库-->>存储配额服务: 更新成功
        媒体服务-->>媒体控制器: 返回媒体信息
        媒体控制器-->>前端: 返回上传结果
        前端-->>机构用户: 显示上传成功
    else 配额不足
        存储配额服务-->>媒体服务: 配额不足
        媒体服务-->>媒体控制器: 返回配额不足错误
        媒体控制器-->>前端: 返回错误信息
        前端-->>机构用户: 显示配额不足错误
    end
```
</file>

<file path="docs/课程流程设计.md">
# 课程管理流程设计文档

## 一、课程状态与版本模型

### 1.1 课程状态定义

课程在生命周期中有以下几种状态：

| 状态 | 值 | 描述 | 可操作角色 |
|------|-----|------|------------|
| DRAFT | 0 | 草稿 | 创建者、机构管理员 |
| PENDING_REVIEW | 1 | 待审核 | 创建者、机构管理员、审核员 |
| REVIEWING | 2 | 审核中 | 审核员 |
| REJECTED | 3 | 已拒绝 | 创建者、机构管理员、审核员 |
| PUBLISHED | 4 | 已发布 | 审核员、系统管理员 |
| UNPUBLISHED | 5 | 已下线 | 审核员、系统管理员 |

### 1.2 课程版本类型

课程版本类型用于区分课程在不同阶段的版本：

| 版本类型 | 值 | 描述 |
|---------|-----|------|
| DRAFT | 0 | 草稿版本 |
| REVIEW | 1 | 审核版本 |
| PUBLISHED | 2 | 发布版本 |

### 1.3 工作副本模式

系统采用工作副本（Working Copy）模式管理课程内容：

- **工作副本**：用于编辑和修改的版本，`isPublishedVersion = false`
- **发布版本**：当前对外可见的稳定版本，`isPublishedVersion = true`

关键字段：
- `publishedVersionId`：工作副本中指向对应发布版本的ID
- `isPublishedVersion`：标识当前记录是否为发布版本
- `version`：版本号，用于记录版本迭代
- `versionType`：版本类型（DRAFT、REVIEW、PUBLISHED）

## 二、状态转换流程

### 2.1 允许的状态转换

```
DRAFT → PENDING_REVIEW（提交审核）
PENDING_REVIEW → REVIEWING（开始审核）
REVIEWING → REJECTED（拒绝）
REVIEWING → PUBLISHED（通过并发布）
PUBLISHED → UNPUBLISHED（下线）
UNPUBLISHED → PUBLISHED（重新上线）
REJECTED → DRAFT（重新编辑）
```

### 2.2 状态转换流程图

```
[DRAFT] ──提交审核──> [PENDING_REVIEW] ──开始审核──> [REVIEWING]
   ↑                                           /       \
   │                                          /         \
   │                                         /           \
   │                                        /             \
   │                                       ↓               ↓
[REJECTED] <───────────────────────── [REJECTED]    [PUBLISHED] ⇄ [UNPUBLISHED]
```

### 2.3 工作副本与发布版本的关系

- 初始只有工作副本（状态为DRAFT）
- 首次发布时，克隆工作副本创建发布版本
- 后续修改只在工作副本上进行
- 再次发布时，更新已有发布版本

## 三、业务操作详细流程

### 3.1 创建课程

1. 创建新的课程记录（工作副本）
2. 设置状态为DRAFT，版本类型为DRAFT
3. 设置创建者ID和所属机构
4. `publishedVersionId`为null，`isPublishedVersion`为false

### 3.2 提交审核（submitForReview）

1. 验证当前状态必须是DRAFT
2. 检查课程必要字段（标题、章节等）
3. 更新状态为PENDING_REVIEW，版本类型为REVIEW
4. 记录提交时间

### 3.3 开始审核（startReview）

1. 验证当前状态必须是PENDING_REVIEW
2. 设置审核人ID
3. 更新状态为REVIEWING
4. 记录开始审核时间

### 3.4 拒绝课程（rejectCourse）

1. 验证当前状态必须是REVIEWING
2. 添加拒绝理由
3. 更新状态为REJECTED
4. 记录审核完成时间

### 3.5 通过并发布课程（approveCourse）

1. 验证当前状态必须是REVIEWING
2. 如果是首次发布：
   - 克隆工作副本创建发布版本
   - 设置发布版本的`isPublishedVersion = true`，状态为PUBLISHED
   - 工作副本的`publishedVersionId`指向发布版本ID
3. 如果已有发布版本：
   - 更新已有发布版本的内容
   - 保持发布版本ID不变
4. 更新工作副本状态为PUBLISHED

### 3.6 下线课程（unpublishCourse）

1. 验证当前状态必须是PUBLISHED
2. 记录下线原因和下线时间
3. 更新工作副本和发布版本状态为UNPUBLISHED

### 3.7 重新上线（rePublishCourse）

1. 验证当前状态必须是UNPUBLISHED
2. 更新工作副本和发布版本状态为PUBLISHED

### 3.8 重新编辑被拒绝课程（reEditRejectedCourse）

1. 验证当前状态必须是REJECTED
2. 更新状态为DRAFT
3. 保留拒绝原因供参考

### 3.9 删除课程（deleteCourse）

1. 验证操作权限（只有创建者、机构管理员或系统管理员可以删除）
2. 如果课程已发布：
   - 记录删除时间和删除操作人
   - 将发布版本标记为已删除（软删除）
   - 学习者将无法继续访问该课程
   - 【未来功能】触发退款流程（如适用）
3. 删除工作副本及其关联数据（章节、小节、资源关联）
4. 记录删除日志，包含删除原因

## 四、实现策略与注意事项

### 4.1 状态转换验证

在`CourseService`中实现状态转换验证器：
- 定义允许的状态转换表
- 每次状态转换前验证是否合法
- 非法转换抛出业务异常

### 4.2 并发控制

1. **乐观锁**：
   - 利用JPA的`@Version`注解（已在实体上定义为`dataVersion`）
   - 当版本不匹配时，抛出异常提示用户数据已被修改

2. **显式锁定**：
   - 在特定操作（如发布）时，可考虑使用悲观锁
   - 例如：`@Lock(LockModeType.PESSIMISTIC_WRITE)`

### 4.3 数据一致性

1. **事务管理**：
   - 每个状态转换操作使用`@Transactional`注解
   - 确保所有相关数据更新在一个事务中完成

2. **级联操作**：
   - 删除课程时级联删除章节和小节
   - 复制课程时完整复制所有关联内容

### 4.4 审核与差异比较

**差异比较机制**：
- 当课程重新提交审核时，标记哪些内容已更改
- 帮助审核人员聚焦在新修改的内容上

### 4.5 机构隔离

1. **数据访问控制**：
   - 所有课程查询都需要验证机构ID
   - 使用`findByIdAndInstitutionId`方法确保只能访问本机构课程

2. **权限验证**：
   - 在服务层验证用户是否有权操作特定课程
   - 审核员可以查看所有机构的待审核课程

## 五、开发流程建议

### 5.1 开发顺序

1. **基础实体与Repository层**（已完成）：
   - Course、Chapter、Section、SectionResource等实体
   - 相应的Repository接口

2. **状态管理服务**（优先开发）：
   - CourseStatusService实现状态转换逻辑
   - 状态验证和业务规则实现

3. **课程基础管理功能**：
   - CourseService实现课程CRUD操作
   - 章节和小节管理功能

4. **审核与发布流程**：
   - 实现工作副本与发布版本机制
   - 审核流程相关功能

5. **资源关联管理**：
   - 与Media系统集成
   - 资源访问控制

6. **API接口层**：
   - RESTful API实现
   - 请求验证和响应格式统一

### 5.2 测试策略

1. **单元测试**：
   - 测试状态转换逻辑
   - 测试业务规则验证

2. **集成测试**：
   - 测试工作副本与发布版本机制
   - 测试事务和并发控制

3. **端到端测试**：
   - 测试完整的课程生命周期
   - 测试不同角色的权限控制

### 5.3 开发注意事项

1. **版本控制**：
   - 使用乐观锁防止并发编辑冲突
   - 审核版本与工作版本分离管理

2. **性能考虑**：
   - 延迟加载资源URL
   - 分页加载课程列表
   - 树形结构优化

3. **安全考虑**：
   - 严格的权限检查
   - 防止跨机构访问
   - 资源URL时效性控制

4. **扩展性预留**：
   - 课程类型扩展接口
   - 评估与测验未来集成点
   - 学习记录关联点
</file>

<file path="docs/实现进度.md">
# 在线课程平台实现进度

## 已完成内容

### 基础设施
- [x] 项目结构设计
- [x] 多环境配置（dev, test）
- [x] H2数据库集成（用于测试）
- [x] Redis缓存集成
- [x] 全局异常处理
- [x] 统一响应格式
- [x] OpenAPI文档支持
- [x] 验证码功能
- [x] 邮箱验证功能
  - [x] 邮件服务集成
  - [x] 验证码生成和验证
  - [x] Redis存储验证码
  - [x] 邮件模板支持
- [x] 文件存储集成
  - [x] MinIO对象存储服务集成
  - [x] AWS S3兼容API集成
  - [x] 文件上传、下载、删除功能
  - [x] 公开资源使用永久URL，私有资源使用预签名URL
  - [x] 文件资源自动清理（头像更新时删除旧文件）
  - [x] 文件上传大小限制优化（最大100MB）
  - [x] 存储配额管理
    - [x] 机构存储配额实体设计
    - [x] 配额类型定义（VIDEO/DOCUMENT/TOTAL）
    - [x] 配额检查和更新服务
    - [x] 配额使用情况查询
    - [x] 自动配额计算和更新
    - [x] 配额过期时间支持
  - [x] 分片上传功能
    - [x] S3分片上传管理
    - [x] 上传状态追踪（Redis）
    - [x] 断点续传支持
    - [x] 配额检查集成

### 架构优化
- [x] 严格遵循分层架构
  - [x] Controller层只负责接收请求和返回响应
  - [x] Service层封装所有业务逻辑和基础设施交互
  - [x] Repository层专注于数据访问
- [x] 代码重构
  - [x] 移除Controller直接依赖基础设施服务
  - [x] 优化异常处理流程

### 实体类设计
- [x] 基础实体类（BaseEntity）
- [x] 用户实体（User）
- [x] 角色实体（Role）
- [x] 权限实体（Permission）
- [x] 机构实体（Institution）
- [x] 角色枚举（RoleEnum）

### 数据访问层
- [x] 用户Repository
- [x] 角色Repository
- [x] 权限Repository
- [x] 机构Repository

### 安全框架
- [x] Spring Security配置
- [x] JWT令牌配置
- [x] JWT令牌提供者
  - [x] 优化令牌内容，仅包含角色信息，减小令牌体积
  - [x] 刷新令牌机制优化（仅验证黑名单）
  - [x] 完善令牌刷新的单元测试
- [x] JWT认证过滤器
- [x] Token黑名单服务（基于Redis）

### 认证授权
- [x] 用户详情服务
- [x] 认证服务
- [x] 用户服务
- [x] 注册接口
- [x] 登录接口
- [x] 刷新令牌接口
- [x] 注销接口
- [x] 数据初始化（角色、权限）
- [x] 基于角色的访问控制（@PreAuthorize）

### 权限管理
- [x] 用户管理接口
- [x] 角色管理接口
- [x] 权限管理接口

### 用户自身管理
- [x] 获取当前用户信息
- [x] 更新个人资料
- [x] 修改密码
- [x] 更新头像（MinIO存储）
- [x] 更新邮箱（验证码验证）
- [x] 获取用户基本信息
- [x] 邮箱更新专用验证码

### 机构管理
- [x] 机构申请功能
  - [x] 机构入驻申请
  - [x] 申请状态查询
  - [x] 申请审核功能
  - [x] 审核结果通知
- [x] 机构用户注册
  - [x] 机构注册码生成
  - [x] 机构用户注册
  - [x] 邮箱验证
  - [x] 角色分配

### 媒体资源管理
- [x] 媒体实体设计
  - [x] 媒体基本信息（Media）
  - [x] 媒体类型枚举（MediaType）
  - [x] 媒体状态枚举（MediaStatus）
- [x] 分片上传功能
  - [x] S3分片上传管理器（S3MultipartUploadManager）
    - [x] 初始化分片上传
    - [x] 生成分片上传预签名URL
    - [x] 批量生成预签名URL
    - [x] 完成分片上传（合并分片）
    - [x] 取消分片上传
    - [x] 列出已上传分片
    - [x] 生成临时访问URL
  - [x] 上传状态追踪服务（UploadStatusService）
    - [x] 保存和获取上传状态
    - [x] 更新已完成分片信息
    - [x] 上传状态过期处理
- [x] 媒体服务实现（MediaService）
  - [x] 初始化上传（与配额服务集成）
  - [x] 获取上传状态
  - [x] 完成上传
  - [x] 取消上传
  - [x] 恢复上传（断点续传）
  - [x] A媒体访问控制
  - [x] 媒体列表查询（分页、排序、筛选）
- [x] 媒体控制器（MediaController）
  - [x] 初始化上传API
  - [x] 获取上传状态API
  - [x] 完成上传API
  - [x] 取消上传API
  - [x] 获取媒体信息API
  - [x] 获取媒体访问URL API
  - [x] 获取媒体列表API
  - [x] 权限控制（仅机构用户可访问）

### 存储配额服务
- [x] 存储配额实体设计（StorageQuota）
  - [x] 配额类型枚举（QuotaType）
  - [x] 与机构实体关联
  - [x] 配额统计属性
  - [x] 配额过期时间支持
- [x] 存储配额服务实现（StorageQuotaService）
  - [x] 配额检查功能
  - [x] 配额更新功能
  - [x] 配额查询功能
  - [x] 配额设置功能
  - [x] 多类型配额管理（视频、文档等）
  - [x] 总配额同步更新
- [x] 存储配额控制器（StorageQuotaController）
  - [x] 获取机构配额信息API
  - [x] 获取所有类型配额详情API
  - [x] 设置配额API（管理员专用）
  - [x] 权限控制（机构用户和管理员）
- [x] 与媒体服务集成
  - [x] 上传前配额检查
  - [x] 上传完成后配额更新
  - [x] 上传取消时配额回滚
  - [x] 配额不足时上传阻止

### 题目管理系统
- [x] 题目管理基础设施
  - [x] 题目实体设计（Question）
  - [x] 题目选项实体设计（QuestionOption）
  - [x] 题目组实体设计（QuestionGroup）
  - [x] 题目标签实体设计（QuestionTag）
  - [x] 题目组项实体设计（QuestionGroupItem）
  - [x] 题目标签映射实体设计（QuestionTagMapping）
  - [x] 题目类型枚举（QuestionType）

- [x] 题目管理VO/DTO层
  - [x] 题目相关VO/DTO（QuestionVO/QuestionDTO）
  - [x] 题目组相关VO/DTO（QuestionGroupVO/QuestionGroupDTO）
  - [x] 题目标签相关VO/DTO（QuestionTagVO/QuestionTagDTO）
  - [x] 题目组项相关VO/DTO（QuestionGroupItemVO/QuestionGroupItemDTO）
  - [x] 题目选项相关VO/DTO（QuestionOptionVO/QuestionOptionDTO）

- [x] 题目管理服务层实现
  - [x] 题目服务（QuestionService）
    - [x] 题目CRUD操作
    - [x] 题目查询功能（分页、随机获取等）
    - [x] 题目选项管理
  - [x] 题目组服务（QuestionGroupService）
    - [x] 题目组CRUD操作
    - [x] 题目组项管理
    - [x] 题目组与章节关联管理
  - [x] 题目标签服务（QuestionTagService）
    - [x] 标签CRUD操作
    - [x] 标签与题目关联管理
    - [x] 标签查询功能

- [x] 题目管理测试实现
  - [x] 题目服务测试（QuestionServiceTest）
  - [x] 题目组服务测试（QuestionGroupServiceTest）
  - [x] 题目标签服务测试（QuestionTagServiceTest）

### 课程管理系统
- [x] 课程相关实体设计
  - [x] 课程实体（Course）
  - [x] 章节实体（Chapter）
  - [x] 小节实体（Section）
  - [x] 小节资源实体（SectionResource）
  - [x] 小节题目组实体（SectionQuestionGroup）
  - [x] 分类实体（Category）
  - [x] 标签实体（Tag）
  - [x] 相关枚举类：
    - [x] 课程状态枚举（CourseStatus）
    - [x] 课程版本枚举（CourseVersion）
    - [x] 课程付费类型枚举（CoursePaymentType）
    - [x] 章节访问类型枚举（ChapterAccessType）

- [x] 课程管理DTO/VO层
  - [x] 课程相关DTO（CourseCreateDTO等）
  - [x] 章节相关DTO（ChapterCreateDTO、ChapterOrderDTO等）
  - [x] 小节相关DTO（SectionCreateDTO、SectionOrderDTO等）
  - [x] 小节资源DTO（SectionResourceDTO）
  - [x] 小节题目组DTO（SectionQuestionGroupDTO）
  - [x] 预览URL视图对象（PreviewUrlVO）

- [x] 课程管理服务层实现
  - [x] 课程服务（CourseService）
    - [x] 课程CRUD操作
    - [x] 课程审核流程管理
    - [x] 工作副本和版本管理
    - [x] 课程预览功能
    - [x] 课程发布和下线功能
  - [x] 章节服务（ChapterService）
    - [x] 章节CRUD操作
    - [x] 章节顺序管理
    - [x] 章节访问类型管理
  - [x] 小节服务（SectionService）
    - [x] 小节CRUD操作
    - [x] 小节顺序管理
    - [x] 小节资源管理
    - [x] 小节题目组管理

- [x] 控制器层实现
  - [x] 课程控制器（CourseController）
    - [x] 课程创建、查询、更新、删除API
    - [x] 课程审核API
    - [x] 课程预览API
    - [x] 课程支付设置API
  - [x] 章节控制器（ChapterController）
    - [x] 章节创建、查询、更新、删除API
    - [x] 章节顺序调整API
    - [x] 章节访问类型设置API
  - [x] 小节控制器（SectionController）
    - [x] 小节创建、查询、更新、删除API
    - [x] 小节顺序调整API
    - [x] 小节资源管理API
    - [x] 小节题目组管理API

- [x] 课程管理测试实现
  - [x] 课程服务测试（CourseServiceTest）
  - [x] 章节服务测试（ChapterServiceTest）
  - [x] 小节服务测试（SectionServiceTest）

## 待完成内容

### 业务功能
- [ ] 用户学习
- [ ] 评价系统
- [ ] 订单支付
- [ ] 前端UI实现
  - [ ] 课程管理UI
  - [ ] 章节管理UI
  - [ ] 小节管理UI
  - [ ] 课程审核UI
  - [ ] 课程学习UI

## 测试计划
- [x] 测试环境配置
  - [x] H2内存数据库
  - [x] 测试专用配置文件
  - [x] Bean冲突解决方案
- [x] 单元测试
  - [x] 服务层测试
    - [x] 用户服务测试
    - [x] 认证服务测试
    - [x] 验证码服务测试
    - [x] 邮件服务测试
    - [x] 用户自身管理功能测试
    - [x] 权限服务测试
    - [x] 角色服务测试
    - [x] 机构服务测试
    - [x] 课程服务测试
    - [x] 章节服务测试
    - [x] 小节服务测试
  - [ ] 工具类测试
- [x] 控制器测试
  - [x] 认证控制器测试
    - [x] 图形验证码测试
    - [x] 邮箱验证码测试
    - [x] 注册登录测试
    - [x] 邮箱更新验证码测试
  - [x] 用户控制器测试
    - [x] 用户管理测试
    - [x] 用户自身管理测试
  - [x] 权限管理测试
    - [x] 权限控制器测试
    - [x] 角色控制器测试
  - [x] 机构管理测试
    - [x] 机构申请控制器测试
    - [x] 机构审核控制器测试
    - [x] 机构用户注册测试
  - [ ] 课程管理测试
    - [ ] 课程控制器测试
    - [ ] 章节控制器测试
    - [ ] 小节控制器测试
- [x] 集成测试
  - [x] 认证控制器集成测试
    - [x] 完整注册流程测试
    - [x] 邮箱验证失败测试
    - [x] 邮箱更新验证码测试
  - [x] 权限管理集成测试
    - [x] 权限控制器集成测试
    - [x] 角色控制器集成测试
    - [x] 权限管理授权测试
  - [x] 机构管理集成测试
    - [x] 机构申请流程测试
    - [x] 机构审核流程测试
    - [x] 机构用户注册流程测试
  - [ ] 课程管理集成测试
    - [ ] 课程审核流程测试
    - [ ] 课程预览功能测试
  - [ ] Repository测试
  - [ ] 端到端测试

## 下一步计划
1. ✓ 完善用户管理功能
2. ✓ 实现角色管理功能
3. ✓ 实现权限管理功能
4. ✓ 实现用户自身管理功能
5. ✓ 完善权限管理接口的测试
6. ✓ 完善角色管理接口的测试
7. ✓ 实现机构申请和注册功能
   - ✓ 机构申请流程
   - ✓ 机构审核流程
   - ✓ 机构用户注册
8. ✓ 开始课程管理相关功能
   - ✓ 设计课程相关实体类（课程、章节、小节等）
   - ✓ 实现课程Repository层
   - ✓ 实现课程Service层
   - ✓ 实现课程Controller层
9. ✓ 设计和实现课程内容审核功能
10. ✓ 实现课程版本控制系统
11. ✓ 实现课程预览功能
12. 开发前端界面
    - 设计课程管理界面
    - 实现课程创建和编辑功能
    - 实现章节和小节管理功能
    - 实现课程审核流程界面
    - 实现课程学习界面

## 已实现API接口

### 认证管理
- `GET /api/auth/captcha/key` - 获取验证码key
- `GET /api/auth/captcha/image/{key}` - 获取验证码图片
- `POST /api/auth/email-verification-code` - 发送邮箱验证码（用于注册）
- `POST /api/auth/email-update-code` - 发送邮箱更新验证码（用于更新邮箱）
- `POST /api/auth/register` - 用户注册（包含邮箱验证）
- `POST /api/auth/login` - 用户登录
- `POST /api/auth/refresh-token` - 刷新令牌
- `POST /api/auth/logout` - 用户注销

### 用户管理
- `GET /api/users` - 分页查询用户列表
- `GET /api/users/{id}` - 获取用户详情
- `POST /api/users` - 创建用户
- `PUT /api/users/{id}` - 更新用户
- `DELETE /api/users/{id}` - 删除用户
- `PATCH /api/users/{id}/status` - 修改用户状态
- `PUT /api/users/{id}/roles` - 给用户分配角色
- `DELETE /api/users/batch` - 批量删除用户

### 课程管理
- `POST /api/courses` - 创建课程
- `GET /api/courses/{id}` - 获取课程详情
- `PUT /api/courses/{id}` - 更新课程
- `DELETE /api/courses/{id}` - 删除课程
- `GET /api/courses` - 获取机构课程列表
- `POST /api/courses/{id}/submit` - 提交课程审核
- `POST /api/courses/{id}/cover` - 更新课程封面
- `POST /api/courses/{id}/payment` - 更新课程支付设置
- `GET /api/courses/{id}/preview` - 生成课程预览URL
- `GET /api/courses/preview/{token}` - 通过预览令牌访问课程
- `POST /api/courses/{id}/review/start` - 开始审核课程
- `POST /api/courses/{id}/review/approve` - 通过课程审核
- `POST /api/courses/{id}/review/reject` - 拒绝课程审核
- `POST /api/courses/{id}/re-edit` - 重新编辑被拒绝的课程

### 章节管理
- `POST /api/chapters` - 创建章节
- `GET /api/chapters/{id}` - 获取章节详情
- `PUT /api/chapters/{id}` - 更新章节
- `DELETE /api/chapters/{id}` - 删除章节
- `GET /api/chapters/course/{courseId}` - 获取课程章节列表
- `PUT /api/chapters/{id}/access-type` - 更新章节访问类型
- `PUT /api/chapters/course/{courseId}/reorder` - 调整章节顺序

### 小节管理
- `POST /api/sections` - 创建小节
- `GET /api/sections/{id}` - 获取小节详情
- `PUT /api/sections/{id}` - 更新小节
- `DELETE /api/sections/{id}` - 删除小节
- `GET /api/sections/chapter/{chapterId}` - 获取章节下的小节列表
- `GET /api/sections/course/{courseId}` - 获取课程下的所有小节
- `PUT /api/sections/chapter/{chapterId}/reorder` - 调整小节顺序
- `POST /api/sections/resources` - 添加小节资源
- `GET /api/sections/{id}/resources` - 获取小节资源列表
- `DELETE /api/sections/resources/{resourceId}` - 删除小节资源
- `POST /api/sections/question-groups` - 添加小节题目组
- `GET /api/sections/{id}/question-groups` - 获取小节题目组列表
- `PUT /api/sections/{sectionId}/question-groups/{questionGroupId}` - 更新小节题目组
- `DELETE /api/sections/{sectionId}/question-groups/{questionGroupId}` - 删除小节题目组
</file>

<file path="docs/系统设计说明.md">
# 在线课程平台系统设计说明

## 认证与授权设计

### 邮箱验证
- 采用邮箱验证码方式确保邮箱真实性
- 验证码有效期：5分钟
- 存储方式：Redis（key前缀：email:verification:）
- 邮件模板：使用Thymeleaf模板引擎
- 验证流程：
  1. 用户获取图形验证码
  2. 验证图形验证码后发送邮箱验证码
  3. 注册时验证邮箱验证码
  4. 验证通过后完成注册

### 邮箱更新
- 采用专门的邮箱更新验证码确保邮箱真实性和操作安全性
- 验证码有效期：5分钟
- 存储方式：与注册验证码相同，使用Redis存储
- 专用邮件模板：email-update-code.html
- 更新流程：
  1. 用户获取图形验证码
  2. 验证图形验证码后发送邮箱更新验证码到新邮箱
  3. 用户提交更新请求，提供验证码和当前密码
  4. 系统验证密码和验证码，验证通过后更新邮箱

### JWT认证
- 采用无状态JWT认证方式
- 实现方式：短token + 刷新token模式
- 访问token有效期：1小时
- 刷新token有效期：7天
- 刷新机制：
  - 访问token过期后，使用刷新token获取新的访问token
  - 刷新token时只检查token是否在黑名单中
  - 令牌中仅包含用户角色信息，不包含详细权限
- token黑名单：使用Redis存储已注销但未过期的token
- 安全保障：
  - 验证刷新令牌的有效性和是否在黑名单中
  - 通过基于角色的权限控制确保API访问安全

### 角色权限设计（RBAC）
- **当前实现**：基于角色的访问控制
  - 使用`@PreAuthorize("hasRole('XXX')")`注解进行接口访问控制
  - 令牌中只存储角色信息，不包含详细权限
  - 简化的权限模型，基于固定的角色划分

- **未来计划**：
  - 完善为更细粒度的基于权限的访问控制
  - 实现动态权限分配和验证

系统定义了四种基本角色：

1. **普通用户（ROLE_USER）**
   - 默认角色，用户注册后即具有此角色
   - 权限：浏览课程、购买课程、学习课程、评价课程等

2. **管理员（ROLE_ADMIN）**
   - 系统管理员，具有最高权限
   - 权限：用户管理、角色管理、权限管理、系统配置等

3. **审核人员（ROLE_REVIEWER）**
   - 负责内容审核
   - 权限：审核课程内容、审核评论、内容管理等

4. **机构用户（ROLE_INSTITUTION）**
   - 课程提供机构账号
   - 特殊属性：机构ID（institutionId）
   - 权限：创建课程、管理课程、查看统计数据等

### 权限粒度控制
- 基于URL的权限控制
- 基于方法的权限控制（@PreAuthorize）
- 自定义权限评估器
- 接口权限文档化

## 缓存设计

### Redis缓存
- 用途：
  - 会话管理
  - 接口限流
  - 热点数据缓存
  - Token黑名单
  - 验证码存储
    - 图形验证码：5分钟过期
    - 邮箱验证码：5分钟过期
  
- 缓存策略：
  - 热门课程列表：60分钟
  - 用户信息：30分钟
  - 课程详情：60分钟
  - 分类数据：120分钟
  
- 缓存前缀设计：
  - 用户相关：`user:${userId}:*`
  - 课程相关：`course:${courseId}:*`
  - 令牌黑名单：`token:blacklist:*`
  - 图形验证码：`captcha:${key}`
  - 邮箱验证码：`email:verification:${email}`
  - 邮箱更新验证码：`email:update:code:${userId}:${newEmail}`

- 缓存更新策略：
  - 更新数据库同时更新缓存
  - 设置合理的过期时间
  - 对热点数据采用预热机制

## 数据库设计

### 用户权限相关表
- `users` - 用户基本信息
  - id：主键
  - username：用户名
  - password：密码（加密存储）
  - email：邮箱
  - phone：手机号
  - avatar：头像
  - nickname：昵称
  - status：状态（正常、禁用、锁定）
  - created_at：创建时间
  - updated_at：更新时间
  - last_login_at：最后登录时间
  - institution_id：机构ID（仅机构用户）

- `roles` - 角色信息
  - id：主键
  - name：角色名称
  - code：角色编码（ROLE_USER, ROLE_ADMIN等）
  - description：角色描述
  - created_at：创建时间
  - updated_at：更新时间

- `permissions` - 权限信息
  - id：主键
  - name：权限名称
  - code：权限编码
  - description：权限描述
  - url：资源路径
  - method：HTTP方法
  - created_at：创建时间
  - updated_at：更新时间

- `user_roles` - 用户角色关联
  - user_id：用户ID
  - role_id：角色ID
  - created_at：创建时间

- `role_permissions` - 角色权限关联
  - role_id：角色ID
  - permission_id：权限ID
  - created_at：创建时间

- `institutions` - 机构信息
  - id：主键
  - name：机构名称
  - logo：机构Logo
  - description：机构描述
  - status：状态（0-待审核，1-正常，2-禁用）
  - contact_person：联系人
  - contact_phone：联系电话
  - contact_email：联系邮箱
  - address：地址
  - register_code：注册码
  - created_at：创建时间
  - updated_at：更新时间

- `institution_applications` - 机构申请
  - id：主键
  - application_id：申请ID（业务编号）
  - name：机构名称
  - logo：机构Logo
  - description：机构描述
  - contact_person：联系人
  - contact_phone：联系电话
  - contact_email：联系邮箱
  - address：地址
  - status：状态（0-待审核，1-已通过，2-已拒绝）
  - review_comment：审核意见
  - reviewer_id：审核人ID
  - reviewed_at：审核时间
  - institution_id：关联的机构ID
  - created_at：创建时间
  - updated_at：更新时间

### 课程相关表
- `courses` - 课程基本信息
- `chapters` - 课程章节
- `lessons` - 课程小节
- `resources` - 课程资源（视频、文档等）
- `categories` - 课程分类
- `tags` - 课程标签
- `course_tags` - 课程与标签关联

### 用户学习相关表
- `enrollments` - 课程报名/购买记录
- `learning_progress` - 学习进度
- `user_notes` - 用户笔记
- `favorites` - 用户收藏

### 评价与互动相关表
- `comments` - 评论信息
- `replies` - 回复信息
- `ratings` - 评分信息

### 交易相关表
- `orders` - 订单信息
- `payments` - 支付记录
- `refunds` - 退款记录
- `coupons` - 优惠券

## 业务流程

### 注册登录流程
1. 用户注册：输入基本信息 → 验证邮箱/手机 → 创建账号 → 分配默认角色
2. 用户登录：验证身份 → 生成JWT令牌（访问+刷新）→ 返回给客户端
3. 令牌刷新：访问令牌过期 → 使用刷新令牌请求新令牌 → 验证刷新令牌有效性 → 生成新令牌

### 机构申请和注册流程

#### 1. 机构申请流程
1. **申请提交**
   - 填写机构基本信息（名称、Logo、描述等）
   - 填写联系信息（联系人、电话、邮箱）
   - 验证图形验证码
   - 提交申请，生成申请ID

2. **申请审核**
   - 审核员查看申请列表（支持分页和筛选）
   - 查看申请详情
   - 审核通过或拒绝（需要填写审核意见）
   - 发送审核结果通知邮件

3. **审核通过处理**
   - 创建机构记录
   - 生成唯一的机构注册码
   - 发送包含注册码的通知邮件

#### 2. 机构用户注册流程
1. **注册准备**
   - 获取机构注册码（从审核通过邮件中）
   - 获取图形验证码

2. **邮箱验证**
   - 输入邮箱地址
   - 验证图形验证码
   - 发送邮箱验证码
   - 验证邮箱验证码

3. **注册提交**
   - 填写用户信息（用户名、密码等）
   - 提供机构注册码
   - 提交注册信息
   - 系统验证注册码有效性
   - 创建用户账号并分配机构角色
   - 关联用户与机构

4. **注册完成**
   - 返回注册成功信息
   - 跳转到登录页面

### 用户自身管理流程

#### 个人信息管理
1. 获取个人信息：调用`/api/users/current`接口获取当前登录用户详细信息
2. 更新个人信息：调用`/api/users/current`接口更新昵称、手机号等信息

#### 密码修改
1. 输入旧密码和新密码
2. 系统验证旧密码正确性
3. 系统验证新旧密码不同
4. 更新密码并加密存储

#### 头像上传
1. 用户选择头像文件
2. 系统验证文件类型（只允许图片）和大小（最大2MB）
3. 上传到MinIO存储服务，生成唯一文件名
4. 生成访问URL并更新用户头像字段

#### 邮箱更新
1. 用户输入新邮箱
2. 系统向新邮箱发送验证码（使用专用邮件模板）
3. 用户提交验证码和当前密码
4. 系统验证密码和验证码
5. 更新用户邮箱

## 用户自身管理功能详细设计

### 功能概述
用户自身管理功能是指已登录用户对自己账号信息进行管理的功能集合，包括查看个人信息、修改个人资料、修改密码、上传头像和更新邮箱等。此功能模块的目标是提供用户对自身信息的完整管理能力，提升用户体验。

### API设计

#### 1. 获取当前用户信息

- **请求方法**: `GET`
- **接口路径**: `/api/users/current`
- **权限要求**: 已登录用户
- **实现逻辑**:
  1. 从安全上下文中获取当前用户ID
  2. 根据用户ID从数据库中查询用户信息
  3. 返回用户信息，包括基本信息和角色信息

#### 2. 更新个人资料

- **请求方法**: `PUT`
- **接口路径**: `/api/users/current`
- **权限要求**: 已登录用户
- **请求参数**: 用户可修改的信息字段（昵称、手机号等）
- **实现逻辑**:
  1. 从安全上下文中获取当前用户ID
  2. 验证请求参数（昵称长度、手机号格式等）
  3. 更新用户信息到数据库
  4. 返回更新后的用户信息

#### 3. 修改密码

- **请求方法**: `PUT`
- **接口路径**: `/api/users/current/password`
- **权限要求**: 已登录用户
- **请求参数**: 旧密码、新密码、确认密码
- **实现逻辑**:
  1. 从安全上下文中获取当前用户ID
  2. 验证旧密码是否正确
  3. 验证新密码与确认密码是否一致
  4. 验证新密码是否符合强度要求
  5. 加密新密码并更新到数据库
  6. 返回成功响应
- **安全考量**:
  - 验证旧密码以确保是用户本人操作
  - 新密码与确认密码必须一致
  - 新密码必须满足一定的强度要求
  - 新密码不能与旧密码相同

#### 4. 上传头像

- **请求方式**: `POST`
- **接口路径**: `/api/users/current/avatar`
- **权限要求**: 已登录用户
- **请求参数**: 头像图片文件（MultipartFile）
- **实现逻辑**:
  1. 从安全上下文中获取当前用户ID
  2. 验证上传的文件类型和大小
  3. 生成文件存储路径和文件名
  4. 上传文件到MinIO/S3服务
  5. 更新用户头像URL到数据库
  6. 返回头像URL
- **技术实现**:
  - 使用MinIO/S3服务作为文件存储基础设施
  - 采用统一的存储路径格式：`avatars/{userId}/{timestamp}_{filename}`
  - 对上传的图片进行压缩和格式转换，优化存储和加载性能
  - 设置文件大小限制（如最大2MB）和类型限制（仅允许jpg、png等图片格式）
  - 为每个用户创建唯一的存储路径，避免文件名冲突
  - 生成带有时间戳的文件名，防止缓存问题

#### 5. 更新邮箱

a. **获取邮箱更新验证码**
- **请求方法**: `POST`
- **接口路径**: `/api/users/current/email-code`
- **权限要求**: 已登录用户
- **请求参数**: 新邮箱地址
- **实现逻辑**:
  - 从安全上下文中获取当前用户ID
  - 验证新邮箱格式和唯一性
  - 生成6位数字验证码
  - 使用模板发送包含验证码的邮件到新邮箱
  - 将验证码存储到Redis中，设置过期时间
  - 返回发送成功响应

b. **更新邮箱**
- **请求方法**: `PUT`
- **接口路径**: `/api/users/current/email`
- **权限要求**: 已登录用户
- **请求参数**: 新邮箱地址、验证码
- **实现逻辑**:
  - 从安全上下文中获取当前用户ID
  - 从Redis中获取之前存储的验证码
  - 验证用户提交的验证码是否正确
  - 如果验证通过，更新用户邮箱到数据库
  - 删除Redis中的验证码记录
  - 返回更新成功响应

### 安全控制

- **接口权限控制**: 所有用户自身管理的接口都需要用户登录才能访问，不需要额外的角色权限
- **数据权限控制**: 用户只能查看和修改自己的信息，通过JWT令牌中的用户ID来限制数据访问范围
- **数据验证**:
  - 所有输入数据都进行验证，防止恶意数据
  - 邮箱唯一性验证
  - 密码强度检查（长度、复杂度）
  - 文件上传类型和大小限制

### 性能优化

- **头像处理**:
  - 对上传的头像进行压缩和裁剪，减小存储空间和传输大小
  - 使用MinIO/S3等对象存储服务，提高文件存取效率
  - 考虑使用CDN加速头像加载
- **并发控制**:
  - 对频繁操作（如发送验证码）设置请求频率限制
  - 使用乐观锁防止数据并发修改冲突

## 存储配额设计

### 存储配额实体设计
- **StorageQuota实体**
  - id：配额ID
  - type：配额类型（VIDEO/DOCUMENT/TOTAL）
  - totalQuota：总配额大小（字节）
  - usedQuota：已使用配额（字节）
  - institution：所属机构（多对一关联）
  - createdAt：创建时间
  - updatedAt：更新时间
  - expiresAt：过期时间（可选，支持临时扩容）

### 配额类型设计
```java
public enum QuotaType {
    VIDEO,      // 视频配额
    DOCUMENT,   // 文档配额
    TOTAL       // 总配额
}
```

### 配额服务设计
- **核心功能**：
  - 配额检查：检查机构是否有足够配额上传指定大小的文件
  - 配额更新：更新已使用的配额（支持增加和减少）
  - 配额查询：获取机构的配额使用情况
  - 配额设置：设置或调整机构的配额大小

- **业务规则**：
  - 更新特定类型配额时自动更新总配额
  - 配额不足时禁止上传
  - 支持配额过期时间设置
  - 配额过期后禁止上传新文件

- **默认配额设置**：
  - VIDEO：5GB
  - DOCUMENT：2GB
  - TOTAL：10GB

### 配额管理流程
1. **配额初始化**：
   - 机构创建时自动初始化默认配额
   - 支持管理员手动设置配额

2. **配额检查流程**：
   - 验证机构存在性
   - 检查配额是否过期
   - 计算剩余配额
   - 判断是否满足上传需求

3. **配额更新流程**：
   - 更新特定类型配额
   - 同步更新总配额
   - 记录更新时间
   - 触发配额超限告警（可选）

4. **配额展示**：
```java
public class StorageQuotaVO {
    private Long id;
    private String type;           // 配额类型
    private Long totalQuota;       // 总配额
    private Long usedQuota;        // 已用配额
    private Long availableQuota;   // 可用配额
    private double usagePercentage; // 使用百分比
    private LocalDateTime expiresAt; // 过期时间
    private Long institutionId;    // 机构ID
}
```

## 文件存储设计

本系统实现了双重文件存储方案，支持MinIO对象存储和AWS S3兼容API，为文件上传、头像存储等功能提供基础设施。

### MinIO存储
- **配置属性**：
  - endpoint：MinIO服务端点
  - accessKey：访问密钥
  - secretKey：访问密钥密文
  - bucketName：存储桶名称
  
- **功能实现**：
  - 文件上传：支持流式上传，自动设置内容类型
  - 文件删除：根据对象名删除文件
  - URL生成：获取文件访问URL
  - 文件列表：获取存储桶中所有文件
  - 自动创建存储桶：检查并创建存储桶
  
- **访问策略优化**：
  - 公开资源（如用户头像）使用永久URL，而非预签名URL
  - 为存储桶设置公共读取权限，确保公开资源可直接访问
  - 永久URL格式：`endpoint/bucketName/objectName`
  - 优势：减少数据库存储长度需求，提高访问稳定性，消除URL过期问题

- **资源清理机制**：
  - 头像更新时自动删除旧文件，避免存储空间浪费
  - 从URL中提取对象名，使用MinioService删除旧文件
  - 错误处理确保即使删除旧文件失败，用户头像更新操作仍能正常完成
  - 实现高效的存储资源管理，防止无用文件积累
  
- **应用场景**：
  - 用户头像存储
  - 课程资源文件存储
  - 临时文件存储

### AWS S3兼容API
- **配置属性**：
  - endpoint：S3服务端点
  - region：区域
  - accessKey：访问密钥
  - secretKey：访问密钥密文
  - bucketName：存储桶名称
  - pathStyleAccess：是否使用路径样式访问
  
- **功能实现**：
  - 对象操作：上传、下载、删除
  - 存储桶管理：创建、检查、列出
  - 预签名URL：生成带有时效性的访问URL
  
- **测试策略**：
  - 集成测试采用环境变量控制（MINIO_ENABLED, S3_ENABLED）
  - 在CI/CD环境中可按需启用

### 存储策略
- **存储路径设计**：
  - 用户头像：`avatars/{userId}/{filename}`
  - 课程资源：`courses/{courseId}/{resourceType}/{filename}`
  - 临时文件：`temp/{uuid}/{filename}`
  
- **文件命名规则**：
  - 使用UUID生成唯一文件名
  - 保留原始文件扩展名
  - 添加时间戳避免缓存问题
  
- **安全考量**：
  - 访问控制：非公开文件通过预签名URL访问
  - 文件验证：检查文件类型和大小
  - 过期策略：临时文件设置TTL自动清理

### 课程发布流程
1. 机构用户创建课程草稿
2. 上传课程内容和资料
3. 提交审核
4. 审核人员审核课程内容
5. 审核通过后发布课程
6. 课程上线

## 课程版本管理设计

### 版本管理模型

系统实现了基于"工作区版本"和"发布版本"双版本管理模型的课程系统，提供完整的课程生命周期管理：

**核心设计**：
- **工作区版本（Workspace Version）**：
  - 用于创建、编辑和管理课程内容
  - 状态流转：草稿 -> 待审核 -> 审核中 -> 已拒绝/已发布
  - 特点：可编辑，持续更新，不对学习者可见
  - 关联字段：`isPublishedVersion=false`
  
- **发布版本（Published Version）**：
  - 由工作区版本发布生成，对学习者可见
  - 状态固定为"已发布"
  - 特点：不可编辑，内容稳定，对外可见
  - 关联字段：`isPublishedVersion=true`
  
- **版本关联机制**：
  - 工作区版本通过 `publishedVersionId` 字段关联到发布版本
  - 发布版本与工作区版本共享相同的课程基本信息
  - 发布时创建课程副本，保留原版本的编辑能力

### 数据模型设计

**Course 实体**中的版本相关字段:
```
id: number;                    // 课程ID
title: string;                 // 课程标题
// 其他课程基本信息...
  
// 版本管理字段
status: number;                // 课程状态
versionType: number;           // 版本类型
isPublishedVersion: boolean;   // 是否是发布版本
publishedVersionId: number;    // 指向发布版本的ID
  
// 审核流程字段
submittedAt: timestamp;        // 提交审核时间
reviewStartedAt: timestamp;    // 开始审核时间
reviewedAt: timestamp;         // 审核完成时间
publishedAt: timestamp;        // 发布时间
reviewComment: string;         // 审核意见
reviewerId: number;            // 审核人ID
reviewerName: string;          // 审核人姓名
```

**课程状态枚举**:
```
DRAFT = 0,              // 草稿
PENDING_REVIEW = 1,     // 待审核
REVIEWING = 2,          // 审核中
REJECTED = 3,           // 已拒绝
PUBLISHED = 4,          // 已发布
UNPUBLISHED = 5         // 已下线
```

### 业务流程设计

#### 1. 课程版本管理流程

1. **创建阶段**：
   - 机构用户创建课程，生成工作区版本（草稿状态）
   - 编辑课程内容，设置基本信息

2. **审核阶段**：
   - 提交审核后状态变为"待审核"
   - 审核人员开始审核，状态变为"审核中"
   - 审核结果：通过或拒绝

3. **发布阶段**：
   - 审核通过后，系统创建发布版本（复制工作区版本内容）
   - 更新工作区版本状态为"已发布"，并关联到发布版本
   - 发布版本对学习者可见

4. **更新阶段**：
   - 机构用户可继续编辑工作区版本
   - 提交新版本审核后，可更新发布版本

#### 2. 发布版本生成流程

1. **准备阶段**：
   - 验证工作区版本审核状态为"已通过"
   - 检查课程内容完整性

2. **复制阶段**：
   - 复制课程基本信息创建新实体
   - 复制章节、小节、资源等相关内容
   - 设置新课程的 `isPublishedVersion=true`

3. **关联阶段**：
   - 更新原工作区版本的 `publishedVersionId` 字段
   - 更新工作区版本的状态为"已发布"
   - 记录发布时间

4. **发布完成**：
   - 发布版本对学习者可见
   - 工作区版本仍可继续编辑

### 前端实现设计

#### 1. 版本管理界面

- **工作区/发布版本切换**：TabsList组件实现视图切换
- **发布状态显示**：CoursePublishBadge组件显示课程发布状态
- **版本操作**：提供查看发布版本、编辑工作区版本等功能

#### 2. 数据服务层设计

- **工作区课程查询**：访问`/api/courses`接口获取机构的工作区课程
- **发布版本课程查询**：访问`/api/courses/published`接口获取已发布课程
- **版本关联**：通过`/api/courses/{id}/published-version`接口获取特定课程的发布版本

### 权限控制设计

1. **机构用户权限**：
   - 可创建和编辑自己机构的工作区课程
   - 可查看自己机构的发布版本课程
   - 不可直接编辑发布版本课程

2. **审核人员权限**：
   - 可查看待审核的课程
   - 可进行审核操作
   - 可查看所有发布版本课程

3. **管理员权限**：
   - 可管理所有机构的课程
   - 可查看和下线任何发布版本

### 系统扩展性考虑

1. **版本历史记录**：计划添加版本历史功能，记录每次发布的版本
2. **内容比较功能**：支持工作区版本与发布版本的内容比较
3. **草稿管理**：支持工作区版本的多草稿管理
4. **发布调度**：支持定时发布功能

### 购买学习流程
1. 用户浏览课程
2. 下单购买（或免费报名）
3. 支付完成
4. 开始学习
5. 记录学习进度
6. 完成学习后评价

## 集成测试设计

### 权限管理集成测试

为了确保权限管理模块的正确性和稳定性，我们设计了专门的集成测试：

1. **测试环境与配置**
   - 使用H2内存数据库作为测试数据库
   - 使用`@SpringBootTest`加载完整应用上下文
   - 使用`@Import(TestSecurityConfig.class)`导入测试安全配置
   - 启用Bean覆盖：`spring.main.allow-bean-definition-overriding=true`
   - 使用`@ActiveProfiles("test")`激活测试环境配置

2. **测试用户详情服务**
   - 提供`TestUserDetailsService`专用于测试环境
   - 固定的测试用户和权限：
     - admin_test用户：具有ROLE_ADMIN角色和管理权限
     - user_test用户：具有ROLE_USER角色和普通用户权限
   - 通过`@WithUserDetails`注解与`userDetailsService` Bean整合

3. **测试场景**
   - 权限管理CRUD操作：创建、读取、更新、删除权限
   - 用户角色测试：验证不同角色用户的权限边界
   - 资源依赖关系：测试已被角色引用的权限删除限制

4. **测试数据准备**
   - 每个测试开始前创建测试权限和角色
   - 建立测试角色与权限的关联关系
   - 创建具有不同角色的测试用户

5. **测试优化**
   - 权限代码格式规范化：使用大写字母、数字和下划线格式（如`TEST_READ`）
   - 删除权限前先解除权限与角色的关联，确保测试资源可以正确清理
   - 验证正确的HTTP状态码（创建返回201，删除返回204）
   - 每个测试结束后清理所有测试数据，确保测试隔离性

6. **解决的关键问题**
   - 修复了Bean依赖注入问题
   - 优化了资源依赖清理逻辑
   - 统一了权限代码格式标准
   - 确保了测试环境与开发环境的隔离 

## 媒体管理模块

### 媒体上传流程

系统实现了基于分片上传的媒体文件处理流程，支持大文件的高效上传。

![媒体上传流程](./images/media-upload-flow.png)

#### 关键流程

1. **初始化上传**
   - 前端将文件分割成固定大小的分片（默认10MB）
   - 调用服务端接口初始化上传
   - 服务端生成所有分片的预签名URL，并返回给前端

2. **分片上传**
   - 前端使用预签名URL直接上传分片到对象存储
   - 前端负责跟踪所有分片的上传状态和进度
   - 前端收集每个分片上传完成后返回的ETag

3. **完成上传**
   - 所有分片上传完成后，前端调用完成接口
   - 前端提供所有分片的信息（分片编号和ETag）
   - 后端调用对象存储API完成分片合并

4. **取消上传**
   - 用户可随时取消上传过程
   - 后端负责清理对象存储中的临时分片

### API设计

#### 媒体上传相关接口

| 接口                               | 方法   | 描述                     |
|----------------------------------|------|------------------------|
| /api/media/initiate-upload       | POST | 初始化上传，获取分片上传的预签名URL |
| /api/media/{mediaId}/complete    | POST | 完成上传，合并所有分片          |
| /api/media/{mediaId}/cancel      | DELETE | 取消上传，清理临时分片       |
| /api/media/{mediaId}             | DELETE | 删除媒体文件               |

#### 媒体查询接口

| 接口                              | 方法   | 描述           |
|---------------------------------|------|--------------|
| /api/media/list                 | GET  | 获取媒体文件列表    |
| /api/media/{mediaId}            | GET  | 获取媒体文件详细信息  |
| /api/media/usage                | GET  | 获取当前存储使用情况  |

### 前后端交互流程

```mermaid
sequenceDiagram
    participant Client as 客户端
    participant Server as 服务端
    participant S3 as 对象存储
    
    Client->>Server: 初始化上传请求
    Server->>Server: 验证请求，创建媒体记录
    Server->>S3: 初始化分片上传
    S3-->>Server: 返回uploadId
    Server->>Server: 生成所有分片的预签名URL
    Server-->>Client: 返回mediaId, uploadId和所有分片URL
    
    loop 分片上传
        Client->>S3: 上传分片 (使用预签名URL)
        S3-->>Client: 返回ETag
        Client->>Client: 记录分片完成状态
    end
    
    Client->>Server: 提交所有分片信息，完成上传
    Server->>S3: 完成分片上传，合并分片
    S3-->>Server: 上传完成确认
    Server->>Server: 更新媒体状态为COMPLETED
    Server-->>Client: 返回上传完成确认和媒体访问信息
```

### 数据结构设计

```java
// 媒体文件实体
public class Media {
    private Long id;              // 主键ID
    private String originalFilename; // 原始文件名
    private String uniqueKey;     // 唯一标识符
    private String title;         // 标题
    private String description;   // 描述
    private String contentType;   // 内容类型
    private Long fileSize;        // 文件大小(字节)
    private MediaStatus status;   // 媒体状态
    private String url;           // 访问URL
    private Long userId;          // 所属用户ID
    private LocalDateTime createdAt; // 创建时间
    private LocalDateTime updatedAt; // 更新时间
}

// 媒体状态枚举
public enum MediaStatus {
    UPLOADING,    // 上传中
    COMPLETED,    // 上传完成
    CANCELLED,    // 已取消
    ERROR         // 错误状态
}

// 初始化上传请求DTO
public class InitiateUploadDTO {
    private String filename;      // 文件名
    private String contentType;   // 内容类型
    private Long fileSize;        // 文件大小
    private String title;         // 标题
    private String description;   // 描述
    private Integer chunkSize;    // 分片大小(可选)
}

// 初始化上传响应DTO
public class InitiateUploadResponseDTO {
    private Long mediaId;           // 媒体ID
    private String uploadId;        // 上传ID
    private Integer totalParts;     // 总分片数
    private List<PresignedUrlDTO> presignedUrls; // 所有分片的预签名URL
}

// 完成上传请求DTO
public class CompleteUploadDTO {
    private String uploadId;         // 上传ID
    private List<PartInfo> completedParts; // 已完成分片信息
    
    // 分片信息
    public static class PartInfo {
        private Integer partNumber;  // 分片编号
        private String eTag;         // ETag
    }
}
```

## 安全框架设计

系统采用Spring Security作为安全框架，通过JWT令牌实现无状态认证。

### 安全配置设计

**核心组件**：`SecurityConfig`

**配置要点**：
1. **禁用CSRF**：由于使用JWT进行无状态认证，不需要CSRF保护
   ```java
   http.csrf(AbstractHttpConfigurer::disable)
   ```

2. **启用CORS**：支持跨域请求，配置允许的源、方法和头
   ```java
   http.cors(cors -> cors.configurationSource(corsConfigurationSource()))
   ```

3. **无状态会话管理**：不使用session，完全基于JWT令牌
   ```java
   http.sessionManagement(session -> 
       session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
   ```

4. **请求路径安全规则**：
   ```java
   http.authorizeHttpRequests(auth -> auth
       // 公开路径，无需认证
       .requestMatchers("/api/auth/**", "/api/public/**").permitAll()
       // Swagger文档相关路径
       .requestMatchers("/swagger-ui/**", "/v3/api-docs/**").permitAll()
       // 所有其他请求需要认证
       .anyRequest().authenticated()
   )
   ```

5. **JWT认证过滤器**：在用户名密码过滤器之前添加JWT认证过滤器
   ```java
   http.addFilterBefore(jwtAuthenticationFilter, 
       UsernamePasswordAuthenticationFilter.class)
   ```

6. **密码编码器**：使用BCrypt加密算法
   ```java
   @Bean
   public PasswordEncoder passwordEncoder() {
       return new BCryptPasswordEncoder();
   }
   ```

7. **认证管理器**：配置认证管理器Bean
   ```java
   @Bean
   public AuthenticationManager authenticationManager(
           AuthenticationConfiguration configuration) throws Exception {
       return configuration.getAuthenticationManager();
   }
   ```

8. **CORS配置**：详细配置跨域策略
   ```java
   @Bean
   public CorsConfigurationSource corsConfigurationSource() {
       CorsConfiguration configuration = new CorsConfiguration();
       configuration.setAllowedOrigins(Arrays.asList("*"));
       configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
       configuration.setAllowedHeaders(Arrays.asList("Authorization", "Cache-Control", "Content-Type"));
       configuration.setExposedHeaders(Arrays.asList("Authorization"));
       configuration.setMaxAge(3600L);
       
       UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
       source.registerCorsConfiguration("/**", configuration);
       return source;
   }
   ```

### 认证与权限实现

1. **JWT认证过滤器**：`JwtAuthenticationFilter`
   - 提取请求中的JWT令牌
   - 验证令牌有效性和过期状态
   - 从令牌中获取用户身份信息
   - 构建认证对象并设置到安全上下文
   - 处理无效令牌和授权异常

2. **用户详情服务**：`UserDetailsServiceImpl`
   - 根据用户名加载用户详情
   - 加载用户的角色和权限
   - 创建UserDetails对象返回给Spring Security
   - 支持动态权限检查

3. **权限控制注解**：`@PreAuthorize`
   - 控制器方法使用`@PreAuthorize("hasRole('XXX')")`控制访问
   - 服务方法使用`@PreAuthorize("hasPermission(#id, 'ENTITY_TYPE', 'ACTION')")`控制访问
   - 支持基于角色和权限的复合表达式

4. **安全工具类**：`SecurityUtil`
   - 获取当前认证信息
   - 获取当前用户ID
   - 获取当前用户名
   - 获取当前机构ID
   - 获取当前用户权限集合
   - 判断用户是否具有特定角色或权限
   - 判断是否是管理员、机构管理员等

### 安全考量和最佳实践

1. **令牌安全**：
   - 令牌签名使用强密钥
   - 令牌有较短的有效期（1小时）
   - 支持令牌刷新机制
   - 注销时将令牌加入黑名单

2. **密码安全**：
   - 使用BCrypt加密存储密码
   - 设置密码强度要求
   - 支持密码过期和强制修改

3. **API安全**：
   - 敏感接口添加额外验证（如删除操作需要验证密码）
   - 支持操作审计追踪
   - 限制API请求频率防止滥用

4. **数据隔离**：
   - 基于机构ID的数据过滤
   - 确保用户只能访问自己有权限的资源
   - 服务层进行权限验证

5. **异常处理**：
   - 统一的安全异常处理
   - 不泄露敏感错误信息
   - 记录安全相关日志 

## 题目管理系统设计

### 整体架构

题目管理系统是在线课程平台的核心组件之一，负责管理各类题目、题目分组和标签。采用分层设计，包括实体层、数据访问层、服务层和控制层，各层职责明确。

**系统分层设计**：
- **实体层**：定义题目、题目组、题目标签等核心数据结构
- **数据访问层**：提供对实体对象的CRUD操作接口
- **服务层**：实现业务逻辑，处理实体之间的关系
- **控制层**：提供RESTful API，处理请求和响应

### 核心实体设计

1. **Question（题目）**
   - 基本属性：标题、内容、类型、难度、分值等
   - 关联关系：与选项一对多关系，与标签多对多关系
   - 资源隔离：每个题目关联到特定机构
   - 状态管理：支持草稿、发布等状态

2. **QuestionOption（题目选项）**
   - 基本属性：内容、是否正确答案、排序等
   - 关联关系：与题目多对一关系
   - 业务规则：单选题只能有一个正确选项

3. **QuestionGroup（题目组）**
   - 基本属性：名称、描述、创建时间等
   - 关联关系：通过QuestionGroupItem与题目建立多对多关系
   - 资源隔离：每个题目组关联到特定机构
   - 业务功能：支持题目分组管理，与章节关联

4. **QuestionGroupItem（题目组项）**
   - 基本属性：题目ID、题目组ID、排序索引等
   - 扩展属性：可覆盖题目原始难度和分值
   - 业务功能：支持题目在组内排序

5. **QuestionTag（题目标签）**
   - 基本属性：名称、描述、创建时间等
   - 关联关系：通过QuestionTagMapping与题目建立多对多关系
   - 资源隔离：每个标签关联到特定机构
   - 业务功能：支持题目分类和检索

6. **QuestionTagMapping（题目标签映射）**
   - 基本属性：题目ID、标签ID
   - 业务功能：维护题目与标签的多对多关系

### 服务层设计

1. **QuestionService（题目服务）**
   - 题目基本管理：创建、更新、删除、查询题目
   - 题目选项管理：创建、更新选项
   - 题目查询功能：分页查询、基于条件筛选、随机获取
   - 权限验证：确保机构用户只能访问自己的题目

2. **QuestionGroupService（题目组服务）**
   - 题目组管理：创建、更新、删除、查询题目组
   - 题目组项管理：添加题目、移除题目、更新题目顺序
   - 章节关联管理：关联/解除题目组与章节的关联
   - 权限验证：确保机构用户只能访问自己的题目组

3. **QuestionTagService（题目标签服务）**
   - 标签管理：创建、更新、删除、查询标签
   - 标签关联管理：关联/解除题目与标签的关联
   - 标签查询功能：获取机构所有标签、分页查询
   - 权限验证：确保机构用户只能访问自己的标签

### 业务规则

1. **题目类型规则**
   - 单选题：必须且只能有一个正确选项
   - 多选题：可以有多个正确选项
   - 题目类型一旦创建不可更改（避免选项规则冲突）

2. **资源隔离规则**
   - 每个题目、题目组和标签都关联到特定机构
   - 用户只能访问自己机构的资源
   - 跨机构资源共享需要单独的权限管理

3. **题目组项规则**
   - 同一题目可以添加到多个题目组
   - 题目组内题目顺序可自定义
   - 可以在题目组中覆盖题目原始难度和分值

4. **标签关联规则**
   - 同一题目可以关联多个标签
   - 标签可以用于题目筛选和分类
   - 标签关联计数用于统计和权重计算

### 数据访问层设计

1. **QuestionRepository**
   - 基本CRUD操作
   - 根据条件查询题目（类型、难度、关键词等）
   - 随机获取指定数量题目
   - 获取机构所有题目

2. **QuestionOptionRepository**
   - 基本CRUD操作
   - 根据题目ID获取所有选项
   - 批量保存/更新选项

3. **QuestionGroupRepository**
   - 基本CRUD操作
   - 获取机构所有题目组
   - 根据章节ID获取关联题目组

4. **QuestionGroupItemRepository**
   - 基本CRUD操作
   - 根据题目组ID获取所有题目（排序）
   - 批量更新题目顺序

5. **QuestionTagRepository**
   - 基本CRUD操作
   - 获取机构所有标签
   - 根据名称查询标签

6. **QuestionTagMappingRepository**
   - 基本CRUD操作
   - 根据题目ID获取所有标签
   - 根据标签ID获取所有题目

### 性能优化设计

1. **缓存策略**
   - 热门题目和题目组缓存
   - 标签列表缓存
   - 使用Redis进行缓存管理

2. **分页查询优化**
   - 所有列表查询均支持分页
   - 避免大量数据一次性加载
   - 支持动态排序和筛选

3. **批量操作支持**
   - 批量创建/更新题目
   - 批量处理题目与标签关系
   - 减少数据库交互次数

### 接口设计

题目管理系统提供RESTful API，支持各类题目管理操作：

1. **题目管理API**
   - `POST /api/questions` - 创建题目
   - `PUT /api/questions/{id}` - 更新题目
   - `GET /api/questions/{id}` - 获取题目详情
   - `DELETE /api/questions/{id}` - 删除题目
   - `GET /api/questions` - 分页查询题目
   - `GET /api/questions/random` - 随机获取题目

2. **题目组管理API**
   - `POST /api/question-groups` - 创建题目组
   - `PUT /api/question-groups/{id}` - 更新题目组
   - `GET /api/question-groups/{id}` - 获取题目组详情
   - `DELETE /api/question-groups/{id}` - 删除题目组
   - `GET /api/question-groups` - 获取所有题目组
   - `POST /api/question-groups/{id}/items` - 添加题目到题目组
   - `PUT /api/question-groups/{id}/items/{itemId}` - 更新题目组项
   - `DELETE /api/question-groups/{id}/items/{itemId}` - 从题目组移除题目
   - `PUT /api/question-groups/{id}/items/order` - 更新题目顺序
   - `GET /api/question-groups/{id}/items` - 获取题目组中的所有题目

3. **标签管理API**
   - `POST /api/question-tags` - 创建标签
   - `PUT /api/question-tags/{id}` - 更新标签
   - `GET /api/question-tags/{id}` - 获取标签详情
   - `DELETE /api/question-tags/{id}` - 删除标签
   - `GET /api/question-tags` - 获取所有标签
   - `POST /api/questions/{id}/tags/{tagId}` - 关联标签到题目
   - `DELETE /api/questions/{id}/tags/{tagId}` - 从题目移除标签

### 测试策略

题目管理系统的测试采用多层次策略，确保系统功能的正确性和稳定性：

1. **单元测试**
   - 服务层测试：验证业务逻辑正确性
   - 数据访问层测试：验证数据操作正确性
   - 异常处理测试：验证系统在异常情况下的行为

2. **集成测试**
   - API接口测试：验证控制器层功能
   - 服务间交互测试：验证不同服务之间的协作

3. **端到端测试**
   - 业务流程测试：验证完整业务流程
   - 权限控制测试：验证资源隔离和权限管理

### 未来扩展

题目管理系统设计考虑了未来的扩展需求：

1. **题目类型扩展**
   - 支持更多题目类型（如填空题、判断题等）
   - 每种类型可定义特定的选项规则和评分规则

2. **智能题目推荐**
   - 基于用户历史数据推荐合适难度的题目
   - 学习路径优化和知识点覆盖分析

3. **题库共享机制**
   - 跨机构题库共享
   - 题目评价和质量控制机制

4. **题目难度自动分析**
   - 基于用户作答数据动态调整题目难度
   - 题目区分度和有效性分析 

## Excel导入功能设计

### 导入功能概述

系统实现了基于EasyExcel的题目批量导入功能，支持单选题和多选题的导入。

### 核心组件

1. **数据模型**：
   - `QuestionExcelData`: Excel数据模型，包含题目标题、内容、类型、难度等字段
   - `QuestionImportResultVO`: 导入结果模型，包含总数、成功数、失败数等统计信息

2. **处理组件**：
   - `QuestionExcelListener`: Excel解析监听器，负责处理每行数据
   - `QuestionImportServiceImpl`: 导入服务实现，处理文件上传和导入逻辑
   - `QuestionImportController`: 导入控制器，提供文件上传和模板下载接口

3. **异步处理**：
   - 使用`@Async`注解实现异步处理
   - 通过`importTaskExecutor`线程池管理导入任务
   - 支持并发导入，提高处理效率

### 导入流程

1. **模板下载**：
   - 用户获取Excel导入模板
   - 模板包含示例数据和字段说明
   - 支持单选题和多选题示例

2. **文件上传**：
   - 验证文件类型（仅支持.xlsx和.xls）
   - 验证文件大小（最大10MB）
   - 支持异步处理大量数据

3. **数据处理**：
   - 批量处理Excel数据
   - 数据验证和转换
   - 题目和选项的创建
   - 标签关联处理

4. **结果返回**：
   - 返回导入统计信息
   - 包含失败记录详情
   - 记录处理耗时

### 异步处理设计

1. **线程池配置**：
   - 核心线程数：CPU核心数
   - 最大线程数：CPU核心数 * 2
   - 队列容量：500
   - 拒绝策略：CallerRunsPolicy

2. **并发处理**：
   - 支持顺序处理和并发处理两种模式
   - 可配置批处理大小
   - 支持导入任务的取消和中断

### 数据验证规则

1. **基础验证**：
   - 题目标题和内容不能为空
   - 题目类型必须为1(单选题)或2(多选题)
   - 难度级别必须为1-3
   - 分值必须在1-100之间

2. **选项验证**：
   - 至少需要A、B两个选项
   - 单选题只能有一个正确答案
   - 多选题至少需要两个正确答案
   - 正确答案必须对应存在的选项

3. **标签处理**：
   - 支持多个标签（逗号分隔）
   - 自动创建不存在的标签
   - 建立题目与标签的关联

### 性能优化

1. **批量处理**：
   - 默认批处理大小：50条
   - 可通过配置调整批处理大小
   - 支持大数据量分批处理

2. **缓存优化**：
   - 预加载机构标签数据
   - 使用本地缓存减少数据库查询
   - 批量保存减少数据库操作

### 错误处理

1. **错误记录**：
   - 记录失败的行号
   - 记录失败原因
   - 保存题目标题信息

2. **异常处理**：
   - 业务异常处理
   - 文件处理异常
   - 数据验证异常

### 配置项

```yaml
question:
  import:
    max-rows: 1000           # 单次导入最大行数
    default-batch-size: 50   # 默认批处理大小
    concurrent-enabled: true  # 是否启用并发处理
```
</file>

<file path="docs/下一阶段.md">
# 在线课程平台下一阶段开发计划

## 一、需求概述

基于当前系统的核心功能，我们需要开发以下功能模块来完成学习流程：

1. **课程搜索与浏览功能**：使用户能够通过多种条件查找和浏览课程
2. **课程详情与预览功能**：展示课程的详细信息和内容结构，以及试学内容
3. **课程购买功能**：实现付费课程的订单创建和支付流程
4. **学习进度管理功能**：记录和管理用户的学习进度
5. **题目作答与评测功能**：支持用户完成课程中的题目并获得评分和反馈

## 二、详细功能设计

### 1. 课程搜索与浏览功能

#### 1.1 数据模型设计

需要新增以下DTO：

```
CourseSearchDTO {
    String keyword;                // 搜索关键词
    List<Long> categoryIds;        // 分类ID列表
    List<Long> tagIds;             // 标签ID列表
    Integer difficulty;            // 难度级别
    BigDecimal minPrice;           // 最低价格
    BigDecimal maxPrice;           // 最高价格
    String sortField;              // 排序字段(createTime,price,studentCount)
    String sortOrder;              // 排序方向(asc,desc)
    Integer pageNum;               // 页码
    Integer pageSize;              // 每页条数
}
```

搜索结果使用现有的`CourseVO`，但需扩展以下字段：

```
// 在CourseVO中添加
Integer studentCount;              // 学习人数
Double averageRating;              // 平均评分
Integer totalDuration;             // 总时长(分钟)
Boolean isPurchased;               // 当前用户是否已购买(可选)
```

#### 1.2 服务层设计

在`CourseService`中添加搜索方法：

```
Page<CourseVO> searchCourses(CourseSearchDTO searchDTO, Long userId);
```

实现思路：
- 使用JPA的Specification构建动态查询条件
- 支持多字段组合搜索
- 支持分类和标签的联合查询
- 对结果进行分页和排序
- 如果提供了userId，则需标记该用户是否已购买课程

#### 1.3 控制层设计

新增`CourseSearchController`，提供以下接口：

- `POST /api/courses/search`：搜索课程
- `GET /api/courses/popular`：获取热门课程
- `GET /api/courses/recommended`：获取推荐课程
- `GET /api/courses/new`：获取最新课程

### 2. 课程详情与预览功能

#### 2.1 数据模型设计

扩展`CourseStructureVO`，添加以下字段：

```
// 在CourseStructureVO中添加
List<String> learningObjectives;    // 学习目标
List<String> prerequisites;         // 先修要求
Integer totalStudents;              // 学习人数
Double averageRating;               // 平均评分
Boolean isPurchased;                // 当前用户是否已购买

// 在ChapterVO中添加
Boolean isFreePreview;              // 是否可以免费预览
Integer completedSections;          // 已完成小节数(对已购买用户)

// 在SectionVO中添加
Boolean isFreePreview;              // 是否可以免费预览
Boolean isCompleted;                // 是否已完成(对已购买用户)
Integer lastViewProgress;           // 上次观看进度(秒，对已购买用户)
```

新增课程评论DTO：

```
CourseReviewDTO {
    Long courseId;                  // 课程ID
    Integer rating;                 // 评分(1-5)
    String content;                 // 评论内容
}
```

#### 2.2 服务层设计

扩展`CourseService`，添加以下方法：

```
// 获取课程详情(带预览标记)
CourseStructureVO getCourseDetailWithPreview(Long courseId, Long userId);

// 获取课程试学内容
List<SectionVO> getPreviewSections(Long courseId);

// 添加课程评论
CourseReviewVO addCourseReview(CourseReviewDTO reviewDTO, Long userId);

// 获取课程评论
Page<CourseReviewVO> getCourseReviews(Long courseId, Pageable pageable);
```

实现思路：
- 课程详情页需显示课程基本信息、章节结构
- 对未购买用户，标记哪些章节/小节可免费试学
- 对已购买用户，显示学习进度信息
- 课程评论支持分页加载

#### 2.3 控制层设计

新增相关接口：

- `GET /api/courses/{id}/detail`：获取课程详情
- `GET /api/courses/{id}/preview`：获取课程试学内容
- `GET /api/courses/{id}/reviews`：获取课程评论
- `POST /api/courses/{id}/reviews`：添加课程评论

### 3. 课程购买功能

#### 3.1 数据模型设计

新增订单相关实体和DTO：

```
// 订单实体
Order {
    Long id;                        // 订单ID
    String orderNo;                 // 订单号(唯一)
    Long userId;                    // 用户ID
    Long courseId;                  // 课程ID
    BigDecimal amount;              // 订单金额
    Integer status;                 // 订单状态(0-待支付,1-已支付,2-已取消)
    String paymentMethod;           // 支付方式
    LocalDateTime createTime;       // 创建时间
    LocalDateTime payTime;          // 支付时间
    LocalDateTime expireTime;       // 过期时间
}

// 创建订单DTO
CreateOrderDTO {
    Long courseId;                  // 课程ID
    String paymentMethod;           // 支付方式
}

// 订单结果VO
OrderResultVO {
    String orderNo;                 // 订单号
    Long courseId;                  // 课程ID
    String courseTitle;             // 课程标题
    BigDecimal amount;              // 订单金额
    Integer status;                 // 订单状态
    String paymentUrl;              // 支付链接
    LocalDateTime expireTime;       // 过期时间
}

// 用户课程关联实体
UserCourse {
    Long id;                        // ID
    Long userId;                    // 用户ID
    Long courseId;                  // 课程ID
    LocalDateTime purchaseTime;     // 购买时间
    String orderNo;                 // 关联订单号
}
```

#### 3.2 服务层设计

新增`OrderService`：

```
// 创建订单
OrderResultVO createOrder(CreateOrderDTO orderDTO, Long userId);

// 处理支付回调
boolean handlePaymentCallback(PaymentCallbackDTO callbackDTO);

// 查询订单状态
OrderResultVO getOrderStatus(String orderNo, Long userId);

// 取消订单
boolean cancelOrder(String orderNo, Long userId);
```

新增`UserCourseService`：

```
// 检查用户是否已购买课程
boolean hasPurchasedCourse(Long userId, Long courseId);

// 获取用户购买的所有课程
Page<CourseVO> getUserPurchasedCourses(Long userId, Pageable pageable);

// 记录用户购买课程
void recordUserCourse(Long userId, Long courseId, String orderNo);
```

实现思路：
- 订单创建时使用分布式锁防止重复提交
- 使用乐观锁防止并发修改问题
- 订单号生成使用全局唯一算法
- 支付回调需验证签名和订单信息
- 设置订单过期时间，超时自动取消

#### 3.3 控制层设计

新增`OrderController`：

- `POST /api/orders`：创建订单
- `GET /api/orders/{orderNo}`：查询订单状态
- `POST /api/orders/{orderNo}/cancel`：取消订单
- `GET /api/user/courses`：获取用户购买的课程
- `POST /api/payment/callback`：支付回调接口(供第三方支付平台调用)

### 4. 学习进度管理功能

#### 4.1 数据模型设计

新增学习进度相关实体和DTO：

```
// 学习进度实体
LearningProgress {
    Long id;                        // ID
    Long userId;                    // 用户ID
    Long courseId;                  // 课程ID
    Long sectionId;                 // 小节ID
    Integer progress;               // 进度(秒)
    Boolean completed;              // 是否完成
    LocalDateTime lastLearnTime;    // 最后学习时间
}

// 更新进度DTO
UpdateProgressDTO {
    Long courseId;                  // 课程ID
    Long sectionId;                 // 小节ID
    Integer progress;               // 进度(秒)
    Boolean completed;              // 是否完成
}

// 学习统计VO
LearningStatisticsVO {
    Long courseId;                  // 课程ID
    String courseTitle;             // 课程标题
    Integer totalSections;          // 总小节数
    Integer completedSections;      // 已完成小节数
    Double completionRate;          // 完成率
    Integer totalDuration;          // 总学习时长(分钟)
    LocalDateTime lastLearnTime;    // 最后学习时间
}
```

#### 4.2 服务层设计

新增`LearningProgressService`：

```
// 更新学习进度
void updateProgress(UpdateProgressDTO progressDTO, Long userId);

// 获取用户在课程中的学习进度
List<LearningProgress> getCourseProgress(Long userId, Long courseId);

// 获取用户的学习统计
LearningStatisticsVO getLearningStatistics(Long userId, Long courseId);

// 获取最近学习记录
List<LearningProgress> getRecentLearningRecords(Long userId, int limit);
```

实现思路：
- 学习进度更新采用定期保存策略，避免频繁写入
- 使用Redis缓存最近的学习进度，提高读取性能
- 根据学习进度计算完成率和总学习时长
- 支持断点续学功能

#### 4.3 控制层设计

新增`LearningController`：

- `POST /api/learning/progress`：更新学习进度
- `GET /api/learning/progress/{courseId}`：获取课程学习进度
- `GET /api/learning/statistics/{courseId}`：获取学习统计
- `GET /api/learning/recent`：获取最近学习记录

### 5. 课程评价功能

#### 5.1 数据模型设计

```
// 课程评价实体
CourseReview {
    Long id;                        // ID
    Long userId;                    // 用户ID
    Long courseId;                  // 课程ID
    Integer rating;                 // 评分(1-5)
    String content;                 // 评价内容
    Integer likeCount;              // 点赞数
    Boolean isAnonymous;            // 是否匿名
    LocalDateTime createTime;       // 创建时间
    LocalDateTime updateTime;       // 更新时间
}

// 课程评价DTO
CourseReviewDTO {
    Long courseId;                  // 课程ID
    Integer rating;                 // 评分(1-5)
    String content;                 // 评价内容
    Boolean isAnonymous;            // 是否匿名
}

// 课程评价VO
CourseReviewVO {
    Long id;                        // 评价ID
    String userName;                // 用户名(匿名时显示"匿名用户")
    String userAvatar;              // 用户头像
    Integer rating;                 // 评分
    String content;                 // 评价内容
    Integer likeCount;              // 点赞数
    LocalDateTime createTime;       // 创建时间
}

// 课程评价统计VO
CourseReviewStatsVO {
    Double averageRating;           // 平均评分
    Integer totalReviews;           // 总评价数
    Map<Integer, Integer> ratingDistribution; // 评分分布(key:1-5星,value:数量)
    List<String> tags;              // 热门标签
}
```

#### 5.2 服务层设计

新增`CourseReviewService`：

```
// 发表课程评价
CourseReviewVO addReview(CourseReviewDTO reviewDTO, Long userId);

// 修改课程评价
CourseReviewVO updateReview(Long reviewId, CourseReviewDTO reviewDTO, Long userId);

// 删除课程评价
boolean deleteReview(Long reviewId, Long userId);

// 获取课程评价列表
Page<CourseReviewVO> getCourseReviews(Long courseId, String sortBy, Pageable pageable);

// 获取课程评价统计
CourseReviewStatsVO getCourseReviewStats(Long courseId);

// 点赞课程评价
boolean likeReview(Long reviewId, Long userId);
```

实现思路：
- 用户只能对已购买且学习过的课程进行评价
- 每个用户对同一课程只能有一条评价记录
- 评价支持修改和删除
- 评价列表支持按时间、点赞数排序
- 统计数据包括平均评分、评分分布等

#### 5.3 控制层设计

新增`CourseReviewController`：

- `POST /api/courses/{courseId}/reviews`：发表评价
- `PUT /api/courses/reviews/{reviewId}`：修改评价
- `DELETE /api/courses/reviews/{reviewId}`：删除评价
- `GET /api/courses/{courseId}/reviews`：获取评价列表
- `GET /api/courses/{courseId}/review-stats`：获取评价统计
- `POST /api/courses/reviews/{reviewId}/like`：点赞评价

## 三、数据库设计

需要新增以下数据表：

### 1. 订单表(orders)
```sql
CREATE TABLE orders (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    order_no VARCHAR(50) NOT NULL UNIQUE,
    user_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    status INT NOT NULL DEFAULT 0,
    payment_method VARCHAR(20),
    create_time DATETIME NOT NULL,
    pay_time DATETIME,
    expire_time DATETIME,
    INDEX idx_user_id (user_id),
    INDEX idx_order_no (order_no)
);
```

### 2. 用户课程关联表(user_courses)
```sql
CREATE TABLE user_courses (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    purchase_time DATETIME NOT NULL,
    order_no VARCHAR(50),
    UNIQUE KEY unique_user_course (user_id, course_id)
);
```

### 3. 学习进度表(learning_progress)
```sql
CREATE TABLE learning_progress (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    section_id BIGINT NOT NULL,
    progress INT NOT NULL DEFAULT 0,
    completed BOOLEAN NOT NULL DEFAULT FALSE,
    last_learn_time DATETIME NOT NULL,
    UNIQUE KEY unique_user_section (user_id, section_id)
);
```

### 4. 用户答题记录表(user_question_answers)
```sql
CREATE TABLE user_question_answers (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT NOT NULL,
    question_id BIGINT NOT NULL,
    question_group_id BIGINT,
    user_answer TEXT NOT NULL,
    is_correct BOOLEAN NOT NULL,
    answer_time DATETIME NOT NULL,
    INDEX idx_user_question (user_id, question_id)
);
```

### 5. 课程评论表(course_reviews)
```sql
CREATE TABLE course_reviews (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    rating INT NOT NULL,
    content TEXT,
    create_time DATETIME NOT NULL,
    INDEX idx_course_id (course_id)
);
```

## 四、接口设计

### 1. 课程搜索接口

**请求**：POST /api/courses/search

```json
{
  "keyword": "Java",
  "categoryIds": [1, 2],
  "tagIds": [3, 4],
  "difficulty": 2,
  "minPrice": 0,
  "maxPrice": 100,
  "sortField": "createTime",
  "sortOrder": "desc",
  "pageNum": 1,
  "pageSize": 10
}
```

**响应**：
```json
{
  "code": 200,
  "message": "success",
  "data": {
    "total": 100,
    "list": [
      {
        "id": 1,
        "title": "Java高级编程",
        "description": "...",
        "coverImage": "http://...",
        "price": 99.00,
        "discountPrice": 79.00,
        "difficulty": 2,
        "studentCount": 1000,
        "averageRating": 4.5,
        "totalDuration": 300,
        "isPurchased": false
      }
    ],
    "pageNum": 1,
    "pageSize": 10,
    "pages": 10
  }
}
```

### 2. 课程详情接口

**请求**：GET /api/courses/{id}/detail

**响应**：
```json
{
  "code": 200,
  "message": "success",
  "data": {
    "id": 1,
    "title": "Java高级编程",
    "description": "...",
    "coverImage": "http://...",
    "price": 99.00,
    "discountPrice": 79.00,
    "difficulty": 2,
    "learningObjectives": ["掌握Java多线程", "理解JVM原理"],
    "prerequisites": ["Java基础"],
    "totalStudents": 1000,
    "averageRating": 4.5,
    "isPurchased": false,
    "chapters": [
      {
        "id": 1,
        "title": "第一章：Java基础回顾",
        "description": "...",
        "isFreePreview": true,
        "sections": [
          {
            "id": 1,
            "title": "1.1 Java发展历史",
            "description": "...",
            "contentType": "VIDEO",
            "mediaId": 100,
            "duration": 10,
            "isFreePreview": true,
            "isCompleted": false
          }
        ]
      }
    ]
  }
}
```

### 3. 创建订单接口

**请求**：POST /api/orders

```json
{
  "courseId": 1,
  "paymentMethod": "ALIPAY"
}
```

**响应**：
```json
{
  "code": 200,
  "message": "success",
  "data": {
    "orderNo": "202204010001",
    "courseId": 1,
    "courseTitle": "Java高级编程",
    "amount": 79.00,
    "status": 0,
    "paymentUrl": "http://...",
    "expireTime": "2022-04-01T12:30:00"
  }
}
```

### 4. 更新学习进度接口

**请求**：POST /api/learning/progress

```json
{
  "courseId": 1,
  "sectionId": 1,
  "progress": 120,
  "completed": false
}
```

**响应**：
```json
{
  "code": 200,
  "message": "success",
  "data": true
}
```

### 5. 提交题组答案接口

**请求**：POST /api/questions/group/submit

```json
{
  "questionGroupId": 1,
  "answers": [
    {
      "questionId": 1,
      "answer": "A"
    },
    {
      "questionId": 2,
      "answer": "B,C"
    }
  ]
}
```

**响应**：
```json
{
  "code": 200,
  "message": "success",
  "data": {
    "questionGroupId": 1,
    "totalQuestions": 2,
    "correctCount": 1,
    "score": 50.0,
    "details": [
      {
        "questionId": 1,
        "isCorrect": true,
        "correctAnswer": "A",
        "analysis": "..."
      },
      {
        "questionId": 2,
        "isCorrect": false,
        "correctAnswer": "B,D",
        "analysis": "..."
      }
    ]
  }
}
```

## 五、实现顺序与优先级

为了快速实现MVP，建议按以下顺序开发功能：

### 1. 第一阶段（基础功能）

1. **课程搜索与浏览功能**
   - 实现课程搜索接口
   - 实现课程分类和标签筛选
   - 开发热门课程和最新课程接口

2. **课程详情与预览功能**
   - 实现课程详情接口
   - 开发课程结构展示
   - 实现试学小节标记

### 2. 第二阶段（购买功能）

3. **课程购买功能**
   - 实现订单创建接口
   - 开发订单状态查询
   - 实现支付回调处理
   - 开发用户购买记录接口

### 3. 第三阶段（学习功能）

4. **学习进度管理功能**
   - 实现学习进度保存接口
   - 开发学习统计接口
   - 实现最近学习记录接口

5. **课程评价功能**
   - 实现课程评价接口
   - 开发评价列表和统计功能

### 4. 第四阶段（题目作答与评测功能）

6. **题目作答与评测功能**
   - 实现题目作答接口
   - 开发题组提交接口
   - 实现作答历史和错题集功能

## 六、技术注意事项

### 1. 幂等性设计

为确保系统稳定性，需要实现以下幂等性设计：

1. **订单创建**：
   - 使用订单号作为唯一标识，确保同一订单不会重复创建
   - 在订单表中对orderNo字段添加唯一索引
   - 支付回调使用事务+状态检查确保不会重复处理
   - 使用乐观锁控制订单状态变更

2. **学习进度更新**：
   - 使用乐观锁或最后更新时间戳确保并发更新不会覆盖
   - 对频繁更新的进度采用合并更新策略
   - 在更新前检查时间戳，仅保存最新进度

3. **答题记录**：
   - 使用唯一约束(用户ID+题目ID+提交时间)防止重复提交
   - 答题结果一旦提交不可修改
   - 使用事务确保答题记录和统计数据的一致性

4. **课程评价**：
   - 使用唯一约束(用户ID+课程ID)确保每个用户只能评价一次
   - 评价修改时使用乐观锁防止并发更新
   - 点赞操作使用唯一约束(用户ID+评价ID)防止重复点赞

### 2. 性能优化

1. **缓存策略**：
   - 热门课程列表缓存
   - 课程详情和结构缓存
   - 用户学习进度缓存

2. **延迟加载**：
   - 课程详情页不同模块可分开加载
   - 评论和学习统计可异步加载

3. **异步处理**：
   - 学习进度更新可异步处理
   - 统计数据计算可异步更新

### 3. 安全措施

1. **权限控制**：
   - 严格校验用户对课程的访问权限
   - 免费内容和付费内容区分控制

2. **数据验证**：
   - 支付回调验证签名和订单信息
   - 学习进度和答题记录验证用户身份

## 七、后续扩展方向

完成MVP后，可考虑以下扩展功能：

1. **学习路径**：设计学习路径功能，推荐相关课程
2. **学习社区**：增加讨论区，支持学习笔记和问答
3. **学习提醒**：设置学习目标和定时提醒
4. **学习报告**：生成详细的学习报告和证书
5. **个性化推荐**：基于用户学习历史推荐课程
6. **课程评价分析**：基于自然语言处理的评价分析，自动提取关键词和情感倾向
7. **课程改进建议**：基于用户评价和学习数据，为讲师提供课程改进建议

## 八、评分和学习人数功能开发计划

作为平台的重要社交证明和用户参考指标，评分和学习人数功能将在近期规划开发。以下是具体的开发计划：

### 1. 学习人数统计功能

#### 1.1 功能定义

- **学习人数计算**：统计每门课程的累计学习人数，包括已付费用户和试学用户
- **数据展示**：在课程卡片、课程详情页显示学习人数
- **排序功能**：支持按学习人数对课程进行排序
- **热门课程标识**：基于学习人数自动标记热门课程

#### 1.2 技术实现

```
// 在Course实体中增加字段
Integer studentCount = 0;  // 学习人数
LocalDateTime lastStudentCountUpdateTime;  // 最后更新时间

// 增加课程学习记录表
CREATE TABLE course_learning_records (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT NOT NULL,
    course_id BIGINT NOT NULL,
    first_view_time DATETIME NOT NULL,
    is_purchased BOOLEAN DEFAULT FALSE,
    UNIQUE KEY unique_user_course (user_id, course_id)
);

// 定时任务每日更新课程学习人数
@Scheduled(cron = "0 0 2 * * ?")  // 每天凌晨2点执行
public void updateCoursesStudentCount() {
    // 计算每门课程的实际学习人数
    // 更新course表中的studentCount字段
}
```

#### 1.3 UI实现

- 在课程卡片中增加学习人数显示
- 增加"XX人已学习"的标签
- 热门课程标记："热门"标签或火焰图标

#### 1.4 开发优先级

- 优先级：**中高**
- 计划开发周期：2周
- 依赖模块：用户系统、课程系统

### 2. 课程评分功能

#### 2.1 功能定义

- **评分机制**：用户可对已购买且学习过的课程进行1-5星评分
- **平均分计算**：实时计算课程的平均评分
- **评分分布**：展示课程的评分分布情况（1星到5星各占比例）
- **评分筛选**：支持按评分高低筛选课程

#### 2.2 技术实现

```
// 在Course实体中增加字段
Double averageRating = 0.0;  // 平均评分
Integer ratingCount = 0;  // 评分数量
Map<Integer, Integer> ratingDistribution = new HashMap<>();  // 评分分布

// 评分更新逻辑
public void updateCourseRating(Long courseId) {
    List<CourseReview> reviews = courseReviewRepository.findByCourseId(courseId);
    
    double totalScore = 0;
    Map<Integer, Integer> distribution = new HashMap<>();
    
    for (CourseReview review : reviews) {
        totalScore += review.getRating();
        distribution.put(review.getRating(), 
                         distribution.getOrDefault(review.getRating(), 0) + 1);
    }
    
    Course course = courseRepository.findById(courseId).orElseThrow();
    course.setAverageRating(reviews.isEmpty() ? 0 : totalScore / reviews.size());
    course.setRatingCount(reviews.size());
    course.setRatingDistribution(distribution);
    
    courseRepository.save(course);
}
```

#### 2.3 UI实现

- 课程卡片中显示星级评分
- 详情页中展示评分分布图表
- 课程搜索结果中可按评分排序
- 高评分课程标记："好评如潮"标签

#### 2.4 开发优先级

- 优先级：**中高**
- 计划开发周期：3周
- 依赖模块：用户系统、课程系统、课程评价系统

### 3. 数据分析和展示

#### 3.1 数据看板

- 平台整体学习数据统计
- 课程各项指标排行榜
- 用户参与度分析

#### 3.2 推荐算法优化

- 基于学习人数和评分优化课程推荐
- 个性化推荐中增加社交证明因素
- "受欢迎程度"作为推荐权重因子
</file>

<file path="docs/下一阶段开发需求.md">
# 在线课程平台下一阶段开发需求

## 当前系统状态

目前系统已经实现了以下功能：

1. **用户认证模块**
   - 用户注册（包含邮箱验证）
   - 用户登录
   - 简化的令牌刷新（只检查黑名单）
   - 用户注销

2. **邮箱验证模块**
   - 邮件服务集成
   - 验证码生成和验证
   - Redis存储验证码
   - 邮件模板支持

3. **权限管理模块**
   - 用户管理
   - 角色管理
   - 权限管理
   - 基于角色的权限控制（RBAC简化版）
   - 控制器使用`@PreAuthorize("hasRole('XXX')")`注解控制访问

4. **用户自身管理模块**
   - 获取当前用户信息
   - 更新个人资料
   - 修改密码
   - 上传头像（MinIO存储）
   - 更新邮箱（验证码验证）
   - 专用邮箱更新验证码

5. **机构管理模块**
   - 机构申请功能
     - 机构入驻申请
     - 申请状态查询
     - 申请审核功能
     - 审核结果通知
   - 机构用户注册
     - 机构注册码生成
     - 机构用户注册
     - 邮箱验证
     - 角色分配

6. **基础设施**
   - JWT认证
   - Redis缓存
   - H2测试数据库
   - 全局异常处理
   - API文档支持
   - 文件存储服务

7. **系统优化**
   - 文件存储优化：公开资源（如用户头像）使用永久URL而非预签名URL
   - 存储效率优化：头像更新时自动删除旧文件，避免存储空间浪费
   - 架构优化：严格遵循分层架构，确保Controller不直接依赖基础设施服务
   - 文件上传大小限制：配置文件上传最大大小为100MB
   - 异常处理优化：业务逻辑统一在Service层处理并转换为合适的异常
   - 测试环境优化：解决Bean冲突和依赖注入问题
   - 分片上传实现：支持大文件上传和断点续传

## 已完成内容

### 架构优化
- [x] 严格遵循分层架构
  - [x] Controller层只负责接收请求和返回响应
  - [x] Service层封装所有业务逻辑和基础设施交互
  - [x] Repository层专注于数据访问
- [x] 代码重构
  - [x] 移除Controller直接依赖基础设施服务
  - [x] 优化异常处理流程
  - [x] 优化令牌刷新机制，确保从数据库获取最新用户角色
  - [x] 完善令牌刷新相关的单元测试

## 下一阶段开发任务

根据项目进度和系统需求，下一阶段的开发任务将集中在课程管理功能和媒体资源管理上。

### 零、媒体资源管理模块（首要优先级）

✓ 实现平台核心功能中的媒体资源（特别是视频）管理，为课程内容提供基础。

#### 1. 媒体资源实体设计

**实体类设计**:
- ✓ `Media`: 媒体资源基本信息
  - ✓ 基本属性：ID、标题、描述、类型(视频/音频/文档)、大小、原始文件名
  - ✓ 存储属性：存储路径、状态(上传中/已完成/失败)
  - ✓ 关系映射：所属机构ID、上传者ID（仅作记录）
  - ✓ 时间属性：上传时间、最后访问时间

**实现步骤**:
- ✓ 创建媒体资源实体类及关联关系（明确归属于机构而非用户）
- ✓ 实现对应的Repository接口
- ✓ 设计媒体服务接口及实现类

#### 2. 独立的存储配额服务设计

**实体与服务设计**:
- ✓ `StorageQuota`: 存储配额实体
  - ✓ 基本属性：ID、配额类型(视频/文档等)、总配额大小、已使用大小
  - ✓ 关系映射：所属机构ID
  - ✓ 时间属性：创建时间、更新时间、过期时间(可选，支持临时扩容)
- ✓ `StorageQuotaService`: 独立的存储配额服务
  - ✓ 配额检查方法
  - ✓ 配额更新方法
  - ✓ 配额查询方法
  - ✓ 配额调整方法(增加/减少)

**功能设计**:
- ✓ 支持多种配额类型（视频、文档等）
- ✓ 提供配额检查的统一接口
- ✓ 支持配额使用情况查询
- ✓ 支持配额计算和更新
- ✓ 预留配额调整和临时扩容的接口

**实现步骤**:
- ✓ 创建`StorageQuota`实体类及其Repository
- ✓ 设计`StorageQuotaService`接口及其实现类
- ✓ 实现配额检查、更新和查询逻辑
- ✓ 提供配额使用情况的API接口

#### 3. 分片上传实现

**API设计**:
- ✓ `POST /api/media/initiate-upload` - 初始化分片上传
- ✓ `GET /api/media/upload-status/{id}` - 获取上传状态
- ✓ `POST /api/media/{id}/part-completed` - 通知分片完成
- ✓ `POST /api/media/{id}/complete-upload` - 完成上传
- ✓ `DELETE /api/media/{id}/cancel-upload` - 取消上传
- ✓ `POST /api/media/{id}/resume-upload` - 恢复上传（断点续传）

**实现步骤**:
- ✓ 集成S3 API实现分片上传
- ✓ 创建上传状态跟踪机制
- ✓ 实现断点续传支持
- ✓ 提供上传状态查询接口

#### 4. 视频访问策略

**API设计**:
- ✓ `GET /api/media/{id}` - 获取媒体资源元数据
- ✓ `GET /api/media/{id}/access` - 获取临时访问URL
- ✓ `GET /api/storage/quota/{institutionId}` - 获取存储配额信息
- ✓ `GET /api/storage/quota/{institutionId}/details` - 获取存储配额详细信息

**实现步骤**:
- ✓ 实现媒体资源元数据查询接口
- ✓ 实现临时URL生成逻辑
- ✓ 实现存储配额查询接口

#### 5. 实现规划

**MVP阶段（已完成）**:
- ✓ 基础媒体实体类及关联
- ✓ 独立的存储配额服务
- ✓ 基本的分片上传功能
- ✓ 媒体文件的基本访问控制

**后续扩展（未来计划）**:
- [ ] 视频转码功能（使用消息队列）
- [ ] 更细粒度的访问控制
- [ ] 流媒体支持（HLS/DASH）
- [ ] 视频元数据提取（长度、分辨率等）
- [ ] CDN集成
- [ ] 扩展配额服务支持更多资源类型和计费集成

## 前端开发规划

基于当前后端API的实现情况，前端开发应当优先实现以下功能：

### 1. 用户认证与机构管理
- 用户注册和登录界面
- 机构申请和审核流程界面
- 用户个人资料管理
- 机构用户注册和管理

### 2. 媒体资源管理（核心优先级）
- 大文件分片上传组件
  - 文件选择与预览
  - 分片上传进度展示
  - 断点续传支持
  - 上传取消功能
- 存储配额管理面板
  - 配额使用情况可视化展示
  - 各类型资源配额详情
  - 配额使用趋势图表
- 媒体库管理界面
  - 媒体资源列表与筛选
  - 媒体详情预览
  - 视频播放器集成
  - 资源管理操作（删除、重命名等）

### 3. 技术选型建议
- 前端框架：React/Vue.js
- UI组件库：Ant Design/Element UI
- 状态管理：Redux/Vuex
- 上传组件：自定义分片上传组件（基于现有API）
- 视频播放器：Video.js/Plyr/AliPlayer（支持HLS）
- 图表库：ECharts/Chart.js（用于配额展示）

### 4. 分片上传组件实现要点
- 使用File API进行文件分片
- 调用后端API获取分片上传URL
- 使用XMLHttpRequest或Fetch API上传分片
- 实现上传进度跟踪
- 支持断点续传（保存上传状态）
- 上传完成后合并分片
- 错误处理和重试机制

### 5. 前端开发优先级
1. 认证与基础UI框架搭建
2. 媒体上传组件（分片上传核心功能）
3. 配额管理面板
4. 媒体库管理界面
5. 课程管理界面（待后端API实现）

### 一、课程管理基础模块（高优先级）

实现平台的核心业务功能，包括课程的管理、分类和标签等。

#### 1. 课程基础实体设计

**实体类设计**:
- `Course`: 课程基本信息
- `Chapter`: 课程章节
- `Lesson`: 课程小节
- `Resource`: 课程资源（视频、文档等）
- `Category`: 课程分类
- `Tag`: 课程标签
- `CourseTag`: 课程与标签关联

**实现步骤**:
1. 创建上述实体类及其关联关系
2. 设计合理的字段和约束
3. 实现对应的Repository接口

#### 2. 课程分类管理API

**API设计**:
- `GET /api/categories` - 获取分类列表
- `GET /api/categories/{id}` - 获取分类详情
- `POST /api/categories` - 创建分类（管理员）
- `PUT /api/categories/{id}` - 更新分类（管理员）
- `DELETE /api/categories/{id}` - 删除分类（管理员）

**实现步骤**:
1. 创建`CategoryController`及相关DTO/VO类
2. 实现`CategoryService`及其实现类
3. 实现分类的树形结构处理逻辑

#### 3. 课程标签管理API

**API设计**:
- `GET /api/tags` - 获取标签列表
- `GET /api/tags/{id}` - 获取标签详情
- `POST /api/tags` - 创建标签（管理员）
- `PUT /api/tags/{id}` - 更新标签（管理员）
- `DELETE /api/tags/{id}` - 删除标签（管理员）

**实现步骤**:
1. 创建`TagController`及相关DTO/VO类
2. 实现`TagService`及其实现类
3. 实现标签的热门标签推荐逻辑

#### 4. 课程基础管理API

**API设计**:
- `GET /api/courses` - 获取课程列表（支持分页、筛选）
- `GET /api/courses/{id}` - 获取课程详情
- `POST /api/courses` - 创建课程（机构用户和管理员）
- `PUT /api/courses/{id}` - 更新课程（课程创建者和管理员）
- `DELETE /api/courses/{id}` - 删除课程（课程创建者和管理员）
- `GET /api/courses/{id}/chapters` - 获取课程章节
- `POST /api/courses/{id}/chapters` - 创建课程章节

**实现步骤**:
1. 创建`CourseController`及相关DTO/VO类
2. 实现`CourseService`及其实现类
3. 实现课程的搜索和筛选逻辑
4. 实现课程内容管理逻辑

#### 5. 课程管理模块详细设计

##### 5.1 实体结构详细设计

**Course(课程)实体**:
```java
@Entity
@Table(name = "courses")
public class Course extends BaseEntity {
    // 课程基本信息
    private String title;                      // 课程标题
    private String description;                // 课程描述
    private String coverImage;                 // 封面图片地址
    private Integer status;                    // 课程状态: 0-草稿，1-待审核，2-审核中，3-已拒绝，4-已发布，5-已下线
    
    // 关联机构
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "institution_id", nullable = false)
    private Institution institution;           // 所属机构
    
    // 创建者
    @Column(name = "creator_id")
    private Long creatorId;                    // 创建者ID
    
    // 审核相关
    private Integer reviewStatus;              // 审核状态
    private Long reviewerId;                   // 审核人ID
    private LocalDateTime reviewedAt;          // 审核时间
    private String reviewComment;              // 审核意见
    
    // 发布版本信息
    private Long publishedVersionId;           // 当前发布版本ID
    private Boolean isPublishedVersion;        // 是否为发布版本
    private Integer version;                   // 版本号
    private Integer versionType;               // 版本类型: 0-草稿，1-审核版，2-发布版
    
    // 分类和标签关联
    @ManyToOne
    @JoinColumn(name = "category_id")
    private Category category;                 // 课程分类
    
    @ManyToMany
    @JoinTable(
        name = "course_tags",
        joinColumns = @JoinColumn(name = "course_id"),
        inverseJoinColumns = @JoinColumn(name = "tag_id")
    )
    private Set<Tag> tags = new HashSet<>();   // 课程标签
    
    // 章节列表
    @OneToMany(mappedBy = "course", cascade = CascadeType.ALL, orphanRemoval = true)
    @OrderBy("orderIndex ASC")
    private List<Chapter> chapters = new ArrayList<>();   // 课程章节
}
```

**Chapter(章节)实体**:
```java
@Entity
@Table(name = "chapters")
public class Chapter extends BaseEntity {
    private String title;                      // 章节标题
    private String description;                // 章节描述
    private Integer orderIndex;                // 排序索引
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "course_id", nullable = false)
    private Course course;                     // 所属课程
    
    @OneToMany(mappedBy = "chapter", cascade = CascadeType.ALL, orphanRemoval = true)
    @OrderBy("orderIndex ASC")
    private List<Section> sections = new ArrayList<>();   // 小节列表
}
```

**Section(小节)实体**:
```java
@Entity
@Table(name = "sections")
public class Section extends BaseEntity {
    private String title;                      // 小节标题
    private String description;                // 小节描述
    private Integer orderIndex;                // 排序索引
    private String contentType;                // 内容类型(video, document, text等)
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "chapter_id", nullable = false)
    private Chapter chapter;                   // 所属章节
    
    // 小节资源关联
    @OneToMany(mappedBy = "section", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<SectionResource> resources = new ArrayList<>();  // 小节资源
}
```

**SectionResource(小节资源)实体**:
```java
@Entity
@Table(name = "section_resources")
public class SectionResource extends BaseEntity {
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "section_id", nullable = false)
    private Section section;                   // 所属小节
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "media_id", nullable = false)
    private Media media;                       // 关联的媒体资源
    
    private String resourceType;               // 资源类型(主要内容、补充材料等)
    private Integer orderIndex;                // 排序索引
}
```

**Category(分类)实体**:
```java
@Entity
@Table(name = "categories")
public class Category extends BaseEntity {
    private String name;                       // 分类名称
    private String code;                       // 分类编码(唯一标识)
    private String description;                // 分类描述
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "parent_id")
    private Category parent;                   // 父分类
    
    @OneToMany(mappedBy = "parent")
    private List<Category> children = new ArrayList<>();  // 子分类
    
    private Integer level;                     // 层级
    private Integer orderIndex;                // 排序索引
    private Boolean enabled = true;            // 是否启用
    private String icon;                       // 分类图标/图片
}
```

**Tag(标签)实体**:
```java
@Entity
@Table(name = "tags")
public class Tag extends BaseEntity {
    @Column(nullable = false, unique = true)
    private String name;                       // 标签名称
    
    private String description;                // 标签描述
    private Integer useCount = 0;              // 使用次数
    
    @ManyToMany(mappedBy = "tags")
    private Set<Course> courses = new HashSet<>();  // 关联的课程
}
```

##### 5.2 课程审核与发布流程

###### 5.2.1 状态流转设计

**课程状态(CourseStatus)枚举**:
```java
public enum CourseStatus {
    DRAFT(0, "草稿"),
    PENDING_REVIEW(1, "待审核"),
    REVIEWING(2, "审核中"),
    REJECTED(3, "已拒绝"),
    PUBLISHED(4, "已发布"),
    UNPUBLISHED(5, "已下线");
    
    private Integer value;
    private String description;
    // 构造方法和getter方法...
}
```

**版本类型(CourseVersion)枚举**:
```java
public enum CourseVersion {
    DRAFT(0, "草稿"),
    REVIEW(1, "审核版本"),
    PUBLISHED(2, "发布版本");
    
    private Integer value;
    private String description;
    // 构造方法和getter方法...
}
```

###### 5.2.2 审核流程

1. **提交审核流程**:
   - 机构用户提交课程审核时，系统创建课程的副本作为审核版本
   - 原课程保持"草稿"状态，作为工作副本可继续编辑
   - 副本进入"待审核"状态，等待审核员处理
   - 审核副本与原课程通过publishedVersionId关联

2. **审核处理流程**:
   - 审核员领取审核任务，课程状态变为"审核中"
   - 审核员可访问课程所有内容，包括视频等资源（通过与MediaService整合）
   - 审核通过/拒绝后，记录审核结果、时间和审核人信息
   - 审核通过则标记为"已发布"，拒绝则标记为"已拒绝"

3. **发布更新流程**:
   - 审核通过后，将审核版本标记为发布版本(isPublishedVersion=true)
   - 更新原课程的publishedVersionId指向发布版本ID
   - 用户访问课程时，系统自动导向publishedVersionId指向的发布版本

###### 5.2.3 资源访问流程

1. **审核员预览资源**:
   - 审核员访问课程小节资源时，系统生成临时访问URL
   - 调用已有的MediaService.getMediaAccessUrl方法生成资源访问链接
   - 资源访问权限基于审核员角色授权

2. **学习者访问资源**:
   - 学习者只能访问已发布课程
   - 系统同样通过MediaService生成临时URL
   - 确保资源访问体验一致，且安全可控

##### 5.3 分类与标签管理

###### 5.3.1 分类管理

1. **分类树结构**:
   - 支持多级分类（学科→专业→方向）
   - 每个分类有唯一code标识
   - 支持分类的启用/禁用状态

2. **分类管理权限**:
   - 分类创建、更新、删除仅限管理员和审核员
   - 机构用户只能选择现有分类关联课程
   - 分类删除前检查关联课程，有关联则禁止删除

3. **分类树操作方法**:
   - 获取完整分类树
   - 获取特定层级分类
   - 获取特定分类及其子分类

###### 5.3.2 标签管理

1. **标签特性**:
   - 扁平化管理（不分层级）
   - 统计标签使用次数，支持热门标签功能
   - 标签名称唯一

2. **标签管理权限**:
   - 标签创建、更新、删除仅限管理员和审核员
   - 机构用户可为课程选择或取消关联标签
   - 标签删除前检查关联课程，有关联则禁止删除

3. **标签使用计数**:
   - 关联课程时自动增加使用计数
   - 取消关联时自动减少使用计数
   - 支持按使用次数排序，展示热门标签

##### 5.4 用户角色与权限设计

###### 5.4.1 角色定义

1. **系统管理员**(ADMIN):
   - 拥有平台所有权限
   - 可管理所有课程、分类、标签
   - 可执行任何操作，不受限制

2. **内容审核员**(REVIEWER):
   - 负责课程内容审核
   - 可管理分类和标签
   - 无法编辑课程内容，只能审核

3. **机构管理员**(INSTITUTION_ADMIN):
   - 管理机构下所有课程
   - 提交课程审核
   - 管理机构用户

4. **机构教师**(INSTITUTION_TEACHER):
   - 创建和编辑自己的课程
   - 提交自己课程的审核
   - 无法管理他人课程

5. **学习者**(STUDENT):
   - 浏览和学习已发布课程
   - 无课程管理权限

###### 5.4.2 权限控制逻辑

1. **课程创建权限**:
   - 机构用户(INSTITUTION_ADMIN, INSTITUTION_TEACHER)可创建课程
   - 课程必须关联到用户所属机构
   - 系统记录创建者ID

2. **课程编辑权限**:
   - 课程创建者可编辑自己创建的课程
   - 机构管理员可编辑机构下所有课程
   - 系统管理员可编辑任何课程

3. **课程审核权限**:
   - 仅ADMIN和REVIEWER可审核课程
   - 审核操作记录审核人ID和时间

4. **分类和标签管理权限**:
   - 仅ADMIN和REVIEWER可管理分类和标签
   - 其他用户只能使用已有分类和标签

5. **资源访问权限**:
   - 学习者只能访问已发布课程资源
   - 课程创建者可访问自己课程的所有资源
   - 审核员和管理员可访问任何资源

##### 5.5 开发实施计划

按以下顺序开发课程管理模块：

1. **基础实体层**(预计2周)
   - 实现Course, Chapter, Section等实体类
   - 实现对应Repository接口
   - 单元测试确保数据访问正确

2. **课程基础功能**(预计2周)
   - 实现CourseService课程基础CRUD
   - 章节和小节管理功能
   - 课程大纲管理

3. **分类和标签功能**(预计1周)
   - 实现CategoryService和TagService
   - 分类树管理功能
   - 标签管理和热门标签功能

4. **课程审核流程**(预计1.5周)
   - 实现CourseReviewService
   - 课程状态流转逻辑
   - 审核和发布机制

5. **资源访问集成**(预计1周)
   - 与MediaService集成
   - 课程资源关联功能
   - 资源访问权限控制

6. **API层开发**(预计1.5周)
   - 课程相关Controller
   - 分类和标签API
   - 审核流程API

7. **权限控制实现**(预计1周)
   - 基于角色的权限控制
   - 数据隔离实现
   - 安全测试

##### 5.6 注意事项与技术考量

1. **性能优化**:
   - 课程大纲使用延迟加载
   - 分类树适当缓存
   - 资源URL按需生成

2. **并发控制**:
   - 使用乐观锁(@Version)防止并发编辑冲突
   - 审核操作添加状态检查和锁定机制

3. **安全考虑**:
   - 严格的权限和数据隔离
   - 资源访问URL设置合理过期时间
   - 防止跨机构数据访问

4. **扩展性设计**:
   - 预留测验和作业模块接口
   - 考虑未来支持课程评价功能
   - 设计灵活的内容类型系统

### 二、内容审核功能（次高优先级）

实现课程内容审核功能，确保平台内容质量。

#### 1. 审核流程设计

**功能设计**:
- 课程内容提交审核
- 审核人员审核内容
- 审核结果通知
- 驳回原因反馈

**实现步骤**:
1. 设计审核相关实体类
2. 设计审核流程和状态机
3. 实现审核服务和API接口

#### 2. 审核管理API

**API设计**:
- `POST /api/courses/{id}/submit` - 提交课程审核
- `GET /api/reviews` - 获取待审核列表（审核人员）
- `PUT /api/reviews/{id}` - 更新审核状态（审核人员）
- `GET /api/reviews/history` - 获取审核历史记录

**实现步骤**:
1. 创建`ReviewController`及相关DTO/VO类
2. 实现`ReviewService`及其实现类
3. 实现审核流程和权限控制

## 技术实现要点

1. **安全性考虑**
   - 严格的权限控制，确保只有授权用户能创建和管理课程
   - 文件上传安全验证，防止恶意文件

2. **性能优化**
   - 课程列表和搜索的缓存策略
   - 文件资源的CDN加速策略

3. **权限控制**
   - 基于角色的课程管理权限
   - 基于机构的资源隔离

4. **数据验证**
   - 严格验证课程内容的完整性和合法性
   - 确保资源引用的有效性

## 开发优先级

1. ✓ 完成权限管理功能及测试
2. ✓ 优化JWT令牌，仅包含角色信息
3. ✓ 实现机构申请和注册功能
   - ✓ 机构申请流程
   - ✓ 机构审核流程
   - ✓ 机构用户注册
4. 实现媒体资源管理（最高优先级）
   - 媒体实体设计与管理
   - 独立的存储配额服务
   - 分片上传实现
   - 媒体访问控制
5. 完成课程基础实体设计（高优先级）
6. 实现课程分类和标签管理（高优先级）
7. 实现课程基础管理功能（高优先级）
8. 实现课程内容结构管理（中优先级）
9. 实现内容审核流程（中优先级）
10. 【未来】考虑完善基于权限的细粒度访问控制

通过以上功能的实现，可以搭建起平台的核心课程管理框架和媒体资源管理系统，为后续的用户学习、评价、订单等功能提供基础。
</file>

<file path="docs/项目结构说明.md">
# 项目结构说明

本项目采用分层架构，遵循最佳实践进行组织：

```
src/main/java/com/zhangziqi/online_course_mine
├── config                 # 配置类
│   ├── security          # 安全相关配置
│   ├── redis            # Redis相关配置
│   ├── minio            # MinIO相关配置
│   ├── s3               # S3 API相关配置
├── constant               # 常量定义
├── controller             # 控制器层
│   ├── AuthController           # 认证控制器
│   ├── UserController           # 用户管理控制器
│   ├── RoleController           # 角色管理控制器
│   ├── PermissionController     # 权限管理控制器
│   ├── InstitutionController    # 机构申请控制器
│   ├── InstitutionAuthController # 机构用户注册控制器
│   ├── InstitutionMemberController # 机构成员管理控制器
│   ├── ReviewerInstitutionController # 机构审核控制器
│   ├── StorageQuotaController   # 存储配额控制器
│   ├── MediaController          # 媒体资源控制器
│   ├── QuestionController       # 题目管理控制器
│   ├── QuestionGroupController  # 题目组管理控制器
│   ├── QuestionTagController    # 题目标签管理控制器
│   ├── CourseController         # 课程管理控制器
│   ├── ChapterController        # 章节管理控制器
│   └── SectionController        # 小节管理控制器
├── exception              # 自定义异常
├── model                  # 数据模型
│   ├── entity           # 实体类
│   │   ├── User.java           # 用户实体
│   │   ├── Role.java           # 角色实体
│   │   ├── Permission.java     # 权限实体
│   │   ├── Institution.java    # 机构实体
│   │   ├── StorageQuota.java   # 存储配额实体
│   │   ├── Media.java          # 媒体资源实体
│   │   └── InstitutionApplication.java # 机构申请实体
│   │   ├── Question.java       # 题目实体
│   │   ├── QuestionOption.java # 题目选项实体
│   │   ├── QuestionGroup.java  # 题目组实体
│   │   ├── QuestionGroupItem.java # 题目组项实体
│   │   ├── QuestionTag.java    # 题目标签实体
│   │   ├── QuestionTagMapping.java # 题目标签映射实体
│   │   ├── Course.java         # 课程实体
│   │   ├── Chapter.java        # 章节实体
│   │   ├── Section.java        # 小节实体
│   │   ├── SectionResource.java # 小节资源实体
│   │   ├── SectionQuestionGroup.java # 小节题目组实体
│   │   ├── Category.java       # 课程分类实体
│   │   └── Tag.java            # 课程标签实体
│   ├── dto              # 数据传输对象
│   │   ├── auth              # 认证相关DTO
│   │   ├── user              # 用户相关DTO
│   │   ├── institution       # 机构相关DTO
│   │   ├── media             # 媒体相关DTO
│   │   ├── question          # 题目相关DTO
│   │   ├── group             # 题目组相关DTO
│   │   ├── questionTag       # 题目标签相关DTO
│   │   ├── course            # 课程相关DTO
│   │   ├── chapter           # 章节相关DTO
│   │   └── section           # 小节相关DTO
│   ├── vo               # 视图对象
│   │   ├── auth              # 认证相关VO
│   │   ├── user              # 用户相关VO
│   │   ├── institution       # 机构相关VO
│   │   ├── quota             # 配额相关VO
│   │   ├── media             # 媒体相关VO
│   │   ├── question          # 题目相关VO
│   │   ├── group             # 题目组相关VO
│   │   ├── questionTag       # 题目标签相关VO
│   │   └── PreviewUrlVO.java # 课程预览URL视图对象
│   ├── enums            # 枚举类型
│   │   ├── RoleEnum.java       # 角色枚举
│   │   ├── QuotaType.java      # 配额类型枚举
│   │   ├── MediaType.java      # 媒体类型枚举
│   │   ├── MediaStatus.java    # 媒体状态枚举
│   │   ├── QuestionType.java   # 题目类型枚举
│   │   ├── CourseStatus.java   # 课程状态枚举
│   │   ├── CourseVersion.java  # 课程版本类型枚举
│   │   ├── CoursePaymentType.java # 课程付费类型枚举
│   │   ├── ChapterAccessType.java # 章节访问类型枚举
│   │   └── QuestionType.java   # 题目类型枚举
├── repository             # 数据访问层
│   ├── UserRepository         # 用户数据访问
│   ├── RoleRepository         # 角色数据访问
│   ├── PermissionRepository   # 权限数据访问
│   ├── StorageQuotaRepository # 存储配额数据访问
│   ├── MediaRepository        # 媒体资源数据访问
│   ├── InstitutionRepository  # 机构数据访问
│   ├── QuestionRepository     # 题目数据访问
│   ├── QuestionOptionRepository # 题目选项数据访问
│   ├── QuestionGroupRepository # 题目组数据访问
│   ├── QuestionGroupItemRepository # 题目组项数据访问
│   ├── QuestionTagRepository  # 题目标签数据访问
│   ├── QuestionTagMappingRepository # 题目标签映射数据访问
│   ├── CourseRepository       # 课程数据访问
│   ├── ChapterRepository      # 章节数据访问
│   ├── SectionRepository      # 小节数据访问
│   ├── SectionResourceRepository # 小节资源数据访问
│   ├── SectionQuestionGroupRepository # 小节题目组数据访问
│   ├── CategoryRepository     # 课程分类数据访问
│   └── TagRepository          # 课程标签数据访问
├── security               # 安全相关组件
│   ├── jwt              # JWT相关
├── service                # 服务层
│   ├── impl             # 服务实现
│   │   ├── AuthServiceImpl         # 认证服务实现
│   │   ├── UserServiceImpl         # 用户服务实现
│   │   ├── RoleServiceImpl         # 角色服务实现
│   │   ├── StorageQuotaServiceImpl # 存储配额服务实现
│   │   ├── MediaServiceImpl        # 媒体服务实现
│   │   ├── S3MultipartUploadManager # S3分片上传管理器
│   │   ├── UploadStatusService     # 上传状态服务
│   │   ├── InstitutionServiceImpl  # 机构服务实现
│   │   ├── InstitutionAuthServiceImpl # 机构认证服务实现
│   │   ├── QuestionServiceImpl     # 题目服务实现
│   │   ├── QuestionGroupServiceImpl # 题目组服务实现
│   │   ├── QuestionTagServiceImpl  # 题目标签服务实现
│   │   ├── QuestionTagMappingServiceImpl # 题目标签映射服务实现
│   │   ├── CourseServiceImpl       # 课程服务实现
│   │   ├── ChapterServiceImpl      # 章节服务实现
│   │   └── SectionServiceImpl      # 小节服务实现
├── excel                  # Excel相关组件
│   ├── QuestionExcelData.java    # Excel数据模型
│   └── QuestionExcelListener.java # Excel解析监听器
├── util                   # 工具类
```

## 分层职责

1. **Controller层**：负责处理HTTP请求，参数验证，返回响应
   - 仅负责接收请求和返回响应，不包含业务逻辑
   - 参数验证和基本的请求合法性检查
   - 调用Service层处理业务，不直接操作Repository
   - 统一的响应格式封装
   - 不应该直接依赖基础设施服务（如MinIO、Redis等）

2. **Service层**：实现业务逻辑
   - 封装所有业务规则和流程
   - 事务管理
   - 数据校验和业务规则验证
   - 可以调用其他Service和Repository
   - 负责与基础设施服务交互（如文件存储、缓存、邮件等）
   - 异常处理和业务错误转换

3. **Repository层**：数据访问操作
   - 提供数据访问接口
   - 不包含业务逻辑
   - 专注于数据CRUD操作

4. **Model层**：数据结构定义
   - Entity: JPA实体类
   - DTO: 数据传输对象，用于服务层之间的数据传递
   - VO: 视图对象，用于前端展示

5. **Config层**：应用配置

6. **Security层**：安全相关组件

7. **Util层**：通用工具类

## 架构设计原则

1. **关注点分离**：每一层只关注自己的职责
2. **依赖方向**：上层依赖下层，下层不依赖上层
3. **接口隔离**：通过接口定义服务边界
4. **单一职责**：每个类只负责一项功能
5. **最小知识原则**：一个对象应当对其他对象有最少的了解

## 权限控制设计

当前系统使用基于角色的访问控制(RBAC):
- Controller方法使用`@PreAuthorize("hasRole('XXX')")`注解控制访问
- JWT令牌中只包含角色信息，不包含详细权限
- 简化的权限模型，提高开发效率和系统性能

未来计划:
- 在业务功能稳定后，逐步实现基于权限的细粒度控制
- 动态权限验证机制
- 数据级权限控制

## 示例：用户头像上传

**不推荐的方式**（在Controller中处理业务逻辑）：
```java
@PostMapping("/avatar")
public Result<Map<String, String>> uploadAvatar(MultipartFile file) {
    // 验证文件类型和大小（业务逻辑）
    // 生成文件名（业务逻辑）
    // 直接调用MinioService上传文件（直接依赖基础设施）
    // 调用UserService更新用户头像
    // 返回URL
}
```

**推荐的方式**（职责分离）：
```java
@PostMapping("/avatar")
public Result<Map<String, String>> uploadAvatar(MultipartFile file) {
    // 从安全上下文获取用户名
    String username = getCurrentUsername();
    // 调用Service处理所有业务逻辑
    Map<String, String> result = userService.uploadAndUpdateAvatar(username, file);
    // 返回结果
    return Result.success(result);
}
```

Service层封装所有业务逻辑：
```java
@Service
public class UserServiceImpl implements UserService {
    // 注入所需依赖
    private final MinioService minioService;
    
    @Override
    public Map<String, String> uploadAndUpdateAvatar(String username, MultipartFile file) {
        // 验证文件类型和大小
        // 生成文件名
        // 上传文件
        // 删除旧头像
        // 更新用户头像
        // 返回结果
    }
}
```

通过这种方式，实现了关注点分离，提高了代码的可维护性和可测试性。

## 命名规范

- **Controller**: 以Controller结尾（如UserController）
- **Service**: 接口以Service结尾，实现类以ServiceImpl结尾
- **Repository**: 以Repository结尾
- **Entity**: 实体类名与表名对应
- **DTO**: 以DTO结尾
- **VO**: 以VO结尾

## 代码规范

- 使用Lombok简化代码
- 使用统一的返回格式
- 异常统一处理
- 注释完善
- 单元测试覆盖关键逻辑

## 测试结构

本项目采用多层次测试策略，确保代码质量和功能稳定性：

```
src/test/java/com/zhangziqi/online_course_mine
├── config                 # 测试配置类
│   └── TestSecurityConfig # 测试安全配置
├── controller             # 控制器测试
│   ├── AuthControllerTest
│   ├── UserControllerTest
│   ├── PermissionControllerTest  # 权限控制器测试
│   ├── InstitutionControllerTest # 机构申请控制器测试
│   ├── InstitutionAuthControllerTest # 机构用户注册控制器测试
│   └── ReviewerInstitutionControllerTest # 机构审核控制器测试
├── integration            # 集成测试
│   ├── AuthControllerIntegrationTest
│   ├── PermissionControllerIntegrationTest  # 权限管理集成测试
│   └── InstitutionControllerIntegrationTest # 机构管理集成测试
├── repository             # 数据访问层测试
│   └── ...
├── security               # 安全组件测试
│   └── TestUserDetailsService  # 测试用户详情服务
├── service                # 服务层测试
│   ├── AuthServiceTest
│   ├── UserServiceTest
│   ├── PermissionServiceTest  # 权限服务测试
│   ├── InstitutionServiceTest # 机构服务测试
│   └── InstitutionAuthServiceTest # 机构认证服务测试
└── util                   # 工具类测试
    └── ...
```

### 测试层次

1. **单元测试**：测试单个组件的功能，隔离于其他组件
   - `@ExtendWith(MockitoExtension.class)`
   - 通过`@Mock`模拟所有依赖
   - 如：`PermissionServiceTest`、`AuthServiceTest`等

2. **控制器测试**：测试API接口的参数验证和响应格式
   - `@SpringBootTest`加载上下文
   - `@AutoConfigureMockMvc(addFilters = false)`禁用安全过滤器
   - 如：`PermissionControllerTest`、`UserControllerTest`等

3. **集成测试**：测试多个组件协同工作
   - `@SpringBootTest`加载完整上下文
   - `@Import(TestSecurityConfig.class)`导入测试安全配置
   - 如：`PermissionControllerIntegrationTest`、`AuthControllerIntegrationTest`等

### 权限管理测试

权限管理模块的测试采用多层次策略：

1. **权限服务测试 (PermissionServiceTest)** 
   - 单元测试权限服务的业务逻辑
   - 模拟Repository层依赖
   - 测试异常处理和边界情况
   - 验证权限CRUD操作的正确性

2. **权限控制器测试 (PermissionControllerTest)**
   - 测试API参数验证和响应格式
   - 模拟Service层依赖
   - 验证HTTP状态码和响应结构
   - 不涉及实际权限验证

3. **权限集成测试 (PermissionControllerIntegrationTest)**
   - 测试完整请求处理流程
   - 包含实际的权限和角色验证
   - 使用`@WithUserDetails`注解模拟不同角色用户
   - 验证基于角色的访问控制
   - 测试资源依赖管理（如解除权限与角色的关联）

### 机构管理测试

机构管理模块的测试同样采用多层次策略：

1. **机构服务测试**
   - `InstitutionServiceTest`: 测试机构申请和审核流程
   - `InstitutionAuthServiceTest`: 测试机构用户注册流程
   - 模拟Repository层和外部服务依赖
   - 验证业务规则和异常处理

2. **机构控制器测试**
   - `InstitutionControllerTest`: 测试机构申请API
   - `ReviewerInstitutionControllerTest`: 测试机构审核API
   - `InstitutionAuthControllerTest`: 测试机构用户注册API
   - 验证参数校验和响应格式

3. **机构集成测试**
   - 测试完整的机构申请、审核和注册流程
   - 验证角色权限控制
   - 测试邮件通知功能
   - 验证数据一致性

### 测试优化

1. **Bean冲突解决**
   - 使用`spring.main.allow-bean-definition-overriding=true`
   - 通过`@Primary`注解指定测试Bean的优先级

2. **资源依赖管理**
   - 先解除资源依赖再进行删除测试
   - 测试完成后清理所有测试数据

3. **命名约定**
   - 测试方法名遵循行为_条件_结果模式
   - 如：`deletePermissionShouldSucceedWhenUserIsAdmin`

4. **测试数据隔离**
   - 每个测试方法使用独立的测试数据
   - 使用`@BeforeEach`和`@AfterEach`管理测试数据生命周期 

### 媒体资源管理测试

媒体资源管理模块的测试覆盖了多个相关组件：

1. **媒体服务测试 (MediaServiceTest)**
   - 测试媒体资源生命周期（创建、查询、访问）
   - 测试分片上传流程（初始化、状态追踪、完成）
   - 测试配额集成（上传前检查配额、完成后更新配额）
   - 测试断点续传功能

2. **S3分片上传管理器测试 (S3MultipartUploadManagerTest)**
   - 测试与S3存储服务的交互
   - 测试预签名URL生成
   - 测试分片列表查询
   - 测试分片合并功能

3. **上传状态服务测试 (UploadStatusServiceTest)**
   - 测试Redis状态存储和管理
   - 测试状态更新和转换
   - 测试状态过期设置

4. **存储配额服务测试 (StorageQuotaServiceTest)**
   - 测试配额检查功能
   - 测试配额更新逻辑
   - 测试多类型配额管理

这些测试确保了媒体资源管理功能的各个组件能够正确协作，支持大文件上传、断点续传和配额管理。

### 媒体上传流程

当前系统实现的媒体上传流程如下：

1. **初始化上传**：客户端调用`/api/media/initiate-upload`
   - 后端验证文件类型和大小
   - 检查存储配额是否足够
   - 创建媒体记录（状态为UPLOADING）
   - 初始化S3分片上传任务并返回uploadId
   - 生成所有分片的预签名URL
   - 在Redis中保存上传状态信息（仅用于内部跟踪）

2. **分片上传**：客户端使用预签名URL直接上传分片到S3
   - 客户端负责跟踪上传进度和分片状态
   - 前端自行管理分片上传状态

3. **完成上传**：所有分片上传完成后，客户端调用`/api/media/{mediaId}/complete`
   - 客户端提供所有分片的信息（编号和ETag）
   - 服务端调用S3 API完成分片合并
   - 更新媒体状态为COMPLETED
   - 更新存储配额使用量
   - 返回媒体访问信息

4. **取消上传**：客户端可以调用`/api/media/{mediaId}/cancel`取消上传
   - 服务端调用S3 API取消分片上传任务
   - 更新媒体状态为CANCELLED
   - 删除Redis中的上传状态信息
   - 释放预占用的存储配额

## 前端接入指南

### 分片上传实现

前端实现分片上传需要以下步骤：

1. **文件分片**：使用File API将文件分割成多个片段
   ```javascript
   const chunkSize = 10 * 1024 * 1024; // 10MB
   const chunks = [];
   
   for (let start = 0; start < file.size; start += chunkSize) {
     const end = Math.min(start + chunkSize, file.size);
     chunks.push(file.slice(start, end));
   }
   ```

2. **初始化上传**：调用后端初始化接口
   ```javascript
   const response = await axios.post('/api/media/initiate-upload', {
     filename: file.name,
     contentType: file.type,
     fileSize: file.size,
     title: 'My Video',
     description: 'Video description',
     chunkSize: 10 * 1024 * 1024 // 可选参数，指定分片大小
   });
   
   const { mediaId, uploadId, totalParts, presignedUrls } = response.data.data;
   ```

3. **上传分片**：使用预签名URL上传分片并跟踪进度
   ```javascript
   // 记录已完成的分片
   const completedParts = [];
   
   // 上传所有分片
   for (let i = 0; i < totalParts; i++) {
     const partNumber = i + 1;
     const url = presignedUrls[i].url;
     const chunk = chunks[i];
     
     try {
       const response = await axios.put(url, chunk, {
         headers: { 'Content-Type': 'application/octet-stream' },
         onUploadProgress: (progressEvent) => {
           // 计算当前分片的进度
           const partProgress = progressEvent.loaded / progressEvent.total;
           // 更新UI显示进度
         }
       });
       
       // 获取ETag并保存
       const etag = response.headers['etag'];
       completedParts.push({
         partNumber: partNumber,
         eTag: etag
       });
     } catch (error) {
       // 处理上传错误，可以实现重试逻辑
       console.error(`分片 ${partNumber} 上传失败:`, error);
     }
   }
   ```

4. **完成上传**：所有分片上传完成后
   ```javascript
   await axios.post(`/api/media/${mediaId}/complete`, {
     uploadId: uploadId,
     completedParts: completedParts
   });
   ```

5. **取消上传**：用户取消上传或发生致命错误时
   ```javascript
   await axios.delete(`/api/media/${mediaId}/cancel`);
   ```

### 存储配额管理

前端可以通过以下接口展示机构的存储配额信息：

1. **获取总配额**：
   ```javascript
   const quotaResponse = await axios.get(`/api/storage/quota/${institutionId}`);
   const { totalQuota, usedQuota, availableQuota } = quotaResponse.data.data;
   ```

2. **获取详细配额**：
   ```javascript
   const detailsResponse = await axios.get(`/api/storage/quota/${institutionId}/details`);
   const quotaDetails = detailsResponse.data.data;
   
   // 遍历不同类型的配额
   quotaDetails.forEach(quota => {
     console.log(`${quota.typeName}: ${quota.usedQuota}/${quota.totalQuota}`);
   });
   ```

3. **配额可视化**：使用图表库如ECharts展示配额使用情况
   ```javascript
   const option = {
     series: [{
       type: 'pie',
       data: [
         { name: '已用', value: usedQuota },
         { name: '可用', value: availableQuota }
       ]
     }]
   };
   ``` 

## 新增：题目管理系统设计

### 题目管理设计

题目管理系统实现了完整的题目创建、组织和标签化功能：

1. **核心功能**：
   - 题目CRUD操作（创建、读取、更新、删除）
   - 题目分组管理（题目组）
   - 题目标签管理
   - 题目与课程章节关联

2. **实体关系**：
   - 题目(Question) ←→ 题目选项(QuestionOption)：一对多关系
   - 题目组(QuestionGroup) ←→ 题目(Question)：通过题目组项(QuestionGroupItem)实现多对多关系
   - 题目(Question) ←→ 题目标签(QuestionTag)：通过题目标签映射(QuestionTagMapping)实现多对多关系
   - 题目组(QuestionGroup) ←→ 课程章节(Section)：多对多关系

3. **题目类型系统**：
   - 支持单选题、多选题
   - 统一的选项管理和验证规则
   - 业务规则验证（如单选题只能有一个正确答案）

4. **测试覆盖**：
   - 全面覆盖核心业务逻辑
   - 覆盖异常处理和边界情况
   - 机构级资源隔离测试

### 题目标签系统设计

标签系统允许对题目进行灵活分类和检索：

1. **标签结构**：
   - 机构隔离的标签体系
   - 标签与题目的多对多关联
   - 标签关联计数追踪

2. **功能实现**：
   - 标签创建、更新和删除
   - 标签与题目的关联和解除关联
   - 基于标签的题目查询

### 题目组系统设计

题目组系统允许将题目组织成有意义的集合：

1. **题目组结构**：
   - 题目组基本信息（名称、描述等）
   - 题目组项管理（包括排序、难度覆盖等）
   - 与课程章节的关联

2. **功能实现**：
   - 题目组的创建、更新和删除
   - 题目组项管理（添加、移除、更新、排序）
   - 题目组与章节的关联和解除关联

### 系统特点

1. **资源隔离**：所有题目、题目组和标签都与特定机构关联，确保数据安全
2. **灵活组织**：支持同一题目属于多个题目组和多个标签
3. **扩展性设计**：系统架构允许未来增加更多题目类型
4. **测试驱动开发**：所有核心功能都有对应的单元测试

### 测试策略

题目管理系统采用全面的测试策略，确保系统稳定性和正确性：

1. **单元测试**：
   - 题目服务测试（QuestionServiceTest）
   - 题目组服务测试（QuestionGroupServiceTest）
   - 题目标签服务测试（QuestionTagServiceTest）

2. **测试内容**：
   - 基本CRUD操作
   - 复杂业务规则验证
   - 异常处理和边界情况
   - 资源关联和解除关联
   - 权限和资源隔离

3. **测试覆盖率**：
   - 服务层行覆盖率：≥85%
   - 业务逻辑分支覆盖率：≥90% 

## Excel导入功能结构

### 组件说明

1. **Excel数据模型**：
   - `QuestionExcelData`: 定义Excel数据结构，包含题目所有字段
   - 使用EasyExcel注解配置Excel列映射和样式

2. **Excel监听器**：
   - `QuestionExcelListener`: 实现EasyExcel的AnalysisEventListener
   - 处理Excel数据解析和验证
   - 管理批量处理和错误记录

3. **导入服务**：
   - `QuestionImportService`: 定义导入服务接口
   - `QuestionImportServiceImpl`: 实现导入服务逻辑
   - 处理文件上传和模板生成

4. **导入控制器**：
   - `QuestionImportController`: 提供REST API接口
   - 处理文件上传和模板下载请求

5. **异步配置**：
   - `AsyncConfig`: 配置导入任务线程池
   - 定义异步任务执行策略

### 文件组织

```
src/main/java/com/zhangziqi/online_course_mine/
├── config
│   └── AsyncConfig.java              # 异步任务配置
├── controller
│   └── QuestionImportController.java # 导入控制器
├── model
│   ├── excel
│   │   └── QuestionExcelData.java   # Excel数据模型
│   └── vo
│       └── QuestionImportResultVO.java # 导入结果模型
├── excel
│   └── QuestionExcelListener.java    # Excel解析监听器
└── service
    ├── QuestionImportService.java    # 导入服务接口
    └── impl
        └── QuestionImportServiceImpl.java # 导入服务实现
```

### 依赖关系

```mermaid
graph TD
    A[QuestionImportController] --> B[QuestionImportService]
    B --> C[QuestionExcelListener]
    C --> D[QuestionService]
    C --> E[QuestionTagService]
    F[AsyncConfig] --> B
``` 

## 课程管理架构设计

课程管理系统是本平台的核心功能之一，它采用了以下设计：

1. **多层次课程结构**
   - 课程(Course) → 章节(Chapter) → 小节(Section) → 资源(SectionResource)/题目组(SectionQuestionGroup)
   - 每层次都有独立的管理和访问控制

2. **版本控制系统**
   - 工作副本和发布版本分离
   - 通过`isPublishedVersion`和`publishedVersionId`属性关联
   - 审核通过时自动创建或更新发布版本

3. **状态管理**
   - 课程生命周期：草稿(DRAFT) → 待审核(PENDING_REVIEW) → 审核中(REVIEWING) → 已发布(PUBLISHED)/已拒绝(REJECTED)
   - 支持下线(UNPUBLISHED)和重新上线操作

4. **访问控制**
   - 章节访问类型：免费(FREE)和付费(PAID_ONLY)
   - 预览功能：通过Redis存储临时token实现安全预览

### 课程管理数据流

课程创建和发布流程：

```mermaid
sequenceDiagram
    participant 机构用户
    participant CourseService
    participant CourseRepository
    participant Redis
    
    机构用户->>CourseService: 创建课程(createCourse)
    CourseService->>CourseRepository: 保存课程(状态:DRAFT)
    机构用户->>CourseService: 添加章节和内容
    机构用户->>CourseService: 生成预览URL(generatePreviewUrl)
    CourseService->>Redis: 存储预览token(PREVIEW_TOKEN_KEY_PREFIX + token)
    CourseService-->>机构用户: 返回预览URL和过期时间
    机构用户->>CourseService: 提交审核(submitForReview)
    CourseService->>CourseRepository: 更新状态(PENDING_REVIEW)
    
    Note over 机构用户,Redis: 审核流程
    
    机构用户->>CourseService: 审核通过(approveCourse)
    CourseService->>CourseRepository: 创建或更新发布版本
    CourseService->>CourseRepository: 更新状态(PUBLISHED)
```

## 测试结构

为课程管理系统添加测试架构：

```
src/test/java/com/zhangziqi/online_course_mine
├── controller
│   ├── CourseControllerTest
│   ├── ChapterControllerTest
│   └── SectionControllerTest
├── service
│   ├── CourseServiceTest
│   ├── ChapterServiceTest
│   └── SectionServiceTest
```
</file>

<file path="docs/项目配置说明.md">
# 在线课程平台项目配置说明

## 环境配置

### 开发环境 (dev)
- 数据库：MySQL
- 端口：8080
- 配置文件：`application-dev.yml`
- 特点：
  - JPA自动更新表结构（ddl-auto: update）
  - SQL语句以单行形式显示
  - 详细的SQL日志记录
  - 使用163邮箱服务
  - Redis存储验证码
  - 文件上传大小限制：100MB

### 测试环境 (test)
- 数据库：H2（内存数据库）
- 端口：8081
- 配置文件：`application-test.yml`
- 特点：
  - 每次启动重新创建表（ddl-auto: create-drop）
  - H2控制台访问：http://localhost:8081/h2-console
  - SQL语句以单行形式显示
  - 详细的SQL日志记录
  - 允许Bean覆盖：`spring.main.allow-bean-definition-overriding=true`
  - Redis使用独立数据库（database=1）
  - 使用测试邮箱配置
  - 文件上传大小限制：100MB

## 测试环境特殊配置

测试环境下启用了一些特殊配置以支持测试：

```yaml
spring:
  main:
    allow-bean-definition-overriding: true  # 允许Bean覆盖，解决集成测试中的Bean冲突
```

测试环境还配置了专用的安全配置类：

```java
@TestConfiguration
@EnableWebSecurity
@Profile("test")  // 确保只在测试环境激活
public class TestSecurityConfig {
    // 提供测试环境下的安全组件
}
```

### 集成测试Bean冲突解决方案

在集成测试中，常常会遇到Bean定义冲突的问题，特别是当测试配置与应用配置存在重叠时。为解决这个问题，我们采取了以下策略：

1. **在应用级别允许Bean覆盖**：
   ```yaml
   spring:
     main:
       allow-bean-definition-overriding: true
   ```

2. **在测试类中显式指定配置属性**：
   ```java
   @SpringBootTest(properties = {"spring.main.allow-bean-definition-overriding=true"})
   @AutoConfigureMockMvc
   @ActiveProfiles("test")
   @Import(TestSecurityConfig.class)
   public class PermissionControllerIntegrationTest {
       // ...
   }
   ```

3. **使用@Primary注解标记测试Bean**：
   ```java
   @Service("userDetailsService")
   @Profile("test")
   @Primary
   public class TestUserDetailsService implements UserDetailsService {
       // ...
   }
   ```

4. **使用@Bean+@Primary组合覆盖特定Bean**：
   ```java
   @Bean
   @Primary
   public JwtTokenProvider jwtTokenProvider() {
       // 创建测试专用的JWT提供者
   }
   ```

5. **通过Bean名称引用**：
   ```java
   @WithUserDetails(value = "admin_test", userDetailsServiceBeanName = "userDetailsService")
   void getPermissionListShouldReturnPermissionListWhenUserIsAdmin() {
       // ...
   }
   ```

这种组合策略有效解决了集成测试中的Bean冲突问题，特别是在权限管理测试中需要模拟不同用户角色时。

## 日志配置
```yaml
logging:
  level:
    org.hibernate.SQL: DEBUG                           # 显示SQL语句
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE   # 显示SQL参数
    com.zhangziqi: DEBUG                              # 应用日志级别
```

## JWT配置
- 访问令牌有效期：1小时
- 刷新令牌有效期：7天
- 令牌内容：用户名和角色信息（不包含详细权限）
- 刷新机制：只检查令牌是否在黑名单中
- 密钥：环境相关，需要在生产环境中妥善保管

## 数据库配置

### MySQL（开发环境）
```yaml
url: jdbc:mysql://localhost:3306/online_course?useSSL=false&serverTimezone=Asia/Shanghai&characterEncoding=utf-8
username: root
password: root
```

### H2（测试环境）
```yaml
url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
username: sa
password: 
```

## 切换环境
1. 通过配置文件：
   ```yaml
   spring:
     profiles:
       active: dev  # 或 test
   ```

2. 通过命令行：
   ```bash
   java -jar app.jar --spring.profiles.active=dev
   ```

3. 通过环境变量：
   ```bash
   export SPRING_PROFILES_ACTIVE=dev
   ```

## 注意事项
1. 生产环境配置文件未包含在版本控制中
2. 测试环境使用H2数据库，无需额外配置
3. JWT密钥在不同环境中应该不同
4. SQL日志格式化配置已优化为单行显示
5. 测试环境下Redis使用单独的数据库，避免与开发环境冲突

## 依赖版本
- Spring Boot: 3.3.9
- Java: 17
- JWT: 0.12.5
- 其他依赖版本由Spring Boot管理

## 文件上传配置

为了支持大文件上传，系统配置了文件上传的限制参数：

```yaml
spring:
  servlet:
    multipart:
      max-file-size: 100MB  # 单个文件的最大大小
      max-request-size: 100MB  # 单个请求的最大大小（含所有文件）
```

这一配置在开发环境和测试环境中都已设置，用于确保系统能够处理较大的文件上传需求，特别是在课程资源上传等场景中。

## 文件存储配置

### MinIO配置
```yaml
minio:
  endpoint: http://localhost:9000
  access-key: minioadmin
  secret-key: minioadmin
  bucket-name: online-course
```

### AWS S3兼容API配置
```yaml
aws:
  s3:
    endpoint: http://localhost:9000
    region: us-east-1
    access-key: minioadmin
    secret-key: minioadmin
    bucket-name: online-course-s3
    path-style-access: true
```

### 开发环境文件存储配置
在开发环境中，可以使用Docker快速启动MinIO服务：
```bash
docker run -p 9000:9000 -p 9001:9001 --name minio \
  -e "MINIO_ROOT_USER=minioadmin" \
  -e "MINIO_ROOT_PASSWORD=minioadmin" \
  -v $(pwd)/minio-data:/data \
  minio/minio server /data --console-address ":9001"
```

### 测试环境文件存储配置
测试环境下通过环境变量控制是否执行集成测试：
- MINIO_ENABLED=true：启用MinIO测试
- S3_ENABLED=true：启用S3 API测试

测试中默认跳过这些需要外部依赖的测试，只在明确设置环境变量时执行。

## 邮件服务配置

### 开发环境（163邮箱）
```yaml
spring:
  mail:
    host: smtp.163.com
    username: your-email@163.com
    password: your-smtp-password
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
```

### 测试环境（模拟邮箱）
```yaml
spring:
  mail:
    host: smtp.qq.com
    port: 587
    username: test@qq.com
    password: test-password
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
```

## Redis配置

### 开发环境
```yaml
spring:
  data:
    redis:
      host: localhost
      port: 6379
      database: 0
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
```

### 测试环境
```yaml
spring:
  data:
    redis:
      host: localhost
      database: 1  # 使用独立数据库
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
```

## 机构相关配置

### 机构申请配置
```yaml
institution:
  application:
    # 机构申请相关配置
    logo:
      max-size: 2MB  # Logo文件大小限制
      allowed-types: image/jpeg,image/png  # 允许的文件类型
    register-code:
      length: 8  # 注册码长度
      expiry: 7d  # 注册码有效期（天）
    review:
      auto-approve: false  # 是否自动审核通过（测试环境可设置为true）
```

### 机构用户注册配置
```yaml
institution:
  member:
    # 机构用户注册相关配置
    email-verification:
      code-length: 6  # 验证码长度
      expiry: 5m  # 验证码有效期（分钟）
    password:
      min-length: 6  # 密码最小长度
      max-length: 20  # 密码最大长度
```

### 机构审核配置
```yaml
institution:
  review:
    # 机构审核相关配置
    notification:
      email:
        enabled: true  # 是否启用邮件通知
        templates:
          approved: institution-approved  # 审核通过邮件模板
          rejected: institution-rejected  # 审核拒绝邮件模板
    pagination:
      default-size: 10  # 默认分页大小
      max-size: 50  # 最大分页大小
```

## 存储配额配置

### 默认配额配置
```yaml
storage:
  quota:
    default:
      video: 5368709120    # 5GB
      document: 2147483648 # 2GB
      total: 10737418240   # 10GB
    expiry:
      enabled: false       # 是否启用配额过期
      default-days: 365    # 默认过期天数
```

### 配额告警配置
```yaml
storage:
  quota:
    alert:
      enabled: true                 # 是否启用配额告警
      threshold: 0.9                # 告警阈值（90%）
      notification:
        email:
          enabled: true            # 是否启用邮件通知
          template: quota-alert    # 告警邮件模板
```

### 配额计算配置
```yaml
storage:
  quota:
    calculation:
      async: true          # 是否异步计算配额
      batch-size: 1000     # 批量计算大小
      schedule:
        enabled: true      # 是否启用定时计算
        cron: "0 0 1 * * ?" # 每天凌晨1点执行
```

## Excel导入配置

### 导入功能配置
```yaml
question:
  import:
    # 导入配置
    max-rows: 1000              # 单次导入最大行数限制
    default-batch-size: 50      # 默认批处理大小
    concurrent-enabled: true     # 是否启用并发处理
```

### 异步任务配置
```yaml
spring:
  task:
    execution:
      pool:
        core-size: ${CPU_CORES}           # 核心线程数（CPU核心数）
        max-size: ${CPU_CORES * 2}        # 最大线程数（CPU核心数 * 2）
        queue-capacity: 500               # 队列容量
        keep-alive: 60s                   # 线程存活时间
```

### 文件上传配置
```yaml
spring:
  servlet:
    multipart:
      max-file-size: 10MB       # 单个文件大小限制
      max-request-size: 10MB    # 请求总大小限制
```

### 开发环境配置示例
```yaml
question:
  import:
    max-rows: 100               # 开发环境限制较小
    default-batch-size: 20      # 较小的批处理大小
    concurrent-enabled: false    # 禁用并发处理便于调试
```

### 测试环境配置示例
```yaml
question:
  import:
    max-rows: 50                # 测试环境使用更小的限制
    default-batch-size: 10      # 更小的批处理大小
    concurrent-enabled: true     # 启用并发处理测试
```
</file>

<file path="docs/api.md">
{"openapi":"3.0.1","info":{"title":"在线课程平台API","description":"在线课程平台的RESTful API文档","contact":{"name":"在线课程平台团队","url":"https://example.com","email":"support@example.com"},"license":{"name":"MIT License","url":"https://opensource.org/licenses/MIT"},"version":"1.0.0"},"servers":[{"url":"http://localhost:8080","description":"Generated server url"}],"security":[{"Bearer Authentication":[]}],"tags":[{"name":"题目标签管理","description":"题目标签的创建、更新、查询和管理相关操作"},{"name":"小节管理","description":"课程小节及其资源的创建、更新、查询和管理相关操作"},{"name":"机构用户认证","description":"机构用户注册相关接口"},{"name":"题目组管理","description":"题目组的创建、更新、查询和管理相关操作"},{"name":"用户管理","description":"用户查询、创建、编辑、删除等功能"},{"name":"课程管理","description":"课程创建、更新、查询和管理相关操作"},{"name":"题目管理","description":"题目创建、管理相关操作"},{"name":"分类管理","description":"课程分类的创建、查询、编辑、删除等功能"},{"name":"机构成员管理","description":"机构成员管理相关接口"},{"name":"权限管理","description":"权限查询、创建、编辑、删除等功能"},{"name":"标签管理","description":"课程标签的创建、查询、编辑、删除等功能"},{"name":"角色管理","description":"角色查询、创建、编辑、删除等功能"},{"name":"试题导入","description":"试题批量导入相关接口"},{"name":"认证接口","description":"包括注册、登录、刷新令牌等接口"},{"name":"机构申请","description":"机构申请相关接口"},{"name":"机构审核","description":"机构申请审核相关接口"},{"name":"媒体管理","description":"媒体文件上传、管理相关操作"},{"name":"章节管理","description":"课程章节创建、更新、查询和管理相关操作"}],"paths":{"/api/v1/questions/{id}":{"get":{"tags":["题目管理"],"summary":"获取题目详情","description":"获取指定题目的详细信息","operationId":"getQuestion","parameters":[{"name":"id","in":"path","description":"题目ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultQuestionVO"}}}}}},"put":{"tags":["题目管理"],"summary":"更新题目","description":"更新现有题目的内容和选项","operationId":"updateQuestion","parameters":[{"name":"id","in":"path","description":"题目ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/QuestionDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultQuestionVO"}}}}}},"delete":{"tags":["题目管理"],"summary":"删除题目","description":"删除指定的题目","operationId":"deleteQuestion","parameters":[{"name":"id","in":"path","description":"题目ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/users/{id}":{"get":{"tags":["用户管理"],"summary":"获取用户详情","description":"根据用户ID获取用户详情","operationId":"getUserById","parameters":[{"name":"id","in":"path","description":"用户ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}},"put":{"tags":["用户管理"],"summary":"更新用户","description":"更新用户信息","operationId":"updateUser","parameters":[{"name":"id","in":"path","description":"用户ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}},"delete":{"tags":["用户管理"],"summary":"删除用户","description":"根据用户ID删除用户","operationId":"deleteUser","parameters":[{"name":"id","in":"path","description":"用户ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"204":{"description":"No Content","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/users/{id}/roles":{"put":{"tags":["用户管理"],"summary":"给用户分配角色","description":"给用户分配角色","operationId":"assignRoles","parameters":[{"name":"id","in":"path","description":"用户ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"uniqueItems":true,"type":"array","description":"角色ID列表","items":{"type":"integer","format":"int64"}}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}}},"/api/users/current":{"get":{"tags":["用户管理"],"summary":"获取当前用户信息","description":"获取当前登录用户的详细信息","operationId":"getCurrentUser","responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}},"put":{"tags":["用户管理"],"summary":"更新当前用户信息","description":"更新当前登录用户的个人信息","operationId":"updateCurrentUser","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserProfileDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}}},"/api/users/current/password":{"put":{"tags":["用户管理"],"summary":"修改密码","description":"修改当前用户密码","operationId":"changePassword","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChangePasswordDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/users/current/email":{"put":{"tags":["用户管理"],"summary":"更新邮箱","description":"更新当前用户邮箱（需验证码）","operationId":"updateEmail","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmailUpdateDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}}},"/api/tags/{id}":{"get":{"tags":["标签管理"],"summary":"获取标签详情","description":"根据ID获取标签详情","operationId":"getTag","parameters":[{"name":"id","in":"path","description":"标签ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultTagVO"}}}}}},"put":{"tags":["标签管理"],"summary":"更新标签","description":"更新标签信息","operationId":"updateTag","parameters":[{"name":"id","in":"path","description":"标签ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TagDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}},"delete":{"tags":["标签管理"],"summary":"删除标签","description":"删除指定的标签","operationId":"deleteTag","parameters":[{"name":"id","in":"path","description":"标签ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/sections/{sectionId}/question-groups/{questionGroupId}":{"put":{"tags":["小节管理"],"summary":"更新小节题目组","description":"更新小节的题目组设置","operationId":"updateSectionQuestionGroup","parameters":[{"name":"sectionId","in":"path","description":"小节ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"questionGroupId","in":"path","description":"题目组ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SectionQuestionGroupDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultSectionQuestionGroup"}}}}}},"delete":{"tags":["小节管理"],"summary":"删除小节题目组","description":"删除小节的题目组关联","operationId":"deleteSectionQuestionGroup","parameters":[{"name":"sectionId","in":"path","description":"小节ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"questionGroupId","in":"path","description":"题目组ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/sections/{id}":{"get":{"tags":["小节管理"],"summary":"获取小节详情","description":"获取指定小节的详细信息","operationId":"getSectionById","parameters":[{"name":"id","in":"path","description":"小节ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultSection"}}}}}},"put":{"tags":["小节管理"],"summary":"更新小节","description":"更新指定小节的信息","operationId":"updateSection","parameters":[{"name":"id","in":"path","description":"小节ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SectionCreateDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultSection"}}}}}},"delete":{"tags":["小节管理"],"summary":"删除小节","description":"删除指定的小节","operationId":"deleteSection","parameters":[{"name":"id","in":"path","description":"小节ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/sections/chapter/{chapterId}/reorder":{"put":{"tags":["小节管理"],"summary":"调整小节顺序","description":"调整章节中小节的顺序","operationId":"reorderSections","parameters":[{"name":"chapterId","in":"path","description":"章节ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/SectionOrderDTO"}}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListSection"}}}}}}},"/api/roles/{id}":{"get":{"tags":["角色管理"],"summary":"获取角色详情","description":"根据角色ID获取角色详情","operationId":"getRoleById","parameters":[{"name":"id","in":"path","description":"角色ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultRoleVO"}}}}}},"put":{"tags":["角色管理"],"summary":"更新角色","description":"更新角色信息","operationId":"updateRole","parameters":[{"name":"id","in":"path","description":"角色ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultRoleVO"}}}}}},"delete":{"tags":["角色管理"],"summary":"删除角色","description":"根据角色ID删除角色","operationId":"deleteRole","parameters":[{"name":"id","in":"path","description":"角色ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"204":{"description":"No Content","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/roles/{id}/permissions":{"put":{"tags":["角色管理"],"summary":"给角色分配权限","description":"给角色分配权限","operationId":"assignPermissions","parameters":[{"name":"id","in":"path","description":"角色ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"uniqueItems":true,"type":"array","description":"权限ID列表","items":{"type":"integer","format":"int64"}}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultRoleVO"}}}}}}},"/api/questions/tags/{id}":{"get":{"tags":["题目标签管理"],"summary":"获取标签详情","description":"获取指定ID的标签详细信息","operationId":"getTag_1","parameters":[{"name":"id","in":"path","description":"标签ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultQuestionTagVO"}}}}}},"put":{"tags":["题目标签管理"],"summary":"更新标签","description":"更新指定ID的标签信息","operationId":"updateTag_1","parameters":[{"name":"id","in":"path","description":"标签ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/QuestionTagDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultQuestionTagVO"}}}}}},"delete":{"tags":["题目标签管理"],"summary":"删除标签","description":"删除指定ID的标签","operationId":"deleteTag_1","parameters":[{"name":"id","in":"path","description":"标签ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/questions/groups/{id}":{"get":{"tags":["题目组管理"],"summary":"获取题目组详情","description":"获取指定ID的题目组详细信息","operationId":"getGroup","parameters":[{"name":"id","in":"path","description":"题目组ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"includeItems","in":"query","description":"是否包含题目项","required":false,"schema":{"type":"boolean","default":true}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultQuestionGroupVO"}}}}}},"put":{"tags":["题目组管理"],"summary":"更新题目组","description":"更新指定ID的题目组信息","operationId":"updateGroup","parameters":[{"name":"id","in":"path","description":"题目组ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/QuestionGroupDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultQuestionGroupVO"}}}}}},"delete":{"tags":["题目组管理"],"summary":"删除题目组","description":"删除指定ID的题目组","operationId":"deleteGroup","parameters":[{"name":"id","in":"path","description":"题目组ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/questions/groups/{groupId}/items/order":{"put":{"tags":["题目组管理"],"summary":"更新题目顺序","description":"更新题目组中题目的顺序","operationId":"updateItemsOrder","parameters":[{"name":"groupId","in":"path","description":"题目组ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/QuestionGroupItemDTO"}}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultBoolean"}}}}}}},"/api/questions/groups/items/{id}":{"put":{"tags":["题目组管理"],"summary":"更新题目组项","description":"更新题目组中的题目项信息","operationId":"updateGroupItem","parameters":[{"name":"id","in":"path","description":"题目组项ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/QuestionGroupItemDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultQuestionGroupItemVO"}}}}}}},"/api/permissions/{id}":{"get":{"tags":["权限管理"],"summary":"获取权限详情","description":"根据权限ID获取权限详情","operationId":"getPermissionById","parameters":[{"name":"id","in":"path","description":"权限ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPermissionVO"}}}}}},"put":{"tags":["权限管理"],"summary":"更新权限","description":"更新权限信息","operationId":"updatePermission","parameters":[{"name":"id","in":"path","description":"权限ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPermissionVO"}}}}}},"delete":{"tags":["权限管理"],"summary":"删除权限","description":"根据权限ID删除权限","operationId":"deletePermission","parameters":[{"name":"id","in":"path","description":"权限ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"204":{"description":"No Content","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/courses/{id}":{"get":{"tags":["课程管理"],"summary":"获取课程详情","description":"获取指定课程的详细信息","operationId":"getCourseById","parameters":[{"name":"id","in":"path","description":"课程ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultCourse"}}}}}},"put":{"tags":["课程管理"],"summary":"更新课程","description":"更新指定课程的信息","operationId":"updateCourse","parameters":[{"name":"id","in":"path","description":"课程ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CourseCreateDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultCourse"}}}}}},"delete":{"tags":["课程管理"],"summary":"删除课程","description":"删除指定的课程","operationId":"deleteCourse","parameters":[{"name":"id","in":"path","description":"课程ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/chapters/{id}":{"get":{"tags":["章节管理"],"summary":"获取章节详情","description":"获取指定章节的详细信息","operationId":"getChapterById","parameters":[{"name":"id","in":"path","description":"章节ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultChapter"}}}}}},"put":{"tags":["章节管理"],"summary":"更新章节","description":"更新指定章节的信息","operationId":"updateChapter","parameters":[{"name":"id","in":"path","description":"章节ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChapterCreateDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultChapter"}}}}}},"delete":{"tags":["章节管理"],"summary":"删除章节","description":"删除指定的章节","operationId":"deleteChapter","parameters":[{"name":"id","in":"path","description":"章节ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/chapters/{id}/access-type":{"put":{"tags":["章节管理"],"summary":"更新章节访问类型","description":"更新指定章节的访问类型","operationId":"updateAccessType","parameters":[{"name":"id","in":"path","description":"章节ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"accessType","in":"query","description":"访问类型","required":true,"schema":{"type":"integer","format":"int32"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultChapter"}}}}}}},"/api/chapters/course/{courseId}/reorder":{"put":{"tags":["章节管理"],"summary":"调整章节顺序","description":"调整课程中章节的顺序","operationId":"reorderChapters","parameters":[{"name":"courseId","in":"path","description":"课程ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/ChapterOrderDTO"}}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListChapter"}}}}}}},"/api/categories/{id}":{"get":{"tags":["分类管理"],"summary":"获取分类详情","description":"根据ID获取分类详情","operationId":"getCategory","parameters":[{"name":"id","in":"path","description":"分类ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultCategoryVO"}}}}}},"put":{"tags":["分类管理"],"summary":"更新分类","description":"更新分类信息","operationId":"updateCategory","parameters":[{"name":"id","in":"path","description":"分类ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CategoryDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}},"delete":{"tags":["分类管理"],"summary":"删除分类","description":"删除指定的分类","operationId":"deleteCategory","parameters":[{"name":"id","in":"path","description":"分类ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/categories/{id}/status":{"put":{"tags":["分类管理"],"summary":"更新分类状态","description":"启用或禁用指定分类","operationId":"updateCategoryStatus","parameters":[{"name":"id","in":"path","description":"分类ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"enabled","in":"query","description":"是否启用","required":true,"schema":{"type":"boolean"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/categories/{id}/order":{"put":{"tags":["分类管理"],"summary":"更新分类排序","description":"更新指定分类的排序索引","operationId":"updateCategoryOrder","parameters":[{"name":"id","in":"path","description":"分类ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"orderIndex","in":"query","description":"排序索引","required":true,"schema":{"type":"integer","format":"int32"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/v1/questions":{"get":{"tags":["题目管理"],"summary":"获取题目列表","description":"分页获取题目列表，可按类型、难度、关键词和标签筛选","operationId":"getQuestions","parameters":[{"name":"type","in":"query","description":"题目类型","required":false,"schema":{"type":"integer","format":"int32"}},{"name":"difficulty","in":"query","description":"难度级别","required":false,"schema":{"type":"integer","format":"int32"}},{"name":"keyword","in":"query","description":"关键词","required":false,"schema":{"type":"string"}},{"name":"tagIds","in":"query","description":"标签ID列表，支持数组或逗号分隔的字符串","required":false,"schema":{"type":"string"}},{"name":"pageable","in":"query","required":true,"schema":{"$ref":"#/components/schemas/Pageable"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPageQuestionVO"}}}}}},"post":{"tags":["题目管理"],"summary":"创建题目","description":"创建新的题目，包括单选题和多选题","operationId":"createQuestion","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/QuestionDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultQuestionVO"}}}}}}},"/api/users":{"get":{"tags":["用户管理"],"summary":"分页查询用户列表","description":"根据条件分页查询用户列表","operationId":"getUserList","parameters":[{"name":"queryDTO","in":"query","required":true,"schema":{"$ref":"#/components/schemas/UserQueryDTO"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPageUserVO"}}}}}},"post":{"tags":["用户管理"],"summary":"创建用户","description":"创建新用户","operationId":"createUser","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}}},"/api/users/current/avatar":{"post":{"tags":["用户管理"],"summary":"上传头像","description":"上传当前用户头像","operationId":"uploadAvatar","requestBody":{"content":{"multipart/form-data":{"schema":{"required":["file"],"type":"object","properties":{"file":{"type":"string","format":"binary"}}}}}},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultMapStringString"}}}}}}},"/api/tags":{"get":{"tags":["标签管理"],"summary":"分页查询标签","description":"分页获取标签列表，支持关键词搜索","operationId":"listTags","parameters":[{"name":"keyword","in":"query","description":"搜索关键词","required":false,"schema":{"type":"string"}},{"name":"pageable","in":"query","required":true,"schema":{"$ref":"#/components/schemas/Pageable"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPageTagVO"}}}}}},"post":{"tags":["标签管理"],"summary":"创建标签","description":"创建新的课程标签","operationId":"createTag","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/TagDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultMapStringLong"}}}}}}},"/api/tags/batch":{"post":{"tags":["标签管理"],"summary":"批量获取或创建标签","description":"根据名称批量获取或创建标签","operationId":"batchGetOrCreateTags","requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"type":"string"}}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListLong"}}}}}}},"/api/sections":{"post":{"tags":["小节管理"],"summary":"创建小节","description":"创建一个新的小节","operationId":"createSection","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SectionCreateDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultSection"}}}}}}},"/api/sections/resources":{"post":{"tags":["小节管理"],"summary":"添加小节资源","description":"为小节添加媒体资源","operationId":"addSectionResource","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SectionResourceDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultSectionResource"}}}}}}},"/api/sections/question-groups":{"post":{"tags":["小节管理"],"summary":"添加小节题目组","description":"为小节添加题目组","operationId":"addSectionQuestionGroup","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SectionQuestionGroupDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultSectionQuestionGroup"}}}}}}},"/api/roles":{"get":{"tags":["角色管理"],"summary":"获取角色列表","description":"获取所有角色列表","operationId":"getRoleList","responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListRoleVO"}}}}}},"post":{"tags":["角色管理"],"summary":"创建角色","description":"创建新角色","operationId":"createRole","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultRoleVO"}}}}}}},"/api/reviewer/institutions/applications/{id}/reject":{"post":{"tags":["机构审核"],"summary":"审核拒绝","description":"拒绝机构申请","operationId":"rejectApplication","parameters":[{"name":"id","in":"path","description":"申请ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"reason","in":"query","description":"拒绝原因","required":true,"schema":{"type":"string"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/reviewer/institutions/applications/{id}/approve":{"post":{"tags":["机构审核"],"summary":"审核通过","description":"通过机构申请，自动创建机构并生成注册码","operationId":"approveApplication","parameters":[{"name":"id","in":"path","description":"申请ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultInstitutionVO"}}}}}}},"/api/questions/tags":{"get":{"tags":["题目标签管理"],"summary":"获取标签列表","description":"分页获取机构的标签列表","operationId":"getTags","parameters":[{"name":"keyword","in":"query","description":"关键词搜索","required":false,"schema":{"type":"string"}},{"name":"page","in":"query","description":"页码","required":false,"schema":{"type":"integer","format":"int32","default":0}},{"name":"size","in":"query","description":"每页条数","required":false,"schema":{"type":"integer","format":"int32","default":10}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPageQuestionTagVO"}}}}}},"post":{"tags":["题目标签管理"],"summary":"创建标签","description":"创建一个新的题目标签","operationId":"createTag_1","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/QuestionTagDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultQuestionTagVO"}}}}}}},"/api/questions/tags/question/{questionId}/tag/{tagId}":{"post":{"tags":["题目标签管理"],"summary":"添加标签到题目","description":"为题目添加指定标签","operationId":"addTagToQuestion","parameters":[{"name":"questionId","in":"path","description":"题目ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"tagId","in":"path","description":"标签ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultBoolean"}}}}}},"delete":{"tags":["题目标签管理"],"summary":"移除题目标签","description":"从题目中移除指定标签","operationId":"removeTagFromQuestion","parameters":[{"name":"questionId","in":"path","description":"题目ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"tagId","in":"path","description":"标签ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultBoolean"}}}}}}},"/api/questions/import":{"post":{"tags":["试题导入"],"summary":"导入试题","description":"批量导入试题Excel文件","operationId":"importQuestions","parameters":[{"name":"institutionId","in":"query","description":"机构ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"batchSize","in":"query","description":"批处理大小，默认为配置中的值","required":false,"schema":{"type":"integer","format":"int32"}}],"requestBody":{"content":{"application/json":{"schema":{"required":["file"],"type":"object","properties":{"file":{"type":"string","description":"Excel文件","format":"binary"}}}}}},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultQuestionImportResultVO"}}}}}}},"/api/questions/groups":{"get":{"tags":["题目组管理"],"summary":"获取题目组列表","description":"分页获取机构的题目组列表","operationId":"getGroups","parameters":[{"name":"keyword","in":"query","description":"关键词搜索","required":false,"schema":{"type":"string"}},{"name":"page","in":"query","description":"页码","required":false,"schema":{"type":"integer","format":"int32","default":0}},{"name":"size","in":"query","description":"每页条数","required":false,"schema":{"type":"integer","format":"int32","default":10}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPageQuestionGroupVO"}}}}}},"post":{"tags":["题目组管理"],"summary":"创建题目组","description":"创建一个新的题目组","operationId":"createGroup","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/QuestionGroupDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultQuestionGroupVO"}}}}}}},"/api/questions/groups/{groupId}/section/{sectionId}":{"post":{"tags":["题目组管理"],"summary":"关联题目组到章节","description":"将题目组关联到指定章节","operationId":"associateGroupToSection","parameters":[{"name":"groupId","in":"path","description":"题目组ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"sectionId","in":"path","description":"章节ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultBoolean"}}}}}},"delete":{"tags":["题目组管理"],"summary":"取消题目组与章节的关联","description":"取消题目组与指定章节的关联","operationId":"dissociateGroupFromSection","parameters":[{"name":"groupId","in":"path","description":"题目组ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"sectionId","in":"path","description":"章节ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultBoolean"}}}}}}},"/api/questions/groups/{groupId}/questions":{"post":{"tags":["题目组管理"],"summary":"批量添加题目到题目组","description":"向题目组中批量添加多个题目","operationId":"addQuestionsToGroup","parameters":[{"name":"groupId","in":"path","description":"题目组ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"type":"array","items":{"type":"integer","format":"int64"}}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListQuestionGroupItemVO"}}}}}}},"/api/questions/groups/items":{"post":{"tags":["题目组管理"],"summary":"添加题目到题目组","description":"向题目组中添加题目","operationId":"addQuestionToGroup","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/QuestionGroupItemDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultQuestionGroupItemVO"}}}}}}},"/api/permissions":{"get":{"tags":["权限管理"],"summary":"获取权限列表","description":"获取所有权限列表","operationId":"getPermissionList","responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListPermissionVO"}}}}}},"post":{"tags":["权限管理"],"summary":"创建权限","description":"创建新权限","operationId":"createPermission","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPermissionVO"}}}}}}},"/api/media/{id}/complete":{"post":{"tags":["媒体管理"],"summary":"完成上传","description":"通知服务器所有分片已上传完成，请求合并分片","operationId":"completeUpload","parameters":[{"name":"id","in":"path","description":"媒体ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CompleteUploadDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultMediaVO"}}}}}}},"/api/media/initiate-upload":{"post":{"tags":["媒体管理"],"summary":"初始化上传","description":"初始化分片上传，返回上传ID和预签名URL","operationId":"initiateUpload","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MediaUploadInitDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUploadInitiationVO"}}}}}}},"/api/institutions/apply":{"post":{"tags":["机构申请"],"summary":"申请创建机构","description":"提交机构入驻申请，需等待审核员审核","operationId":"applyInstitution","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/InstitutionApplyDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultString"}}}}}}},"/api/courses":{"get":{"tags":["课程管理"],"summary":"获取机构课程列表","description":"分页获取当前机构的课程列表","operationId":"getCoursesByInstitution","parameters":[{"name":"pageable","in":"query","required":true,"schema":{"$ref":"#/components/schemas/Pageable"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPageCourse"}}}}}},"post":{"tags":["课程管理"],"summary":"创建课程","description":"创建一个新的课程","operationId":"createCourse","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CourseCreateDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultCourse"}}}}}}},"/api/courses/{id}/submit":{"post":{"tags":["课程管理"],"summary":"提交课程审核","description":"将课程提交审核","operationId":"submitForReview","parameters":[{"name":"id","in":"path","description":"课程ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultCourse"}}}}}}},"/api/courses/{id}/review/start":{"post":{"tags":["课程管理"],"summary":"开始审核课程","description":"管理员开始审核课程","operationId":"startReview","parameters":[{"name":"id","in":"path","description":"课程ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultCourse"}}}}}}},"/api/courses/{id}/review/reject":{"post":{"tags":["课程管理"],"summary":"拒绝课程审核","description":"管理员拒绝课程审核","operationId":"rejectCourse","parameters":[{"name":"id","in":"path","description":"课程ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"reason","in":"query","description":"拒绝原因","required":true,"schema":{"type":"string"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultCourse"}}}}}}},"/api/courses/{id}/review/approve":{"post":{"tags":["课程管理"],"summary":"通过课程审核","description":"管理员通过课程审核","operationId":"approveCourse","parameters":[{"name":"id","in":"path","description":"课程ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"comment","in":"query","description":"审核意见","required":false,"schema":{"type":"string"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultCourse"}}}}}}},"/api/courses/{id}/re-edit":{"post":{"tags":["课程管理"],"summary":"重新编辑被拒绝的课程","description":"将被拒绝的课程重新变为草稿状态进行编辑","operationId":"reEditRejectedCourse","parameters":[{"name":"id","in":"path","description":"课程ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultCourse"}}}}}}},"/api/courses/{id}/payment":{"post":{"tags":["课程管理"],"summary":"更新课程支付设置","description":"更新指定课程的支付类型和价格","operationId":"updatePaymentSettings","parameters":[{"name":"id","in":"path","description":"课程ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"paymentType","in":"query","description":"支付类型","required":true,"schema":{"type":"integer","format":"int32"}},{"name":"price","in":"query","description":"价格","required":false,"schema":{"type":"number"}},{"name":"discountPrice","in":"query","description":"折扣价格","required":false,"schema":{"type":"number"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultCourse"}}}}}}},"/api/courses/{id}/cover":{"post":{"tags":["课程管理"],"summary":"更新课程封面","description":"上传课程封面图片","operationId":"updateCourseCover","parameters":[{"name":"id","in":"path","description":"课程ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"multipart/form-data":{"schema":{"required":["file"],"type":"object","properties":{"file":{"type":"string","description":"封面图片文件","format":"binary"}}}}}},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultCourse"}}}}}}},"/api/chapters":{"post":{"tags":["章节管理"],"summary":"创建章节","description":"创建一个新的课程章节","operationId":"createChapter","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChapterCreateDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultChapter"}}}}}}},"/api/categories":{"get":{"tags":["分类管理"],"summary":"分页查询分类","description":"分页获取分类列表，支持关键词搜索","operationId":"listCategories","parameters":[{"name":"keyword","in":"query","description":"搜索关键词","required":false,"schema":{"type":"string"}},{"name":"pageable","in":"query","required":true,"schema":{"$ref":"#/components/schemas/Pageable"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPageCategoryVO"}}}}}},"post":{"tags":["分类管理"],"summary":"创建分类","description":"创建新的课程分类","operationId":"createCategory","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CategoryDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultMapStringLong"}}}}}}},"/api/auth/register":{"post":{"tags":["认证接口"],"summary":"用户注册","description":"注册新用户","operationId":"register","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RegisterDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/auth/refresh-token":{"post":{"tags":["认证接口"],"summary":"刷新令牌","description":"刷新JWT令牌","operationId":"refreshToken","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RefreshTokenDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultJwtTokenDTO"}}}}}}},"/api/auth/logout":{"post":{"tags":["认证接口"],"summary":"注销","description":"用户注销","operationId":"logout","responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/auth/login":{"post":{"tags":["认证接口"],"summary":"用户登录","description":"用户登录获取JWT令牌","operationId":"login","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LoginDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultJwtTokenDTO"}}}}}}},"/api/auth/institution/register":{"post":{"tags":["机构用户认证"],"summary":"机构用户注册","description":"使用机构注册码注册机构用户","operationId":"registerInstitutionMember","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/InstitutionRegisterDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/auth/email-verification-code":{"post":{"tags":["认证接口"],"summary":"发送邮箱验证码","description":"发送邮箱验证码（用于用户注册）","operationId":"sendEmailVerificationCode","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmailVerificationDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/auth/email-update-code":{"post":{"tags":["认证接口"],"summary":"发送邮箱更新验证码","description":"发送邮箱更新验证码（用于更换邮箱）","operationId":"sendEmailUpdateCode","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmailVerificationDTO"}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/users/{id}/status":{"patch":{"tags":["用户管理"],"summary":"修改用户状态","description":"修改用户状态（0-禁用，1-正常）","operationId":"updateUserStatus","parameters":[{"name":"id","in":"path","description":"用户ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"status","in":"query","description":"状态（0-禁用，1-正常）","required":true,"schema":{"type":"integer","format":"int32"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}}},"/api/v1/questions/{id}/check-references":{"get":{"tags":["题目管理"],"summary":"检查题目引用","description":"检查题目是否被题组或其他实体引用","operationId":"checkQuestionReferences","parameters":[{"name":"id","in":"path","description":"题目ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultMapStringObject"}}}}}}},"/api/v1/questions/random":{"get":{"tags":["题目管理"],"summary":"随机获取题目","description":"随机获取指定数量的题目，可按类型筛选","operationId":"getRandomQuestions","parameters":[{"name":"type","in":"query","description":"题目类型","required":true,"schema":{"type":"integer","format":"int32"}},{"name":"count","in":"query","description":"题目数量","required":false,"schema":{"type":"integer","format":"int32","default":5}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListQuestionVO"}}}}}}},"/api/users/basic/{userId}":{"get":{"tags":["用户管理"],"summary":"获取用户基本信息","description":"获取用户基本信息（用于前端展示）","operationId":"getBasicUserInfo","parameters":[{"name":"userId","in":"path","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}}},"/api/tags/popular":{"get":{"tags":["标签管理"],"summary":"获取热门标签","description":"获取使用最多的标签列表","operationId":"getPopularTags","parameters":[{"name":"limit","in":"query","description":"数量限制","required":false,"schema":{"type":"integer","format":"int32","default":10}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListTagVO"}}}}}}},"/api/tags/name/{name}":{"get":{"tags":["标签管理"],"summary":"根据名称获取标签","description":"根据名称获取标签详情","operationId":"getTagByName","parameters":[{"name":"name","in":"path","description":"标签名称","required":true,"schema":{"type":"string"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultTagVO"}}}}}}},"/api/tags/check-name":{"get":{"tags":["标签管理"],"summary":"检查标签名称是否可用","description":"检查标签名称是否已被使用","operationId":"isNameAvailable","parameters":[{"name":"name","in":"query","description":"标签名称","required":true,"schema":{"type":"string"}},{"name":"excludeId","in":"query","description":"排除的标签ID","required":false,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultMapStringBoolean"}}}}}}},"/api/storage/quota/{institutionId}":{"get":{"tags":["storage-quota-controller"],"operationId":"getQuotaInfo","parameters":[{"name":"institutionId","in":"path","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultQuotaInfoVO"}}}}}}},"/api/storage/quota/{institutionId}/details":{"get":{"tags":["storage-quota-controller"],"operationId":"getAllQuotas","parameters":[{"name":"institutionId","in":"path","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListQuotaInfoVO"}}}}}}},"/api/sections/{id}/resources":{"get":{"tags":["小节管理"],"summary":"获取小节资源列表","description":"获取指定小节的所有资源","operationId":"getSectionResources","parameters":[{"name":"id","in":"path","description":"小节ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListSectionResource"}}}}}}},"/api/sections/{id}/question-groups":{"get":{"tags":["小节管理"],"summary":"获取小节题目组列表","description":"获取指定小节的所有题目组","operationId":"getSectionQuestionGroups","parameters":[{"name":"id","in":"path","description":"小节ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListSectionQuestionGroup"}}}}}}},"/api/sections/course/{courseId}":{"get":{"tags":["小节管理"],"summary":"获取课程下的所有小节","description":"获取指定课程下的所有小节","operationId":"getSectionsByCourse","parameters":[{"name":"courseId","in":"path","description":"课程ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListSection"}}}}}}},"/api/sections/chapter/{chapterId}":{"get":{"tags":["小节管理"],"summary":"获取章节下的小节列表","description":"获取指定章节下的所有小节","operationId":"getSectionsByChapter","parameters":[{"name":"chapterId","in":"path","description":"章节ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListSection"}}}}}}},"/api/reviewer/institutions/applications":{"get":{"tags":["机构审核"],"summary":"分页查询机构申请","description":"分页查询机构申请列表，可按状态筛选","operationId":"getApplications","parameters":[{"name":"queryDTO","in":"query","required":true,"schema":{"$ref":"#/components/schemas/InstitutionApplicationQueryDTO"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPageInstitutionApplicationVO"}}}}}}},"/api/reviewer/institutions/applications/{id}":{"get":{"tags":["机构审核"],"summary":"查询申请详情","description":"根据ID查询机构申请详情","operationId":"getApplicationDetail","parameters":[{"name":"id","in":"path","description":"申请ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultInstitutionApplicationVO"}}}}}}},"/api/questions/tags/question/{questionId}":{"get":{"tags":["题目标签管理"],"summary":"获取题目标签","description":"获取指定题目关联的所有标签","operationId":"getTagsByQuestionId","parameters":[{"name":"questionId","in":"path","description":"题目ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListQuestionTagVO"}}}}}}},"/api/questions/tags/all":{"get":{"tags":["题目标签管理"],"summary":"获取所有标签","description":"获取机构的所有标签","operationId":"getAllTags","responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListQuestionTagVO"}}}}}}},"/api/questions/import/template":{"get":{"tags":["试题导入"],"summary":"下载试题导入模板","description":"下载批量导入试题的Excel模板文件","operationId":"downloadTemplate","responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK"}}}},"/api/questions/groups/{groupId}/items":{"get":{"tags":["题目组管理"],"summary":"获取题目组中的所有题目","description":"获取指定题目组中的所有题目项","operationId":"getGroupItems","parameters":[{"name":"groupId","in":"path","description":"题目组ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListQuestionGroupItemVO"}}}}}}},"/api/questions/groups/section/{sectionId}":{"get":{"tags":["题目组管理"],"summary":"获取章节关联的题目组","description":"获取与指定章节关联的所有题目组","operationId":"getGroupsBySectionId","parameters":[{"name":"sectionId","in":"path","description":"章节ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListQuestionGroupVO"}}}}}}},"/api/questions/groups/all":{"get":{"tags":["题目组管理"],"summary":"获取所有题目组","description":"获取机构的所有题目组","operationId":"getAllGroups","responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListQuestionGroupVO"}}}}}}},"/api/media":{"get":{"tags":["媒体管理"],"summary":"获取媒体列表","description":"分页获取机构的媒体文件列表","operationId":"getMediaList","parameters":[{"name":"pageable","in":"query","required":true,"schema":{"$ref":"#/components/schemas/Pageable"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPageMediaVO"}}}}}}},"/api/media/{id}":{"get":{"tags":["媒体管理"],"summary":"获取媒体信息","description":"获取指定媒体的详细信息","operationId":"getMediaInfo","parameters":[{"name":"id","in":"path","description":"媒体ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultMediaVO"}}}}}},"delete":{"tags":["媒体管理"],"summary":"删除媒体文件","description":"删除指定的媒体文件并释放存储配额","operationId":"deleteMedia","parameters":[{"name":"id","in":"path","description":"媒体ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/media/{id}/access":{"get":{"tags":["媒体管理"],"summary":"获取媒体访问URL","description":"获取媒体文件的临时访问URL","operationId":"getMediaAccessUrl","parameters":[{"name":"id","in":"path","description":"媒体ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"expirationMinutes","in":"query","description":"URL有效期（分钟）","required":false,"schema":{"type":"integer","format":"int64","default":60}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultMapStringString"}}}}}}},"/api/media/quota":{"get":{"tags":["媒体管理"],"summary":"获取存储配额信息","description":"获取机构的存储配额使用情况","operationId":"getStorageQuota","responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListQuotaInfoVO"}}}}}}},"/api/institutions/members/register-code":{"get":{"tags":["机构成员管理"],"summary":"获取机构注册码","description":"获取当前用户所属机构的注册码","operationId":"getRegisterCode","responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultString"}}}}}}},"/api/institutions/application-status":{"get":{"tags":["机构申请"],"summary":"查询申请状态","description":"通过申请ID和邮箱查询机构申请状态","operationId":"getApplicationStatus","parameters":[{"name":"applicationId","in":"query","description":"申请ID","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"联系邮箱","required":true,"schema":{"type":"string"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultInstitutionApplicationVO"}}}}}}},"/api/courses/{id}/preview":{"get":{"tags":["课程管理"],"summary":"生成课程预览URL","description":"生成一个临时的课程预览URL","operationId":"generatePreviewUrl","parameters":[{"name":"id","in":"path","description":"课程ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPreviewUrlVO"}}}}}}},"/api/courses/preview/{token}":{"get":{"tags":["课程管理"],"summary":"访问课程预览","description":"通过预览令牌访问课程","operationId":"previewCourse","parameters":[{"name":"token","in":"path","description":"预览令牌","required":true,"schema":{"type":"string"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultCourse"}}}}}}},"/api/chapters/course/{courseId}":{"get":{"tags":["章节管理"],"summary":"获取课程章节列表","description":"获取指定课程的所有章节","operationId":"getChaptersByCourse","parameters":[{"name":"courseId","in":"path","description":"课程ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListChapter"}}}}}}},"/api/categories/tree":{"get":{"tags":["分类管理"],"summary":"获取分类树","description":"获取完整的分类树结构","operationId":"getCategoryTree","responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListCategoryTreeVO"}}}}}}},"/api/categories/roots":{"get":{"tags":["分类管理"],"summary":"获取根分类","description":"获取所有顶级分类","operationId":"listRootCategories","responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListCategoryVO"}}}}}}},"/api/categories/code/{code}":{"get":{"tags":["分类管理"],"summary":"根据编码获取分类","description":"根据编码获取分类详情","operationId":"getCategoryByCode","parameters":[{"name":"code","in":"path","description":"分类编码","required":true,"schema":{"type":"string"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultCategoryVO"}}}}}}},"/api/categories/children/{parentId}":{"get":{"tags":["分类管理"],"summary":"获取子分类","description":"获取指定父分类下的所有子分类","operationId":"listChildCategories","parameters":[{"name":"parentId","in":"path","description":"父分类ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListCategoryVO"}}}}}}},"/api/categories/check-code":{"get":{"tags":["分类管理"],"summary":"检查分类编码是否可用","description":"检查分类编码是否已被使用","operationId":"isCodeAvailable","parameters":[{"name":"code","in":"query","description":"分类编码","required":true,"schema":{"type":"string"}},{"name":"excludeId","in":"query","description":"排除的分类ID","required":false,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultMapStringBoolean"}}}}}}},"/api/auth/captcha/key":{"get":{"tags":["认证接口"],"summary":"获取验证码key","description":"获取验证码key，用于后续获取验证码图片","operationId":"getCaptchaKey","responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultString"}}}}}}},"/api/auth/captcha/image/{key}":{"get":{"tags":["认证接口"],"summary":"获取验证码图片","description":"根据验证码key获取对应的验证码图片","operationId":"getCaptchaImage","parameters":[{"name":"key","in":"path","description":"验证码key","required":true,"schema":{"type":"string"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK"}}}},"/api/users/batch":{"delete":{"tags":["用户管理"],"summary":"批量删除用户","description":"批量删除用户","operationId":"batchDeleteUsers","requestBody":{"content":{"application/json":{"schema":{"type":"array","description":"用户ID列表","items":{"type":"integer","format":"int64"}}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"204":{"description":"No Content","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/sections/resources/{resourceId}":{"delete":{"tags":["小节管理"],"summary":"删除小节资源","description":"删除指定的小节资源","operationId":"deleteSectionResource","parameters":[{"name":"resourceId","in":"path","description":"资源ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/roles/batch":{"delete":{"tags":["角色管理"],"summary":"批量删除角色","description":"批量删除角色","operationId":"batchDeleteRoles","requestBody":{"content":{"application/json":{"schema":{"type":"array","description":"角色ID列表","items":{"type":"integer","format":"int64"}}}},"required":true},"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"204":{"description":"No Content","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/questions/groups/{groupId}/items/{itemId}":{"delete":{"tags":["题目组管理"],"summary":"从题目组移除题目","description":"从题目组中移除指定的题目项","operationId":"removeQuestionFromGroup","parameters":[{"name":"groupId","in":"path","description":"题目组ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"itemId","in":"path","description":"题目组项ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/media/{id}/cancel":{"delete":{"tags":["媒体管理"],"summary":"取消上传","description":"取消上传并清理已上传的分片","operationId":"cancelUpload","parameters":[{"name":"id","in":"path","description":"媒体ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"400":{"description":"Bad Request","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"404":{"description":"Not Found","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}}},"components":{"schemas":{"ResultVoid":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"object"}}},"QuestionDTO":{"required":["difficulty","institutionId","score","title","type"],"type":"object","properties":{"id":{"type":"integer","format":"int64"},"institutionId":{"type":"integer","format":"int64"},"title":{"maxLength":255,"minLength":0,"type":"string"},"content":{"maxLength":2000,"minLength":0,"type":"string"},"type":{"maximum":4,"minimum":0,"type":"integer","format":"int32"},"difficulty":{"maximum":3,"minimum":1,"type":"integer","format":"int32"},"score":{"maximum":100,"minimum":1,"type":"integer","format":"int32"},"analysis":{"maxLength":2000,"minLength":0,"type":"string"},"options":{"type":"array","items":{"$ref":"#/components/schemas/QuestionOptionDTO"}},"answer":{"maxLength":2000,"minLength":0,"type":"string"}}},"QuestionOptionDTO":{"required":["content","isCorrect","orderIndex"],"type":"object","properties":{"id":{"type":"integer","format":"int64"},"content":{"maxLength":1000,"minLength":0,"type":"string"},"isCorrect":{"type":"boolean"},"orderIndex":{"type":"integer","format":"int32"}}},"QuestionOptionVO":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"questionId":{"type":"integer","format":"int64"},"content":{"type":"string"},"isCorrect":{"type":"boolean"},"orderIndex":{"type":"integer","format":"int32"}}},"QuestionTagVO":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"institutionId":{"type":"integer","format":"int64"},"name":{"type":"string"},"questionCount":{"type":"integer","format":"int64"},"creatorId":{"type":"integer","format":"int64"},"createdTime":{"type":"string","format":"date-time"},"updatedTime":{"type":"string","format":"date-time"}}},"QuestionVO":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"institutionId":{"type":"integer","format":"int64"},"title":{"type":"string"},"content":{"type":"string"},"type":{"type":"integer","format":"int32"},"typeDesc":{"type":"string"},"difficulty":{"type":"integer","format":"int32"},"difficultyDesc":{"type":"string"},"score":{"type":"integer","format":"int32"},"analysis":{"type":"string"},"answer":{"type":"string"},"options":{"type":"array","items":{"$ref":"#/components/schemas/QuestionOptionVO"}},"tags":{"type":"array","items":{"$ref":"#/components/schemas/QuestionTagVO"}},"creatorId":{"type":"integer","format":"int64"},"creatorName":{"type":"string"},"createdTime":{"type":"string","format":"date-time"},"updatedTime":{"type":"string","format":"date-time"}}},"ResultQuestionVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/QuestionVO"}}},"UserDTO":{"required":["email","username"],"type":"object","properties":{"id":{"type":"integer","description":"用户ID","format":"int64"},"username":{"maxLength":20,"minLength":4,"pattern":"^[a-zA-Z0-9_]+$","type":"string","description":"用户名","example":"zhangsan"},"password":{"type":"string","description":"密码"},"email":{"type":"string","description":"邮箱","example":"zhangsan@example.com"},"phone":{"pattern":"^1[3-9]\\d{9}$","type":"string","description":"手机号","example":"13812345678"},"avatar":{"type":"string","description":"头像"},"nickname":{"type":"string","description":"昵称"},"status":{"type":"integer","description":"状态：0-禁用，1-正常","format":"int32"},"institutionId":{"type":"integer","description":"机构ID","format":"int64"},"roleIds":{"uniqueItems":true,"type":"array","description":"角色ID列表","items":{"type":"integer","description":"角色ID列表","format":"int64"}}},"description":"用户数据"},"Permission":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"name":{"type":"string"},"code":{"type":"string"},"description":{"type":"string"},"url":{"type":"string"},"method":{"type":"string"}}},"ResultUserVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/UserVO"}}},"Role":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"name":{"type":"string"},"code":{"type":"string"},"description":{"type":"string"},"permissions":{"uniqueItems":true,"type":"array","items":{"$ref":"#/components/schemas/Permission"}}},"description":"角色列表"},"UserVO":{"type":"object","properties":{"id":{"type":"integer","description":"用户ID","format":"int64"},"username":{"type":"string","description":"用户名"},"email":{"type":"string","description":"邮箱"},"phone":{"type":"string","description":"手机号"},"avatar":{"type":"string","description":"头像"},"nickname":{"type":"string","description":"昵称"},"status":{"type":"integer","description":"状态：0-禁用，1-正常","format":"int32"},"institutionId":{"type":"integer","description":"机构ID","format":"int64"},"createdAt":{"type":"string","description":"创建时间","format":"date-time"},"updatedAt":{"type":"string","description":"更新时间","format":"date-time"},"lastLoginAt":{"type":"string","description":"最后登录时间","format":"date-time"},"roles":{"uniqueItems":true,"type":"array","description":"角色列表","items":{"$ref":"#/components/schemas/Role"}}},"description":"用户信息"},"UserProfileDTO":{"type":"object","properties":{"nickname":{"type":"string","description":"昵称","example":"张三"},"phone":{"pattern":"^1[3-9]\\d{9}$","type":"string","description":"手机号","example":"13800138000"}},"description":"用户个人信息更新请求"},"ChangePasswordDTO":{"required":["confirmPassword","newPassword","oldPassword"],"type":"object","properties":{"oldPassword":{"type":"string","description":"旧密码","example":"oldPassword123"},"newPassword":{"pattern":"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,20}$","type":"string","description":"新密码","example":"newPassword123"},"confirmPassword":{"type":"string","description":"确认密码","example":"newPassword123"}},"description":"密码修改请求"},"EmailUpdateDTO":{"required":["emailCode","newEmail","password"],"type":"object","properties":{"newEmail":{"type":"string","description":"新邮箱","example":"newemail@example.com"},"emailCode":{"type":"string","description":"邮箱验证码","example":"123456"},"password":{"type":"string","description":"当前密码","example":"password123"}},"description":"邮箱更新请求"},"TagDTO":{"required":["name"],"type":"object","properties":{"id":{"type":"integer","format":"int64"},"name":{"maxLength":50,"minLength":0,"type":"string"},"description":{"maxLength":255,"minLength":0,"type":"string"}}},"SectionQuestionGroupDTO":{"required":["questionGroupId","sectionId"],"type":"object","properties":{"sectionId":{"type":"integer","format":"int64"},"questionGroupId":{"type":"integer","format":"int64"},"orderIndex":{"minimum":0,"type":"integer","format":"int32"},"randomOrder":{"type":"boolean"},"orderByDifficulty":{"type":"boolean"},"showAnalysis":{"type":"boolean"}}},"Institution":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"name":{"type":"string"},"logo":{"type":"string"},"description":{"type":"string"},"status":{"type":"integer","format":"int32"},"registerCode":{"type":"string"},"contactPerson":{"type":"string"},"contactPhone":{"type":"string"},"contactEmail":{"type":"string"},"address":{"type":"string"}}},"Question":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"title":{"type":"string"},"content":{"type":"string"},"type":{"type":"integer","format":"int32"},"difficulty":{"type":"integer","format":"int32"},"score":{"type":"integer","format":"int32"},"analysis":{"type":"string"},"answer":{"type":"string"},"institution":{"$ref":"#/components/schemas/Institution"},"creatorId":{"type":"integer","format":"int64"},"creatorName":{"type":"string"},"createdTime":{"type":"string","format":"date-time"},"updatedTime":{"type":"string","format":"date-time"},"options":{"type":"array","items":{"$ref":"#/components/schemas/QuestionOption"}},"institutionId":{"type":"integer","format":"int64"},"typeEnum":{"type":"string","enum":["SINGLE_CHOICE","MULTIPLE_CHOICE","TRUE_FALSE","FILL_BLANK","SHORT_ANSWER"]}}},"QuestionGroup":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"name":{"type":"string"},"description":{"type":"string"},"institution":{"$ref":"#/components/schemas/Institution"},"creatorId":{"type":"integer","format":"int64"},"creatorName":{"type":"string"},"createdTime":{"type":"string","format":"date-time"},"updatedTime":{"type":"string","format":"date-time"},"items":{"type":"array","items":{"$ref":"#/components/schemas/QuestionGroupItem"}},"institutionId":{"type":"integer","format":"int64"}}},"QuestionGroupItem":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"group":{"$ref":"#/components/schemas/QuestionGroup"},"question":{"$ref":"#/components/schemas/Question"},"orderIndex":{"type":"integer","format":"int32"},"difficulty":{"type":"integer","format":"int32"},"score":{"type":"integer","format":"int32"},"groupId":{"type":"integer","format":"int64"},"questionId":{"type":"integer","format":"int64"}}},"QuestionOption":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"question":{"$ref":"#/components/schemas/Question"},"content":{"type":"string"},"isCorrect":{"type":"boolean"},"orderIndex":{"type":"integer","format":"int32"}}},"ResultSectionQuestionGroup":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/SectionQuestionGroup"}}},"SectionQuestionGroup":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"sectionId":{"type":"integer","format":"int64"},"questionGroup":{"$ref":"#/components/schemas/QuestionGroup"},"orderIndex":{"type":"integer","format":"int32"},"randomOrder":{"type":"boolean"},"orderByDifficulty":{"type":"boolean"},"showAnalysis":{"type":"boolean"},"questionGroupId":{"type":"integer","format":"int64"}}},"SectionCreateDTO":{"required":["chapterId","contentType","title"],"type":"object","properties":{"title":{"maxLength":200,"minLength":0,"type":"string"},"description":{"maxLength":1000,"minLength":0,"type":"string"},"chapterId":{"type":"integer","format":"int64"},"orderIndex":{"minimum":0,"type":"integer","format":"int32"},"contentType":{"type":"string"}}},"Category":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"name":{"type":"string"},"code":{"type":"string"},"description":{"type":"string"},"parent":{"$ref":"#/components/schemas/Category"},"level":{"type":"integer","format":"int32"},"orderIndex":{"type":"integer","format":"int32"},"enabled":{"type":"boolean"},"icon":{"type":"string"},"fullPath":{"type":"string"}}},"Chapter":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"title":{"type":"string"},"description":{"type":"string"},"orderIndex":{"type":"integer","format":"int32"},"accessType":{"type":"integer","format":"int32"},"estimatedMinutes":{"type":"integer","format":"int32"},"course":{"$ref":"#/components/schemas/Course"},"courseId":{"type":"integer","format":"int64"},"accessTypeEnum":{"type":"string","enum":["FREE_TRIAL","PAID_ONLY"]}}},"Course":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"title":{"type":"string"},"description":{"type":"string"},"coverImage":{"type":"string"},"status":{"type":"integer","format":"int32"},"institution":{"$ref":"#/components/schemas/Institution"},"creatorId":{"type":"integer","format":"int64"},"reviewStatus":{"type":"integer","format":"int32"},"reviewerId":{"type":"integer","format":"int64"},"reviewedAt":{"type":"string","format":"date-time"},"reviewComment":{"type":"string"},"publishedVersionId":{"type":"integer","format":"int64"},"isPublishedVersion":{"type":"boolean"},"version":{"type":"integer","format":"int32"},"versionType":{"type":"integer","format":"int32"},"paymentType":{"type":"integer","format":"int32"},"price":{"type":"number"},"discountPrice":{"type":"number"},"difficulty":{"type":"integer","format":"int32"},"totalLessons":{"type":"integer","format":"int32"},"totalDuration":{"type":"integer","format":"int32"},"targetAudience":{"type":"string"},"learningObjectives":{"type":"string"},"category":{"$ref":"#/components/schemas/Category"},"tags":{"uniqueItems":true,"type":"array","items":{"$ref":"#/components/schemas/Tag"}},"dataVersion":{"type":"integer","format":"int32"},"institutionId":{"type":"integer","format":"int64"},"statusEnum":{"type":"string","enum":["DRAFT","PENDING_REVIEW","REVIEWING","REJECTED","PUBLISHED","UNPUBLISHED"]},"versionTypeEnum":{"type":"string","enum":["DRAFT","REVIEW","PUBLISHED"]},"paymentTypeEnum":{"type":"string","enum":["FREE","PAID"]}}},"Media":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"title":{"type":"string"},"description":{"type":"string"},"type":{"type":"string","enum":["VIDEO","AUDIO","DOCUMENT"]},"size":{"type":"integer","format":"int64"},"originalFilename":{"type":"string"},"storagePath":{"type":"string"},"status":{"type":"string","enum":["UPLOADING","PROCESSING","COMPLETED","FAILED"]},"institution":{"$ref":"#/components/schemas/Institution"},"uploaderId":{"type":"integer","format":"int64"},"uploadTime":{"type":"string","format":"date-time"},"lastAccessTime":{"type":"string","format":"date-time"}}},"ResultSection":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/Section"}}},"Section":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"title":{"type":"string"},"description":{"type":"string"},"orderIndex":{"type":"integer","format":"int32"},"contentType":{"type":"string"},"chapter":{"$ref":"#/components/schemas/Chapter"},"resources":{"type":"array","items":{"$ref":"#/components/schemas/SectionResource"}},"chapterId":{"type":"integer","format":"int64"},"contentTypeEnum":{"type":"string","enum":["VIDEO","DOCUMENT","AUDIO","TEXT","IMAGE","MIXED"]}}},"SectionResource":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"section":{"$ref":"#/components/schemas/Section"},"media":{"$ref":"#/components/schemas/Media"},"resourceType":{"type":"string"},"orderIndex":{"type":"integer","format":"int32"},"sectionId":{"type":"integer","format":"int64"},"mediaId":{"type":"integer","format":"int64"},"resourceTypeEnum":{"type":"string","enum":["PRIMARY","SUPPLEMENTARY","HOMEWORK","REFERENCE"]}}},"Tag":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"name":{"type":"string"},"description":{"type":"string"},"useCount":{"type":"integer","format":"int32"}}},"SectionOrderDTO":{"required":["id","orderIndex"],"type":"object","properties":{"id":{"type":"integer","format":"int64"},"orderIndex":{"minimum":0,"type":"integer","format":"int32"}}},"ResultListSection":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Section"}}}},"RoleDTO":{"required":["code","name"],"type":"object","properties":{"id":{"type":"integer","description":"角色ID","format":"int64"},"name":{"maxLength":50,"minLength":2,"type":"string","description":"角色名称","example":"系统管理员"},"code":{"maxLength":50,"minLength":4,"pattern":"^ROLE_[A-Z0-9_]+$","type":"string","description":"角色编码","example":"ROLE_ADMIN"},"description":{"type":"string","description":"角色描述"},"permissionIds":{"uniqueItems":true,"type":"array","description":"权限ID列表","items":{"type":"integer","description":"权限ID列表","format":"int64"}}},"description":"角色数据"},"ResultRoleVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/RoleVO"}}},"RoleVO":{"type":"object","properties":{"id":{"type":"integer","description":"角色ID","format":"int64"},"name":{"type":"string","description":"角色名称"},"code":{"type":"string","description":"角色编码"},"description":{"type":"string","description":"角色描述"},"createdAt":{"type":"string","description":"创建时间","format":"date-time"},"updatedAt":{"type":"string","description":"更新时间","format":"date-time"},"permissions":{"uniqueItems":true,"type":"array","description":"权限列表","items":{"$ref":"#/components/schemas/Permission"}}},"description":"角色信息"},"QuestionTagDTO":{"required":["institutionId","name"],"type":"object","properties":{"id":{"type":"integer","format":"int64"},"institutionId":{"type":"integer","format":"int64"},"name":{"maxLength":50,"minLength":0,"type":"string"}}},"ResultQuestionTagVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/QuestionTagVO"}}},"QuestionGroupDTO":{"required":["institutionId","name"],"type":"object","properties":{"id":{"type":"integer","format":"int64"},"institutionId":{"type":"integer","format":"int64"},"name":{"maxLength":100,"minLength":0,"type":"string"},"description":{"maxLength":500,"minLength":0,"type":"string"}}},"QuestionGroupItemVO":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"groupId":{"type":"integer","format":"int64"},"questionId":{"type":"integer","format":"int64"},"question":{"$ref":"#/components/schemas/QuestionVO"},"orderIndex":{"type":"integer","format":"int32"},"difficulty":{"type":"integer","format":"int32"},"difficultyDesc":{"type":"string"},"score":{"type":"integer","format":"int32"}}},"QuestionGroupVO":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"institutionId":{"type":"integer","format":"int64"},"name":{"type":"string"},"description":{"type":"string"},"questionCount":{"type":"integer","format":"int64"},"items":{"type":"array","items":{"$ref":"#/components/schemas/QuestionGroupItemVO"}},"creatorId":{"type":"integer","format":"int64"},"creatorName":{"type":"string"},"createdTime":{"type":"string","format":"date-time"},"updatedTime":{"type":"string","format":"date-time"}}},"ResultQuestionGroupVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/QuestionGroupVO"}}},"QuestionGroupItemDTO":{"required":["groupId","orderIndex","questionId"],"type":"object","properties":{"id":{"type":"integer","format":"int64"},"groupId":{"type":"integer","format":"int64"},"questionId":{"type":"integer","format":"int64"},"orderIndex":{"minimum":0,"type":"integer","format":"int32"},"difficulty":{"type":"integer","format":"int32"},"score":{"type":"integer","format":"int32"}}},"ResultBoolean":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"boolean"}}},"ResultQuestionGroupItemVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/QuestionGroupItemVO"}}},"PermissionDTO":{"required":["code","name"],"type":"object","properties":{"id":{"type":"integer","description":"权限ID","format":"int64"},"name":{"maxLength":50,"minLength":2,"type":"string","description":"权限名称","example":"用户查询"},"code":{"maxLength":50,"minLength":4,"pattern":"^[A-Z0-9_]+$","type":"string","description":"权限编码","example":"USER_QUERY"},"description":{"type":"string","description":"权限描述"},"url":{"type":"string","description":"资源URL"},"method":{"type":"string","description":"HTTP方法","example":"GET"}},"description":"权限数据"},"PermissionVO":{"type":"object","properties":{"id":{"type":"integer","description":"权限ID","format":"int64"},"name":{"type":"string","description":"权限名称"},"code":{"type":"string","description":"权限编码"},"description":{"type":"string","description":"权限描述"},"url":{"type":"string","description":"资源URL"},"method":{"type":"string","description":"HTTP方法"},"createdAt":{"type":"string","description":"创建时间","format":"date-time"},"updatedAt":{"type":"string","description":"更新时间","format":"date-time"}},"description":"权限信息"},"ResultPermissionVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/PermissionVO"}}},"CourseCreateDTO":{"required":["paymentType","title"],"type":"object","properties":{"title":{"maxLength":200,"minLength":0,"type":"string"},"description":{"maxLength":2000,"minLength":0,"type":"string"},"categoryId":{"type":"integer","format":"int64"},"tagIds":{"uniqueItems":true,"type":"array","items":{"type":"integer","format":"int64"}},"paymentType":{"type":"integer","format":"int32"},"price":{"maximum":100000,"exclusiveMaximum":false,"minimum":0,"exclusiveMinimum":false,"type":"number"},"discountPrice":{"maximum":100000,"exclusiveMaximum":false,"minimum":0,"exclusiveMinimum":false,"type":"number"},"difficulty":{"maximum":3,"minimum":1,"type":"integer","format":"int32"},"targetAudience":{"maxLength":1000,"minLength":0,"type":"string"},"learningObjectives":{"maxLength":1000,"minLength":0,"type":"string"}}},"ResultCourse":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/Course"}}},"ChapterCreateDTO":{"required":["courseId","title"],"type":"object","properties":{"title":{"maxLength":200,"minLength":0,"type":"string"},"description":{"maxLength":1000,"minLength":0,"type":"string"},"courseId":{"type":"integer","format":"int64"},"orderIndex":{"minimum":0,"type":"integer","format":"int32"},"accessType":{"type":"integer","format":"int32"},"estimatedMinutes":{"minimum":0,"type":"integer","format":"int32"}}},"ResultChapter":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/Chapter"}}},"ChapterOrderDTO":{"required":["id","orderIndex"],"type":"object","properties":{"id":{"type":"integer","format":"int64"},"orderIndex":{"minimum":0,"type":"integer","format":"int32"}}},"ResultListChapter":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/Chapter"}}}},"CategoryDTO":{"required":["code","name"],"type":"object","properties":{"id":{"type":"integer","format":"int64"},"name":{"maxLength":100,"minLength":0,"type":"string"},"code":{"maxLength":50,"minLength":0,"pattern":"^[a-zA-Z0-9_-]+$","type":"string"},"description":{"maxLength":500,"minLength":0,"type":"string"},"parentId":{"type":"integer","format":"int64"},"orderIndex":{"type":"integer","format":"int32"},"enabled":{"type":"boolean"},"icon":{"maxLength":255,"minLength":0,"type":"string"}}},"ResultMapStringString":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"object","additionalProperties":{"type":"string"}}}},"ResultMapStringLong":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"object","additionalProperties":{"type":"integer","format":"int64"}}}},"ResultListLong":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"type":"integer","format":"int64"}}}},"SectionResourceDTO":{"required":["mediaId","resourceType","sectionId"],"type":"object","properties":{"sectionId":{"type":"integer","format":"int64"},"mediaId":{"type":"integer","format":"int64"},"resourceType":{"type":"string"},"orderIndex":{"minimum":0,"type":"integer","format":"int32"}}},"ResultSectionResource":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/SectionResource"}}},"InstitutionVO":{"type":"object","properties":{"id":{"type":"integer","description":"ID","format":"int64"},"name":{"type":"string","description":"机构名称"},"logo":{"type":"string","description":"机构Logo"},"description":{"type":"string","description":"机构描述"},"status":{"type":"integer","description":"状态：0-待审核，1-正常，2-禁用","format":"int32"},"contactPerson":{"type":"string","description":"联系人"},"contactPhone":{"type":"string","description":"联系电话"},"contactEmail":{"type":"string","description":"联系邮箱"},"address":{"type":"string","description":"地址"},"createdAt":{"type":"string","description":"创建时间","format":"date-time"},"updatedAt":{"type":"string","description":"更新时间","format":"date-time"}},"description":"机构信息"},"ResultInstitutionVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/InstitutionVO"}}},"FailureItem":{"type":"object","properties":{"rowIndex":{"type":"integer","format":"int32"},"title":{"type":"string"},"errorMessage":{"type":"string"}}},"QuestionImportResultVO":{"type":"object","properties":{"totalCount":{"type":"integer","format":"int32"},"successCount":{"type":"integer","format":"int32"},"failureCount":{"type":"integer","format":"int32"},"duration":{"type":"integer","format":"int64"},"failureItems":{"type":"array","items":{"$ref":"#/components/schemas/FailureItem"}}}},"ResultQuestionImportResultVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/QuestionImportResultVO"}}},"ResultListQuestionGroupItemVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/QuestionGroupItemVO"}}}},"CompleteUploadDTO":{"required":["completedParts","uploadId"],"type":"object","properties":{"uploadId":{"type":"string"},"completedParts":{"type":"array","items":{"$ref":"#/components/schemas/PartInfo"}}}},"PartInfo":{"type":"object","properties":{"partNumber":{"type":"integer","format":"int32"},"etag":{"type":"string"}}},"MediaVO":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"title":{"type":"string"},"description":{"type":"string"},"type":{"type":"string"},"size":{"type":"integer","format":"int64"},"originalFilename":{"type":"string"},"status":{"type":"string"},"institutionId":{"type":"integer","format":"int64"},"uploaderId":{"type":"integer","format":"int64"},"uploadTime":{"type":"string","format":"date-time"},"lastAccessTime":{"type":"string","format":"date-time"},"accessUrl":{"type":"string"}}},"ResultMediaVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/MediaVO"}}},"MediaUploadInitDTO":{"required":["contentType","fileSize","filename","title"],"type":"object","properties":{"title":{"type":"string"},"description":{"type":"string"},"filename":{"type":"string"},"contentType":{"type":"string"},"fileSize":{"minimum":1,"type":"integer","format":"int64"},"chunkSize":{"type":"integer","format":"int32"}}},"PresignedUrlInfo":{"type":"object","properties":{"partNumber":{"type":"integer","format":"int32"},"url":{"type":"string"}}},"ResultUploadInitiationVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/UploadInitiationVO"}}},"UploadInitiationVO":{"type":"object","properties":{"mediaId":{"type":"integer","format":"int64"},"uploadId":{"type":"string"},"totalParts":{"type":"integer","format":"int32"},"chunkSize":{"type":"integer","format":"int64"},"presignedUrls":{"type":"array","items":{"$ref":"#/components/schemas/PresignedUrlInfo"}}}},"InstitutionApplyDTO":{"required":["captchaCode","captchaKey","contactEmail","contactPerson","name"],"type":"object","properties":{"name":{"type":"string","description":"机构名称","example":"示例教育机构"},"logo":{"type":"string","description":"机构Logo","example":"https://example.com/logo.png"},"description":{"maxLength":500,"minLength":0,"type":"string","description":"机构描述","example":"专注于提供高质量的在线课程..."},"contactPerson":{"type":"string","description":"联系人","example":"张三"},"contactPhone":{"pattern":"^1[3-9]\\d{9}$","type":"string","description":"联系电话","example":"13800138000"},"contactEmail":{"type":"string","description":"联系邮箱","example":"contact@example.com"},"address":{"type":"string","description":"地址","example":"北京市朝阳区xxx街道xxx号"},"captchaKey":{"type":"string","description":"验证码Key","example":"7d8f3e"},"captchaCode":{"type":"string","description":"验证码","example":"A2B3"}},"description":"机构申请参数"},"ResultString":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"string"}}},"RegisterDTO":{"required":["captchaCode","captchaKey","email","emailCode","password","username"],"type":"object","properties":{"username":{"maxLength":20,"minLength":4,"pattern":"^[a-zA-Z0-9_]+$","type":"string","description":"用户名","example":"zhangsan"},"password":{"maxLength":20,"minLength":6,"type":"string","description":"密码","example":"password123"},"email":{"type":"string","description":"邮箱","example":"zhangsan@example.com"},"phone":{"pattern":"^1[3-9]\\d{9}$","type":"string","description":"手机号","example":"13812345678"},"captchaKey":{"type":"string","description":"验证码Key","example":"123456"},"captchaCode":{"type":"string","description":"验证码","example":"1234"},"emailCode":{"maxLength":6,"minLength":6,"pattern":"^\\d{6}$","type":"string","description":"邮箱验证码","example":"123456"}},"description":"注册请求"},"RefreshTokenDTO":{"required":["refreshToken"],"type":"object","properties":{"refreshToken":{"type":"string","description":"刷新令牌","example":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."}},"description":"刷新令牌请求"},"JwtTokenDTO":{"type":"object","properties":{"accessToken":{"type":"string"},"refreshToken":{"type":"string"},"tokenType":{"type":"string"},"expiresIn":{"type":"integer","format":"int64"}}},"ResultJwtTokenDTO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/JwtTokenDTO"}}},"LoginDTO":{"required":["captchaCode","captchaKey","password","username"],"type":"object","properties":{"username":{"type":"string","description":"用户名","example":"zhangsan"},"password":{"type":"string","description":"密码","example":"password123"},"captchaKey":{"type":"string","description":"验证码Key","example":"123456"},"captchaCode":{"type":"string","description":"验证码","example":"1234"}},"description":"登录请求"},"InstitutionRegisterDTO":{"required":["captchaCode","captchaKey","email","emailCode","institutionCode","password","username"],"type":"object","properties":{"username":{"maxLength":20,"minLength":4,"pattern":"^[a-zA-Z0-9_]+$","type":"string","description":"用户名","example":"institution_user"},"password":{"maxLength":20,"minLength":6,"type":"string","description":"密码","example":"password123"},"email":{"type":"string","description":"邮箱","example":"user@example.com"},"phone":{"pattern":"^1[3-9]\\d{9}$","type":"string","description":"手机号","example":"13800138000"},"institutionCode":{"type":"string","description":"机构注册码","example":"ABC12345"},"captchaKey":{"type":"string","description":"验证码Key","example":"7d8f3e"},"captchaCode":{"type":"string","description":"验证码","example":"A2B3"},"emailCode":{"maxLength":6,"minLength":6,"pattern":"^\\d{6}$","type":"string","description":"邮箱验证码","example":"123456"}},"description":"机构用户注册参数"},"EmailVerificationDTO":{"required":["captchaCode","captchaKey","email"],"type":"object","properties":{"email":{"type":"string","description":"邮箱","example":"zhangsan@example.com"},"captchaKey":{"type":"string","description":"验证码Key","example":"123456"},"captchaCode":{"type":"string","description":"验证码","example":"1234"}},"description":"邮箱验证码请求"},"Pageable":{"type":"object","properties":{"page":{"minimum":0,"type":"integer","format":"int32"},"size":{"minimum":1,"type":"integer","format":"int32"},"sort":{"type":"array","items":{"type":"string"}}}},"PageQuestionVO":{"type":"object","properties":{"totalElements":{"type":"integer","format":"int64"},"totalPages":{"type":"integer","format":"int32"},"size":{"type":"integer","format":"int32"},"content":{"type":"array","items":{"$ref":"#/components/schemas/QuestionVO"}},"number":{"type":"integer","format":"int32"},"sort":{"type":"array","items":{"$ref":"#/components/schemas/SortObject"}},"first":{"type":"boolean"},"last":{"type":"boolean"},"numberOfElements":{"type":"integer","format":"int32"},"pageable":{"$ref":"#/components/schemas/PageableObject"},"empty":{"type":"boolean"}}},"PageableObject":{"type":"object","properties":{"offset":{"type":"integer","format":"int64"},"sort":{"type":"array","items":{"$ref":"#/components/schemas/SortObject"}},"pageSize":{"type":"integer","format":"int32"},"pageNumber":{"type":"integer","format":"int32"},"paged":{"type":"boolean"},"unpaged":{"type":"boolean"}}},"ResultPageQuestionVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/PageQuestionVO"}}},"SortObject":{"type":"object","properties":{"direction":{"type":"string"},"nullHandling":{"type":"string"},"ascending":{"type":"boolean"},"property":{"type":"string"},"ignoreCase":{"type":"boolean"}}},"ResultMapStringObject":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"object","additionalProperties":{"type":"object"}}}},"ResultListQuestionVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/QuestionVO"}}}},"UserQueryDTO":{"type":"object","properties":{"username":{"type":"string","description":"用户名"},"email":{"type":"string","description":"邮箱"},"phone":{"type":"string","description":"手机号"},"status":{"type":"integer","description":"状态：0-禁用，1-正常","format":"int32"},"institutionId":{"type":"integer","description":"机构ID","format":"int64"},"roleId":{"type":"integer","description":"角色ID","format":"int64"},"pageNum":{"type":"integer","description":"页码","format":"int32","default":1},"pageSize":{"type":"integer","description":"每页条数","format":"int32","default":10}},"description":"用户查询参数"},"PageUserVO":{"type":"object","properties":{"totalElements":{"type":"integer","format":"int64"},"totalPages":{"type":"integer","format":"int32"},"size":{"type":"integer","format":"int32"},"content":{"type":"array","items":{"$ref":"#/components/schemas/UserVO"}},"number":{"type":"integer","format":"int32"},"sort":{"type":"array","items":{"$ref":"#/components/schemas/SortObject"}},"first":{"type":"boolean"},"last":{"type":"boolean"},"numberOfElements":{"type":"integer","format":"int32"},"pageable":{"$ref":"#/components/schemas/PageableObject"},"empty":{"type":"boolean"}}},"ResultPageUserVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/PageUserVO"}}},"PageTagVO":{"type":"object","properties":{"totalElements":{"type":"integer","format":"int64"},"totalPages":{"type":"integer","format":"int32"},"size":{"type":"integer","format":"int32"},"content":{"type":"array","items":{"$ref":"#/components/schemas/TagVO"}},"number":{"type":"integer","format":"int32"},"sort":{"type":"array","items":{"$ref":"#/components/schemas/SortObject"}},"first":{"type":"boolean"},"last":{"type":"boolean"},"numberOfElements":{"type":"integer","format":"int32"},"pageable":{"$ref":"#/components/schemas/PageableObject"},"empty":{"type":"boolean"}}},"ResultPageTagVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/PageTagVO"}}},"TagVO":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"name":{"type":"string"},"description":{"type":"string"},"useCount":{"type":"integer","format":"int32"},"courseCount":{"type":"integer","format":"int32"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"}}},"ResultTagVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/TagVO"}}},"ResultListTagVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/TagVO"}}}},"ResultMapStringBoolean":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"object","additionalProperties":{"type":"boolean"}}}},"QuotaInfoVO":{"type":"object","properties":{"type":{"type":"string"},"typeName":{"type":"string"},"totalQuota":{"type":"integer","format":"int64"},"usedQuota":{"type":"integer","format":"int64"},"lastUpdatedTime":{"type":"string","format":"date-time"},"availableQuota":{"type":"integer","format":"int64"},"usagePercentage":{"type":"number","format":"double"}}},"ResultQuotaInfoVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/QuotaInfoVO"}}},"ResultListQuotaInfoVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/QuotaInfoVO"}}}},"ResultListSectionResource":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/SectionResource"}}}},"ResultListSectionQuestionGroup":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/SectionQuestionGroup"}}}},"ResultListRoleVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/RoleVO"}}}},"InstitutionApplicationQueryDTO":{"type":"object","properties":{"applicationId":{"type":"string","description":"申请ID","example":"APP123456"},"name":{"type":"string","description":"机构名称","example":"示例教育机构"},"contactPerson":{"type":"string","description":"联系人","example":"张三"},"contactEmail":{"type":"string","description":"联系邮箱","example":"contact@example.com"},"status":{"type":"integer","description":"状态：0-待审核，1-已通过，2-已拒绝","format":"int32","example":0},"pageNum":{"type":"integer","description":"页码","format":"int32","default":1},"pageSize":{"type":"integer","description":"每页条数","format":"int32","default":10}},"description":"机构申请查询参数"},"InstitutionApplicationVO":{"type":"object","properties":{"id":{"type":"integer","description":"ID","format":"int64"},"applicationId":{"type":"string","description":"申请ID"},"name":{"type":"string","description":"机构名称"},"logo":{"type":"string","description":"机构Logo"},"description":{"type":"string","description":"机构描述"},"contactPerson":{"type":"string","description":"联系人"},"contactPhone":{"type":"string","description":"联系电话"},"contactEmail":{"type":"string","description":"联系邮箱"},"address":{"type":"string","description":"地址"},"status":{"type":"integer","description":"状态：0-待审核，1-已通过，2-已拒绝","format":"int32"},"reviewComment":{"type":"string","description":"审核结果备注"},"reviewerId":{"type":"integer","description":"审核人ID","format":"int64"},"reviewedAt":{"type":"string","description":"审核时间","format":"date-time"},"institutionId":{"type":"integer","description":"关联的机构ID","format":"int64"},"createdAt":{"type":"string","description":"创建时间","format":"date-time"},"updatedAt":{"type":"string","description":"更新时间","format":"date-time"}},"description":"机构申请信息"},"PageInstitutionApplicationVO":{"type":"object","properties":{"totalElements":{"type":"integer","format":"int64"},"totalPages":{"type":"integer","format":"int32"},"size":{"type":"integer","format":"int32"},"content":{"type":"array","items":{"$ref":"#/components/schemas/InstitutionApplicationVO"}},"number":{"type":"integer","format":"int32"},"sort":{"type":"array","items":{"$ref":"#/components/schemas/SortObject"}},"first":{"type":"boolean"},"last":{"type":"boolean"},"numberOfElements":{"type":"integer","format":"int32"},"pageable":{"$ref":"#/components/schemas/PageableObject"},"empty":{"type":"boolean"}}},"ResultPageInstitutionApplicationVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/PageInstitutionApplicationVO"}}},"ResultInstitutionApplicationVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/InstitutionApplicationVO"}}},"PageQuestionTagVO":{"type":"object","properties":{"totalElements":{"type":"integer","format":"int64"},"totalPages":{"type":"integer","format":"int32"},"size":{"type":"integer","format":"int32"},"content":{"type":"array","items":{"$ref":"#/components/schemas/QuestionTagVO"}},"number":{"type":"integer","format":"int32"},"sort":{"type":"array","items":{"$ref":"#/components/schemas/SortObject"}},"first":{"type":"boolean"},"last":{"type":"boolean"},"numberOfElements":{"type":"integer","format":"int32"},"pageable":{"$ref":"#/components/schemas/PageableObject"},"empty":{"type":"boolean"}}},"ResultPageQuestionTagVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/PageQuestionTagVO"}}},"ResultListQuestionTagVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/QuestionTagVO"}}}},"PageQuestionGroupVO":{"type":"object","properties":{"totalElements":{"type":"integer","format":"int64"},"totalPages":{"type":"integer","format":"int32"},"size":{"type":"integer","format":"int32"},"content":{"type":"array","items":{"$ref":"#/components/schemas/QuestionGroupVO"}},"number":{"type":"integer","format":"int32"},"sort":{"type":"array","items":{"$ref":"#/components/schemas/SortObject"}},"first":{"type":"boolean"},"last":{"type":"boolean"},"numberOfElements":{"type":"integer","format":"int32"},"pageable":{"$ref":"#/components/schemas/PageableObject"},"empty":{"type":"boolean"}}},"ResultPageQuestionGroupVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/PageQuestionGroupVO"}}},"ResultListQuestionGroupVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/QuestionGroupVO"}}}},"ResultListPermissionVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/PermissionVO"}}}},"PageMediaVO":{"type":"object","properties":{"totalElements":{"type":"integer","format":"int64"},"totalPages":{"type":"integer","format":"int32"},"size":{"type":"integer","format":"int32"},"content":{"type":"array","items":{"$ref":"#/components/schemas/MediaVO"}},"number":{"type":"integer","format":"int32"},"sort":{"type":"array","items":{"$ref":"#/components/schemas/SortObject"}},"first":{"type":"boolean"},"last":{"type":"boolean"},"numberOfElements":{"type":"integer","format":"int32"},"pageable":{"$ref":"#/components/schemas/PageableObject"},"empty":{"type":"boolean"}}},"ResultPageMediaVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/PageMediaVO"}}},"PageCourse":{"type":"object","properties":{"totalElements":{"type":"integer","format":"int64"},"totalPages":{"type":"integer","format":"int32"},"size":{"type":"integer","format":"int32"},"content":{"type":"array","items":{"$ref":"#/components/schemas/Course"}},"number":{"type":"integer","format":"int32"},"sort":{"type":"array","items":{"$ref":"#/components/schemas/SortObject"}},"first":{"type":"boolean"},"last":{"type":"boolean"},"numberOfElements":{"type":"integer","format":"int32"},"pageable":{"$ref":"#/components/schemas/PageableObject"},"empty":{"type":"boolean"}}},"ResultPageCourse":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/PageCourse"}}},"PreviewUrlVO":{"type":"object","properties":{"url":{"type":"string"},"expireTime":{"type":"string","format":"date-time"},"courseId":{"type":"integer","format":"int64"},"courseTitle":{"type":"string"}}},"ResultPreviewUrlVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/PreviewUrlVO"}}},"CategoryVO":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"name":{"type":"string"},"code":{"type":"string"},"description":{"type":"string"},"parentId":{"type":"integer","format":"int64"},"parentName":{"type":"string"},"level":{"type":"integer","format":"int32"},"orderIndex":{"type":"integer","format":"int32"},"enabled":{"type":"boolean"},"icon":{"type":"string"},"courseCount":{"type":"integer","format":"int64"},"childrenCount":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"}}},"PageCategoryVO":{"type":"object","properties":{"totalElements":{"type":"integer","format":"int64"},"totalPages":{"type":"integer","format":"int32"},"size":{"type":"integer","format":"int32"},"content":{"type":"array","items":{"$ref":"#/components/schemas/CategoryVO"}},"number":{"type":"integer","format":"int32"},"sort":{"type":"array","items":{"$ref":"#/components/schemas/SortObject"}},"first":{"type":"boolean"},"last":{"type":"boolean"},"numberOfElements":{"type":"integer","format":"int32"},"pageable":{"$ref":"#/components/schemas/PageableObject"},"empty":{"type":"boolean"}}},"ResultPageCategoryVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/PageCategoryVO"}}},"ResultCategoryVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/CategoryVO"}}},"CategoryTreeVO":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"name":{"type":"string"},"code":{"type":"string"},"description":{"type":"string"},"level":{"type":"integer","format":"int32"},"orderIndex":{"type":"integer","format":"int32"},"enabled":{"type":"boolean"},"icon":{"type":"string"},"courseCount":{"type":"integer","format":"int64"},"fullPath":{"type":"string"}}},"ResultListCategoryTreeVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/CategoryTreeVO"}}}},"ResultListCategoryVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/CategoryVO"}}}}},"securitySchemes":{"Bearer Authentication":{"type":"http","scheme":"bearer","bearerFormat":"JWT"}}}}
</file>

<file path="docs/API接口说明.md">
# 在线课程平台API接口说明

## 基础信息

- 接口基础路径: `/api`
- 认证方式: Bearer Token
- 响应格式: JSON
- Swagger地址: `/swagger-ui.html`

## 通用响应格式

所有接口统一使用以下响应格式：

```json
{
  "code": 200,          // 状态码，200表示成功，其他值表示失败
  "message": "操作成功",  // 消息描述
  "data": {}            // 数据，可能为空
}
```

## 错误码说明

| 错误码 | 描述 |
| ------ | ---- |
| 200 | 操作成功 |
| 400 | 请求参数错误 |
| 401 | 未认证或认证失败 |
| 403 | 权限不足 |
| 404 | 资源不存在 |
| 500 | 服务器内部错误 |

## 认证接口

### 获取验证码key

获取验证码key，用于后续获取验证码图片

- 请求方式: `GET`
- 接口地址: `/api/auth/captcha/key`
- 权限要求: 无需认证

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": "123e4567-e89b-12d3-a456-426614174000"  // 验证码key
  }
  ```

### 获取验证码图片

根据验证码key获取验证码图片

- 请求方式: `GET`
- 接口地址: `/api/auth/captcha/image/{key}`
- 权限要求: 无需认证
- 路径参数:
  - `key`: 验证码key

- 响应:
  - 图片数据（JPEG格式）
  - 响应头:
    - `Content-Type: image/jpeg`
    - `Cache-Control: no-store, no-cache, must-revalidate`

### 发送邮箱验证码

发送邮箱验证码，用于用户注册

- 请求方式: `POST`
- 接口地址: `/api/auth/email-verification-code`
- 权限要求: 无需认证
- 请求参数:
  ```json
  {
    "email": "test@example.com",          // 邮箱地址
    "captchaKey": "123456",               // 验证码key
    "captchaCode": "1234"                 // 图形验证码
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

### 用户注册

注册新用户，需要先获取邮箱验证码

- 请求方式: `POST`
- 接口地址: `/api/auth/register`
- 权限要求: 无需认证
- 请求参数:
  ```json
  {
    "username": "zhangsan",               // 用户名，4-20位，只能包含字母、数字和下划线
    "password": "password123",            // 密码，6-20位
    "email": "zhangsan@example.com",      // 邮箱
    "phone": "13812345678",               // 手机号（可选）
    "captchaKey": "123456",               // 验证码key
    "captchaCode": "1234",                // 图形验证码
    "emailCode": "123456"                 // 邮箱验证码
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

### 用户登录

用户登录获取JWT令牌

- 请求方式: `POST`
- 接口地址: `/api/auth/login`
- 请求参数:
  ```json
  {
    "username": "zhangsan",               // 用户名
    "password": "password123",            // 密码
    "captchaKey": "123456",               // 验证码标识
    "captchaCode": "1234"                 // 验证码
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",  // 访问令牌
      "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...", // 刷新令牌
      "tokenType": "Bearer",                                     // 令牌类型
      "expiresIn": 3600000                                      // 过期时间（毫秒）
    }
  }
  ```

### 刷新令牌

刷新JWT令牌

- 请求方式: `POST`
- 接口地址: `/api/auth/refresh-token`
- 请求参数:
  ```json
  {
    "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."  // 刷新令牌
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",  // 新的访问令牌
      "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...", // 刷新令牌（不变）
      "tokenType": "Bearer",                                     // 令牌类型
      "expiresIn": 3600000                                      // 过期时间（毫秒）
    }
  }
  ```

### 注销

用户注销

- 请求方式: `POST`
- 接口地址: `/api/auth/logout`
- 请求头:
  - `Authorization`: Bearer Token

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

## 用户管理接口

### 获取用户列表

分页查询用户列表

- 请求方式: `GET`
- 接口地址: `/api/users`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  - `username`: 用户名（可选，模糊查询）
  - `email`: 邮箱（可选，模糊查询）
  - `phone`: 手机号（可选，模糊查询）
  - `status`: 状态（可选，0-禁用，1-正常）
  - `institutionId`: 机构ID（可选）
  - `roleId`: 角色ID（可选）
  - `pageNum`: 页码，默认1
  - `pageSize`: 每页条数，默认10

- 请求示例:
  ```
  GET /api/users?username=zhang&status=1&pageNum=1&pageSize=10
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "content": [
        {
          "id": 1,
          "username": "zhangsan",
          "email": "zhangsan@example.com",
          "phone": "13812345678",
          "avatar": "avatar.jpg",
          "nickname": "张三",
          "status": 1,
          "institutionId": null,
          "createdAt": "2023-01-01T12:00:00",
          "updatedAt": "2023-01-01T12:00:00",
          "lastLoginAt": "2023-01-01T12:00:00",
          "roles": [
            {
              "id": 1,
              "name": "普通用户",
              "code": "ROLE_USER"
            }
          ]
        }
      ],
      "pageable": {
        "pageNumber": 0,
        "pageSize": 10,
        "sort": {
          "empty": true,
          "sorted": false,
          "unsorted": true
        },
        "offset": 0,
        "paged": true,
        "unpaged": false
      },
      "last": true,
      "totalElements": 1,
      "totalPages": 1,
      "size": 10,
      "number": 0,
      "sort": {
        "empty": true,
        "sorted": false,
        "unsorted": true
      },
      "first": true,
      "numberOfElements": 1,
      "empty": false
    }
  }
  ```

### 获取用户详情

根据用户ID获取用户详情

- 请求方式: `GET`
- 接口地址: `/api/users/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 用户ID

- 请求示例:
  ```
  GET /api/users/1
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "zhangsan@example.com",
      "phone": "13812345678",
      "avatar": "avatar.jpg",
      "nickname": "张三",
      "status": 1,
      "institutionId": null,
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00",
      "lastLoginAt": "2023-01-01T12:00:00",
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        }
      ]
    }
  }
  ```

### 创建用户

创建新用户

- 请求方式: `POST`
- 接口地址: `/api/users`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  {
    "username": "zhangsan",               // 用户名，4-20位，只能包含字母、数字和下划线
    "password": "password123",            // 密码，6-20位
    "email": "zhangsan@example.com",      // 邮箱
    "phone": "13812345678",               // 手机号（可选）
    "avatar": "avatar.jpg",               // 头像（可选）
    "nickname": "张三",                    // 昵称（可选）
    "status": 1,                          // 状态：0-禁用，1-正常（可选，默认1）
    "institutionId": null,                // 机构ID（可选）
    "roleIds": [1]                        // 角色ID列表（可选，默认为普通用户）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "zhangsan@example.com",
      "phone": "13812345678",
      "avatar": "avatar.jpg",
      "nickname": "张三",
      "status": 1,
      "institutionId": null,
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00",
      "lastLoginAt": null,
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        }
      ]
    }
  }
  ```

### 更新用户

更新用户信息

- 请求方式: `PUT`
- 接口地址: `/api/users/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 用户ID
- 请求参数:
  ```json
  {
    "username": "zhangsan",               // 用户名（可选）
    "password": "newpassword123",         // 密码（可选）
    "email": "new_email@example.com",     // 邮箱（可选）
    "phone": "13812345678",               // 手机号（可选）
    "avatar": "new_avatar.jpg",           // 头像（可选）
    "nickname": "新昵称",                  // 昵称（可选）
    "status": 1,                          // 状态（可选）
    "institutionId": 1,                   // 机构ID（可选）
    "roleIds": [1, 2]                     // 角色ID列表（可选）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "new_email@example.com",
      "phone": "13812345678",
      "avatar": "new_avatar.jpg",
      "nickname": "新昵称",
      "status": 1,
      "institutionId": 1,
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:30:00",
      "lastLoginAt": "2023-01-01T12:00:00",
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        },
        {
          "id": 2,
          "name": "管理员",
          "code": "ROLE_ADMIN"
        }
      ]
    }
  }
  ```

### 删除用户

删除用户

- 请求方式: `DELETE`
- 接口地址: `/api/users/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 用户ID

- 请求示例:
  ```
  DELETE /api/users/1
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

### 修改用户状态

修改用户状态

- 请求方式: `PATCH`
- 接口地址: `/api/users/{id}/status`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 用户ID
- 请求参数:
  - `status`: 状态（0-禁用，1-正常）

- 请求示例:
  ```
  PATCH /api/users/1/status?status=0
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "zhangsan@example.com",
      "status": 0,
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        }
      ]
    }
  }
  ```

### 给用户分配角色

给用户分配角色

- 请求方式: `PUT`
- 接口地址: `/api/users/{id}/roles`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 用户ID
- 请求参数:
  ```json
  [1, 2]  // 角色ID列表
  ```

- 请求示例:
  ```
  PUT /api/users/1/roles
  [1, 2]
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        },
        {
          "id": 2,
          "name": "管理员",
          "code": "ROLE_ADMIN"
        }
      ]
    }
  }
  ```

### 批量删除用户

批量删除用户

- 请求方式: `DELETE`
- 接口地址: `/api/users/batch`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  [1, 2]  // 用户ID列表
  ```

- 请求示例:
  ```
  DELETE /api/users/batch
  [1, 2]
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

## 角色管理接口

### 获取角色列表

获取角色列表

- 请求方式: `GET`
- 接口地址: `/api/roles`
- 权限要求: `ROLE_ADMIN`

- 请求示例:
  ```
  GET /api/roles
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": [
      {
        "id": 1,
        "name": "普通用户",
        "code": "ROLE_USER",
        "description": "普通用户角色",
        "createdAt": "2023-01-01T12:00:00",
        "updatedAt": "2023-01-01T12:00:00",
        "permissions": [
          {
            "id": 1,
            "name": "查看课程",
            "code": "COURSE_VIEW"
          }
        ]
      },
      {
        "id": 2,
        "name": "管理员",
        "code": "ROLE_ADMIN",
        "description": "系统管理员角色",
        "createdAt": "2023-01-01T12:00:00",
        "updatedAt": "2023-01-01T12:00:00",
        "permissions": [
          {
            "id": 1,
            "name": "查看课程",
            "code": "COURSE_VIEW"
          },
          {
            "id": 2,
            "name": "创建课程",
            "code": "COURSE_CREATE"
          }
        ]
      }
    ]
  }
  ```

### 获取角色详情

根据角色ID获取角色详情

- 请求方式: `GET`
- 接口地址: `/api/roles/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 角色ID

- 请求示例:
  ```
  GET /api/roles/1
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "name": "普通用户",
      "code": "ROLE_USER",
      "description": "普通用户角色",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00",
      "permissions": [
        {
          "id": 1,
          "name": "查看课程",
          "code": "COURSE_VIEW"
        }
      ]
    }
  }
  ```

### 创建角色

创建新角色

- 请求方式: `POST`
- 接口地址: `/api/roles`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  {
    "name": "审核人员",                    // 角色名称
    "code": "ROLE_REVIEWER",              // 角色编码，必须以ROLE_开头
    "description": "内容审核人员角色",      // 角色描述（可选）
    "permissionIds": [1, 3, 5]           // 权限ID列表（可选）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 3,
      "name": "审核人员",
      "code": "ROLE_REVIEWER",
      "description": "内容审核人员角色",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00",
      "permissions": [
        {
          "id": 1,
          "name": "查看课程",
          "code": "COURSE_VIEW"
        },
        {
          "id": 3,
          "name": "审核课程",
          "code": "COURSE_REVIEW"
        },
        {
          "id": 5,
          "name": "查看评论",
          "code": "COMMENT_VIEW"
        }
      ]
    }
  }
  ```

### 更新角色

更新角色信息

- 请求方式: `PUT`
- 接口地址: `/api/roles/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 角色ID
- 请求参数:
  ```json
  {
    "name": "审核专员",                    // 角色名称（可选）
    "code": "ROLE_REVIEWER",              // 角色编码（可选）
    "description": "内容审核专员角色",      // 角色描述（可选）
    "permissionIds": [1, 3, 5, 7]        // 权限ID列表（可选）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 3,
      "name": "审核专员",
      "code": "ROLE_REVIEWER",
      "description": "内容审核专员角色",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:30:00",
      "permissions": [
        {
          "id": 1,
          "name": "查看课程",
          "code": "COURSE_VIEW"
        },
        {
          "id": 3,
          "name": "审核课程",
          "code": "COURSE_REVIEW"
        },
        {
          "id": 5,
          "name": "查看评论",
          "code": "COMMENT_VIEW"
        },
        {
          "id": 7,
          "name": "审核评论",
          "code": "COMMENT_REVIEW"
        }
      ]
    }
  }
  ```

### 删除角色

删除角色

- 请求方式: `DELETE`
- 接口地址: `/api/roles/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 角色ID

- 请求示例:
  ```
  DELETE /api/roles/3
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

### 给角色分配权限

给角色分配权限

- 请求方式: `PUT`
- 接口地址: `/api/roles/{id}/permissions`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 角色ID
- 请求参数:
  ```json
  [1, 2, 3, 4]  // 权限ID列表
  ```

- 请求示例:
  ```
  PUT /api/roles/1/permissions
  [1, 2, 3, 4]
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "name": "普通用户",
      "code": "ROLE_USER",
      "permissions": [
        {
          "id": 1,
          "name": "查看课程",
          "code": "COURSE_VIEW"
        },
        {
          "id": 2,
          "name": "创建课程",
          "code": "COURSE_CREATE"
        },
        {
          "id": 3,
          "name": "审核课程",
          "code": "COURSE_REVIEW"
        },
        {
          "id": 4,
          "name": "删除课程",
          "code": "COURSE_DELETE"
        }
      ]
    }
  }
  ```

### 批量删除角色

批量删除角色

- 请求方式: `DELETE`
- 接口地址: `/api/roles/batch`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  [3, 4]  // 角色ID列表
  ```

- 请求示例:
  ```
  DELETE /api/roles/batch
  [3, 4]
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

## 权限管理接口

### 获取权限列表

获取权限列表

- 请求方式: `GET`
- 接口地址: `/api/permissions`
- 权限要求: `ROLE_ADMIN`

- 请求示例:
  ```
  GET /api/permissions
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": [
      {
        "id": 1,
        "name": "查看课程",
        "code": "COURSE_VIEW",
        "description": "查看课程信息权限",
        "url": "/api/courses",
        "method": "GET",
        "createdAt": "2023-01-01T12:00:00",
        "updatedAt": "2023-01-01T12:00:00"
      },
      {
        "id": 2,
        "name": "创建课程",
        "code": "COURSE_CREATE",
        "description": "创建课程权限",
        "url": "/api/courses",
        "method": "POST",
        "createdAt": "2023-01-01T12:00:00",
        "updatedAt": "2023-01-01T12:00:00"
      }
    ]
  }
  ```

### 获取权限详情

根据权限ID获取权限详情

- 请求方式: `GET`
- 接口地址: `/api/permissions/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 权限ID

- 请求示例:
  ```
  GET /api/permissions/1
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "name": "查看课程",
      "code": "COURSE_VIEW",
      "description": "查看课程信息权限",
      "url": "/api/courses",
      "method": "GET",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00"
    }
  }
  ```

### 创建权限

创建新权限

- 请求方式: `POST`
- 接口地址: `/api/permissions`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  {
    "name": "编辑课程",                    // 权限名称
    "code": "COURSE_EDIT",                // 权限编码
    "description": "编辑课程信息权限",      // 权限描述（可选）
    "url": "/api/courses/{id}",           // 资源URL（可选）
    "method": "PUT"                       // HTTP方法（可选）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 3,
      "name": "编辑课程",
      "code": "COURSE_EDIT",
      "description": "编辑课程信息权限",
      "url": "/api/courses/{id}",
      "method": "PUT",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00"
    }
  }
  ```

### 更新权限

更新权限信息

- 请求方式: `PUT`
- 接口地址: `/api/permissions/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 权限ID
- 请求参数:
  ```json
  {
    "name": "修改课程",                    // 权限名称（可选）
    "code": "COURSE_UPDATE",              // 权限编码（可选）
    "description": "修改课程信息权限",      // 权限描述（可选）
    "url": "/api/courses/{id}",           // 资源URL（可选）
    "method": "PUT"                       // HTTP方法（可选）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 3,
      "name": "修改课程",
      "code": "COURSE_UPDATE",
      "description": "修改课程信息权限",
      "url": "/api/courses/{id}",
      "method": "PUT",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:30:00"
    }
  }
  ```

### 删除权限

删除权限

- 请求方式: `DELETE`
- 接口地址: `/api/permissions/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 权限ID

- 请求示例:
  ```
  DELETE /api/permissions/3
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

### 批量删除权限

批量删除权限

- 请求方式: `DELETE`
- 接口地址: `/api/permissions/batch`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  [3, 4]  // 权限ID列表
  ```

- 请求示例:
  ```
  DELETE /api/permissions/batch
  [3, 4]
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

## 开发说明

### 认证流程

1. 获取验证码key：调用 `/api/auth/captcha/key` 接口获取验证码key
2. 获取验证码图片：调用 `/api/auth/captcha/image/{key}` 接口获取验证码图片
3. 发送邮箱验证码：调用 `/api/auth/email-verification-code` 接口发送邮箱验证码
4. 用户注册：调用 `/api/auth/register` 接口注册用户（需要邮箱验证码）
5. 用户登录：调用 `/api/auth/login` 接口获取JWT令牌
6. 接口调用：在请求头中携带 `Authorization: Bearer {访问令牌}` 调用需要认证的接口
7. 刷新令牌：访问令牌过期时，调用 `/api/auth/refresh-token` 接口刷新令牌
8. 用户注销：调用 `/api/auth/logout` 接口注销用户

### 权限管理流程

1. 创建权限：管理员调用 `/api/permissions` 接口创建权限
2. 创建角色：管理员调用 `/api/roles` 接口创建角色
3. 给角色分配权限：管理员调用 `/api/roles/{id}/permissions` 接口给角色分配权限
4. 创建用户：管理员调用 `/api/users` 接口创建用户
5. 给用户分配角色：管理员调用 `/api/users/{id}/roles` 接口给用户分配角色

### 注意事项

1. 图形验证码有效期为5分钟，请在有效期内使用
2. 邮箱验证码有效期为5分钟，请在有效期内使用
3. 访问令牌有效期为1小时，刷新令牌有效期为7天
4. 请求头中的认证信息格式必须为 `Authorization: Bearer {访问令牌}`
5. 刷新令牌仅能使用一次，使用后会生成新的访问令牌，但刷新令牌本身不变
6. 权限编码必须以`ROLE_`开头的才是角色，其他的是普通权限
7. 系统内置了四种基本角色：普通用户(ROLE_USER)、管理员(ROLE_ADMIN)、审核人员(ROLE_REVIEWER)、机构用户(ROLE_INSTITUTION)

## 用户自身管理接口

### 获取当前用户信息

- **URL**: `/api/users/current`
- **方法**: `GET`
- **描述**: 获取当前登录用户的详细信息
- **请求头**: `Authorization: Bearer {accessToken}`
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "获取成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "zhangsan@example.com",
      "nickname": "张三",
      "phone": "13800138000",
      "avatar": "https://example.com/avatars/default.png",
      "status": 1,
      "createdAt": "2023-01-01T12:00:00Z",
      "lastLoginAt": "2023-01-01T12:00:00Z",
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        }
      ]
    }
  }
  ```
- **错误响应**:
  - 401 Unauthorized: 未授权

### 更新当前用户信息

- **URL**: `/api/users/current`
- **方法**: `PUT`
- **描述**: 更新当前登录用户的个人资料
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**:
  ```json
  {
    "nickname": "新昵称",
    "phone": "13812345678"
  }
  ```
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "更新成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "zhangsan@example.com",
      "nickname": "新昵称",
      "phone": "13812345678",
      "avatar": "https://example.com/avatars/default.png",
      "updatedAt": "2023-01-01T13:00:00Z"
    }
  }
  ```
- **错误响应**:
  - 400 Bad Request: 参数错误
  - 401 Unauthorized: 未授权

### 修改当前用户密码

- **URL**: `/api/users/current/password`
- **方法**: `PUT`
- **描述**: 修改当前登录用户的密码
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**:
  ```json
  {
    "oldPassword": "Password123",
    "newPassword": "NewPassword456",
    "confirmPassword": "NewPassword456"
  }
  ```
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "密码修改成功",
    "data": null
  }
  ```
- **错误响应**:
  - 400 Bad Request: 参数错误或新密码与确认密码不匹配
  - 401 Unauthorized: 未授权或旧密码不正确

### 上传用户头像

- **URL**: `/api/users/current/avatar`
- **方法**: `POST`
- **描述**: 上传并设置当前用户的头像
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**: `multipart/form-data` 类型，包含名为 `avatar` 的文件字段
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "头像上传成功",
    "data": {
      "avatarUrl": "https://example.com/avatars/user1/avatar.jpg"
    }
  }
  ```
- **错误响应**:
  - 400 Bad Request: 文件格式不支持或文件大小超限
  - 401 Unauthorized: 未授权

### 获取邮箱更新验证码

- **URL**: `/api/users/current/email-code`
- **方法**: `POST`
- **描述**: 向用户新邮箱发送验证码，用于更新邮箱地址
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**:
  ```json
  {
    "newEmail": "new-email@example.com"
  }
  ```
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "验证码已发送到新邮箱，请查收",
    "data": null
  }
  ```
- **错误响应**:
  - 400 Bad Request: 邮箱格式不正确或已被其他用户使用
  - 401 Unauthorized: 未授权
  - 429 Too Many Requests: 请求频率过高

### 更新用户邮箱

- **URL**: `/api/users/current/email`
- **方法**: `PUT`
- **描述**: 使用验证码更新用户邮箱
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**:
  ```json
  {
    "newEmail": "new-email@example.com",
    "verificationCode": "123456"
  }
  ```
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "邮箱更新成功",
    "data": {
      "email": "new-email@example.com",
      "updatedAt": "2023-01-01T14:00:00Z"
    }
  }
  ```
- **错误响应**:
  - 400 Bad Request: 参数错误
  - 401 Unauthorized: 未授权
  - 403 Forbidden: 验证码错误
  - 410 Gone: 验证码已过期

## 系统设置接口

### 获取系统配置 (管理员)

- **URL**: `/api/admin/settings`
- **方法**: `GET`
- **描述**: 获取系统配置信息
- **请求头**: `Authorization: Bearer {accessToken}`
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "获取成功",
    "data": {
      "siteName": "在线课程平台",
      "siteDescription": "提供优质的在线课程学习平台",
      "contactEmail": "contact@example.com",
      "registrationEnabled": true,
      "maintenanceMode": false,
      "fileStorageType": "minio",
      "maxUploadSize": 10485760
    }
  }
  ```
- **错误响应**:
  - 401 Unauthorized: 未授权
  - 403 Forbidden: 无权限

### 更新系统配置 (管理员)

- **URL**: `/api/admin/settings`
- **方法**: `PUT`
- **描述**: 更新系统配置信息
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**:
  ```json
  {
    "siteName": "优质在线教育平台",
    "siteDescription": "提供高质量的在线课程学习体验",
    "contactEmail": "support@example.com",
    "registrationEnabled": true,
    "maintenanceMode": false,
    "maxUploadSize": 20971520
  }
  ```
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "更新成功",
    "data": {
      "siteName": "优质在线教育平台",
      "siteDescription": "提供高质量的在线课程学习体验",
      "contactEmail": "support@example.com",
      "registrationEnabled": true,
      "maintenanceMode": false,
      "maxUploadSize": 20971520,
      "updatedAt": "2023-01-01T13:00:00Z"
    }
  }
  ```
- **错误响应**:
  - 400 Bad Request: 参数错误
  - 401 Unauthorized: 未授权
  - 403 Forbidden: 无权限

## 课程相关接口

### 获取课程分类列表（待实现）

- **URL**: `/api/categories`
- **方法**: `GET`
- **描述**: 获取所有课程分类
- **请求参数**: 无
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "获取成功",
    "data": [
      {
        "id": 1,
        "name": "计算机科学",
        "code": "computer-science",
        "parentId": null,
        "level": 1,
        "children": [
          {
            "id": 2,
            "name": "编程语言",
            "code": "programming-languages",
            "parentId": 1,
            "level": 2,
            "children": []
          },
          {
            "id": 3,
            "name": "数据库",
            "code": "databases",
            "parentId": 1,
            "level": 2,
            "children": []
          }
        ]
      },
      {
        "id": 4,
        "name": "数学",
        "code": "mathematics",
        "parentId": null,
        "level": 1,
        "children": []
      }
    ]
  }
  ```

### 获取课程标签列表（待实现）

- **URL**: `/api/tags`
- **方法**: `GET`
- **描述**: 获取所有课程标签
- **请求参数**:
  - `size`: 返回标签数量，默认为20
  - `popular`: 是否返回热门标签，默认为false
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "获取成功",
    "data": [
      {
        "id": 1,
        "name": "Java",
        "courseCount": 42
      },
      {
        "id": 2,
        "name": "Spring Boot",
        "courseCount": 38
      },
      {
        "id": 3,
        "name": "JavaScript",
        "courseCount": 56
      }
    ]
  }
  ```

### 获取课程列表（待实现）

- **URL**: `/api/courses`
- **方法**: `GET`
- **描述**: 获取课程列表
- **请求参数**:
  - `page`: 页码，默认为0
  - `size`: 每页大小，默认为10
  - `sort`: 排序字段，默认为createdAt,desc
  - `categoryId`: 按分类筛选
  - `tagId`: 按标签筛选
  - `keyword`: 搜索关键词
  - `price`: 价格区间，格式为"min,max"，如"0,100"
  - `level`: 难度级别，值为1(初级)、2(中级)或3(高级)
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "获取成功",
    "data": {
      "content": [
        {
          "id": 1,
          "title": "Spring Boot实战入门到精通",
          "summary": "全面讲解Spring Boot框架的使用方法和最佳实践",
          "coverUrl": "https://example.com/covers/spring-boot.jpg",
          "price": 199.00,
          "discountPrice": 149.00,
          "level": 2,
          "totalDuration": 1240,
          "studentCount": 1205,
          "rating": 4.8,
          "categoryId": 2,
          "categoryName": "编程语言",
          "teacherName": "张教授",
          "tags": [
            {
              "id": 2,
              "name": "Spring Boot"
            },
            {
              "id": 8,
              "name": "Java"
            }
          ]
        }
      ],
      "pageable": {
        "pageNumber": 0,
        "pageSize": 10,
        "sort": [
          {
            "direction": "DESC",
            "property": "createdAt"
          }
        ]
      },
      "totalElements": 42,
      "totalPages": 5,
      "last": false,
      "size": 10,
      "number": 0,
      "sort": {
        "sorted": true,
        "unsorted": false,
        "empty": false
      },
      "numberOfElements": 10,
      "first": true,
      "empty": false
    }
  }
  ```

## 访问权限说明

对API接口的访问权限采用基于角色的访问控制(RBAC)策略：

- **公开接口**: 不需要任何权限即可访问，如注册、登录、公共课程列表等
- **用户接口**: 需要普通用户权限(`ROLE_USER`)，如个人信息管理、课程观看等
- **机构接口**: 需要机构权限(`ROLE_INSTITUTION`)，如创建和管理课程等
- **管理员接口**: 需要管理员权限(`ROLE_ADMIN`)，如用户管理、系统设置等

## 附录：错误码说明

| 错误码 | 描述                       |
|--------|----------------------------|
| 40001  | 请求参数错误               |
| 40002  | 表单验证失败               |
| 40003  | 数据不存在                 |
| 40004  | 用户名或密码错误           |
| 40005  | 账号被锁定                 |
| 40006  | 验证码错误或已过期         |
| 40007  | 文件上传失败               |
| 40008  | 操作频率超限               |
| 40009  | 数据已存在                 |
| 40010  | 数据关联，无法删除         |
| 50001  | 系统内部错误               |
| 50002  | 数据库操作失败             |
| 50003  | 第三方服务调用失败         |
</file>

<file path="docs/fornt/开发进度.md">
# 在线课程平台前端开发进度

## 已完成工作

### 项目初始化与配置
- [x] 项目基础架构创建（React + TypeScript + Vite）
- [x] 安装和配置核心依赖
  - React Router DOM
  - Zustand
  - Axios
  - React Hook Form + Zod
  - Shadcn UI组件库
  - Tailwind CSS
  - 其他工具库
- [x] 路径别名配置（@/ -> src/）
- [x] ESLint和TypeScript配置
- [x] Vite代理配置（解决跨域问题）

### 目录结构设计
- [x] 创建核心目录结构
  - assets：静态资源
  - components：通用组件
  - hooks：自定义钩子
  - lib：工具函数库
  - pages：页面组件
  - services：API服务
  - stores：状态管理
  - types：类型定义

### API服务与数据类型
- [x] 定义API接口返回数据类型（ApiResponse, PageResponse等）
- [x] 定义用户、角色、权限等模型类型
- [x] 实现基于Axios的API请求工具
  - 请求拦截器（添加token）
  - 响应拦截器（处理错误、刷新token）
  - 封装GET、POST、PUT、DELETE方法
- [x] 实现认证服务（登录、注册、获取验证码等）
- [x] 优化认证请求处理，修复认证相关错误
- [x] 修复登录重定向问题，确保登录后正确跳转到仪表盘
- [x] 完善注销功能，清除令牌和Cookie
- [x] 实现邮箱验证码请求服务
  - 定义`EmailVerificationRequest`接口
  - 添加`sendEmailVerificationCode`方法
- [x] 实现用户服务(userService.ts)
  - 获取当前用户信息
  - 更新用户基本信息
  - 更新用户密码
  - 更新用户邮箱
  - 上传用户头像
- [x] 实现机构服务(institutionService.ts)
  - 机构申请提交
  - 申请状态查询
  - 获取机构注册码
  - 机构用户注册
- [x] 实现媒体服务(mediaService.ts)
  - 获取媒体列表
  - 获取媒体详情
  - 初始化分片上传
  - 完成分片上传
  - 取消上传
  - 获取媒体访问URL

### 状态管理
- [x] 实现认证状态管理（authStore）
  - 用户登录状态
  - Token管理（包括localStorage和Cookie双重存储）
  - 登录/注册/注销功能（已完善Cookie清理）
  - 添加邮箱验证码发送功能
- [x] 实现UI状态管理（uiStore）
  - 侧边栏状态
  - 主题管理（亮色/暗色/系统）
- [x] 实现机构状态管理（institutionStore）
  - 机构申请状态
  - 申请进度跟踪
  - 注册码管理

### 路由管理
- [x] 定义应用路由结构
- [x] 实现路由守卫（RequireAuth）
- [x] 实现懒加载
- [x] 添加机构相关路由
  - 机构申请页面
  - 申请状态查询页面
  - 机构用户注册页面
- [x] 添加媒体管理路由
  - 媒体列表页面
  - 媒体上传页面

### 页面开发
- [x] 布局组件
  - MainLayout：主布局（包含导航栏和侧边栏）
  - AuthLayout：认证页面布局
- [x] 认证页面
  - 登录页面（包含表单验证和验证码）
  - 注册页面（优化为两步流程：基本信息 + 邮箱验证）
  - 机构用户注册页面（包含注册码验证）
- [x] 基础页面
  - 首页
  - 404页面
- [x] 用户页面
  - [x] 个人资料页（完整实现，包含信息编辑、密码修改、邮箱更新和头像上传）
  - 设置页面（占位实现）
- [x] 管理页面（占位实现）
  - 用户管理
  - 角色管理
  - 权限管理
- [x] 机构页面
  - [x] 机构申请页面（包含表单验证和文件上传）
  - [x] 申请状态查询页面
  - [x] 机构用户注册页面（包含注册码验证）
- [x] 媒体管理页面
  - [x] 媒体列表页面（包含分类筛选和分页）
  - [x] 媒体上传功能（包含大文件分片上传）

### UI组件
- [x] 实现导航栏组件（Navbar）
- [x] 实现侧边栏组件（Sidebar）
- [x] 实现主题切换组件（ThemeSwitcher）
- [x] 实现验证码组件（Captcha）
- [x] 默认使用亮色主题
- [x] 实现机构相关组件
  - [x] 机构申请表单（InstitutionApplicationForm）
  - [x] 申请状态展示（ApplicationStatus）
  - [x] 注册码验证组件（RegisterCodeVerification）
- [x] 实现媒体相关组件
  - [x] 媒体列表组件（MediaList）
  - [x] 媒体上传组件（MediaUpload）
  - [x] 上传进度组件（UploadProgress）

### 注册流程优化
- [x] 重构注册页面为分步表单
  - 第一步：填写基本信息（用户名、密码）
  - 第二步：邮箱验证（邮箱、验证码、邮箱验证码）
- [x] 增强用户体验
  - 步骤间数据保存与传递
  - 步骤间状态保持
  - 增加返回上一步功能
  - 邮箱验证码发送倒计时
- [x] 修复API路径问题
  - 更新验证码获取接口路径
  - 调整为两步请求：先获取key再获取图片

### 个人中心功能
- [x] 获取当前用户信息
- [x] 实现个人资料页面
  - [x] 添加选项卡式界面，包含个人资料、密码修改和邮箱更新
  - [x] 实现个人基本信息表单（昵称、手机号）
  - [x] 实现密码修改表单（旧密码、新密码、确认密码）
  - [x] 实现邮箱更新表单（当前密码、新邮箱、验证码）
  - [x] 实现头像上传与裁剪功能
  - [x] 优化表单布局和用户体验
- [ ] 实现设置页面

### 机构管理功能
- [x] 实现机构申请流程
  - [x] 机构信息表单（名称、描述、联系信息等）
  - [x] Logo上传与预览
  - [x] 表单验证与提交
  - [x] 申请状态跟踪
- [x] 实现机构用户注册
  - [x] 注册码验证
  - [x] 基本信息填写
  - [x] 邮箱验证
  - [x] 注册完成处理

### 媒体管理功能
- [x] 实现媒体列表显示
  - [x] 按类型筛选（视频、音频、图片、文档、全部）
  - [x] 分页显示
  - [x] 媒体卡片展示（标题、类型、大小、状态等）
- [x] 实现媒体文件上传
  - [x] 基本文件信息填写（标题、描述）
  - [x] 文件选择和预览
  - [x] 分片上传大文件
  - [x] 上传进度显示
  - [x] 断点续传支持
- [x] 优化上传体验
  - [x] 实现文件类型自动识别
  - [x] 文件大小显示与格式化
  - [x] 上传状态实时反馈
  - [x] 上传完成后自动刷新列表

### 工具函数库完善
- [x] 实现前端缓存工具(cache.ts)
  - 支持5分钟过期时间
  - 缓存状态检查
  - 缓存清理功能
- [x] 实现问题管理工具(questionUtils.ts)
  - 问题类型文本转换
  - 问题难度文本转换
  - 问题难度样式生成
- [x] 实现导航工具(navigationUtils.ts)
  - 问题管理页面URL生成
  - 问题组创建/编辑URL生成
  - 问题组详情URL生成
- [x] 实现日期工具(date.ts)
  - 日期格式化功能
  - 时间差计算功能

### 类型定义完善
- [x] 完善API相关类型(api.ts)
  - ApiResponse接口
  - ApiError接口
  - 分页参数和结果类型
- [x] 完善问题相关类型(question.ts)
  - 问题类型枚举
  - 问题难度枚举
  - 问题创建/更新DTO
- [x] 完善课程相关类型(course.ts)
  - 课程状态枚举
  - 支付类型枚举
  - 章节访问类型枚举
- [x] 完善审核相关类型(review.ts)
  - 审核状态枚举
  - 审核类型枚举
  - 审核任务接口
- [x] 完善角色权限类型
  - 角色相关接口(Role, RoleDTO)
  - 权限相关接口(Permission, PermissionDTO)
  - 查询参数接口

### 服务层完善
- [x] 实现HTTP请求工具(http.ts)
  - axios实例配置
  - 请求/响应拦截器
  - 统一错误处理
  - 类型安全的请求方法
- [x] 实现课程服务(course.ts)
  - 课程CRUD操作
  - 课程状态管理
  - 课程预览功能
  - 支付设置管理
- [x] 实现审核服务(review-service.ts)
  - 审核任务管理
  - 课程审核流程
  - 课程结构获取
  - 审核状态更新
- [x] 实现章节服务(chapter.ts)
  - 章节CRUD操作
  - 章节顺序调整
  - 访问类型管理
  - 本地缓存机制
- [x] 实现小节服务(section.ts)
  - 小节CRUD操作
  - 小节顺序调整
  - 媒体资源管理
  - 题目组管理
  - 缓存优化

### 缓存机制优化
- [x] 实现多级缓存策略
  - 章节缓存(byId, byCourse)
  - 小节缓存(byId, byChapter)
  - 缓存过期控制
  - 缓存自动清理
- [x] 优化数据获取性能
  - 减少重复请求
  - 智能缓存更新
  - 缓存状态追踪

### UI组件完善
- [x] 实现分页组件(pagination.tsx)
  - 基础分页功能
  - 上一页/下一页
  - 页码显示
  - 省略号处理
- [x] 实现多选组件(multi-select.tsx)
  - 选项搜索功能
  - 动画效果
  - 选项限制
  - 全选/清空
  - 禁用状态
  - 兼容性处理
- [x] 实现审核专用分页(review-pagination.tsx)
- [x] 实现表单组件(form.tsx)
  - 基于React Hook Form
  - 表单字段上下文
  - 表单控件集成
  - 错误处理
  - 辅助组件(Label, Description等)
- [x] 实现对话框组件(dialog.tsx)
  - 基于Radix UI
  - 动画效果
  - 可访问性支持
  - 自定义样式
  - 子组件(Header, Footer等)

### 组件开发规范
- [x] 统一使用client组件
- [x] 采用组合式API设计
- [x] TypeScript类型支持
- [x] 样式统一使用Tailwind
- [x] 支持自定义className
- [x] 添加data-slot属性
- [x] 实现WAI-ARIA规范

## 进行中工作

### 用户管理功能
- [ ] 完善用户服务(userService.ts)
  - GET `/api/users` - 获取用户列表
  - GET `/api/users/{id}` - 获取用户详情
  - POST `/api/users` - 创建用户
  - PUT `/api/users/{id}` - 更新用户
  - DELETE `/api/users/{id}` - 删除用户
- [ ] 实现用户管理状态(userManagementStore.ts)
- [ ] 完善用户列表页面
  - 添加数据表格组件
  - 实现分页功能
  - 实现搜索筛选
- [ ] 实现用户表单组件
  - 创建用户表单
  - 编辑用户表单
  - 表单验证

### 角色与权限管理
- [ ] 创建角色服务(roleService.ts)
  - GET `/api/roles` - 获取角色列表
  - GET `/api/roles/{id}` - 获取角色详情
  - POST `/api/roles` - 创建角色
  - PUT `/api/roles/{id}` - 更新角色
  - DELETE `/api/roles/{id}` - 删除角色
  - PUT `/api/roles/{id}/permissions` - 分配权限
- [ ] 创建权限服务(permissionService.ts)
  - GET `/api/permissions` - 获取权限列表
  - GET `/api/permissions/{id}` - 获取权限详情
- [ ] 实现角色管理页面
- [ ] 实现权限管理页面

### 解决的技术问题
- [x] 实现了基于Tabs的多功能个人资料页面
- [x] 利用React Hook Form和Zod实现表单验证和提交
- [x] 实现了头像上传预览和裁剪功能（使用react-image-crop）
- [x] 添加了邮箱更新的验证码机制
- [x] 优化了表单提交和错误处理流程
- [x] 修复了表单控件非受控到受控状态切换的问题
- [x] 优化了邮箱更新的用户体验，添加了密码先验证的流程
- [x] 实现了表单提交状态管理和Loading指示
- [x] 修复了机构申请表单的文件上传问题
- [x] 优化了机构注册码验证流程
- [x] 完善了机构用户注册的角色分配
- [x] 实现了大文件分片上传功能
  - [x] 解决了S3分片上传的ETag处理问题
  - [x] 优化了分片上传的并发处理，改为顺序上传提高稳定性
  - [x] 修复了API请求中字段名大小写导致的合并失败问题
  - [x] 实现了上传进度实时显示
  - [x] 添加了详细的错误处理和日志记录

## 待开发工作
- [ ] 课程模块页面
  - 课程列表
  - 课程详情
  - 课程搜索
- [ ] 学习模块页面
  - 视频播放
  - 课程笔记
  - 进度记录
- [ ] 订单与支付模块
  - 课程购买
  - 订单管理
- [ ] 管理模块完善
  - 用户管理CRUD
  - 角色管理CRUD
  - 权限管理CRUD
  - 课程管理
  - 内容审核

## 问题与解决方案
- [x] 路由加载问题：创建了页面占位组件解决路由导入错误
- [x] 暗色背景问题：添加了主题切换器并默认使用亮色主题
- [x] 跨域问题：通过配置Vite代理解决
- [x] 验证码获取问题：修复验证码请求URL和处理方式，确保正确显示验证码图片
- [x] 验证码处理流程：优化验证码组件，确保正确使用后端生成的验证码Key
- [x] 登录会话问题：修复响应拦截器对认证请求的处理，避免误报"会话过期"
- [x] 错误处理问题：增强错误处理和日志记录，提供更明确的错误提示
- [x] 验证码路径问题：修复了验证码获取路径，改为先获取key再获取图片
- [x] 邮件发送配置问题：修复后端邮件发送配置，确保发件人地址与SMTP认证用户一致
- [x] 登录重定向问题：修复了登录后的重定向逻辑，确保正确跳转到仪表盘
- [x] Cookie处理问题：在登录时同时设置localStorage和Cookie，注销时清除所有认证数据
- [x] 用户角色判断问题：修复了侧边栏和仪表盘中的角色判断逻辑，从使用单一角色(user.role)改为正确处理角色数组(user.roles)
- [x] 用户信息获取失败问题：修复了getCurrentUser方法中的授权头处理，确保正确传递token，并增强了错误日志和容错处理
- [x] API请求工具问题：改进了请求方法的实现，添加了更好的错误处理和日志记录，确保所有请求包含正确的Content-Type和Accept头
- [x] 机构Logo上传问题：修复了文件上传组件的验证和预览功能
- [x] 注册码验证问题：优化了注册码验证的错误处理和提示
- [ ] 移动端适配：需要优化布局和响应式设计

## 注册流程与邮箱验证

### 优化后的注册流程
- **第一步：基本信息填写**
  - 用户名输入（验证长度4-20个字符）
  - 密码输入（验证长度6-20个字符）
  - 确认密码（验证与密码一致）
  - 数据暂存在组件state中
  - 点击"下一步"进入第二步

- **第二步：邮箱验证**
  - 显示已填写的用户名提示
  - 邮箱地址输入
  - 图形验证码输入与获取
  - 发送邮箱验证码按钮（带60秒倒计时）
  - 邮箱验证码输入
  - 点击"完成注册"提交所有数据
  - "返回上一步"按钮支持修改基本信息

### 机构用户注册流程
- **第一步：注册码验证**
  - 输入机构注册码
  - 验证注册码有效性
  - 显示机构基本信息
  - 点击"下一步"进入基本信息填写

- **第二步：基本信息填写**
  - 用户名输入
  - 密码输入和确认
  - 点击"下一步"进入邮箱验证

- **第三步：邮箱验证**
  - 邮箱地址输入
  - 图形验证码验证
  - 邮箱验证码验证
  - 完成注册

### 邮箱验证码处理
- 验证码发送前进行即时表单验证
- 验证码发送成功后启用倒计时，防止频繁请求
- 验证码发送成功后才允许点击"完成注册"按钮
- 使用toast提示验证码发送状态和错误信息

### 前端技术实现
- 使用zod进行强类型表单验证
- 使用React Hook Form管理表单状态和提交
- 使用shadcn/ui的Tabs组件实现分步UI
- 使用useState保存跨步骤数据
- 使用useEffect管理验证码倒计时

## 下一步具体计划（1-2周）

### 第1周：用户管理功能
1. 创建用户服务模块
   - 实现用户列表获取
   - 实现用户详情获取
   - 实现用户创建/编辑/删除
2. 实现用户管理状态库
   - 定义状态结构
   - 实现用户数据获取与更新
3. 完善用户列表页面
   - 实现数据表格
   - 实现分页和筛选
   - 添加创建/编辑/删除操作

### 第2周：角色权限管理
1. 创建角色和权限服务模块
   - 实现角色列表获取
   - 实现权限列表获取
   - 实现角色创建/编辑/删除
   - 实现角色权限分配
2. 实现角色和权限管理状态库
   - 定义状态结构
   - 实现数据获取与更新
3. 完善角色和权限管理页面
   - 实现数据表格
   - 实现角色创建/编辑表单
   - 实现权限分配界面

### 并行任务：个人中心功能
1. 获取当前用户信息
   - 在登录成功后获取用户详情
   - 在authStore中保存用户信息
2. 完善个人资料页面
   - 显示用户基本信息
   - 实现个人信息编辑功能
3. 实现设置页面
   - 界面偏好设置
   - 密码修改功能
## 服务层实现

✅ HTTP请求工具
- 基于Axios封装
- 请求/响应拦截器
- Token自动注入
- 错误统一处理
- 401状态码自动刷新Token

✅ 课程服务
- 课程CRUD接口
- 课程状态管理
- 课程分类管理
- 课程标签管理
- 课程章节管理

✅ 审核服务
- 审核任务列表
- 审核详情查看
- 审核状态更新
- 审核意见提交
- 审核历史记录

✅ 章节服务
- 章节CRUD接口
- 章节排序管理
- 章节内容管理
- 章节访问控制

✅ 小节服务
- 小节CRUD接口
- 小节排序管理
- 小节内容管理
- 小节访问控制

✅ 标签服务
- 标签CRUD接口
- 标签列表分页查询
- 热门标签获取
- 标签名称校验
- 批量获取/创建标签
- 标签缓存管理(TTL: 5分钟)
- 标签数据本地缓存

✅ 题目组服务
- 题目组CRUD接口
- 题目组列表分页查询
- 题目组详情获取
- 题目组内题目管理
- 题目排序管理
- 批量添加/移除题目
- 机构题目组管理

✅ 题目服务
- 题目CRUD接口
- 题目列表分页查询
- 题目详情获取
- 题目批量删除
- 题目引用检查
- 题目参数处理
  - 标签ID数组处理
  - 关键词统一处理
  - 可选参数处理
- 机构题目管理

✅ 分类服务
- 分类CRUD接口
- 分类列表分页查询
- 分类树结构获取
- 分类编码校验
- 分类状态管理
- 分类排序管理
- 父子分类管理
  - 根分类获取
  - 子分类获取
  - 分类树构建
- 错误处理优化
  - 详情获取返回null
  - 分类树获取返回空数组

✅ 认证服务
- 用户认证
  - 登录接口
  - 注册接口
  - 注销接口
  - 令牌刷新
- 验证码管理
  - 验证码生成
  - 验证码校验
- 用户信息
  - 当前用户获取
  - 用户信息缓存
- 错误处理
  - 详细日志记录
  - 友好错误提示
- 令牌管理
  - 令牌存储
  - 令牌自动刷新
  - 令牌过期处理
- 兼容性处理
  - 旧版API适配
  - 令牌格式转换

✅ 用户服务
- 用户管理
  - 用户CRUD接口
  - 用户列表分页
  - 用户详情获取
  - 用户状态管理
  - 用户角色分配
  - 批量删除用户
- 个人中心
  - 当前用户信息
  - 个人资料更新
  - 密码修改
  - 头像上传
  - 邮箱更新
- 数据模型
  - 个人资料更新
  - 密码修改请求
  - 邮箱验证码
  - 邮箱更新请求
  - 头像上传响应
- 错误处理
  - 详细错误日志
  - 友好错误提示
  - 静默失败处理

## 缓存机制优化

✅ 本地缓存实现
- 标签数据缓存(TTL: 5分钟)
- 缓存自动失效
- 手动清除缓存接口
- 创建/更新/删除自动清除缓存
- 请求失败时使用过期缓存
</file>

<file path="docs/fornt/前端开发规划.md">
# 在线课程平台前端开发规划 (Next.js版)

## 技术栈

### 核心框架
- Next.js 15.2.1
- React 19
- TypeScript 5

### 状态管理与数据获取
- Zustand：轻量级客户端状态管理
- Axios：HTTP请求库（用于客户端组件）
- SWR/React Query：(可选) 数据获取与缓存

### UI组件
- Tailwind CSS：已配置，用于样式开发
- shadcn/ui：基于Radix UI的组件集合，按需复制使用
- Lucide React：图标库
- Framer Motion：动画库

### 表单处理
- React Hook Form：表单处理库
- Zod：TypeScript优先的模式验证库

### 工具库
- date-fns：日期处理库
- clsx：条件类名合并
- Sonner：现代化 Toast 通知

### 工具函数库(/src/utils)
- cache.ts: 前端缓存工具,支持5分钟过期时间
- navigationUtils.ts: 问题管理相关的路由生成工具
- questionUtils.ts: 问题类型和难度级别转换工具
- date.ts: 日期格式化和时间差计算工具

### 开发工具
- ESLint：代码规范检查
- TypeScript：静态类型检查
- Next.js开发服务器（支持Fast Refresh）

## 项目结构 (Next.js应用路由)

```
src/
├── app/                    # Next.js应用路由
│   ├── (auth)/             # 认证相关路由组
│   │   ├── login/          # 登录页面
│   │   │   └── page.tsx    
│   │   ├── register/       # 注册页面
│   │   │   └── page.tsx
│   │   └── institution/    # 机构相关路由
│   │       ├── apply/      # 机构申请
│   │       ├── status/     # 申请状态查询
│   │       └── register/   # 机构用户注册
│   ├── (dashboard)/        # 需要认证的路由组
│   │   ├── layout.tsx      # 认证后的布局（侧边栏和导航栏）
│   │   ├── page.tsx        # 仪表盘首页
│   │   ├── users/          # 用户管理
│   │   ├── roles/          # 角色管理
│   │   └── permissions/    # 权限管理
│   ├── courses/            # 公开的课程路由
│   │   ├── page.tsx        # 课程列表
│   │   └── [id]/           # 动态路由-课程详情
│   │       └── page.tsx
│   ├── api/                # API路由（可选，用于简单BFF）
│   ├── layout.tsx          # 根布局
│   └── page.tsx            # 首页
├── components/             # 通用组件
│   ├── ui/                 # 基础UI组件（shadcn）
│   ├── auth/               # 认证相关组件
│   ├── institution/        # 机构相关组件
│   └── dashboard/          # 仪表盘相关组件
├── lib/                    # 工具函数库
│   ├── utils.ts            # 通用工具函数
│   └── constants.ts        # 常量定义
├── services/               # API服务（客户端）
│   ├── api.ts              # API基础配置
│   ├── auth.ts             # 认证服务
│   ├── user.ts             # 用户服务
│   └── institution.ts      # 机构服务
├── types/                  # 类型定义
│   ├── auth.ts             # 认证相关类型
│   ├── api.ts              # API响应相关类型
│   ├── question.ts         # 问题相关类型
│   ├── course.ts           # 课程相关类型
│   ├── review.ts           # 审核相关类型
│   ├── role.ts             # 角色相关类型
│   ├── permission.ts       # 权限相关类型
│   ├── user.ts             # 用户相关类型
│   └── institution.ts      # 机构相关类型
├── stores/                 # 客户端状态管理
│   ├── auth-store.ts       # 认证状态
│   ├── ui-store.ts         # UI状态
│   └── institution-store.ts # 机构状态
└── middleware.ts           # Next.js中间件（认证路由保护）
```

## Next.js最佳实践

### 组件设计
1. **服务器组件与客户端组件分离**
   - 默认使用服务器组件（不添加'use client'）
   - 需要交互、hooks、浏览器API的组件使用客户端组件（添加'use client'）
   - 尽可能将状态提升到叶子组件，保持大部分UI为服务器组件

2. **布局与页面**
   - 使用嵌套布局（layouts）共享UI
   - 使用路由组（route groups）组织相关路由
   - 使用loading.tsx实现加载状态
   - 使用error.tsx处理错误边界

3. **数据获取**
   - 服务器组件中直接使用async/await获取数据
   - 客户端组件使用SWR或React Query进行数据获取
   - 使用服务器操作（server actions）处理表单提交（如果适用）

### 数据获取与API请求
1. **API请求最佳实践**
   - 使用封装的请求工具统一处理API调用和错误
   - 确保所有请求包含正确的Content-Type和Accept头
   - 请求拦截器中自动添加授权令牌
   - 响应拦截器统一处理401/403等认证错误
   - 对于关键API请求，提供明确的错误处理和详细日志

2. **授权处理**
   - 同时使用localStorage和Cookie存储令牌，确保前端路由和API请求都能获取授权信息
   - 注销时清除所有认证数据
   - 刷新令牌机制处理会话过期
   - 获取用户信息时显式传递授权头，避免因时序问题导致的授权失败

3. **错误处理与容错**
   - 添加多层try-catch确保主流程不受子流程错误影响
   - 为关键操作增加详细的错误日志和回溯信息
   - 使用toast通知提供用户友好的错误提示
   - 对于非关键错误，采取优雅降级策略

### 状态管理
1. **仅在客户端组件中使用Zustand**
   - 状态管理用于用户会话、UI状态等客户端数据
   - 所有使用Zustand的组件必须标记为'use client'

2. **认证状态（已实现）**
```typescript
interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  login: (credentials: LoginRequest) => Promise<void>;  // 已实现，包含token存储和Cookie设置
  register: (data: RegisterRequest) => Promise<void>;
  logout: () => Promise<void>;  // 已实现，包含清除token和Cookie
  refreshToken: () => Promise<void>;
  setUser: (user: User | null) => void;
  clearError: () => void;
}
```

3. **UI状态**
```typescript
interface UIState {
  sidebarOpen: boolean;
  theme: 'light' | 'dark' | 'system';
  toggleSidebar: () => void;
  setSidebarOpen: (open: boolean) => void;
  setTheme: (theme: 'light' | 'dark' | 'system') => void;
}
```

4. **机构状态**
```typescript
interface InstitutionState {
  application: InstitutionApplication | null;
  applicationStatus: ApplicationStatus | null;
  registerCode: string | null;
  isLoading: boolean;
  error: string | null;
  submitApplication: (data: InstitutionApplicationRequest) => Promise<void>;
  checkApplicationStatus: () => Promise<void>;
  getRegisterCode: () => Promise<void>;
  clearError: () => void;
}
```

### 路由与认证
1. **使用Next.js中间件保护路由**
   - 检查认证状态，根据需要重定向
   - 实现基于角色的访问控制

2. **路由组分离公共和受保护内容**
   - (auth)：认证相关页面
   - (dashboard)：需要认证的管理功能
   - (institution)：机构相关页面

3. **角色处理最佳实践**
   - 后端返回用户角色作为对象数组(`roles`)，每个角色包含`id`、`name`、`code`等字段
   - 前端根据角色的`code`字段判断权限，通常需要去除`ROLE_`前缀
   - 使用通用的`hasRole`函数检查用户是否拥有特定角色
   - 在UI中根据用户角色动态过滤可见内容和操作
   - 确保处理角色数组而非单一角色属性

## 验证码机制的详细设计

### 后端验证码流程
1. **验证码生成**:
   - 使用Kaptcha库生成验证码图片
   - 验证码文本存储在Redis中，键名格式为`captcha:{captchaKey}`
   - 设置5分钟的过期时间
   - 验证码Key通过API响应返回

2. **验证码获取流程**:
   - 前端先调用 `/api/auth/captcha/key` 获取验证码key
   - 再使用key调用 `/api/auth/captcha/image/{key}` 获取验证码图片
   - 验证码key和用户输入的验证码一起提交给后端

3. **验证码校验**:
   - 登录/注册请求中需携带`captchaKey`和`captchaCode`
   - 后端从Redis获取对应的验证码文本
   - 比较用户提交的验证码与存储的验证码（忽略大小写）
   - 验证后立即删除验证码，确保一次性使用

### 前端验证码实现
1. **验证码组件设计**:
```tsx
interface CaptchaProps {
  onCaptchaKeyChange: (captchaKey: string) => void;
}

export function Captcha({ onCaptchaKeyChange }: CaptchaProps) {
  // 验证码状态管理与获取逻辑
  // 两步获取：先获取key，再获取图片
  // 图片数据转base64显示
}
```

2. **验证码获取流程**:
   - 组件挂载时自动获取验证码
   - 先调用获取key的接口，获取验证码key
   - 再用key获取验证码图片
   - 将验证码Key传递给父组件
   - 点击验证码图片可刷新获取新验证码

3. **邮箱验证码流程**:
   - 用户填写邮箱地址和图形验证码
   - 验证当前密码以确保身份安全
   - 验证通过后发送邮箱验证码
   - 邮箱验证码倒计时（60秒）防止频繁请求
   - 验证码发送成功后才允许提交更新表单

## 注册流程设计

### 分步注册流程
1. **普通用户注册**
   - **第一步：基本信息**
     - 用户名（长度4-20字符）
     - 密码（长度6-20字符）
     - 确认密码（验证与密码一致）
     - 点击"下一步"进入第二步

   - **第二步：邮箱验证**
     - 邮箱地址输入
     - 图形验证码输入与获取
     - 发送邮箱验证码
     - 邮箱验证码输入
     - 提交完成注册

2. **机构用户注册**
   - **第一步：注册码验证**
     - 输入机构注册码
     - 验证注册码有效性
     - 显示机构基本信息
     - 点击"下一步"进入基本信息填写

   - **第二步：基本信息填写**
     - 用户名输入
     - 密码输入和确认
     - 点击"下一步"进入邮箱验证

   - **第三步：邮箱验证**
     - 邮箱地址输入
     - 图形验证码验证
     - 邮箱验证码验证
     - 完成注册

### 技术实现
1. **表单管理**
   - 使用React Hook Form管理表单状态
   - 使用Zod进行表单验证
   - 分别定义两个表单schema和表单实例

2. **状态管理**
   - 使用组件内state管理跨步骤数据
   - 最终注册时合并所有数据提交

3. **UI组件**
   - 使用Tabs组件实现分步界面
   - 使用表单组件实现数据收集
   - 表单间数据传递和状态保持

### 用户体验
1. **引导式流程**
   - 清晰的步骤指示
   - 禁用未完成前置步骤的Tab
   - 步骤间数据预览
   - 返回功能支持修改前一步内容

2. **验证与反馈**
   - 实时表单验证
   - 即时错误提示
   - 验证码发送状态与倒计时
   - 操作结果toast通知

## 功能模块规划

### 1. 认证模块（已完成）
- [x] 登录页面
  - 表单验证
  - 验证码集成
  - 登录后重定向到仪表盘
  - Token存储（localStorage + Cookie）
- [x] 注册页面
  - 普通用户注册
  - 机构用户注册
- [x] 验证码获取与验证
- [x] JWT令牌管理（存储、刷新、清除）
- [x] 认证状态管理
  - Zustand状态存储
  - 登录状态持久化
  - 注销功能（清除所有认证数据）
- [x] 认证中间件实现
  - 路由保护
  - 未认证重定向

### 2. 公共布局模块
- 根布局组件
- 不同区域特定布局
- 导航栏
- 侧边菜单
- 主题切换

### 3. 用户中心模块
- [x] 用户信息展示
- [x] 用户信息编辑（昵称、手机号）
- [x] 密码修改（旧密码、新密码、确认密码）
- [x] 个人头像上传（含裁剪功能）
- [x] 邮箱更新（含验证码验证）
- [ ] 用户设置

### 4. 机构管理模块
- [x] 机构申请功能
  - 申请表单（机构信息、联系人信息）
  - Logo上传与预览
  - 表单验证
  - 提交处理
- [x] 申请状态查询
  - 状态展示
  - 进度跟踪
  - 结果通知
- [x] 机构用户注册
  - 注册码验证
  - 分步注册流程
  - 邮箱验证
  - 角色分配

### 5. 媒体管理模块（已完成）
- [x] 媒体上传
  - 基本信息填写（标题、描述）
  - 文件选择
  - 大文件分片上传
  - 上传进度显示
- [x] 媒体列表
  - 按类型筛选查看
  - 分页加载
  - 媒体信息展示
- [x] 媒体状态管理
  - 上传状态跟踪
  - 处理状态显示
  - 错误处理

### 6. 课程模块
- 课程列表页
- 课程详情页
- 课程搜索与筛选
- 课程分类浏览
- 课程收藏

### 7. 学习模块
- 课程学习页面
- 视频播放器
- 课程进度记录
- 课程笔记
- 课程评价

### 8. 管理模块
- 用户管理
- 角色管理
- 权限管理
- 课程管理
- 内容审核

### 9. 订单与支付模块
- 课程购买
- 订单管理
- 支付流程
- 优惠券管理

## 路由规划 (Next.js格式)

```
/                                # 首页
/login                           # 登录
/register                        # 普通用户注册
/institution/apply               # 机构申请
/institution/status             # 申请状态查询
/institution/register           # 机构用户注册
/courses                         # 课程列表
/courses/[id]                    # 课程详情
/courses/[id]/learn              # 课程学习
/dashboard                       # 仪表盘首页
/dashboard/profile               # 个人信息
/dashboard/settings              # 个人设置
/dashboard/favorites             # 收藏课程
/dashboard/orders                # 订单记录
/dashboard/users                 # 用户管理
/dashboard/roles                 # 角色管理
/dashboard/permissions           # 权限管理
/dashboard/courses               # 课程管理
/dashboard/reviews               # 审核管理
/dashboard/statistics            # 统计数据
```

## API对接规划

### 1. 认证相关API
- **验证码API**
  - `GET /api/auth/captcha/key` - 获取验证码key
  - `GET /api/auth/captcha/image/{key}` - 获取验证码图片
  - 请求参数: 可选`captchaKey`
  - 响应: 验证码图片（二进制）和`Captcha-Key`响应头
  - 集成方式: 使用axios直接请求，处理二进制响应和响应头

- **注册API**
  - `POST /api/auth/register` - 普通用户注册
  - `POST /api/auth/institution/register` - 机构用户注册
  - 请求参数: 用户名、密码、邮箱、验证码Key、验证码
  - 响应: 成功消息
  - 表单验证: 使用Zod进行客户端验证

- **登录API**
  - `POST /api/auth/login` - 用户登录
  - 请求参数: 用户名、密码、验证码Key、验证码
  - 响应: JWT令牌（accessToken、refreshToken）
  - 状态管理: 登录成功后将令牌存储在localStorage和Zustand状态中

- **其他认证API**
  - `POST /api/auth/refresh-token` - 刷新令牌
  - `POST /api/auth/logout` - 用户注销

### 2. 用户相关API
- `/api/users` - 用户列表/创建用户
- `/api/users/:id` - 用户详情/更新/删除
- `/api/users/:id/status` - 修改用户状态
- `/api/users/:id/roles` - 用户角色分配
- `/api/users/batch` - 批量处理用户

### 3. 机构相关API
- `/api/institutions/apply` - 提交机构申请
- `/api/institutions/application-status` - 查询申请状态
- `/api/institutions/register-code` - 获取机构注册码
- `/api/reviewer/institutions/applications` - 获取申请列表
- `/api/reviewer/institutions/applications/:id` - 申请详情
- `/api/reviewer/institutions/applications/:id/approve` - 审核通过
- `/api/reviewer/institutions/applications/:id/reject` - 审核拒绝

### 4. 角色权限相关API
- `/api/roles` - 角色列表/创建角色
- `/api/roles/:id` - 角色详情/更新/删除
- `/api/roles/:id/permissions` - 角色权限分配
- `/api/permissions` - 权限列表/创建权限
- `/api/permissions/:id` - 权限详情/更新/删除

### 5. 课程相关API
- `/api/courses` - 课程列表/创建课程
- `/api/courses/:id` - 课程详情/更新/删除
- `/api/courses/:id/chapters` - 课程章节
- `/api/courses/:id/resources` - 课程资源
- `/api/courses/:id/enrollments` - 课程报名

### 6. 学习相关API
- `/api/learning/progress` - 学习进度
- `/api/learning/notes` - 学习笔记
- `/api/learning/favorites` - 收藏课程

### 7. 订单相关API
- `/api/orders` - 订单列表/创建订单
- `/api/orders/:id` - 订单详情/更新
- `/api/payments` - 支付管理

## 开发计划与时间线

### 第一阶段：基础框架与认证模块（已完成）
- [x] 创建Next.js项目结构
- [x] 安装核心依赖（Zustand、Axios等）
- [x] 设置Tailwind CSS和shadcn UI
- [x] 实现基础布局组件
- [x] 创建认证页面（登录/注册）
  - 完成登录功能
  - 完成注销功能
  - 实现重定向逻辑
- [x] 实现JWT令牌管理
  - localStorage存储
  - Cookie存储
  - 注销时清理
- [x] 设置路由中间件保护
- [x] 实现认证状态管理
- [x] 完成验证码组件和集成

### 第二阶段：机构管理模块（已完成）
- [x] 实现机构申请功能
  - 申请表单开发
  - Logo上传功能
  - 表单验证
  - 提交处理
- [x] 实现申请状态查询
  - 状态展示组件
  - 进度跟踪
  - 结果通知
- [x] 实现机构用户注册
  - 注册码验证
  - 分步注册流程
  - 邮箱验证
  - 角色分配

### 第三阶段：用户与管理模块（进行中）
- [ ] 实现用户服务接口
- [ ] 完成用户管理页面
- [ ] 实现角色与权限管理
- [ ] 完成用户个人资料页面
- [ ] 实现用户设置功能

### 第四阶段：课程模块
- [ ] 实现课程列表页面
- [ ] 实现课程详情页面
- [ ] 添加课程搜索与筛选功能
- [ ] 实现课程管理功能

### 第五阶段：学习与订单功能
- [ ] 实现学习进度跟踪
- [ ] 实现课程笔记功能
- [ ] 实现课程评价功能
- [ ] 实现课程购买流程
- [ ] 实现订单管理功能

### 第六阶段：优化与测试
- [ ] 性能优化
- [ ] 兼容性测试
- [ ] 用户体验优化
- [ ] 文档编写
- [ ] 部署准备

## 组件设计

### 通用UI组件
- Button
- Input
- Select
- Checkbox
- RadioGroup
- Switch
- Dialog
- Dropdown
- Tabs
- Card
- Avatar
- Badge
- Toast
- Tooltip
- Captcha (验证码组件)
- FileUpload (文件上传组件)

### 布局组件
- RootLayout
- DashboardLayout
- AuthLayout
- InstitutionLayout

### 业务组件
- 用户相关：UserTable, UserForm, UserProfile
- 角色相关：RoleTable, RoleForm, PermissionSelect
- 机构相关：InstitutionApplicationForm, ApplicationStatus, RegisterCodeVerification
- 课程相关：CourseCard, CourseList, CourseDetails
- 学习相关：VideoPlayer, ProgressBar, NoteEditor

## 开发规范

### 代码规范
- 使用ESLint确保代码质量
- 组件文件名使用Pascal Case (ButtonComponent.tsx)
- 工具函数文件名使用kebab-case (date-utils.ts)
- 每个组件一个文件，相关组件可放在同一目录下

### Next.js特定规范
- 页面组件放在app/路径下的page.tsx文件中
- 布局组件放在对应目录的layout.tsx文件中
- 路由组使用括号命名(groupName)
- 动态路由使用方括号[param]
- 客户端组件顶部添加'use client'指令

### Git工作流
- 使用feature分支开发新功能
- 使用pull request进行代码审查
- 提交信息使用语义化前缀(feat:, fix:, docs:, etc.)

## 需要注意的问题

1. **服务器组件与客户端组件区分**
   - 谨慎使用'use client'，仅在需要时添加
   - 注意数据获取模式的差异

2. **状态管理**
   - Zustand仅用于客户端状态
   - 服务器状态使用React Query或SWR管理

3. **性能优化**
   - 利用Next.js的图像优化
   - 合理使用动态导入和懒加载
   - 避免不必要的客户端渲染

4. **安全考虑**
   - 敏感操作在服务器组件或服务器操作中处理
   - 使用Next.js中间件进行认证和授权
   - 注意API路由的安全性

5. **文件上传处理**
   - 验证文件类型和大小
   - 使用预览功能
   - 处理上传错误和进度
   - 支持图片裁剪功能

6. **验证码处理**
   - 正确处理验证码Key，优先使用响应头中的值
   - 加强错误处理，提供用户友好的错误提示
   - 优化验证码刷新逻辑，避免多次不必要请求

7. **角色和权限处理**
   - 正确处理用户角色数组
   - 基于角色控制UI显示
   - 实现细粒度的权限控制

## 分片上传的详细设计

### 分片上传流程
1. **初始化上传**:
   - 用户填写媒体基本信息（标题、描述）并选择文件
   - 前端发送初始化请求，包含文件名、大小、类型等信息
   - 后端生成mediaId、uploadId和预签名URL列表返回

2. **分片上传**:
   - 根据文件大小和预签名URL数量计算分片大小
   - 通过File API切割文件成多个分片
   - 依次将每个分片上传到对应的预签名URL
   - 收集每个分片上传后返回的ETag
   - 更新上传进度

3. **完成上传**:
   - 所有分片上传完成后，发送合并请求
   - 请求包含uploadId和所有分片的信息（分片编号和ETag）
   - 后端执行分片合并操作
   - 返回媒体的完整信息

4. **错误处理**:
   - 上传失败时提供详细错误提示
   - 支持取消上传操作
   - 失败后自动清理已上传的资源

### 技术实现
1. **服务层实现**:
```typescript
// mediaService.ts
export interface MediaService {
  // 初始化上传
  initiateUpload(initDTO: MediaUploadInitDTO): Promise<Result<UploadInitiationVO>>;
  
  // 完成上传
  completeUpload(mediaId: number, dto: CompleteUploadDTO): Promise<Result<MediaVO>>;
  
  // 取消上传
  cancelUpload(mediaId: number): Promise<Result<void>>;
}
```

2. **上传组件实现**:
```tsx
// UploadMedia.tsx
const handleUpload = async () => {
  try {
    // 1. 初始化上传
    const initResult = await mediaService.initiateUpload({...});
    
    // 2. 分片上传
    for (const { partNumber, url } of initResult.data.presignedUrls) {
      const chunk = file.slice(...);
      const response = await fetch(url, {
        method: 'PUT',
        body: chunk,
        headers: { 'Content-Type': 'application/octet-stream' }
      });
      
      // 获取ETag
      const etag = response.headers.get('ETag') || response.headers.get('etag') || '';
      completedParts.push({ partNumber, etag: etag.replace(/^"|"$/g, '') });
      
      // 更新进度
      setProgress((partNumber / totalParts) * 100);
    }
    
    // 3. 完成上传
    const completeResult = await mediaService.completeUpload(mediaId, {
      uploadId,
      completedParts
    });
  } catch (error) {
    // 错误处理
  }
};
```

3. **解决的关键问题**:
   - **ETag处理**: 确保正确提取并格式化每个分片的ETag值
   - **请求字段匹配**: 确保API请求中字段名与后端期望一致（如使用`etag`而非`eTag`）
   - **顺序上传**: 使用for循环而非Promise.all，减少并发导致的问题
   - **错误传播**: 实现多层错误处理，确保每个环节的错误都能被捕获和处理

4. **用户体验优化**:
   - 显示详细的上传进度百分比
   - 文件类型自动识别与图标显示
   - 上传完成自动刷新列表
   - 友好的错误提示
   - 支持取消操作

### 安全考虑
1. **授权控制**: 所有上传操作都需要有效的用户认证
2. **文件限制**: 前端进行基本的文件类型和大小检查
3. **错误处理**: 对所有异常情况进行适当处理，防止半完成状态
4. **安全传输**: 使用HTTPS确保文件传输安全
5. **资源清理**: 上传失败时主动清理临时资源

### lib工具库
- http.ts: 统一的HTTP请求工具
  - axios实例配置
  - 请求/响应拦截器
  - 统一的错误处理
  - 类型安全的请求方法
- utils.ts: 通用工具函数
  - 样式工具(cn)
  - 日期格式化
  - 其他通用函数

### services层设计
- api.ts: 基础API配置
- auth.ts: 认证相关服务
- course.ts: 课程管理服务
  - 课程CRUD
  - 课程状态管理
  - 课程预览
  - 支付设置
- review-service.ts: 审核服务
  - 课程审核流程
  - 审核任务管理
  - 课程结构获取
  - 审核状态更新
- section.ts: 课程小节管理
- chapter.ts: 课程章节管理
- tag.ts: 标签管理
- question-group.ts: 题目组管理
- question.ts: 题目管理
- media-service.ts: 媒体服务
- storage-service.ts: 存储服务

### UI组件库(/components/ui)
- 基础组件
  - Button, Input, Select等
  - Form相关组件
  - Dialog, Popover等
- 数据展示
  - Table
  - Pagination
  - Card
- 特殊组件
  - MultiSelect: 支持搜索、动画的多选组件
  - Captcha: 验证码组件
  - ReviewPagination: 审核专用分页
</file>

<file path="docs/fornt/前端说明.md">
# 前端技术文档

## 目录
1. [项目概述](#项目概述)
2. [技术栈](#技术栈)
3. [项目结构](#项目结构)
4. [核心功能模块](#核心功能模块)
5. [开发指南](#开发指南)
6. [部署说明](#部署说明)

## 项目概述
本项目是一个在线课程平台的前端实现，采用现代化的技术栈和最佳实践进行开发。主要功能包括：
- 课程管理与发布
- 内容审核流程
- 用户权限管理
- 机构管理系统
- 题目库管理
- 媒体资源管理

## 技术栈
- **框架**: Next.js 14 (App Router)
- **UI库**: React 18, Tailwind CSS, Shadcn/ui
- **状态管理**: Zustand
- **表单处理**: React Hook Form + Zod
- **HTTP客户端**: Axios
- **开发工具**: TypeScript, ESLint
- **构建工具**: Webpack, PostCSS

## 项目结构

```
front/src/
├── app/                    # 页面路由
│   ├── (auth)/            # 认证相关路由
│   ├── (dashboard)/       # 管理后台路由
│   ├── institution/       # 机构相关路由
│   └── preview/          # 预览相关路由
├── components/            # 组件目录
│   ├── ui/               # 基础UI组件
│   ├── dashboard/        # 后台管理组件
│   ├── preview/          # 预览相关组件
│   └── providers/        # 全局Provider
├── hooks/                # 自定义Hook
│   ├── useMediaUpload.ts # 媒体上传Hook
│   └── useDebounce.ts    # 防抖Hook
├── lib/                  # 基础库
│   ├── utils.ts         # 通用工具
│   └── http.ts          # HTTP请求封装
├── services/             # API服务
│   ├── auth.ts          # 认证服务
│   ├── course.ts        # 课程服务
│   ├── media-service.ts # 媒体服务
│   └── ...
├── stores/              # 状态管理
│   ├── auth-store.ts    # 认证状态
│   ├── course-store.ts  # 课程状态
│   └── ui-store.ts      # UI状态
├── types/               # 类型定义
│   ├── api.ts          # API类型
│   ├── course.ts       # 课程类型
│   └── user.ts         # 用户类型
├── utils/               # 工具函数
│   ├── cache.ts        # 缓存工具
│   ├── date.ts         # 日期工具
│   └── navigationUtils.ts # 导航工具
└── middleware.ts        # 全局中间件
```

### 目录说明

#### 1. app目录
页面路由组织，基于Next.js 14的App Router架构：
- `(auth)/`: 认证相关页面
  - `login/`: 登录页面
  - `register/`: 注册页面
- `(dashboard)/`: 管理后台页面
  - `courses/`: 课程管理
  - `reviews/`: 审核管理
  - `users/`: 用户管理
- `institution/`: 机构相关页面
- `preview/`: 课程预览页面

#### 2. components目录
组件库组织：
- `ui/`: 基础UI组件
  - 按钮、输入框、表单等
  - 对话框、模态框
  - 数据展示组件
- `dashboard/`: 管理后台组件
  - 课程管理组件
  - 审核流程组件
  - 用户管理组件
- `preview/`: 预览相关组件
- `providers/`: 全局Provider组件

#### 3. hooks目录
自定义Hook：
- `useMediaUpload.ts`: 媒体上传Hook
  - 分片上传
  - 进度跟踪
  - 断点续传
- `useDebounce.ts`: 防抖Hook
  - 输入防抖
  - 请求防抖

#### 4. services目录
API服务封装：
- `auth.ts`: 认证服务
- `course.ts`: 课程服务
- `media-service.ts`: 媒体服务
- `review-service.ts`: 审核服务
- `user.ts`: 用户服务
- `role.ts`: 角色服务
- `permission.ts`: 权限服务

#### 5. stores目录
状态管理：
- `auth-store.ts`: 认证状态
- `course-store.ts`: 课程状态
- `ui-store.ts`: UI状态
- `user-management-store.ts`: 用户管理状态
- `role-store.ts`: 角色管理状态
- `permission-store.ts`: 权限管理状态

#### 6. types目录
类型定义：
- `api.ts`: API相关类型
- `course.ts`: 课程相关类型
- `user.ts`: 用户相关类型
- `auth.ts`: 认证相关类型
- `permission.ts`: 权限相关类型
- `question.ts`: 题目相关类型

#### 7. utils目录
工具函数：
- `cache.ts`: 缓存管理
- `date.ts`: 日期处理
- `navigationUtils.ts`: 导航工具
- `questionUtils.ts`: 题目工具

## 核心功能模块

### 1. 认证系统
认证系统提供完整的用户认证流程：

#### 登录功能
- 表单验证
- 验证码校验
- 登录状态管理
- 路由保护
- 权限控制

#### 注册功能
- 分步注册
- 邮箱验证
- 机构注册
- 表单验证

### 2. 课程管理
课程管理系统包含：

#### 课程基础管理
- 课程创建
- 课程编辑
- 课程发布
- 课程审核

#### 课程内容管理
- 章节管理
- 小节管理
- 资源管理
- 题目管理

### 3. 权限管理
完整的RBAC权限管理：

#### 角色管理
- 角色创建
- 权限分配
- 角色分配
- 权限验证

#### 权限控制
- 路由保护
- 操作权限
- 数据权限
- 菜单权限

### 4. 媒体管理
媒体资源管理系统：

#### 上传功能
- 分片上传
- 断点续传
- 进度跟踪
- 格式验证

#### 资源管理
- 资源分类
- 资源预览
- 资源引用
- 资源删除

## 开发指南

### 环境要求
- Node.js 18+
- npm 9+
- Git

### 开发命令
```bash
# 安装依赖
npm install

# 开发环境
npm run dev

# 构建
npm run build

# 生产环境
npm run start

# 代码检查
npm run lint
```

### 开发规范

#### 代码规范
1. TypeScript规范
2. React最佳实践
3. 目录结构规范
4. 命名规范

#### 组件规范
1. 组件设计原则
2. Props规范
3. 状态管理规范
4. 生命周期规范

#### 文档规范
1. 代码注释规范
2. API文档规范
3. 组件文档规范
4. 更新日志规范

### 常见问题和最佳实践

#### 1. 数据类型安全
- **状态初始化**
  ```typescript
  // ✅ 推荐
  const [data, setData] = useState<T[]>([]);
  
  // ❌ 避免
  const [data, setData] = useState<T[]>();
  ```

- **空值处理**
  ```typescript
  // ✅ 推荐
  const value = response?.data?.content ?? [];
  
  // ❌ 避免
  const value = response.data.content;
  ```

#### 2. API响应处理
- **统一响应格式**
  ```typescript
  interface ApiResponse<T> {
    code: number;
    message: string;
    data: T;
  }

  interface PaginationResult<T> {
    content: T[];
    totalElements: number;
    totalPages: number;
    size: number;
    number: number;
  }
  ```

- **错误处理最佳实践**
  ```typescript
  try {
    const result = await api.getData();
    setData(result?.content || []);
  } catch (error) {
    console.error('错误信息:', error);
    toast.error('友好的错误提示');
    setData([]); // 设置默认值
  }
  ```

#### 3. 状态管理
- **缓存策略**
  ```typescript
  // 缓存store示例
  const useCacheStore = create<CacheState>((set, get) => ({
    data: null,
    lastFetchTime: 0,
    CACHE_TTL: 5 * 60 * 1000,
    
    setData: (data) => set({ 
      data, 
      lastFetchTime: Date.now() 
    }),
    
    isCacheValid: () => {
      const { lastFetchTime, CACHE_TTL, data } = get();
      return data !== null && 
        (Date.now() - lastFetchTime < CACHE_TTL);
    }
  }));
  ```

#### 4. 组件生命周期
- **异步操作处理**
  ```typescript
  useEffect(() => {
    const controller = new AbortController();
    
    const fetchData = async () => {
      try {
        const result = await api.getData({
          signal: controller.signal
        });
        if (!result) return;
        setData(result);
      } catch (error) {
        if (error.name === 'AbortError') return;
        handleError(error);
      }
    };

    fetchData();
    return () => controller.abort();
  }, []);
  ```

#### 5. 性能优化
- **列表渲染优化**
  ```typescript
  // 使用虚拟滚动
  import { VirtualList } from '@/components/ui/virtual-list';
  
  const ItemList = () => {
    return (
      <VirtualList
        itemCount={1000}
        itemSize={50}
        renderItem={({ index, style }) => (
          <div style={style}>Item {index}</div>
        )}
      />
    );
  };
  ```

- **计算缓存**
  ```typescript
  const memoizedValue = useMemo(() => {
    return expensiveComputation(deps);
  }, [deps]);

  const memoizedCallback = useCallback(() => {
    doSomething(deps);
  }, [deps]);
  ```

#### 6. 加载状态处理
- **统一加载状态管理**
  ```typescript
  const useAsyncOperation = () => {
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<Error | null>(null);

    const execute = async (operation: () => Promise<void>) => {
      try {
        setLoading(true);
        setError(null);
        await operation();
      } catch (err) {
        setError(err as Error);
        toast.error('操作失败');
      } finally {
        setLoading(false);
      }
    };

    return { loading, error, execute };
  };
  ```

#### 7. 表单处理
- **表单验证和提交**
  ```typescript
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: '',
      email: ''
    }
  });

  const onSubmit = async (data: FormData) => {
    try {
      await api.submit(data);
      toast.success('提交成功');
    } catch (error) {
      toast.error('提交失败');
    }
  };
  ```

#### 8. 路由和导航
- **路由守卫**
  ```typescript
  const ProtectedRoute = ({ children }: { children: React.ReactNode }) => {
    const { isAuthenticated, loading } = useAuth();
    const router = useRouter();

    useEffect(() => {
      if (!loading && !isAuthenticated) {
        router.push('/login');
      }
    }, [isAuthenticated, loading, router]);

    if (loading) {
      return <LoadingSpinner />;
    }

    return isAuthenticated ? children : null;
  };
  ```

## 部署说明

### 构建流程
1. 代码检查
2. 单元测试
3. 构建打包
4. 资源优化

### 部署方案
1. 静态部署
2. Docker部署
3. Vercel部署

### 环境变量
- `NEXT_PUBLIC_API_URL`: API地址
- `NEXT_PUBLIC_UPLOAD_URL`: 上传服务地址
- `NEXT_PUBLIC_PREVIEW_URL`: 预览服务地址

### 监控维护
1. 错误监控
2. 性能监控
3. 用户分析
4. 日志收集
</file>

<file path="docs/front/开发进度.md">
## UI组件完善

✅ 题目管理组件
- 题目列表组件(QuestionList.tsx)
  - 题目列表展示
  - 分页加载
  - 多条件筛选
    - 标题搜索
    - 类型筛选
    - 难度筛选
    - 标签筛选
  - 题目展开/折叠
  - 题目编辑
    - 题目分析编辑
    - 选项管理
    - 正确答案设置
  - 题目删除
    - 删除前检查引用
    - 友好错误提示
  - 骨架屏加载
  - 错误处理

- 题目标签组件(QuestionTagList.tsx)
  - 标签列表展示
  - 标签搜索
  - 标签CRUD
  - 标签分页
  - 骨架屏加载
  - 错误处理

- 题目导入组件(QuestionImportModal.tsx)
  - Excel文件上传
  - 文件类型验证
  - 导入模板下载
  - 导入进度显示
  - 导入结果展示
  - 错误处理
  - 友好的用户界面
    - 拖拽上传
    - 文件预览
    - 进度条显示
    - 结果统计

✅ 课程内容播放器组件(course-content-player.tsx)
- 资源加载
  - 媒体资源加载
  - 题组资源加载
  - 访问URL获取
  - 骨架屏加载
  - 错误处理
- 媒体播放
  - 视频播放器
  - 音频播放器
  - 文档预览
  - 媒体信息展示
  - 访问URL刷新
- 题组展示
  - 题目列表展示
  - 题目展开/折叠
  - 题目类型标识
  - 题目难度标识
  - 选项展示
    - 单选题选项
    - 多选题选项
    - 判断题选项
    - 填空题答案
    - 简答题答案
- 用户界面
  - 标签页切换
  - 加载状态提示
  - 错误状态展示
  - 友好提示信息
  - 操作按钮
- 状态管理
  - 资源状态管理
  - 加载状态管理
  - 错误状态管理
  - 展开状态管理
  - URL状态管理 

#### 主题提供者组件 (theme-provider.tsx)
- [x] 基于 React Context 实现主题切换功能
- [x] 支持亮色/暗色/系统主题模式
- [x] 监听系统主题变化自动切换
- [x] 防止服务端渲染和客户端渲染不匹配
- [x] 主题持久化存储

#### 按钮组件 (button.tsx) 
- [x] 基于 Radix UI Slot 实现
- [x] 支持多种变体样式(default/destructive/outline/secondary/ghost/link)
- [x] 支持多种尺寸(default/sm/lg/icon)
- [x] 支持图标按钮
- [x] 支持禁用状态
- [x] 支持键盘焦点样式
- [x] 支持自定义类名扩展
- [x] WAI-ARIA 无障碍支持 

#### 输入框组件 (input.tsx)
- [x] 基于原生input元素实现
- [x] 支持所有HTML input属性
- [x] 统一的样式设计
- [x] 支持文件上传样式
- [x] 支持禁用状态
- [x] 支持错误状态
- [x] 支持键盘焦点样式
- [x] 支持自定义类名扩展
- [x] 响应式文本大小
- [x] WAI-ARIA 无障碍支持 

#### 角色管理组件
- [x] 角色表单组件 (role-form.tsx)
  - 基于React Hook Form实现
  - 表单验证(Zod)
  - 角色名称、编码、描述字段
  - 编辑/创建模式切换
  - 错误处理
  - 加载状态
  - 友好的用户界面

- [x] 权限对话框组件 (permission-dialog.tsx)
  - 权限列表展示
  - 权限搜索功能
  - 全选/取消全选
  - 单个权限选择
  - 权限分配保存
  - 滚动区域优化
  - 加载状态
  - 错误处理

#### 用户管理组件
- [x] 用户表单组件 (user-form.tsx)
  - 基于React Hook Form实现
  - 表单验证(Zod)
  - 用户基本信息字段
  - 密码处理(创建必填/编辑可选)
  - 角色分配
  - 状态管理
  - 编辑/创建模式切换
  - 错误处理
  - 加载状态
  - 友好的用户界面

#### 小节管理组件
- [x] 小节表单组件 (section-form.tsx)
  - 基于React Hook Form实现
  - 表单验证(Zod)
  - 小节基本信息
    - 标题
    - 描述
    - 内容类型
    - 访问类型
    - 预计学习时长
  - 资源管理
    - 媒体资源选择
    - 题组资源选择
    - 资源类型切换
    - 资源预览
  - 编辑/创建模式切换
  - 错误处理
  - 加载状态
  - 友好的用户界面

- [x] 小节资源列表组件 (section-resource-list.tsx)
  - 资源类型支持
    - 主要资源
    - 补充资源
    - 作业
    - 参考资料
  - 媒体类型支持
    - 视频
    - 音频
    - 文档
    - 图片
    - 其他
  - 资源展示
    - 资源基本信息
    - 资源类型标识
    - 文件大小格式化
    - 资源描述
    - 访问链接
  - 资源管理
    - 资源删除
    - 删除确认
    - 错误处理
  - 用户界面
    - 加载状态
    - 错误状态
    - 空状态
    - 友好提示
    - 动画效果

#### 课程管理组件
- [x] 课程元数据管理
  - 分类管理组件 (category-management.tsx)
    - 分类列表展示
    - 分类树形视图
    - 分类搜索
    - 分类CRUD操作
    - 分类排序
    - 分类状态管理
    - 分页加载
    - 错误处理
  - 标签管理组件 (tag-management.tsx)
    - 标签列表展示
    - 标签搜索
    - 标签CRUD操作
    - 标签使用统计
    - 分页加载
    - 错误处理

- [x] 课程内容管理
  - 章节列表组件 (chapter-list.tsx)
    - 章节列表展示
    - 章节拖拽排序
    - 章节展开/折叠
    - 章节CRUD操作
    - 访问权限设置
    - 预计学习时长
    - 错误处理
  - 章节小节组件 (chapter-sections.tsx)
    - 小节列表展示
    - 小节资源管理
    - 小节CRUD操作
    - 资源类型标识
    - 加载状态
    - 错误处理

- [x] 课程状态管理
  - 发布状态徽章 (CoursePublishBadge.tsx)
    - 发布状态展示
    - 工作区版本判断
    - 图标展示
  - 课程状态徽章 (CourseStatusBadge.tsx)
    - 多种状态展示
      - 草稿
      - 待审核
      - 审核中
      - 已发布
      - 已拒绝
      - 已下线
    - 状态图标
    - 状态文本

- [x] 课程审核组件
  - 课程预览对话框 (course-preview-dialog.tsx)
    - 课程结构展示
    - 内容预览
      - 媒体资源预览
      - 题组预览
    - 审核操作
      - 通过审核
      - 拒绝审核
      - 审核意见
    - 加载状态
    - 错误处理
  - 内容播放器 (review-content-player.tsx)
    - 媒体资源播放
      - 视频播放
      - 音频播放
      - 文档预览
      - 图片预览
    - 题组展示
      - 题目列表
      - 选项展示
      - 答案解析
    - 加载状态
    - 错误处理

- [x] 课程表单组件 (course-form.tsx)
  - 基本信息管理
    - 课程标题
    - 课程描述
    - 课程封面
    - 课程分类
    - 课程标签
  - 课程设置
    - 难度级别
    - 学习目标
    - 适用人群
    - 先修要求
  - 价格设置
    - 课程定价
    - 优惠设置
  - 表单验证
  - 错误处理
  - 友好的用户界面
</file>

<file path="front/.cursorrules">
<cursor-tools Integration>
# Instructions
Use the following commands to get AI assistance:

**Web Search:**
`cursor-tools web "<your question>"` - Get answers from the web using Perplexity AI (e.g., `cursor-tools web "latest weather in London"`)
when using web for complex queries suggest writing the output to a file somewhere like local-research/<query summary>.md.

**Repository Context:**
`cursor-tools repo "<your question>"` - Get context-aware answers about this repository using Google Gemini (e.g., `cursor-tools repo "explain authentication flow"`)

**Documentation Generation:**
`cursor-tools doc [options]` - Generate comprehensive documentation for this repository (e.g., `cursor-tools doc --output docs.md`)
when using doc for remote repos suggest writing the output to a file somewhere like local-docs/<repo-name>.md.

**GitHub Information:**
`cursor-tools github pr [number]` - Get the last 10 PRs, or a specific PR by number (e.g., `cursor-tools github pr 123`)
`cursor-tools github issue [number]` - Get the last 10 issues, or a specific issue by number (e.g., `cursor-tools github issue 456`)

**Browser Automation (Stateless):**
`cursor-tools browser open <url> [options]` - Open a URL and capture page content, console logs, and network activity (e.g., `cursor-tools browser open "https://example.com" --html`)
`cursor-tools browser act "<instruction>" --url=<url> [options]` - Execute actions on a webpage using natural language instructions (e.g., `cursor-tools browser act "Click Login" --url=https://example.com`)
`cursor-tools browser observe "<instruction>" --url=<url> [options]` - Observe interactive elements on a webpage and suggest possible actions (e.g., `cursor-tools browser observe "interactive elements" --url=https://example.com`)
`cursor-tools browser extract "<instruction>" --url=<url> [options]` - Extract data from a webpage based on natural language instructions (e.g., `cursor-tools browser extract "product names" --url=https://example.com/products`)

**Notes on Browser Commands:**
- All browser commands are stateless: each command starts with a fresh browser instance and closes it when done.
- When using `--connect-to`, special URL values are supported:
  - `current`: Use the existing page without reloading
  - `reload-current`: Use the existing page and refresh it (useful in development)
- Multi step workflows involving state or combining multiple actions are supported in the `act` command using the pipe (|) separator (e.g., `cursor-tools browser act "Click Login | Type 'user@example.com' into email | Click Submit" --url=https://example.com`)
- Video recording is available for all browser commands using the `--video=<directory>` option. This will save a video of the entire browser interaction at 1280x720 resolution. The video file will be saved in the specified directory with a timestamp.
- DO NOT ask browser act to "wait" for anything, the wait command is currently disabled in Stagehand.

**Tool Recommendations:**
- `cursor-tools web` is best for general web information not specific to the repository.
- `cursor-tools repo` is ideal for repository-specific questions, planning, code review and debugging.
- `cursor-tools doc` generates documentation for local or remote repositories.
- `cursor-tools browser` is useful for testing and debugging web apps.

**Running Commands:**
1. **Installed version:** Use `cursor-tools <command>` (if in PATH) or `npm exec cursor-tools "<command>"`, `yarn cursor-tools "<command>"`, `pnpm cursor-tools "<command>"`.
2. **Without installation:** Use `npx -y cursor-tools@latest "<command>"` or `bunx -y cursor-tools@latest "<command>"`.

**General Command Options (Supported by all commands):**
--model=<model name>: Specify an alternative AI model to use
--max-tokens=<number>: Control response length
--save-to=<file path>: Save command output to a file (in *addition* to displaying it)
--help: View all available options (help is not fully implemented yet)

**Documentation Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Generate documentation for a remote GitHub repository

**GitHub Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Access PRs/issues from a specific GitHub repository

**Browser Command Options (for 'open', 'act', 'observe', 'extract'):**
--console: Capture browser console logs (enabled by default, use --no-console to disable)
--html: Capture page HTML content
--network: Capture network activity (enabled by default, use --no-network to disable)
--screenshot=<file path>: Save a screenshot of the page
--timeout=<milliseconds>: Set navigation timeout (default: 30000ms)
--viewport=<width>x<height>: Set viewport size (e.g., 1280x720). When using --connect-to, viewport is only changed if this option is explicitly provided
--headless: Run browser in headless mode (default: true)
--no-headless: Show browser UI (non-headless mode) for debugging
--connect-to=<port>: Connect to existing Chrome instance
--wait=<duration or selector>: Wait after page load (e.g., '5s', '#element-id', 'selector:.my-class')
--video=<directory>: Save a video recording of the browser interaction to the specified directory (1280x720 resolution). Not available when using --connect-to

**Additional Notes:**
- For detailed information, see `node_modules/cursor-tools/README.md` (if installed locally).
- Configuration is in `cursor-tools.config.json` (or `~/.cursor-tools/config.json`).
- API keys are loaded from `.cursor-tools.env` (or `~/.cursor-tools/.env`).
- Browser commands require separate installation of Playwright: `npm install --save-dev playwright` or `npm install -g playwright`.
- **Remember:** You're part of a team of superhuman expert AIs. Work together to solve complex problems.
<!-- cursor-tools-version: 0.5.0 -->
</cursor-tools Integration>
</file>

<file path="front/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="front/components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "gray",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="front/eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="front/next.config.ts">
import type { NextConfig } from "next";
/** @type {import('next').NextConfig} */
const nextConfig: NextConfig = {
  reactStrictMode: true,
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: 'http://localhost:8080/api/:path*',
      }
    ];
  }
};
export default nextConfig;
</file>

<file path="front/package.json">
{
  "name": "front",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hello-pangea/dnd": "^18.0.1",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@types/lodash": "^4.17.16",
    "axios": "^1.8.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.4",
    "date-fns": "^4.1.0",
    "framer-motion": "^12.4.10",
    "lodash": "^4.17.21",
    "lucide-react": "^0.479.0",
    "next": "15.2.1",
    "next-themes": "^0.4.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "react-image-crop": "^11.0.7",
    "react-toastify": "^11.0.5",
    "sonner": "^2.0.1",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@shadcn/ui": "^0.0.4",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.1",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="front/postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="front/public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="front/public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="front/public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="front/public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="front/public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="front/README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="front/src/app/(auth)/layout.tsx">
import { Metadata } from 'next';
import Link from 'next/link';
import Image from 'next/image';
export const metadata: Metadata = {
  title: '认证 - 在线课程平台',
  description: '登录或注册在线课程平台账户',
};
export default function AuthLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <div className="min-h-screen flex flex-col md:flex-row">
      {/* 左侧品牌区域 */}
      <div className="w-full md:w-1/2 bg-primary p-8 flex flex-col justify-between text-white">
        <div>
          <div className="mb-4">
            <Link href="/" className="text-xl font-bold flex items-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="mr-2"
              >
                <path d="M22 2 11 13"></path>
                <path d="m22 2-7 20-4-9-9-4 20-7z"></path>
              </svg>
              在线课程平台
            </Link>
          </div>
          <h1 className="text-3xl md:text-4xl font-bold mb-4">欢迎来到在线教育新时代</h1>
          <p className="text-lg mb-6">
            我们提供高质量的在线课程，帮助您在任何时间、任何地点拓展知识和技能。
          </p>
        </div>
        <div className="hidden md:block">
          <p className="text-sm">© {new Date().getFullYear()} 在线课程平台. 保留所有权利.</p>
        </div>
      </div>
      {/* 右侧表单区域 */}
      <div className="w-full md:w-1/2 p-8 flex items-center justify-center">
        <div className="w-full max-w-md">
          {children}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/(auth)/login/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { toast } from 'sonner';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { useAuthStore } from '@/stores/auth-store';
import authService from '@/services/auth';
import { Captcha } from '@/components/ui/captcha';
// 登录表单模式验证
const loginSchema = z.object({
  username: z.string().min(2, '用户名至少需要2个字符'),
  password: z.string().min(6, '密码至少需要6个字符'),
  captchaCode: z.string().min(4, '验证码格式不正确'),
});
// 类型推断
type LoginFormValues = z.infer<typeof loginSchema>;
export default function LoginPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const redirectTo = searchParams.get('redirectTo') || '/dashboard';
  const [captchaKey, setCaptchaKey] = useState('');
  const { login, isLoading, error, clearError } = useAuthStore();
  // 初始化表单
  const form = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      username: '',
      password: '',
      captchaCode: '',
    },
  });
  // 处理验证码Key变化
  const handleCaptchaKeyChange = (newCaptchaKey: string) => {
    console.log('登录页面：验证码Key已更新', newCaptchaKey);
    setCaptchaKey(newCaptchaKey);
  };
  // 提交表单
  const onSubmit = async (data: LoginFormValues) => {
    clearError();
    // 确保验证码Key存在
    if (!captchaKey) {
      console.error('验证码Key不存在，重新获取验证码');
      toast.error('验证码已失效，请点击验证码图片刷新');
      return;
    }
    console.log('表单提交，验证码信息：', {
      captchaCode: data.captchaCode,
      captchaKey: captchaKey,
    });
    try {
      // 将captchaKey添加到请求中
      await login({
        ...data,
        captchaKey,
      });
      toast.success('登录成功');
      router.push(redirectTo);
    } catch (error: any) {
      console.error('登录失败详情：', error);
      // 提取详细的错误信息
      const errorMessage = error.message || '未知错误';
      const errorCode = error.code || '未知错误码';
      console.error(`登录错误：${errorCode} - ${errorMessage}`);
      // 针对不同类型的错误提供特定提示
      if (errorMessage.includes('验证码')) {
        toast.error('验证码错误，请重新输入');
        // 自动刷新验证码
        const captchaElement = document.querySelector('.captcha-component') as HTMLElement;
        if (captchaElement) {
          captchaElement.click();
        }
      } else if (errorMessage.includes('会话') || errorMessage.includes('过期')) {
        toast.error('登录信息已过期，请重新尝试');
        // 清理可能存在的旧令牌
        localStorage.removeItem('token');
        localStorage.removeItem('refreshToken');
      } else if (errorMessage.includes('用户名') || errorMessage.includes('密码')) {
        toast.error('用户名或密码错误');
      } else {
        toast.error(`登录失败: ${errorMessage}`);
      }
    }
  };
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="text-2xl">登录</CardTitle>
        <CardDescription>
          输入您的用户名和密码登录账户
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            {error && (
              <div className="bg-destructive/10 text-destructive text-sm p-3 rounded-md">
                {error}
              </div>
            )}
            <FormField
              control={form.control}
              name="username"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>用户名</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入用户名" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>密码</FormLabel>
                  <FormControl>
                    <Input type="password" placeholder="请输入密码" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="captchaCode"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>验证码</FormLabel>
                  <div className="flex space-x-2">
                    <FormControl>
                      <Input placeholder="请输入验证码" {...field} />
                    </FormControl>
                    <Captcha onCaptchaKeyChange={handleCaptchaKeyChange} />
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit" className="w-full" disabled={isLoading}>
              {isLoading ? '登录中...' : '登录'}
            </Button>
          </form>
        </Form>
      </CardContent>
      <CardFooter className="flex justify-center">
        <p className="text-sm">
          还没有账号？{' '}
          <Link href="/register" className="text-primary hover:underline">
            注册新账户
          </Link>
        </p>
      </CardFooter>
    </Card>
  );
}
</file>

<file path="front/src/app/(auth)/register/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { toast } from 'sonner';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useAuthStore } from '@/stores/auth-store';
import authService from '@/services/auth';
import { Captcha } from '@/components/ui/captcha';
// 第一步表单：基本信息
const basicInfoSchema = z.object({
  username: z.string().min(4, '用户名至少需要4个字符').max(20, '用户名最多20个字符'),
  password: z.string().min(6, '密码至少需要6个字符').max(20, '密码最多20个字符'),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: '两次输入的密码不一致',
  path: ['confirmPassword'],
});
// 第二步表单：邮箱验证
const emailVerifySchema = z.object({
  email: z.string().email('请输入有效的邮箱地址'),
  captchaCode: z.string().min(4, '验证码格式不正确'),
  emailCode: z.string().length(6, '邮箱验证码必须是6位数字'),
});
// 类型推断
type BasicInfoFormValues = z.infer<typeof basicInfoSchema>;
type EmailVerifyFormValues = z.infer<typeof emailVerifySchema>;
export default function RegisterPage() {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState<string>("basic-info");
  const [captchaKey, setCaptchaKey] = useState<string>('');
  const [username, setUsername] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [codeSent, setCodeSent] = useState<boolean>(false);
  const [countdown, setCountdown] = useState<number>(0);
  const { register: registerUser, sendEmailVerificationCode, isLoading, error, clearError } = useAuthStore();
  // 第一步表单
  const basicInfoForm = useForm<BasicInfoFormValues>({
    resolver: zodResolver(basicInfoSchema),
    defaultValues: {
      username: '',
      password: '',
      confirmPassword: '',
    },
  });
  // 第二步表单
  const emailVerifyForm = useForm<EmailVerifyFormValues>({
    resolver: zodResolver(emailVerifySchema),
    defaultValues: {
      email: '',
      captchaCode: '',
      emailCode: '',
    },
  });
  // 处理验证码Key变化
  const handleCaptchaKeyChange = (newCaptchaKey: string) => {
    console.log('注册页面：验证码Key已更新', newCaptchaKey);
    setCaptchaKey(newCaptchaKey);
  };
  // 处理基本信息提交
  const onBasicInfoSubmit = (data: BasicInfoFormValues) => {
    clearError();
    // 保存用户名和密码
    setUsername(data.username);
    setPassword(data.password);
    // 切换到第二步
    setActiveTab("email-verify");
  };
  // 发送邮箱验证码
  const onSendEmailCode = async () => {
    clearError();
    const email = emailVerifyForm.getValues('email');
    const captchaCode = emailVerifyForm.getValues('captchaCode');
    // 验证邮箱和验证码
    const emailResult = z.string().email('请输入有效的邮箱地址').safeParse(email);
    const captchaResult = z.string().min(4, '验证码格式不正确').safeParse(captchaCode);
    if (!emailResult.success) {
      emailVerifyForm.setError('email', { message: emailResult.error.errors[0].message });
      return;
    }
    if (!captchaResult.success) {
      emailVerifyForm.setError('captchaCode', { message: captchaResult.error.errors[0].message });
      return;
    }
    // 确保验证码Key存在
    if (!captchaKey) {
      console.error('验证码Key不存在，重新获取验证码');
      toast.error('验证码已失效，请点击验证码图片刷新');
      return;
    }
    try {
      await sendEmailVerificationCode({
        email,
        captchaCode,
        captchaKey,
      });
      toast.success('验证码已发送到您的邮箱，请查收');
      setCodeSent(true);
      setCountdown(60); // 设置60秒倒计时
    } catch (error: any) {
      console.error('发送邮箱验证码失败：', error);
      // 针对验证码错误提供特定提示
      if (error.message?.includes('验证码')) {
        toast.error('验证码错误，请重新输入');
      } else {
        toast.error(error.message || '发送验证码失败，请重试');
      }
    }
  };
  // 注册提交
  const onRegisterSubmit = async (data: EmailVerifyFormValues) => {
    clearError();
    if (!username || !password) {
      toast.error('请先填写基本信息');
      setActiveTab("basic-info");
      return;
    }
    try {
      // 将所有信息合并到注册请求中
      await registerUser({
        username,
        password,
        confirmPassword: password,
        email: data.email,
        captchaKey,
        captchaCode: data.captchaCode,
        emailCode: data.emailCode,
      });
      toast.success('注册成功，请登录');
      router.push('/login');
    } catch (error: any) {
      console.error('注册失败：', error);
      toast.error(error.message || '注册失败，请重试');
    }
  };
  // 倒计时效果
  useEffect(() => {
    if (countdown > 0) {
      const timer = setInterval(() => {
        setCountdown(prev => prev - 1);
      }, 1000);
      return () => clearInterval(timer);
    } else if (countdown === 0 && codeSent) {
      setCodeSent(false);
    }
  }, [countdown, codeSent]);
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="text-2xl">注册账号</CardTitle>
        <CardDescription>
          创建您的账户以开始使用在线课程平台
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-2 mb-6">
            <TabsTrigger value="basic-info">基本信息</TabsTrigger>
            <TabsTrigger value="email-verify" disabled={!username || !password}>邮箱验证</TabsTrigger>
          </TabsList>
          <TabsContent value="basic-info">
            <Form {...basicInfoForm}>
              <form onSubmit={basicInfoForm.handleSubmit(onBasicInfoSubmit)} className="space-y-4">
                {error && (
                  <div className="bg-destructive/10 text-destructive text-sm p-3 rounded-md">
                    {error}
                  </div>
                )}
                <FormField
                  control={basicInfoForm.control}
                  name="username"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>用户名</FormLabel>
                      <FormControl>
                        <Input placeholder="请输入用户名" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={basicInfoForm.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>密码</FormLabel>
                      <FormControl>
                        <Input type="password" placeholder="请输入密码" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={basicInfoForm.control}
                  name="confirmPassword"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>确认密码</FormLabel>
                      <FormControl>
                        <Input type="password" placeholder="请再次输入密码" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button type="submit" className="w-full">
                  下一步
                </Button>
              </form>
            </Form>
          </TabsContent>
          <TabsContent value="email-verify">
            <Form {...emailVerifyForm}>
              <form onSubmit={emailVerifyForm.handleSubmit(onRegisterSubmit)} className="space-y-4">
                {error && (
                  <div className="bg-destructive/10 text-destructive text-sm p-3 rounded-md">
                    {error}
                  </div>
                )}
                {username && password && (
                  <div className="bg-muted/50 p-3 rounded-md mb-4">
                    <p className="text-sm text-muted-foreground">用户名: <span className="font-medium">{username}</span></p>
                  </div>
                )}
                <FormField
                  control={emailVerifyForm.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>电子邮件</FormLabel>
                      <FormControl>
                        <Input type="email" placeholder="请输入邮箱地址" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={emailVerifyForm.control}
                  name="captchaCode"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>验证码</FormLabel>
                      <div className="flex space-x-2">
                        <FormControl>
                          <Input placeholder="请输入验证码" {...field} />
                        </FormControl>
                        <Captcha onCaptchaKeyChange={handleCaptchaKeyChange} />
                      </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button 
                  type="button" 
                  variant="outline" 
                  className="w-full" 
                  onClick={onSendEmailCode}
                  disabled={isLoading || codeSent}
                >
                  {isLoading ? '发送中...' : codeSent ? `重新发送(${countdown}s)` : '发送验证码'}
                </Button>
                <FormField
                  control={emailVerifyForm.control}
                  name="emailCode"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>邮箱验证码</FormLabel>
                      <FormControl>
                        <Input placeholder="请输入邮箱验证码" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button type="submit" className="w-full" disabled={isLoading || !codeSent}>
                  {isLoading ? '注册中...' : '完成注册'}
                </Button>
                <Button 
                  type="button" 
                  variant="ghost" 
                  className="w-full" 
                  onClick={() => setActiveTab("basic-info")}
                >
                  返回上一步
                </Button>
              </form>
            </Form>
          </TabsContent>
        </Tabs>
      </CardContent>
      <CardFooter className="flex flex-col items-center justify-center space-y-4">
        <div className="text-sm text-muted-foreground">
          已有账号？ <Link href="/login" className="text-primary hover:underline">立即登录</Link>
        </div>
        <div className="w-full border-t pt-4">
          <div className="text-sm text-center">
            如需创建机构账号或申请机构入驻，请前往 
            <Link href="/institution" className="text-primary hover:underline">机构中心</Link>
          </div>
        </div>
      </CardFooter>
    </Card>
  );
}
</file>

<file path="front/src/app/(dashboard)/(course-manager)/questions/components/QuestionDetailForm.tsx">
import React, { useEffect, useState } from 'react';
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";
import { toast } from "sonner";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from '@/components/ui/textarea';
import { MultiSelect } from '@/components/ui/multi-select';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Checkbox } from '@/components/ui/checkbox';
import { QuestionType } from './QuestionList';
// 表单验证Schema
const QuestionFormSchema = z.object({
  content: z.string().min(1, "问题内容不能为空"),
  level: z.enum(["EASY", "MEDIUM", "HARD"]),
  type: z.enum(["SINGLE_CHOICE", "MULTIPLE_CHOICE", "TRUE_FALSE", "FILL_BLANK", "SHORT_ANSWER"]),
  answer: z.string(),
  options: z.string().optional(),
  tagIds: z.array(z.number()).optional(),
});
// 表单字段的描述文本
const questionLevelNames = {
  EASY: "简单",
  MEDIUM: "中等",
  HARD: "困难",
};
const questionTypeNames = {
  SINGLE_CHOICE: "单选题",
  MULTIPLE_CHOICE: "多选题",
  TRUE_FALSE: "判断题",
  FILL_BLANK: "填空题",
  SHORT_ANSWER: "简答题",
};
// 属性类型定义
export interface Question {
  id: string;
  content: string;
  level: "EASY" | "MEDIUM" | "HARD";
  type: QuestionType;
  answer: string;
  options?: string;
  tagIds?: number[];
  institutionId?: string;
  createdAt?: string;
  updatedAt?: string;
}
type QuestionDetailFormProps = {
  question?: Question; // 现有问题数据，用于编辑
  onSubmit: (data: any) => void; // 提交回调
  isLoading?: boolean; // 加载状态
  tags?: Array<{ id: number; name: string }>; // 可选标签
  setDebugInfo?: (info: any) => void; // 用于调试
  institutionId?: string; // 机构ID
  backToCourseDetail?: boolean; // 是否返回课程详情页
  isExpanded?: boolean; // 是否展开编辑区域
};
export function QuestionDetailForm({ 
  question,
  onSubmit,
  isLoading = false,
  tags = [],
  setDebugInfo,
  institutionId,
  backToCourseDetail = false,
  isExpanded = true,
}: QuestionDetailFormProps) {
  // 将标签数据转换为MultiSelect所需格式
  const tagOptions = tags.map(tag => ({
    label: tag.name,
    value: tag.id,
  }));
  // 为options字段添加一个本地状态以处理JSON转换
  const [optionsArray, setOptionsArray] = useState<string[]>([]);
  // 添加选项选择状态（用于单选题）
  const [selectedOptionIndex, setSelectedOptionIndex] = useState<number>(-1);
  // 添加选项多选状态（用于多选题）
  const [selectedOptionIndices, setSelectedOptionIndices] = useState<number[]>([]);
  // 准备默认值，确保tagIds是数组类型
  const defaultValues = {
    content: question?.content || "",
    level: question?.level || "MEDIUM",
    type: question?.type || "SINGLE_CHOICE",
    answer: question?.answer || "",
    options: question?.options || "",
    tagIds: question?.tagIds || [],
  };
  // 创建表单实例
  const form = useForm<z.infer<typeof QuestionFormSchema>>({
    resolver: zodResolver(QuestionFormSchema),
    defaultValues,
  });
  // 将调试信息移至useEffect中，避免在渲染期间调用setState
  useEffect(() => {
    if (setDebugInfo) {
      setDebugInfo({
        formValues: form.getValues(),
        question,
        watchedValues: {
          content: form.watch("content"),
          level: form.watch("level"),
          type: form.watch("type"),
          answer: form.watch("answer"),
          options: form.watch("options"),
          tagIds: form.watch("tagIds"),
        }
      });
    }
  }, [form, question, setDebugInfo]);
  // 监听问题类型变化，处理选项格式
  useEffect(() => {
    const type = form.watch("type");
    const currentOptions = form.getValues("options");
    try {
      // 尝试解析选项JSON
      if (currentOptions) {
        const parsedOptions = JSON.parse(currentOptions);
        setOptionsArray(parsedOptions);
        // 对于单选题，设置已选择的选项
        if (type === "SINGLE_CHOICE" && question?.answer) {
          const answerIndex = parseInt(question.answer, 10);
          if (!isNaN(answerIndex)) {
            setSelectedOptionIndex(answerIndex);
          }
        }
        // 对于多选题，设置已选择的选项
        if (type === "MULTIPLE_CHOICE" && question?.answer) {
          try {
            const selectedIndices = question.answer.split(',').map(index => parseInt(index.trim(), 10));
            if (selectedIndices.every(index => !isNaN(index))) {
              setSelectedOptionIndices(selectedIndices);
            }
          } catch (e) {
            setSelectedOptionIndices([]);
          }
        }
      } else {
        setOptionsArray([]);
        setSelectedOptionIndex(-1);
        setSelectedOptionIndices([]);
      }
    } catch (e) {
      // 如果解析失败，设置为空数组
      setOptionsArray([]);
      setSelectedOptionIndex(-1);
      setSelectedOptionIndices([]);
    }
  }, [form.watch("type"), form.getValues("options"), question?.answer]);
  // 当初始问题数据更新时，更新表单默认值
  useEffect(() => {
    if (question) {
      form.reset({
        content: question.content || "",
        level: question.level || "MEDIUM",
        type: question.type || "SINGLE_CHOICE",
        answer: question.answer || "",
        options: question.options || "",
        tagIds: question.tagIds || [],
      });
      try {
        if (question.options) {
          const parsedOptions = JSON.parse(question.options);
          setOptionsArray(parsedOptions);
          // 对于单选题，设置已选择的选项
          if (question.type === "SINGLE_CHOICE" && question.answer) {
            const answerIndex = parseInt(question.answer, 10);
            if (!isNaN(answerIndex)) {
              setSelectedOptionIndex(answerIndex);
            }
          }
          // 对于多选题，设置已选择的选项
          if (question.type === "MULTIPLE_CHOICE" && question.answer) {
            try {
              const selectedIndices = question.answer.split(',').map(index => parseInt(index.trim(), 10));
              if (selectedIndices.every(index => !isNaN(index))) {
                setSelectedOptionIndices(selectedIndices);
              }
            } catch (e) {
              setSelectedOptionIndices([]);
            }
          }
        }
      } catch (e) {
        setOptionsArray([]);
      }
    }
  }, [question, form]);
  // 处理单选题选项变更
  const handleSingleOptionChange = (index: number) => {
    setSelectedOptionIndex(index);
    form.setValue("answer", index.toString());
  };
  // 处理多选题选项变更
  const handleMultipleOptionChange = (index: number, checked: boolean) => {
    let newIndices = [...selectedOptionIndices];
    if (checked) {
      // 添加索引，如果不存在
      if (!newIndices.includes(index)) {
        newIndices.push(index);
      }
    } else {
      // 移除索引
      newIndices = newIndices.filter(i => i !== index);
    }
    // 排序以保持一致顺序
    newIndices.sort((a, b) => a - b);
    setSelectedOptionIndices(newIndices);
    form.setValue("answer", newIndices.join(','));
  };
  // 处理选项变更
  const handleOptionChange = (index: number, value: string) => {
    const newOptions = [...optionsArray];
    newOptions[index] = value;
    setOptionsArray(newOptions);
    form.setValue("options", JSON.stringify(newOptions));
  };
  // 添加新选项
  const addOption = () => {
    const newOptions = [...optionsArray, ""];
    setOptionsArray(newOptions);
    form.setValue("options", JSON.stringify(newOptions));
  };
  // 删除选项
  const removeOption = (index: number) => {
    const newOptions = optionsArray.filter((_, i) => i !== index);
    setOptionsArray(newOptions);
    form.setValue("options", JSON.stringify(newOptions));
    // 更新选择的选项索引
    if (form.watch("type") === "SINGLE_CHOICE") {
      if (selectedOptionIndex === index) {
        setSelectedOptionIndex(-1);
        form.setValue("answer", "");
      } else if (selectedOptionIndex > index) {
        // 调整索引，因为前面的选项被删除了
        setSelectedOptionIndex(selectedOptionIndex - 1);
        form.setValue("answer", (selectedOptionIndex - 1).toString());
      }
    } else if (form.watch("type") === "MULTIPLE_CHOICE") {
      let newIndices = selectedOptionIndices.filter(i => i !== index)
        .map(i => i > index ? i - 1 : i);
      setSelectedOptionIndices(newIndices);
      form.setValue("answer", newIndices.join(','));
    }
  };
  // 处理标签选择变更，避免无限循环渲染
  const handleTagChange = (selected: (number | string)[]) => {
    // 确保所有值都是数字类型
    const numericValues = selected.map(val => typeof val === 'string' ? parseInt(val, 10) : val);
    form.setValue("tagIds", numericValues);
  };
  // 表单提交处理
  const onSubmitForm = (values: z.infer<typeof QuestionFormSchema>) => {
    try {
      console.log("提交表单", values);
      // 检查选项格式
      if ((values.type === "SINGLE_CHOICE" || values.type === "MULTIPLE_CHOICE") 
           && (!values.options || values.options === "[]")) {
        toast.error("请添加选项");
        return;
      }
      // 检查答案是否已选择
      if (values.type === "SINGLE_CHOICE" && selectedOptionIndex === -1) {
        toast.error("请选择正确答案");
        return;
      }
      if (values.type === "MULTIPLE_CHOICE" && selectedOptionIndices.length === 0) {
        toast.error("请至少选择一个正确答案");
        return;
      }
      // 如果问题存在，保留其ID和创建时间
      const finalData = {
        ...values,
        id: question?.id,
        createdAt: question?.createdAt,
        // 确保提交时包含机构ID
        institutionId: institutionId || question?.institutionId,
        // 保持type不变，编辑时不允许修改问题类型
        type: question?.id ? question.type : values.type,
      };
      onSubmit(finalData);
    } catch (error) {
      console.error("提交表单时出错:", error);
      toast.error("提交表单时出错");
    }
  };
  // 渲染选项列表（单选题和多选题）
  const renderOptions = () => {
    const questionType = form.watch("type");
    if (questionType === "SINGLE_CHOICE") {
      return (
        <FormItem className="space-y-4">
          <FormLabel>选项与答案</FormLabel>
          <RadioGroup 
            value={selectedOptionIndex.toString()} 
            onValueChange={(value) => handleSingleOptionChange(parseInt(value, 10))}
          >
            {optionsArray.map((option, index) => (
              <div key={index} className="flex items-center space-x-2 mb-2">
                <RadioGroupItem value={index.toString()} id={`option-${index}`} />
                <Input
                  value={option}
                  onChange={(e) => handleOptionChange(index, e.target.value)}
                  placeholder={`选项 ${index + 1}`}
                  className="flex-1"
                />
                <Button 
                  type="button"
                  variant="destructive"
                  size="sm"
                  onClick={() => removeOption(index)}
                >
                  删除
                </Button>
              </div>
            ))}
          </RadioGroup>
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={addOption}
            className="mt-2"
          >
            添加选项
          </Button>
          <FormDescription>
            选择单选钮表示该选项为正确答案
          </FormDescription>
        </FormItem>
      );
    } else if (questionType === "MULTIPLE_CHOICE") {
      return (
        <FormItem className="space-y-4">
          <FormLabel>选项与答案</FormLabel>
          <div className="space-y-2">
            {optionsArray.map((option, index) => (
              <div key={index} className="flex items-center space-x-2 mb-2">
                <Checkbox 
                  id={`option-${index}`}
                  checked={selectedOptionIndices.includes(index)}
                  onCheckedChange={(checked) => 
                    handleMultipleOptionChange(index, checked === true)
                  }
                />
                <Input
                  value={option}
                  onChange={(e) => handleOptionChange(index, e.target.value)}
                  placeholder={`选项 ${index + 1}`}
                  className="flex-1"
                />
                <Button 
                  type="button"
                  variant="destructive"
                  size="sm"
                  onClick={() => removeOption(index)}
                >
                  删除
                </Button>
              </div>
            ))}
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={addOption}
              className="mt-2"
            >
              添加选项
            </Button>
          </div>
          <FormDescription>
            勾选复选框表示该选项为正确答案，可多选
          </FormDescription>
        </FormItem>
      );
    }
    return null;
  };
  // 渲染不同类型问题的答案输入区域
  const renderAnswerField = () => {
    const questionType = form.watch("type");
    // 单选题和多选题的答案在选项中处理
    if (questionType === "SINGLE_CHOICE" || questionType === "MULTIPLE_CHOICE") {
      return null;
    }
    switch (questionType) {
      case "TRUE_FALSE":
        return (
          <FormField
            control={form.control}
            name="answer"
            render={({ field }) => (
              <FormItem>
                <FormLabel>正确答案</FormLabel>
                <Select
                  onValueChange={field.onChange}
                  defaultValue={field.value}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="选择正确答案" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="true">正确</SelectItem>
                    <SelectItem value="false">错误</SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />
        );
      case "FILL_BLANK":
      case "SHORT_ANSWER":
      default:
        return (
          <FormField
            control={form.control}
            name="answer"
            render={({ field }) => (
              <FormItem>
                <FormLabel>参考答案</FormLabel>
                <FormControl>
                  <Textarea 
                    placeholder="输入参考答案" 
                    {...field} 
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        );
    }
  };
  // 返回表单UI
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmitForm)} className="space-y-4">
        {/* 如果是已展开状态，显示更紧凑的表单 */}
        {isExpanded ? (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-4 md:col-span-2">
              <FormField
                control={form.control}
                name="content"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>问题内容</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="输入问题内容"
                        {...field}
                        className="min-h-20"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <FormField
              control={form.control}
              name="level"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>难度级别</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="选择难度级别" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {Object.entries(questionLevelNames).map(([value, label]) => (
                        <SelectItem key={value} value={value}>
                          {label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="type"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>问题类型</FormLabel>
                  <Select
                    onValueChange={field.onChange}
                    defaultValue={field.value}
                    disabled={!!question?.id} // 编辑模式下不允许修改问题类型
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="选择问题类型" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {Object.entries(questionTypeNames).map(([value, label]) => (
                        <SelectItem key={value} value={value}>
                          {label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormDescription>
                    {question?.id && "编辑模式下不能修改问题类型"}
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="md:col-span-2">
              {renderOptions()}
              {renderAnswerField()}
            </div>
            <div className="md:col-span-2">
              <FormField
                control={form.control}
                name="tagIds"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>标签</FormLabel>
                    <FormControl>
                      <MultiSelect
                        options={tagOptions}
                        selected={field.value as number[]}
                        onValueChange={handleTagChange}
                        placeholder="选择标签"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
          </div>
        ) : (
          // 简洁版表单，仅包含基本字段
          <div className="space-y-2">
            <FormField
              control={form.control}
              name="content"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>问题内容</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="输入问题内容"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="grid grid-cols-2 gap-2">
              <FormField
                control={form.control}
                name="level"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>难度</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="选择难度" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {Object.entries(questionLevelNames).map(([value, label]) => (
                          <SelectItem key={value} value={value}>
                            {label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="type"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>类型</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                      disabled={!!question?.id} // 编辑模式下不允许修改
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="选择类型" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {Object.entries(questionTypeNames).map(([value, label]) => (
                          <SelectItem key={value} value={value}>
                            {label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
          </div>
        )}
        <div className="flex justify-end space-x-2">
          <Button
            type="submit"
            disabled={isLoading}
            className="bg-primary hover:bg-primary/90"
          >
            {isLoading ? "保存中..." : (question?.id ? "更新问题" : "创建问题")}
          </Button>
        </div>
      </form>
    </Form>
  );
}
</file>

<file path="front/src/app/(dashboard)/(course-manager)/questions/components/QuestionList.tsx">
import React, { useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { Edit, ChevronDown, ChevronUp, Trash } from 'lucide-react';
import { toast } from 'sonner';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { MultiSelect } from '@/components/ui/multi-select';
import { QuestionDetailForm, Question } from './QuestionDetailForm';
// 问题类型定义
export type QuestionType = 
  | "SINGLE_CHOICE" 
  | "MULTIPLE_CHOICE" 
  | "TRUE_FALSE" 
  | "FILL_BLANK" 
  | "SHORT_ANSWER";
// 临时定义 questionTypeNames 对象
const questionTypeNames: Record<QuestionType, string> = {
  "SINGLE_CHOICE": "单选题",
  "MULTIPLE_CHOICE": "多选题",
  "TRUE_FALSE": "判断题",
  "FILL_BLANK": "填空题",
  "SHORT_ANSWER": "简答题"
};
// 组件属性类型定义
interface QuestionListProps {
  questions: Question[]; // 问题列表
  onDeleteQuestion?: (id: string) => Promise<void>; // 删除问题的回调
  onUpdateQuestion?: (data: any) => Promise<void>; // 更新问题的回调
  tags?: Array<{ id: number; name: string }>; // 可用标签列表
  onRefresh?: () => void; // 刷新数据的回调
  institutionId?: string; // 机构ID
  courseId?: string; // 课程ID
  // 分页相关
  currentPage?: number;
  totalPages?: number;
  onPageChange?: (page: number) => void;
}
export function QuestionList({
  questions = [],
  onDeleteQuestion,
  onUpdateQuestion,
  tags = [],
  onRefresh,
  institutionId,
  courseId,
  currentPage = 1,
  totalPages = 1,
  onPageChange,
}: QuestionListProps) {
  const router = useRouter();
  // 展开状态记录
  const [expandedQuestionId, setExpandedQuestionId] = useState<string | null>(null);
  // 删除对话框状态
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [questionToDelete, setQuestionToDelete] = useState<string | null>(null);
  // 调试信息
  const [debugInfo, setDebugInfo] = useState<any>(null);
  // 标签过滤
  const [selectedTagIds, setSelectedTagIds] = useState<number[]>([]);
  // 记录更新中的问题ID
  const [updatingQuestionId, setUpdatingQuestionId] = useState<string | null>(null);
  // 转换标签为选项格式
  const tagOptions = tags.map(tag => ({
    label: tag.name,
    value: tag.id,
  }));
  // 切换问题展开状态
  const toggleExpanded = (questionId: string) => {
    if (expandedQuestionId === questionId) {
      setExpandedQuestionId(null);
    } else {
      setExpandedQuestionId(questionId);
    }
  };
  // 处理删除问题
  const handleDelete = async (id: string) => {
    try {
      if (onDeleteQuestion) {
        await onDeleteQuestion(id);
        toast.success("问题删除成功");
        // 如果删除的是当前展开的问题，重置展开状态
        if (expandedQuestionId === id) {
          setExpandedQuestionId(null);
        }
        // 刷新数据
        if (onRefresh) {
          onRefresh();
        }
      }
    } catch (error) {
      toast.error("删除问题失败");
      console.error("删除问题时出错:", error);
    } finally {
      setDeleteDialogOpen(false);
      setQuestionToDelete(null);
    }
  };
  // 确认删除前设置要删除的问题ID
  const confirmDelete = (id: string) => {
    setQuestionToDelete(id);
    setDeleteDialogOpen(true);
  };
  // 处理问题更新
  const handleUpdateQuestion = async (data: any) => {
    try {
      if (onUpdateQuestion) {
        setUpdatingQuestionId(data.id); // 设置更新中的问题ID
        // 确保包含机构ID
        const dataWithInstitutionId = {
          ...data,
          institutionId: institutionId || data.institutionId,
        };
        console.log("准备更新问题：", dataWithInstitutionId);
        await onUpdateQuestion(dataWithInstitutionId);
        console.log("问题更新成功");
        toast.success("问题更新成功");
        // 更新后折叠表单
        setExpandedQuestionId(null);
        // 刷新数据
        if (onRefresh) {
          onRefresh();
        }
      } else {
        console.error("未提供问题更新回调函数");
        toast.error("更新功能未实现");
      }
    } catch (error) {
      console.error("更新问题时出错:", error);
      toast.error("更新问题失败");
    } finally {
      setUpdatingQuestionId(null); // 重置更新中的问题ID
    }
  };
  // 处理标签选择变更，避免无限循环渲染
  const handleTagChange = (selected: (number | string)[]) => {
    // 确保所有值都是数字类型
    const numericValues = selected.map(val => typeof val === 'string' ? parseInt(val, 10) : val) as number[];
    setSelectedTagIds(numericValues);
  };
  // 根据选中的标签过滤问题
  const filteredQuestions = selectedTagIds.length > 0
    ? questions.filter(question => 
        question.tagIds && 
        question.tagIds.some((tagId: number) => selectedTagIds.includes(tagId))
      )
    : questions;
  // 获取问题对应的标签名称
  const getTagNames = (question: Question) => {
    if (!question.tagIds || !Array.isArray(question.tagIds)) return [] as string[];
    return question.tagIds
      .map((tagId: number) => tags.find(tag => tag.id === tagId)?.name)
      .filter((name): name is string => name !== undefined);
  };
  // 渲染分页控件
  const renderPagination = () => {
    if (!onPageChange || totalPages <= 1) return null;
    const pageItems = [];
    // 决定显示哪些页码
    const startPage = Math.max(1, currentPage - 2);
    const endPage = Math.min(totalPages, currentPage + 2);
    // 添加首页
    if (startPage > 1) {
      pageItems.push(
        <PaginationItem key="first">
          <PaginationLink onClick={() => onPageChange(1)}>
            1
          </PaginationLink>
        </PaginationItem>
      );
      // 添加省略号
      if (startPage > 2) {
        pageItems.push(
          <PaginationItem key="ellipsis-start">
            <PaginationEllipsis />
          </PaginationItem>
        );
      }
    }
    // 添加中间页码
    for (let i = startPage; i <= endPage; i++) {
      pageItems.push(
        <PaginationItem key={i}>
          <PaginationLink 
            isActive={currentPage === i}
            onClick={() => onPageChange(i)}
          >
            {i}
          </PaginationLink>
        </PaginationItem>
      );
    }
    // 添加末页
    if (endPage < totalPages) {
      // 添加省略号
      if (endPage < totalPages - 1) {
        pageItems.push(
          <PaginationItem key="ellipsis-end">
            <PaginationEllipsis />
          </PaginationItem>
        );
      }
      pageItems.push(
        <PaginationItem key="last">
          <PaginationLink onClick={() => onPageChange(totalPages)}>
            {totalPages}
          </PaginationLink>
        </PaginationItem>
      );
    }
    return (
      <Pagination className="mt-4">
        <PaginationContent>
          {currentPage > 1 ? (
            <PaginationItem>
              <PaginationPrevious onClick={() => onPageChange(currentPage - 1)} />
            </PaginationItem>
          ) : (
            <PaginationItem className="opacity-50 pointer-events-none">
              <span className="flex h-9 items-center justify-center whitespace-nowrap rounded-md border border-input px-3">
                上一页
              </span>
            </PaginationItem>
          )}
          {pageItems}
          {currentPage < totalPages ? (
            <PaginationItem>
              <PaginationNext onClick={() => onPageChange(currentPage + 1)} />
            </PaginationItem>
          ) : (
            <PaginationItem className="opacity-50 pointer-events-none">
              <span className="flex h-9 items-center justify-center whitespace-nowrap rounded-md border border-input px-3">
                下一页
              </span>
            </PaginationItem>
          )}
        </PaginationContent>
      </Pagination>
    );
  };
  // 主渲染部分
  return (
    <div className="space-y-4">
      {/* 标签过滤器 */}
      {tags.length > 0 && (
        <div className="mb-4">
          <label className="text-sm font-medium mb-1 block">按标签过滤:</label>
          <MultiSelect
            options={tagOptions}
            selected={selectedTagIds}
            onValueChange={handleTagChange}
            placeholder="选择标签进行过滤"
          />
        </div>
      )}
      {/* 问题列表 */}
      {filteredQuestions.length > 0 ? (
        <div className="space-y-4">
          {filteredQuestions.map((question) => (
            <div
              key={question.id}
              className="border rounded-lg p-4 shadow-sm bg-card hover:shadow-md transition-shadow"
            >
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-2 mb-2">
                    <Badge variant="outline">{questionTypeNames[question.type]}</Badge>
                    <Badge variant={
                      question.level === "EASY" ? "secondary" :
                      question.level === "MEDIUM" ? "default" : "destructive"
                    }>
                      {question.level === "EASY" ? "简单" :
                       question.level === "MEDIUM" ? "中等" : "困难"}
                    </Badge>
                    {/* 显示问题标签 */}
                    {getTagNames(question).map((tagName, index) => (
                      <Badge key={`${question.id}-tag-${index}`} variant="outline">
                        {tagName}
                      </Badge>
                    ))}
                  </div>
                  <h3 className="text-lg font-semibold mb-2 line-clamp-2">
                    {question.content}
                  </h3>
                </div>
                {/* 操作按钮 */}
                <div className="flex items-center space-x-2 ml-4">
                  {/* 编辑按钮 - 切换展开状态 */}
                  <Button
                    onClick={() => toggleExpanded(question.id)}
                    variant="outline"
                    size="icon"
                    className="hover:bg-secondary"
                  >
                    {expandedQuestionId === question.id ? (
                      <ChevronUp className="h-4 w-4" />
                    ) : (
                      <ChevronDown className="h-4 w-4" />
                    )}
                  </Button>
                  {/* 编辑页面链接 */}
                  <Button
                    variant="outline"
                    size="icon"
                    asChild
                    className="hover:bg-secondary"
                  >
                    <Link href={`/questions/${question.id}/edit${courseId ? `?courseId=${courseId}` : ''}`}>
                      <Edit className="h-4 w-4" />
                    </Link>
                  </Button>
                  {/* 删除按钮 */}
                  {onDeleteQuestion && (
                    <Button
                      onClick={() => confirmDelete(question.id)}
                      variant="outline"
                      size="icon"
                      className="hover:bg-destructive hover:text-destructive-foreground"
                    >
                      <Trash className="h-4 w-4" />
                    </Button>
                  )}
                </div>
              </div>
              {/* 展开的编辑表单 */}
              {expandedQuestionId === question.id && (
                <div className="mt-4 border-t pt-4">
                  <QuestionDetailForm
                    question={question}
                    onSubmit={handleUpdateQuestion}
                    isLoading={updatingQuestionId === question.id}
                    tags={tags}
                    setDebugInfo={setDebugInfo}
                    institutionId={institutionId}
                    isExpanded={true}
                  />
                </div>
              )}
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-10 text-muted-foreground">
          没有找到匹配的问题
        </div>
      )}
      {/* 分页控件 */}
      {renderPagination()}
      {/* 删除确认对话框 */}
      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>确认删除</AlertDialogTitle>
            <AlertDialogDescription>
              您确定要删除这个问题吗？此操作无法撤销。
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>取消</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => questionToDelete && handleDelete(questionToDelete)}
            >
              删除
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/course-detail/[id]/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Separator } from '@/components/ui/separator';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Badge } from '@/components/ui/badge';
import { 
  ChevronLeft, 
  AlertCircle, 
  BookOpen, 
  Clock, 
  Star, 
  Users, 
  ChevronRight,
  Info,
  Heart,
  HeartOff
} from 'lucide-react';
import courseService from '@/services/course-service';
import { toast } from 'sonner';
import { CourseStructureVO, SectionVO, CoursePaymentType, Section } from '@/types/course';
import { ReviewContentPlayer } from '@/components/dashboard/reviews/review-content-player';
import { formatDate } from '@/lib/utils';
import { ScrollArea } from '@/components/ui/scroll-area';
import favoriteService from '@/services/favorite-service';
// 将SectionVO转换为Section
function convertSectionVOToSection(sectionVO: SectionVO, chapterId: number): Section {
  return {
    ...sectionVO,
    orderIndex: sectionVO.order,
    contentType: sectionVO.resourceTypeDiscriminator === 'MEDIA' ? 'video' : 'text',
    chapterId: chapterId,
    chapterTitle: undefined,
    accessType: sectionVO.accessType,
    estimatedMinutes: sectionVO.duration ? Math.round(sectionVO.duration / 60) : undefined,
    resourceTypeDiscriminator: sectionVO.resourceTypeDiscriminator,
    mediaId: sectionVO.mediaId,
    questionGroupId: sectionVO.questionGroupId,
    media: undefined,
    questionGroup: undefined,
    randomOrder: undefined,
    orderByDifficulty: undefined,
    showAnalysis: undefined,
    resources: undefined,
    questionGroups: undefined,
    createdTime: undefined,
    updatedTime: undefined
  };
}
export default function CourseDetailPage() {
  const params = useParams();
  const router = useRouter();
  const courseId = Number(params.id);
  // 状态管理
  const [course, setCourse] = useState<CourseStructureVO | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedChapterId, setSelectedChapterId] = useState<number | null>(null);
  const [selectedSectionId, setSelectedSectionId] = useState<number | null>(null);
  const [selectedSection, setSelectedSection] = useState<SectionVO | null>(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [expandedChapters, setExpandedChapters] = useState<Set<number>>(new Set());
  const [isFavorite, setIsFavorite] = useState<boolean>(false);
  const [favoritesLoading, setFavoritesLoading] = useState<boolean>(false);
  // 加载课程结构数据
  useEffect(() => {
    const loadCourseData = async () => {
      if (!courseId) return;
      try {
        setLoading(true);
        setError(null);
        // 获取课程结构数据
        const data = await courseService.getPublicCourseStructure(courseId);
        setCourse(data);
        // 默认选择第一章节和小节
        if (data.chapters && data.chapters.length > 0) {
          const firstChapter = data.chapters[0];
          setSelectedChapterId(firstChapter.id);
          if (firstChapter.sections && firstChapter.sections.length > 0) {
            const firstSection = firstChapter.sections[0];
            setSelectedSectionId(firstSection.id);
            setSelectedSection(firstSection);
          }
        }
      } catch (err: any) {
        console.error('加载课程数据失败:', err);
        setError(err.message || '加载课程数据失败');
        toast.error('加载课程数据失败');
      } finally {
        setLoading(false);
      }
    };
    loadCourseData();
  }, [courseId]);
  // 检查是否已收藏
  useEffect(() => {
    const checkFavorite = async () => {
      if (!courseId) return;
      try {
        setFavoritesLoading(true);
        const isFavorited = await favoriteService.checkFavorite(courseId);
        setIsFavorite(isFavorited);
      } catch (err) {
        console.error('检查收藏状态失败:', err);
      } finally {
        setFavoritesLoading(false);
      }
    };
    checkFavorite();
  }, [courseId]);
  // 处理收藏/取消收藏
  const handleToggleFavorite = async () => {
    if (!courseId) return;
    try {
      setFavoritesLoading(true);
      if (isFavorite) {
        await favoriteService.removeFavorite(courseId);
        toast.success('已取消收藏');
      } else {
        await favoriteService.addFavorite(courseId);
        toast.success('收藏成功');
      }
      setIsFavorite(!isFavorite);
    } catch (err: any) {
      console.error('操作收藏失败:', err);
      toast.error(isFavorite ? '取消收藏失败' : '收藏失败');
    } finally {
      setFavoritesLoading(false);
    }
  };
  // 处理章节点击
  const handleChapterClick = (chapterId: number) => {
    if (selectedChapterId === chapterId) {
      setSelectedChapterId(null);
    } else {
      setSelectedChapterId(chapterId);
      // 查找该章节的第一个小节并选中
      const chapter = course?.chapters.find(c => c.id === chapterId);
      if (chapter && chapter.sections.length > 0) {
        handleSectionClick(chapter.sections[0].id);
      }
    }
  };
  // 处理小节点击
  const handleSectionClick = (sectionId: number) => {
    setSelectedSectionId(sectionId);
    // 查找选中的小节
    if (course) {
      for (const chapter of course.chapters) {
        for (const section of chapter.sections) {
          if (section.id === sectionId) {
            setSelectedSection(section);
            setActiveTab('content');
            return;
          }
        }
      }
    }
  };
  // 返回按钮处理
  const handleBack = () => {
    router.back();
  };
  // 渲染章节目录
  const renderChapters = () => {
    if (!course || !course.chapters) return null;
    return (
      <Accordion
        type="multiple"
        defaultValue={[course.chapters[0]?.id.toString()]}
        className="w-full"
      >
        {course.chapters.map((chapter) => (
          <AccordionItem key={chapter.id} value={chapter.id.toString()}>
            <AccordionTrigger className="hover:bg-muted rounded-md px-2">
              <div className="flex justify-between w-full items-center pr-4">
                <span>{chapter.title}</span>
                <span className="text-xs text-muted-foreground">
                  {chapter.sections.length} 小节
                </span>
              </div>
            </AccordionTrigger>
            <AccordionContent>
              <div className="pl-4 space-y-1">
                {chapter.sections.map((section) => (
                  <div
                    key={section.id}
                    className={`flex items-center justify-between p-2 rounded-md hover:bg-muted cursor-pointer ${
                      selectedSectionId === section.id ? 'bg-muted' : ''
                    }`}
                    onClick={() => handleSectionClick(section.id)}
                  >
                    <span className="text-sm">{section.title}</span>
                    {/* 显示付费标记或资源类型 */}
                    {section.accessType === 1 ? (
                      <Badge variant="outline" className="text-xs">付费</Badge>
                    ) : (
                      <Badge variant="secondary" className="text-xs">免费试看</Badge>
                    )}
                  </div>
                ))}
              </div>
            </AccordionContent>
          </AccordionItem>
        ))}
      </Accordion>
    );
  };
  // 加载中状态
  if (loading) {
    return (
      <div className="container py-8">
        <div className="flex items-center mb-6">
          <Button variant="ghost" onClick={handleBack}>
            <ChevronLeft className="h-4 w-4 mr-2" />
            返回
          </Button>
          <Skeleton className="h-6 w-48" />
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="md:col-span-1">
            <Skeleton className="h-[600px] w-full rounded-md" />
          </div>
          <div className="md:col-span-2">
            <Skeleton className="h-[600px] w-full rounded-md" />
          </div>
        </div>
      </div>
    );
  }
  // 错误状态
  if (error) {
    return (
      <div className="container py-8">
        <Button variant="ghost" onClick={handleBack} className="mb-6">
          <ChevronLeft className="h-4 w-4 mr-2" />
          返回
        </Button>
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>加载失败</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      </div>
    );
  }
  // 课程不存在
  if (!course) {
    return (
      <div className="container py-8">
        <Button variant="ghost" onClick={handleBack} className="mb-6">
          <ChevronLeft className="h-4 w-4 mr-2" />
          返回
        </Button>
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>课程不存在</AlertTitle>
          <AlertDescription>
            无法找到该课程的详细信息，请确认课程ID是否正确。
          </AlertDescription>
        </Alert>
      </div>
    );
  }
  return (
    <div className="min-h-screen bg-slate-50">
      <div className="container py-8">
        {/* 顶部导航栏 */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center gap-4">
            <Button 
              variant="ghost" 
              onClick={handleBack}
              className="hover:bg-slate-100"
            >
              <ChevronLeft className="h-5 w-5 mr-2" />
              返回
            </Button>
            {course?.course.title && (
              <h1 className="text-2xl font-bold text-slate-800">{course.course.title}</h1>
            )}
          </div>
          {/* 收藏按钮 */}
          <Button
            variant="outline"
            size="sm"
            onClick={handleToggleFavorite}
            disabled={favoritesLoading}
            className="flex items-center gap-2"
          >
            {favoritesLoading ? (
              <span className="inline-block h-4 w-4 animate-spin rounded-full border-2 border-solid border-current border-r-transparent" />
            ) : isFavorite ? (
              <Heart className="h-4 w-4 text-red-500 fill-red-500" />
            ) : (
              <Heart className="h-4 w-4" />
            )}
            {isFavorite ? '已收藏' : '收藏'}
          </Button>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {/* 左侧课程目录 */}
          <div className="md:col-span-1 space-y-6">
            <Card className="border-0 shadow-sm hover:shadow-md transition-shadow duration-200">
              <CardHeader className="space-y-1">
                <CardTitle className="text-xl font-bold text-slate-800">课程目录</CardTitle>
                <CardDescription className="text-slate-500">
                  共 {course?.chapters.length || 0} 章节，
                  {course?.chapters.reduce((sum, chapter) => sum + chapter.sections.length, 0) || 0} 小节
                </CardDescription>
              </CardHeader>
              <CardContent className="p-0">
                {renderChapters()}
              </CardContent>
            </Card>
          </div>
          {/* 右侧内容区 */}
          <div className="md:col-span-2">
            <Card className="border-0 shadow-sm h-[calc(100vh-180px)]">
              <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full h-full flex flex-col">
                <CardHeader className="pb-0 px-4 pt-3">
                  <TabsList className="w-full bg-slate-100 p-1">
                    <TabsTrigger 
                      value="overview" 
                      className="flex-1 data-[state=active]:bg-white data-[state=active]:shadow-sm"
                    >
                      课程信息
                    </TabsTrigger>
                    <TabsTrigger 
                      value="content" 
                      disabled={!selectedSection}
                      className="flex-1 data-[state=active]:bg-white data-[state=active]:shadow-sm"
                    >
                      课程内容
                    </TabsTrigger>
                  </TabsList>
                </CardHeader>
                <CardContent className="p-4 flex-1 overflow-hidden">
                  <TabsContent value="overview" className="mt-0 h-full">
                    <ScrollArea className="h-[calc(100vh-240px)]">
                      <div className="space-y-6 pr-4">
                        {course?.course.coverUrl && (
                          <div className="relative aspect-video rounded-md overflow-hidden mb-2">
                            <img
                              src={course.course.coverUrl}
                              alt={course.course.title}
                              className="w-full h-full object-cover rounded-md shadow-sm"
                            />
                          </div>
                        )}
                        <div>
                          <h3 className="text-lg font-semibold mb-2 text-slate-800">课程简介</h3>
                          <p className="text-slate-600 leading-relaxed">{course?.course.description || "暂无课程简介"}</p>
                        </div>
                        <Separator className="my-2" />
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          {course?.course.institution && (
                            <div className="bg-white p-3 rounded-lg border border-slate-100">
                              <p className="text-sm font-medium text-slate-500 mb-1">所属机构</p>
                              <div className="flex items-center">
                                <span className="font-medium text-slate-800">{course.course.institution.name}</span>
                              </div>
                            </div>
                          )}
                          {course?.course.paymentType !== undefined && (
                            <div className="bg-white p-3 rounded-lg border border-slate-100">
                              <p className="text-sm font-medium text-slate-500 mb-1">付费类型</p>
                              <Badge variant={course.course.paymentType === CoursePaymentType.FREE ? "secondary" : "default"}
                                className={course.course.paymentType === CoursePaymentType.FREE ? 
                                  "bg-emerald-50 text-emerald-700 border-emerald-200" : ""}>
                                {course.course.paymentType === CoursePaymentType.FREE ? '免费' : '付费'}
                              </Badge>
                            </div>
                          )}
                          {course?.course.price !== undefined && course.course.paymentType === CoursePaymentType.PAID && (
                            <div className="bg-white p-3 rounded-lg border border-slate-100">
                              <p className="text-sm font-medium text-slate-500 mb-1">价格</p>
                              <p className="text-primary font-medium text-lg">¥{course.course.price}</p>
                            </div>
                          )}
                          {course?.course.totalDuration !== undefined && (
                            <div className="bg-white p-3 rounded-lg border border-slate-100">
                              <p className="text-sm font-medium text-slate-500 mb-1">总时长</p>
                              <div className="flex items-center">
                                <Clock className="h-4 w-4 mr-2 text-slate-500" />
                                <span className="font-medium text-slate-800">{Math.round(course.course.totalDuration / 60)} 分钟</span>
                              </div>
                            </div>
                          )}
                          {course?.course.averageRating !== undefined && (
                            <div className="bg-white p-3 rounded-lg border border-slate-100">
                              <p className="text-sm font-medium text-slate-500 mb-1">课程评分</p>
                              <div className="flex items-center">
                                <Star className="h-4 w-4 text-yellow-500 fill-yellow-500 mr-2" />
                                <span className="font-medium text-slate-800">
                                  {course.course.averageRating !== undefined && course.course.averageRating !== null
                                    ? course.course.averageRating.toFixed(1)
                                    : '暂无评分'}
                                </span>
                                <span className="text-sm text-slate-500 ml-1">
                                  ({course.course.ratingCount || 0})
                                </span>
                              </div>
                            </div>
                          )}
                          {course?.course.studentCount !== undefined && (
                            <div className="bg-white p-3 rounded-lg border border-slate-100">
                              <p className="text-sm font-medium text-slate-500 mb-1">学习人数</p>
                              <div className="flex items-center">
                                <Users className="h-4 w-4 mr-2 text-slate-500" />
                                <span className="font-medium text-slate-800">{course.course.studentCount}</span>
                              </div>
                            </div>
                          )}
                        </div>
                        {(course?.course.targetAudience || course?.course.learningObjectives) && (
                          <>
                            <Separator className="my-2" />
                            <div className="space-y-4">
                              {course?.course.targetAudience && (
                                <div>
                                  <h3 className="text-lg font-semibold mb-1 text-slate-800">适合人群</h3>
                                  <p className="text-slate-600">{course.course.targetAudience}</p>
                                </div>
                              )}
                              {course?.course.learningObjectives && (
                                <div>
                                  <h3 className="text-lg font-semibold mb-1 text-slate-800">学习目标</h3>
                                  <p className="text-slate-600">{course.course.learningObjectives}</p>
                                </div>
                              )}
                            </div>
                          </>
                        )}
                      </div>
                    </ScrollArea>
                  </TabsContent>
                  <TabsContent value="content" className="mt-0 h-full">
                    {selectedSection ? (
                      <ScrollArea className="h-[calc(100vh-240px)]">
                        <div className="pr-4">
                          <div className="mb-4">
                            <h2 className="text-xl font-bold text-slate-800 mb-2">{selectedSection.title}</h2>
                            {selectedSection.description && (
                              <p className="text-slate-600 mb-2">{selectedSection.description}</p>
                            )}
                            <div className="flex flex-wrap gap-2">
                              {selectedSection.duration && (
                                <Badge variant="outline" className="bg-white flex items-center px-2 py-0.5">
                                  <Clock className="h-3 w-3 mr-1 text-slate-500" />
                                  {Math.round(selectedSection.duration / 60)} 分钟
                                </Badge>
                              )}
                              <Badge 
                                variant={selectedSection.accessType === 0 ? "secondary" : "outline"}
                                className={`flex items-center px-2 py-0.5 ${
                                  selectedSection.accessType === 0 
                                    ? 'bg-emerald-50 text-emerald-700 border-emerald-200' 
                                    : 'bg-white'
                                }`}
                              >
                                {selectedSection.accessType === 0 ? '免费试看' : '付费内容'}
                              </Badge>
                              <Badge 
                                variant="outline" 
                                className="bg-white flex items-center px-2 py-0.5"
                              >
                                {selectedSection.resourceTypeDiscriminator === 'MEDIA' ? '媒体' : 
                                 selectedSection.resourceTypeDiscriminator === 'QUESTION_GROUP' ? '题组' : '未知类型'}
                              </Badge>
                            </div>
                          </div>
                          {/* 小节内容播放器 */}
                          {(selectedSection.resourceTypeDiscriminator === 'MEDIA' && selectedSection.mediaId) || 
                           (selectedSection.resourceTypeDiscriminator === 'QUESTION_GROUP' && selectedSection.questionGroupId) ? (
                            <div className="bg-white rounded-lg shadow-sm">
                              <ReviewContentPlayer section={selectedSection} />
                            </div>
                          ) : (
                            <div className="bg-slate-50 p-6 rounded-lg text-center border border-slate-100">
                              <Info className="h-12 w-12 mx-auto text-slate-400 mb-4" />
                              <h3 className="text-lg font-semibold text-slate-800 mb-2">内容需要付费查看</h3>
                              <p className="text-slate-600 mb-4">此内容为付费内容，请购买课程后查看完整内容</p>
                              <Button variant="default" className="bg-primary hover:bg-primary/90">
                                立即购买课程
                              </Button>
                            </div>
                          )}
                        </div>
                      </ScrollArea>
                    ) : (
                      <div className="flex items-center justify-center h-[calc(100vh-240px)] bg-slate-50 rounded-lg">
                        <div className="text-center p-6">
                          <BookOpen className="h-12 w-12 mx-auto text-slate-400 mb-4" />
                          <h3 className="text-lg font-semibold text-slate-800 mb-2">请选择小节</h3>
                          <p className="text-slate-600">请从左侧章节目录中选择一个小节来查看内容</p>
                        </div>
                      </div>
                    )}
                  </TabsContent>
                </CardContent>
              </Tabs>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/course-metadata/page.tsx">
'use client';
import { useState, useRef, useEffect } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card } from '@/components/ui/card';
import { CategoryManagement } from '@/components/dashboard/course-metadata/category-management';
import { TagManagement } from '@/components/dashboard/course-metadata/tag-management';
export default function CourseMetadataPage() {
  const [activeTab, setActiveTab] = useState('categories');
  const pageRef = useRef<HTMLDivElement>(null);
  // 使用useEffect监听可能的DOM错误
  useEffect(() => {
    // 保存原始的错误处理函数
    const originalError = console.error;
    // 替换为自定义错误处理函数
    console.error = (...args) => {
      // 检查是否为DOM节点错误
      const errorString = args[0]?.toString() || '';
      if (
        errorString.includes('insertBefore') && 
        errorString.includes('Node')
      ) {
        // 可以添加更精确的调试信息或者直接忽略这个特定错误
        console.warn('捕获到DOM节点错误，可能是由于组件状态更新时组件已卸载');
      } else {
        // 其他错误正常处理
        originalError.apply(console, args);
      }
    };
    // 清理函数
    return () => {
      console.error = originalError;
    };
  }, []);
  return (
    <div className="space-y-6" ref={pageRef}>
      <div>
        <h1 className="text-3xl font-bold tracking-tight">课程元数据管理</h1>
        <p className="text-muted-foreground mt-2">
          管理课程分类和标签，组织课程内容
        </p>
      </div>
      <Tabs defaultValue="categories" value={activeTab} onValueChange={(value) => {
        // 使用setTimeout确保状态更新时不会干扰当前渲染周期
        setTimeout(() => setActiveTab(value), 0);
      }} className="space-y-4">
        <TabsList>
          <TabsTrigger value="categories">分类管理</TabsTrigger>
          <TabsTrigger value="tags">标签管理</TabsTrigger>
        </TabsList>
        <TabsContent value="categories" className="space-y-4">
          <Card className="p-6">
            <CategoryManagement />
          </Card>
        </TabsContent>
        <TabsContent value="tags" className="space-y-4">
          <Card className="p-6">
            <TagManagement />
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/course-search/page.tsx">
'use client';
import { useState, useEffect, useCallback } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Empty } from '@/components/ui/empty';
import { Skeleton } from '@/components/ui/skeleton';
import { 
  Search, 
  Filter, 
  X, 
  LayoutGrid, 
  List,
  BookOpen,
  Users,
  Star,
  Clock,
  Sparkles,
  GraduationCap,
  Heart,
  HeartOff
} from 'lucide-react';
import { Course, CoursePaymentType, CourseDifficulty } from '@/types/course';
import { Category } from '@/types/course';
import { Tag } from '@/types/course';
import courseService from '@/services/course-service';
import { toast } from 'sonner';
import { cn } from '@/lib/utils';
import { categoryService, tagService } from '@/services';
import useDebounce from '@/hooks/useDebounce';
import favoriteService from '@/services/favorite-service';
// 搜索过滤器接口
interface SearchFilters {
  keyword: string;
  categoryId?: number;
  tagIds: number[];
  difficulty?: CourseDifficulty;
  paymentType?: CoursePaymentType;
  priceRange: [number, number];
  sortBy: string;
  page: number;
}
// 搜索参数接口
interface CourseSearchParams {
  keyword?: string;
  categoryId?: number;
  tagIds?: number[];
  difficulty?: CourseDifficulty;
  paymentType?: CoursePaymentType;
  minPrice?: number;
  maxPrice?: number;
  sortBy?: string;
  page?: number;
  pageSize?: number;
}
export default function CourseSearchPage() {
  const router = useRouter();
  // 状态管理
  const [filters, setFilters] = useState<SearchFilters>({
    keyword: '',
    tagIds: [],
    priceRange: [0, 1000],
    sortBy: 'rating',
    page: 1
  });
  const [courses, setCourses] = useState<Course[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [tags, setTags] = useState<Tag[]>([]);
  const [loading, setLoading] = useState(false);
  const [totalElements, setTotalElements] = useState(0);
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [favoriteStates, setFavoriteStates] = useState<Record<number, boolean>>({});
  const [favoritesLoading, setFavoritesLoading] = useState<Record<number, boolean>>({});
  // 使用防抖处理搜索
  const debouncedFilters = useDebounce(filters, 300);
  // 搜索课程
  const searchCourses = useCallback(async () => {
    setLoading(true);
    try {
      const searchParams: CourseSearchParams = {
        keyword: debouncedFilters.keyword || undefined,
        categoryId: debouncedFilters.categoryId,
        tagIds: debouncedFilters.tagIds.length > 0 ? debouncedFilters.tagIds : undefined,
        difficulty: debouncedFilters.difficulty,
        paymentType: debouncedFilters.paymentType,
        minPrice: debouncedFilters.priceRange[0],
        maxPrice: debouncedFilters.priceRange[1],
        sortBy: debouncedFilters.sortBy,
        page: debouncedFilters.page - 1,
        pageSize: 12
      };
      const response = await courseService.searchCourses(searchParams);
      setCourses(response.content || []);
      setTotalElements(response.totalElements || 0);
    } catch (error) {
      console.error('搜索课程失败:', error);
      toast.error('搜索课程失败，请重试');
      setCourses([]);
      setTotalElements(0);
    } finally {
      setLoading(false);
    }
  }, [debouncedFilters]);
  // 监听过滤器变化自动搜索
  useEffect(() => {
    searchCourses();
  }, [debouncedFilters, searchCourses]);
  // 加载分类和标签数据
  useEffect(() => {
    const loadMetadata = async () => {
      try {
        const [categoriesResult, tagsResult] = await Promise.all([
          categoryService.getCategoryList('', 0, 100),
          tagService.getTagList('', 0, 100)
        ]);
        setCategories(categoriesResult.content || []);
        setTags(tagsResult.content || []);
      } catch (error) {
        console.error('加载元数据失败:', error);
        toast.error('加载分类和标签数据失败');
      }
    };
    loadMetadata();
  }, []);
  // 检查课程收藏状态
  const checkFavoriteStatus = async (courseId: number) => {
    try {
      setFavoritesLoading(prev => ({ ...prev, [courseId]: true }));
      const isFavorite = await favoriteService.checkFavorite(courseId);
      setFavoriteStates(prev => ({ ...prev, [courseId]: isFavorite }));
    } catch (error) {
      console.error('检查收藏状态失败:', error);
    } finally {
      setFavoritesLoading(prev => ({ ...prev, [courseId]: false }));
    }
  };
  // 处理收藏/取消收藏
  const handleToggleFavorite = async (courseId: number, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    try {
      setFavoritesLoading(prev => ({ ...prev, [courseId]: true }));
      if (favoriteStates[courseId]) {
        await favoriteService.removeFavorite(courseId);
        toast.success('已取消收藏');
      } else {
        await favoriteService.addFavorite(courseId);
        toast.success('收藏成功');
      }
      setFavoriteStates(prev => ({ ...prev, [courseId]: !prev[courseId] }));
    } catch (err: any) {
      console.error('操作收藏失败:', err);
      toast.error(favoriteStates[courseId] ? '取消收藏失败' : '收藏失败');
    } finally {
      setFavoritesLoading(prev => ({ ...prev, [courseId]: false }));
    }
  };
  // 在课程列表加载完成后检查收藏状态
  useEffect(() => {
    if (courses.length > 0) {
      courses.forEach(course => {
        checkFavoriteStatus(course.id);
      });
    }
  }, [courses]);
  // 处理过滤器变化
  const handleFilterChange = (key: keyof SearchFilters, value: any) => {
    setFilters(prev => ({ ...prev, [key]: value, page: 1 }));
  };
  // 清除所有过滤器
  const clearFilters = () => {
    setFilters({
      keyword: '',
      tagIds: [],
      priceRange: [0, 1000],
      sortBy: 'rating',
      page: 1
    });
  };
  // 处理课程卡片点击
  const handleCourseClick = (courseId: number) => {
    router.push(`/dashboard/course-detail/${courseId}`);
  };
  return (
    <div className="flex gap-6">
      {/* 左侧过滤器 */}
      <Card className="w-72 shrink-0 h-[calc(100vh-6rem)] sticky top-20">
        <CardHeader className="border-b">
          <CardTitle className="flex items-center gap-2 text-lg">
            <Filter className="w-5 h-5" />
            过滤器
          </CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <ScrollArea className="h-[calc(100vh-12rem)]">
            <div className="space-y-6 p-6">
              {/* 分类选择 */}
              <div className="space-y-2">
                <label className="text-sm font-medium flex items-center gap-2">
                  <GraduationCap className="w-4 h-4" />
                  课程分类
                </label>
                <Select
                  value={filters.categoryId?.toString()}
                  onValueChange={(value) => handleFilterChange('categoryId', parseInt(value))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="选择分类" />
                  </SelectTrigger>
                  <SelectContent>
                    {categories.map((category) => (
                      <SelectItem key={category.id} value={category.id.toString()}>
                        {category.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              {/* 难度选择 */}
              <div className="space-y-2">
                <label className="text-sm font-medium flex items-center gap-2">
                  <Sparkles className="w-4 h-4" />
                  课程难度
                </label>
                <Select
                  value={filters.difficulty?.toString()}
                  onValueChange={(value) => handleFilterChange('difficulty', parseInt(value))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="课程难度" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value={CourseDifficulty.BEGINNER.toString()}>初级</SelectItem>
                    <SelectItem value={CourseDifficulty.INTERMEDIATE.toString()}>中级</SelectItem>
                    <SelectItem value={CourseDifficulty.ADVANCED.toString()}>高级</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              {/* 付费类型 */}
              <div className="space-y-2">
                <label className="text-sm font-medium">付费类型</label>
                <Select
                  value={filters.paymentType?.toString()}
                  onValueChange={(value) => handleFilterChange('paymentType', parseInt(value))}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="付费类型" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value={CoursePaymentType.FREE.toString()}>免费</SelectItem>
                    <SelectItem value={CoursePaymentType.PAID.toString()}>付费</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              {/* 价格范围滑块 */}
              <div className="space-y-2">
                <label className="text-sm font-medium">价格范围</label>
                <div className="flex justify-between text-sm text-muted-foreground">
                  <span>¥{filters.priceRange[0]}</span>
                  <span>¥{filters.priceRange[1]}</span>
                </div>
                <Slider
                  value={filters.priceRange}
                  min={0}
                  max={1000}
                  step={10}
                  onValueChange={(value: [number, number]) => handleFilterChange('priceRange', value)}
                  className="mt-2"
                />
              </div>
              {/* 标签选择 */}
              <div className="space-y-2">
                <label className="text-sm font-medium">课程标签</label>
                <div className="flex flex-wrap gap-2">
                  {tags.map((tag) => (
                    <Badge
                      key={tag.id}
                      variant={filters.tagIds.includes(tag.id) ? 'default' : 'outline'}
                      className="cursor-pointer hover:bg-primary/90 transition-colors"
                      onClick={() => {
                        const newTagIds = filters.tagIds.includes(tag.id)
                          ? filters.tagIds.filter(id => id !== tag.id)
                          : [...filters.tagIds, tag.id];
                        handleFilterChange('tagIds', newTagIds);
                      }}
                    >
                      {tag.name}
                    </Badge>
                  ))}
                </div>
              </div>
              {/* 清除按钮 */}
              <Button
                variant="outline"
                className="w-full hover:bg-destructive hover:text-destructive-foreground transition-colors"
                onClick={clearFilters}
              >
                <X className="w-4 h-4 mr-2" />
                清除过滤器
              </Button>
            </div>
          </ScrollArea>
        </CardContent>
      </Card>
      {/* 右侧内容 */}
      <div className="flex-1 space-y-6">
        {/* 搜索和工具栏 */}
        <div className="flex items-center gap-4 sticky top-20 z-10 bg-background pb-4 border-b">
          <div className="flex-1 flex gap-2">
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="搜索课程..."
                value={filters.keyword}
                onChange={(e) => handleFilterChange('keyword', e.target.value)}
                className="pl-9"
              />
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Select
              value={filters.sortBy}
              onValueChange={(value) => handleFilterChange('sortBy', value)}
            >
              <SelectTrigger className="w-40">
                <SelectValue placeholder="排序方式" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="rating">
                  <div className="flex items-center">
                    <Star className="w-4 h-4 mr-2" />
                    评分最高
                  </div>
                </SelectItem>
                <SelectItem value="students">
                  <div className="flex items-center">
                    <Users className="w-4 h-4 mr-2" />
                    学习人数最多
                  </div>
                </SelectItem>
                <SelectItem value="newest">
                  <div className="flex items-center">
                    <Clock className="w-4 h-4 mr-2" />
                    最新发布
                  </div>
                </SelectItem>
                <SelectItem value="price-asc">价格从低到高</SelectItem>
                <SelectItem value="price-desc">价格从高到低</SelectItem>
              </SelectContent>
            </Select>
            <div className="flex border rounded-md">
              <Button
                variant={viewMode === 'grid' ? 'default' : 'ghost'}
                size="icon"
                onClick={() => setViewMode('grid')}
                className="rounded-r-none"
              >
                <LayoutGrid className="w-4 h-4" />
              </Button>
              <Button
                variant={viewMode === 'list' ? 'default' : 'ghost'}
                size="icon"
                onClick={() => setViewMode('list')}
                className="rounded-l-none"
              >
                <List className="w-4 h-4" />
              </Button>
            </div>
          </div>
        </div>
        {/* 课程列表 */}
        {loading ? (
          // 加载状态
          <div className={cn(
            "grid gap-6",
            viewMode === 'grid' ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3' : 'grid-cols-1'
          )}>
            {Array(6).fill(0).map((_, index) => (
              <Card key={index} className={cn(
                "overflow-hidden hover:shadow-lg transition-shadow",
                viewMode === 'list' && "flex"
              )}>
                <div className={cn(
                  "bg-muted animate-pulse",
                  viewMode === 'grid' ? 'h-48' : 'h-32 w-48'
                )} />
                <CardContent className={cn(
                  "space-y-3",
                  viewMode === 'grid' ? 'p-4' : 'flex-1 p-4'
                )}>
                  <div className="h-4 bg-muted rounded w-3/4 animate-pulse" />
                  <div className="h-4 bg-muted rounded w-1/2 animate-pulse" />
                  <div className="flex justify-between">
                    <div className="h-4 bg-muted rounded w-1/4 animate-pulse" />
                    <div className="h-4 bg-muted rounded w-1/4 animate-pulse" />
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : courses.length > 0 ? (
          // 课程卡片
          <div className={cn(
            "grid gap-6",
            viewMode === 'grid' ? 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3' : 'grid-cols-1'
          )}>
            {courses.map((course) => (
              <Card 
                key={course.id} 
                className={cn(
                  "overflow-hidden hover:shadow-lg transition-shadow cursor-pointer group",
                  viewMode === 'list' && "flex"
                )}
                onClick={() => handleCourseClick(course.id)}
              >
                {course.coverUrl && (
                  <div className={cn(
                    "relative overflow-hidden",
                    viewMode === 'grid' ? 'h-48' : 'h-32 w-48'
                  )}>
                    <img
                      src={course.coverUrl}
                      alt={course.title}
                      className="absolute inset-0 w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                    />
                    {/* 收藏按钮 */}
                    <Button
                      variant="ghost"
                      size="icon"
                      className="absolute top-2 right-2 bg-white/80 hover:bg-white/90 rounded-full w-8 h-8 p-1.5"
                      onClick={(e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        handleToggleFavorite(course.id, e);
                      }}
                      disabled={favoritesLoading[course.id]}
                    >
                      {favoritesLoading[course.id] ? (
                        <span className="inline-block h-4 w-4 animate-spin rounded-full border-2 border-solid border-current border-r-transparent" />
                      ) : favoriteStates[course.id] ? (
                        <Heart className="h-4 w-4 text-red-500 fill-red-500" />
                      ) : (
                        <Heart className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                )}
                <CardContent className={cn(
                  "space-y-3",
                  viewMode === 'grid' ? 'p-4' : 'flex-1 p-4'
                )}>
                  <h3 className="font-semibold text-lg line-clamp-1 group-hover:text-primary transition-colors">
                    {course.title}
                  </h3>
                  <p className="text-sm text-muted-foreground line-clamp-2">
                    {course.description}
                  </p>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-1">
                      <Star className="w-4 h-4 text-yellow-500 fill-yellow-500" />
                      <span className="font-medium">{course.averageRating?.toFixed(1) || '暂无评分'}</span>
                      <span className="text-sm text-muted-foreground">
                        ({course.ratingCount || 0})
                      </span>
                    </div>
                    <div>
                      {course.paymentType === CoursePaymentType.FREE ? (
                        <span className="text-green-600 font-medium">免费</span>
                      ) : (
                        <div className="text-right">
                          <span className="text-primary font-medium text-lg">
                            ¥{course.discountPrice || course.price}
                          </span>
                          {course.discountPrice && course.price && (
                            <div className="text-sm text-muted-foreground line-through">
                              ¥{course.price}
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                  <div className="flex items-center gap-2 flex-wrap">
                    <Badge variant="secondary" className="text-xs">
                      <Users className="w-3 h-3 mr-1" />
                      {course.studentCount || 0} 人学习
                    </Badge>
                    {course.difficulty && (
                      <Badge variant="outline" className="text-xs">
                        <Sparkles className="w-3 h-3 mr-1" />
                        {course.difficulty === CourseDifficulty.BEGINNER
                          ? '初级'
                          : course.difficulty === CourseDifficulty.INTERMEDIATE
                          ? '中级'
                          : '高级'}
                      </Badge>
                    )}
                    {course.category && (
                      <Badge variant="outline" className="text-xs">
                        <GraduationCap className="w-3 h-3 mr-1" />
                        {course.category.name}
                      </Badge>
                    )}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : (
          // 空状态
          <Empty
            icon={<BookOpen className="w-12 h-12" />}
            title="暂无课程"
            description="没有找到符合条件的课程，请尝试调整搜索条件"
          />
        )}
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/courses/[id]/chapters/[chapterId]/create-section/page.tsx">
'use client';
import React, { useState } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { 
  ArrowLeft, 
  Loader2, 
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbSeparator, BreadcrumbPage, BreadcrumbList } from '@/components/ui/breadcrumb';
import sectionService from '@/services/section';
import chapterService from '@/services/chapter';
import courseService from '@/services/course';
import { SectionForm, SectionFormValues } from '@/components/dashboard/sections/section-form';
import { Course, Chapter } from '@/types/course';
export default function CreateSectionPage() {
  const router = useRouter();
  const params = useParams();
  const courseId = Number(params.id);
  const chapterId = Number(params.chapterId);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [course, setCourse] = useState<Course | null>(null);
  const [chapter, setChapter] = useState<Chapter | null>(null);
  // 加载课程和章节数据
  React.useEffect(() => {
    const loadData = async () => {
      try {
        // 加载课程信息
        const courseData = await courseService.getCourseById(courseId);
        setCourse(courseData);
        // 加载章节信息
        const chapterData = await chapterService.getChapterById(chapterId);
        setChapter(chapterData);
      } catch (err: any) {
        console.error('加载数据失败:', err);
        toast.error('加载数据失败', {
          description: err.message || '请稍后重试'
        });
      }
    };
    loadData();
  }, [courseId, chapterId]);
  // 处理表单提交
  const handleSubmit = async (values: SectionFormValues) => {
    try {
      setIsSubmitting(true);
      setError(null);
      // 构建创建小节的请求数据
      const sectionData = {
        ...values,
        chapterId: chapterId
      };
      // 调用API创建小节
      const newSection = await sectionService.createSection(sectionData);
      toast.success('小节创建成功', {
        description: '新小节已成功添加到章节中'
      });
      // 创建成功后进入小节编辑页面，而不是返回到章节列表
      router.push(`/dashboard/courses/${courseId}/chapters/${chapterId}/sections/${newSection.id}`);
    } catch (err: any) {
      console.error('创建小节失败:', err);
      setError(err.message || '创建小节失败');
      throw err; // 向上传递错误
    } finally {
      setIsSubmitting(false);
    }
  };
  // 处理取消
  const handleCancel = () => {
    router.push(`/dashboard/courses/${courseId}/chapters/${chapterId}`);
  };
  return (
    <div className="container mx-auto py-6 space-y-6">
      {/* 面包屑导航 */}
      <Breadcrumb className="mb-6">
        <BreadcrumbList>
          <BreadcrumbItem>
            <BreadcrumbLink href="/dashboard/courses">课程</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbLink href={`/dashboard/courses/${courseId}`}>
              {course?.title || '课程详情'}
            </BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbLink href={`/dashboard/courses/${courseId}/chapters/${chapterId}`}>
              {chapter?.title || '章节详情'}
            </BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbPage>创建小节</BreadcrumbPage>
          </BreadcrumbItem>
        </BreadcrumbList>
      </Breadcrumb>
      {/* 标题和返回按钮 */}
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">创建新小节</h1>
        <Button variant="outline" onClick={handleCancel}>
          <ArrowLeft className="mr-2 h-4 w-4" />
          返回章节
        </Button>
      </div>
      {/* 小节表单 */}
      <Card className="border-none shadow-none">
        <CardContent className="p-0">
          {isSubmitting ? (
            <div className="flex flex-col items-center justify-center py-12">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <p className="mt-4 text-muted-foreground">创建小节中...</p>
            </div>
          ) : (
            <SectionForm
              chapterId={chapterId}
              onSubmit={handleSubmit}
              onCancel={handleCancel}
              isSubmitting={isSubmitting}
              error={error}
              mode="create"
            />
          )}
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/courses/[id]/chapters/[chapterId]/sections/[sectionId]/edit/page.tsx">
'use client';
import { useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { Loader2 } from 'lucide-react';
export default function EditSectionPageRedirect() {
  const router = useRouter();
  const params = useParams();
  const courseId = params.id;
  const chapterId = params.chapterId;
  const sectionId = params.sectionId;
  useEffect(() => {
    // 重定向到小节详情页面
    router.push(`/dashboard/courses/${courseId}/chapters/${chapterId}/sections/${sectionId}`);
  }, [courseId, chapterId, sectionId, router]);
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
      <p className="text-muted-foreground">正在重定向到小节详情页面...</p>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/courses/[id]/chapters/[chapterId]/sections/[sectionId]/page.tsx">
'use client';
import React, { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { 
  ArrowLeft, 
  PencilIcon, 
  Trash2, 
  Loader2, 
  Video, 
  FileText,
  BookOpen,
  Grip,
  Plus,
  Save,
  Package
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Breadcrumb, 
  BreadcrumbItem, 
  BreadcrumbLink, 
  BreadcrumbSeparator,
  BreadcrumbPage,
  BreadcrumbList
} from '@/components/ui/breadcrumb';
import { Badge } from '@/components/ui/badge';
import { Avatar } from '@/components/ui/avatar';
import { ScrollArea } from '@/components/ui/scroll-area';
import courseService from '@/services/course';
import chapterService from '@/services/chapter';
import sectionService from '@/services/section';
import { SectionResourceList } from '@/components/dashboard/sections/section-resource-list';
import { AddResourceDialog } from '@/components/dashboard/sections/add-resource-dialog';
import { Section, Chapter, Course } from '@/types/course';
import { SectionDialog } from '@/components/dashboard/sections/section-dialog';
import { SectionFormValues } from '@/components/dashboard/sections/section-form';
export default function SectionDetailsPage() {
  const router = useRouter();
  const params = useParams();
  const courseId = Number(params.id);
  const chapterId = Number(params.chapterId);
  const sectionId = Number(params.sectionId);
  const [course, setCourse] = useState<Course | null>(null);
  const [chapter, setChapter] = useState<Chapter | null>(null);
  const [section, setSection] = useState<Section | null>(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [resourceUpdated, setResourceUpdated] = useState(false);
  // 加载数据
  useEffect(() => {
    const loadCourse = async () => {
      try {
        const data = await courseService.getCourseById(courseId);
        setCourse(data);
      } catch (err: any) {
        console.error('加载课程失败:', err);
        toast.error('加载课程失败', {
          description: err.message || '请稍后重试'
        });
      }
    };
    loadCourse();
  }, [courseId]);
  useEffect(() => {
    const loadChapter = async () => {
      try {
        const data = await chapterService.getChapterById(chapterId);
        setChapter(data);
      } catch (err: any) {
        console.error('加载章节失败:', err);
        toast.error('加载章节失败', {
          description: err.message || '请稍后重试'
        });
      }
    };
    loadChapter();
  }, [chapterId]);
  const loadSection = async () => {
    try {
      setIsLoading(true);
      setError(null);
      const data = await sectionService.getSectionById(sectionId);
      setSection(data);
      setResourceUpdated(false);
    } catch (err: any) {
      console.error('加载小节失败:', err);
      setError(err.message || '加载小节数据失败');
    } finally {
      setIsLoading(false);
    }
  };
  useEffect(() => {
    loadSection();
  }, [sectionId]);
  // 刷新资源列表
  const handleResourceUpdated = () => {
    setResourceUpdated(true);
    loadSection(); // 重新加载小节数据，包括资源信息
    toast.success('资源已更新', {
      description: '小节资源列表已更新'
    });
  };
  // 打开编辑弹窗
  const handleEdit = () => {
    setIsEditDialogOpen(true);
  };
  // 处理编辑提交
  const handleEditSubmit = async (values: SectionFormValues) => {
    try {
      await sectionService.updateSection(sectionId, {
        ...values,
        chapterId: chapterId
      });
      toast.success('小节已更新', {
        description: '小节信息已成功保存'
      });
      // 重新加载小节数据
      loadSection();
    } catch (error: any) {
      console.error('更新小节失败:', error);
      throw error;
    }
  };
  // 返回到章节页面
  const handleBack = () => {
    router.push(`/dashboard/courses/${courseId}/chapters/${chapterId}`);
  };
  // 删除小节
  const handleDelete = async () => {
    if (!confirm('确定要删除该小节吗？此操作无法撤销。')) {
      return;
    }
    try {
      await sectionService.deleteSection(sectionId);
      toast.success('小节已删除', {
        description: '小节已成功删除'
      });
      router.push(`/dashboard/courses/${courseId}/chapters/${chapterId}`);
    } catch (err: any) {
      console.error('删除小节失败:', err);
      toast.error('删除小节失败', {
        description: err.message || '请稍后重试'
      });
    }
  };
  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[60vh]">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
        <p className="mt-4 text-lg">加载小节信息...</p>
      </div>
    );
  }
  if (error) {
    return (
      <div className="container mx-auto py-6 space-y-8">
        <div className="flex flex-col items-center justify-center min-h-[40vh]">
          <div className="bg-destructive/10 text-destructive text-sm p-4 rounded-md mb-4 max-w-md">
            <p>加载小节数据失败: {error}</p>
          </div>
          <Button onClick={handleBack} variant="outline" className="mt-4">
            <ArrowLeft className="mr-2 h-4 w-4" />
            返回章节页面
          </Button>
        </div>
      </div>
    );
  }
  if (!section) {
    return (
      <div className="container mx-auto py-6 space-y-8">
        <div className="flex flex-col items-center justify-center min-h-[40vh]">
          <div className="bg-destructive/10 text-destructive text-sm p-4 rounded-md mb-4 max-w-md">
            <p>找不到小节数据</p>
          </div>
          <Button onClick={handleBack} variant="outline" className="mt-4">
            <ArrowLeft className="mr-2 h-4 w-4" />
            返回章节页面
          </Button>
        </div>
      </div>
    );
  }
  return (
    <>
      <div className="container mx-auto py-6 space-y-6">
        {/* 面包屑导航 */}
        <Breadcrumb className="mb-6">
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbLink href="/dashboard/courses">课程</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbLink href={`/dashboard/courses/${courseId}`}>
                {course?.title || '课程详情'}
              </BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbLink href={`/dashboard/courses/${courseId}/chapters/${chapterId}`}>
                {chapter?.title || '章节详情'}
              </BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbPage>{section.title}</BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>
        {/* 操作按钮 */}
        <div className="flex justify-between items-center">
          <Button variant="outline" onClick={handleBack}>
            <ArrowLeft className="mr-2 h-4 w-4" />
            返回章节
          </Button>
          <div className="flex space-x-2">
            <Button 
              variant="outline" 
              size="sm" 
              onClick={handleEdit}
            >
              <PencilIcon className="mr-2 h-4 w-4" />
              编辑小节
            </Button>
            <Button 
              variant="destructive" 
              size="sm"
              onClick={handleDelete}
            >
              <Trash2 className="mr-2 h-4 w-4" />
              删除小节
            </Button>
          </div>
        </div>
        {/* 小节标题和描述 */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">{section.title}</h1>
            <p className="text-muted-foreground mt-1">{section.description || '无描述'}</p>
          </div>
          <div className="flex items-center gap-4">
            <Badge variant="outline" className="text-sm px-3 py-1">
              内容类型: {section.contentType || '未指定'}
            </Badge>
            {section.estimatedMinutes && (
              <Badge variant="outline" className="text-sm px-3 py-1">
                学习时长: {section.estimatedMinutes} 分钟
              </Badge>
            )}
            <Badge variant="outline" className={
              section.accessType === 0 ? 'bg-green-100 border-green-200 text-green-800' : 
              'bg-blue-100 border-blue-200 text-blue-800'
            }>
              {section.accessType === 0 ? '免费' : '需购买'}
            </Badge>
          </div>
        </div>
        <Separator className="mb-6" />
        {/* 内容选项卡 */}
        <div className="container mx-auto">
          <Tabs 
            defaultValue="overview" 
            value={activeTab} 
            onValueChange={setActiveTab}
            className="w-full"
          >
            <TabsList className="mb-4">
              <TabsTrigger value="overview" className="flex items-center">
                <FileText className="mr-2 h-4 w-4" />
                基本信息
              </TabsTrigger>
              <TabsTrigger value="resources" className="flex items-center">
                <Package className="mr-2 h-4 w-4" />
                资源管理
              </TabsTrigger>
              <TabsTrigger value="preview" className="flex items-center">
                <BookOpen className="mr-2 h-4 w-4" />
                内容预览
              </TabsTrigger>
            </TabsList>
            {/* 基本信息选项卡 */}
            <TabsContent value="overview" className="min-h-[400px]">
              <Card>
                <CardHeader>
                  <CardTitle>小节信息</CardTitle>
                  <CardDescription>小节的基本信息和设置</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h3 className="text-sm font-medium text-muted-foreground mb-1">标题</h3>
                      <p className="text-base">{section.title}</p>
                    </div>
                    <div>
                      <h3 className="text-sm font-medium text-muted-foreground mb-1">内容类型</h3>
                      <p className="text-base">{section.contentType || '未指定'}</p>
                    </div>
                    <div>
                      <h3 className="text-sm font-medium text-muted-foreground mb-1">访问权限</h3>
                      <p className="text-base">{section.accessType === 0 ? '免费试看' : '付费访问'}</p>
                    </div>
                    <div>
                      <h3 className="text-sm font-medium text-muted-foreground mb-1">预计学习时间</h3>
                      <p className="text-base">{section.estimatedMinutes ? `${section.estimatedMinutes} 分钟` : '未设置'}</p>
                    </div>
                    <div className="md:col-span-2">
                      <h3 className="text-sm font-medium text-muted-foreground mb-1">描述</h3>
                      <p className="text-base">{section.description || '无描述'}</p>
                    </div>
                  </div>
                </CardContent>
                <CardFooter>
                  <Button variant="outline" onClick={handleEdit}>
                    <PencilIcon className="mr-2 h-4 w-4" />
                    编辑信息
                  </Button>
                </CardFooter>
              </Card>
            </TabsContent>
            {/* 资源管理选项卡 */}
            <TabsContent value="resources" className="min-h-[400px]">
              <Card>
                <CardHeader className="flex flex-row items-center justify-between">
                  <div>
                    <CardTitle>小节资源</CardTitle>
                    <CardDescription>管理小节的媒体资源和题目组</CardDescription>
                  </div>
                  <AddResourceDialog 
                    sectionId={sectionId}
                    onResourceAdded={handleResourceUpdated}
                    trigger={
                      <Button id="add-resource-button">
                        <Plus className="mr-2 h-4 w-4" />
                        添加资源
                      </Button>
                    }
                  />
                </CardHeader>
                <CardContent>
                  <SectionResourceList 
                    sectionId={sectionId} 
                    onAddResource={() => {
                      document.getElementById('add-resource-button')?.click();
                    }} 
                    key={resourceUpdated ? 'updated' : 'initial'}
                  />
                </CardContent>
              </Card>
            </TabsContent>
            {/* 内容预览选项卡 */}
            <TabsContent value="preview" className="min-h-[400px]">
              <Card>
                <CardHeader>
                  <CardTitle>内容预览</CardTitle>
                  <CardDescription>预览小节的内容显示效果</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="text-center p-8 border rounded-md">
                    <p className="text-muted-foreground">内容预览功能开发中...</p>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
      {/* 编辑小节弹窗 */}
      {section && (
        <SectionDialog
          open={isEditDialogOpen}
          onOpenChange={setIsEditDialogOpen}
          chapterId={chapterId}
          courseId={courseId}
          section={section}
          onSubmit={handleEditSubmit}
          mode="edit"
        />
      )}
    </>
  );
}
</file>

<file path="front/src/app/dashboard/courses/[id]/chapters/[chapterId]/sections/create/page.tsx">
'use client';
import { useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { Loader2 } from 'lucide-react';
export default function CreateSectionPageRedirect() {
  const router = useRouter();
  const params = useParams();
  const courseId = params.id;
  const chapterId = params.chapterId;
  useEffect(() => {
    // 重定向到章节页面
    router.push(`/dashboard/courses/${courseId}/chapters/${chapterId}`);
  }, [courseId, chapterId, router]);
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
      <p className="text-muted-foreground">正在重定向到章节页面...</p>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/courses/[id]/chapters/[chapterId]/sections/page.tsx">
'use client';
import { useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
/**
 * 小节列表页面 - 重定向到章节页面
 * 
 * 由于我们现在在章节页面使用折叠式展示小节，
 * 这个页面已经不再需要，重定向到章节页面。
 */
export default function ChapterSectionsPageRedirect() {
  const params = useParams();
  const router = useRouter();
  const courseId = Number(params.id);
  // 页面加载时立即重定向到章节页面
  useEffect(() => {
    router.replace(`/dashboard/courses/${courseId}/chapters`);
  }, [courseId, router]);
  // 渲染简单的加载状态
  return (
    <div className="flex items-center justify-center min-h-[60vh]">
      <div className="text-center">
        <p className="text-muted-foreground">正在重定向...</p>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/courses/[id]/chapters/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { ChapterList } from '@/components/dashboard/courses/chapter-list';
import { ChapterSections } from '@/components/dashboard/courses/chapter-sections';
import { courseService, chapterService } from '@/services';
import { Course, Chapter, CourseStatus } from '@/types/course';
import { Button } from '@/components/ui/button';
import { 
  ArrowLeft, 
  Loader2, 
  BookOpen,
  AlertCircle,
  Plus,
  Info
} from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator } from '@/components/ui/breadcrumb';
import { toast } from 'sonner';
import useDebounce from '@/hooks/useDebounce';
export default function CourseChaptersPage() {
  const params = useParams();
  const router = useRouter();
  const courseId = Number(params.id);
  const [course, setCourse] = useState<Course | null>(null);
  const [chapters, setChapters] = useState<Chapter[]>([]);
  const [isLoadingCourse, setIsLoadingCourse] = useState(true);
  const [isLoadingChapters, setIsLoadingChapters] = useState(true);
  const [error, setError] = useState<string | null>(null);
  // 防抖处理courseId
  const debouncedCourseId = useDebounce(courseId, 300);
  // 加载课程详情
  useEffect(() => {
    const fetchCourse = async () => {
      if (!debouncedCourseId) return;
      try {
        setIsLoadingCourse(true);
        setError(null);
        const data = await courseService.getCourseById(debouncedCourseId);
        setCourse(data);
      } catch (err: any) {
        setError(err.message || '获取课程详情失败');
        toast.error('获取课程详情失败', {
          description: err.message || '请稍后重试'
        });
        console.error('获取课程详情失败:', err);
      } finally {
        setIsLoadingCourse(false);
      }
    };
    fetchCourse();
  }, [debouncedCourseId]);
  // 加载章节列表
  const loadChapters = async () => {
    try {
      setIsLoadingChapters(true);
      const data = await chapterService.getChaptersByCourse(courseId);
      setChapters(data);
    } catch (err: any) {
      toast.error('获取章节列表失败', {
        description: err.message || '请稍后重试'
      });
      console.error('获取章节列表失败:', err);
    } finally {
      setIsLoadingChapters(false);
    }
  };
  // 加载章节列表
  useEffect(() => {
    if (debouncedCourseId) {
      loadChapters();
    }
  }, [debouncedCourseId]);
  // 处理添加新章节
  const handleAddChapter = () => {
    // 不再需要处理弹窗，由ChapterList组件自己管理
  };
  // 章节点击处理
  const handleChapterClick = (chapter: Chapter) => {
    // 章节点击不再跳转到小节列表页面
    // 而是在当前页面直接展开/折叠
  };
  // 返回课程详情
  const handleBackToCourse = () => {
    router.push(`/dashboard/courses/${courseId}`);
  };
  // 处理章节创建后刷新列表
  const handleChapterUpdated = () => {
    // 重新加载章节列表数据
    loadChapters();
  };
  if (isLoadingCourse || isLoadingChapters) {
    return (
      <div className="container max-w-7xl py-10">
        <div className="flex flex-col items-center justify-center h-[60vh]">
          <Loader2 className="h-10 w-10 animate-spin text-primary mb-4" />
          <p className="text-muted-foreground">加载章节数据...</p>
        </div>
      </div>
    );
  }
  if (error) {
    return (
      <div className="container max-w-7xl py-10">
        <Alert variant="destructive" className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>错误</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
        <Button 
          variant="outline" 
          onClick={handleBackToCourse}
          className="mt-4"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          返回课程
        </Button>
      </div>
    );
  }
  if (!course) {
    return (
      <div className="container max-w-7xl py-10">
        <Alert variant="destructive" className="mb-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>未找到课程</AlertTitle>
          <AlertDescription>找不到指定ID的课程</AlertDescription>
        </Alert>
        <Button 
          variant="outline" 
          onClick={() => router.push('/dashboard/courses')}
          className="mt-4"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          课程列表
        </Button>
      </div>
    );
  }
  return (
    <div className="container max-w-7xl py-10">
      {/* 面包屑导航 */}
      <Breadcrumb className="mb-6">
        <BreadcrumbList>
          <BreadcrumbItem>
            <BreadcrumbLink href="/dashboard">仪表盘</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbLink href="/dashboard/courses">课程</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbLink href={`/dashboard/courses/${courseId}`}>{course.title}</BreadcrumbLink>
          </BreadcrumbItem>
          <BreadcrumbSeparator />
          <BreadcrumbItem>
            <BreadcrumbPage>章节管理</BreadcrumbPage>
          </BreadcrumbItem>
        </BreadcrumbList>
      </Breadcrumb>
      {/* 页面标题 */}
      <div className="flex justify-between items-center mb-8">
        <div>
          <Button 
            variant="ghost" 
            onClick={handleBackToCourse}
            className="mb-2 pl-0 hover:pl-0"
          >
            <ArrowLeft className="mr-2 h-4 w-4" />
            返回课程详情
          </Button>
          <h1 className="text-3xl font-bold tracking-tight">章节管理</h1>
          <p className="text-muted-foreground mt-2">
            管理 {course?.title} 的章节和小节
          </p>
        </div>
      </div>
      {course.status === CourseStatus.REVIEWING && (
        <Alert className="mb-6 bg-amber-50 border-amber-200">
          <Info className="h-4 w-4 text-amber-600" />
          <AlertTitle className="text-amber-800">课程正在审核中</AlertTitle>
          <AlertDescription className="text-amber-700">
            课程正在审核中，不能修改章节内容。您可以查看课程章节结构，但无法进行编辑。
            如需编辑，请等待审核完成或联系审核员。
          </AlertDescription>
        </Alert>
      )}
      {/* 使用ChapterList组件显示和管理章节 */}
      <ChapterList 
        courseId={courseId}
        onChapterClick={handleChapterClick}
        onChapterCreated={handleChapterUpdated}
        onChapterUpdated={handleChapterUpdated}
        readOnly={course.status === CourseStatus.REVIEWING}
      />
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/courses/[id]/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Image from 'next/image';
import CourseForm from '@/components/dashboard/courses/course-form';
import { courseService, chapterService, sectionService } from '@/services';
import { Course, CourseStatus, Chapter, Section } from '@/types/course';
import { Button } from '@/components/ui/button';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { 
  AlertCircle, 
  Upload, 
  Info, 
  FileCheck, 
  Loader2, 
  Clock, 
  CheckCircle, 
  Ban, 
  Edit, 
  FileEdit, 
  ArrowLeft,
  ChevronRight,
  BookOpen,
  Eye
} from 'lucide-react';
import { formatDate } from '@/utils/date';
import CourseStatusBadge from '@/components/dashboard/courses/CourseStatusBadge';
import { CourseContentPlayer } from '@/components/preview/course-content-player';
export default function CourseDetailPage() {
  const params = useParams();
  const router = useRouter();
  const courseId = Number(params.id);
  const [course, setCourse] = useState<Course | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [coverFile, setCoverFile] = useState<File | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadError, setUploadError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState('info');
  // 预览相关状态
  const [chapters, setChapters] = useState<Chapter[]>([]);
  const [selectedChapterId, setSelectedChapterId] = useState<number | null>(null);
  const [selectedSectionId, setSelectedSectionId] = useState<number | null>(null);
  const [sections, setSections] = useState<Record<number, Section[]>>({});
  const [activeSection, setActiveSection] = useState<Section | null>(null);
  const [isLoadingPreview, setIsLoadingPreview] = useState(false);
  // 加载课程详情
  useEffect(() => {
    const fetchCourse = async () => {
      try {
        setIsLoading(true);
        setError(null);
        const data = await courseService.getCourseById(courseId);
        setCourse(data);
      } catch (err: any) {
        setError(err.message || '获取课程详情失败');
        console.error('获取课程详情失败:', err);
      } finally {
        setIsLoading(false);
      }
    };
    if (courseId) {
      fetchCourse();
    }
  }, [courseId]);
  // 处理课程更新成功
  const handleUpdateSuccess = (updatedCourse: Course) => {
    setCourse(updatedCourse);
  };
  // 处理封面文件选择
  const handleCoverChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setCoverFile(e.target.files[0]);
      setUploadError(null);
    }
  };
  // 上传封面
  const handleCoverUpload = async () => {
    if (!coverFile || !course) return;
    try {
      setIsUploading(true);
      setUploadError(null);
      const updatedCourse = await courseService.updateCourseCover(course.id, coverFile);
      setCourse(updatedCourse);
      setCoverFile(null);
      // 重置文件输入
      const fileInput = document.getElementById('cover-upload') as HTMLInputElement;
      if (fileInput) fileInput.value = '';
    } catch (err: any) {
      setUploadError(err.message || '上传封面失败');
      console.error('上传封面失败:', err);
    } finally {
      setIsUploading(false);
    }
  };
  // 提交审核
  const handleSubmitForReview = async () => {
    if (!course) return;
    try {
      setIsLoading(true);
      const updatedCourse = await courseService.submitForReview(course.id);
      setCourse(updatedCourse);
    } catch (err: any) {
      setError(err.message || '提交审核失败');
    } finally {
      setIsLoading(false);
    }
  };
  // 重新编辑被拒绝的课程
  const handleReEdit = async () => {
    if (!course) return;
    try {
      setIsLoading(true);
      const updatedCourse = await courseService.reEditRejectedCourse(course.id);
      setCourse(updatedCourse);
    } catch (err: any) {
      setError(err.message || '重新编辑课程失败');
    } finally {
      setIsLoading(false);
    }
  };
  // 加载课程章节和小节（用于预览）
  useEffect(() => {
    const loadPreviewData = async () => {
      if (!course || activeTab !== 'content') return;
      try {
        setIsLoadingPreview(true);
        // 加载章节
        const chaptersData = await chapterService.getChaptersByCourse(course.id);
        setChapters(chaptersData);
        // 默认选择第一个章节
        if (chaptersData.length > 0 && !selectedChapterId) {
          setSelectedChapterId(chaptersData[0].id);
        }
      } catch (err) {
        console.error('加载预览数据失败:', err);
      } finally {
        setIsLoadingPreview(false);
      }
    };
    loadPreviewData();
  }, [course, activeTab, selectedChapterId]);
  // 根据选中的章节加载小节
  useEffect(() => {
    const loadSections = async (chapterId: number) => {
      if (!chapterId || activeTab !== 'content') return;
      try {
        // 如果已经加载过该章节的小节，则不重复加载
        if (sections[chapterId]) return;
        const sectionData = await sectionService.getSectionsByChapter(chapterId);
        setSections(prev => ({
          ...prev,
          [chapterId]: sectionData
        }));
        // 默认选择第一个小节
        if (sectionData.length > 0 && !selectedSectionId) {
          setSelectedSectionId(sectionData[0].id);
          setActiveSection(sectionData[0]);
        }
      } catch (err) {
        console.error(`加载章节 ${chapterId} 的小节失败:`, err);
      }
    };
    if (selectedChapterId) {
      loadSections(selectedChapterId);
    }
  }, [selectedChapterId, sections, selectedSectionId, activeTab]);
  // 处理小节选择
  const handleSectionSelect = (section: Section) => {
    setSelectedSectionId(section.id);
    setActiveSection(section);
  };
  // 生成预览链接并在新窗口打开
  const handleOpenFullPreview = async () => {
    if (!course) return;
    try {
      const previewData = await courseService.generatePreviewUrl(course.id);
      if (previewData && previewData.url) {
        window.open(`/preview/${previewData.url.split('/').pop()}`, '_blank');
      }
    } catch (err) {
      console.error('生成预览链接失败:', err);
    }
  };
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div>
      </div>
    );
  }
  if (error) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>错误</AlertTitle>
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    );
  }
  if (!course) {
    return (
      <Alert>
        <Info className="h-4 w-4" />
        <AlertTitle>未找到课程</AlertTitle>
        <AlertDescription>找不到指定ID的课程</AlertDescription>
      </Alert>
    );
  }
  return (
    <div className="container mx-auto py-6">
      <Button 
        variant="ghost" 
        className="mb-4" 
        onClick={() => router.push('/dashboard/courses')}
      >
        <ArrowLeft className="h-4 w-4 mr-2" />
        返回课程列表
      </Button>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold tracking-tight">{course.title}</h1>
            <div className="flex items-center space-x-2 mt-2">
              <span className="text-sm text-muted-foreground">创建于 {course.createdAt ? formatDate(course.createdAt) : '未知时间'}</span>
              <span className="text-sm text-muted-foreground">•</span>
              <CourseStatusBadge status={course.status} />
            </div>
          </div>
          <div className="flex space-x-2">
            <Button 
              variant="outline" 
              onClick={handleOpenFullPreview}
            >
              <Eye className="mr-2 h-4 w-4" />
              全屏预览
            </Button>
            {course.status === CourseStatus.DRAFT && (
              <Button onClick={handleSubmitForReview}>
                <FileCheck className="mr-2 h-4 w-4" />
                提交审核
              </Button>
            )}
            {course.status === CourseStatus.REJECTED && (
              <Button onClick={handleReEdit}>
                重新编辑
              </Button>
            )}
          </div>
        </div>
        {course.status === CourseStatus.REJECTED && course.reviewComment && (
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>审核未通过</AlertTitle>
            <AlertDescription>{course.reviewComment}</AlertDescription>
          </Alert>
        )}
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList>
            <TabsTrigger value="info">基本信息</TabsTrigger>
            <TabsTrigger value="cover">封面图片</TabsTrigger>
            <TabsTrigger value="content">
              课程内容
            </TabsTrigger>
          </TabsList>
          <TabsContent value="info" className="mt-6">
            {course.status !== CourseStatus.REVIEWING ? (
              <>
                {course.status === CourseStatus.PUBLISHED || course.status === CourseStatus.UNPUBLISHED ? (
                  <Alert className="mb-4 bg-blue-50 border-blue-200">
                    <Info className="h-4 w-4 text-blue-600" />
                    <AlertTitle className="text-blue-800">课程已发布或已下线</AlertTitle>
                    <AlertDescription className="text-blue-700">
                      您正在编辑已发布或已下线状态的课程。请注意，修改后的内容不会立即对学员可见，需要重新提交审核。
                    </AlertDescription>
                  </Alert>
                ) : null}
                <CourseForm course={course} onSuccess={handleUpdateSuccess} />
              </>
            ) : (
              <div className="rounded-md bg-amber-50 p-4">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <Info className="h-5 w-5 text-amber-400" />
                  </div>
                  <div className="ml-3">
                    <h3 className="text-sm font-medium text-amber-800">课程信息</h3>
                    <div className="mt-2 text-sm text-amber-700">
                      <p>审核中状态的课程暂不支持编辑。您可以使用预览功能查看课程内容。</p>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </TabsContent>
          <TabsContent value="cover" className="mt-6">
            <Card>
              <CardHeader>
                <CardTitle>课程封面</CardTitle>
                <CardDescription>
                  上传吸引人的课程封面图片，推荐尺寸 1280x720 像素
                </CardDescription>
              </CardHeader>
              <CardContent>
                {uploadError && (
                  <Alert variant="destructive" className="mb-6">
                    <AlertCircle className="h-4 w-4" />
                    <AlertTitle>上传失败</AlertTitle>
                    <AlertDescription>{uploadError}</AlertDescription>
                  </Alert>
                )}
                <div className="flex justify-center mb-6">
                  {course.coverUrl ? (
                    <div className="relative w-full max-w-md h-64 rounded-md overflow-hidden">
                      <img
                        src={course.coverUrl}
                        alt={course.title}
                        className="w-full h-full object-cover"
                      />
                    </div>
                  ) : (
                    <div className="border border-dashed border-gray-300 rounded-md p-12 text-center">
                      <Upload className="mx-auto h-12 w-12 text-gray-400" />
                      <p className="mt-2 text-sm text-gray-500">尚未上传封面图片</p>
                    </div>
                  )}
                </div>
                {course.status !== CourseStatus.REVIEWING && (
                  <div className="space-y-4">
                    {course.status === CourseStatus.PUBLISHED || course.status === CourseStatus.UNPUBLISHED ? (
                      <Alert className="mb-4 bg-blue-50 border-blue-200">
                        <Info className="h-4 w-4 text-blue-600" />
                        <AlertDescription className="text-blue-700">
                          您正在编辑已发布或已下线状态的课程封面。请注意，修改后的内容不会立即对学员可见，需要重新提交审核。
                        </AlertDescription>
                      </Alert>
                    ) : null}
                    <div className="flex flex-col space-y-4">
                      <div className="flex items-center space-x-4">
                        <Button 
                          variant="outline"
                          onClick={() => {
                            const input = document.getElementById('cover-upload');
                            if (input) input.click();
                          }}
                        >
                          <Upload className="mr-2 h-4 w-4" />
                          选择图片
                        </Button>
                        <input
                          id="cover-upload"
                          type="file"
                          accept="image/*"
                          onChange={handleCoverChange}
                          className="hidden"
                        />
                        {coverFile && (
                          <span className="text-sm text-gray-600">
                            已选择: {coverFile.name}
                          </span>
                        )}
                      </div>
                      {coverFile && (
                        <Button 
                          onClick={handleCoverUpload} 
                          disabled={isUploading}
                        >
                          {isUploading ? (
                            <>
                              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                              上传中...
                            </>
                          ) : (
                            '上传封面'
                          )}
                        </Button>
                      )}
                    </div>
                    <p className="text-xs text-muted-foreground mt-4">
                      支持JPG、PNG格式，文件大小不超过5MB。推荐使用16:9比例的图片以获得最佳显示效果。
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>
          <TabsContent value="content" className="mt-6">
            <Card>
              <CardHeader className="flex flex-row items-center justify-between">
                <div>
                  <CardTitle>课程内容预览</CardTitle>
                  <CardDescription>
                    预览课程内容展示效果
                  </CardDescription>
                </div>
                <Button 
                  variant="outline" 
                  onClick={handleOpenFullPreview}
                >
                  <Eye className="mr-2 h-4 w-4" />
                  全屏预览
                </Button>
              </CardHeader>
              <CardContent>
                {course.status === CourseStatus.REVIEWING && (
                  <Alert className="mb-4 bg-amber-50 border-amber-200">
                    <Info className="h-4 w-4 text-amber-600" />
                    <AlertDescription className="text-amber-700">
                      请注意：课程正在审核中，您对课程信息的任何修改都会直接影响审核人员看到的内容。
                      建议在审核完成前谨慎修改，除非是为了完善审核人员提出的问题。
                    </AlertDescription>
                  </Alert>
                )}
                {isLoadingPreview ? (
                  <div className="flex items-center justify-center h-64">
                    <Loader2 className="h-8 w-8 animate-spin text-primary" />
                  </div>
                ) : chapters.length === 0 ? (
                  <div className="text-center py-12 border-2 border-dashed rounded-md">
                    <BookOpen className="h-10 w-10 mx-auto text-muted-foreground mb-4" />
                    <h3 className="text-lg font-medium mb-2">尚未添加课程内容</h3>
                    <p className="text-muted-foreground mb-4">请先添加章节和小节内容</p>
                    <Button 
                      onClick={() => router.push(`/dashboard/courses/${course.id}/chapters`)}
                    >
                      <FileEdit className="mr-2 h-4 w-4" />
                      管理课程内容
                    </Button>
                  </div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    {/* 左侧章节导航 */}
                    <div className="md:col-span-1">
                      <div className="border rounded-md">
                        <div className="p-4 bg-muted font-medium border-b">
                          课程章节
                        </div>
                        <div className="max-h-[60vh] overflow-y-auto p-2">
                          <div className="space-y-2">
                            {chapters.map((chapter) => (
                              <div key={chapter.id} className="space-y-1">
                                <Button
                                  variant={selectedChapterId === chapter.id ? "secondary" : "ghost"}
                                  className="w-full justify-start text-left font-medium"
                                  onClick={() => setSelectedChapterId(chapter.id)}
                                >
                                  {chapter.title}
                                </Button>
                                {selectedChapterId === chapter.id && sections[chapter.id] && (
                                  <div className="pl-4 space-y-1 border-l ml-3">
                                    {sections[chapter.id].map((section) => (
                                      <Button
                                        key={section.id}
                                        variant={selectedSectionId === section.id ? "default" : "ghost"}
                                        size="sm"
                                        className="w-full justify-start text-left"
                                        onClick={() => handleSectionSelect(section)}
                                      >
                                        <div className="flex items-center gap-2">
                                          {selectedSectionId === section.id && (
                                            <ChevronRight className="h-3 w-3" />
                                          )}
                                          <span>{section.title}</span>
                                        </div>
                                      </Button>
                                    ))}
                                  </div>
                                )}
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    </div>
                    {/* 右侧内容预览 */}
                    <div className="md:col-span-2">
                      {activeSection ? (
                        <CourseContentPlayer section={activeSection} />
                      ) : (
                        <Card>
                          <CardContent className="py-12 text-center">
                            <p className="text-muted-foreground">请从左侧选择一个小节以查看内容</p>
                          </CardContent>
                        </Card>
                      )}
                    </div>
                  </div>
                )}
              </CardContent>
              <CardFooter className="border-t pt-6">
                <Button 
                  variant="default" 
                  className="ml-auto"
                  onClick={() => router.push(`/dashboard/courses/${course.id}/chapters`)}
                >
                  <FileEdit className="mr-2 h-4 w-4" />
                  管理章节内容
                </Button>
              </CardFooter>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/courses/create/page.tsx">
'use client';
import { useState } from 'react';
import { useRouter } from 'next/navigation';
import CourseForm from '@/components/dashboard/courses/course-form';
import { Course } from '@/types/course';
export default function CreateCoursePage() {
  const router = useRouter();
  // 处理课程创建成功
  const handleSuccess = (course: Course) => {
    // 创建成功后跳转到课程详情页
    router.push(`/dashboard/courses/${course.id}`);
  };
  return (
    <div className="space-y-6">
      <h1 className="text-3xl font-bold tracking-tight">创建新课程</h1>
      <p className="text-muted-foreground">
        填写基本信息创建课程，创建后可以添加章节和内容
      </p>
      <CourseForm onSuccess={handleSuccess} />
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/courses/page.tsx">
'use client';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { AlertCircle, FileEdit, Plus, Search, Trash2, Eye, ExternalLink } from 'lucide-react';
import useCourseStore from '@/stores/course-store';
import { courseService } from '@/services';
import { CourseStatus, CoursePaymentType, Course } from '@/types/course';
import { formatDate } from '../../../utils/date';
import { 
  Pagination, 
  PaginationContent, 
  PaginationItem, 
  PaginationLink, 
  PaginationNext, 
  PaginationPrevious 
} from '@/components/ui/pagination';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { 
  Dialog, 
  DialogContent, 
  DialogDescription, 
  DialogFooter, 
  DialogHeader, 
  DialogTitle, 
  DialogTrigger 
} from '@/components/ui/dialog';
import CourseStatusBadge from '@/components/dashboard/courses/CourseStatusBadge';
import CoursePublishBadge from '@/components/dashboard/courses/CoursePublishBadge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/components/ui/use-toast';
export default function CoursesPage() {
  const router = useRouter();
  const { toast } = useToast();
  const {
    courses,
    totalCourses,
    currentPage,
    pageSize,
    filterTitle,
    filterStatus,
    isLoading,
    error,
    setCourses,
    setPage,
    setFilter,
    setLoading,
    setError
  } = useCourseStore();
  const [deleteDialog, setDeleteDialog] = useState<{open: boolean, courseId: number | null}>({
    open: false,
    courseId: null
  });
  // 当前视图类型: workspace-工作区课程，published-已发布课程
  const [viewType, setViewType] = useState<'workspace' | 'published'>('workspace');
  const [isLoadingPublishedVersion, setIsLoadingPublishedVersion] = useState(false);
  // 课程状态选项
  const statusOptions = [
    { value: null, label: '全部状态' },
    { value: CourseStatus.DRAFT, label: '草稿' },
    { value: CourseStatus.REVIEWING, label: '审核中' },
    { value: CourseStatus.PUBLISHED, label: '已发布' },
    { value: CourseStatus.REJECTED, label: '已拒绝' }
  ];
  // 初始加载
  useEffect(() => {
    if (viewType === 'workspace') {
      loadCourses();
    } else {
      loadPublishedCourses();
    }
  }, [currentPage, pageSize, filterTitle, filterStatus, viewType]);
  // 加载工作区课程列表
  const loadCourses = async () => {
    try {
      setLoading(true);
      setError(null);
      const result = await courseService.getCourseList(
        currentPage - 1, 
        pageSize,
        filterTitle,
        filterStatus as CourseStatus
      );
      // 检查返回结果格式并安全处理
      if (result && typeof result === 'object') {
        if (Array.isArray(result)) {
          // 如果直接返回数组
          setCourses(result, result.length);
        } else if (result.content && Array.isArray(result.content)) {
          // 如果返回分页对象
          setCourses(result.content, result.totalElements || result.content.length);
        } else {
          // 格式不匹配
          setCourses([], 0);
          setError('返回数据格式不正确');
          console.error('API返回格式不匹配:', result);
        }
      } else {
        setCourses([], 0);
        setError('未能获取课程数据');
        console.error('API返回格式不匹配或为空:', result);
      }
    } catch (error: any) {
      console.error('加载课程列表失败:', error);
      setError(error.message || '加载课程列表失败');
      setCourses([], 0);
    } finally {
      setLoading(false);
    }
  };
  // 加载已发布版本课程列表
  const loadPublishedCourses = async () => {
    try {
      setLoading(true);
      setError(null);
      const result = await courseService.getPublishedCoursesByInstitution({
        page: currentPage - 1, 
        size: pageSize,
        keyword: filterTitle,
        status: filterStatus as CourseStatus
      });
      // 检查返回结果格式并安全处理
      if (result && typeof result === 'object') {
        if (Array.isArray(result)) {
          // 如果直接返回数组
          setCourses(result, result.length);
        } else if (result.content && Array.isArray(result.content)) {
          // 如果返回分页对象
          setCourses(result.content, result.totalElements || result.content.length);
        } else {
          // 格式不匹配
          setCourses([], 0);
          setError('返回数据格式不正确');
          console.error('API返回格式不匹配:', result);
        }
      } else {
        setCourses([], 0);
        setError('未能获取课程数据');
        console.error('API返回格式不匹配或为空:', result);
      }
    } catch (error: any) {
      console.error('加载已发布课程列表失败:', error);
      setError(error.message || '加载已发布课程列表失败');
      setCourses([], 0);
    } finally {
      setLoading(false);
    }
  };
  // 创建新课程
  const handleCreateCourse = () => {
    router.push('/dashboard/courses/create');
  };
  // 编辑课程
  const handleEditCourse = (id: number) => {
    router.push(`/dashboard/courses/${id}`);
  };
  // 查看课程
  const handleViewCourse = (id: number) => {
    router.push(`/dashboard/courses/${id}`);
  };
  // 查看发布版本
  const handleViewPublishedVersion = async (courseId: number) => {
    try {
      setIsLoadingPublishedVersion(true);
      const publishedVersion = await courseService.getPublishedVersion(courseId);
      router.push(`/dashboard/courses/${publishedVersion.id}`);
    } catch (error: any) {
      console.error('获取发布版本失败:', error);
      toast({
        title: '获取发布版本失败',
        description: error.message || '无法获取发布版本',
      } as any);
    } finally {
      setIsLoadingPublishedVersion(false);
    }
  };
  // 删除课程
  const handleDeleteClick = (courseId: number) => {
    setDeleteDialog({ open: true, courseId });
  };
  const confirmDelete = async () => {
    if (!deleteDialog.courseId) return;
    try {
      setLoading(true);
      await courseService.deleteCourse(deleteDialog.courseId);
      setDeleteDialog({ open: false, courseId: null });
      loadCourses(); // 重新加载列表
    } catch (error: any) {
      setError(error.message || '删除课程失败');
    } finally {
      setLoading(false);
    }
  };
  // 渲染付费类型
  const renderPaymentType = (type: CoursePaymentType, price?: number) => {
    if (type === CoursePaymentType.FREE) {
      return <span className="text-green-600">免费</span>;
    } else {
      return <span className="text-amber-600">¥ {price || 0}</span>;
    }
  };
  // 计算总页数
  const totalPages = Math.max(1, Math.ceil(totalCourses / pageSize) || 1);
  // 获取分页项
  const getPaginationItems = () => {
    const items = [];
    const maxVisiblePages = 5;
    if (totalPages <= maxVisiblePages) {
      for (let i = 1; i <= totalPages; i++) {
        items.push(i);
      }
    } else {
      // 总是显示第一页
      items.push(1);
      // 计算中间页码的范围
      let start = Math.max(2, currentPage - 1);
      let end = Math.min(totalPages - 1, currentPage + 1);
      // 调整以确保我们显示5个页码
      if (end - start + 1 < 3) {
        if (start === 2) {
          end = Math.min(totalPages - 1, end + 1);
        } else if (end === totalPages - 1) {
          start = Math.max(2, start - 1);
        }
      }
      // 添加省略号
      if (start > 2) {
        items.push('...');
      }
      // 添加中间页码
      for (let i = start; i <= end; i++) {
        items.push(i);
      }
      // 添加省略号
      if (end < totalPages - 1) {
        items.push('...');
      }
      // 总是显示最后一页
      items.push(totalPages);
    }
    return items;
  };
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold tracking-tight">课程管理</h1>
        <Button onClick={handleCreateCourse}>
          <Plus className="mr-2 h-4 w-4" />
          创建课程
        </Button>
      </div>
      {error && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>错误</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}
      {/* 版本切换 */}
      <Tabs value={viewType} onValueChange={(value) => setViewType(value as 'workspace' | 'published')}>
        <TabsList className="mb-4">
          <TabsTrigger value="workspace">工作区课程</TabsTrigger>
          <TabsTrigger value="published">已发布课程</TabsTrigger>
        </TabsList>
        <TabsContent value="workspace" className="space-y-4">
          {/* 搜索和筛选 */}
          <div className="flex gap-4 items-center">
            <div className="relative flex-1 max-w-sm">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="搜索课程..."
                value={filterTitle}
                onChange={(e) => setFilter({ title: e.target.value })}
                className="pl-8"
              />
            </div>
            <Select
              value={filterStatus?.toString() || 'null'}
              onValueChange={(value) => setFilter({ 
                status: value === 'null' ? null : parseInt(value) as CourseStatus 
              })}
            >
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="选择状态" />
              </SelectTrigger>
              <SelectContent>
                {statusOptions.map((option) => (
                  <SelectItem 
                    key={option.value === null ? 'null' : option.value} 
                    value={option.value === null ? 'null' : option.value.toString()}
                  >
                    {option.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          {/* 工作区课程列表 */}
          <Card className="p-6">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>课程名称</TableHead>
                  <TableHead>类型</TableHead>
                  <TableHead>创建时间</TableHead>
                  <TableHead>状态</TableHead>
                  <TableHead>发布状态</TableHead>
                  <TableHead className="w-[200px]">操作</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {courses.map((course) => (
                  <TableRow key={course.id}>
                    <TableCell className="font-medium">{course.title}</TableCell>
                    <TableCell>{renderPaymentType(course.paymentType, course.price)}</TableCell>
                    <TableCell>{course.createdAt ? formatDate(course.createdAt) : '未知时间'}</TableCell>
                    <TableCell><CourseStatusBadge status={course.status} /></TableCell>
                    <TableCell><CoursePublishBadge course={course} /></TableCell>
                    <TableCell>
                      <div className="flex space-x-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleEditCourse(course.id)}
                          title={course.status === CourseStatus.REVIEWING ? "只能预览，不能编辑" : "编辑课程"}
                        >
                          {course.status === CourseStatus.REVIEWING 
                            ? <Eye className="h-4 w-4" /> 
                            : <FileEdit className="h-4 w-4" />}
                        </Button>
                        {course.publishedVersionId && (
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => handleViewPublishedVersion(course.id)}
                            disabled={isLoadingPublishedVersion}
                            title="查看发布版本"
                          >
                            <ExternalLink className="h-4 w-4" />
                          </Button>
                        )}
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleDeleteClick(course.id)}
                          disabled={course.status !== CourseStatus.DRAFT}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
                {/* 空状态 */}
                {courses.length === 0 && !isLoading && (
                  <TableRow>
                    <TableCell colSpan={6} className="text-center py-10">
                      <div className="flex flex-col items-center justify-center space-y-3">
                        <div className="text-muted-foreground">暂无课程数据</div>
                        <Button onClick={handleCreateCourse} variant="outline">
                          <Plus className="mr-2 h-4 w-4" />
                          创建第一个课程
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                )}
                {/* 加载状态 */}
                {isLoading && (
                  <TableRow>
                    <TableCell colSpan={6} className="text-center py-10">
                      <div className="flex items-center justify-center">
                        <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-gray-900"></div>
                        <span className="ml-2">加载中...</span>
                      </div>
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
            {/* 分页 */}
            {totalPages > 1 && (
              <div className="mt-4">
                <Pagination>
                  <PaginationContent>
                    <PaginationItem>
                      <PaginationPrevious 
                        onClick={() => setPage(Math.max(1, currentPage - 1))}
                        className={currentPage === 1 ? 'pointer-events-none opacity-50' : 'cursor-pointer'}
                      />
                    </PaginationItem>
                    {getPaginationItems().map((item, index) => (
                      <PaginationItem key={index}>
                        {item === '...' ? (
                          <span className="px-4 py-2">...</span>
                        ) : (
                          <PaginationLink
                            onClick={() => typeof item === 'number' && setPage(item)}
                            isActive={currentPage === item}
                          >
                            {item}
                          </PaginationLink>
                        )}
                      </PaginationItem>
                    ))}
                    <PaginationItem>
                      <PaginationNext 
                        onClick={() => setPage(Math.min(totalPages, currentPage + 1))}
                        className={currentPage === totalPages ? 'pointer-events-none opacity-50' : 'cursor-pointer'}
                      />
                    </PaginationItem>
                  </PaginationContent>
                </Pagination>
              </div>
            )}
          </Card>
        </TabsContent>
        <TabsContent value="published" className="space-y-4">
          {/* 搜索和筛选 */}
          <div className="flex gap-4 items-center">
            <div className="relative flex-1 max-w-sm">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="搜索已发布课程..."
                value={filterTitle}
                onChange={(e) => setFilter({ title: e.target.value })}
                className="pl-8"
              />
            </div>
          </div>
          {/* 已发布课程列表 */}
          <Card className="p-6">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>课程名称</TableHead>
                  <TableHead>类型</TableHead>
                  <TableHead>创建时间</TableHead>
                  <TableHead>状态</TableHead>
                  <TableHead className="w-[150px]">操作</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {courses.map((course) => (
                  <TableRow key={course.id}>
                    <TableCell className="font-medium">{course.title}</TableCell>
                    <TableCell>{renderPaymentType(course.paymentType, course.price)}</TableCell>
                    <TableCell>{course.createdAt ? formatDate(course.createdAt) : '未知时间'}</TableCell>
                    <TableCell><CourseStatusBadge status={course.status} /></TableCell>
                    <TableCell>
                      <div className="flex space-x-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleViewCourse(course.id)}
                          title="查看发布版本"
                        >
                          <Eye className="h-4 w-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
                {/* 空状态 */}
                {courses.length === 0 && !isLoading && (
                  <TableRow>
                    <TableCell colSpan={5} className="text-center py-10">
                      <div className="flex flex-col items-center justify-center space-y-3">
                        <div className="text-muted-foreground">暂无已发布课程</div>
                      </div>
                    </TableCell>
                  </TableRow>
                )}
                {/* 加载状态 */}
                {isLoading && (
                  <TableRow>
                    <TableCell colSpan={5} className="text-center py-10">
                      <div className="flex items-center justify-center">
                        <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-gray-900"></div>
                        <span className="ml-2">加载中...</span>
                      </div>
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
            {/* 分页 */}
            {totalPages > 1 && (
              <div className="mt-4">
                <Pagination>
                  <PaginationContent>
                    <PaginationItem>
                      <PaginationPrevious 
                        onClick={() => setPage(Math.max(1, currentPage - 1))}
                        className={currentPage === 1 ? 'pointer-events-none opacity-50' : 'cursor-pointer'}
                      />
                    </PaginationItem>
                    {getPaginationItems().map((item, index) => (
                      <PaginationItem key={index}>
                        {item === '...' ? (
                          <span className="px-4 py-2">...</span>
                        ) : (
                          <PaginationLink
                            onClick={() => typeof item === 'number' && setPage(item)}
                            isActive={currentPage === item}
                          >
                            {item}
                          </PaginationLink>
                        )}
                      </PaginationItem>
                    ))}
                    <PaginationItem>
                      <PaginationNext 
                        onClick={() => setPage(Math.min(totalPages, currentPage + 1))}
                        className={currentPage === totalPages ? 'pointer-events-none opacity-50' : 'cursor-pointer'}
                      />
                    </PaginationItem>
                  </PaginationContent>
                </Pagination>
              </div>
            )}
          </Card>
        </TabsContent>
      </Tabs>
      {/* 删除确认对话框 */}
      <Dialog open={deleteDialog.open} onOpenChange={(open) => setDeleteDialog({ ...deleteDialog, open })}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>确认删除</DialogTitle>
            <DialogDescription>
              确定要删除这个课程吗？此操作不可逆。
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setDeleteDialog({ open: false, courseId: null })}>
              取消
            </Button>
            <Button variant="destructive" onClick={confirmDelete} disabled={isLoading}>
              {isLoading ? '删除中...' : '确认删除'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/favorites/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import { Star, Heart, HeartOff, BookOpen, Building, Tag, Clock, AlertCircle } from 'lucide-react';
import { toast } from 'sonner';
import favoriteService, { UserFavoriteVO } from '@/services/favorite-service';
import { format } from 'date-fns';
import { zhCN } from 'date-fns/locale';
import { Page } from '@/types/api';
export default function FavoritesPage() {
  const router = useRouter();
  const [favorites, setFavorites] = useState<UserFavoriteVO[]>([]);
  const [currentPage, setCurrentPage] = useState(0);
  const [pageSize, setPageSize] = useState(9);
  const [totalPages, setTotalPages] = useState(0);
  const [totalElements, setTotalElements] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  // 加载收藏列表
  useEffect(() => {
    const loadFavorites = async () => {
      try {
        setIsLoading(true);
        setError(null);
        const data = await favoriteService.getFavorites(currentPage, pageSize);
        // 添加空值检查
        if (data && data.content) {
          setFavorites(data.content);
          setTotalPages(data.totalPages);
          setTotalElements(data.totalElements);
        } else {
          // 处理空数据情况
          setFavorites([]);
          setTotalPages(0);
          setTotalElements(0);
          console.warn('获取到的收藏数据为空');
        }
      } catch (err: any) {
        console.error('加载收藏列表失败:', err);
        setError(err.message || '加载收藏列表失败');
        toast.error('加载收藏列表失败');
        // 重置数据
        setFavorites([]);
        setTotalPages(0);
        setTotalElements(0);
      } finally {
        setIsLoading(false);
      }
    };
    loadFavorites();
  }, [currentPage, pageSize]);
  // 处理页码变更
  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };
  // 处理取消收藏
  const handleRemoveFavorite = async (courseId: number, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    try {
      await favoriteService.removeFavorite(courseId);
      setFavorites(prevFavorites => prevFavorites.filter(f => f.courseId !== courseId));
      toast.success('已取消收藏');
      // 如果当前页数据为空且不是第一页，则返回上一页
      if (favorites.length === 1 && currentPage > 0) {
        setCurrentPage(currentPage - 1);
      }
    } catch (err: any) {
      console.error('取消收藏失败:', err);
      toast.error('取消收藏失败');
    }
  };
  // 处理课程点击
  const handleCourseClick = (courseId: number) => {
    router.push(`/dashboard/course-detail/${courseId}`);
  };
  // 格式化日期
  const formatDateTime = (dateString: string) => {
    try {
      return format(new Date(dateString), 'yyyy-MM-dd HH:mm', { locale: zhCN });
    } catch (e) {
      return dateString;
    }
  };
  // 课程卡片骨架屏
  const renderSkeletons = () => {
    return Array(9)
      .fill(0)
      .map((_, i) => (
        <Card key={i} className="overflow-hidden">
          <div className="relative h-48">
            <Skeleton className="h-full w-full" />
          </div>
          <CardContent className="p-4 space-y-3">
            <Skeleton className="h-6 w-3/4" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-2/3" />
            <div className="flex justify-between">
              <Skeleton className="h-4 w-16" />
              <Skeleton className="h-4 w-12" />
            </div>
          </CardContent>
        </Card>
      ));
  };
  // 渲染收藏列表
  const renderFavorites = () => {
    if (isLoading) {
      return renderSkeletons();
    }
    if (favorites.length === 0) {
      return (
        <div className="col-span-full flex flex-col items-center justify-center py-12">
          <Heart className="h-12 w-12 text-muted-foreground mb-4 stroke-[1.25px]" />
          <h3 className="text-xl font-semibold mb-2">暂无收藏课程</h3>
          <p className="text-muted-foreground mb-4">您还没有收藏任何课程</p>
          <Button onClick={() => router.push('/dashboard/course-search')}>
            浏览课程
          </Button>
        </div>
      );
    }
    return favorites.map((favorite) => (
      <Card
        key={favorite.id}
        className="overflow-hidden hover:shadow-lg transition-shadow cursor-pointer group"
        onClick={() => handleCourseClick(favorite.courseId)}
      >
        <div className="relative h-48 bg-slate-100">
          {favorite.courseCoverImage ? (
            <img
              src={favorite.courseCoverImage}
              alt={favorite.courseTitle}
              className="absolute inset-0 w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
            />
          ) : (
            <div className="absolute inset-0 flex items-center justify-center bg-slate-200">
              <BookOpen className="h-12 w-12 text-slate-400" />
            </div>
          )}
          <Button
            variant="ghost"
            size="icon"
            className="absolute top-2 right-2 bg-white/80 hover:bg-white/90 rounded-full w-8 h-8 p-1.5"
            onClick={(e) => handleRemoveFavorite(favorite.courseId, e)}
          >
            <HeartOff className="h-4 w-4 text-red-500" />
          </Button>
        </div>
        <CardContent className="p-4 space-y-3">
          <h3 className="font-semibold text-lg line-clamp-1 group-hover:text-primary transition-colors">
            {favorite.courseTitle}
          </h3>
          <div className="flex flex-wrap gap-2 text-xs">
            {favorite.categoryName && (
              <Badge variant="outline" className="flex items-center gap-1 font-normal">
                <Tag className="h-3 w-3" />
                {favorite.categoryName}
              </Badge>
            )}
            {favorite.institutionName && (
              <Badge variant="outline" className="flex items-center gap-1 font-normal">
                <Building className="h-3 w-3" />
                {favorite.institutionName}
              </Badge>
            )}
            <Badge variant="outline" className="flex items-center gap-1 font-normal">
              <Clock className="h-3 w-3" />
              {formatDateTime(favorite.favoriteTime)}
            </Badge>
          </div>
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <Heart className="h-4 w-4 text-red-500 fill-red-500 mr-1" />
              <span className="text-sm">已收藏</span>
            </div>
            <div>
              <span className={`${favorite.coursePrice === '免费' ? 'text-green-600' : 'text-primary'} font-medium`}>
                {favorite.coursePrice}
              </span>
            </div>
          </div>
        </CardContent>
      </Card>
    ));
  };
  // 渲染分页
  const renderPagination = () => {
    if (totalPages <= 1) return null;
    const getPaginationItems = () => {
      let items = [];
      // 前一页按钮
      items.push(
        <PaginationItem key="prev">
          <PaginationPrevious
            onClick={() => currentPage > 0 && handlePageChange(currentPage - 1)}
            className={currentPage === 0 ? 'pointer-events-none opacity-50' : 'cursor-pointer'}
          />
        </PaginationItem>
      );
      // 页码按钮
      const maxVisiblePages = 5;
      const halfVisible = Math.floor(maxVisiblePages / 2);
      let startPage = Math.max(0, currentPage - halfVisible);
      let endPage = Math.min(totalPages - 1, startPage + maxVisiblePages - 1);
      if (endPage - startPage < maxVisiblePages - 1) {
        startPage = Math.max(0, endPage - maxVisiblePages + 1);
      }
      // 第一页
      if (startPage > 0) {
        items.push(
          <PaginationItem key={0}>
            <PaginationLink
              onClick={() => handlePageChange(0)}
              isActive={currentPage === 0}
            >
              1
            </PaginationLink>
          </PaginationItem>
        );
        if (startPage > 1) {
          items.push(
            <PaginationItem key="ellipsis-start">
              <PaginationEllipsis />
            </PaginationItem>
          );
        }
      }
      // 中间页码
      for (let i = startPage; i <= endPage; i++) {
        items.push(
          <PaginationItem key={i}>
            <PaginationLink
              onClick={() => handlePageChange(i)}
              isActive={currentPage === i}
            >
              {i + 1}
            </PaginationLink>
          </PaginationItem>
        );
      }
      // 最后一页
      if (endPage < totalPages - 1) {
        if (endPage < totalPages - 2) {
          items.push(
            <PaginationItem key="ellipsis-end">
              <PaginationEllipsis />
            </PaginationItem>
          );
        }
        items.push(
          <PaginationItem key={totalPages - 1}>
            <PaginationLink
              onClick={() => handlePageChange(totalPages - 1)}
              isActive={currentPage === totalPages - 1}
            >
              {totalPages}
            </PaginationLink>
          </PaginationItem>
        );
      }
      // 下一页按钮
      items.push(
        <PaginationItem key="next">
          <PaginationNext
            onClick={() => currentPage < totalPages - 1 && handlePageChange(currentPage + 1)}
            className={currentPage === totalPages - 1 ? 'pointer-events-none opacity-50' : 'cursor-pointer'}
          />
        </PaginationItem>
      );
      return items;
    };
    return (
      <Pagination>
        <PaginationContent>{getPaginationItems()}</PaginationContent>
      </Pagination>
    );
  };
  if (error) {
    return (
      <div className="container py-6">
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>加载失败</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      </div>
    );
  }
  return (
    <div className="container py-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">我的收藏</h1>
          <p className="text-muted-foreground mt-1">
            共 {totalElements} 个收藏课程
          </p>
        </div>
        <Button
          onClick={() => router.push('/dashboard/course-search')}
          variant="outline"
        >
          浏览更多课程
        </Button>
      </div>
      <Separator />
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {renderFavorites()}
      </div>
      <div className="mt-8 flex justify-center">
        {renderPagination()}
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/institutions/[id]/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { ArrowLeft, Building2, Check, X } from 'lucide-react';
import React from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import reviewerInstitutionService from '@/services/reviewerInstitution';
import { InstitutionApplicationResponse, InstitutionResponse } from '@/types/institution';
interface PageParams {
  params: {
    id: string;
  };
}
export default function InstitutionDetailPage({ params }: PageParams) {
  const router = useRouter();
  const unwrappedParams = React.use(params as any) as { id: string };
  const id = parseInt(unwrappedParams.id);
  const [application, setApplication] = useState<InstitutionApplicationResponse | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isApproving, setIsApproving] = useState(false);
  const [isRejecting, setIsRejecting] = useState(false);
  const [showRejectDialog, setShowRejectDialog] = useState(false);
  const [rejectReason, setRejectReason] = useState('');
  // 定义状态映射
  const statusMap = {
    0: { label: '待审核', color: 'bg-yellow-100 text-yellow-800 border-yellow-200' },
    1: { label: '已通过', color: 'bg-green-100 text-green-800 border-green-200' },
    2: { label: '已拒绝', color: 'bg-red-100 text-red-800 border-red-200' },
  };
  // 获取申请详情
  useEffect(() => {
    if (isNaN(id)) {
      toast.error('无效的申请ID');
      router.push('/dashboard/institutions');
      return;
    }
    const fetchApplicationDetail = async () => {
      setIsLoading(true);
      try {
        const data = await reviewerInstitutionService.getApplicationDetail(id);
        setApplication(data);
      } catch (error) {
        console.error('获取申请详情失败', error);
        toast.error('获取申请详情失败，请重试');
      } finally {
        setIsLoading(false);
      }
    };
    fetchApplicationDetail();
  }, [id, router]);
  // 通过申请
  const handleApprove = async () => {
    if (!application) return;
    setIsApproving(true);
    try {
      const institution = await reviewerInstitutionService.approveApplication(id);
      toast.success('审核通过成功');
      // 更新状态
      setApplication({
        ...application,
        status: 1,
        institutionId: institution.id,
        reviewedAt: new Date().toISOString(),
      });
    } catch (error) {
      console.error('审核通过失败', error);
      toast.error('审核操作失败，请重试');
    } finally {
      setIsApproving(false);
    }
  };
  // 拒绝申请
  const handleReject = async () => {
    if (!application || !rejectReason.trim()) return;
    setIsRejecting(true);
    try {
      await reviewerInstitutionService.rejectApplication(id, rejectReason);
      toast.success('审核拒绝成功');
      // 更新状态
      setApplication({
        ...application,
        status: 2,
        reviewComment: rejectReason,
        reviewedAt: new Date().toISOString(),
      });
      // 关闭弹窗
      setShowRejectDialog(false);
    } catch (error) {
      console.error('审核拒绝失败', error);
      toast.error('审核操作失败，请重试');
    } finally {
      setIsRejecting(false);
    }
  };
  // 状态显示
  const getStatusDisplay = (status: number) => {
    const statusInfo = statusMap[status as keyof typeof statusMap];
    return (
      <Badge className={`${statusInfo.color} border`}>
        {statusInfo.label}
      </Badge>
    );
  };
  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-2">
          <Button variant="outline" size="icon" disabled>
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <Skeleton className="h-8 w-60" />
        </div>
        <Card>
          <CardHeader>
            <Skeleton className="h-6 w-40" />
            <Skeleton className="h-4 w-60" />
          </CardHeader>
          <CardContent className="space-y-6">
            {Array.from({ length: 6 }).map((_, index) => (
              <div key={index} className="space-y-2">
                <Skeleton className="h-4 w-24" />
                <Skeleton className="h-6 w-full" />
              </div>
            ))}
          </CardContent>
        </Card>
      </div>
    );
  }
  if (!application) {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-2">
          <Button variant="outline" size="icon" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h2 className="text-3xl font-bold tracking-tight">申请详情</h2>
        </div>
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-16">
            <Building2 className="h-16 w-16 mb-4 text-muted-foreground" />
            <h3 className="text-xl font-semibold mb-2">未找到申请记录</h3>
            <p className="text-muted-foreground mb-4">
              无法获取ID为 {id} 的申请详情
            </p>
            <Button onClick={() => router.push('/dashboard/institutions')}>
              返回申请列表
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }
  return (
    <div className="space-y-6">
      <div className="flex items-center gap-2">
        <Button
          variant="outline"
          size="icon"
          onClick={() => router.push('/dashboard/institutions')}
        >
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <h2 className="text-3xl font-bold tracking-tight">申请详情</h2>
      </div>
      <Card>
        <CardHeader className="flex flex-col md:flex-row justify-between md:items-center space-y-2 md:space-y-0">
          <div>
            <CardTitle className="text-2xl">{application.name}</CardTitle>
            <CardDescription>
              申请ID：{application.applicationId}
            </CardDescription>
          </div>
          {getStatusDisplay(application.status)}
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-1">
              <h3 className="text-sm font-medium text-muted-foreground">联系人</h3>
              <p>{application.contactPerson}</p>
            </div>
            <div className="space-y-1">
              <h3 className="text-sm font-medium text-muted-foreground">联系电话</h3>
              <p>{application.contactPhone || '未提供'}</p>
            </div>
            <div className="space-y-1">
              <h3 className="text-sm font-medium text-muted-foreground">联系邮箱</h3>
              <p>{application.contactEmail}</p>
            </div>
            <div className="space-y-1">
              <h3 className="text-sm font-medium text-muted-foreground">地址</h3>
              <p>{application.address || '未提供'}</p>
            </div>
            <div className="space-y-1">
              <h3 className="text-sm font-medium text-muted-foreground">申请时间</h3>
              <p>{new Date(application.createdAt).toLocaleString()}</p>
            </div>
            {application.reviewedAt && (
              <div className="space-y-1">
                <h3 className="text-sm font-medium text-muted-foreground">审核时间</h3>
                <p>{new Date(application.reviewedAt).toLocaleString()}</p>
              </div>
            )}
          </div>
          {application.logo && (
            <div className="space-y-2">
              <h3 className="text-sm font-medium text-muted-foreground">机构LOGO</h3>
              <div className="h-40 w-40 rounded-md border overflow-hidden flex items-center justify-center">
                <img
                  src={application.logo}
                  alt={`${application.name} 的LOGO`}
                  className="max-h-full max-w-full object-contain"
                  onError={(e) => {
                    const target = e.target as HTMLImageElement;
                    target.src = 'https://via.placeholder.com/150?text=无图片';
                  }}
                />
              </div>
            </div>
          )}
          <div className="space-y-2">
            <h3 className="text-sm font-medium text-muted-foreground">机构描述</h3>
            <div className="rounded-md border p-4 bg-muted/30">
              <p className="whitespace-pre-wrap">
                {application.description || '未提供描述'}
              </p>
            </div>
          </div>
          {application.status === 2 && application.reviewComment && (
            <div className="space-y-2">
              <h3 className="text-sm font-medium text-muted-foreground">拒绝原因</h3>
              <div className="rounded-md border border-red-200 p-4 bg-red-50 text-red-800">
                <p className="whitespace-pre-wrap">{application.reviewComment}</p>
              </div>
            </div>
          )}
        </CardContent>
        <Separator />
        <CardFooter className="flex justify-between p-6">
          <Button
            variant="outline"
            onClick={() => router.push('/dashboard/institutions')}
          >
            返回列表
          </Button>
          {application.status === 0 && (
            <div className="flex gap-2">
              <Button
                variant="destructive"
                onClick={() => setShowRejectDialog(true)}
                disabled={isApproving || isRejecting}
              >
                <X className="mr-2 h-4 w-4" />
                拒绝申请
              </Button>
              <Button
                variant="default"
                onClick={handleApprove}
                disabled={isApproving || isRejecting}
              >
                {isApproving ? (
                  <span className="flex items-center">
                    <span className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent" />
                    处理中...
                  </span>
                ) : (
                  <>
                    <Check className="mr-2 h-4 w-4" />
                    通过申请
                  </>
                )}
              </Button>
            </div>
          )}
        </CardFooter>
      </Card>
      {/* 拒绝理由弹窗 */}
      <Dialog open={showRejectDialog} onOpenChange={setShowRejectDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>拒绝申请</DialogTitle>
            <DialogDescription>
              请输入拒绝原因，该信息将发送给申请人
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="rejectReason">拒绝原因</Label>
              <Textarea
                id="rejectReason"
                placeholder="请输入拒绝原因..."
                rows={5}
                value={rejectReason}
                onChange={(e) => setRejectReason(e.target.value)}
              />
            </div>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setShowRejectDialog(false)}
              disabled={isRejecting}
            >
              取消
            </Button>
            <Button
              variant="destructive"
              onClick={handleReject}
              disabled={isRejecting || !rejectReason.trim()}
            >
              {isRejecting ? (
                <span className="flex items-center">
                  <span className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent" />
                  处理中...
                </span>
              ) : (
                '确认拒绝'
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/institutions/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { Building2, Eye, Check, X } from 'lucide-react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';
import { Input } from '@/components/ui/input';
import { Skeleton } from '@/components/ui/skeleton';
import reviewerInstitutionService from '@/services/reviewerInstitution';
import { InstitutionApplicationResponse } from '@/types/institution';
export default function InstitutionsPage() {
  const router = useRouter();
  const [applications, setApplications] = useState<InstitutionApplicationResponse[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(0);
  const [totalPages, setTotalPages] = useState(1);
  const [totalItems, setTotalItems] = useState(0);
  const [status, setStatus] = useState<string>('0'); // 默认显示待审核
  const [searchTerm, setSearchTerm] = useState('');
  // 定义状态映射
  const statusMap = {
    '0': { label: '待审核', color: 'bg-yellow-100 text-yellow-800 border-yellow-200' },
    '1': { label: '已通过', color: 'bg-green-100 text-green-800 border-green-200' },
    '2': { label: '已拒绝', color: 'bg-red-100 text-red-800 border-red-200' },
  };
  // 加载数据
  useEffect(() => {
    fetchApplications();
  }, [currentPage, status, searchTerm]);
  // 获取机构申请列表
  const fetchApplications = async () => {
    setIsLoading(true);
    try {
      const params = {
        page: currentPage,
        size: 10,
        status: status === 'all' ? undefined : parseInt(status),
        ...(searchTerm && { name: searchTerm }),
      };
      const result = await reviewerInstitutionService.getApplications(params);
      setApplications(result.content);
      setTotalPages(result.totalPages);
      setTotalItems(result.totalElements);
    } catch (error) {
      console.error('获取机构申请列表失败', error);
      toast.error('获取机构申请列表失败，请重试');
    } finally {
      setIsLoading(false);
    }
  };
  // 查看申请详情
  const handleViewDetail = (id: number) => {
    router.push(`/dashboard/institutions/${id}`);
  };
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">机构审核</h2>
          <p className="text-muted-foreground">
            审核机构申请，确保平台机构的合规性和质量
          </p>
        </div>
      </div>
      <div className="flex items-center justify-between gap-4">
        <div className="flex flex-1 items-center gap-2">
          <Input
            placeholder="搜索机构名称..."
            className="max-w-xs"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <Button
            variant="outline"
            onClick={() => {
              setSearchTerm('');
              setCurrentPage(0);
            }}
          >
            重置
          </Button>
        </div>
        <Select
          value={status}
          onValueChange={(value) => {
            setStatus(value);
            setCurrentPage(0);
          }}
        >
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="选择状态" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="0">待审核</SelectItem>
            <SelectItem value="1">已通过</SelectItem>
            <SelectItem value="2">已拒绝</SelectItem>
            <SelectItem value="all">全部状态</SelectItem>
          </SelectContent>
        </Select>
      </div>
      <Card>
        <CardHeader>
          <CardTitle>机构申请列表</CardTitle>
          <CardDescription>
            {totalItems > 0
              ? `共 ${totalItems} 条申请记录，第 ${currentPage + 1}/${totalPages} 页`
              : '暂无申请记录'}
          </CardDescription>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            // 加载骨架屏
            <div className="space-y-4">
              {Array.from({ length: 5 }).map((_, index) => (
                <div key={index} className="flex items-center gap-4">
                  <Skeleton className="h-12 w-12 rounded-full" />
                  <div className="space-y-2 flex-1">
                    <Skeleton className="h-4 w-1/3" />
                    <Skeleton className="h-4 w-1/2" />
                  </div>
                  <Skeleton className="h-8 w-24" />
                </div>
              ))}
            </div>
          ) : (
            <>
              {applications.length === 0 ? (
                <div className="flex flex-col items-center justify-center h-60 text-muted-foreground">
                  <Building2 className="h-16 w-16 mb-4 opacity-20" />
                  <p className="text-lg font-medium">暂无申请记录</p>
                  <p className="text-sm">当前筛选条件下没有找到机构申请</p>
                </div>
              ) : (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>申请ID</TableHead>
                      <TableHead>机构名称</TableHead>
                      <TableHead>联系人</TableHead>
                      <TableHead>联系方式</TableHead>
                      <TableHead>申请时间</TableHead>
                      <TableHead>状态</TableHead>
                      <TableHead className="text-right">操作</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {applications.map((application) => (
                      <TableRow key={application.id}>
                        <TableCell className="font-medium">
                          {application.applicationId}
                        </TableCell>
                        <TableCell>{application.name}</TableCell>
                        <TableCell>{application.contactPerson}</TableCell>
                        <TableCell>
                          {application.contactPhone || application.contactEmail}
                        </TableCell>
                        <TableCell>
                          {new Date(application.createdAt).toLocaleString()}
                        </TableCell>
                        <TableCell>
                          <Badge
                            className={
                              statusMap[
                                application.status.toString() as keyof typeof statusMap
                              ].color + ' border'
                            }
                          >
                            {
                              statusMap[
                                application.status.toString() as keyof typeof statusMap
                              ].label
                            }
                          </Badge>
                        </TableCell>
                        <TableCell className="text-right">
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleViewDetail(application.id)}
                            title="查看详情"
                          >
                            <Eye className="h-4 w-4" />
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              )}
              {/* 分页 */}
              {applications.length > 0 && (
                <Pagination className="mt-6">
                  <PaginationContent>
                    <PaginationItem>
                      <PaginationPrevious
                        onClick={() => setCurrentPage((prev) => Math.max(0, prev - 1))}
                        className={currentPage === 0 ? 'pointer-events-none opacity-50' : ''}
                      />
                    </PaginationItem>
                    {Array.from({ length: totalPages }).map((_, index) => {
                      // 只显示当前页面附近的页码
                      if (
                        index === 0 ||
                        index === totalPages - 1 ||
                        (index >= currentPage - 1 && index <= currentPage + 1)
                      ) {
                        return (
                          <PaginationItem key={index}>
                            <PaginationLink
                              isActive={currentPage === index}
                              onClick={() => setCurrentPage(index)}
                            >
                              {index + 1}
                            </PaginationLink>
                          </PaginationItem>
                        );
                      }
                      // 添加省略号
                      if (
                        (index === 1 && currentPage > 2) ||
                        (index === totalPages - 2 && currentPage < totalPages - 3)
                      ) {
                        return (
                          <PaginationItem key={index}>
                            <span className="px-4 py-2">...</span>
                          </PaginationItem>
                        );
                      }
                      return null;
                    })}
                    <PaginationItem>
                      <PaginationNext
                        onClick={() =>
                          setCurrentPage((prev) => Math.min(totalPages - 1, prev + 1))
                        }
                        className={
                          currentPage === totalPages - 1 ? 'pointer-events-none opacity-50' : ''
                        }
                      />
                    </PaginationItem>
                  </PaginationContent>
                </Pagination>
              )}
            </>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/layout.tsx">
'use client';
import { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { useAuthStore } from '@/stores/auth-store';
import Sidebar from '@/components/dashboard/sidebar';
import Header from '@/components/dashboard/header';
export default function DashboardLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const router = useRouter();
  const { user, isAuthenticated, isLoading, refreshToken } = useAuthStore();
  // 检查认证状态
  useEffect(() => {
    const checkAuth = async () => {
      if (!isAuthenticated && !isLoading) {
        try {
          await refreshToken();
        } catch (error) {
          toast.error('您的会话已过期，请重新登录');
          router.push('/login');
        }
      }
    };
    checkAuth();
  }, [isAuthenticated, isLoading, refreshToken, router]);
  // 加载状态
  if (isLoading) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="text-center">
          <div className="inline-block animate-spin rounded-full border-4 border-solid border-primary border-t-transparent h-8 w-8 mr-2"></div>
          <p className="mt-2 text-muted-foreground">加载中...</p>
        </div>
      </div>
    );
  }
  return (
    <div className="min-h-screen flex flex-col md:flex-row bg-muted/20">
      {/* 侧边栏 */}
      <Sidebar />
      {/* 主内容区 */}
      <div className="flex-1 flex flex-col min-h-screen">
        <Header />
        <main className="flex-1 p-4 md:p-6">
          {children}
        </main>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/media/[id]/layout.tsx">
import React from 'react';
export default function MediaDetailLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      {children}
    </>
  );
}
</file>

<file path="front/src/app/dashboard/media/[id]/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import React from 'react';
import { 
  ArrowLeft,
  FileVideo,
  FileImage,
  FileAudio,
  File,
  FileText,
  Trash2,
  Download,
  Share2,
  Edit,
  Save,
  X,
  RefreshCw
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { mediaService, MediaVO } from '@/services/media-service';
import { Badge } from '@/components/ui/badge';
// 媒体类型
const MEDIA_TYPES = {
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  DOCUMENT: 'DOCUMENT',
  OTHER: 'OTHER'
};
// 媒体状态
const MEDIA_STATUS = {
  UPLOADING: 'UPLOADING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};
// 使用MediaVO类型作为我们的媒体详情类型，避免类型不匹配
type MediaDetail = MediaVO & {
  format?: string; // 服务端返回的MediaVO可能没有这些字段，所以标记为可选
  // 以下字段可能不在原始MediaVO中，我们在客户端扩展它们
  customResolution?: string;
  customDuration?: number;
  customThumbnail?: string;
};
// 媒体资源详情页面
export default function MediaDetailPage({ params }: { params: { id: string } }) {
  // 使用React.use()解包params - 按照Next.js建议处理
  const unwrappedParams = React.use(params as any) as { id: string };
  const id = unwrappedParams.id;
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [media, setMedia] = useState<MediaDetail | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [editTitle, setEditTitle] = useState('');
  const [editDescription, setEditDescription] = useState('');
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  // 加载媒体详情
  useEffect(() => {
    fetchMediaDetail();
  }, [id]); // 使用解包后的id
  // 获取媒体详情
  const fetchMediaDetail = async () => {
    setIsLoading(true);
    try {
      // 使用解包后的id参数
      const response = await mediaService.getMediaInfo(parseInt(id));
      if (response && response.data) {
        // 扩展服务器返回的MediaVO，添加我们需要的其他字段
        const mediaData: MediaDetail = {
          ...response.data,
          format: getFileFormat(response.data.originalFilename),
          // 后端可能会提供以下信息，如果没有则保持为undefined
          customDuration: response.data.type === MEDIA_TYPES.VIDEO ? 0 : undefined,
          customResolution: response.data.type === MEDIA_TYPES.VIDEO || response.data.type === MEDIA_TYPES.IMAGE 
            ? '未知' : undefined,
          customThumbnail: undefined
        };
        setMedia(mediaData);
        setEditTitle(mediaData.title);
        setEditDescription(mediaData.description || '');
        // 如果是视频或图片，尝试获取访问URL
        if (mediaData.type === MEDIA_TYPES.VIDEO || mediaData.type === MEDIA_TYPES.IMAGE) {
          fetchMediaAccessUrl(mediaData.id);
        }
      } else {
        toast.error('获取媒体详情失败：没有返回数据');
      }
      setIsLoading(false);
    } catch (error) {
      console.error('获取媒体详情失败:', error);
      toast.error('获取媒体详情失败');
      setIsLoading(false);
    }
  };
  // 获取媒体访问URL
  const fetchMediaAccessUrl = async (mediaId: number) => {
    try {
      console.log('尝试获取媒体访问URL，mediaId:', mediaId);
      const response = await mediaService.getMediaAccessUrl(mediaId);
      console.log('获取媒体访问URL响应:', response);
      if (response && response.data && response.data.accessUrl) {
        console.log('获取到媒体访问URL:', response.data.accessUrl);
        // 更新媒体对象的访问URL
        setMedia(prev => {
          if (!prev) return null;
          const updated = {
            ...prev,
            accessUrl: response.data.accessUrl
          };
          console.log('更新后的media对象:', updated);
          return updated;
        });
      } else {
        console.error('获取媒体访问URL失败：没有返回有效的URL', response);
        toast.error('无法加载媒体预览：获取访问URL失败');
      }
    } catch (error) {
      console.error('获取媒体访问URL失败:', error);
      toast.error('无法加载媒体预览：API错误');
    }
  };
  // 获取文件格式
  const getFileFormat = (filename: string): string => {
    const ext = filename.split('.').pop()?.toUpperCase() || 'UNKNOWN';
    return ext;
  };
  // 获取媒体图标
  const getMediaIcon = (type: string) => {
    switch (type) {
      case MEDIA_TYPES.VIDEO: return <FileVideo className="h-10 w-10 text-blue-500" />;
      case MEDIA_TYPES.AUDIO: return <FileAudio className="h-10 w-10 text-yellow-500" />;
      case MEDIA_TYPES.IMAGE: return <FileImage className="h-10 w-10 text-green-500" />;
      case MEDIA_TYPES.DOCUMENT: return <FileText className="h-10 w-10 text-red-500" />;
      default: return <File className="h-10 w-10 text-gray-500" />;
    }
  };
  // 格式化文件大小
  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return bytes + ' B';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(2) + ' KB';
    if (bytes < 1024 * 1024 * 1024) return (bytes / (1024 * 1024)).toFixed(2) + ' MB';
    return (bytes / (1024 * 1024 * 1024)).toFixed(2) + ' GB';
  };
  // 格式化时长
  const formatDuration = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const remainingSeconds = seconds % 60;
    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
    }
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };
  // 获取状态文本
  const getStatusText = (status: string): string => {
    switch (status) {
      case MEDIA_STATUS.UPLOADING: return '上传中';
      case MEDIA_STATUS.PROCESSING: return '处理中';
      case MEDIA_STATUS.COMPLETED: return '已完成';
      case MEDIA_STATUS.FAILED: return '失败';
      default: return '未知';
    }
  };
  // 获取状态样式
  const getStatusStyle = (status: string): string => {
    switch (status) {
      case MEDIA_STATUS.UPLOADING: return 'text-blue-500';
      case MEDIA_STATUS.PROCESSING: return 'text-yellow-500';
      case MEDIA_STATUS.COMPLETED: return 'text-green-500';
      case MEDIA_STATUS.FAILED: return 'text-red-500';
      default: return 'text-gray-500';
    }
  };
  // 获取状态徽章
  const getStatusBadge = (status: string) => {
    let variant: 'default' | 'secondary' | 'destructive' | 'outline' = 'outline';
    let label = '未知';
    switch (status) {
      case MEDIA_STATUS.UPLOADING:
        variant = 'secondary';
        label = '上传中';
        break;
      case MEDIA_STATUS.PROCESSING:
        variant = 'secondary';
        label = '处理中';
        break;
      case MEDIA_STATUS.COMPLETED:
        variant = 'default';
        label = '已完成';
        break;
      case MEDIA_STATUS.FAILED:
        variant = 'destructive';
        label = '失败';
        break;
    }
    return <Badge variant={variant}>{label}</Badge>;
  };
  // 处理保存编辑
  const handleSaveEdit = async () => {
    try {
      // TODO: 替换为实际API调用
      // await mediaService.updateMedia(media.id, {
      //   title: editTitle,
      //   description: editDescription
      // });
      // 模拟更新
      setMedia(prev => prev ? {
        ...prev,
        title: editTitle,
        description: editDescription
      } : null);
      setIsEditing(false);
      toast.success('更新成功');
    } catch (error) {
      toast.error('更新失败');
    }
  };
  // 处理删除
  const handleDelete = async () => {
    if (!media) return;
    try {
      await mediaService.deleteMedia(media.id);
      setDeleteDialogOpen(false);
      toast.success('删除成功');
      router.push('/dashboard/media');
    } catch (error) {
      console.error('删除失败:', error);
      toast.error('删除失败');
    }
  };
  if (isLoading) {
    return (
      <div className="p-6 space-y-6">
        <div className="flex items-center gap-4">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => router.back()}
          >
            <ArrowLeft className="h-5 w-5" />
          </Button>
          <Skeleton className="h-8 w-48" />
        </div>
        <Card>
          <CardHeader>
            <Skeleton className="h-6 w-32" />
            <Skeleton className="h-4 w-24" />
          </CardHeader>
          <CardContent className="space-y-4">
            <Skeleton className="h-64 w-full" />
            <div className="space-y-2">
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-2/3" />
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }
  if (!media) {
    return (
      <div className="p-6">
        <Card>
          <CardHeader>
            <CardTitle>资源不存在</CardTitle>
            <CardDescription>
              该媒体资源可能已被删除或您没有访问权限
            </CardDescription>
          </CardHeader>
          <CardFooter>
            <Button
              variant="outline"
              onClick={() => router.push('/dashboard/media')}
            >
              返回列表
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }
  return (
    <div className="p-6 space-y-6">
      {/* 顶部导航 */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => router.back()}
          >
            <ArrowLeft className="h-5 w-5" />
          </Button>
          <div>
            <h1 className="text-2xl font-bold tracking-tight">媒体资源详情</h1>
            <p className="text-muted-foreground">查看和管理媒体资源</p>
          </div>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => window.location.reload()}
          >
            <RefreshCw className="h-4 w-4 mr-2" />
            刷新
          </Button>
          <Dialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
            <DialogTrigger asChild>
              <Button variant="destructive" size="sm">
                <Trash2 className="h-4 w-4 mr-2" />
                删除资源
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>确认删除</DialogTitle>
                <DialogDescription>
                  您确定要删除这个资源吗？此操作无法撤销。
                </DialogDescription>
              </DialogHeader>
              <DialogFooter>
                <Button
                  variant="outline"
                  onClick={() => setDeleteDialogOpen(false)}
                >
                  取消
                </Button>
                <Button
                  variant="destructive"
                  onClick={handleDelete}
                >
                  确认删除
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
      </div>
      {/* 资源信息 */}
      <div className="grid gap-6 md:grid-cols-3">
        {/* 主要信息 */}
        <Card className="md:col-span-2">
          <CardHeader>
            <div className="flex items-start justify-between">
              <div className="space-y-1">
                {isEditing ? (
                  <div className="space-y-2">
                    <Input
                      value={editTitle}
                      onChange={(e) => setEditTitle(e.target.value)}
                      placeholder="输入资源标题"
                    />
                    <Textarea
                      value={editDescription}
                      onChange={(e) => setEditDescription(e.target.value)}
                      placeholder="输入资源描述"
                      rows={3}
                    />
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        onClick={handleSaveEdit}
                      >
                        <Save className="h-4 w-4 mr-2" />
                        保存
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          setIsEditing(false);
                          setEditTitle(media.title);
                          setEditDescription(media.description || '');
                        }}
                      >
                        <X className="h-4 w-4 mr-2" />
                        取消
                      </Button>
                    </div>
                  </div>
                ) : (
                  <>
                    <div className="flex items-center gap-2">
                      <h2 className="text-xl font-semibold">{media.title}</h2>
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-6 w-6"
                        onClick={() => setIsEditing(true)}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                    </div>
                    <p className="text-muted-foreground">
                      {media.description || '无描述'}
                    </p>
                  </>
                )}
              </div>
            </div>
          </CardHeader>
          <CardContent>
            {/* 预览区域 */}
            <div className="aspect-video bg-slate-100 dark:bg-slate-900 rounded-lg mb-4 flex items-center justify-center overflow-hidden">
              {media.type === MEDIA_TYPES.VIDEO && media.accessUrl ? (
                <video
                  key={media.accessUrl}
                  src={media.accessUrl}
                  controls
                  autoPlay={false}
                  className="w-full h-full rounded-lg"
                  poster={media.customThumbnail}
                  onError={(e) => {
                    console.error('视频加载错误:', e);
                    toast.error('视频加载失败，请刷新页面重试');
                  }}
                >
                  您的浏览器不支持视频播放
                </video>
              ) : media.type === MEDIA_TYPES.AUDIO && media.accessUrl ? (
                <audio
                  key={media.accessUrl}
                  src={media.accessUrl}
                  controls
                  autoPlay={false}
                  className="w-full max-w-md"
                  onError={(e) => {
                    console.error('音频加载错误:', e);
                    toast.error('音频加载失败，请刷新页面重试');
                  }}
                >
                  您的浏览器不支持音频播放
                </audio>
              ) : media.type === MEDIA_TYPES.IMAGE && media.accessUrl ? (
                <img
                  key={media.accessUrl}
                  src={media.accessUrl}
                  alt={media.title}
                  className="max-h-full rounded-lg"
                  onError={(e) => {
                    console.error('图片加载错误:', e);
                    toast.error('图片加载失败，请刷新页面重试');
                  }}
                />
              ) : media.type === MEDIA_TYPES.DOCUMENT && media.accessUrl ? (
                <iframe 
                  key={media.accessUrl}
                  src={media.accessUrl} 
                  className="w-full h-full border-0"
                  title={media.title}
                  loading="lazy"
                  sandbox="allow-scripts allow-same-origin"
                  onError={(e) => {
                    console.error('文档加载错误:', e);
                    toast.error('文档加载失败，请刷新页面重试');
                  }}
                />
              ) : (
                <div className="text-center">
                  {getMediaIcon(media.type)}
                  <p className="text-sm text-muted-foreground mt-2">
                    {media.type === MEDIA_TYPES.DOCUMENT 
                      ? '正在加载文档预览...' 
                      : media.type === MEDIA_TYPES.VIDEO || media.type === MEDIA_TYPES.AUDIO || media.type === MEDIA_TYPES.IMAGE
                        ? '正在加载预览...' 
                        : '预览不可用'}
                  </p>
                  {(media.type === MEDIA_TYPES.VIDEO || media.type === MEDIA_TYPES.AUDIO || media.type === MEDIA_TYPES.IMAGE || media.type === MEDIA_TYPES.DOCUMENT) && !media.accessUrl && (
                    <Button 
                      variant="outline" 
                      size="sm" 
                      className="mt-2"
                      onClick={() => fetchMediaAccessUrl(media.id)}
                    >
                      <RefreshCw className="h-4 w-4 mr-2" />
                      重新加载
                    </Button>
                  )}
                </div>
              )}
            </div>
            {/* 操作按钮 */}
            <div className="flex gap-2">
              <Button variant="outline" className="flex-1">
                <Download className="h-4 w-4 mr-2" />
                下载
              </Button>
              <Button variant="outline" className="flex-1">
                <Share2 className="h-4 w-4 mr-2" />
                分享
              </Button>
            </div>
          </CardContent>
        </Card>
        {/* 详细信息 */}
        <Card>
          <CardHeader>
            <CardTitle>资源信息</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">状态</span>
                <span className={getStatusStyle(media.status)}>
                  {getStatusText(media.status)}
                </span>
              </div>
              <Separator />
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">文件大小</span>
                <span>{formatFileSize(media.size)}</span>
              </div>
              <Separator />
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">文件格式</span>
                <span>{media.format || getFileFormat(media.originalFilename)}</span>
              </div>
              <Separator />
              {media.customDuration !== undefined && (
                <>
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">时长</span>
                    <span>{media.customDuration > 0 ? formatDuration(media.customDuration) : '未知'}</span>
                  </div>
                  <Separator />
                </>
              )}
              {media.customResolution && (
                <>
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">分辨率</span>
                    <span>{media.customResolution}</span>
                  </div>
                  <Separator />
                </>
              )}
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">原始文件名</span>
                <span className="truncate max-w-[200px]" title={media.originalFilename}>
                  {media.originalFilename}
                </span>
              </div>
              <Separator />
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">上传时间</span>
                <span>{new Date(media.uploadTime).toLocaleString()}</span>
              </div>
              {media.lastAccessTime && (
                <>
                  <Separator />
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">最后访问</span>
                    <span>{new Date(media.lastAccessTime).toLocaleString()}</span>
                  </div>
                </>
              )}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/media/layout.tsx">
import React from 'react';
export default function MediaLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      {children}
    </>
  );
}
</file>

<file path="front/src/app/dashboard/media/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { 
  Upload, 
  FileVideo, 
  FileImage, 
  FileAudio, 
  File, 
  FileText, 
  Trash2, 
  RefreshCw,
  Plus,
  Video,
  Music,
  Image,
  Play
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';
import { mediaService, MediaType, MediaStatus, MediaQueryParams } from '@/services/media-service';
import { Badge } from '@/components/ui/badge';
// 媒体类型
const MEDIA_TYPES = {
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  DOCUMENT: 'DOCUMENT',
  OTHER: 'OTHER'
};
// 媒体状态
const MEDIA_STATUS = {
  UPLOADING: 'UPLOADING', 
  PROCESSING: 'PROCESSING',
  READY: 'READY',
  ERROR: 'ERROR'
};
// 分页参数
interface PaginationParams {
  page: number;
  size: number;
  sort?: string;
}
// 媒体列表项
interface MediaItem {
  id: number;
  title: string;
  description?: string;
  type: string; // 'VIDEO', 'AUDIO', 'IMAGE', 'DOCUMENT', 'OTHER'
  size: number;
  originalFilename: string;
  status: string;
  institutionId: number;
  uploaderId: number;
  uploadTime: string;
  lastAccessTime?: string;
  accessUrl?: string;
}
// 文件上传初始化请求
interface UploadInitRequest {
  title: string;
  description?: string;
  filename: string;
  contentType: string;
  fileSize: number;
  chunkSize?: number;
}
// 媒体资源页面
export default function MediaPage() {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState<string>('all');
  const [isLoading, setIsLoading] = useState(true);
  const [mediaList, setMediaList] = useState<MediaItem[]>([]);
  const [totalItems, setTotalItems] = useState(0);
  const [pagination, setPagination] = useState<MediaQueryParams>({ page: 0, size: 10 });
  const [typeStats, setTypeStats] = useState<Record<string, number>>({
    'all': 0,
    [MediaType.VIDEO]: 0,
    [MediaType.AUDIO]: 0,
    [MediaType.IMAGE]: 0,
    [MediaType.DOCUMENT]: 0
  });
  const [uploadDialogOpen, setUploadDialogOpen] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [isUploading, setIsUploading] = useState(false);
  const [uploadingMediaId, setUploadingMediaId] = useState<number | null>(null);
  const [uploadTitle, setUploadTitle] = useState('');
  const [uploadDescription, setUploadDescription] = useState('');
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  // 加载媒体列表
  useEffect(() => {
    fetchMediaList();
  }, [pagination, activeTab]);
  // 获取媒体列表
  const fetchMediaList = async () => {
    setIsLoading(true);
    try {
      // 构建查询参数
      const queryParams: any = {
        page: pagination.page,
        size: pagination.size
      };
      // 如果不是"全部"，则添加类型筛选条件
      if (activeTab !== 'all') {
        // 确保类型参数正确设置
        queryParams.type = activeTab;
        console.log(`筛选媒体类型: ${activeTab}`);
      }
      console.log('发送到后端的查询参数:', JSON.stringify(queryParams));
      // 调用API获取媒体列表
      const response = await mediaService.getMediaList(queryParams);
      // 检查响应数据
      if (response && response.data) {
        const items = response.data.content;
        const total = response.data.totalElements;
        console.log(`获取到 ${items.length} 条媒体项，总计 ${total} 项`);
        // 检查响应数据是否符合筛选条件
        if (items.length > 0) {
          const typeSet = new Set(items.map(item => item.type));
          console.log('返回的媒体类型:', Array.from(typeSet));
          // 如果指定了特定类型，验证响应数据是否符合筛选条件
          if (activeTab !== 'all') {
            const matchingItems = items.filter(item => item.type === activeTab);
            console.log(`筛选类型 ${activeTab} 的匹配项: ${matchingItems.length}/${items.length}`);
            // 如果有数据但没有匹配项，说明后端筛选可能有问题
            if (matchingItems.length === 0 && items.length > 0) {
              console.warn('警告: 后端返回的数据可能未正确筛选');
              // 在前端手动筛选
              console.log(`手动筛选 ${activeTab} 类型的媒体`);
              setMediaList(matchingItems);
              setTotalItems(matchingItems.length);
              updateTypeStats(matchingItems, matchingItems.length);
      setIsLoading(false);
              return;
            }
            // 如果存在非匹配项，在控制台警告
            if (matchingItems.length < items.length) {
              console.warn(`警告: 后端返回了 ${items.length - matchingItems.length} 个不匹配的项目`);
              // 在前端手动筛选
              console.log(`手动筛选 ${activeTab} 类型的媒体`);
              setMediaList(matchingItems);
              setTotalItems(matchingItems.length);
              updateTypeStats(matchingItems, matchingItems.length);
              setIsLoading(false);
              return;
            }
          }
        }
        // 更新UI
        setMediaList(items);
        setTotalItems(total);
        updateTypeStats(items, total);
        // 为文档和其他媒体类型预加载访问URL
        items.forEach(item => {
          if ((item.type === MediaType.VIDEO || 
               item.type === MediaType.IMAGE) && !item.accessUrl) {
            preloadMediaAccessUrl(item.id);
          }
        });
      } else {
        console.warn('获取媒体列表返回无数据');
        setMediaList([]);
        setTotalItems(0);
      }
    } catch (error) {
      console.error('获取媒体列表失败:', error);
      toast.error('获取媒体列表失败');
      setMediaList([]);
      setTotalItems(0);
    } finally {
      setIsLoading(false);
    }
  };
  // 预加载媒体访问URL
  const preloadMediaAccessUrl = async (mediaId: number) => {
    try {
      const response = await mediaService.getMediaAccessUrl(mediaId);
      if (response && response.data && response.data.accessUrl) {
        console.log(`预加载媒体(ID:${mediaId})访问URL成功`);
        // 更新mediaList中对应项的accessUrl
        setMediaList(prev => 
          prev.map(item => 
            item.id === mediaId ? { ...item, accessUrl: response.data.accessUrl } : item
          )
        );
      }
    } catch (error) {
      console.error(`预加载媒体(ID:${mediaId})访问URL失败:`, error);
    }
  };
  // 更新类型统计数据的函数
  const updateTypeStats = (mediaItems: MediaItem[], total: number) => {
    // 如果是"全部"标签，计算各类型数量
    if (activeTab === 'all' && mediaItems.length > 0) {
      const stats: Record<string, number> = {
        'all': total,
        [MediaType.VIDEO]: 0,
        [MediaType.AUDIO]: 0,
        [MediaType.IMAGE]: 0,
        [MediaType.DOCUMENT]: 0,
        [MediaType.OTHER]: 0,
      };
      // 计算每种类型的数量
      mediaItems.forEach(item => {
        if (Object.values(MediaType).includes(item.type as MediaType)) {
          stats[item.type] += 1;
        } else {
          stats[MediaType.OTHER] += 1;
        }
      });
      setTypeStats(stats);
      console.log('媒体类型统计:', stats);
    } else if (activeTab !== 'all') {
      // 如果是特定类型标签，只更新当前类型的统计
      setTypeStats(prev => ({
        ...prev,
        [activeTab]: mediaItems.length
      }));
    }
  };
  // 处理页码更改
  const handlePageChange = (newPage: number) => {
    setPagination({ ...pagination, page: newPage });
  };
  // 处理媒体类型过滤
  const handleTabChange = (value: string) => {
    // 记录从哪个类型切换到哪个类型
    console.log(`媒体类型筛选: 从 ${activeTab} 切换到 ${value}`);
    if (value === activeTab) {
      // 如果点击当前活动标签，不做操作
      return;
    }
    // 设置新的活动标签
    setActiveTab(value);
    // 清空当前列表，以明确显示加载状态
    setMediaList([]);
    // 重置到第一页
    setPagination({ ...pagination, page: 0 });
    // 显示加载提示
    toast.info(`正在加载${getMediaTypeName(value)}资源...`);
  };
  // 获取媒体缩略图或占位图标
  const getMediaPreview = (media: MediaItem) => {
    // 针对不同类型返回不同的预览元素
    switch (media.type) {
      case MediaType.VIDEO:
        return (
          <div className="relative w-full aspect-video bg-blue-50 dark:bg-blue-950/20 rounded-t-lg overflow-hidden flex items-center justify-center">
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="bg-blue-100 dark:bg-blue-900/30 rounded-full p-4">
                <Video className="h-12 w-12 text-blue-600 dark:text-blue-400" />
              </div>
            </div>
            <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity flex items-end justify-center pb-4 z-10">
              <Button 
                variant="secondary" 
                size="sm"
                className="opacity-85"
                onClick={(e) => {
                  e.stopPropagation();
                  router.push(`/dashboard/media/${media.id}`);
                }}
              >
                查看详情
              </Button>
            </div>
          </div>
        );
      case MediaType.IMAGE:
        return (
          <div className="relative w-full aspect-video bg-purple-50 dark:bg-purple-950/20 rounded-t-lg overflow-hidden flex items-center justify-center">
            <div className="bg-purple-100 dark:bg-purple-900/30 rounded-full p-4">
              <Image className="h-12 w-12 text-purple-600 dark:text-purple-400" />
            </div>
            <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity flex items-end justify-center pb-4 z-10">
              <Button 
                variant="secondary" 
                size="sm"
                className="opacity-85"
                onClick={(e) => {
                  e.stopPropagation();
                  router.push(`/dashboard/media/${media.id}`);
                }}
              >
                查看详情
              </Button>
            </div>
          </div>
        );
      case MediaType.AUDIO:
        return (
          <div className="relative w-full aspect-video bg-green-50 dark:bg-green-950/20 rounded-t-lg flex items-center justify-center">
            <div className="bg-green-100 dark:bg-green-900/30 rounded-full p-4">
              <Music className="h-12 w-12 text-green-600 dark:text-green-400" />
            </div>
            <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity flex items-end justify-center pb-4 z-10">
              <Button 
                variant="secondary" 
                size="sm"
                className="opacity-85"
                onClick={(e) => {
                  e.stopPropagation();
                  router.push(`/dashboard/media/${media.id}`);
                }}
              >
                查看详情
              </Button>
            </div>
          </div>
        );
      case MediaType.DOCUMENT:
        return (
          <div className="relative w-full aspect-video bg-orange-50 dark:bg-orange-950/20 rounded-t-lg flex items-center justify-center overflow-hidden">
            <div className="bg-orange-100 dark:bg-orange-900/30 rounded-full p-4">
              <FileText className="h-12 w-12 text-orange-600 dark:text-orange-400" />
            </div>
            <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity flex items-end justify-center pb-4 z-10">
              <Button 
                variant="secondary" 
                size="sm"
                className="opacity-85"
                onClick={(e) => {
                  e.stopPropagation();
                  router.push(`/dashboard/media/${media.id}`);
                }}
              >
                查看详情
              </Button>
            </div>
          </div>
        );
      case MediaType.OTHER:
        return (
          <div className="relative w-full aspect-video bg-gray-50 dark:bg-gray-800/50 rounded-t-lg flex items-center justify-center">
            <div className="bg-gray-100 dark:bg-gray-700 rounded-full p-4">
              <File className="h-12 w-12 text-gray-600 dark:text-gray-400" />
            </div>
            <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity flex items-end justify-center pb-4 z-10">
              <Button 
                variant="secondary" 
                size="sm"
                className="opacity-85"
                onClick={(e) => {
                  e.stopPropagation();
                  router.push(`/dashboard/media/${media.id}`);
                }}
              >
                查看详情
              </Button>
            </div>
          </div>
        );
      default:
        // 未知类型
        return (
          <div className="relative w-full aspect-video bg-slate-50 dark:bg-slate-800/50 rounded-t-lg flex items-center justify-center">
            <div className="bg-slate-100 dark:bg-slate-700 rounded-full p-4">
              <File className="h-12 w-12 text-slate-600 dark:text-slate-400" />
            </div>
            <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity flex items-end justify-center pb-4 z-10">
              <Button 
                variant="secondary" 
                size="sm"
                className="opacity-85"
                onClick={(e) => {
                  e.stopPropagation();
                  router.push(`/dashboard/media/${media.id}`);
                }}
              >
                查看详情
              </Button>
            </div>
          </div>
        );
    }
  };
  // 格式化文件大小
  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 B';
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return `${(bytes / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`;
  };
  // 格式化日期
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('zh-CN', { 
      year: 'numeric', 
      month: 'short', 
      day: 'numeric'
    });
  };
  // 获取媒体类型名称
  const getMediaTypeName = (type: string): string => {
    const typeNames: Record<string, string> = {
      [MediaType.VIDEO]: '视频',
      [MediaType.AUDIO]: '音频',
      [MediaType.IMAGE]: '图片',
      [MediaType.DOCUMENT]: '文档',
      [MediaType.OTHER]: '其他',
    };
    return typeNames[type] || '未知类型';
  };
  // 获取状态徽章
  const getStatusBadge = (status: string) => {
    let variant: 'default' | 'secondary' | 'destructive' | 'outline' = 'outline';
    let label = '未知';
    switch (status) {
      case MediaStatus.UPLOADING:
        variant = 'secondary';
        label = '上传中';
        break;
      case MediaStatus.PROCESSING:
        variant = 'secondary';
        label = '处理中';
        break;
      case MediaStatus.COMPLETED:
        variant = 'default';
        label = '已完成';
        break;
      case MediaStatus.FAILED:
        variant = 'destructive';
        label = '失败';
        break;
    }
    return <Badge variant={variant}>{label}</Badge>;
  };
  // 处理文件选择
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setSelectedFile(file);
    }
  };
  // 初始化上传
  const initiateUpload = async () => {
    if (!selectedFile) {
      toast.error('请选择需要上传的文件');
      return;
    }
    if (!uploadTitle.trim()) {
      toast.error('请输入资源标题');
      return;
    }
    setIsUploading(true);
    setUploadProgress(0);
    try {
      // 获取文件类型
      const fileType = getFileType(selectedFile.type, selectedFile.name);
      // 初始化上传
      const initResponse = await mediaService.initiateUpload({
        title: uploadTitle,
        description: uploadDescription || undefined,
        filename: selectedFile.name,
        fileSize: selectedFile.size,
        contentType: selectedFile.type,
      });
      if (initResponse.data) {
        setUploadingMediaId(initResponse.data.mediaId);
        // 开始上传分片
        await uploadParts(
          initResponse.data.mediaId,
          initResponse.data.uploadId,
          initResponse.data.presignedUrls.reduce((acc, curr) => {
            acc[curr.partNumber] = curr.url;
            return acc;
          }, {} as Record<number, string>), 
          selectedFile
        );
        // 不再需要状态检查，由前端自己管理状态
        // startStatusCheck(initResponse.data.mediaId);
      }
    } catch (error: any) {
      console.error('初始化上传失败:', error);
      setIsUploading(false);
      if (error.response?.status === 413) {
        toast.error('文件大小超出限制，请选择较小的文件');
      } else if (error.response?.status === 415) {
        toast.error('不支持的文件类型，请选择其他格式');
      } else if (error.response?.status === 507) {
        toast.error('存储空间不足，请联系管理员');
      } else if (error.response?.data?.message) {
        toast.error('上传失败：' + error.response.data.message);
      } else {
        toast.error('初始化上传失败，请稍后重试');
      }
    }
  };
  // 获取文件类型
  const getFileType = (mimeType: string, fileName: string): string => {
    if (mimeType.startsWith('video/')) {
      return MediaType.VIDEO;
    } else if (mimeType.startsWith('audio/')) {
      return MediaType.AUDIO;
    } else if (mimeType.startsWith('image/')) {
      return MediaType.IMAGE;
    } else if (mimeType.startsWith('application/') || fileName.endsWith('.pdf') || 
               fileName.endsWith('.doc') || fileName.endsWith('.docx') || 
               fileName.endsWith('.xls') || fileName.endsWith('.xlsx') || 
               fileName.endsWith('.ppt') || fileName.endsWith('.pptx') || 
               fileName.endsWith('.txt')) {
      return MediaType.DOCUMENT;
    } else {
      return MediaType.DOCUMENT; // 默认为文档类型
    }
  };
  // 上传分片
  const uploadParts = async (
    mediaId: number,
    uploadId: string,
    presignedUrls: Record<number, string>, 
    file: File
  ) => {
    try {
      // 计算总分片数
      const totalParts = Object.keys(presignedUrls).length;
      const chunkSize = Math.ceil(file.size / totalParts);
      console.log(`开始分片上传 - 总分片数: ${totalParts}, 文件大小: ${file.size}`);
      // 用于保存已完成分片的信息
      const completedParts: Array<{partNumber: number, etag: string}> = [];
      // 依次上传分片，使用for循环而非并发，避免并发上传可能导致的问题
      for (const [partNumberStr, url] of Object.entries(presignedUrls)) {
        const partNumber = parseInt(partNumberStr);
        const start = (partNumber - 1) * chunkSize;
        const end = Math.min(start + chunkSize, file.size);
        const chunk = file.slice(start, end);
        try {
          // 上传分片到预签名URL
          const response = await fetch(url, {
            method: 'PUT',
            body: chunk,
            headers: {
              'Content-Type': 'application/octet-stream'
            }
          });
          if (!response.ok) {
            throw new Error(`分片 ${partNumber} 上传失败: ${response.status} ${response.statusText}`);
          }
          // 获取ETag并处理
          let eTag = response.headers.get('ETag') || response.headers.get('etag') || '';
          const cleanETag = eTag.replace(/^"|"$/g, '');
          // 记录分片信息
          completedParts.push({
            partNumber,
            etag: cleanETag
          });
          // 更新进度
          setUploadProgress(Math.floor((partNumber / totalParts) * 90));
        } catch (error) {
          console.error(`分片 ${partNumber} 上传失败:`, error);
          throw error;
        }
      }
      // 按分片编号排序
      completedParts.sort((a, b) => a.partNumber - b.partNumber);
      // 构建请求对象
      const completeRequest = {
        uploadId,
        completedParts
      };
      // 完成上传，合并分片
      console.log('所有分片上传完成，发送合并请求...');
      const completeResult = await mediaService.completeUpload(mediaId, completeRequest);
      if (!completeResult.data) {
        throw new Error(completeResult.message || '完成上传失败');
      }
      console.log('合并上传成功');
      // 刷新媒体列表
      fetchMediaList();
      setUploadProgress(100);
      toast.success('上传成功', {
        description: '文件已成功上传到服务器'
      });
      // 重置表单和对话框
      resetUploadState();
      setUploadDialogOpen(false);
    } catch (error) {
      console.error('分片上传失败:', error);
      toast.error('上传失败', {
        description: error instanceof Error ? error.message : String(error)
      });
      // 取消上传
      await cancelUpload();
    } finally {
      setIsUploading(false);
    }
  };
  // 取消上传
  const cancelUpload = async () => {
    if (uploadingMediaId) {
      try {
        await mediaService.cancelUpload(uploadingMediaId);
        toast.success('已取消上传');
      } catch (error) {
        console.error('取消上传失败:', error);
        toast.error('取消上传失败，请刷新页面后重试');
      }
    }
    setIsUploading(false);
    setUploadDialogOpen(false);
    resetUploadState();
  };
  // 重置上传状态
  const resetUploadState = () => {
    setIsUploading(false);
    setUploadProgress(0);
    setUploadingMediaId(null);
    setUploadTitle('');
    setUploadDescription('');
    setSelectedFile(null);
    // 重置文件输入
    const fileInput = document.getElementById('file') as HTMLInputElement;
    if (fileInput) {
      fileInput.value = '';
    }
  };
  // 更新页面标题和描述
  const getPageTitle = () => {
    if (activeTab === 'all') {
      return '媒体资源管理';
    }
    return `${getMediaTypeName(activeTab)}资源管理`;
  };
  const getPageDescription = () => {
    if (activeTab === 'all') {
      return '管理您的视频、音频、图片和文档资源';
    }
    return `管理您的${getMediaTypeName(activeTab)}资源${totalItems > 0 ? `，共 ${totalItems} 项` : ''}`;
  };
  return (
    <div className="p-6 space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">
            {getPageTitle()}
          </h1>
          <p className="text-muted-foreground">
            {getPageDescription()}
          </p>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => fetchMediaList()}
            disabled={isLoading}
          >
            <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
            刷新
          </Button>
          <Dialog open={uploadDialogOpen} onOpenChange={setUploadDialogOpen}>
            <DialogTrigger asChild>
              <Button size="sm">
                <Upload className="h-4 w-4 mr-2" />
                上传资源
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[425px]">
              <DialogHeader>
                <DialogTitle>上传资源</DialogTitle>
                <DialogDescription>
                  上传视频、音频、图片或文档资源。大文件将会使用分片上传。
                </DialogDescription>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="grid gap-2">
                  <Label htmlFor="title">标题</Label>
                  <Input 
                    id="title" 
                    placeholder="输入资源标题" 
                    value={uploadTitle}
                    onChange={(e) => setUploadTitle(e.target.value)}
                    disabled={isUploading}
                  />
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="description">描述（可选）</Label>
                  <Input 
                    id="description" 
                    placeholder="输入资源描述" 
                    value={uploadDescription}
                    onChange={(e) => setUploadDescription(e.target.value)}
                    disabled={isUploading}
                  />
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="file">选择文件</Label>
                  <Input 
                    id="file" 
                    type="file" 
                    className="cursor-pointer"
                    onChange={handleFileChange}
                    disabled={isUploading}
                  />
                  {selectedFile && (
                    <p className="text-sm text-muted-foreground">
                      文件大小: {formatFileSize(selectedFile.size)}
                    </p>
                  )}
                </div>
                {isUploading && (
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>上传进度</span>
                      <span>{uploadProgress}%</span>
                    </div>
                    <div className="w-full bg-slate-200 rounded-full h-2.5 dark:bg-slate-700">
                      <div 
                        className="bg-blue-600 h-2.5 rounded-full" 
                        style={{ width: `${uploadProgress}%` }}
                      ></div>
                    </div>
                  </div>
                )}
              </div>
              <DialogFooter>
                {isUploading ? (
                  <Button variant="destructive" onClick={cancelUpload}>
                    取消上传
                  </Button>
                ) : (
                  <>
                    <Button variant="outline" onClick={() => setUploadDialogOpen(false)}>
                      取消
                    </Button>
                    <Button onClick={initiateUpload}>
                      开始上传
                    </Button>
                  </>
                )}
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
      </div>
      <Tabs defaultValue="all" value={activeTab} onValueChange={handleTabChange}>
        <div className="flex justify-between items-center mb-2">
          <TabsList className="grid grid-cols-6">
            <TabsTrigger value="all">
              全部
              {typeStats.all > 0 && 
                <span className="ml-1 text-xs bg-muted rounded-full px-1.5 py-0.5">{typeStats.all}</span>
              }
            </TabsTrigger>
            <TabsTrigger value={MediaType.VIDEO}>
              视频
              {typeStats[MediaType.VIDEO] > 0 && 
                <span className="ml-1 text-xs bg-primary/20 text-primary rounded-full px-1.5 py-0.5">
                  {typeStats[MediaType.VIDEO]}
                </span>
              }
            </TabsTrigger>
            <TabsTrigger value={MediaType.AUDIO}>
              音频
              {typeStats[MediaType.AUDIO] > 0 && 
                <span className="ml-1 text-xs bg-primary/20 text-primary rounded-full px-1.5 py-0.5">
                  {typeStats[MediaType.AUDIO]}
                </span>
              }
            </TabsTrigger>
            <TabsTrigger value={MediaType.IMAGE}>
              图片
              {typeStats[MediaType.IMAGE] > 0 && 
                <span className="ml-1 text-xs bg-primary/20 text-primary rounded-full px-1.5 py-0.5">
                  {typeStats[MediaType.IMAGE]}
                </span>
              }
            </TabsTrigger>
            <TabsTrigger value={MediaType.DOCUMENT}>
              文档
              {typeStats[MediaType.DOCUMENT] > 0 && 
                <span className="ml-1 text-xs bg-primary/20 text-primary rounded-full px-1.5 py-0.5">
                  {typeStats[MediaType.DOCUMENT]}
                </span>
              }
            </TabsTrigger>
            <TabsTrigger value={MediaType.OTHER}>
              其他
              {typeStats[MediaType.OTHER] > 0 && 
                <span className="ml-1 text-xs bg-primary/20 text-primary rounded-full px-1.5 py-0.5">
                  {typeStats[MediaType.OTHER]}
                </span>
              }
            </TabsTrigger>
        </TabsList>
          {!isLoading && activeTab !== 'all' && (
            <p className="text-sm text-muted-foreground">
              当前显示: <span className="font-medium">{getMediaTypeName(activeTab)}</span> · 共 {totalItems} 项
            </p>
          )}
        </div>
        <div className="mt-4">
          {isLoading ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {Array.from({ length: 6 }).map((_, i) => (
                <div key={i} className="rounded-lg border bg-card text-card-foreground shadow">
                  <div className="p-6 space-y-2">
                    <Skeleton className="h-10 w-10 rounded" />
                    <Skeleton className="h-4 w-1/2" />
                    <Skeleton className="h-4 w-3/4" />
                  </div>
                </div>
              ))}
            </div>
          ) : mediaList.length === 0 ? (
            <div className="flex flex-col items-center justify-center p-8 text-center border rounded-lg">
              <div className="mb-4 bg-muted rounded-full p-3">
                <File className="h-6 w-6 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-semibold">没有{activeTab !== 'all' ? getMediaTypeName(activeTab) : '媒体'}资源</h3>
              <p className="text-sm text-muted-foreground mb-4">
                {activeTab !== 'all' 
                  ? `您目前没有任何${getMediaTypeName(activeTab)}资源。`
                  : '您目前没有上传任何媒体资源。'
                }
              </p>
              <Button size="sm" onClick={() => setUploadDialogOpen(true)}>
                <Upload className="h-4 w-4 mr-2" />
                上传资源
              </Button>
            </div>
          ) : (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-5">
                {mediaList.map((media) => (
                  <Card 
                    key={media.id} 
                    className="overflow-hidden group hover:border-primary/50 transition-all duration-200 hover:shadow-md h-full"
                    onClick={() => router.push(`/dashboard/media/${media.id}`)}
                  >
                    {/* 媒体预览区域 */}
                    <div className="media-preview-container relative">
                      {getMediaPreview(media)}
                    </div>
                    <CardHeader className="p-4 pb-0">
                      <div className="flex items-start justify-between">
                        <div className="space-y-1 flex-1 min-w-0">
                          <CardTitle className="text-base line-clamp-1 group-hover:text-primary transition-colors">
                            {media.title}
                          </CardTitle>
                          {media.description && (
                            <CardDescription className="line-clamp-2 text-xs">
                              {media.description}
                            </CardDescription>
                          )}
                        </div>
                        <div className="ml-2 mt-1 flex-shrink-0">
                          <Button 
                            variant="ghost" 
                            size="icon" 
                            className="h-7 w-7 opacity-0 group-hover:opacity-100 transition-opacity"
                            onClick={(e) => {
                              e.stopPropagation();
                              try {
                                // 打开确认对话框
                                if (confirm('确定要删除这个文件吗？此操作无法撤销。')) {
                                  mediaService.deleteMedia(media.id).then(() => {
                                toast.success('删除成功');
                                fetchMediaList();
                                  });
                                }
                              } catch (error) {
                                console.error('删除失败:', error);
                                toast.error('删除失败');
                              }
                            }}
                          >
                            <Trash2 className="h-4 w-4 text-red-500" />
                          </Button>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="p-4 pt-3">
                      <div className="flex flex-wrap gap-x-4 gap-y-2 text-xs">
                        <div className="flex items-center gap-1.5">
                          <span className="w-2 h-2 rounded-full bg-slate-300 dark:bg-slate-600"></span>
                          <span>{getMediaTypeName(media.type)}</span>
                        </div>
                        <div className="flex items-center gap-1.5">
                          <span className="w-2 h-2 rounded-full bg-slate-300 dark:bg-slate-600"></span>
                          <span>{formatFileSize(media.size)}</span>
                        </div>
                        <div className="flex items-center gap-1.5">
                          <span className="w-2 h-2 rounded-full bg-slate-300 dark:bg-slate-600"></span>
                          <span>{formatDate(media.uploadTime)}</span>
                        </div>
                        <div className="mt-1 w-full">
                          {getStatusBadge(media.status)}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
              {totalItems > (pagination.size || 10) && (
                <div className="mt-4">
                  <Pagination>
                    <PaginationContent>
                      <PaginationItem>
                        <PaginationPrevious 
                          href="#" 
                          onClick={(e) => {
                            e.preventDefault();
                            if ((pagination.page || 0) > 0) {
                              handlePageChange((pagination.page || 0) - 1);
                            }
                          }}
                          aria-disabled={(pagination.page || 0) === 0}
                          className={(pagination.page || 0) === 0 ? 'pointer-events-none opacity-50' : ''}
                        />
                      </PaginationItem>
                      {Array.from({ 
                        length: Math.ceil(totalItems / (pagination.size || 10)) 
                      }).map((_, i) => (
                        <PaginationItem key={i}>
                          <PaginationLink
                            href="#"
                            onClick={(e) => {
                              e.preventDefault();
                              handlePageChange(i);
                            }}
                            isActive={i === (pagination.page || 0)}
                          >
                            {i + 1}
                          </PaginationLink>
                        </PaginationItem>
                      ))}
                      <PaginationItem>
                        <PaginationNext 
                          href="#" 
                          onClick={(e) => {
                            e.preventDefault();
                            const maxPage = Math.ceil(totalItems / (pagination.size || 10)) - 1;
                            if ((pagination.page || 0) < maxPage) {
                              handlePageChange((pagination.page || 0) + 1);
                            }
                          }}
                          aria-disabled={(pagination.page || 0) >= Math.ceil(totalItems / (pagination.size || 10)) - 1}
                          className={
                            (pagination.page || 0) >= Math.ceil(totalItems / (pagination.size || 10)) - 1 
                              ? 'pointer-events-none opacity-50' 
                              : ''
                          }
                        />
                      </PaginationItem>
                    </PaginationContent>
                  </Pagination>
                </div>
              )}
            </>
          )}
        </div>
      </Tabs>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/page.tsx">
'use client';
import { useEffect, useState } from 'react';
import { useAuthStore } from '@/stores/auth-store';
import { UserRole } from '@/types/auth';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { BookOpen, Users, ShoppingCart, Activity, ShieldCheck, FileText, BarChart2 } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
export default function DashboardPage() {
  const { user } = useAuthStore();
  const [greeting, setGreeting] = useState('欢迎');
  const [mounted, setMounted] = useState(false);
  // 确保只在客户端运行
  useEffect(() => {
    setMounted(true);
    // 根据时间设置问候语
    const hours = new Date().getHours();
    let greet = '';
    if (hours < 6) {
      greet = '夜深了';
    } else if (hours < 9) {
      greet = '早上好';
    } else if (hours < 12) {
      greet = '上午好';
    } else if (hours < 14) {
      greet = '中午好';
    } else if (hours < 17) {
      greet = '下午好';
    } else if (hours < 22) {
      greet = '晚上好';
    } else {
      greet = '夜深了';
    }
    setGreeting(greet);
  }, []);
  // 根据用户角色获取角色名称
  const getRoleName = () => {
    if (!user || !user.roles || user.roles.length === 0) return '用户';
    // 获取第一个角色代码（通常是最高权限的角色）
    const primaryRoleCode = user.roles[0].code?.replace('ROLE_', '');
    switch (primaryRoleCode) {
      case UserRole.ADMIN:
        return '管理员';
      case UserRole.REVIEWER:
        return '审核员';
      case UserRole.INSTITUTION:
        return '机构用户';
      case UserRole.USER:
      default:
        return '学员';
    }
  };
  // 检查用户是否有特定角色
  const hasRole = (role: UserRole) => {
    if (!user || !user.roles || user.roles.length === 0) return false;
    return user.roles.some(userRole => userRole.code?.replace('ROLE_', '') === role);
  };
  // 判断是否为管理员
  const isAdmin = hasRole(UserRole.ADMIN);
  // 判断是否为审核员
  const isReviewer = hasRole(UserRole.REVIEWER);
  // 判断是否为机构用户
  const isInstitution = hasRole(UserRole.INSTITUTION);
  return (
    <div className="space-y-6">
      {/* 欢迎区域 */}
      <div>
        <h1 className="text-3xl font-bold tracking-tight">
          {greeting}，{user?.username || '同学'}
        </h1>
        <p className="text-muted-foreground mt-2">
          欢迎回到您的在线课程平台仪表盘，您当前的身份是：<span className="font-medium">{getRoleName()}</span>
        </p>
      </div>
      {/* 角色提示 */}
      {isAdmin && (
        <Alert>
          <ShieldCheck className="h-4 w-4" />
          <AlertTitle>管理员权限</AlertTitle>
          <AlertDescription>
            您拥有管理员权限，可以管理用户、角色和权限，以及查看系统数据。
          </AlertDescription>
        </Alert>
      )}
      {isReviewer && (
        <Alert>
          <FileText className="h-4 w-4" />
          <AlertTitle>审核员权限</AlertTitle>
          <AlertDescription>
            您拥有审核员权限，可以审核课程内容和用户评论。
          </AlertDescription>
        </Alert>
      )}
      {isInstitution && (
        <Alert>
          <BookOpen className="h-4 w-4" />
          <AlertTitle>机构用户权限</AlertTitle>
          <AlertDescription>
            您拥有机构用户权限，可以创建和管理课程，查看学员数据。
          </AlertDescription>
        </Alert>
      )}
      {/* 统计卡片 - 根据角色显示不同内容 */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        {/* 普通用户和所有角色都可见 */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">已学课程</CardTitle>
            <BookOpen className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">12</div>
            <p className="text-xs text-muted-foreground mt-1">
              共计学习 42 小时
            </p>
          </CardContent>
        </Card>
        {/* 普通用户和所有角色都可见 */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">学习社区</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">+573</div>
            <p className="text-xs text-muted-foreground mt-1">
              平台活跃学习者
            </p>
          </CardContent>
        </Card>
        {/* 普通用户和所有角色都可见 */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">订单记录</CardTitle>
            <ShoppingCart className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">5</div>
            <p className="text-xs text-muted-foreground mt-1">
              最近30天内
            </p>
          </CardContent>
        </Card>
        {/* 根据角色显示不同的第四个卡片 */}
        {isAdmin ? (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">系统用户</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">1,234</div>
              <p className="text-xs text-muted-foreground mt-1">
                平台注册用户总数
              </p>
            </CardContent>
          </Card>
        ) : isReviewer ? (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">待审核</CardTitle>
              <FileText className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">8</div>
              <p className="text-xs text-muted-foreground mt-1">
                待审核课程内容
              </p>
            </CardContent>
          </Card>
        ) : isInstitution ? (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">课程数据</CardTitle>
              <BarChart2 className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">24</div>
              <p className="text-xs text-muted-foreground mt-1">
                已发布课程总数
              </p>
            </CardContent>
          </Card>
        ) : (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">学习进度</CardTitle>
              <Activity className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">82%</div>
              <p className="text-xs text-muted-foreground mt-1">
                当前课程完成度
              </p>
            </CardContent>
          </Card>
        )}
      </div>
      {/* 最近课程 - 普通用户和所有角色都可见 */}
      <div>
        <h2 className="text-xl font-semibold mb-4">最近学习</h2>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {[1, 2, 3].map((i) => (
            <Card key={i}>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg">Web开发进阶课程 {i}</CardTitle>
                <CardDescription>前端框架与工程化实践</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-2 w-full bg-muted rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-primary rounded-full" 
                    style={{ width: `${30 * i}%` }}
                  />
                </div>
                <div className="text-sm text-muted-foreground mt-2">
                  完成度: {30 * i}%
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
      {/* 管理员专属内容 */}
      {isAdmin && (
        <div>
          <h2 className="text-xl font-semibold mb-4">系统概览</h2>
          <Card>
            <CardHeader>
              <CardTitle>管理员控制面板</CardTitle>
              <CardDescription>系统关键指标和操作</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span>系统用户总数</span>
                  <span className="font-medium">1,234</span>
                </div>
                <div className="flex justify-between">
                  <span>今日新增用户</span>
                  <span className="font-medium">12</span>
                </div>
                <div className="flex justify-between">
                  <span>课程总数</span>
                  <span className="font-medium">156</span>
                </div>
                <div className="flex justify-between">
                  <span>系统存储使用</span>
                  <span className="font-medium">45.8 GB</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
      {/* 审核员专属内容 */}
      {isReviewer && (
        <div>
          <h2 className="text-xl font-semibold mb-4">待审核内容</h2>
          <Card>
            <CardHeader>
              <CardTitle>内容审核队列</CardTitle>
              <CardDescription>待审核的课程和评论</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span>待审核课程</span>
                  <span className="font-medium">8</span>
                </div>
                <div className="flex justify-between">
                  <span>待审核评论</span>
                  <span className="font-medium">24</span>
                </div>
                <div className="flex justify-between">
                  <span>今日已审核</span>
                  <span className="font-medium">12</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
      {/* 机构用户专属内容 */}
      {isInstitution && (
        <div>
          <h2 className="text-xl font-semibold mb-4">机构数据</h2>
          <Card>
            <CardHeader>
              <CardTitle>课程统计</CardTitle>
              <CardDescription>您的课程数据概览</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span>已发布课程</span>
                  <span className="font-medium">24</span>
                </div>
                <div className="flex justify-between">
                  <span>学员总数</span>
                  <span className="font-medium">1,568</span>
                </div>
                <div className="flex justify-between">
                  <span>本月收入</span>
                  <span className="font-medium">¥12,450</span>
                </div>
                <div className="flex justify-between">
                  <span>平均评分</span>
                  <span className="font-medium">4.8/5.0</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/permissions/page.tsx">
'use client';
import { useEffect, useState } from 'react';
import { Pencil, Trash2, Plus, Shield, Search, X } from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import { zhCN } from 'date-fns/locale';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { Skeleton } from '@/components/ui/skeleton';
import { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from '@/components/ui/pagination';
import { usePermissionStore } from '@/stores/permission-store';
import { Permission } from '@/types/permission';
import { PermissionForm } from '@/components/dashboard/permissions/permission-form';
import { DeleteConfirmationDialog } from '@/components/dashboard/permissions/delete-confirmation-dialog';
// HTTP方法的对应颜色
const methodColors = {
  GET: 'bg-green-500',
  POST: 'bg-blue-500',
  PUT: 'bg-amber-500',
  DELETE: 'bg-red-500',
  PATCH: 'bg-purple-500',
};
export default function PermissionsPage() {
  // 使用权限状态
  const {
    permissions,
    isLoading,
    error,
    formVisible,
    confirmDialogVisible,
    selectedIds,
    fetchPermissions,
    setFormVisible,
    setConfirmDialogVisible,
    setCurrentPermission,
    toggleSelectedId,
    clearSelectedIds,
  } = usePermissionStore();
  // 搜索关键字
  const [searchTerm, setSearchTerm] = useState('');
  // 是否显示搜索栏
  const [showSearch, setShowSearch] = useState(false);
  // 删除模式：单个或批量
  const [deleteMode, setDeleteMode] = useState<'single' | 'batch'>('single');
  // 当前要删除的权限ID
  const [currentDeleteId, setCurrentDeleteId] = useState<number | undefined>(undefined);
  // 当前页码
  const [currentPage, setCurrentPage] = useState(1);
  // 每页条数
  const [pageSize] = useState(10);
  // 组件加载时获取权限列表
  useEffect(() => {
    fetchPermissions();
  }, [fetchPermissions]);
  // 筛选权限列表
  const filteredPermissions = permissions?.filter((permission) =>
    permission.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    permission.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (permission.description && permission.description.toLowerCase().includes(searchTerm.toLowerCase()))
  ) || [];
  // 分页权限列表
  const paginatedPermissions = filteredPermissions.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );
  // 总页数
  const totalPages = Math.ceil(filteredPermissions.length / pageSize);
  // 处理创建权限
  const handleCreatePermission = () => {
    setCurrentPermission(null);
    setFormVisible(true);
  };
  // 处理编辑权限
  const handleEditPermission = (permission: Permission) => {
    setCurrentPermission(permission);
    setFormVisible(true);
  };
  // 处理删除权限
  const handleDeletePermission = (id: number) => {
    setDeleteMode('single');
    setCurrentDeleteId(id);
    setConfirmDialogVisible(true);
  };
  // 处理批量删除权限
  const handleBatchDelete = () => {
    if (selectedIds.length === 0) return;
    setDeleteMode('batch');
    setConfirmDialogVisible(true);
  };
  // 处理全选/取消全选
  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      const ids = paginatedPermissions.map(p => p.id);
      usePermissionStore.setState({ selectedIds: ids });
    } else {
      clearSelectedIds();
    }
  };
  // 渲染权限列表表格
  const renderPermissionsTable = () => {
    if (isLoading) {
      return (
        <div className="space-y-3">
          {[...Array(5)].map((_, index) => (
            <Skeleton key={index} className="w-full h-12" />
          ))}
        </div>
      );
    }
    if (paginatedPermissions.length === 0) {
      return (
        <div className="py-12 text-center">
          <Shield className="mx-auto h-12 w-12 text-muted-foreground" />
          <h3 className="mt-4 text-lg font-semibold">没有权限数据</h3>
          <p className="mt-2 text-sm text-muted-foreground">
            {searchTerm ? '没有匹配的搜索结果，请尝试其他关键词' : '系统中还没有权限数据，请点击"创建权限"按钮添加'}
          </p>
        </div>
      );
    }
    return (
      <>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[50px]">
                <Checkbox
                  checked={
                    paginatedPermissions.length > 0 &&
                    paginatedPermissions.every(p => selectedIds.includes(p.id))
                  }
                  onCheckedChange={handleSelectAll}
                  aria-label="全选"
                />
              </TableHead>
              <TableHead className="w-[200px]">权限名称</TableHead>
              <TableHead className="w-[200px]">权限编码</TableHead>
              <TableHead className="hidden md:table-cell">资源路径</TableHead>
              <TableHead className="w-[100px] hidden md:table-cell">HTTP方法</TableHead>
              <TableHead className="w-[150px] hidden md:table-cell">创建时间</TableHead>
              <TableHead className="w-[120px] text-right">操作</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {paginatedPermissions.map((permission) => (
              <TableRow key={permission.id}>
                <TableCell>
                  <Checkbox
                    checked={selectedIds.includes(permission.id)}
                    onCheckedChange={() => toggleSelectedId(permission.id)}
                    aria-label={`选择${permission.name}`}
                  />
                </TableCell>
                <TableCell className="font-medium">{permission.name}</TableCell>
                <TableCell>{permission.code}</TableCell>
                <TableCell className="hidden md:table-cell">
                  {permission.url || '-'}
                </TableCell>
                <TableCell className="hidden md:table-cell">
                  {permission.method ? (
                    <Badge 
                      className={methodColors[permission.method as keyof typeof methodColors] || 'bg-gray-500'}
                    >
                      {permission.method}
                    </Badge>
                  ) : (
                    '-'
                  )}
                </TableCell>
                <TableCell className="hidden md:table-cell">
                  {permission.createdAt
                    ? formatDistanceToNow(new Date(permission.createdAt), { addSuffix: true, locale: zhCN })
                    : '-'}
                </TableCell>
                <TableCell className="text-right">
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleEditPermission(permission)}
                    className="mr-1"
                  >
                    <Pencil className="h-4 w-4" />
                    <span className="sr-only">编辑</span>
                  </Button>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleDeletePermission(permission.id)}
                    className="text-destructive hover:text-destructive hover:bg-destructive/10"
                  >
                    <Trash2 className="h-4 w-4" />
                    <span className="sr-only">删除</span>
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
        {/* 分页组件 */}
        {totalPages > 1 && (
          <Pagination className="mt-4">
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious 
                  href="#" 
                  onClick={(e) => {
                    e.preventDefault();
                    if (currentPage > 1) setCurrentPage(currentPage - 1);
                  }}
                  className={currentPage === 1 ? 'pointer-events-none opacity-50' : ''}
                />
              </PaginationItem>
              {[...Array(totalPages)].map((_, i) => (
                <PaginationItem key={i}>
                  <PaginationLink 
                    href="#" 
                    onClick={(e) => {
                      e.preventDefault();
                      setCurrentPage(i + 1);
                    }}
                    isActive={currentPage === i + 1}
                  >
                    {i + 1}
                  </PaginationLink>
                </PaginationItem>
              ))}
              <PaginationItem>
                <PaginationNext 
                  href="#" 
                  onClick={(e) => {
                    e.preventDefault();
                    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
                  }}
                  className={currentPage === totalPages ? 'pointer-events-none opacity-50' : ''}
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        )}
      </>
    );
  };
  return (
    <div className="space-y-4">
      <Card>
        <CardHeader className="flex flex-col sm:flex-row items-start sm:items-center justify-between space-y-2 sm:space-y-0 py-5">
          <div>
            <CardTitle>权限管理</CardTitle>
            <CardDescription>
              管理系统权限，控制资源访问
            </CardDescription>
          </div>
          <div className="flex items-center gap-2 w-full sm:w-auto">
            {showSearch ? (
              <div className="flex items-center w-full sm:w-auto">
                <Input
                  placeholder="搜索权限..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="mr-2"
                />
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => {
                    setSearchTerm('');
                    setShowSearch(false);
                  }}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ) : (
              <>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowSearch(true)}
                >
                  <Search className="h-4 w-4 mr-2" />
                  搜索
                </Button>
                {selectedIds.length > 0 && (
                  <Button
                    variant="destructive"
                    size="sm"
                    onClick={handleBatchDelete}
                  >
                    <Trash2 className="h-4 w-4 mr-2" />
                    删除所选 ({selectedIds.length})
                  </Button>
                )}
                <Button size="sm" onClick={handleCreatePermission}>
                  <Plus className="h-4 w-4 mr-2" />
                  创建权限
                </Button>
              </>
            )}
          </div>
        </CardHeader>
        <CardContent>
          {renderPermissionsTable()}
        </CardContent>
      </Card>
      {/* 权限表单对话框 */}
      <PermissionForm />
      {/* 删除确认对话框 */}
      <DeleteConfirmationDialog 
        mode={deleteMode} 
        id={currentDeleteId} 
      />
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/profile/page.tsx">
'use client';
import { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import ReactCrop, { Crop, PixelCrop, centerCrop, makeAspectCrop } from 'react-image-crop';
import 'react-image-crop/dist/ReactCrop.css';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { useAuthStore } from '@/stores/auth-store';
import userService from '@/services/user';
import authService from '@/services/auth';
// 个人资料表单 Schema
const profileFormSchema = z.object({
  nickname: z.string().optional(),
  phone: z.string().regex(/^1[3-9]\d{9}$/, '请输入正确的手机号码').optional(),
});
// 密码修改表单 Schema
const passwordFormSchema = z.object({
  oldPassword: z.string().min(6, '旧密码长度至少6个字符'),
  newPassword: z.string().min(6, '新密码长度至少6个字符'),
  confirmPassword: z.string().min(6, '确认密码长度至少6个字符'),
}).refine(data => data.newPassword === data.confirmPassword, {
  message: "两次输入的密码不一致",
  path: ["confirmPassword"],
});
// 邮箱更新表单 Schema
const emailFormSchema = z.object({
  newEmail: z.string().email('请输入有效的邮箱地址'),
  captchaKey: z.string().optional(),
  captchaCode: z.string().optional(),
  emailCode: z.string().length(6, '验证码需要6位数字'),
  password: z.string().min(6, '密码长度至少6个字符'),
});
// 裁剪图片的工具函数
function centerAspectCrop(
  mediaWidth: number,
  mediaHeight: number,
  aspect: number,
) {
  return centerCrop(
    makeAspectCrop(
      {
        unit: '%',
        width: 90,
      },
      aspect,
      mediaWidth,
      mediaHeight,
    ),
    mediaWidth,
    mediaHeight,
  );
}
// 将裁剪后的图片转换为文件
async function getCroppedImg(
  image: HTMLImageElement,
  crop: PixelCrop,
  fileName: string,
): Promise<File> {
  const canvas = document.createElement('canvas');
  const scaleX = image.naturalWidth / image.width;
  const scaleY = image.naturalHeight / image.height;
  const ctx = canvas.getContext('2d');
  if (!ctx) {
    throw new Error('No 2d context');
  }
  canvas.width = crop.width;
  canvas.height = crop.height;
  ctx.drawImage(
    image,
    crop.x * scaleX,
    crop.y * scaleY,
    crop.width * scaleX,
    crop.height * scaleY,
    0,
    0,
    crop.width,
    crop.height,
  );
  return new Promise((resolve, reject) => {
    canvas.toBlob(blob => {
      if (!blob) {
        reject(new Error('Canvas is empty'));
        return;
      }
      // 创建File对象
      const file = new File([blob], fileName, {
        type: 'image/jpeg',
        lastModified: Date.now(),
      });
      resolve(file);
    }, 'image/jpeg', 0.95);
  });
}
export default function ProfilePage() {
  const router = useRouter();
  const imgRef = useRef<HTMLImageElement | null>(null);
  const { user, setUser } = useAuthStore();
  const [isLoading, setIsLoading] = useState(false);
  const [selectedTab, setSelectedTab] = useState('profile');
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string>('');
  const [crop, setCrop] = useState<Crop>();
  const [completedCrop, setCompletedCrop] = useState<PixelCrop>();
  const [aspect, setAspect] = useState<number>(1);
  const [isCropperOpen, setIsCropperOpen] = useState(false);
  const [croppedImageUrl, setCroppedImageUrl] = useState<string>('');
  const [croppedImageFile, setCroppedImageFile] = useState<File | null>(null);
  const [isEmailSending, setIsEmailSending] = useState(false);
  const [emailCodeCountdown, setEmailCodeCountdown] = useState(0);
  const [captchaKey, setCaptchaKey] = useState<string>('');
  const [captchaImage, setCaptchaImage] = useState<string>('');
  const [isCaptchaLoading, setIsCaptchaLoading] = useState(false);
  // 个人资料表单
  const profileForm = useForm<z.infer<typeof profileFormSchema>>({
    resolver: zodResolver(profileFormSchema),
    defaultValues: {
      nickname: user?.nickname || '',
      phone: user?.phone || '',
    },
  });
  // 密码修改表单
  const passwordForm = useForm<z.infer<typeof passwordFormSchema>>({
    resolver: zodResolver(passwordFormSchema),
    defaultValues: {
      oldPassword: '',
      newPassword: '',
      confirmPassword: '',
    },
  });
  // 邮箱更新表单
  const emailForm = useForm<z.infer<typeof emailFormSchema>>({
    resolver: zodResolver(emailFormSchema),
    defaultValues: {
      newEmail: '',
      captchaKey: '',
      captchaCode: '',
      emailCode: '',
      password: '',
    },
    mode: 'onChange',
  });
  // 加载用户信息（仅在组件挂载和user为空时）
  useEffect(() => {
    // 创建一个信号控制器，用于在组件卸载时取消请求
    const controller = new AbortController();
    let isMounted = true;
    const fetchUserInfo = async () => {
      try {
        // 如果已经有用户信息，不需要重新获取
        if (user) {
          // 更新表单默认值
          profileForm.reset({
            nickname: user.nickname || '',
            phone: user.phone || '',
          });
          return;
        }
        // 如果用户已登出，不要尝试获取用户信息
        if (!user) {
          router.push('/login');
          return;
        }
        const userData = await userService.getCurrentUser();
        // 确保组件仍然挂载
        if (isMounted) {
          // 更新全局状态
          setUser(userData);
          // 更新表单默认值
          profileForm.reset({
            nickname: userData.nickname || '',
            phone: userData.phone || '',
          });
        }
      } catch (error: any) { // 使用any类型以便访问response属性
        // 确保组件仍然挂载
        if (isMounted) {
          console.error('加载用户信息失败:', error);
          // 如果是401或403错误，说明用户未认证或令牌已过期，重定向到登录页
          if (error?.response?.status === 401 || error?.response?.status === 403) {
            toast.error('您的登录已过期，请重新登录');
            router.push('/login');
          } else {
            toast.error('加载用户信息失败，请稍后重试');
          }
        }
      }
    };
    fetchUserInfo();
    // 清理函数
    return () => {
      isMounted = false;
      controller.abort();
    };
  }, [user?.id, setUser, profileForm, router]);
  // 邮箱验证码倒计时
  useEffect(() => {
    if (emailCodeCountdown <= 0) return;
    const timer = setTimeout(() => {
      setEmailCodeCountdown(prev => prev - 1);
    }, 1000);
    return () => clearTimeout(timer);
  }, [emailCodeCountdown]);
  // 选中邮箱选项卡时获取验证码
  useEffect(() => {
    if (selectedTab === 'email' && !captchaImage) {
      loadCaptcha();
    }
  }, [selectedTab]);
  // 加载验证码
  const loadCaptcha = async () => {
    setIsCaptchaLoading(true);
    try {
      const captchaData = await authService.getCaptcha();
      setCaptchaKey(captchaData.captchaId);
      setCaptchaImage(captchaData.captchaImage);
      // 只有当当前值与新值不同时才设置，避免不必要的状态更新
      const currentCaptchaKey = emailForm.getValues('captchaKey');
      if (currentCaptchaKey !== captchaData.captchaId) {
        emailForm.setValue('captchaKey', captchaData.captchaId, { 
          shouldValidate: false,
          shouldDirty: false,
          shouldTouch: false
        });
      }
    } catch (error) {
      console.error('获取验证码失败:', error);
      toast.error('获取验证码失败，请刷新页面重试');
    } finally {
      setIsCaptchaLoading(false);
    }
  };
  // 刷新验证码
  const refreshCaptcha = () => {
    loadCaptcha();
  };
  // 图片加载时设置初始裁剪区域
  const onImageLoad = (e: React.SyntheticEvent<HTMLImageElement>) => {
    const { width, height } = e.currentTarget;
    imgRef.current = e.currentTarget;
    setCrop(centerAspectCrop(width, height, aspect));
  };
  // 处理裁剪完成
  const handleCropComplete = (c: PixelCrop) => {
    setCompletedCrop(c);
  };
  // 应用裁剪并关闭对话框
  const handleApplyCrop = async () => {
    if (!imgRef.current || !completedCrop || !selectedFile) {
      return;
    }
    try {
      // 获取裁剪后的图片文件
      const croppedFile = await getCroppedImg(
        imgRef.current,
        completedCrop,
        selectedFile.name,
      );
      // 保存裁剪后的图片文件
      setCroppedImageFile(croppedFile);
      // 创建裁剪后图片的URL预览
      const newPreviewUrl = URL.createObjectURL(croppedFile);
      setCroppedImageUrl(newPreviewUrl);
      // 关闭裁剪对话框
      setIsCropperOpen(false);
    } catch (error) {
      console.error('裁剪图片失败:', error);
      toast.error('裁剪图片失败，请重试');
    }
  };
  // 提交个人资料表单
  const onProfileSubmit = async (data: z.infer<typeof profileFormSchema>) => {
    if (!user) {
      toast.error('您需要先登录');
      router.push('/login');
      return;
    }
    setIsLoading(true);
    try {
      const updatedUser = await userService.updateProfile(data);
      setUser(updatedUser);
      toast.success('个人资料更新成功');
    } catch (error: any) {
      console.error('更新个人资料失败:', error);
      if (error?.response?.status === 401 || error?.response?.status === 403) {
        toast.error('您的登录已过期，请重新登录');
        router.push('/login');
      } else {
        toast.error('更新个人资料失败，请稍后重试');
      }
    } finally {
      setIsLoading(false);
    }
  };
  // 提交密码修改表单
  const onPasswordSubmit = async (data: z.infer<typeof passwordFormSchema>) => {
    if (!user) {
      toast.error('您需要先登录');
      router.push('/login');
      return;
    }
    setIsLoading(true);
    try {
      await userService.changePassword(data);
      toast.success('密码修改成功');
      passwordForm.reset();
    } catch (error: any) {
      console.error('修改密码失败:', error);
      if (error?.response?.status === 401 || error?.response?.status === 403) {
        toast.error('您的登录已过期，请重新登录');
        router.push('/login');
      } else {
        toast.error('修改密码失败，请检查旧密码是否正确');
      }
    } finally {
      setIsLoading(false);
    }
  };
  // 发送邮箱验证码
  const handleSendEmailCode = async () => {
    // 获取并验证新邮箱和密码
    const newEmail = emailForm.getValues('newEmail');
    const captchaCode = emailForm.getValues('captchaCode');
    const password = emailForm.getValues('password');
    // 验证邮箱和验证码
    const emailValid = await emailForm.trigger('newEmail');
    if (!emailValid || !newEmail) {
      toast.error('请输入有效的邮箱地址');
      return;
    }
    if (!captchaCode) {
      toast.error('请输入图形验证码');
      return;
    }
    // 验证密码
    const passwordValid = await emailForm.trigger('password');
    if (!passwordValid || !password) {
      toast.error('请输入当前密码');
      return;
    }
    if (!user) {
      toast.error('您需要先登录');
      router.push('/login');
      return;
    }
    setIsEmailSending(true);
    try {
      // 发送验证码
      await userService.sendEmailUpdateCode({
        email: newEmail,
        captchaKey: captchaKey,
        captchaCode: captchaCode,
      });
      toast.success('验证码已发送，请查收邮件');
      // 开始倒计时
      setEmailCodeCountdown(60);
      // 刷新验证码
      refreshCaptcha();
    } catch (error: any) {
      console.error('发送邮箱验证码失败:', error);
      if (error?.response?.status === 401 || error?.response?.status === 403) {
        toast.error('您的登录已过期，请重新登录');
        router.push('/login');
      } else if (error?.response?.status === 400) {
        toast.error('验证码错误，请重新输入');
        refreshCaptcha(); // 刷新验证码
      } else {
        toast.error('发送验证码失败，请稍后重试');
      }
    } finally {
      setIsEmailSending(false);
    }
  };
  // 提交邮箱更新表单
  const onEmailSubmit = async (data: z.infer<typeof emailFormSchema>) => {
    if (!user) {
      toast.error('您需要先登录');
      router.push('/login');
      return;
    }
    setIsLoading(true);
    try {
      await userService.updateEmail({
        newEmail: data.newEmail,
        emailCode: data.emailCode,
        password: data.password,
      });
      // 更新用户信息，重新获取以保证邮箱已更新
      const updatedUser = await userService.getCurrentUser();
      setUser(updatedUser);
      toast.success('邮箱更新成功');
      // 重置表单，确保所有字段都被正确重置
      emailForm.reset({
        newEmail: '',
        captchaKey: '',
        captchaCode: '',
        emailCode: '',
        password: '',
      });
      // 刷新验证码
      refreshCaptcha();
    } catch (error: any) {
      console.error('更新邮箱失败:', error);
      if (error?.response?.status === 401 || error?.response?.status === 403) {
        toast.error('您的登录已过期，请重新登录');
        router.push('/login');
      } else if (error?.response?.status === 400) {
        toast.error('更新邮箱失败，验证码可能已过期或不正确');
      } else {
        toast.error('更新邮箱失败，请检查验证码和密码是否正确');
      }
    } finally {
      setIsLoading(false);
    }
  };
  // 处理头像文件选择
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    // 验证文件类型
    if (!file.type.startsWith('image/')) {
      toast.error('请选择图片文件');
      return;
    }
    // 验证文件大小 (最大2MB)
    if (file.size > 2 * 1024 * 1024) {
      toast.error('图片大小不能超过2MB');
      return;
    }
    setSelectedFile(file);
    const imageUrl = URL.createObjectURL(file);
    setPreviewUrl(imageUrl);
    setIsCropperOpen(true);
  };
  // 提交头像更新
  const handleAvatarUpload = async () => {
    if (!user) {
      toast.error('您需要先登录');
      router.push('/login');
      return;
    }
    if (!croppedImageFile) {
      toast.error('请先选择并裁剪头像');
      return;
    }
    setIsLoading(true);
    try {
      const response = await userService.uploadAvatar(croppedImageFile);
      // 更新用户头像
      setUser({ ...user!, avatar: response.avatarUrl });
      toast.success('头像上传成功');
      // 清理
      setSelectedFile(null);
      setPreviewUrl('');
    } catch (error: any) {
      console.error('上传头像失败:', error);
      if (error?.response?.status === 401 || error?.response?.status === 403) {
        toast.error('您的登录已过期，请重新登录');
        router.push('/login');
      } else {
        toast.error('上传头像失败，请稍后重试');
      }
    } finally {
      setIsLoading(false);
    }
  };
  return (
    <div className="container mx-auto py-6">
      <h1 className="text-3xl font-bold mb-6">个人资料</h1>
      <Tabs value={selectedTab} onValueChange={setSelectedTab} className="w-full">
        <TabsList className="mb-6">
          <TabsTrigger value="profile">基本信息</TabsTrigger>
          <TabsTrigger value="avatar">头像设置</TabsTrigger>
          <TabsTrigger value="password">修改密码</TabsTrigger>
          <TabsTrigger value="email">更新邮箱</TabsTrigger>
        </TabsList>
        {/* 基本信息表单 */}
        <TabsContent value="profile">
          <Card>
            <CardHeader>
              <CardTitle>个人资料</CardTitle>
              <CardDescription>管理您的个人资料信息，如昵称和手机号码</CardDescription>
            </CardHeader>
            <form onSubmit={profileForm.handleSubmit(onProfileSubmit)}>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="username">用户名</Label>
                  <Input id="username" value={user?.username || ''} disabled />
                  <p className="text-sm text-muted-foreground">用户名不可修改</p>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email">邮箱</Label>
                  <Input id="email" value={user?.email || ''} disabled />
                  <p className="text-sm text-muted-foreground">
                    如需修改邮箱，请前往"更新邮箱"选项卡
                  </p>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="nickname">昵称</Label>
                  <Input
                    id="nickname"
                    {...profileForm.register('nickname')}
                    placeholder="请输入昵称"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="phone">手机号码</Label>
                  <Input
                    id="phone"
                    {...profileForm.register('phone')}
                    placeholder="请输入手机号码"
                  />
                  {profileForm.formState.errors.phone && (
                    <p className="text-sm text-red-500">
                      {profileForm.formState.errors.phone.message}
                    </p>
                  )}
                </div>
              </CardContent>
              <CardFooter className="flex justify-end">
                <Button type="submit" disabled={isLoading}>
                  {isLoading ? '保存中...' : '保存修改'}
                </Button>
              </CardFooter>
            </form>
          </Card>
        </TabsContent>
        {/* 头像设置表单 */}
        <TabsContent value="avatar">
          <Card>
            <CardHeader>
              <CardTitle>头像设置</CardTitle>
              <CardDescription>更新您的个人头像</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex flex-col items-center space-y-4">
                <Avatar className="h-24 w-24">
                  <AvatarImage 
                    src={croppedImageUrl || user?.avatar} 
                    alt={user?.username} 
                  />
                  <AvatarFallback>{user?.username?.slice(0, 2).toUpperCase()}</AvatarFallback>
                </Avatar>
                <div className="flex flex-col items-center space-y-2">
                  <Label htmlFor="avatar" className="cursor-pointer">
                    <div className="px-4 py-2 bg-muted rounded-md hover:bg-muted/80 transition">
                      选择图片
                    </div>
                    <input
                      id="avatar"
                      type="file"
                      className="hidden"
                      accept="image/*"
                      onChange={handleFileChange}
                    />
                  </Label>
                  <p className="text-sm text-muted-foreground">
                    支持 JPG, PNG 格式，文件大小不超过 2MB
                  </p>
                </div>
              </div>
            </CardContent>
            <CardFooter className="flex justify-end">
              <Button
                onClick={handleAvatarUpload}
                disabled={isLoading || !croppedImageFile}
              >
                {isLoading ? '上传中...' : '上传头像'}
              </Button>
            </CardFooter>
          </Card>
        </TabsContent>
        {/* 密码修改表单 */}
        <TabsContent value="password">
          <Card>
            <CardHeader>
              <CardTitle>修改密码</CardTitle>
              <CardDescription>更新您的登录密码</CardDescription>
            </CardHeader>
            <form onSubmit={passwordForm.handleSubmit(onPasswordSubmit)}>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="oldPassword">当前密码</Label>
                  <Input
                    id="oldPassword"
                    type="password"
                    {...passwordForm.register('oldPassword')}
                    placeholder="请输入当前密码"
                  />
                  {passwordForm.formState.errors.oldPassword && (
                    <p className="text-sm text-red-500">
                      {passwordForm.formState.errors.oldPassword.message}
                    </p>
                  )}
                </div>
                <div className="space-y-2">
                  <Label htmlFor="newPassword">新密码</Label>
                  <Input
                    id="newPassword"
                    type="password"
                    {...passwordForm.register('newPassword')}
                    placeholder="请输入新密码"
                  />
                  {passwordForm.formState.errors.newPassword && (
                    <p className="text-sm text-red-500">
                      {passwordForm.formState.errors.newPassword.message}
                    </p>
                  )}
                </div>
                <div className="space-y-2">
                  <Label htmlFor="confirmPassword">确认新密码</Label>
                  <Input
                    id="confirmPassword"
                    type="password"
                    {...passwordForm.register('confirmPassword')}
                    placeholder="请再次输入新密码"
                  />
                  {passwordForm.formState.errors.confirmPassword && (
                    <p className="text-sm text-red-500">
                      {passwordForm.formState.errors.confirmPassword.message}
                    </p>
                  )}
                </div>
              </CardContent>
              <CardFooter className="flex justify-end">
                <Button type="submit" disabled={isLoading}>
                  {isLoading ? '更新中...' : '更新密码'}
                </Button>
              </CardFooter>
            </form>
          </Card>
        </TabsContent>
        {/* 更新邮箱表单 */}
        <TabsContent value="email">
          <Card>
            <CardHeader>
              <CardTitle>更新邮箱</CardTitle>
              <CardDescription>
                更新您的登录邮箱，需要验证您的身份和新邮箱的有效性。
                请按照以下步骤操作：先输入当前密码验证身份，再填写新邮箱并获取验证码。
              </CardDescription>
            </CardHeader>
            <form onSubmit={emailForm.handleSubmit(onEmailSubmit)}>
              <CardContent className="space-y-6">
                {/* 当前密码和邮箱 */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="password" className="font-semibold">当前密码</Label>
                    <Input
                      id="password"
                      type="password"
                      {...emailForm.register('password')}
                      placeholder="请输入当前密码"
                      autoComplete="current-password"
                    />
                    <p className="text-xs text-muted-foreground">为确保安全，需要先验证您的身份</p>
                    {emailForm.formState.errors.password && (
                      <p className="text-sm text-red-500">
                        {emailForm.formState.errors.password.message}
                      </p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="currentEmail">当前邮箱</Label>
                    <Input
                      id="currentEmail"
                      value={user?.email || ''}
                      disabled
                    />
                    <p className="text-xs text-muted-foreground">您当前使用的邮箱地址</p>
                  </div>
                </div>
                {/* 新邮箱和图形验证码 */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="newEmail">新邮箱</Label>
                    <Input
                      id="newEmail"
                      type="email"
                      {...emailForm.register('newEmail')}
                      placeholder="请输入新邮箱地址"
                      autoComplete="email"
                    />
                    <p className="text-xs text-muted-foreground">请确保这是一个有效的邮箱，验证码将发送至此</p>
                    {emailForm.formState.errors.newEmail && (
                      <p className="text-sm text-red-500">
                        {emailForm.formState.errors.newEmail.message}
                      </p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="captchaCode">图形验证码</Label>
                    <div className="flex space-x-2">
                      <Input
                        id="captchaCode"
                        {...emailForm.register('captchaCode')}
                        placeholder="请输入图形验证码"
                      />
                      <div 
                        className="h-10 w-24 flex-shrink-0 cursor-pointer border rounded overflow-hidden"
                        onClick={refreshCaptcha}
                        title="点击刷新验证码"
                      >
                        {isCaptchaLoading ? (
                          <div className="h-full flex items-center justify-center bg-muted">
                            <span className="text-xs">加载中...</span>
                          </div>
                        ) : (
                          captchaImage && <img src={captchaImage} alt="验证码" className="h-full w-full object-cover" />
                        )}
                      </div>
                    </div>
                    <p className="text-xs text-muted-foreground">输入图片中显示的验证码，点击图片可刷新</p>
                  </div>
                </div>
                {/* 邮箱验证码 */}
                <div className="space-y-2">
                  <Label htmlFor="emailCode">邮箱验证码</Label>
                  <div className="flex space-x-2">
                    <Input
                      id="emailCode"
                      {...emailForm.register('emailCode')}
                      placeholder="请输入邮箱验证码"
                    />
                    <Button
                      type="button"
                      variant="outline"
                      onClick={handleSendEmailCode}
                      disabled={isEmailSending || emailCodeCountdown > 0}
                      className="whitespace-nowrap"
                      title={emailCodeCountdown > 0 ? `${emailCodeCountdown}秒后可重新发送` : '发送验证码到新邮箱'}
                    >
                      {isEmailSending 
                        ? '发送中...' 
                        : emailCodeCountdown > 0 
                          ? `${emailCodeCountdown}s` 
                          : '获取验证码'}
                    </Button>
                  </div>
                  <p className="text-xs text-muted-foreground">输入发送到新邮箱的6位数字验证码</p>
                  {emailForm.formState.errors.emailCode && (
                    <p className="text-sm text-red-500">
                      {emailForm.formState.errors.emailCode.message}
                    </p>
                  )}
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <p className="text-sm text-muted-foreground">
                  更新邮箱后，将使用新邮箱作为您的登录凭证
                </p>
                <Button 
                  type="submit" 
                  disabled={isLoading}
                  className="min-w-24"
                >
                  {isLoading ? '更新中...' : '更新邮箱'}
                </Button>
              </CardFooter>
            </form>
          </Card>
        </TabsContent>
      </Tabs>
      {/* 头像裁剪对话框 */}
      <Dialog open={isCropperOpen} onOpenChange={setIsCropperOpen}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>裁剪头像</DialogTitle>
            <DialogDescription>
              调整头像的裁剪区域，保持图片比例为1:1的正方形
            </DialogDescription>
          </DialogHeader>
          <div className="my-4 flex justify-center">
            {previewUrl && (
              <ReactCrop
                crop={crop}
                onChange={(c) => setCrop(c)}
                onComplete={handleCropComplete}
                aspect={aspect}
                circularCrop
              >
                <img
                  ref={imgRef}
                  src={previewUrl}
                  alt="头像裁剪预览"
                  style={{ maxHeight: '400px' }}
                  onLoad={onImageLoad}
                />
              </ReactCrop>
            )}
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsCropperOpen(false)}>
              取消
            </Button>
            <Button onClick={handleApplyCrop}>
              应用裁剪
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/question-groups/[id]/add-questions/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Plus, Search } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Skeleton } from '@/components/ui/skeleton';
import { questionService, questionGroupService } from '@/services';
import { Question, QuestionDifficulty, QuestionType } from '@/types/question';
import { getQuestionTypeText, getQuestionDifficultyText, getQuestionDifficultyColor } from '@/utils/questionUtils';
interface PageProps {
  params: {
    id: string;
  };
}
export default function AddQuestionsPage({ params }: PageProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [questions, setQuestions] = useState<Question[]>([]);
  const [selectedQuestions, setSelectedQuestions] = useState<number[]>([]);
  const [searchKeyword, setSearchKeyword] = useState('');
  const [selectedType, setSelectedType] = useState<string>('');
  const [selectedDifficulty, setSelectedDifficulty] = useState<string>('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  // 加载题目列表
  useEffect(() => {
    fetchQuestions();
  }, [searchKeyword, selectedType, selectedDifficulty]);
  // 获取题目列表
  const fetchQuestions = async () => {
    setIsLoading(true);
    try {
      const response = await questionService.getQuestionList({
        keyword: searchKeyword,
        type: selectedType && selectedType !== 'all' ? parseInt(selectedType) : undefined,
        difficulty: selectedDifficulty && selectedDifficulty !== 'all' ? parseInt(selectedDifficulty) : undefined,
        page: 0,
        pageSize: 100
      });
      setQuestions(response.content);
    } catch (error) {
      console.error('获取题目列表失败:', error);
      toast.error('获取题目列表失败');
    } finally {
      setIsLoading(false);
    }
  };
  // 处理选择题目
  const handleSelectQuestion = (questionId: number, checked: boolean) => {
    if (checked) {
      setSelectedQuestions(prev => [...prev, questionId]);
    } else {
      setSelectedQuestions(prev => prev.filter(id => id !== questionId));
    }
  };
  // 处理全选
  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedQuestions(questions.map(q => q.id));
    } else {
      setSelectedQuestions([]);
    }
  };
  // 返回题组详情
  const handleBack = () => {
    router.back();
  };
  // 添加选中的题目到题组
  const handleAddQuestions = async () => {
    if (selectedQuestions.length === 0) {
      toast.error('请选择要添加的题目');
      return;
    }
    setIsSubmitting(true);
    try {
      await Promise.all(
        selectedQuestions.map(questionId =>
          questionGroupService.addQuestionToGroup(parseInt(params.id), questionId)
        )
      );
      toast.success('添加成功');
      router.back();
    } catch (error) {
      console.error('添加题目失败:', error);
      toast.error('添加题目失败');
    } finally {
      setIsSubmitting(false);
    }
  };
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <Button variant="ghost" onClick={handleBack}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          返回
        </Button>
      </div>
      <Card>
        <CardHeader>
          <CardTitle>添加题目</CardTitle>
          <CardDescription>
            选择要添加到题组的题目
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* 搜索和筛选 */}
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex flex-1 items-center space-x-2">
              <Input
                placeholder="搜索题目..."
                value={searchKeyword}
                onChange={(e) => setSearchKeyword(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    fetchQuestions();
                  }
                }}
                className="max-w-sm"
              />
              <Button 
                variant="outline" 
                size="icon"
                onClick={fetchQuestions}
              >
                <Search className="h-4 w-4" />
              </Button>
            </div>
            <div className="flex items-center space-x-2">
              <Select value={selectedType} onValueChange={setSelectedType}>
                <SelectTrigger className="w-[120px]">
                  <SelectValue placeholder="题目类型" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">全部类型</SelectItem>
                  <SelectItem value={QuestionType.SINGLE_CHOICE.toString()}>
                    {getQuestionTypeText(QuestionType.SINGLE_CHOICE)}
                  </SelectItem>
                  <SelectItem value={QuestionType.MULTIPLE_CHOICE.toString()}>
                    {getQuestionTypeText(QuestionType.MULTIPLE_CHOICE)}
                  </SelectItem>
                  <SelectItem value={QuestionType.TRUE_FALSE.toString()}>
                    {getQuestionTypeText(QuestionType.TRUE_FALSE)}
                  </SelectItem>
                  <SelectItem value={QuestionType.FILL_BLANK.toString()}>
                    {getQuestionTypeText(QuestionType.FILL_BLANK)}
                  </SelectItem>
                  <SelectItem value={QuestionType.SHORT_ANSWER.toString()}>
                    {getQuestionTypeText(QuestionType.SHORT_ANSWER)}
                  </SelectItem>
                </SelectContent>
              </Select>
              <Select value={selectedDifficulty} onValueChange={setSelectedDifficulty}>
                <SelectTrigger className="w-[120px]">
                  <SelectValue placeholder="难度" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">全部难度</SelectItem>
                  <SelectItem value={QuestionDifficulty.EASY.toString()}>
                    {getQuestionDifficultyText(QuestionDifficulty.EASY)}
                  </SelectItem>
                  <SelectItem value={QuestionDifficulty.MEDIUM.toString()}>
                    {getQuestionDifficultyText(QuestionDifficulty.MEDIUM)}
                  </SelectItem>
                  <SelectItem value={QuestionDifficulty.HARD.toString()}>
                    {getQuestionDifficultyText(QuestionDifficulty.HARD)}
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          {/* 题目列表 */}
          {isLoading ? (
            <div className="space-y-4">
              {[...Array(3)].map((_, index) => (
                <Skeleton key={index} className="h-16 w-full" />
              ))}
            </div>
          ) : (
            <div>
              <div className="rounded-md border">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="w-[50px]">
                        <Checkbox
                          checked={
                            questions.length > 0 &&
                            selectedQuestions.length === questions.length
                          }
                          onCheckedChange={handleSelectAll}
                        />
                      </TableHead>
                      <TableHead>题目</TableHead>
                      <TableHead>类型</TableHead>
                      <TableHead>难度</TableHead>
                      <TableHead>标签</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {questions.map((question) => (
                      <TableRow key={question.id}>
                        <TableCell>
                          <Checkbox
                            checked={selectedQuestions.includes(question.id)}
                            onCheckedChange={(checked) =>
                              handleSelectQuestion(question.id, !!checked)
                            }
                          />
                        </TableCell>
                        <TableCell>{question.title}</TableCell>
                        <TableCell>{getQuestionTypeText(question.type)}</TableCell>
                        <TableCell>
                          <Badge variant={getQuestionDifficultyColor(question.difficulty)}>
                            {getQuestionDifficultyText(question.difficulty)}
                          </Badge>
                        </TableCell>
                        <TableCell>
                          {question.tags?.map((tag) => (
                            <Badge key={tag.id} variant="outline" className="mr-1">
                              {tag.name}
                            </Badge>
                          ))}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
              {questions.length === 0 && (
                <div className="text-center py-8 text-muted-foreground">
                  暂无题目
                </div>
              )}
              {questions.length > 0 && (
                <div className="mt-4 flex justify-between items-center">
                  <div className="text-sm text-muted-foreground">
                    已选择 {selectedQuestions.length} 个题目
                  </div>
                  <Button
                    onClick={handleAddQuestions}
                    disabled={selectedQuestions.length === 0 || isSubmitting}
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    {isSubmitting ? '添加中...' : '添加到题组'}
                  </Button>
                </div>
              )}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/question-groups/[id]/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { toast } from 'sonner';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Save } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Skeleton } from '@/components/ui/skeleton';
import { questionGroupService } from '@/services';
import { QuestionGroup, QuestionGroupDTO } from '@/types/question';
import { useAuthStore } from '@/stores/auth-store';
interface PageProps {
  params: {
    id: string;
  };
}
export default function QuestionGroupPage({ params }: PageProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const isEdit = searchParams.get('edit') === 'true';
  const { user } = useAuthStore();
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [group, setGroup] = useState<QuestionGroup | null>(null);
  const [formData, setFormData] = useState<QuestionGroupDTO>({
    name: '',
    description: '',
    institutionId: user?.institutionId || 0
  });
  // 加载题组数据
  useEffect(() => {
    fetchGroup();
  }, [params.id]);
  // 获取题组详情
  const fetchGroup = async () => {
    try {
      const data = await questionGroupService.getGroupById(parseInt(params.id));
      setGroup(data);
      setFormData({
        name: data.name,
        description: data.description || '',
        institutionId: data.institutionId
      });
    } catch (error) {
      console.error('获取题组详情失败:', error);
      toast.error('获取题组详情失败');
    } finally {
      setIsLoading(false);
    }
  };
  // 处理输入变化
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  // 返回列表页
  const handleBack = () => {
    router.back();
  };
  // 提交表单
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.name.trim()) {
      toast.error('请输入题组名称');
      return;
    }
    if (!formData.institutionId) {
      toast.error('机构ID无效');
      return;
    }
    setIsSubmitting(true);
    try {
      await questionGroupService.updateGroup(parseInt(params.id), formData);
      toast.success('更新成功');
      router.push('/dashboard/question-groups');
    } catch (error) {
      console.error('更新题组失败:', error);
      toast.error('更新失败');
    } finally {
      setIsSubmitting(false);
    }
  };
  // 加载骨架屏
  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <Skeleton className="h-10 w-20" />
        </div>
        <Card>
          <CardHeader>
            <Skeleton className="h-8 w-1/4" />
            <Skeleton className="h-4 w-1/2" />
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Skeleton className="h-4 w-20" />
              <Skeleton className="h-10 w-full" />
            </div>
            <div className="space-y-2">
              <Skeleton className="h-4 w-20" />
              <Skeleton className="h-32 w-full" />
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <Button variant="ghost" onClick={handleBack}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          返回
        </Button>
      </div>
      <form onSubmit={handleSubmit}>
        <Card>
          <CardHeader>
            <CardTitle>{isEdit ? '编辑题组' : '题组详情'}</CardTitle>
            <CardDescription>
              {isEdit ? '修改题组信息' : '查看题组详细信息'}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="name">
                题组名称 {isEdit && <span className="text-red-500">*</span>}
              </Label>
              <Input
                id="name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                placeholder="输入题组名称"
                readOnly={!isEdit}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="description">描述</Label>
              <Textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                placeholder="输入题组描述（可选）"
                rows={4}
                readOnly={!isEdit}
              />
            </div>
          </CardContent>
          {isEdit && (
            <CardFooter>
              <Button type="submit" disabled={isSubmitting}>
                <Save className="h-4 w-4 mr-2" />
                {isSubmitting ? '保存中...' : '保存'}
              </Button>
            </CardFooter>
          )}
        </Card>
      </form>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/question-groups/create/page.tsx">
'use client';
import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Save } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { questionGroupService } from '@/services';
import { QuestionGroupDTO } from '@/types/question';
import { useAuthStore } from '@/stores/auth-store';
// 创建问题组页面
export default function CreateQuestionGroupPage() {
  const router = useRouter();
  const { user } = useAuthStore();
  const [isSubmitting, setIsSubmitting] = useState(false);
  // 问题组表单数据
  const [formData, setFormData] = useState<QuestionGroupDTO>({
    name: '',
    description: '',
    institutionId: user?.institutionId || 0
  });
  // 返回列表
  const handleBack = () => {
    router.back();
  };
  // 处理输入变化
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  // 提交表单
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.name.trim()) {
      toast.error('请输入题组名称');
      return;
    }
    if (!formData.institutionId) {
      toast.error('机构ID无效');
      return;
    }
    setIsSubmitting(true);
    try {
      await questionGroupService.createGroup(formData);
      toast.success('创建成功');
      router.push('/dashboard/question-groups');
    } catch (error) {
      console.error('创建题组失败:', error);
      toast.error('创建失败');
    } finally {
      setIsSubmitting(false);
    }
  };
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <Button variant="ghost" onClick={handleBack}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          返回
        </Button>
      </div>
      <form onSubmit={handleSubmit}>
        <Card>
          <CardHeader>
            <CardTitle>创建题组</CardTitle>
            <CardDescription>
              创建一个新的题目组，用于组织和管理相关题目
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="name">
                题组名称 <span className="text-red-500">*</span>
              </Label>
              <Input
                id="name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                placeholder="输入题组名称"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="description">描述</Label>
              <Textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                placeholder="输入题组描述（可选）"
                rows={4}
              />
            </div>
          </CardContent>
          <CardFooter>
            <Button type="submit" disabled={isSubmitting}>
              <Save className="h-4 w-4 mr-2" />
              {isSubmitting ? '创建中...' : '创建'}
            </Button>
          </CardFooter>
        </Card>
      </form>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/question-groups/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Plus, Search, Edit, Trash } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Skeleton } from '@/components/ui/skeleton';
import { Badge } from '@/components/ui/badge';
import { questionGroupService } from '@/services';
import { QuestionGroup } from '@/types/question';
import { useAuthStore } from '@/stores/auth-store';
import useDebounce from '@/hooks/use-debounce';
export default function QuestionGroupsPage() {
  const router = useRouter();
  const { user } = useAuthStore();
  const [isLoading, setIsLoading] = useState(true);
  const [groups, setGroups] = useState<QuestionGroup[]>([]);
  const [keyword, setKeyword] = useState('');
  const debouncedKeyword = useDebounce(keyword, 500);
  // 加载题组列表
  useEffect(() => {
    if (user?.institutionId) {
      fetchGroups();
    }
  }, [user?.institutionId, debouncedKeyword]);
  // 获取题组列表
  const fetchGroups = async () => {
    try {
      const data = await questionGroupService.getGroups({
        institutionId: user?.institutionId || 0,
        keyword: debouncedKeyword,
        page: 1,
        pageSize: 100
      });
      setGroups(data.content);
    } catch (error) {
      console.error('获取题组列表失败:', error);
      toast.error('获取题组列表失败');
    } finally {
      setIsLoading(false);
    }
  };
  // 删除题组
  const handleDelete = async (id: number) => {
    if (confirm('确定要删除此题组吗？')) {
      try {
        await questionGroupService.deleteGroup(id);
        toast.success('删除成功');
        fetchGroups();
      } catch (error) {
        console.error('删除题组失败:', error);
        toast.error('删除失败');
      }
    }
  };
  // 创建题组
  const handleCreate = () => {
    router.push('/dashboard/question-groups/create');
  };
  // 编辑题组
  const handleEdit = (id: number) => {
    router.push(`/dashboard/question-groups/${id}?edit=true`);
  };
  // 查看题组详情
  const handleView = (id: number) => {
    router.push(`/dashboard/question-groups/${id}`);
  };
  // 格式化日期
  const formatDate = (dateString: string | undefined) => {
    if (!dateString) return '';
    return new Date(dateString).toLocaleDateString();
  };
  // 加载骨架屏
  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <Skeleton className="h-10 w-64" />
          <Skeleton className="h-10 w-32" />
        </div>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {[...Array(6)].map((_, i) => (
            <Card key={i}>
              <CardHeader>
                <Skeleton className="h-6 w-3/4" />
                <Skeleton className="h-4 w-1/2" />
              </CardHeader>
              <CardContent>
                <Skeleton className="h-4 w-full mb-2" />
                <Skeleton className="h-4 w-2/3" />
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Input
            placeholder="搜索题组..."
            value={keyword}
            onChange={(e) => setKeyword(e.target.value)}
            className="w-64"
          />
          <Search className="h-4 w-4 text-muted-foreground" />
        </div>
        <Button onClick={handleCreate}>
          <Plus className="h-4 w-4 mr-2" />
          创建题组
        </Button>
      </div>
      {groups.length === 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center h-64">
            <p className="text-muted-foreground mb-4">暂无题组</p>
            <Button onClick={handleCreate}>
              <Plus className="h-4 w-4 mr-2" />
              创建题组
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {groups.map((group) => (
            <Card
              key={group.id}
              className="cursor-pointer hover:shadow-md transition-shadow"
              onClick={() => handleView(group.id)}
            >
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span className="truncate">{group.name}</span>
                  <div className="flex items-center space-x-2" onClick={(e) => e.stopPropagation()}>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => handleEdit(group.id)}
                    >
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => handleDelete(group.id)}
                    >
                      <Trash className="h-4 w-4" />
                    </Button>
                  </div>
                </CardTitle>
                <CardDescription className="truncate">
                  {group.description || '暂无描述'}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="flex items-center space-x-2">
                  <Badge variant="secondary">
                    {group.questionCount || 0} 个题目
                  </Badge>
                  <Badge variant="outline">
                    {formatDate(group.createdAt)}
                  </Badge>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/question-tags/create/page.tsx">
'use client';
import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { ArrowLeft, Save } from 'lucide-react';
import { Separator } from '@/components/ui/separator';
import { questionTagService } from '@/services';
import { QuestionTagDTO } from '@/types/question';
// 创建问题标签页面
export default function CreateQuestionTagPage() {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  // 问题标签表单数据
  const [formData, setFormData] = useState<QuestionTagDTO>({
    name: '',
    description: '',
    institutionId: 1 // 这里应该根据实际情况获取机构ID
  });
  // 返回列表
  const handleBack = () => {
    router.push('/dashboard/questions?tab=tags');
  };
  // 处理输入变化
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  // 创建问题标签
  const handleSubmit = async () => {
    // 表单验证
    if (!formData.name.trim()) {
      toast.error('请输入标签名称');
      return;
    }
    setIsSubmitting(true);
    try {
      await questionTagService.createQuestionTag(formData);
      toast.success('创建标签成功');
      router.push('/dashboard/questions?tab=tags');
    } catch (error) {
      console.error('创建标签失败:', error);
      toast.error('创建标签失败');
    } finally {
      setIsSubmitting(false);
    }
  };
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <Button
          variant="outline"
          size="sm"
          onClick={handleBack}
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          返回列表
        </Button>
        <Button
          size="sm"
          onClick={handleSubmit}
          disabled={isSubmitting}
        >
          <Save className="h-4 w-4 mr-2" />
          保存
        </Button>
      </div>
      <Separator />
      <Card>
        <CardHeader>
          <CardTitle>创建标签</CardTitle>
          <CardDescription>
            创建一个新的问题标签，用于给题目分类和检索
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="name">
                标签名称 <span className="text-red-500">*</span>
              </Label>
              <Input
                id="name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                placeholder="输入标签名称"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="description">标签描述</Label>
              <Textarea
                id="description"
                name="description"
                value={formData.description || ''}
                onChange={handleInputChange}
                placeholder="输入标签描述（可选）"
                rows={4}
              />
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/questions/[id]/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useParams, useRouter, useSearchParams } from 'next/navigation';
import { ArrowLeft, Save, Edit, Eye } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import { toast } from 'sonner';
import { 
  Question, 
  QuestionDTO, 
  QuestionType, 
  QuestionDifficulty, 
  QuestionTag 
} from '@/types/question';
import questionService from '@/services/question';
import questionTagService from '@/services/question-tag';
import { QuestionDetailForm } from '@/components/question/QuestionDetailForm';
/**
 * 题目详情/编辑页面
 */
export default function QuestionDetailPage() {
  const router = useRouter();
  const { id } = useParams();
  const searchParams = useSearchParams();
  const isEditMode = searchParams.get('edit') === 'true';
  const [loading, setLoading] = useState(true);
  const [question, setQuestion] = useState<Question | null>(null);
  const [tags, setTags] = useState<QuestionTag[]>([]);
  const [editMode, setEditMode] = useState(isEditMode);
  const [submitting, setSubmitting] = useState(false);
  // 加载数据
  useEffect(() => {
    fetchQuestionDetail();
  }, [id]);
  // 当题目加载完成后加载标签
  useEffect(() => {
    if (question) {
      fetchTags();
    }
  }, [question]);
  // 获取题目详情
  const fetchQuestionDetail = async () => {
    try {
      setLoading(true);
      const data = await questionService.getQuestionById(Number(id));
      // 确保题目类型为单选或多选
      if (data.type !== QuestionType.SINGLE_CHOICE && data.type !== QuestionType.MULTIPLE_CHOICE) {
        data.type = QuestionType.SINGLE_CHOICE;
      }
      // 确保难度有值
      if (!data.difficulty) {
        data.difficulty = QuestionDifficulty.MEDIUM;
      }
      setQuestion(data);
    } catch (error) {
      console.error('获取题目详情失败:', error);
      toast.error('获取题目详情失败');
    } finally {
      setLoading(false);
    }
  };
  // 获取所有标签
  const fetchTags = async () => {
    if (!question) return;
    try {
      const institutionId = question.institutionId || 1; // 默认值，实际应用中应从认证信息获取
      const data = await questionTagService.getAllQuestionTags(institutionId);
      setTags(data);
    } catch (error) {
      console.error('获取标签列表失败:', error);
      toast.error('获取标签列表失败');
    }
  };
  // 切换编辑模式
  const toggleEditMode = () => {
    setEditMode(!editMode);
    // 更新URL参数
    const url = new URL(window.location.href);
    if (!editMode) {
      url.searchParams.set('edit', 'true');
    } else {
      url.searchParams.delete('edit');
    }
    window.history.pushState({}, '', url);
  };
  // 返回列表页
  const handleBackToList = () => {
    router.push('/dashboard/questions');
  };
  // 保存更新
  const handleSubmit = async (formData: QuestionDTO) => {
    if (!question) return;
    try {
      setSubmitting(true);
      await questionService.updateQuestion(question.id, formData);
      toast.success('题目更新成功');
      // 更新本地数据
      await fetchQuestionDetail();
      // 切换回查看模式
      setEditMode(false);
      const url = new URL(window.location.href);
      url.searchParams.delete('edit');
      window.history.pushState({}, '', url);
    } catch (error) {
      console.error('更新题目失败:', error);
      toast.error('更新题目失败');
    } finally {
      setSubmitting(false);
    }
  };
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Button variant="outline" size="icon" onClick={handleBackToList}>
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <div>
            <h2 className="text-2xl font-bold tracking-tight">
              {loading ? <Skeleton className="h-8 w-48" /> : question?.title || '题目详情'}
            </h2>
            <p className="text-muted-foreground">
              {editMode ? '编辑题目' : '查看题目详情'}
            </p>
          </div>
        </div>
        <div className="flex items-center space-x-2">
          {!editMode ? (
            <Button onClick={toggleEditMode}>
              <Edit className="h-4 w-4 mr-2" />
              编辑题目
            </Button>
          ) : (
            <Button variant="outline" onClick={toggleEditMode}>
              <Eye className="h-4 w-4 mr-2" />
              查看模式
            </Button>
          )}
        </div>
      </div>
      <Separator />
      <Card>
        <CardContent className="p-6">
          {loading ? (
            <div className="space-y-4">
              <Skeleton className="h-8 w-full" />
              <Skeleton className="h-24 w-full" />
              <Skeleton className="h-8 w-1/2" />
              <div className="space-y-2">
                <Skeleton className="h-6 w-full" />
                <Skeleton className="h-6 w-full" />
                <Skeleton className="h-6 w-full" />
              </div>
            </div>
          ) : question ? (
            <QuestionDetailForm 
              question={question}
              tags={tags}
              readOnly={!editMode}
              onSubmit={handleSubmit}
              isSubmitting={submitting}
            />
          ) : (
            <div className="text-center py-8">
              <p>未找到题目信息</p>
              <Button 
                variant="outline" 
                onClick={handleBackToList} 
                className="mt-4"
              >
                返回列表
              </Button>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/questions/create/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Save, Plus, Trash } from 'lucide-react';
import { Separator } from '@/components/ui/separator';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Switch } from '@/components/ui/switch';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { questionService, questionTagService } from '@/services';
import { 
  Question, 
  QuestionDTO, 
  QuestionOption, 
  QuestionOptionDTO, 
  QuestionType, 
  QuestionDifficulty,
  QuestionTag
} from '@/types/question';
// 创建问题页面
export default function CreateQuestionPage() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [tags, setTags] = useState<QuestionTag[]>([]);
  const [isTagsLoading, setIsTagsLoading] = useState(false);
  // 问题表单数据
  const [question, setQuestion] = useState<Partial<QuestionDTO>>({
    title: '',
    description: '',
    type: QuestionType.SINGLE_CHOICE,
    difficulty: QuestionDifficulty.MEDIUM,
    options: [],
    answer: '',
    analysis: '',
    institutionId: 1, // 这里应该根据实际情况获取机构ID
    tagIds: [],
    score: 1 // 默认分值为1
  });
  // 加载标签列表
  useEffect(() => {
    fetchTags();
  }, []);
  // 当问题类型改变时，初始化选项
  useEffect(() => {
    if (question.type === QuestionType.SINGLE_CHOICE || question.type === QuestionType.MULTIPLE_CHOICE) {
      // 如果没有选项，初始化4个选项
      if (!question.options || question.options.length === 0) {
        setQuestion(prev => ({
          ...prev,
          options: [
            { content: '', isCorrect: false, optionOrder: 0 },
            { content: '', isCorrect: false, optionOrder: 1 },
            { content: '', isCorrect: false, optionOrder: 2 },
            { content: '', isCorrect: false, optionOrder: 3 }
          ]
        }));
      }
    } else if (question.type === QuestionType.TRUE_FALSE) {
      // 判断题只有两个选项：对/错
      setQuestion(prev => ({
        ...prev,
        options: [
          { content: '正确', isCorrect: false, optionOrder: 0 },
          { content: '错误', isCorrect: false, optionOrder: 1 }
        ]
      }));
    } else {
      // 填空题和简答题没有选项
      setQuestion(prev => ({
        ...prev,
        options: []
      }));
    }
  }, [question.type]);
  // 获取标签列表
  const fetchTags = async () => {
    setIsTagsLoading(true);
    try {
      // 使用getAllQuestionTags获取所有标签，不使用分页
      const result = await questionTagService.getAllQuestionTags(1); // 这里应该根据实际情况获取机构ID
      setTags(result);
      console.log('标签加载成功:', result);
    } catch (error) {
      console.error('获取标签列表失败:', error);
      toast.error('获取标签列表失败');
    } finally {
      setIsTagsLoading(false);
    }
  };
  // 返回列表
  const handleBack = () => {
    router.push('/dashboard/questions');
  };
  // 处理通用输入变化
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setQuestion(prev => ({ ...prev, [name]: value }));
  };
  // 处理选择框变化
  const handleSelectChange = (name: string, value: string) => {
    if (name === 'type') {
      const typeValue = parseInt(value);
      if (!isNaN(typeValue) && Object.values(QuestionType).includes(typeValue)) {
        setQuestion(prev => ({
          ...prev,
          type: typeValue as QuestionType
        }));
      }
    } else if (name === 'difficulty') {
      const difficultyValue = parseInt(value);
      if (!isNaN(difficultyValue) && Object.values(QuestionDifficulty).includes(difficultyValue)) {
        setQuestion(prev => ({
          ...prev,
          difficulty: difficultyValue as QuestionDifficulty
        }));
      }
    } else {
      setQuestion(prev => ({ ...prev, [name]: value }));
    }
  };
  // 处理选项内容变化
  const handleOptionContentChange = (index: number, value: string) => {
    if (!question.options) return;
    const updatedOptions = [...question.options];
    updatedOptions[index] = { ...updatedOptions[index], content: value };
    setQuestion(prev => ({ ...prev, options: updatedOptions }));
  };
  // 处理选项正确性变化
  const handleOptionCorrectChange = (index: number, isCorrect: boolean) => {
    if (!question.options) return;
    const updatedOptions = [...question.options];
    // 单选题需要确保只有一个选项被选中
    if (question.type === QuestionType.SINGLE_CHOICE && isCorrect) {
      updatedOptions.forEach((option, i) => {
        updatedOptions[i] = { ...option, isCorrect: i === index };
      });
    } else {
      updatedOptions[index] = { ...updatedOptions[index], isCorrect };
    }
    setQuestion(prev => ({ ...prev, options: updatedOptions }));
  };
  // 添加选项
  const handleAddOption = () => {
    if (!question.options) return;
    const newOption: QuestionOptionDTO = {
      content: '',
      isCorrect: false,
      optionOrder: question.options.length
    };
    setQuestion(prev => ({
      ...prev,
      options: [...(prev.options || []), newOption]
    }));
  };
  // 删除选项
  const handleRemoveOption = (index: number) => {
    if (!question.options) return;
    const updatedOptions = question.options.filter((_, i) => i !== index)
      .map((option, i) => ({ ...option, optionOrder: i }));
    setQuestion(prev => ({ ...prev, options: updatedOptions }));
  };
  // 处理标签选择变化
  const handleTagChange = (tagId: number, checked: boolean) => {
    const currentTagIds = question.tagIds || [];
    if (checked) {
      setQuestion(prev => ({
        ...prev,
        tagIds: [...currentTagIds, tagId]
      }));
    } else {
      setQuestion(prev => ({
        ...prev,
        tagIds: currentTagIds.filter(id => id !== tagId)
      }));
    }
  };
  // 处理分数变更
  const handleScoreChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseInt(e.target.value);
    setQuestion(prev => ({
      ...prev,
      score: isNaN(value) ? 1 : Math.max(1, Math.min(100, value))
    }));
  };
  // 创建问题
  const handleSubmit = async () => {
    // 表单验证
    if (!question.title) {
      toast.error('请输入问题标题');
      return;
    }
    // 验证分值
    if (!question.score || question.score < 1 || question.score > 100) {
      toast.error('分值必须在1-100之间');
      return;
    }
    // 选择题需要至少有两个选项
    if ((question.type === QuestionType.SINGLE_CHOICE || 
         question.type === QuestionType.MULTIPLE_CHOICE) && 
        (!question.options || question.options.length < 2)) {
      toast.error('选择题至少需要两个选项');
      return;
    }
    // 选择题至少需要一个正确答案
    if ((question.type === QuestionType.SINGLE_CHOICE || 
         question.type === QuestionType.MULTIPLE_CHOICE) && 
        (!question.options || !question.options.some(option => option.isCorrect))) {
      toast.error('请标记至少一个正确答案');
      return;
    }
    // 判断题必须有一个正确答案
    if (question.type === QuestionType.TRUE_FALSE && 
        (!question.options || !question.options.some(option => option.isCorrect))) {
      toast.error('请选择正确答案');
      return;
    }
    // 填空题和简答题需要有参考答案
    if ((question.type === QuestionType.FILL_BLANK || 
         question.type === QuestionType.SHORT_ANSWER) && 
        !question.answer) {
      toast.error('请输入参考答案');
      return;
    }
    setIsSubmitting(true);
    try {
      // 准备提交数据，创建深拷贝避免修改原始状态
      const submitData: QuestionDTO = {
        ...question as QuestionDTO,
        content: question.description // 确保content字段设置为description的值
      };
      // 如果有选项，将optionOrder映射为orderIndex字段以匹配后端API期望
      if (submitData.options && submitData.options.length > 0) {
        submitData.options = submitData.options.map(option => ({
          ...option,
          // 添加orderIndex字段以匹配后端API期望
          orderIndex: option.optionOrder
        })) as any;
      }
      console.log('提交的问题数据:', submitData);
      await questionService.createQuestion(submitData);
      toast.success('创建问题成功');
      router.push('/dashboard/questions');
    } catch (error) {
      console.error('创建问题失败:', error);
      toast.error('创建问题失败');
    } finally {
      setIsSubmitting(false);
    }
  };
  // 渲染选项输入
  const renderOptionsInput = () => {
    if (!question.options || question.options.length === 0) return null;
    if (question.type === QuestionType.TRUE_FALSE) {
      const correctIndex = question.options.findIndex(o => o.isCorrect);
      const currentValue = correctIndex >= 0 ? correctIndex.toString() : "";
      return (
        <div className="space-y-3">
          <Label>正确答案</Label>
          <RadioGroup
            value={currentValue}
            onValueChange={(value) => {
              const index = parseInt(value);
              if (!isNaN(index) && question.options) {
                const updatedOptions = question.options.map((opt, i) => ({
                  ...opt,
                  isCorrect: i === index
                }));
                setQuestion(prev => ({ ...prev, options: updatedOptions }));
              }
            }}
          >
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="0" id="true" />
              <Label htmlFor="true" className="font-normal">正确</Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="1" id="false" />
              <Label htmlFor="false" className="font-normal">错误</Label>
            </div>
          </RadioGroup>
        </div>
      );
    }
    return (
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <Label>选项</Label>
          {(question.type === QuestionType.SINGLE_CHOICE || 
            question.type === QuestionType.MULTIPLE_CHOICE) && (
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={handleAddOption}
            >
              <Plus className="h-4 w-4 mr-2" />
              添加选项
            </Button>
          )}
        </div>
        {/* 单选题 */}
        {question.type === QuestionType.SINGLE_CHOICE && question.options && (
          <div className="space-y-2">
            <div className="grid grid-cols-[1fr_auto_auto] gap-3">
              <div className="text-sm font-medium text-muted-foreground">选项内容</div>
              <div className="text-sm font-medium text-muted-foreground text-center">正确答案</div>
              <div></div>
            </div>
            <RadioGroup
              value={(question.options?.findIndex(o => o.isCorrect) ?? -1) >= 0 ? 
                (question.options?.findIndex(o => o.isCorrect) ?? -1).toString() : ""}
              onValueChange={(value) => {
                const selectedIndex = parseInt(value);
                if (!isNaN(selectedIndex) && question.options) {
                  const updatedOptions = [...question.options].map((opt, i) => ({
                    ...opt,
                    isCorrect: i === selectedIndex
                  }));
                  setQuestion(prev => ({ ...prev, options: updatedOptions }));
                }
              }}
              className="space-y-2"
            >
              {(question.options || []).map((option, index) => (
                <div key={index} className="grid grid-cols-[1fr_auto_auto] gap-3 items-center">
                  <Input
                    value={option.content}
                    onChange={(e) => handleOptionContentChange(index, e.target.value)}
                    placeholder={`选项 ${index + 1}`}
                  />
                  <div className="flex justify-center">
                    <RadioGroupItem value={index.toString()} id={`option-${index}`} />
                  </div>
                  {(question.options?.length || 0) > 2 && (
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      onClick={() => handleRemoveOption(index)}
                    >
                      <Trash className="h-4 w-4" />
                    </Button>
                  )}
                </div>
              ))}
            </RadioGroup>
          </div>
        )}
        {/* 多选题 */}
        {question.type === QuestionType.MULTIPLE_CHOICE && question.options && (
          <div className="space-y-2">
            <div className="grid grid-cols-[1fr_auto_auto] gap-3">
              <div className="text-sm font-medium text-muted-foreground">选项内容</div>
              <div className="text-sm font-medium text-muted-foreground text-center">正确答案</div>
              <div></div>
            </div>
            {(question.options || []).map((option, index) => (
              <div key={index} className="grid grid-cols-[1fr_auto_auto] gap-3 items-center">
                <Input
                  value={option.content}
                  onChange={(e) => handleOptionContentChange(index, e.target.value)}
                  placeholder={`选项 ${index + 1}`}
                />
                <div className="flex justify-center">
                  <Checkbox
                    id={`option-correct-${index}`}
                    checked={option.isCorrect}
                    onCheckedChange={(checked) => 
                      handleOptionCorrectChange(index, !!checked)
                    }
                  />
                </div>
                {(question.options?.length || 0) > 2 && (
                  <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    onClick={() => handleRemoveOption(index)}
                  >
                    <Trash className="h-4 w-4" />
                  </Button>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    );
  };
  // 渲染答案输入
  const renderAnswerInput = () => {
    if (question.type === QuestionType.SINGLE_CHOICE || 
        question.type === QuestionType.MULTIPLE_CHOICE || 
        question.type === QuestionType.TRUE_FALSE) {
      return null;
    }
    return (
      <div className="space-y-2">
        <Label htmlFor="answer">参考答案</Label>
        <Textarea
          id="answer"
          name="answer"
          value={question.answer || ''}
          onChange={handleInputChange}
          placeholder="输入参考答案"
          rows={3}
        />
      </div>
    );
  };
  // 渲染标签选择
  const renderTagsSelection = () => {
    if (isTagsLoading) {
      return <div className="text-sm text-muted-foreground">加载标签列表...</div>;
    }
    if (!tags || tags.length === 0) {
      return (
        <div className="space-y-3">
          <div className="text-sm text-muted-foreground">暂无标签</div>
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => router.push('/dashboard/questions?tab=tags')}
          >
            <Plus className="h-3.5 w-3.5 mr-1" />
            创建标签
          </Button>
        </div>
      );
    }
    return (
      <div className="space-y-4">
        <div className="grid grid-cols-2 gap-2">
          {tags.map(tag => (
            <div key={tag.id} className="flex items-center space-x-2">
              <Checkbox
                id={`tag-${tag.id}`}
                checked={(question.tagIds || []).includes(tag.id)}
                onCheckedChange={(checked) => 
                  handleTagChange(tag.id, checked as boolean)
                }
              />
              <Label htmlFor={`tag-${tag.id}`} className="text-sm font-normal cursor-pointer">
                {tag.name}
              </Label>
            </div>
          ))}
        </div>
        <div className="pt-2 flex justify-between items-center">
          <div className="text-xs text-muted-foreground">
            已选择 {(question.tagIds || []).length} 个标签
          </div>
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => router.push('/dashboard/questions?tab=tags')}
          >
            管理标签
          </Button>
        </div>
      </div>
    );
  };
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <Button
          variant="outline"
          size="sm"
          onClick={handleBack}
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          返回列表
        </Button>
        <Button
          size="sm"
          onClick={handleSubmit}
          disabled={isSubmitting}
        >
          <Save className="h-4 w-4 mr-2" />
          保存问题
        </Button>
      </div>
      <Separator />
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>问题基本信息</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="title">问题标题</Label>
                <Input
                  id="title"
                  name="title"
                  value={question.title}
                  onChange={handleInputChange}
                  placeholder="输入问题标题"
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="description">问题描述</Label>
                <Textarea
                  id="description"
                  name="description"
                  value={question.description || ''}
                  onChange={handleInputChange}
                  placeholder="输入问题描述（可选）"
                  rows={3}
                />
              </div>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="type">问题类型</Label>
                  <Select
                    value={question.type?.toString()}
                    onValueChange={(value) => 
                      handleSelectChange('type', value)
                    }
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="选择问题类型" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="0">单选题</SelectItem>
                      <SelectItem value="1">多选题</SelectItem>
                      <SelectItem value="2">判断题</SelectItem>
                      <SelectItem value="3">填空题</SelectItem>
                      <SelectItem value="4">简答题</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="difficulty">难度级别</Label>
                  <Select
                    value={question.difficulty?.toString()}
                    onValueChange={(value) => 
                      handleSelectChange('difficulty', value)
                    }
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="选择难度级别" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="1">简单</SelectItem>
                      <SelectItem value="2">中等</SelectItem>
                      <SelectItem value="3">困难</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="score">分值</Label>
                  <Input
                    id="score"
                    name="score"
                    type="number"
                    min="1"
                    max="100"
                    value={question.score || 1}
                    onChange={handleScoreChange}
                    placeholder="设置题目分值"
                  />
                  <p className="text-xs text-muted-foreground">
                    设置题目分值 (1-100)
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>选项与答案</CardTitle>
              <CardDescription>
                根据问题类型设置选项和答案
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {renderOptionsInput()}
              {renderAnswerInput()}
              <div className="space-y-2">
                <Label htmlFor="analysis">解析</Label>
                <Textarea
                  id="analysis"
                  name="analysis"
                  value={question.analysis || ''}
                  onChange={handleInputChange}
                  placeholder="输入问题解析（可选）"
                  rows={3}
                />
              </div>
            </CardContent>
          </Card>
        </div>
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>标签</CardTitle>
              <CardDescription>
                为问题添加标签以便分类和检索
              </CardDescription>
            </CardHeader>
            <CardContent>
              {renderTagsSelection()}
            </CardContent>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>预览</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="border rounded-md p-4 space-y-4">
                <div>
                  <h3 className="font-medium">{question.title || '问题标题'}</h3>
                  {question.description && (
                    <p className="text-sm text-muted-foreground mt-1">{question.description}</p>
                  )}
                </div>
                {/* 显示分值 */}
                <div className="text-sm">
                  <span className="inline-flex items-center px-2 py-1 rounded-md bg-blue-100 text-blue-800 text-xs font-medium">
                    {question.score || 1}分
                  </span>
                </div>
                {question.options && question.options.length > 0 && (
                  <div className="space-y-2">
                    {question.options.map((option, index) => (
                      <div key={index} className="flex items-center space-x-2">
                        {question.type === QuestionType.SINGLE_CHOICE ? (
                          <div className={`w-4 h-4 rounded-full border ${option.isCorrect ? 'bg-primary border-primary' : 'border-input'}`} />
                        ) : (
                          <div className={`w-4 h-4 rounded-sm border ${option.isCorrect ? 'bg-primary border-primary' : 'border-input'}`} />
                        )}
                        <span className={option.isCorrect ? 'font-medium' : ''}>{option.content || `选项 ${index + 1}`}</span>
                      </div>
                    ))}
                  </div>
                )}
                {(question.type === QuestionType.FILL_BLANK || 
                  question.type === QuestionType.SHORT_ANSWER) && 
                  question.answer && (
                  <div>
                    <h4 className="text-sm font-medium">参考答案</h4>
                    <p className="text-sm mt-1">{question.answer}</p>
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/questions/page.tsx">
'use client';
import { useState, useEffect, useCallback } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Separator } from '@/components/ui/separator';
import { Button } from '@/components/ui/button';
import { Plus, Upload, Download } from 'lucide-react';
import { useAuthStore } from '@/stores/auth-store';
import useQuestionStore from '@/stores/question-store';
import { useRouter, useSearchParams } from 'next/navigation';
import { getCreateGroupUrl } from '@/utils/navigationUtils';
// 引入组件
import { 
  QuestionList,
  QuestionGroupList,
  QuestionTagList,
  QuestionImportModal
} from '@/components/question';
export default function QuestionsPage() {
  const { user } = useAuthStore();
  const router = useRouter();
  const searchParams = useSearchParams();
  // 从URL参数中获取激活的标签页
  const tabParam = searchParams.get('tab');
  const [activeTab, setActiveTab] = useState<string>(
    tabParam && ['questions', 'groups', 'tags'].includes(tabParam) ? tabParam : 'questions'
  );
  // 添加刷新计数器，用于触发组件重新渲染
  const [refreshCounter, setRefreshCounter] = useState(0);
  const [importModalOpen, setImportModalOpen] = useState(false);
  const institutionId = user?.institutionId || 0;
  // 触发刷新
  const triggerRefresh = useCallback(() => {
    setRefreshCounter(prev => prev + 1);
  }, []);
  // 处理标签页变化
  const handleTabChange = (value: string) => {
    setActiveTab(value);
    // 更新URL，但不刷新页面
    router.replace(`/dashboard/questions?tab=${value}`, { scroll: false });
    // 当切换到题组标签页时，触发刷新
    if (value === 'groups') {
      triggerRefresh();
    }
  };
  // 处理创建题组
  const handleCreateGroup = () => {
    router.push(getCreateGroupUrl());
  };
  // 创建新题目
  const handleCreateQuestion = () => {
    router.push('/dashboard/questions/create');
  };
  // 题目导入成功回调
  const handleImportSuccess = () => {
    // 刷新题目列表
    // TODO: 实现刷新列表逻辑
  };
  // 创建新标签
  const handleCreateQuestionTag = () => {
    router.push('/dashboard/question-tags/create');
  };
  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold tracking-tight">题库管理</h2>
          <p className="text-muted-foreground">
            管理教学题库，包括题目、分组和标签
          </p>
        </div>
        {activeTab === 'questions' && (
          <div className="flex space-x-2">
            <Button
              onClick={() => setImportModalOpen(true)}
              variant="outline"
              size="sm"
            >
              <Upload className="h-4 w-4 mr-2" />
              批量导入
            </Button>
            <Button
              onClick={handleCreateQuestion}
              size="sm"
            >
              <Plus className="h-4 w-4 mr-2" />
              创建题目
            </Button>
          </div>
        )}
        {activeTab === 'groups' && (
          <Button
            onClick={handleCreateGroup}
            size="sm"
          >
            <Plus className="h-4 w-4 mr-2" />
            创建题目组
          </Button>
        )}
        {activeTab === 'tags' && (
          <Button
            onClick={handleCreateQuestionTag}
            size="sm"
          >
            <Plus className="h-4 w-4 mr-2" />
            创建标签
          </Button>
        )}
      </div>
      <Separator />
      <Tabs
        defaultValue="questions"
        value={activeTab}
        onValueChange={handleTabChange}
        className="space-y-4"
      >
        <TabsList>
          <TabsTrigger value="questions">题目管理</TabsTrigger>
          <TabsTrigger value="groups">题目分组</TabsTrigger>
          <TabsTrigger value="tags">题目标签</TabsTrigger>
        </TabsList>
        <TabsContent value="questions" className="space-y-4">
          <QuestionList institutionId={institutionId} />
        </TabsContent>
        <TabsContent value="groups" className="space-y-4">
          <QuestionGroupList 
            institutionId={institutionId} 
            key={`group-list-${refreshCounter}`} 
            onDataChange={triggerRefresh} 
          />
        </TabsContent>
        <TabsContent value="tags" className="space-y-4">
          <QuestionTagList institutionId={institutionId} />
        </TabsContent>
      </Tabs>
      {/* 导入模态框 */}
      <QuestionImportModal
        institutionId={institutionId}
        isOpen={importModalOpen}
        onClose={() => setImportModalOpen(false)}
        onSuccess={handleImportSuccess}
      />
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/reviews/[id]/course/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import Image from 'next/image';
import { 
  Card, 
  CardContent, 
  CardDescription, 
  CardFooter, 
  CardHeader, 
  CardTitle 
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { 
  Dialog, 
  DialogContent, 
  DialogDescription, 
  DialogFooter, 
  DialogHeader, 
  DialogTitle 
} from '@/components/ui/dialog';
import { 
  Tabs, 
  TabsContent, 
  TabsList, 
  TabsTrigger 
} from '@/components/ui/tabs';
import { 
  Accordion, 
  AccordionContent, 
  AccordionItem, 
  AccordionTrigger 
} from '@/components/ui/accordion';
import { 
  ArrowLeft, 
  CheckCircle, 
  XCircle, 
  Info, 
  AlertTriangle, 
  Loader2, 
  BookOpen, 
  FileText, 
  Clock, 
  ChevronRight,
  Eye
} from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { formatDate } from '@/utils/date';
import { ReviewTask, ReviewStatus, ReviewType, ReviewResponseDTO } from '@/types/review';
import { CourseStructureVO, CourseStatus } from '@/types/course';
import { reviewService } from '@/services/review-service';
import { CourseContentPlayer } from '@/components/preview/course-content-player';
import { toast } from 'sonner';
import { CoursePreviewDialog } from '@/components/dashboard/reviews/course-preview-dialog';
export default function CourseReviewPage() {
  const params = useParams();
  const router = useRouter();
  const reviewId = Number(params.id);
  const [reviewTask, setReviewTask] = useState<ReviewTask | null>(null);
  const [courseStructure, setCourseStructure] = useState<CourseStructureVO | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<string>('preview');
  const [comment, setComment] = useState<string>('');
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [showApproveDialog, setShowApproveDialog] = useState<boolean>(false);
  const [showRejectDialog, setShowRejectDialog] = useState<boolean>(false);
  // 预览相关状态
  const [selectedChapterId, setSelectedChapterId] = useState<number | null>(null);
  const [selectedSectionId, setSelectedSectionId] = useState<number | null>(null);
  const [activeSection, setActiveSection] = useState<any | null>(null);
  // 加载审核任务和课程结构
  useEffect(() => {
    const loadReviewData = async () => {
      try {
        setIsLoading(true);
        setError(null);
        // 获取审核任务详情
        const reviewTask = await reviewService.getReviewTask(String(reviewId));
        setReviewTask(reviewTask);
        // 获取课程结构详情（包含章节、小节）
        const courseData = await reviewService.getCourseStructure(Number(reviewTask.targetId));
        setCourseStructure(courseData);
        // 如果有章节，默认选中第一个
        if (courseData.chapters && courseData.chapters.length > 0) {
          setSelectedChapterId(courseData.chapters[0].id);
          // 如果第一个章节有小节，默认选中第一个小节
          if (courseData.chapters[0].sections && courseData.chapters[0].sections.length > 0) {
            const firstSection = courseData.chapters[0].sections[0];
            setSelectedSectionId(firstSection.id);
            setActiveSection(firstSection);
          }
        }
      } catch (err: any) {
        setError(err.message || '加载审核数据失败');
        console.error('加载审核数据失败:', err);
      } finally {
        setIsLoading(false);
      }
    };
    if (reviewId) {
      loadReviewData();
    }
  }, [reviewId]);
  // 处理小节选择
  const handleSectionSelect = (section: any) => {
    setSelectedSectionId(section.id);
    setActiveSection(section);
  };
  // 处理审核通过
  const handleApprove = async () => {
    try {
      setIsSubmitting(true);
      const data: ReviewResponseDTO = {
        comment: comment.trim() || undefined
      };
      await reviewService.approveCourse(String(reviewId), comment.trim() || '');
      // 跳转回审核列表页
      router.push('/dashboard/reviews');
    } catch (err: any) {
      console.error('审核通过失败:', err);
      setError(err.message || '审核通过失败');
    } finally {
      setIsSubmitting(false);
      setShowApproveDialog(false);
    }
  };
  // 处理审核拒绝
  const handleReject = async () => {
    try {
      setIsSubmitting(true);
      // 拒绝必须提供原因
      if (!comment.trim()) {
        setError('请提供拒绝原因');
        setIsSubmitting(false);
        return;
      }
      await reviewService.rejectCourse(String(reviewId), comment.trim());
      // 跳转回审核列表页
      router.push('/dashboard/reviews');
    } catch (err: any) {
      console.error('审核拒绝失败:', err);
      setError(err.message || '审核拒绝失败');
    } finally {
      setIsSubmitting(false);
      setShowRejectDialog(false);
    }
  };
  // 返回审核列表
  const handleBack = () => {
    router.push('/dashboard/reviews');
  };
  // 渲染课程状态标签
  const renderCourseStatusBadge = (status: number) => {
    switch (status) {
      case CourseStatus.DRAFT:
        return <Badge variant="outline" className="bg-gray-50 text-gray-800 border-gray-300">草稿</Badge>;
      case CourseStatus.REVIEWING:
        return <Badge variant="outline" className="bg-blue-50 text-blue-800 border-blue-300">审核中</Badge>;
      case CourseStatus.PUBLISHED:
        return <Badge variant="outline" className="bg-green-50 text-green-800 border-green-300">已发布</Badge>;
      case CourseStatus.REJECTED:
        return <Badge variant="outline" className="bg-red-50 text-red-800 border-red-300">已拒绝</Badge>;
      default:
        return <Badge variant="outline">未知</Badge>;
    }
  };
  // 跳转到全屏预览页面
  const handlePreview = () => {
    router.push(`/dashboard/reviews/${params.id}/preview`);
  };
  if (isLoading) {
    return (
      <div className="container py-10">
        <div className="flex flex-col items-center justify-center h-[60vh]">
          <Loader2 className="h-10 w-10 animate-spin text-primary mb-4" />
          <p className="text-muted-foreground">加载审核数据...</p>
        </div>
      </div>
    );
  }
  if (error) {
    return (
      <div className="container py-10">
        <Alert variant="destructive" className="mb-6">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>错误</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
        <Button 
          variant="outline" 
          onClick={handleBack}
          className="mt-4"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          返回审核列表
        </Button>
      </div>
    );
  }
  if (!reviewTask || !courseStructure) {
    return (
      <div className="container py-10">
        <Alert variant="destructive" className="mb-6">
          <AlertTriangle className="h-4 w-4" />
          <AlertTitle>未找到审核任务</AlertTitle>
          <AlertDescription>找不到指定ID的审核任务或课程结构</AlertDescription>
        </Alert>
        <Button 
          variant="outline" 
          onClick={handleBack}
          className="mt-4"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          返回审核列表
        </Button>
      </div>
    );
  }
  const course = courseStructure.course;
  return (
    <div className="container py-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <Button 
            variant="ghost" 
            onClick={handleBack}
            className="mb-2 pl-0 hover:pl-0"
          >
            <ArrowLeft className="mr-2 h-4 w-4" />
            返回审核列表
          </Button>
          <h1 className="text-3xl font-bold tracking-tight">课程审核</h1>
          <div className="flex items-center space-x-2 mt-2">
            <span className="text-sm text-muted-foreground">提交于 {formatDate(reviewTask.submittedAt)}</span>
            <span className="text-sm text-muted-foreground">•</span>
            <span className="text-sm text-muted-foreground">
              {course.status === 2 ? '审核中' : 
               course.status === 3 ? '已发布' : 
               course.status === 4 ? '已拒绝' : 
               course.status === 5 ? '已下线' : '草稿'}
            </span>
          </div>
        </div>
        <Button
          variant="outline"
          onClick={handlePreview}
        >
          <Eye className="mr-2 h-4 w-4" />
          全屏预览
        </Button>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* 左侧课程信息 */}
        <div className="md:col-span-1">
          <Card>
            <CardHeader>
              <CardTitle>课程信息</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                {course.coverUrl ? (
                  <div className="relative aspect-video rounded-md overflow-hidden mb-4">
                    <img
                      src={course.coverUrl}
                      alt={course.title}
                      className="w-full h-full object-cover"
                    />
                  </div>
                ) : (
                  <div className="aspect-video rounded-md bg-muted flex items-center justify-center mb-4">
                    <BookOpen className="h-12 w-12 text-muted-foreground" />
                  </div>
                )}
              </div>
              <div>
                <h3 className="text-lg font-semibold">{course.title}</h3>
                <p className="text-sm text-muted-foreground mt-1">{course.description || '无描述'}</p>
              </div>
              <Separator />
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm font-medium">状态</p>
                  <div className="mt-1">{renderCourseStatusBadge(course.status)}</div>
                </div>
                <div>
                  <p className="text-sm font-medium">机构</p>
                  <p className="text-sm mt-1">{course.institution?.name || '未知'}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">创建时间</p>
                  <p className="text-sm mt-1">{course.createdAt ? formatDate(course.createdAt) : '未知'}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">章节数</p>
                  <p className="text-sm mt-1">{courseStructure.chapters.length}</p>
                </div>
                <div>
                  <p className="text-sm font-medium">小节数</p>
                  <p className="text-sm mt-1">
                    {courseStructure.chapters.reduce((total, chapter) => total + chapter.sections.length, 0)}
                  </p>
                </div>
              </div>
              <Separator />
              <div>
                <h4 className="text-sm font-medium mb-2">课程章节</h4>
                <Accordion type="single" collapsible className="w-full">
                  {courseStructure.chapters.map((chapter) => (
                    <AccordionItem key={chapter.id} value={chapter.id.toString()}>
                      <AccordionTrigger className="text-sm">
                        {chapter.title}
                      </AccordionTrigger>
                      <AccordionContent>
                        <div className="pl-4 space-y-2">
                          {chapter.sections.map((section) => (
                            <div 
                              key={section.id} 
                              className="text-sm flex items-center justify-between py-1 px-2 rounded-md hover:bg-muted cursor-pointer"
                              onClick={() => {
                                setSelectedChapterId(chapter.id);
                                handleSectionSelect(section);
                                setActiveTab('preview');
                              }}
                            >
                              <span>{section.title}</span>
                              <ChevronRight className="h-4 w-4 text-muted-foreground" />
                            </div>
                          ))}
                        </div>
                      </AccordionContent>
                    </AccordionItem>
                  ))}
                </Accordion>
              </div>
            </CardContent>
          </Card>
        </div>
        {/* 右侧内容预览和审核表单 */}
        <div className="md:col-span-2">
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="mb-4">
              <TabsTrigger value="preview">内容预览</TabsTrigger>
            </TabsList>
            <TabsContent value="preview">
              <Card>
                <CardHeader>
                  <CardTitle>内容预览</CardTitle>
                  <CardDescription>
                    预览课程内容以进行审核
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {!selectedSectionId ? (
                    <div className="text-center py-12 border-2 border-dashed rounded-md">
                      <FileText className="h-10 w-10 mx-auto text-muted-foreground mb-4" />
                      <h3 className="text-lg font-medium mb-2">请选择小节</h3>
                      <p className="text-muted-foreground">从左侧章节列表中选择一个小节进行预览</p>
                    </div>
                  ) : (
                    <div>
                      {activeSection && (
                        <CourseContentPlayer section={activeSection} />
                      )}
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
          <Card className="mt-6">
            <CardHeader>
              <CardTitle>审核表单</CardTitle>
              <CardDescription>
                填写审核意见并提交审核结果
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <h3 className="text-sm font-medium mb-2">审核意见</h3>
                  <Textarea
                    placeholder="请输入审核意见或拒绝原因..."
                    value={comment}
                    onChange={(e) => setComment(e.target.value)}
                    rows={6}
                  />
                  <p className="text-xs text-muted-foreground mt-2">
                    如果拒绝审核，必须提供拒绝原因。
                  </p>
                </div>
                <div className="flex justify-end space-x-2 mt-6">
                  <Button 
                    variant="outline" 
                    onClick={() => setShowRejectDialog(true)}
                  >
                    <XCircle className="mr-2 h-4 w-4" />
                    拒绝
                  </Button>
                  <Button 
                    onClick={() => setShowApproveDialog(true)}
                  >
                    <CheckCircle className="mr-2 h-4 w-4" />
                    通过
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
      {/* 通过确认对话框 */}
      <Dialog open={showApproveDialog} onOpenChange={setShowApproveDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>确认通过审核</DialogTitle>
            <DialogDescription>
              通过审核后，该课程将被发布并对学生可见。
            </DialogDescription>
          </DialogHeader>
          <div className="py-4">
            <Textarea
              placeholder="审核意见（可选）..."
              value={comment}
              onChange={(e) => setComment(e.target.value)}
              rows={4}
            />
          </div>
          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => setShowApproveDialog(false)}
              disabled={isSubmitting}
            >
              取消
            </Button>
            <Button 
              onClick={handleApprove}
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  处理中...
                </>
              ) : (
                '确认通过'
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      {/* 拒绝确认对话框 */}
      <Dialog open={showRejectDialog} onOpenChange={setShowRejectDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>确认拒绝审核</DialogTitle>
            <DialogDescription>
              拒绝审核时必须提供理由，请详细说明拒绝原因以帮助机构改进课程。
            </DialogDescription>
          </DialogHeader>
          <div className="py-4">
            <Textarea
              placeholder="请输入拒绝原因（必填）..."
              value={comment}
              onChange={(e) => setComment(e.target.value)}
              rows={4}
            />
            {!comment.trim() && (
              <p className="text-sm text-destructive mt-2">
                拒绝审核必须提供原因
              </p>
            )}
          </div>
          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => setShowRejectDialog(false)}
              disabled={isSubmitting}
            >
              取消
            </Button>
            <Button 
              variant="destructive"
              onClick={handleReject}
              disabled={isSubmitting || !comment.trim()}
            >
              {isSubmitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  处理中...
                </>
              ) : (
                '确认拒绝'
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/reviews/[id]/preview/page.tsx">
'use client';
import React, { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { 
  Tabs, 
  TabsContent, 
  TabsList, 
  TabsTrigger 
} from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import {
  ChevronLeft,
  Eye,
  CheckCircle,
  XCircle,
  Bookmark,
  Users,
  Target,
  FileText,
  AlertCircle,
  Loader2,
  BookOpen
} from 'lucide-react';
import { Separator } from '@/components/ui/separator';
import { ReviewContentPlayer } from '@/components/dashboard/reviews/review-content-player';
import { reviewService } from '@/services';
import { ReviewTask, ReviewResponseDTO, ReviewType, ReviewStatus } from '@/types/review';
import { SectionVO, ChapterVO } from '@/types/course';
import { Textarea } from '@/components/ui/textarea';
import { Skeleton } from '@/components/ui/skeleton';
import { toast } from 'sonner';
import Image from 'next/image';
export default function ReviewPreviewPage() {
  const params = useParams();
  const router = useRouter();
  const reviewId = params.id as string;
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [courseData, setCourseData] = useState<any | null>(null);
  const [selectedChapterId, setSelectedChapterId] = useState<number | null>(null);
  const [selectedSectionId, setSelectedSectionId] = useState<number | null>(null);
  const [selectedSection, setSelectedSection] = useState<SectionVO | null>(null);
  const [sectionLoading, setSectionLoading] = useState(false);
  const [sectionError, setSectionError] = useState<string | null>(null);
  const [reviewComment, setReviewComment] = useState('');
  const [activeTab, setActiveTab] = useState('overview');
  const [submitting, setSubmitting] = useState(false);
  // 加载课程结构数据
  useEffect(() => {
    let mounted = true;
    async function loadData() {
      if (!reviewId) return;
      try {
        setLoading(true);
        setError(null);
        const structure = await reviewService.getCourseStructure(Number(reviewId));
        if (!mounted) return;
        setCourseData(structure);
        // 默认选择第一章节和小节
        if (structure.chapters && structure.chapters.length > 0) {
          const firstChapter = structure.chapters[0];
          setSelectedChapterId(firstChapter.id);
          if (firstChapter.sections && firstChapter.sections.length > 0) {
            const firstSection = firstChapter.sections[0];
            setSelectedSectionId(firstSection.id);
            setSelectedSection(firstSection);
          }
        }
      } catch (err: any) {
        if (!mounted) return;
        console.error('加载课程数据失败:', err);
        setError(err.message || '无法加载课程数据');
      } finally {
        if (mounted) {
          setLoading(false);
        }
      }
    }
    loadData();
    return () => {
      mounted = false;
    };
  }, [reviewId]);
  // 根据选择的小节ID加载小节数据
  useEffect(() => {
    if (!selectedSectionId || !courseData) return;
    // 查找当前选择的小节
    let foundSection: SectionVO | null = null;
    for (const chapter of courseData.chapters) {
      for (const section of chapter.sections) {
        if (section.id === selectedSectionId) {
          foundSection = section;
          break;
        }
      }
      if (foundSection) break;
    }
    setSelectedSection(foundSection);
  }, [selectedSectionId, courseData]);
  // 点击章节
  const handleChapterClick = (chapterId: number) => {
    if (!courseData) return;
    setSelectedChapterId(chapterId);
    // 选择该章节的第一个小节
    const chapter = courseData.chapters.find((c: ChapterVO) => c.id === chapterId);
    if (chapter && chapter.sections && chapter.sections.length > 0) {
      setSelectedSectionId(chapter.sections[0].id);
      setSelectedSection(chapter.sections[0]);
    } else {
      setSelectedSectionId(null);
      setSelectedSection(null);
    }
  };
  // 点击小节
  const handleSectionClick = (sectionId: number) => {
    if (!courseData) return;
    setSelectedSectionId(sectionId);
    // 查找这个小节
    for (const chapter of courseData.chapters) {
      for (const section of chapter.sections) {
        if (section.id === sectionId) {
          setSelectedSection(section);
          return;
        }
      }
    }
  };
  // 处理通过课程
  const handleApprove = async () => {
    if (!reviewId) return;
    try {
      setSubmitting(true);
      await reviewService.approveCourse(reviewId, reviewComment);
      toast.success('已成功通过课程');
      router.push('/dashboard/reviews');
    } catch (err: any) {
      console.error('通过课程失败:', err);
      toast.error(err.message || '通过课程失败');
    } finally {
      setSubmitting(false);
    }
  };
  // 处理拒绝课程
  const handleReject = async () => {
    if (!reviewId) return;
    try {
      setSubmitting(true);
      await reviewService.rejectCourse(reviewId, reviewComment);
      toast.success('已拒绝课程');
      router.push('/dashboard/reviews');
    } catch (err: any) {
      console.error('拒绝课程失败:', err);
      toast.error(err.message || '拒绝课程失败');
    } finally {
      setSubmitting(false);
    }
  };
  // 渲染章节菜单
  const renderChaptersMenu = () => {
    if (!courseData?.chapters) return null;
    return (
      <div className="space-y-4">
        {courseData.chapters.map((chapter: ChapterVO) => (
          <div key={chapter.id} className="space-y-2">
            <div
              className={`flex items-center justify-between p-2 rounded-md cursor-pointer hover:bg-accent ${
                selectedChapterId === chapter.id ? 'bg-accent' : ''
              }`}
              onClick={() => handleChapterClick(chapter.id)}
            >
              <span className="font-medium">{chapter.title}</span>
              <span className="text-xs text-muted-foreground">
                {chapter.sections.length} 小节
              </span>
            </div>
            {selectedChapterId === chapter.id && (
              <div className="ml-4 space-y-1">
                {chapter.sections.map((section: SectionVO) => (
                  <div
                    key={section.id}
                    className={`p-2 rounded-md cursor-pointer hover:bg-accent ${
                      selectedSectionId === section.id ? 'bg-accent' : ''
                    }`}
                    onClick={() => handleSectionClick(section.id)}
                  >
                    <span className="text-sm">{section.title}</span>
                  </div>
                ))}
              </div>
            )}
          </div>
        ))}
      </div>
    );
  };
  if (loading) {
    return (
      <div className="container py-6 flex items-center justify-center min-h-[60vh]">
        <div className="text-center">
          <Loader2 className="h-10 w-10 animate-spin text-primary mx-auto mb-4" />
          <p className="text-muted-foreground">加载课程数据...</p>
        </div>
      </div>
    );
  }
  if (error) {
    return (
      <div className="container py-6">
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>加载失败</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
        <Button 
          variant="outline" 
          className="mt-4"
          onClick={() => router.push('/dashboard/reviews')}
        >
          <ChevronLeft className="mr-2 h-4 w-4" />
          返回列表
        </Button>
      </div>
    );
  }
  if (!courseData) {
    return (
      <div className="container py-6">
        <Alert>
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>没有数据</AlertTitle>
          <AlertDescription>没有找到课程数据</AlertDescription>
        </Alert>
        <Button 
          variant="outline" 
          className="mt-4"
          onClick={() => router.push('/dashboard/reviews')}
        >
          <ChevronLeft className="mr-2 h-4 w-4" />
          返回列表
        </Button>
      </div>
    );
  }
  return (
    <div className="container py-6 space-y-8">
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <h1 className="text-2xl font-bold tracking-tight">{courseData.course.title}</h1>
          <p className="text-muted-foreground">审核预览</p>
        </div>
        <Button 
          variant="outline" 
          onClick={() => router.push('/dashboard/reviews')}
        >
          <ChevronLeft className="mr-2 h-4 w-4" />
          返回
        </Button>
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
        {/* 侧边栏 */}
        <div className="lg:col-span-3 space-y-6">
          <Card>
            <CardHeader className="pb-3">
              <CardTitle>课程章节</CardTitle>
              <CardDescription>
                共 {courseData.chapters?.length || 0} 章节
              </CardDescription>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-[60vh]">
                {renderChaptersMenu()}
              </ScrollArea>
            </CardContent>
          </Card>
        </div>
        {/* 主内容区 */}
        <div className="lg:col-span-9 space-y-6">
          <Card>
            <Tabs
              defaultValue="overview"
              value={activeTab}
              onValueChange={setActiveTab}
              className="w-full"
            >
              <CardHeader>
                <div className="flex flex-col md:flex-row gap-4 md:items-center justify-between">
                  <TabsList>
                    <TabsTrigger value="overview">课程概览</TabsTrigger>
                    <TabsTrigger value="content">课程内容</TabsTrigger>
                    <TabsTrigger value="review">审核表单</TabsTrigger>
                  </TabsList>
                </div>
              </CardHeader>
              <CardContent>
                <TabsContent value="overview" className="space-y-6">
                  <div className="space-y-4">
                    <div>
                      <h3 className="text-lg font-medium">基本信息</h3>
                      <div className="mt-2 space-y-2">
                        <div className="flex items-start">
                          <FileText className="h-5 w-5 mr-2 mt-0.5 text-muted-foreground" />
                          <div>
                            <span className="font-medium">标题：</span>
                            <span>{courseData.course.title}</span>
                          </div>
                        </div>
                        <div className="flex items-start">
                          <Bookmark className="h-5 w-5 mr-2 mt-0.5 text-muted-foreground" />
                          <div>
                            <span className="font-medium">所属机构：</span>
                            <span>{courseData.course.institution?.name || '未知'}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                    <Separator />
                    <div>
                      <h3 className="text-lg font-medium">课程介绍</h3>
                      <p className="mt-2 text-muted-foreground whitespace-pre-line">
                        {courseData.course.description || '暂无课程介绍'}
                      </p>
                    </div>
                  </div>
                </TabsContent>
                <TabsContent value="content">
                  {selectedSection ? (
                    <ReviewContentPlayer section={selectedSection} />
                  ) : (
                    <div className="text-center py-12 text-muted-foreground">
                      <FileText className="h-12 w-12 mx-auto mb-4" />
                      <h3 className="text-lg font-medium">未选择小节</h3>
                      <p>请在左侧选择要预览的小节</p>
                    </div>
                  )}
                </TabsContent>
                <TabsContent value="review">
                  <div className="space-y-6">
                    <div>
                      <h3 className="text-lg font-medium mb-2">审核信息</h3>
                      <div className="space-y-2">
                        <div className="grid grid-cols-1 gap-4">
                          <div className="p-4 border rounded-lg">
                            <div className="font-medium">课程状态</div>
                            <div className="mt-1 text-muted-foreground">
                              {courseData.course.status === 2 ? '审核中' : 
                               courseData.course.status === 3 ? '已发布' : 
                               courseData.course.status === 4 ? '已拒绝' : 
                               courseData.course.status === 5 ? '已下线' : 
                               '草稿'}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div>
                      <h3 className="text-lg font-medium mb-2">审核意见</h3>
                      <Textarea
                        placeholder="请输入审核意见..."
                        value={reviewComment}
                        onChange={(e) => setReviewComment(e.target.value)}
                        className="resize-none"
                        rows={6}
                      />
                    </div>
                    <div className="flex justify-end space-x-4">
                      <Button
                        variant="destructive"
                        onClick={handleReject}
                        disabled={submitting}
                      >
                        {submitting ? (
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        ) : (
                          <XCircle className="mr-2 h-4 w-4" />
                        )}
                        拒绝课程
                      </Button>
                      <Button
                        variant="default"
                        onClick={handleApprove}
                        disabled={submitting}
                      >
                        {submitting ? (
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        ) : (
                          <CheckCircle className="mr-2 h-4 w-4" />
                        )}
                        通过课程
                      </Button>
                    </div>
                  </div>
                </TabsContent>
              </CardContent>
            </Tabs>
          </Card>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/reviews/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { CourseStatus } from '@/types/course';
import { 
  Table, 
  TableBody, 
  TableCaption, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { 
  CheckCircle, 
  Clock, 
  FileText, 
  Loader2, 
  Search, 
  Building, 
  PlusCircle,
  Filter,
  Eye
} from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { formatDate } from '@/utils/date';
import reviewService from '@/services/review-service';
import { 
  Pagination, 
  PaginationContent, 
  PaginationItem, 
  PaginationLink, 
  PaginationNext, 
  PaginationPrevious 
} from '@/components/ui/pagination';
import { ReviewPagination } from '@/components/ui/review-pagination';
import { toast } from 'sonner';
import { CoursePreviewDialog } from '@/components/dashboard/reviews/course-preview-dialog';
export default function ReviewsPage() {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState<string>('pending');
  const [courses, setCourses] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [keyword, setKeyword] = useState<string>('');
  const [currentPage, setCurrentPage] = useState<number>(0);
  const [totalPages, setTotalPages] = useState<number>(0);
  const [totalItems, setTotalItems] = useState<number>(0);
  const [pageSize, setPageSize] = useState<number>(10);
  // 预览对话框状态
  const [showPreviewDialog, setShowPreviewDialog] = useState<boolean>(false);
  const [selectedCourseId, setSelectedCourseId] = useState<number | null>(null);
  // 加载待审核任务
  const loadCourses = async () => {
    try {
      setIsLoading(true);
      setError(null);
      let response;
      if (activeTab === 'pending') {
        // 加载待审核课程
        response = await reviewService.getAllCourses(currentPage, pageSize);
      } else {
        // 加载正在审核中的课程
        response = await reviewService.getReviewingCourses(currentPage, pageSize);
      }
      setCourses(response.content);
      setTotalPages(response.totalPages);
      setTotalItems(response.totalElements);
    } catch (err: any) {
      setError(err.message || '获取课程失败');
      console.error('获取课程失败:', err);
    } finally {
      setIsLoading(false);
    }
  };
  // 根据当前选项卡加载数据
  useEffect(() => {
    loadCourses();
  }, [activeTab, currentPage, pageSize, keyword]);
  // 处理开始审核操作
  const handleStartReview = async (courseId: number) => {
    try {
      await reviewService.startReview(courseId);
      // 导航到全屏预览页面
      router.push(`/dashboard/reviews/${courseId}/preview`);
    } catch (err: any) {
      console.error('开始审核失败:', err);
      toast.error('开始审核失败', {
        description: err.message || '无法开始审核任务'
      });
    }
  };
  // 处理继续审核操作
  const handleContinueReview = (courseId: number) => {
    // 跳转到全屏预览页面，而不是显示对话框
    router.push(`/dashboard/reviews/${courseId}/preview`);
  };
  // 审核完成后刷新数据
  const handleReviewComplete = () => {
    loadCourses();
    toast.success('审核操作已完成');
  };
  // 渲染审核状态标签
  const renderStatusBadge = (status: number) => {
    switch (status) {
      case CourseStatus.PENDING_REVIEW: // 待审核
        return <Badge variant="outline" className="bg-yellow-50 text-yellow-800 border-yellow-300">待审核</Badge>;
      case CourseStatus.REVIEWING: // 审核中
        return <Badge variant="outline" className="bg-blue-50 text-blue-800 border-blue-300">审核中</Badge>;
      case CourseStatus.PUBLISHED: // 已发布
        return <Badge variant="outline" className="bg-green-50 text-green-800 border-green-300">已发布</Badge>;
      case CourseStatus.REJECTED: // 已拒绝
        return <Badge variant="outline" className="bg-red-50 text-red-800 border-red-300">已拒绝</Badge>;
      default:
        return <Badge variant="outline">未知</Badge>;
    }
  };
  return (
    <div className="container py-6">
      <h1 className="text-3xl font-bold tracking-tight mb-6">内容审核</h1>
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <div className="flex justify-between items-center mb-4">
          <TabsList>
            <TabsTrigger value="pending">待审核课程</TabsTrigger>
            <TabsTrigger value="reviewing">审核中课程</TabsTrigger>
          </TabsList>
          <div className="flex gap-2">
            <Input
              placeholder="搜索课程..."
              value={keyword}
              onChange={(e) => setKeyword(e.target.value)}
              className="w-64"
            />
            <Select value={pageSize.toString()} onValueChange={(value) => setPageSize(Number(value))}>
              <SelectTrigger className="w-[120px]">
                <SelectValue placeholder="每页显示" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="5">5条/页</SelectItem>
                <SelectItem value="10">10条/页</SelectItem>
                <SelectItem value="20">20条/页</SelectItem>
                <SelectItem value="50">50条/页</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
        <TabsContent value="pending">
          {isLoading ? (
            <div className="flex justify-center items-center py-12">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <span className="ml-2">加载中...</span>
            </div>
          ) : courses.length === 0 ? (
            <div className="text-center py-12 border rounded-md bg-muted/20">
              <Clock className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
              <h3 className="text-lg font-medium mb-2">暂无待审核课程</h3>
              <p className="text-muted-foreground">当有新的审核任务时会显示在这里</p>
            </div>
          ) : (
            <>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>课程标题</TableHead>
                    <TableHead>机构</TableHead>
                    <TableHead>状态</TableHead>
                    <TableHead>提交时间</TableHead>
                    <TableHead className="text-right">操作</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {courses.map((course) => (
                    <TableRow key={course.id}>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <FileText className="h-4 w-4 text-primary" />
                          <span>{course.title}</span>
                        </div>
                      </TableCell>
                      <TableCell>{course.institution?.name || '未知机构'}</TableCell>
                      <TableCell>{renderStatusBadge(course.status)}</TableCell>
                      <TableCell>{course.submittedAt ? formatDate(course.submittedAt) : '未知'}</TableCell>
                      <TableCell className="text-right">
                        <Button 
                          variant="outline" 
                          size="sm" 
                          onClick={() => handleStartReview(course.id)}
                          className="gap-1"
                        >
                          <Eye className="h-4 w-4" />
                          开始审核
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
              {totalPages > 1 && (
                <div className="mt-4 flex justify-center">
                  <ReviewPagination 
                    currentPage={currentPage} 
                    totalPages={totalPages} 
                    onPageChange={setCurrentPage} 
                  />
                </div>
              )}
            </>
          )}
        </TabsContent>
        <TabsContent value="reviewing">
          {isLoading ? (
            <div className="flex justify-center items-center py-12">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <span className="ml-2">加载中...</span>
            </div>
          ) : courses.length === 0 ? (
            <div className="text-center py-12 border rounded-md bg-muted/20">
              <Clock className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
              <h3 className="text-lg font-medium mb-2">暂无审核中课程</h3>
              <p className="text-muted-foreground">当您开始审核课程后会显示在这里</p>
            </div>
          ) : (
            <>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>课程标题</TableHead>
                    <TableHead>机构</TableHead>
                    <TableHead>状态</TableHead>
                    <TableHead>开始审核时间</TableHead>
                    <TableHead className="text-right">操作</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {courses.map((course) => (
                    <TableRow key={course.id}>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <FileText className="h-4 w-4 text-primary" />
                          <span>{course.title}</span>
                        </div>
                      </TableCell>
                      <TableCell>{course.institution?.name || '未知机构'}</TableCell>
                      <TableCell>{renderStatusBadge(course.status)}</TableCell>
                      <TableCell>{course.reviewStartedAt ? formatDate(course.reviewStartedAt) : '未知'}</TableCell>
                      <TableCell className="text-right">
                        <Button 
                          variant="outline" 
                          size="sm" 
                          onClick={() => handleContinueReview(course.id)}
                          className="gap-1"
                        >
                          <Eye className="h-4 w-4" />
                          继续审核
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
              {totalPages > 1 && (
                <div className="mt-4 flex justify-center">
                  <ReviewPagination 
                    currentPage={currentPage} 
                    totalPages={totalPages} 
                    onPageChange={setCurrentPage} 
                  />
                </div>
              )}
            </>
          )}
        </TabsContent>
      </Tabs>
      {/* 课程预览与审核对话框 */}
      {selectedCourseId && (
        <CoursePreviewDialog 
          open={showPreviewDialog}
          onOpenChange={setShowPreviewDialog}
          courseId={selectedCourseId}
          onReviewComplete={handleReviewComplete}
        />
      )}
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/roles/page.tsx">
'use client';
import { useEffect, useState } from 'react';
import { Pencil, Trash2, Plus, Shield, Search, X, Settings } from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import { zhCN } from 'date-fns/locale';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { Skeleton } from '@/components/ui/skeleton';
import { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from '@/components/ui/pagination';
import { useRoleStore } from '@/stores/role-store';
import { Role } from '@/types/role';
import { RoleForm } from '@/components/dashboard/roles/role-form';
import { DeleteConfirmationDialog } from '@/components/dashboard/roles/delete-confirmation-dialog';
import { PermissionDialog } from '@/components/dashboard/roles/permission-dialog';
export default function RolesPage() {
  // 使用角色状态
  const {
    roles,
    isLoading,
    error,
    formVisible,
    confirmDialogVisible,
    permissionDialogVisible,
    selectedIds,
    fetchRoles,
    setFormVisible,
    setConfirmDialogVisible,
    setPermissionDialogVisible,
    setCurrentRole,
    toggleSelectedId,
    clearSelectedIds,
  } = useRoleStore();
  // 搜索关键字
  const [searchTerm, setSearchTerm] = useState('');
  // 是否显示搜索栏
  const [showSearch, setShowSearch] = useState(false);
  // 删除模式：单个或批量
  const [deleteMode, setDeleteMode] = useState<'single' | 'batch'>('single');
  // 当前要删除的角色ID
  const [currentDeleteId, setCurrentDeleteId] = useState<number | undefined>(undefined);
  // 当前页码
  const [currentPage, setCurrentPage] = useState(1);
  // 每页条数
  const [pageSize] = useState(10);
  // 组件加载时获取角色列表
  useEffect(() => {
    fetchRoles();
  }, [fetchRoles]);
  // 筛选角色列表
  const filteredRoles = roles?.filter((role) =>
    role.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    role.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (role.description && role.description.toLowerCase().includes(searchTerm.toLowerCase()))
  ) || [];
  // 分页角色列表
  const paginatedRoles = filteredRoles.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );
  // 总页数
  const totalPages = Math.ceil(filteredRoles.length / pageSize);
  // 处理创建角色
  const handleCreateRole = () => {
    setCurrentRole(null);
    setFormVisible(true);
  };
  // 处理编辑角色
  const handleEditRole = (role: Role) => {
    setCurrentRole(role);
    setFormVisible(true);
  };
  // 处理分配权限
  const handleAssignPermissions = (role: Role) => {
    setCurrentRole(role);
    setPermissionDialogVisible(true);
  };
  // 处理删除角色
  const handleDeleteRole = (id: number) => {
    setDeleteMode('single');
    // 设置要删除的角色ID
    useRoleStore.setState({ selectedIds: [id] });
    setConfirmDialogVisible(true);
  };
  // 处理批量删除角色
  const handleBatchDelete = () => {
    if (selectedIds.length === 0) return;
    setDeleteMode('batch');
    setConfirmDialogVisible(true);
  };
  // 处理全选/取消全选
  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      const ids = paginatedRoles.map(r => r.id);
      useRoleStore.setState({ selectedIds: ids });
    } else {
      clearSelectedIds();
    }
  };
  // 渲染角色列表表格
  const renderRolesTable = () => {
    if (isLoading) {
      return (
        <div className="space-y-3">
          {[...Array(5)].map((_, index) => (
            <Skeleton key={index} className="w-full h-12" />
          ))}
        </div>
      );
    }
    if (paginatedRoles.length === 0) {
      return (
        <div className="py-12 text-center">
          <Shield className="mx-auto h-12 w-12 text-muted-foreground" />
          <h3 className="mt-4 text-lg font-semibold">没有角色数据</h3>
          <p className="mt-2 text-sm text-muted-foreground">
            {searchTerm ? '没有匹配的搜索结果，请尝试其他关键词' : '系统中还没有角色数据，请点击"创建角色"按钮添加'}
          </p>
        </div>
      );
    }
    return (
      <>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[50px]">
                <Checkbox
                  checked={
                    paginatedRoles.length > 0 &&
                    paginatedRoles.every(r => selectedIds.includes(r.id))
                  }
                  onCheckedChange={handleSelectAll}
                  aria-label="全选"
                />
              </TableHead>
              <TableHead className="w-[200px]">角色名称</TableHead>
              <TableHead className="w-[200px]">角色编码</TableHead>
              <TableHead className="hidden md:table-cell">描述</TableHead>
              <TableHead className="w-[150px] hidden md:table-cell">创建时间</TableHead>
              <TableHead className="w-[150px] text-right">操作</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {paginatedRoles.map((role) => (
              <TableRow key={role.id}>
                <TableCell>
                  <Checkbox
                    checked={selectedIds.includes(role.id)}
                    onCheckedChange={() => toggleSelectedId(role.id)}
                    aria-label={`选择${role.name}`}
                  />
                </TableCell>
                <TableCell className="font-medium">{role.name}</TableCell>
                <TableCell>
                  <Badge variant="outline">{role.code}</Badge>
                </TableCell>
                <TableCell className="hidden md:table-cell">
                  {role.description || '-'}
                </TableCell>
                <TableCell className="hidden md:table-cell">
                  {role.createdAt
                    ? formatDistanceToNow(new Date(role.createdAt), { addSuffix: true, locale: zhCN })
                    : '-'}
                </TableCell>
                <TableCell className="text-right">
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleAssignPermissions(role)}
                    className="mr-1"
                    title="分配权限"
                  >
                    <Settings className="h-4 w-4" />
                    <span className="sr-only">分配权限</span>
                  </Button>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleEditRole(role)}
                    className="mr-1"
                    title="编辑角色"
                  >
                    <Pencil className="h-4 w-4" />
                    <span className="sr-only">编辑</span>
                  </Button>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleDeleteRole(role.id)}
                    className="text-destructive hover:text-destructive hover:bg-destructive/10"
                    title="删除角色"
                  >
                    <Trash2 className="h-4 w-4" />
                    <span className="sr-only">删除</span>
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
        {/* 分页组件 */}
        {totalPages > 1 && (
          <Pagination className="mt-4">
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious 
                  href="#" 
                  onClick={(e) => {
                    e.preventDefault();
                    if (currentPage > 1) setCurrentPage(currentPage - 1);
                  }}
                  className={currentPage === 1 ? 'pointer-events-none opacity-50' : ''}
                />
              </PaginationItem>
              {[...Array(totalPages)].map((_, i) => (
                <PaginationItem key={i}>
                  <PaginationLink 
                    href="#" 
                    onClick={(e) => {
                      e.preventDefault();
                      setCurrentPage(i + 1);
                    }}
                    isActive={currentPage === i + 1}
                  >
                    {i + 1}
                  </PaginationLink>
                </PaginationItem>
              ))}
              <PaginationItem>
                <PaginationNext 
                  href="#" 
                  onClick={(e) => {
                    e.preventDefault();
                    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
                  }}
                  className={currentPage === totalPages ? 'pointer-events-none opacity-50' : ''}
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        )}
      </>
    );
  };
  return (
    <div className="container mx-auto py-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">角色管理</h1>
        <div className="flex space-x-2">
          {showSearch ? (
            <div className="relative">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                type="text"
                placeholder="搜索角色..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-[200px] pl-8 pr-8"
              />
              {searchTerm && (
                <button
                  type="button"
                  onClick={() => setSearchTerm('')}
                  className="absolute right-2.5 top-2.5 text-muted-foreground hover:text-foreground"
                >
                  <X className="h-4 w-4" />
                  <span className="sr-only">清除搜索</span>
                </button>
              )}
            </div>
          ) : (
            <Button
              variant="outline"
              size="icon"
              onClick={() => setShowSearch(true)}
            >
              <Search className="h-4 w-4" />
              <span className="sr-only">搜索</span>
            </Button>
          )}
          {selectedIds.length > 0 && (
            <Button
              variant="destructive"
              size="sm"
              onClick={handleBatchDelete}
            >
              批量删除 ({selectedIds.length})
            </Button>
          )}
          <Button onClick={handleCreateRole}>
            <Plus className="mr-2 h-4 w-4" />
            创建角色
          </Button>
        </div>
      </div>
      <Card>
        <CardHeader>
          <CardTitle>角色列表</CardTitle>
          <CardDescription>管理系统中的角色，包括创建、编辑、删除和分配权限等操作。</CardDescription>
        </CardHeader>
        <CardContent>
          {renderRolesTable()}
        </CardContent>
      </Card>
      {/* 角色表单对话框 */}
      <RoleForm />
      {/* 权限分配对话框 */}
      <PermissionDialog />
      {/* 删除确认对话框 */}
      <DeleteConfirmationDialog />
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/storage/layout.tsx">
import React from 'react';
export default function StorageLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <>
      {children}
    </>
  );
}
</file>

<file path="front/src/app/dashboard/storage/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { 
  Database, 
  HardDrive, 
  FileText, 
  PieChart, 
  BarChart,
  RefreshCw,
  Save
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { storageService } from '@/services/storage-service';
import type { QuotaInfoVO } from '@/types/api';
// 配额类型
const QUOTA_TYPES = {
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  DOCUMENT: 'DOCUMENT',
  TOTAL: 'TOTAL'
};
// 存储配额信息
interface StorageQuota {
  id: number;
  type: string;
  totalSpace: number; // 字节数
  usedSpace: number; // 字节数
  institutionId: number;
  createdAt: string;
  updatedAt: string;
}
// 将API返回的配额信息转换为页面使用的格式
const convertQuotaInfo = (apiQuota: QuotaInfoVO): StorageQuota => ({
  id: apiQuota.type === QUOTA_TYPES.TOTAL ? 5 : Math.floor(Math.random() * 1000),
  type: apiQuota.type,
  totalSpace: apiQuota.totalQuota,
  usedSpace: apiQuota.usedQuota,
  institutionId: 1, // 从用户信息或上下文中获取
  createdAt: new Date().toISOString(),
  updatedAt: apiQuota.lastUpdatedTime
});
// 存储配额页面
export default function StoragePage() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [quotas, setQuotas] = useState<StorageQuota[]>([]);
  const [activeTab, setActiveTab] = useState('overview');
  const [useRequestDialogOpen, setUseRequestDialogOpen] = useState(false);
  const [requestAmount, setRequestAmount] = useState(1); // 默认请求1GB
  // 加载配额数据
  useEffect(() => {
    fetchQuotas();
  }, []);
  // 获取配额信息
  const fetchQuotas = async () => {
    setIsLoading(true);
    try {
      const response = await storageService.getCurrentQuotas();
      if (response.data) {
        const convertedQuotas = response.data.map(convertQuotaInfo);
        setQuotas(convertedQuotas);
      }
      setIsLoading(false);
    } catch (error) {
      console.error('获取存储配额失败:', error);
      toast.error('获取存储配额信息失败');
      setIsLoading(false);
    }
  };
  // 获取总配额
  const getTotalQuota = () => {
    return quotas.find(quota => quota.type === QUOTA_TYPES.TOTAL);
  };
  // 获取配额类型名称
  const getQuotaTypeName = (type: string): string => {
    switch (type) {
      case QUOTA_TYPES.VIDEO: return '视频';
      case QUOTA_TYPES.AUDIO: return '音频';
      case QUOTA_TYPES.IMAGE: return '图片';
      case QUOTA_TYPES.DOCUMENT: return '文档';
      case QUOTA_TYPES.TOTAL: return '总配额';
      default: return '未知';
    }
  };
  // 获取配额类型图标
  const getQuotaTypeIcon = (type: string) => {
    switch (type) {
      case QUOTA_TYPES.VIDEO: return <HardDrive className="h-6 w-6 text-blue-500" />;
      case QUOTA_TYPES.AUDIO: return <HardDrive className="h-6 w-6 text-yellow-500" />;
      case QUOTA_TYPES.IMAGE: return <HardDrive className="h-6 w-6 text-green-500" />;
      case QUOTA_TYPES.DOCUMENT: return <FileText className="h-6 w-6 text-red-500" />;
      case QUOTA_TYPES.TOTAL: return <Database className="h-6 w-6 text-purple-500" />;
      default: return <HardDrive className="h-6 w-6 text-gray-500" />;
    }
  };
  // 格式化文件大小
  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return bytes + ' B';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(2) + ' KB';
    if (bytes < 1024 * 1024 * 1024) return (bytes / (1024 * 1024)).toFixed(2) + ' MB';
    return (bytes / (1024 * 1024 * 1024)).toFixed(2) + ' GB';
  };
  // 计算使用百分比
  const calculateUsagePercentage = (quota: StorageQuota): number => {
    if (quota.totalSpace === 0) return 0;
    return Math.min(100, Math.round((quota.usedSpace / quota.totalSpace) * 100));
  };
  // 获取使用百分比的颜色
  const getUsageColor = (percentage: number): string => {
    if (percentage < 60) return 'bg-green-500';
    if (percentage < 80) return 'bg-yellow-500';
    return 'bg-red-500';
  };
  return (
    <div className="p-6 space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold tracking-tight">存储配额管理</h1>
          <p className="text-muted-foreground">监控和管理您的存储空间使用情况</p>
        </div>
        <div className="flex gap-2">
          <Button
            variant="outline"
            size="sm"
            onClick={fetchQuotas}
            disabled={isLoading}
          >
            <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
            刷新
          </Button>
          <Dialog open={useRequestDialogOpen} onOpenChange={setUseRequestDialogOpen}>
            <DialogTrigger asChild>
              <Button size="sm">
                <HardDrive className="h-4 w-4 mr-2" />
                申请存储空间
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[425px]">
              <DialogHeader>
                <DialogTitle>申请额外存储空间</DialogTitle>
                <DialogDescription>
                  您可以向系统管理员申请更多的存储空间。请填写您需要的存储空间大小。
                </DialogDescription>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="grid gap-2">
                  <Label htmlFor="amount">申请空间大小 (GB)</Label>
                  <Input 
                    id="amount" 
                    type="number" 
                    min="1" 
                    max="100" 
                    value={requestAmount} 
                    onChange={(e) => setRequestAmount(parseInt(e.target.value) || 1)}
                  />
                  <p className="text-sm text-muted-foreground">
                    当前总配额: {formatFileSize(getTotalQuota()?.totalSpace || 0)}
                  </p>
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="reason">申请原因</Label>
                  <Input id="reason" placeholder="请简要说明申请原因" />
                </div>
              </div>
              <DialogFooter>
                <Button variant="outline" onClick={() => setUseRequestDialogOpen(false)}>
                  取消
                </Button>
                <Button 
                  type="submit" 
                  onClick={() => {
                    toast.success(`存储空间申请已提交，申请${requestAmount}GB空间`);
                    setUseRequestDialogOpen(false);
                  }}
                >
                  提交申请
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
      </div>
      <Tabs defaultValue="overview" value={activeTab} onValueChange={setActiveTab}>
        <TabsList>
          <TabsTrigger value="overview">概览</TabsTrigger>
          <TabsTrigger value="details">详细信息</TabsTrigger>
          <TabsTrigger value="history">使用历史</TabsTrigger>
        </TabsList>
        <TabsContent value="overview" className="mt-6">
          {isLoading ? (
            <div className="space-y-4">
              <Card>
                <CardHeader className="p-4">
                  <Skeleton className="h-6 w-32" />
                  <Skeleton className="h-4 w-24" />
                </CardHeader>
                <CardContent className="p-4 pt-0">
                  <Skeleton className="h-8 w-full mb-2" />
                  <Skeleton className="h-4 w-1/3" />
                </CardContent>
              </Card>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {[1, 2, 3, 4].map((i) => (
                  <Card key={i}>
                    <CardHeader className="p-4">
                      <Skeleton className="h-5 w-24" />
                    </CardHeader>
                    <CardContent className="p-4 pt-0">
                      <Skeleton className="h-6 w-full mb-2" />
                      <Skeleton className="h-4 w-1/2" />
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          ) : (
            <div className="space-y-6">
              {/* 总配额概览 */}
              <Card>
                <CardHeader className="pb-2">
                  <div className="flex items-center gap-3">
                    <Database className="h-8 w-8 text-purple-500" />
                    <div>
                      <CardTitle>总存储配额</CardTitle>
                      <CardDescription>
                        您的机构总共分配了 {formatFileSize(getTotalQuota()?.totalSpace || 0)} 的存储空间
                      </CardDescription>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="pb-2">
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>已使用 {formatFileSize(getTotalQuota()?.usedSpace || 0)}</span>
                      <span>{calculateUsagePercentage(getTotalQuota() || { totalSpace: 1, usedSpace: 0 } as StorageQuota)}%</span>
                    </div>
                    <Progress 
                      value={calculateUsagePercentage(getTotalQuota() || { totalSpace: 1, usedSpace: 0 } as StorageQuota)} 
                      className="h-2.5"
                    />
                    <p className="text-sm text-muted-foreground">
                      剩余 {formatFileSize((getTotalQuota()?.totalSpace || 0) - (getTotalQuota()?.usedSpace || 0))}
                    </p>
                  </div>
                </CardContent>
              </Card>
              {/* 各类型配额概览 */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {quotas.filter(quota => quota.type !== QUOTA_TYPES.TOTAL).map(quota => (
                  <Card key={quota.id}>
                    <CardHeader className="pb-2">
                      <div className="flex items-center gap-2">
                        {getQuotaTypeIcon(quota.type)}
                        <CardTitle className="text-base">{getQuotaTypeName(quota.type)}存储</CardTitle>
                      </div>
                    </CardHeader>
                    <CardContent className="pb-2">
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span>{formatFileSize(quota.usedSpace)} / {formatFileSize(quota.totalSpace)}</span>
                          <span>{calculateUsagePercentage(quota)}%</span>
                        </div>
                        <Progress 
                          value={calculateUsagePercentage(quota)} 
                          className={`h-2 ${getUsageColor(calculateUsagePercentage(quota))}`}
                        />
                      </div>
                    </CardContent>
                    <CardFooter className="pt-0 pb-2">
                      <p className="text-xs text-muted-foreground">
                        剩余 {formatFileSize(quota.totalSpace - quota.usedSpace)}
                      </p>
                    </CardFooter>
                  </Card>
                ))}
              </div>
            </div>
          )}
        </TabsContent>
        <TabsContent value="details" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>配额详细信息</CardTitle>
              <CardDescription>
                查看每种资源类型的存储配额详情和使用情况
              </CardDescription>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <div className="space-y-4">
                  {[1, 2, 3, 4, 5].map((i) => (
                    <div key={i} className="flex items-center gap-4 p-2 border-b">
                      <Skeleton className="h-8 w-8 rounded-full" />
                      <div className="space-y-2 flex-1">
                        <Skeleton className="h-4 w-32" />
                        <Skeleton className="h-2 w-full" />
                      </div>
                      <Skeleton className="h-4 w-16" />
                    </div>
                  ))}
                </div>
              ) : (
                <div className="space-y-4">
                  {quotas.map(quota => (
                    <div key={quota.id} className="flex items-start gap-4 p-3 rounded-lg hover:bg-slate-50 dark:hover:bg-slate-900 transition-colors">
                      <div className="pt-1">
                        {getQuotaTypeIcon(quota.type)}
                      </div>
                      <div className="flex-1 space-y-2">
                        <div className="flex justify-between items-center">
                          <h3 className="font-medium">{getQuotaTypeName(quota.type)}</h3>
                          <span className="text-sm">{calculateUsagePercentage(quota)}% 已使用</span>
                        </div>
                        <Progress 
                          value={calculateUsagePercentage(quota)} 
                          className={`h-2 ${getUsageColor(calculateUsagePercentage(quota))}`}
                        />
                        <div className="flex justify-between text-sm text-muted-foreground">
                          <span>已使用: {formatFileSize(quota.usedSpace)}</span>
                          <span>总计: {formatFileSize(quota.totalSpace)}</span>
                        </div>
                        <p className="text-xs text-muted-foreground">
                          最后更新: {new Date(quota.updatedAt).toLocaleString()}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="history" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>使用历史</CardTitle>
              <CardDescription>
                查看存储空间的历史使用情况和趋势
              </CardDescription>
            </CardHeader>
            <CardContent className="relative h-96 flex items-center justify-center">
              <div className="text-center">
                <BarChart className="mx-auto h-12 w-12 text-muted-foreground mb-3" />
                <h3 className="text-lg font-medium">数据分析图表</h3>
                <p className="text-sm text-muted-foreground max-w-md mx-auto mt-1">
                  此功能将在后续版本中推出。您将能够查看存储使用的趋势和分析报告。
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/users/page.tsx">
'use client';
import { UserList } from '@/components/dashboard/users/user-list';
import { UserForm } from '@/components/dashboard/users/user-form';
import { RoleAssignmentDialog } from '@/components/dashboard/users/role-assignment-dialog';
import { DeleteConfirmationDialog } from '@/components/dashboard/users/delete-confirmation-dialog';
import { Separator } from '@/components/ui/separator';
export default function UsersPage() {
  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold tracking-tight">用户管理</h2>
        <p className="text-muted-foreground">
          管理系统用户，包括创建、编辑、删除用户以及分配角色
        </p>
      </div>
      <Separator />
      <UserList />
      {/* 对话框组件 */}
      <UserForm />
      <RoleAssignmentDialog />
      <DeleteConfirmationDialog />
    </div>
  );
}
</file>

<file path="front/src/app/globals.css">
@import "tailwindcss";
@plugin "tailwindcss-animate";
@custom-variant dark (&:is(.dark *));
@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}
:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.13 0.028 261.692);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.13 0.028 261.692);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.13 0.028 261.692);
  --primary: oklch(0.21 0.034 264.665);
  --primary-foreground: oklch(0.985 0.002 247.839);
  --secondary: oklch(0.967 0.003 264.542);
  --secondary-foreground: oklch(0.21 0.034 264.665);
  --muted: oklch(0.967 0.003 264.542);
  --muted-foreground: oklch(0.551 0.027 264.364);
  --accent: oklch(0.967 0.003 264.542);
  --accent-foreground: oklch(0.21 0.034 264.665);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.928 0.006 264.531);
  --input: oklch(0.928 0.006 264.531);
  --ring: oklch(0.707 0.022 261.325);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0.002 247.839);
  --sidebar-foreground: oklch(0.13 0.028 261.692);
  --sidebar-primary: oklch(0.21 0.034 264.665);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.967 0.003 264.542);
  --sidebar-accent-foreground: oklch(0.21 0.034 264.665);
  --sidebar-border: oklch(0.928 0.006 264.531);
  --sidebar-ring: oklch(0.707 0.022 261.325);
}
.dark {
  --background: oklch(0.13 0.028 261.692);
  --foreground: oklch(0.985 0.002 247.839);
  --card: oklch(0.13 0.028 261.692);
  --card-foreground: oklch(0.985 0.002 247.839);
  --popover: oklch(0.13 0.028 261.692);
  --popover-foreground: oklch(0.985 0.002 247.839);
  --primary: oklch(0.985 0.002 247.839);
  --primary-foreground: oklch(0.21 0.034 264.665);
  --secondary: oklch(0.278 0.033 256.848);
  --secondary-foreground: oklch(0.985 0.002 247.839);
  --muted: oklch(0.278 0.033 256.848);
  --muted-foreground: oklch(0.707 0.022 261.325);
  --accent: oklch(0.278 0.033 256.848);
  --accent-foreground: oklch(0.985 0.002 247.839);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.278 0.033 256.848);
  --input: oklch(0.278 0.033 256.848);
  --ring: oklch(0.446 0.03 256.802);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.034 264.665);
  --sidebar-foreground: oklch(0.985 0.002 247.839);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.278 0.033 256.848);
  --sidebar-accent-foreground: oklch(0.985 0.002 247.839);
  --sidebar-border: oklch(0.278 0.033 256.848);
  --sidebar-ring: oklch(0.446 0.03 256.802);
}
@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="front/src/app/institution/apply/page.tsx">
'use client';
import { useState } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { toast } from "sonner";
import Link from "next/link";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Captcha } from "@/components/ui/captcha";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useAuthStore } from "@/stores/auth-store";
import institutionService from "@/services/institution";  // 导入机构服务
// 定义表单验证Schema
const applySchema = z.object({
  name: z.string()
    .min(2, "机构名称至少需要2个字符")
    .max(100, "机构名称最多100个字符"),
  logo: z.string().url("请输入有效的图片URL").optional().or(z.literal("")),
  description: z.string()
    .max(500, "机构描述最多500个字符")
    .optional(),
  contactPerson: z.string()
    .min(2, "联系人姓名至少需要2个字符")
    .max(50, "联系人姓名最多50个字符"),
  contactPhone: z.string()
    .regex(/^1[3-9]\d{9}$/, "请输入有效的手机号码")
    .optional(),
  contactEmail: z.string()
    .email("请输入有效的邮箱地址"),
  address: z.string()
    .max(255, "地址最多255个字符")
    .optional(),
  captchaKey: z.string().min(1, "验证码key不能为空"),
  captchaCode: z.string().min(1, "验证码不能为空"),
});
type ApplyFormValues = z.infer<typeof applySchema>;
export default function InstitutionApplyPage() {
  const router = useRouter();
  const [captchaKey, setCaptchaKey] = useState<string>("");
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const { clearError } = useAuthStore();
  // 初始化表单
  const form = useForm<ApplyFormValues>({
    resolver: zodResolver(applySchema),
    defaultValues: {
      name: "",
      logo: "",
      description: "",
      contactPerson: "",
      contactPhone: "",
      contactEmail: "",
      address: "",
      captchaKey: "",
      captchaCode: ""
    }
  });
  // 处理验证码Key变化
  const handleCaptchaKeyChange = (newCaptchaKey: string) => {
    setCaptchaKey(newCaptchaKey);
    form.setValue("captchaKey", newCaptchaKey);
  };
  // 提交申请
  const onSubmit = async (data: ApplyFormValues) => {
    clearError();
    setIsSubmitting(true);
    try {
      // 调用API提交机构申请
      const applicationId = await institutionService.applyInstitution(data);
      toast.success("申请提交成功！");
      // 跳转到申请状态查询页面
      router.push(`/institution/status?id=${applicationId}&email=${encodeURIComponent(data.contactEmail)}`);
    } catch (error: any) {
      console.error("申请提交失败:", error);
      toast.error(error.message || "申请提交失败，请稍后重试");
    } finally {
      setIsSubmitting(false);
    }
  };
  return (
    <div className="min-h-screen bg-slate-50 dark:bg-slate-900 flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-2xl w-full">
        <Card className="bg-white dark:bg-slate-800 shadow border-none">
          <CardHeader className="space-y-1">
            <CardTitle className="text-2xl font-bold text-center text-slate-900 dark:text-slate-100">申请机构入驻</CardTitle>
            <CardDescription className="text-center text-slate-500 dark:text-slate-400">
              填写机构信息，提交申请后将等待平台审核
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                <Alert className="bg-blue-50 dark:bg-blue-950 text-blue-800 dark:text-blue-300 border-blue-200 dark:border-blue-900">
                  <AlertDescription>
                    请填写真实信息，以便我们能够及时联系您，并确保审核顺利通过。
                  </AlertDescription>
                </Alert>
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-slate-700 dark:text-slate-300">机构名称</FormLabel>
                      <FormControl>
                        <Input placeholder="请输入机构名称" {...field} className="bg-slate-50 dark:bg-slate-900" />
                      </FormControl>
                      <FormDescription className="text-slate-500 dark:text-slate-400 text-xs">
                        您的机构的官方名称
                      </FormDescription>
                      <FormMessage className="text-red-500" />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="logo"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-slate-700 dark:text-slate-300">机构LOGO地址（可选）</FormLabel>
                      <FormControl>
                        <Input placeholder="请输入图片URL地址" {...field} className="bg-slate-50 dark:bg-slate-900" />
                      </FormControl>
                      <FormDescription className="text-slate-500 dark:text-slate-400 text-xs">
                        输入公开可访问的图片URL，建议使用正方形图片
                      </FormDescription>
                      <FormMessage className="text-red-500" />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-slate-700 dark:text-slate-300">机构描述（可选）</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="请输入机构介绍"
                          className="min-h-[100px] bg-slate-50 dark:bg-slate-900"
                          {...field}
                        />
                      </FormControl>
                      <FormDescription className="text-slate-500 dark:text-slate-400 text-xs">
                        简要介绍您的机构背景、专业领域等信息
                      </FormDescription>
                      <FormMessage className="text-red-500" />
                    </FormItem>
                  )}
                />
                <div className="grid md:grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="contactPerson"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-slate-700 dark:text-slate-300">联系人</FormLabel>
                        <FormControl>
                          <Input placeholder="请输入联系人姓名" {...field} className="bg-slate-50 dark:bg-slate-900" />
                        </FormControl>
                        <FormMessage className="text-red-500" />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="contactPhone"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-slate-700 dark:text-slate-300">联系电话（可选）</FormLabel>
                        <FormControl>
                          <Input placeholder="请输入联系电话" {...field} className="bg-slate-50 dark:bg-slate-900" />
                        </FormControl>
                        <FormMessage className="text-red-500" />
                      </FormItem>
                    )}
                  />
                </div>
                <FormField
                  control={form.control}
                  name="contactEmail"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-slate-700 dark:text-slate-300">联系邮箱</FormLabel>
                      <FormControl>
                        <Input placeholder="请输入邮箱地址" {...field} className="bg-slate-50 dark:bg-slate-900" />
                      </FormControl>
                      <FormDescription className="text-slate-500 dark:text-slate-400 text-xs">
                        审核结果将发送到此邮箱
                      </FormDescription>
                      <FormMessage className="text-red-500" />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="address"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-slate-700 dark:text-slate-300">机构地址（可选）</FormLabel>
                      <FormControl>
                        <Input placeholder="请输入机构地址" {...field} className="bg-slate-50 dark:bg-slate-900" />
                      </FormControl>
                      <FormMessage className="text-red-500" />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="captchaCode"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-slate-700 dark:text-slate-300">验证码</FormLabel>
                      <div className="flex items-center gap-2">
                        <FormControl>
                          <Input placeholder="请输入验证码" {...field} className="bg-slate-50 dark:bg-slate-900" />
                        </FormControl>
                        <Captcha onCaptchaKeyChange={handleCaptchaKeyChange} />
                      </div>
                      <FormMessage className="text-red-500" />
                    </FormItem>
                  )}
                />
                <div className="flex flex-col gap-4 pt-2">
                  <Button type="submit" disabled={isSubmitting} className="w-full">
                    {isSubmitting ? "提交中..." : "提交申请"}
                  </Button>
                  <Button type="button" variant="outline" asChild className="w-full">
                    <Link href="/institution">返回</Link>
                  </Button>
                </div>
              </form>
            </Form>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/institution/page.tsx">
'use client';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Link from "next/link";
export default function InstitutionPage() {
  return (
    <div className="min-h-screen bg-slate-50 dark:bg-slate-900 flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl w-full space-y-8">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-slate-900 dark:text-slate-100">机构中心</h1>
          <p className="mt-2 text-sm text-slate-600 dark:text-slate-400">
            欢迎来到机构中心，您可以申请机构入驻或注册机构账号
          </p>
        </div>
        <div className="grid md:grid-cols-2 gap-6">
          <Card className="bg-white dark:bg-slate-800 shadow hover:shadow-md transition-shadow border-none">
            <CardHeader className="pb-3">
              <CardTitle className="text-xl text-slate-900 dark:text-slate-100">申请机构入驻</CardTitle>
              <CardDescription className="text-slate-500 dark:text-slate-400">
                成为我们认证的机构，发布优质课程并获得更多曝光
              </CardDescription>
            </CardHeader>
            <CardContent className="text-slate-600 dark:text-slate-300 pt-0">
              <p className="text-sm">
                填写机构资料并提交审核，平台将在1-3个工作日内完成审核。
                审核通过后，您将获得机构注册码，用于注册机构管理员账号。
              </p>
            </CardContent>
            <CardFooter>
              <Button asChild className="w-full">
                <Link href="/institution/apply">立即申请</Link>
              </Button>
            </CardFooter>
          </Card>
          <Card className="bg-white dark:bg-slate-800 shadow hover:shadow-md transition-shadow border-none">
            <CardHeader className="pb-3">
              <CardTitle className="text-xl text-slate-900 dark:text-slate-100">机构用户注册</CardTitle>
              <CardDescription className="text-slate-500 dark:text-slate-400">
                使用机构注册码注册机构管理员或教师账号
              </CardDescription>
            </CardHeader>
            <CardContent className="text-slate-600 dark:text-slate-300 pt-0">
              <p className="text-sm">
                如果您已获得机构的注册码，可以直接注册成为该机构的用户。
                机构管理员可以管理课程、学员等资源，并邀请更多教师加入。
              </p>
            </CardContent>
            <CardFooter>
              <Button asChild variant="outline" className="w-full">
                <Link href="/institution/register">立即注册</Link>
              </Button>
            </CardFooter>
          </Card>
        </div>
        <div className="mt-10 bg-white dark:bg-slate-800 p-8 rounded-lg shadow text-center">
          <h2 className="text-xl font-bold text-slate-900 dark:text-slate-100 mb-4">已提交申请?</h2>
          <p className="mb-6 text-slate-600 dark:text-slate-300 text-sm">
            查询您的申请状态，了解审核进度
          </p>
          <Button asChild variant="secondary">
            <Link href="/institution/status">查询申请状态</Link>
          </Button>
        </div>
        <div className="mt-8 pt-6 border-t border-slate-200 dark:border-slate-700 text-center">
          <Link href="/" className="text-primary hover:underline text-sm">
            返回首页
          </Link>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/institution/register/page.tsx">
'use client';
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { toast } from "sonner";
import Link from "next/link";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Captcha } from "@/components/ui/captcha";
import { useAuthStore } from "@/stores/auth-store";
import institutionAuthService from "@/services/institutionAuth";  // 导入机构认证服务
// 定义表单验证Schema
const registerSchema = z.object({
  username: z.string()
    .min(4, "用户名至少需要4个字符")
    .max(20, "用户名最多20个字符")
    .regex(/^[a-zA-Z0-9_]+$/, "用户名只能包含字母、数字和下划线"),
  password: z.string()
    .min(6, "密码至少需要6个字符")
    .max(20, "密码最多20个字符"),
  confirmPassword: z.string(),
  email: z.string().email("请输入有效的邮箱地址"),
  phone: z.string().regex(/^1[3-9]\d{9}$/, "请输入有效的手机号码").optional(),
  institutionCode: z.string().min(1, "机构注册码不能为空"),
  captchaKey: z.string().min(1, "验证码key不能为空"),
  captchaCode: z.string().min(1, "验证码不能为空"),
  emailCode: z.string().length(6, "邮箱验证码必须是6位数字"),
}).refine(data => data.password === data.confirmPassword, {
  message: "两次输入的密码不一致",
  path: ["confirmPassword"]
});
type RegisterFormValues = z.infer<typeof registerSchema>;
export default function InstitutionRegisterPage() {
  const router = useRouter();
  const [captchaKey, setCaptchaKey] = useState<string>("");
  const [emailCaptchaKey, setEmailCaptchaKey] = useState<string>("");
  const [activeTab, setActiveTab] = useState<string>("basic-info");
  const [countdown, setCountdown] = useState<number>(0);
  const [isEmailVerified, setIsEmailVerified] = useState<boolean>(false);
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [isEmailSubmitting, setIsEmailSubmitting] = useState<boolean>(false);
  const { clearError, sendEmailVerificationCode } = useAuthStore();
  // 初始化表单
  const form = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      username: "",
      password: "",
      confirmPassword: "",
      email: "",
      phone: "",
      institutionCode: "",
      captchaKey: "",
      captchaCode: "",
      emailCode: "",
    }
  });
  // 处理验证码Key变化
  const handleCaptchaKeyChange = (newCaptchaKey: string) => {
    setCaptchaKey(newCaptchaKey);
    form.setValue("captchaKey", newCaptchaKey);
  };
  // 发送邮箱验证码
  const onSendEmailCode = async () => {
    clearError();
    const email = form.getValues("email");
    const captchaCode = form.getValues("captchaCode");
    // 验证邮箱和验证码
    const emailResult = z.string().email("请输入有效的邮箱地址").safeParse(email);
    const captchaResult = z.string().min(1, "验证码不能为空").safeParse(captchaCode);
    if (!emailResult.success) {
      form.setError("email", { message: emailResult.error.errors[0].message });
      return;
    }
    if (!captchaResult.success) {
      form.setError("captchaCode", { message: captchaResult.error.errors[0].message });
      return;
    }
    // 确保验证码Key存在
    if (!captchaKey) {
      console.error("验证码Key不存在，重新获取验证码");
      toast.error("验证码已失效，请点击验证码图片刷新");
      return;
    }
    setIsEmailSubmitting(true);
    try {
      await sendEmailVerificationCode({
        email,
        captchaCode,
        captchaKey,
      });
      // 保存用于验证的captchaKey
      setEmailCaptchaKey(captchaKey);
      toast.success("验证码已发送到您的邮箱，请查收");
      setCountdown(60); // 设置60秒倒计时
    } catch (error: any) {
      console.error("发送邮箱验证码失败：", error);
      if (error.message?.includes("验证码")) {
        toast.error("验证码错误，请重新输入");
      } else {
        toast.error(error.message || "发送验证码失败，请重试");
      }
    } finally {
      setIsEmailSubmitting(false);
    }
  };
  // 提交基本信息
  const onBasicInfoSubmit = () => {
    const basicFields = ["username", "password", "confirmPassword", "institutionCode"];
    const hasErrors = basicFields.some(field => !!form.formState.errors[field as keyof RegisterFormValues]);
    if (hasErrors) {
      return;
    }
    setActiveTab("email-verify");
  };
  // 验证邮箱
  const onVerifyEmail = async () => {
    clearError();
    const emailCode = form.getValues("emailCode");
    if (!emailCode || emailCode.length !== 6) {
      form.setError("emailCode", { message: "请输入6位数字验证码" });
      return;
    }
    setIsEmailVerified(true);
    toast.success("邮箱验证成功");
    setActiveTab("submit");
  };
  // 最终提交注册
  const onSubmit = async (data: RegisterFormValues) => {
    clearError();
    setIsSubmitting(true);
    console.log("准备提交机构用户注册请求:", {
      username: data.username,
      email: data.email,
      institutionCode: data.institutionCode,
      captchaKey: data.captchaKey,
      // 不输出密码信息
    });
    try {
      // 调用API注册机构用户
      await institutionAuthService.register(data);
      console.log("注册请求成功发送");
      toast.success("注册成功！");
      // 跳转到登录页面
      router.push("/login");
    } catch (error: any) {
      console.error("注册失败:", error);
      // 输出更详细的错误信息
      if (error.code) {
        console.error(`错误代码: ${error.code}, 错误信息: ${error.message}`);
      }
      if (error.errors) {
        console.error("字段错误:", error.errors);
      }
      toast.error(error.message || "注册失败，请稍后重试");
    } finally {
      setIsSubmitting(false);
    }
  };
  // 倒计时效果
  useEffect(() => {
    if (countdown > 0) {
      const timer = setInterval(() => {
        setCountdown(prev => prev - 1);
      }, 1000);
      return () => clearInterval(timer);
    }
  }, [countdown]);
  return (
    <div className="min-h-screen bg-slate-50 dark:bg-slate-900 flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-lg w-full">
        <Card className="bg-white dark:bg-slate-800 shadow border-none">
          <CardHeader className="space-y-1">
            <CardTitle className="text-2xl font-bold text-center text-slate-900 dark:text-slate-100">机构用户注册</CardTitle>
            <CardDescription className="text-center text-slate-500 dark:text-slate-400">
              使用机构注册码注册成为机构管理员或教师
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              <TabsList className="grid w-full grid-cols-3 mb-6">
                <TabsTrigger 
                  value="basic-info" 
                  className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
                >
                  基本信息
                </TabsTrigger>
                <TabsTrigger 
                  value="email-verify" 
                  disabled={form.formState.errors.username || form.formState.errors.password || form.formState.errors.confirmPassword || form.formState.errors.institutionCode}
                  className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
                >
                  邮箱验证
                </TabsTrigger>
                <TabsTrigger 
                  value="submit" 
                  disabled={!isEmailVerified}
                  className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
                >
                  提交注册
                </TabsTrigger>
              </TabsList>
              <Form {...form}>
                <TabsContent value="basic-info">
                  <div className="space-y-4 mt-4">
                    <Alert className="bg-blue-50 dark:bg-blue-950 text-blue-800 dark:text-blue-300 border-blue-200 dark:border-blue-900">
                      <AlertDescription>
                        请填写基本信息，点击下一步进行邮箱验证
                      </AlertDescription>
                    </Alert>
                    <FormField
                      control={form.control}
                      name="username"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">用户名</FormLabel>
                          <FormControl>
                            <Input placeholder="请输入用户名" {...field} className="bg-slate-50 dark:bg-slate-900" />
                          </FormControl>
                          <FormDescription className="text-slate-500 dark:text-slate-400 text-xs">
                            用户名将用于登录，仅支持字母、数字和下划线
                          </FormDescription>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="password"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">密码</FormLabel>
                          <FormControl>
                            <Input type="password" placeholder="请输入密码" {...field} className="bg-slate-50 dark:bg-slate-900" />
                          </FormControl>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="confirmPassword"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">确认密码</FormLabel>
                          <FormControl>
                            <Input type="password" placeholder="请再次输入密码" {...field} className="bg-slate-50 dark:bg-slate-900" />
                          </FormControl>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="institutionCode"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">机构注册码</FormLabel>
                          <FormControl>
                            <Input placeholder="请输入机构注册码" {...field} className="bg-slate-50 dark:bg-slate-900" />
                          </FormControl>
                          <FormDescription className="text-slate-500 dark:text-slate-400 text-xs">
                            注册码在机构申请审核通过后通过邮件发送
                          </FormDescription>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <div className="pt-4 flex justify-between">
                      <Button type="button" variant="outline" asChild>
                        <Link href="/institution">返回</Link>
                      </Button>
                      <Button type="button" onClick={onBasicInfoSubmit}>
                        下一步
                      </Button>
                    </div>
                  </div>
                </TabsContent>
                <TabsContent value="email-verify">
                  <div className="space-y-4 mt-4">
                    <Alert className="bg-blue-50 dark:bg-blue-950 text-blue-800 dark:text-blue-300 border-blue-200 dark:border-blue-900">
                      <AlertDescription>
                        请提供您的电子邮箱并完成验证
                      </AlertDescription>
                    </Alert>
                    <FormField
                      control={form.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">电子邮箱</FormLabel>
                          <FormControl>
                            <Input type="email" placeholder="请输入邮箱地址" {...field} className="bg-slate-50 dark:bg-slate-900" />
                          </FormControl>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="phone"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">手机号码（可选）</FormLabel>
                          <FormControl>
                            <Input placeholder="请输入手机号码" {...field} className="bg-slate-50 dark:bg-slate-900" />
                          </FormControl>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="captchaCode"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">图形验证码</FormLabel>
                          <div className="flex items-center gap-2">
                            <FormControl>
                              <Input placeholder="请输入验证码" {...field} className="bg-slate-50 dark:bg-slate-900" />
                            </FormControl>
                            <Captcha onCaptchaKeyChange={handleCaptchaKeyChange} />
                          </div>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="emailCode"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">邮箱验证码</FormLabel>
                          <div className="flex items-center gap-2">
                            <FormControl>
                              <Input placeholder="请输入邮箱验证码" {...field} className="bg-slate-50 dark:bg-slate-900" />
                            </FormControl>
                            <Button 
                              type="button" 
                              variant="outline" 
                              onClick={onSendEmailCode}
                              disabled={countdown > 0 || isEmailSubmitting}
                              className="whitespace-nowrap"
                            >
                              {isEmailSubmitting ? "发送中..." : countdown > 0 ? `${countdown}秒后重发` : "发送验证码"}
                            </Button>
                          </div>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <div className="pt-4 flex justify-between">
                      <Button type="button" onClick={() => setActiveTab("basic-info")} variant="outline">
                        返回上一步
                      </Button>
                      <Button type="button" onClick={onVerifyEmail} disabled={!form.getValues("emailCode")}>
                        验证邮箱
                      </Button>
                    </div>
                  </div>
                </TabsContent>
                <TabsContent value="submit">
                  <div className="space-y-4 mt-4">
                    <Alert className="bg-green-50 dark:bg-green-950 text-green-800 dark:text-green-300 border-green-200 dark:border-green-900">
                      <AlertDescription>
                        请确认以下信息无误，点击"提交注册"完成注册
                      </AlertDescription>
                    </Alert>
                    <div className="border border-slate-200 dark:border-slate-700 rounded-md p-4 space-y-3">
                      <div className="grid grid-cols-2 gap-2">
                        <div>
                          <p className="text-sm text-slate-500 dark:text-slate-400">用户名</p>
                          <p className="font-medium text-slate-900 dark:text-slate-100">{form.getValues("username")}</p>
                        </div>
                        <div>
                          <p className="text-sm text-slate-500 dark:text-slate-400">电子邮箱</p>
                          <p className="font-medium text-slate-900 dark:text-slate-100">{form.getValues("email")}</p>
                        </div>
                        {form.getValues("phone") && (
                          <div>
                            <p className="text-sm text-slate-500 dark:text-slate-400">手机号码</p>
                            <p className="font-medium text-slate-900 dark:text-slate-100">{form.getValues("phone")}</p>
                          </div>
                        )}
                        <div>
                          <p className="text-sm text-slate-500 dark:text-slate-400">机构注册码</p>
                          <p className="font-medium text-slate-900 dark:text-slate-100">{form.getValues("institutionCode")}</p>
                        </div>
                      </div>
                    </div>
                    <div className="border border-slate-200 dark:border-slate-700 rounded-md p-4">
                      <p className="text-sm font-medium text-slate-900 dark:text-slate-100 mb-2">验证码确认</p>
                      <p className="text-xs text-slate-500 dark:text-slate-400 mb-3">
                        为确保注册成功，请在提交前刷新验证码
                      </p>
                      <div className="flex items-center gap-2">
                        <Input 
                          placeholder="请输入验证码" 
                          defaultValue={form.getValues("captchaCode")}
                          onChange={(e) => form.setValue("captchaCode", e.target.value, { shouldValidate: true })}
                          className="bg-slate-50 dark:bg-slate-900 w-32" 
                        />
                        <Captcha onCaptchaKeyChange={handleCaptchaKeyChange} />
                      </div>
                    </div>
                    <div className="pt-4 flex justify-between">
                      <Button type="button" onClick={() => setActiveTab("email-verify")} variant="outline">
                        返回上一步
                      </Button>
                      <Button type="button" onClick={form.handleSubmit(onSubmit)} disabled={isSubmitting}>
                        {isSubmitting ? "注册中..." : "提交注册"}
                      </Button>
                    </div>
                  </div>
                </TabsContent>
              </Form>
            </Tabs>
          </CardContent>
          <CardFooter className="flex justify-center border-t border-slate-200 dark:border-slate-700 pt-4">
            <p className="text-sm text-slate-500 dark:text-slate-400">
              已有账号？{" "}
              <Link href="/login" className="text-primary hover:underline">
                立即登录
              </Link>
            </p>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/institution/status/page.tsx">
'use client';
import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { toast } from "sonner";
import Link from "next/link";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import institutionService from "@/services/institution";  // 导入机构服务
import { InstitutionApplicationResponse } from "@/types/institution"; // 导入类型
// 定义表单验证Schema
const querySchema = z.object({
  applicationId: z.string().min(1, "申请ID不能为空"),
  email: z.string().email("请输入有效的邮箱地址"),
});
// 定义申请状态类型
type ApplicationStatus = 0 | 1 | 2;
// 定义申请状态映射
const statusMap: Record<ApplicationStatus, { label: string; color: string }> = {
  0: { label: "待审核", color: "bg-yellow-100 text-yellow-800 border-yellow-200" },
  1: { label: "已通过", color: "bg-green-100 text-green-800 border-green-200" },
  2: { label: "已拒绝", color: "bg-red-100 text-red-800 border-red-200" },
};
export default function InstitutionStatusPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [application, setApplication] = useState<InstitutionApplicationResponse | null>(null);
  const [isSearch, setIsSearch] = useState<boolean>(false);
  // 从URL参数获取
  const applicationId = searchParams.get("id");
  const email = searchParams.get("email");
  // 初始化表单
  const form = useForm<z.infer<typeof querySchema>>({
    resolver: zodResolver(querySchema),
    defaultValues: {
      applicationId: applicationId || "",
      email: email || "",
    },
  });
  // 如果有URL参数，自动查询
  useEffect(() => {
    if (applicationId && email) {
      fetchApplication(applicationId, email);
    }
  }, [applicationId, email]);
  // 查询申请状态
  const onSubmit = async (data: z.infer<typeof querySchema>) => {
    fetchApplication(data.applicationId, data.email);
  };
  // 获取申请状态
  const fetchApplication = async (applicationId: string, email: string) => {
    setIsLoading(true);
    setIsSearch(true);
    try {
      // 调用API查询申请状态
      const application = await institutionService.getApplicationStatus(applicationId, email);
      setApplication(application);
      if (application.status === 1) {
        toast.success("恭喜！您的申请已通过审核");
      } else if (application.status === 2) {
        toast.error("抱歉，您的申请未通过审核");
      }
    } catch (error: any) {
      console.error("查询失败:", error);
      // 更全面的错误处理
      setApplication(null);
      // 检查是否有响应状态码
      const statusCode = error?.response?.status;
      if (statusCode === 404) {
        toast.info("未找到相关申请记录，可能原因：1.申请已通过并处理完成 2.申请编号或邮箱输入错误");
      } else if (statusCode === 403) {
        toast.error("无权访问该申请记录，请确认信息是否正确");
      } else {
        // 通用错误处理 - 提供更友好的提示
        toast.info("无法查询到申请状态", {
          description: "可能的原因: 1.申请已通过审核 2.申请信息输入有误 3.网络连接问题",
          action: {
            label: "了解更多",
            onClick: () => window.open('/help/institution-application', '_blank')
          },
          duration: 6000
        });
      }
    } finally {
      setIsLoading(false);
    }
  };
  return (
    <div className="min-h-screen bg-slate-50 dark:bg-slate-900 flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-2xl w-full">
        <Card className="bg-white dark:bg-slate-800 shadow border-none">
          <CardHeader className="space-y-1">
            <CardTitle className="text-2xl font-bold text-center text-slate-900 dark:text-slate-100">申请状态查询</CardTitle>
            <CardDescription className="text-center text-slate-500 dark:text-slate-400">
              查询机构入驻申请的审核状态
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                <div className="grid md:grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="applicationId"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-slate-700 dark:text-slate-300">申请ID</FormLabel>
                        <FormControl>
                          <Input placeholder="请输入申请ID" {...field} className="bg-slate-50 dark:bg-slate-900" />
                        </FormControl>
                        <FormMessage className="text-red-500" />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-slate-700 dark:text-slate-300">联系邮箱</FormLabel>
                        <FormControl>
                          <Input placeholder="请输入申请时使用的邮箱" {...field} className="bg-slate-50 dark:bg-slate-900" />
                        </FormControl>
                        <FormMessage className="text-red-500" />
                      </FormItem>
                    )}
                  />
                </div>
                <div className="flex justify-between gap-4">
                  <Button type="submit" disabled={isLoading}>
                    {isLoading ? "查询中..." : "查询申请状态"}
                  </Button>
                  <Button type="button" variant="outline" asChild>
                    <Link href="/institution">返回</Link>
                  </Button>
                </div>
              </form>
            </Form>
            {isLoading && (
              <div className="mt-8 space-y-4">
                <Skeleton className="h-8 w-full" />
                <Skeleton className="h-20 w-full" />
                <Skeleton className="h-16 w-full" />
              </div>
            )}
            {!isLoading && isSearch && application && (
              <div className="mt-8 space-y-6 border border-slate-200 dark:border-slate-700 rounded-lg p-6">
                <div className="flex justify-between items-center">
                  <h3 className="text-xl font-bold text-slate-900 dark:text-slate-100">{application.name}</h3>
                  <Badge className={`${statusMap[application.status as ApplicationStatus].color} border`}>
                    {statusMap[application.status as ApplicationStatus].label}
                  </Badge>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-slate-500 dark:text-slate-400">申请ID</p>
                    <p className="font-medium text-slate-900 dark:text-slate-100">{application.applicationId}</p>
                  </div>
                  <div>
                    <p className="text-sm text-slate-500 dark:text-slate-400">联系人</p>
                    <p className="font-medium text-slate-900 dark:text-slate-100">{application.contactPerson}</p>
                  </div>
                  <div>
                    <p className="text-sm text-slate-500 dark:text-slate-400">联系邮箱</p>
                    <p className="font-medium text-slate-900 dark:text-slate-100">{application.contactEmail}</p>
                  </div>
                  <div>
                    <p className="text-sm text-slate-500 dark:text-slate-400">联系电话</p>
                    <p className="font-medium text-slate-900 dark:text-slate-100">{application.contactPhone || '-'}</p>
                  </div>
                  <div>
                    <p className="text-sm text-slate-500 dark:text-slate-400">申请时间</p>
                    <p className="font-medium text-slate-900 dark:text-slate-100">{new Date(application.createdAt).toLocaleString()}</p>
                  </div>
                  {application.reviewedAt && (
                    <div>
                      <p className="text-sm text-slate-500 dark:text-slate-400">审核时间</p>
                      <p className="font-medium text-slate-900 dark:text-slate-100">{new Date(application.reviewedAt).toLocaleString()}</p>
                    </div>
                  )}
                </div>
                {application.status === 1 && (
                  <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-md border border-green-200 dark:border-green-900">
                    <p className="font-medium text-green-800 dark:text-green-300">恭喜！您的机构申请已通过审核</p>
                    <p className="text-green-700 dark:text-green-400 mt-1 text-sm">请使用审核通过邮件中的机构注册码注册机构管理员账号。</p>
                    <div className="mt-4">
                      <Button asChild size="sm" className="bg-green-600 hover:bg-green-700">
                        <Link href="/institution/register">前往注册机构账号</Link>
                      </Button>
                    </div>
                  </div>
                )}
                {application.status === 2 && application.reviewComment && (
                  <div className="bg-red-50 dark:bg-red-900/20 p-4 rounded-md border border-red-200 dark:border-red-900">
                    <p className="font-medium text-red-800 dark:text-red-300">申请被拒绝</p>
                    <p className="text-red-700 dark:text-red-400 mt-1 text-sm">拒绝原因：{application.reviewComment}</p>
                    <div className="mt-4">
                      <Button asChild size="sm" variant="outline" className="border-red-300 text-red-700 hover:bg-red-50 dark:border-red-800 dark:text-red-300 dark:hover:bg-red-900/30">
                        <Link href="/institution/apply">重新申请</Link>
                      </Button>
                    </div>
                  </div>
                )}
                {application.status === 0 && (
                  <div className="bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-md border border-yellow-200 dark:border-yellow-900">
                    <p className="font-medium text-yellow-800 dark:text-yellow-300">您的申请正在审核中</p>
                    <p className="text-yellow-700 dark:text-yellow-400 mt-1 text-sm">我们会在1-3个工作日内完成审核，审核结果将发送到您的邮箱。</p>
                  </div>
                )}
              </div>
            )}
            {!isLoading && isSearch && !application && (
              <div className="mt-8 bg-blue-50 dark:bg-blue-900/20 p-6 rounded-md border border-blue-200 dark:border-blue-900">
                <h3 className="font-medium text-blue-800 dark:text-blue-300 text-lg mb-2">申请状态查询结果</h3>
                <p className="text-blue-700 dark:text-blue-400 mb-4">未能查询到相关申请记录，请检查以下可能原因：</p>
                <ul className="list-disc pl-5 mt-2 text-blue-700 dark:text-blue-400 text-sm space-y-2">
                  <li>申请ID或联系邮箱输入错误，请仔细核对</li>
                  <li><strong>申请已通过审核并处理完成</strong> - 已通过审核的申请可能在系统中被标记为完成状态</li>
                  <li>申请记录已过期或被删除</li>
                </ul>
                <div className="mt-5 bg-white dark:bg-blue-950/50 p-4 rounded border border-blue-100 dark:border-blue-800">
                  <p className="text-sm text-slate-600 dark:text-slate-300 font-medium">您可以尝试：</p>
                  <div className="mt-3 flex flex-wrap gap-3">
                    <Button asChild size="sm" variant="outline" className="border-blue-300 text-blue-700 hover:bg-blue-50 dark:border-blue-800 dark:text-blue-300 dark:hover:bg-blue-900/30">
                      <Link href="/institution/apply">重新申请</Link>
                    </Button>
                    <Button asChild size="sm" className="bg-blue-600 hover:bg-blue-700 text-white">
                      <Link href="/institution/register">前往注册</Link>
                    </Button>
                    <Button asChild size="sm" variant="ghost" className="text-slate-600 hover:text-slate-900 dark:text-slate-400 dark:hover:text-slate-200">
                      <Link href="/help/institution-application">查看帮助</Link>
                    </Button>
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/layout.tsx">
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { Toaster } from "@/components/ui/sonner";
import "./globals.css";
import ThemeProvider from "@/components/providers/theme-provider";
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});
const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});
export const metadata: Metadata = {
  title: "在线课程平台",
  description: "现代化的在线教育平台，提供优质课程和学习体验",
};
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="zh-CN" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased min-h-screen`}
      >
        <ThemeProvider>
          {children}
          <Toaster />
        </ThemeProvider>
      </body>
    </html>
  );
}
</file>

<file path="front/src/app/page.tsx">
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
export default function HomePage() {
  return (
    <div className="min-h-screen flex flex-col">
      {/* 导航栏 */}
      <header className="border-b bg-background">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="mr-2 text-primary"
            >
              <path d="M22 2 11 13"></path>
              <path d="m22 2-7 20-4-9-9-4 20-7z"></path>
            </svg>
            <span className="text-xl font-semibold">在线课程平台</span>
          </div>
          <div className="flex gap-4 items-center">
            <nav className="hidden md:flex mr-6">
              <ul className="flex space-x-6">
                <li>
                  <Link href="/courses" className="text-muted-foreground hover:text-primary">
                    课程
                  </Link>
                </li>
                <li>
                  <Link href="/institution" className="text-muted-foreground hover:text-primary">
                    机构中心
                  </Link>
                </li>
                <li>
                  <Link href="/about" className="text-muted-foreground hover:text-primary">
                    关于我们
                  </Link>
                </li>
              </ul>
            </nav>
            <Button variant="outline" asChild>
              <Link href="/login">登录</Link>
            </Button>
            <Button asChild>
              <Link href="/register">注册</Link>
            </Button>
          </div>
        </div>
      </header>
      {/* 英雄区域 */}
      <section className="bg-primary text-primary-foreground py-20">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl md:text-5xl font-bold mb-6">提升技能，开启未来</h1>
          <p className="text-xl mb-8 max-w-2xl mx-auto">
            我们的在线课程平台提供高质量的学习内容，帮助您掌握最前沿的技能和知识
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button size="lg" asChild>
              <Link href="/courses">浏览课程</Link>
            </Button>
            <Button size="lg" variant="outline" className="bg-primary/10 text-primary-foreground hover:bg-primary/20" asChild>
              <Link href="/institution">机构入驻</Link>
            </Button>
          </div>
        </div>
      </section>
      {/* 特色区域 */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-12">为什么选择我们</h2>
          <div className="grid md:grid-cols-3 gap-8">
            {[
              {
                title: '高质量内容',
                description: '由行业专家精心打造的课程内容，确保学习效果',
                icon: (
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-primary">
                    <path d="m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z" />
                  </svg>
                ),
              },
              {
                title: '灵活学习',
                description: '随时随地学习，按照自己的节奏掌握新技能',
                icon: (
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-primary">
                    <path d="M12 22a10 10 0 1 0 0-20 10 10 0 0 0 0 20Z" />
                    <path d="M10 2v2" />
                    <path d="M18 12h2" />
                    <path d="M12 18v2" />
                    <path d="M4 12H2" />
                    <path d="M12 6v6l4 2" />
                  </svg>
                ),
              },
              {
                title: '专业支持',
                description: '遇到问题随时可获得讲师和社区的专业支持',
                icon: (
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-primary">
                    <path d="M21 12a9 9 0 0 1-9 9 9 9 0 0 1-9-9 9 9 0 0 1 9-9 9 9 0 0 1 9 9z" />
                    <path d="M12 16v-3" />
                    <path d="M12 8h.01" />
                  </svg>
                ),
              },
            ].map((feature, i) => (
              <Card key={i}>
                <CardContent className="text-center p-6">
                  <div className="h-12 w-12 mx-auto mb-4 flex items-center justify-center rounded-full bg-primary/10">
                    {feature.icon}
                  </div>
                  <h3 className="text-xl font-semibold mb-2">{feature.title}</h3>
                  <p className="text-muted-foreground">{feature.description}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>
      {/* 热门课程 */}
      <section className="py-16 bg-muted/30">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-12">热门课程</h2>
          <div className="grid md:grid-cols-3 gap-8">
            {[
              {
                title: 'Web前端开发',
                description: '掌握HTML、CSS、JavaScript和现代前端框架',
                image: 'https://source.unsplash.com/random/300x200?web',
              },
              {
                title: '数据科学入门',
                description: '学习数据分析、可视化和机器学习基础',
                image: 'https://source.unsplash.com/random/300x200?data',
              },
              {
                title: '移动应用开发',
                description: '创建跨平台移动应用的技能和最佳实践',
                image: 'https://source.unsplash.com/random/300x200?mobile',
              },
            ].map((course, i) => (
              <Card key={i} className="overflow-hidden">
                <div className="h-48 bg-muted relative">
                  <div className="absolute inset-0 flex items-center justify-center bg-primary/10">
                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1" strokeLinecap="round" strokeLinejoin="round" className="text-muted-foreground">
                      <rect width="18" height="18" x="3" y="3" rx="2" />
                      <path d="M7 3v18" />
                      <path d="M3 7h18" />
                    </svg>
                  </div>
                </div>
                <CardContent className="p-6">
                  <h3 className="text-xl font-semibold mb-2">{course.title}</h3>
                  <p className="text-muted-foreground mb-4">{course.description}</p>
                  <Button variant="outline" className="w-full" asChild>
                    <Link href="/courses">查看详情</Link>
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
          <div className="text-center mt-10">
            <Button variant="outline" size="lg" asChild>
              <Link href="/courses">查看全部课程</Link>
            </Button>
          </div>
        </div>
      </section>
      {/* 底部 */}
      <footer className="py-12 bg-muted">
        <div className="container mx-auto px-4">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="flex items-center mb-6 md:mb-0">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="mr-2 text-primary"
              >
                <path d="M22 2 11 13"></path>
                <path d="m22 2-7 20-4-9-9-4 20-7z"></path>
              </svg>
              <span className="text-xl font-semibold">在线课程平台</span>
            </div>
            <div className="flex gap-6">
              <Link href="/about" className="hover:text-primary">关于我们</Link>
              <Link href="/contact" className="hover:text-primary">联系我们</Link>
              <Link href="/privacy" className="hover:text-primary">隐私政策</Link>
              <Link href="/terms" className="hover:text-primary">服务条款</Link>
            </div>
          </div>
          <div className="mt-8 text-center text-muted-foreground">
            <p>© {new Date().getFullYear()} 在线课程平台. 保留所有权利.</p>
          </div>
        </div>
      </footer>
    </div>
  );
}
</file>

<file path="front/src/app/preview/[token]/layout.tsx">
import React from 'react';
import type { Metadata } from 'next';
import { Button } from '@/components/ui/button';
import { BookOpen } from 'lucide-react';
export const metadata: Metadata = {
  title: '课程预览',
  description: '课程内容预览',
};
export default function PreviewLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="flex flex-col min-h-screen">
      {/* 简单的导航栏 */}
      <header className="border-b bg-background">
        <div className="container flex h-16 items-center px-4">
          <div className="flex items-center">
            <BookOpen className="h-6 w-6 mr-2" />
            <span className="font-bold text-xl">课程预览</span>
          </div>
          <div className="ml-auto flex items-center space-x-4">
            <Button variant="ghost" onClick={() => window.close()}>
              关闭预览
            </Button>
          </div>
        </div>
      </header>
      {/* 主内容区域 */}
      <main className="flex-1">
        {children}
      </main>
      {/* 简单的页脚 */}
      <footer className="border-t py-6 bg-muted">
        <div className="container px-4">
          <div className="text-center text-sm text-muted-foreground">
            <p>本页面仅用于课程内容预览，课程创建者可据此检查课程内容展示效果。</p>
            <p className="mt-1">© {new Date().getFullYear()} 课程平台</p>
          </div>
        </div>
      </footer>
    </div>
  );
}
</file>

<file path="front/src/app/preview/[token]/page.tsx">
'use client';
import { useEffect, useState } from 'react';
import { useParams } from 'next/navigation';
import { courseService, chapterService, sectionService } from '@/services';
import { Course, Chapter, Section } from '@/types/course';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Skeleton } from '@/components/ui/skeleton';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { 
  BookOpen, 
  Clock, 
  FileText, 
  AlertCircle, 
  ChevronRight,
  Video,
  Headphones,
  FileCode,
  BrainCircuit
} from 'lucide-react';
import { CourseContentPlayer } from '@/components/preview/course-content-player';
export default function CoursePreviewPage() {
  const { token } = useParams() as { token: string };
  // 状态管理
  const [course, setCourse] = useState<Course | null>(null);
  const [chapters, setChapters] = useState<Chapter[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [selectedChapterId, setSelectedChapterId] = useState<number | null>(null);
  const [selectedSectionId, setSelectedSectionId] = useState<number | null>(null);
  const [sections, setSections] = useState<Record<number, Section[]>>({});
  const [activeSection, setActiveSection] = useState<Section | null>(null);
  // 加载课程信息
  useEffect(() => {
    async function loadCourseData() {
      try {
        setLoading(true);
        setError(null);
        // 通过token获取课程信息
        const courseData = await courseService.previewCourse(token);
        setCourse(courseData);
        // 加载课程的章节
        const chaptersData = await chapterService.getChaptersByCourse(courseData.id);
        setChapters(chaptersData);
        // 默认选择第一个章节
        if (chaptersData.length > 0) {
          setSelectedChapterId(chaptersData[0].id);
        }
      } catch (err: any) {
        console.error('加载课程预览数据失败:', err);
        setError(err.message || '无法加载课程信息');
      } finally {
        setLoading(false);
      }
    }
    if (token) {
      loadCourseData();
    }
  }, [token]);
  // 根据选中的章节加载小节
  useEffect(() => {
    async function loadSections(chapterId: number) {
      try {
        // 如果已经加载过该章节的小节，则不重复加载
        if (sections[chapterId]) return;
        const sectionData = await sectionService.getSectionsByChapter(chapterId);
        setSections(prev => ({
          ...prev,
          [chapterId]: sectionData
        }));
        // 默认选择第一个小节
        if (sectionData.length > 0 && !selectedSectionId) {
          setSelectedSectionId(sectionData[0].id);
          setActiveSection(sectionData[0]);
        }
      } catch (err) {
        console.error(`加载章节 ${chapterId} 的小节失败:`, err);
      }
    }
    if (selectedChapterId) {
      loadSections(selectedChapterId);
    }
  }, [selectedChapterId, sections, selectedSectionId]);
  // 处理小节选择
  const handleSectionSelect = (section: Section) => {
    setSelectedSectionId(section.id);
    setActiveSection(section);
    setActiveTab('content');
  };
  // 渲染加载状态
  if (loading) {
    return (
      <div className="container mx-auto py-8 px-4">
        <Skeleton className="h-12 w-3/4 mb-4" />
        <Skeleton className="h-6 w-1/2 mb-8" />
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div className="md:col-span-1">
            <Skeleton className="h-[500px] w-full rounded-lg" />
          </div>
          <div className="md:col-span-2">
            <Skeleton className="h-[500px] w-full rounded-lg" />
          </div>
        </div>
      </div>
    );
  }
  // 渲染错误状态
  if (error) {
    return (
      <div className="container mx-auto py-8 px-4">
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>加载失败</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      </div>
    );
  }
  // 渲染课程不存在
  if (!course) {
    return (
      <div className="container mx-auto py-8 px-4">
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>课程不存在</AlertTitle>
          <AlertDescription>
            无法找到该课程或预览链接已过期，请联系课程提供者获取新的预览链接。
          </AlertDescription>
        </Alert>
      </div>
    );
  }
  return (
    <div className="container mx-auto py-6 px-4">
      {/* 课程标题和描述 */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">{course.title}</h1>
        {course.description && (
          <p className="text-muted-foreground">{course.description}</p>
        )}
        <div className="flex items-center gap-4 mt-4">
          <div className="flex items-center text-muted-foreground">
            <BookOpen className="h-4 w-4 mr-1" />
            <span>{chapters.length} 章节</span>
          </div>
          {course.totalDuration && (
            <div className="flex items-center text-muted-foreground">
              <Clock className="h-4 w-4 mr-1" />
              <span>{Math.round(course.totalDuration / 60)} 分钟</span>
            </div>
          )}
        </div>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {/* 左侧章节导航 */}
        <div className="md:col-span-1">
          <Card className="sticky top-6">
            <CardHeader className="pb-2">
              <CardTitle>课程内容</CardTitle>
              <CardDescription>
                共 {chapters.length} 章节 
                {Object.values(sections).flat().length > 0 && 
                  `, ${Object.values(sections).flat().length} 小节`
                }
              </CardDescription>
            </CardHeader>
            <CardContent className="max-h-[60vh] overflow-y-auto">
              <div className="space-y-4">
                {chapters.map((chapter) => (
                  <div key={chapter.id} className="space-y-2">
                    <Button
                      variant={selectedChapterId === chapter.id ? "secondary" : "ghost"}
                      className="w-full justify-start text-left font-medium"
                      onClick={() => setSelectedChapterId(chapter.id)}
                    >
                      {chapter.title}
                    </Button>
                    {selectedChapterId === chapter.id && sections[chapter.id] && (
                      <div className="pl-4 space-y-1 border-l ml-3">
                        {sections[chapter.id].map((section) => (
                          <Button
                            key={section.id}
                            variant={selectedSectionId === section.id ? "default" : "ghost"}
                            size="sm"
                            className="w-full justify-start text-left"
                            onClick={() => handleSectionSelect(section)}
                          >
                            <div className="flex items-center gap-2">
                              {selectedSectionId === section.id && (
                                <ChevronRight className="h-3 w-3" />
                              )}
                              <span>{section.title}</span>
                            </div>
                          </Button>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
        {/* 右侧内容区域 */}
        <div className="md:col-span-2 lg:col-span-3">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="mb-4">
              <TabsTrigger value="overview">课程概览</TabsTrigger>
              <TabsTrigger value="content" disabled={!activeSection}>
                课程内容
              </TabsTrigger>
            </TabsList>
            {/* 课程概览 */}
            <TabsContent value="overview">
              <Card>
                <CardHeader>
                  <CardTitle>课程简介</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {course.description && (
                      <div>
                        <h3 className="text-lg font-medium mb-2">课程描述</h3>
                        <p className="text-muted-foreground">{course.description}</p>
                      </div>
                    )}
                    {course.coverUrl && (
                      <div>
                        <h3 className="text-lg font-medium mb-2">课程封面</h3>
                        <img 
                          src={course.coverUrl} 
                          alt={course.title} 
                          className="rounded-md max-w-full max-h-[300px] object-contain"
                        />
                      </div>
                    )}
                    <div>
                      <h3 className="text-lg font-medium mb-2">章节列表</h3>
                      <div className="space-y-3">
                        {chapters.map((chapter, index) => (
                          <div key={chapter.id} className="pb-3 border-b last:border-0">
                            <h4 className="font-medium">
                              {index + 1}. {chapter.title}
                            </h4>
                            {chapter.description && (
                              <p className="text-sm text-muted-foreground mt-1">
                                {chapter.description}
                              </p>
                            )}
                            {sections[chapter.id] && (
                              <div className="mt-2 pl-4 space-y-1">
                                {sections[chapter.id].map((section, sIndex) => (
                                  <div key={section.id} className="flex items-center">
                                    <span className="text-sm text-muted-foreground mr-2">
                                      {index + 1}.{sIndex + 1}
                                    </span>
                                    <span className="text-sm">{section.title}</span>
                                  </div>
                                ))}
                              </div>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            {/* 课程内容 */}
            <TabsContent value="content">
              {activeSection ? (
                <CourseContentPlayer section={activeSection} />
              ) : (
                <Card>
                  <CardContent className="py-8 text-center">
                    <p className="text-muted-foreground">请从左侧选择一个小节以查看内容</p>
                  </CardContent>
                </Card>
              )}
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="front/src/components/dashboard/course-metadata/category-management.tsx">
'use client';
import { useState, useEffect } from 'react';
import { Category, CategoryDTO, CategoryTree } from '@/types/course';
import { 
  Table, 
  TableHeader, 
  TableRow, 
  TableHead, 
  TableBody, 
  TableCell 
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Switch } from '@/components/ui/switch';
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogFooter 
} from '@/components/ui/dialog';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Loader2, Plus, Search, Trash2, Edit, Check, X } from 'lucide-react';
import { toast } from 'sonner';
import categoryService from '@/services/category';
import { 
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
// 表单验证模式
const categoryFormSchema = z.object({
  name: z.string().min(2, '分类名称至少需要2个字符').max(100, '分类名称不能超过100个字符'),
  code: z.string()
    .min(2, '分类编码至少需要2个字符')
    .max(50, '分类编码不能超过50个字符')
    .regex(/^[a-zA-Z0-9_-]+$/, '分类编码只能包含字母、数字、下划线和连字符'),
  description: z.string().max(500, '分类描述不能超过500个字符').optional(),
  parentId: z.string().optional(),
  orderIndex: z.coerce.number().int().optional(),
  enabled: z.boolean().default(true),
  icon: z.string().max(255, '图标路径不能超过255个字符').optional(),
});
export function CategoryManagement() {
  const [categories, setCategories] = useState<Category[]>([]);
  const [parentCategories, setParentCategories] = useState<Category[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [totalItems, setTotalItems] = useState(0);
  const [searchKeyword, setSearchKeyword] = useState('');
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingCategory, setEditingCategory] = useState<Category | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [categoryToDelete, setCategoryToDelete] = useState<Category | null>(null);
  const [categoryTree, setCategoryTree] = useState<CategoryTree[]>([]);
  const [viewMode, setViewMode] = useState<'list' | 'tree'>('list');
  // 表单初始化
  const form = useForm<z.infer<typeof categoryFormSchema>>({
    resolver: zodResolver(categoryFormSchema),
    defaultValues: {
      name: '',
      code: '',
      description: '',
      parentId: 'none',
      orderIndex: 0,
      enabled: true,
      icon: '',
    },
  });
  // 加载分类列表
  const loadCategories = async (page = 0) => {
    setIsLoading(true);
    try {
      const result = await categoryService.getCategoryList(searchKeyword, page);
      setCategories(result.content);
      setTotalPages(result.totalPages);
      setTotalItems(result.totalElements);
      setCurrentPage(result.number);
    } catch (error) {
      toast.error('加载分类列表失败');
      console.error('加载分类列表失败:', error);
    } finally {
      setIsLoading(false);
    }
  };
  // 加载父分类
  const loadParentCategories = async () => {
    try {
      const result = await categoryService.getRootCategories();
      setParentCategories(result);
    } catch (error) {
      toast.error('加载父分类列表失败');
      console.error('加载父分类列表失败:', error);
    }
  };
  // 加载分类树
  const loadCategoryTree = async () => {
    try {
      const result = await categoryService.getCategoryTree();
      setCategoryTree(result);
    } catch (error) {
      toast.error('加载分类树失败');
      console.error('加载分类树失败:', error);
    }
  };
  // 初始加载
  useEffect(() => {
    loadCategories();
    loadParentCategories();
    loadCategoryTree();
  }, []);
  // 搜索分类
  const handleSearch = () => {
    loadCategories(0); // 重置到第一页
  };
  // 切换页面
  const handlePageChange = (page: number) => {
    loadCategories(page);
  };
  // 打开创建分类对话框
  const handleOpenCreateDialog = () => {
    form.reset({
      name: '',
      code: '',
      description: '',
      parentId: "none",
      orderIndex: 0,
      enabled: true,
      icon: '',
    });
    setEditingCategory(null);
    setIsDialogOpen(true);
  };
  // 打开编辑分类对话框
  const handleOpenEditDialog = (category: Category) => {
    form.reset({
      name: category.name,
      code: category.code,
      description: category.description || '',
      parentId: category.parentId ? String(category.parentId) : "none",
      orderIndex: category.orderIndex || 0,
      enabled: category.enabled !== false, // 默认为true
      icon: category.icon || '',
    });
    setEditingCategory(category);
    setIsDialogOpen(true);
  };
  // 确认删除分类
  const handleDeleteConfirm = async () => {
    if (!categoryToDelete) return;
    setIsLoading(true);
    try {
      await categoryService.deleteCategory(categoryToDelete.id);
      toast.success('分类删除成功');
      loadCategories(currentPage);
    } catch (error) {
      toast.error('删除分类失败');
      console.error('删除分类失败:', error);
    } finally {
      setIsLoading(false);
      setIsDeleteDialogOpen(false);
      setCategoryToDelete(null);
    }
  };
  // 保存分类
  const onSubmit = async (data: z.infer<typeof categoryFormSchema>) => {
    setIsLoading(true);
    // 转换表单数据为DTO
    const categoryDTO: CategoryDTO = {
      name: data.name,
      code: data.code,
      description: data.description,
      parentId: data.parentId && data.parentId !== "none" ? parseInt(data.parentId) : undefined,
      orderIndex: data.orderIndex,
      enabled: data.enabled,
      icon: data.icon,
    };
    try {
      // 检查编码是否可用
      const excludeId = editingCategory?.id;
      const isAvailable = await categoryService.isCodeAvailable(data.code, excludeId);
      if (!isAvailable) {
        form.setError('code', {
          type: 'manual',
          message: '此分类编码已存在，请使用其他编码'
        });
        setIsLoading(false);
        return;
      }
      if (editingCategory) {
        // 更新分类
        await categoryService.updateCategory(editingCategory.id, categoryDTO);
        toast.success('分类更新成功');
      } else {
        // 创建分类
        await categoryService.createCategory(categoryDTO);
        toast.success('分类创建成功');
      }
      // 先关闭对话框，再刷新列表，避免组件卸载后状态更新导致DOM错误
      setIsDialogOpen(false);
      // 使用setTimeout确保对话框关闭动画完成后再刷新数据
      setTimeout(() => {
        loadCategories(currentPage);
        // 同时刷新分类树
        loadCategoryTree();
      }, 300);
    } catch (error) {
      toast.error(editingCategory ? '更新分类失败' : '创建分类失败');
      console.error(editingCategory ? '更新分类失败:' : '创建分类失败:', error);
    } finally {
      setIsLoading(false);
    }
  };
  // 更新分类状态
  const handleToggleStatus = async (category: Category) => {
    const newStatus = !category.enabled;
    setIsLoading(true);
    try {
      await categoryService.updateCategoryStatus(category.id, newStatus);
      toast.success(`分类${newStatus ? '启用' : '禁用'}成功`);
      // 更新本地状态，避免重新加载整个列表
      setCategories(categories.map(c => 
        c.id === category.id ? { ...c, enabled: newStatus } : c
      ));
    } catch (error) {
      toast.error(`分类${newStatus ? '启用' : '禁用'}失败`);
      console.error(`分类${newStatus ? '启用' : '禁用'}失败:`, error);
    } finally {
      setIsLoading(false);
    }
  };
  // 更新分类排序
  const handleUpdateOrder = async (id: number, orderIndex: number) => {
    setIsLoading(true);
    try {
      await categoryService.updateCategoryOrder(id, orderIndex);
      toast.success('分类排序更新成功');
      if (viewMode === 'list') {
        loadCategories(currentPage);
      } else {
        loadCategoryTree();
      }
    } catch (error) {
      toast.error('更新分类排序失败');
      console.error('更新分类排序失败:', error);
    } finally {
      setIsLoading(false);
    }
  };
  return (
    <div id="category-management-container" className="space-y-4">
      {/* 搜索和添加区域 */}
      <div className="flex justify-between items-center">
        <div className="flex">
          <Input
            placeholder="搜索分类名称或编码"
            value={searchKeyword}
            onChange={(e) => setSearchKeyword(e.target.value)}
            className="w-80 mr-2"
          />
          <Button variant="outline" onClick={handleSearch}>
            <Search className="h-4 w-4 mr-2" />
            搜索
          </Button>
        </div>
        <div className="flex space-x-2">
          <Tabs value={viewMode} onValueChange={(v) => setViewMode(v as 'list' | 'tree')}>
            <TabsList>
              <TabsTrigger value="list">列表视图</TabsTrigger>
              <TabsTrigger value="tree">树形视图</TabsTrigger>
            </TabsList>
          </Tabs>
          <Button onClick={handleOpenCreateDialog}>
            <Plus className="h-4 w-4 mr-2" />
            添加分类
          </Button>
        </div>
      </div>
      {/* 列表或树形视图 */}
      {viewMode === 'list' ? (
        <>
          {/* 分类列表表格 */}
          <div className="rounded-md border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>ID</TableHead>
                  <TableHead>名称</TableHead>
                  <TableHead>编码</TableHead>
                  <TableHead>父分类</TableHead>
                  <TableHead>排序</TableHead>
                  <TableHead>状态</TableHead>
                  <TableHead>创建时间</TableHead>
                  <TableHead className="text-right">操作</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {isLoading && (
                  <TableRow>
                    <TableCell colSpan={8} className="text-center p-4">
                      <Loader2 className="h-6 w-6 animate-spin mx-auto" />
                    </TableCell>
                  </TableRow>
                )}
                {!isLoading && categories.length === 0 && (
                  <TableRow>
                    <TableCell colSpan={8} className="text-center p-4">
                      未找到分类数据
                    </TableCell>
                  </TableRow>
                )}
                {!isLoading && categories.map((category) => (
                  <TableRow key={category.id}>
                    <TableCell>{category.id}</TableCell>
                    <TableCell>{category.name}</TableCell>
                    <TableCell>{category.code}</TableCell>
                    <TableCell>{category.parentName || '-'}</TableCell>
                    <TableCell>{category.orderIndex || 0}</TableCell>
                    <TableCell>
                      <div className="flex items-center space-x-2">
                        <Switch
                          checked={category.enabled !== false}
                          onCheckedChange={() => handleToggleStatus(category)}
                        />
                        <span>{category.enabled !== false ? '启用' : '禁用'}</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      {category.createdAt ? new Date(category.createdAt).toLocaleString() : '-'}
                    </TableCell>
                    <TableCell className="text-right">
                      <div className="flex justify-end space-x-2">
                        <Button variant="outline" size="sm" onClick={() => handleOpenEditDialog(category)}>
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button 
                          variant="destructive" 
                          size="sm" 
                          onClick={() => {
                            setCategoryToDelete(category);
                            setIsDeleteDialogOpen(true);
                          }}
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
          {/* 分页 */}
          {!isLoading && totalPages > 0 && (
            <div className="flex justify-between items-center">
              <div className="text-sm text-muted-foreground">
                共 {totalItems} 条数据，当前显示第 {currentPage + 1} 页
              </div>
              <Pagination>
                <PaginationContent>
                  <PaginationItem>
                    <PaginationPrevious 
                      href="#"
                      onClick={(e) => {
                        e.preventDefault();
                        handlePageChange(Math.max(0, currentPage - 1));
                      }}
                      className={currentPage === 0 ? "pointer-events-none opacity-50" : ""}
                    />
                  </PaginationItem>
                  {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                    // 显示当前页附近的页码
                    let pageToShow;
                    if (totalPages <= 5) {
                      pageToShow = i;
                    } else if (currentPage < 2) {
                      pageToShow = i;
                    } else if (currentPage > totalPages - 3) {
                      pageToShow = totalPages - 5 + i;
                    } else {
                      pageToShow = currentPage - 2 + i;
                    }
                    if (pageToShow >= 0 && pageToShow < totalPages) {
                      return (
                        <PaginationItem key={pageToShow}>
                          <PaginationLink
                            href="#"
                            onClick={(e) => {
                              e.preventDefault();
                              handlePageChange(pageToShow);
                            }}
                            isActive={pageToShow === currentPage}
                          >
                            {pageToShow + 1}
                          </PaginationLink>
                        </PaginationItem>
                      )
                    }
                    return null;
                  })}
                  <PaginationItem>
                    <PaginationNext 
                      href="#"
                      onClick={(e) => {
                        e.preventDefault();
                        handlePageChange(Math.min(totalPages - 1, currentPage + 1));
                      }}
                      className={currentPage === totalPages - 1 ? "pointer-events-none opacity-50" : ""}
                    />
                  </PaginationItem>
                </PaginationContent>
              </Pagination>
            </div>
          )}
        </>
      ) : (
        /* 分类树视图 */
        <div className="rounded-md border p-4">
          {isLoading ? (
            <div className="flex justify-center p-8">
              <Loader2 className="h-8 w-8 animate-spin" />
            </div>
          ) : categoryTree.length === 0 ? (
            <div className="text-center p-8 text-muted-foreground">
              未找到分类数据
            </div>
          ) : (
            <CategoryTreeView 
              categoryTree={categoryTree} 
              onEdit={handleOpenEditDialog}
              onDelete={(category) => {
                setCategoryToDelete(category);
                setIsDeleteDialogOpen(true);
              }}
              onUpdateOrder={handleUpdateOrder}
            />
          )}
        </div>
      )}
      {/* 分类表单对话框 */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="sm:max-w-[550px]">
          <DialogHeader>
            <DialogTitle>{editingCategory ? '编辑分类' : '创建分类'}</DialogTitle>
          </DialogHeader>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>分类名称 *</FormLabel>
                    <FormControl>
                      <Input placeholder="输入分类名称" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="code"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>分类编码 *</FormLabel>
                    <FormControl>
                      <Input 
                        placeholder="输入分类编码，只能包含字母、数字、下划线和连字符" 
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>分类描述</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="输入分类描述" 
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="parentId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>父分类</FormLabel>
                      <Select 
                        onValueChange={field.onChange} 
                        value={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="选择父分类" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="none">无父分类</SelectItem>
                          {parentCategories.map((category) => (
                            <SelectItem 
                              key={category.id} 
                              value={String(category.id)}
                              disabled={editingCategory?.id === category.id}
                            >
                              {category.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="orderIndex"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>排序索引</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          placeholder="输入排序索引" 
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="enabled"
                  render={({ field }) => (
                    <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                      <FormControl>
                        <Switch
                          checked={field.value}
                          onCheckedChange={field.onChange}
                        />
                      </FormControl>
                      <div className="space-y-1 leading-none">
                        <FormLabel>是否启用</FormLabel>
                      </div>
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="icon"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>图标路径</FormLabel>
                      <FormControl>
                        <Input placeholder="输入图标路径" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <DialogFooter>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setIsDialogOpen(false)}
                >
                  取消
                </Button>
                <Button type="submit" disabled={isLoading}>
                  {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                  {editingCategory ? '更新' : '创建'}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
      {/* 删除确认对话框 */}
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>确认删除分类</AlertDialogTitle>
            <AlertDialogDescription>
              您确定要删除分类 "{categoryToDelete?.name}" 吗？该操作不可撤销，如果该分类下有子分类或关联课程，可能导致数据异常。
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>取消</AlertDialogCancel>
            <AlertDialogAction onClick={handleDeleteConfirm} disabled={isLoading}>
              {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              确认删除
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}
// 分类树视图组件
function CategoryTreeView({ 
  categoryTree, 
  onEdit, 
  onDelete,
  onUpdateOrder
}: { 
  categoryTree: CategoryTree[], 
  onEdit: (category: Category) => void,
  onDelete: (category: Category) => void,
  onUpdateOrder: (id: number, orderIndex: number) => void
}) {
  const renderTreeNode = (node: CategoryTree, level = 0) => (
    <div key={node.id} className={`border-l-2 ${level > 0 ? 'ml-6 pl-2 border-gray-200' : ''}`}>
      <div className="flex items-center justify-between py-2 hover:bg-muted/20 px-2 rounded-sm">
        <div className="flex items-center">
          <div className={`w-3 h-3 rounded-full mr-2 ${node.enabled ? 'bg-green-500' : 'bg-red-500'}`} />
          <span className="font-medium">{node.name}</span>
          <span className="text-muted-foreground ml-2 text-xs">({node.code})</span>
          {node.children && node.children.length > 0 && (
            <span className="ml-2 text-xs text-muted-foreground">
              {node.children.length} 个子分类
            </span>
          )}
          {node.courseCount && node.courseCount > 0 && (
            <span className="ml-2 text-xs text-muted-foreground">
              {node.courseCount} 个课程
            </span>
          )}
        </div>
        <div className="flex space-x-2">
          <Button variant="ghost" size="sm" onClick={() => {
            const newIndex = (node.orderIndex || 0) - 1;
            if (newIndex >= 0) {
              onUpdateOrder(node.id, newIndex);
            }
          }} disabled={(node.orderIndex || 0) <= 0}>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-arrow-up"><path d="m5 12 7-7 7 7"/><path d="M12 19V5"/></svg>
          </Button>
          <Button variant="ghost" size="sm" onClick={() => {
            onUpdateOrder(node.id, (node.orderIndex || 0) + 1);
          }}>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-arrow-down"><path d="M12 5v14"/><path d="m19 12-7 7-7-7"/></svg>
          </Button>
          <Button variant="outline" size="sm" onClick={() => onEdit(node)}>
            <Edit className="h-4 w-4" />
          </Button>
          <Button variant="destructive" size="sm" onClick={() => onDelete(node)}>
            <Trash2 className="h-4 w-4" />
          </Button>
        </div>
      </div>
      {node.children && node.children.length > 0 && (
        <div>
          {node.children.map((child: CategoryTree) => renderTreeNode(child, level + 1))}
        </div>
      )}
    </div>
  );
  return (
    <div className="space-y-2">
      {categoryTree.map(item => renderTreeNode(item))}
    </div>
  );
}
</file>

<file path="front/src/components/dashboard/course-metadata/tag-management.tsx">
'use client';
import { useState, useEffect } from 'react';
import { Tag, TagDTO } from '@/types/course';
import { 
  Table, 
  TableHeader, 
  TableRow, 
  TableHead, 
  TableBody, 
  TableCell 
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogFooter 
} from '@/components/ui/dialog';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Loader2, Plus, Search, Trash2, Edit } from 'lucide-react';
import { toast } from 'sonner';
import tagService from '@/services/tag';
import { 
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
// 表单验证模式
const tagFormSchema = z.object({
  name: z.string().min(2, '标签名称至少需要2个字符').max(50, '标签名称不能超过50个字符'),
  description: z.string().max(255, '标签描述不能超过255个字符').optional(),
});
export function TagManagement() {
  const [tags, setTags] = useState<Tag[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [currentPage, setCurrentPage] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [totalItems, setTotalItems] = useState(0);
  const [searchKeyword, setSearchKeyword] = useState('');
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingTag, setEditingTag] = useState<Tag | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [tagToDelete, setTagToDelete] = useState<Tag | null>(null);
  // 表单初始化
  const form = useForm<z.infer<typeof tagFormSchema>>({
    resolver: zodResolver(tagFormSchema),
    defaultValues: {
      name: '',
      description: '',
    },
  });
  // 加载标签列表
  const loadTags = async (page = 0) => {
    setIsLoading(true);
    try {
      const result = await tagService.getTagList(searchKeyword, page);
      setTags(result.content || []);
      setTotalPages(result.totalPages || 0);
      setTotalItems(result.totalElements || 0);
      setCurrentPage(result.pageable?.pageNumber || 0);
    } catch (error) {
      toast.error('加载标签列表失败');
      console.error('加载标签列表失败:', error);
    } finally {
      setIsLoading(false);
    }
  };
  // 初始加载
  useEffect(() => {
    loadTags();
  }, []);
  // 搜索标签
  const handleSearch = () => {
    loadTags(0); // 重置到第一页
  };
  // 切换页面
  const handlePageChange = (page: number) => {
    loadTags(page);
  };
  // 打开创建标签对话框
  const handleOpenCreateDialog = () => {
    form.reset({
      name: '',
      description: '',
    });
    setEditingTag(null);
    setIsDialogOpen(true);
  };
  // 打开编辑标签对话框
  const handleOpenEditDialog = (tag: Tag) => {
    form.reset({
      name: tag.name,
      description: tag.description || '',
    });
    setEditingTag(tag);
    setIsDialogOpen(true);
  };
  // 确认删除标签
  const handleDeleteConfirm = async () => {
    if (!tagToDelete) return;
    setIsLoading(true);
    try {
      await tagService.deleteTag(tagToDelete.id);
      toast.success('标签删除成功');
      loadTags(currentPage);
    } catch (error) {
      toast.error('删除标签失败');
      console.error('删除标签失败:', error);
    } finally {
      setIsLoading(false);
      setIsDeleteDialogOpen(false);
      setTagToDelete(null);
    }
  };
  // 保存标签
  const onSubmit = async (data: z.infer<typeof tagFormSchema>) => {
    setIsLoading(true);
    // 转换表单数据为DTO
    const tagDTO: TagDTO = {
      name: data.name,
      description: data.description,
    };
    try {
      // 检查名称是否可用
      const excludeId = editingTag?.id;
      const isAvailable = await tagService.isNameAvailable(data.name, excludeId);
      if (!isAvailable) {
        form.setError('name', {
          type: 'manual',
          message: '此标签名称已存在，请使用其他名称'
        });
        setIsLoading(false);
        return;
      }
      // 先关闭对话框，避免状态更新冲突
      setIsDialogOpen(false);
      if (editingTag) {
        // 更新标签
        await tagService.updateTag(editingTag.id, tagDTO);
        toast.success('标签更新成功');
      } else {
        // 创建标签
        await tagService.createTag(tagDTO);
        toast.success('标签创建成功');
      }
      // 使用setTimeout延迟加载，避免组件状态更新冲突
      setTimeout(() => {
        if (document.getElementById('tag-management-container')) {
          // 确保组件仍然挂载
          loadTags(currentPage);
        }
      }, 100);
    } catch (error) {
      toast.error(editingTag ? '更新标签失败' : '创建标签失败');
      console.error(editingTag ? '更新标签失败:' : '创建标签失败:', error);
      setIsDialogOpen(false);
    } finally {
      setIsLoading(false);
    }
  };
  return (
    <div id="tag-management-container" className="space-y-4">
      {/* 搜索和添加区域 */}
      <div className="flex justify-between items-center">
        <div className="flex space-x-2">
          <Input
            placeholder="搜索标签名称"
            value={searchKeyword}
            onChange={(e) => setSearchKeyword(e.target.value)}
            className="w-[300px]"
          />
          <Button variant="outline" onClick={handleSearch}>
            <Search className="h-4 w-4 mr-2" />
            搜索
          </Button>
        </div>
        <Button onClick={handleOpenCreateDialog}>
          <Plus className="h-4 w-4 mr-2" />
          添加标签
        </Button>
      </div>
      {/* 标签列表表格 */}
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>ID</TableHead>
              <TableHead>名称</TableHead>
              <TableHead>描述</TableHead>
              <TableHead>使用次数</TableHead>
              <TableHead>关联课程</TableHead>
              <TableHead>创建时间</TableHead>
              <TableHead className="text-right">操作</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {isLoading && (
              <TableRow>
                <TableCell colSpan={7} className="text-center p-4">
                  <Loader2 className="h-6 w-6 animate-spin mx-auto" />
                </TableCell>
              </TableRow>
            )}
            {!isLoading && tags.length === 0 && (
              <TableRow>
                <TableCell colSpan={7} className="text-center p-4">
                  未找到标签数据
                </TableCell>
              </TableRow>
            )}
            {!isLoading && tags.map((tag) => (
              <TableRow key={tag.id}>
                <TableCell>{tag.id}</TableCell>
                <TableCell>
                  <Badge variant="outline">{tag.name}</Badge>
                </TableCell>
                <TableCell>{tag.description || '-'}</TableCell>
                <TableCell>{tag.useCount || 0}</TableCell>
                <TableCell>{tag.courseCount || 0}</TableCell>
                <TableCell>
                  {tag.createdAt ? new Date(tag.createdAt).toLocaleString() : '-'}
                </TableCell>
                <TableCell className="text-right">
                  <div className="flex justify-end space-x-2">
                    <Button variant="outline" size="sm" onClick={() => handleOpenEditDialog(tag)}>
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button 
                      variant="destructive" 
                      size="sm" 
                      onClick={() => {
                        setTagToDelete(tag);
                        setIsDeleteDialogOpen(true);
                      }}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
      {/* 分页 */}
      {!isLoading && totalPages > 0 && (
        <div className="flex justify-between items-center">
          <div className="text-sm text-muted-foreground">
            共 {totalItems} 条数据，当前显示第 {currentPage + 1} 页
          </div>
          <Pagination>
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious 
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    handlePageChange(Math.max(0, currentPage - 1));
                  }}
                  className={currentPage === 0 ? "pointer-events-none opacity-50" : ""}
                />
              </PaginationItem>
              {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                // 显示当前页附近的页码
                let pageToShow;
                if (totalPages <= 5) {
                  pageToShow = i;
                } else if (currentPage < 2) {
                  pageToShow = i;
                } else if (currentPage > totalPages - 3) {
                  pageToShow = totalPages - 5 + i;
                } else {
                  pageToShow = currentPage - 2 + i;
                }
                if (pageToShow >= 0 && pageToShow < totalPages) {
                  return (
                    <PaginationItem key={pageToShow}>
                      <PaginationLink
                        href="#"
                        onClick={(e) => {
                          e.preventDefault();
                          handlePageChange(pageToShow);
                        }}
                        isActive={pageToShow === currentPage}
                      >
                        {pageToShow + 1}
                      </PaginationLink>
                    </PaginationItem>
                  )
                }
                return null;
              })}
              <PaginationItem>
                <PaginationNext 
                  href="#"
                  onClick={(e) => {
                    e.preventDefault();
                    handlePageChange(Math.min(totalPages - 1, currentPage + 1));
                  }}
                  className={currentPage === totalPages - 1 ? "pointer-events-none opacity-50" : ""}
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        </div>
      )}
      {/* 标签表单对话框 */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent className="sm:max-w-[500px]">
          <DialogHeader>
            <DialogTitle>{editingTag ? '编辑标签' : '创建标签'}</DialogTitle>
          </DialogHeader>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>标签名称 *</FormLabel>
                    <FormControl>
                      <Input placeholder="输入标签名称" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>标签描述</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="输入标签描述" 
                        {...field} 
                        value={field.value || ''}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <DialogFooter>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setIsDialogOpen(false)}
                >
                  取消
                </Button>
                <Button type="submit" disabled={isLoading}>
                  {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                  {editingTag ? '更新' : '创建'}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
      {/* 删除确认对话框 */}
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>确认删除标签</AlertDialogTitle>
            <AlertDialogDescription>
              您确定要删除标签 "{tagToDelete?.name}" 吗？该操作不可撤销，如果该标签已被课程使用，可能导致关联数据丢失。
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>取消</AlertDialogCancel>
            <AlertDialogAction onClick={handleDeleteConfirm} disabled={isLoading}>
              {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              确认删除
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}
</file>

<file path="front/src/components/dashboard/courses/chapter-list.tsx">
'use client';
import { useState, useEffect } from 'react';
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Chapter, ChapterAccessType, ChapterOrderDTO } from '@/types/course';
import { chapterService } from '@/services';
import { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';
import {
  Edit,
  Trash2,
  GripVertical,
  Plus,
  X,
  ExternalLink,
  Clock,
  Lock,
  Unlock,
  BookOpen,
  ArrowUp,
  ArrowDown,
  Loader2
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Skeleton } from '@/components/ui/skeleton';
import { toast } from "sonner";
import { ChapterSections } from '@/components/dashboard/courses/chapter-sections';
// 定义与后端枚举匹配的章节访问类型
const ChapterAccessTypeMap = {
  'FREE': ChapterAccessType.FREE_TRIAL,
  'PREMIUM': ChapterAccessType.PAID_ONLY,
  'REGISTERED': ChapterAccessType.FREE_TRIAL // 暂时映射到FREE_TRIAL
};
// 修改为直接使用数值，确保与后端匹配
const ChapterAccessTypeValueMap = {
  'FREE': 0, // FREE_TRIAL
  'PREMIUM': 1, // PAID_ONLY
  'REGISTERED': 0 // 暂时映射到FREE_TRIAL
};
const chapterFormSchema = z.object({
  title: z.string().min(1, { message: '标题不能为空' }),
  description: z.string().optional(),
  accessType: z.enum(['FREE', 'PREMIUM', 'REGISTERED'], {
    required_error: '请选择访问类型',
  }),
  estimatedMinutes: z.coerce.number().int().min(1, { message: '学习时长不能小于1分钟' }).max(300, { message: '学习时长不能超过300分钟' }),
});
type ChapterFormValues = z.infer<typeof chapterFormSchema>;
interface SortableChapterItemProps {
  chapter: Chapter;
  index: number;
  onEdit: (chapter: Chapter) => void;
  onDelete: (chapterId: number) => void;
  onClick: (chapter: Chapter) => void;
  expanded?: boolean;
  onSectionUpdated?: () => void;
}
const SortableChapterItem = ({ chapter, index, onEdit, onDelete, onClick, expanded = false, onSectionUpdated }: SortableChapterItemProps) => {
  const [isExpanded, setIsExpanded] = useState(expanded);
  // 辅助函数：获取访问类型对应的显示文本
  const getAccessTypeDisplay = (accessType: ChapterAccessType) => {
    switch(accessType) {
      case ChapterAccessType.FREE_TRIAL:
        return { text: '免费', variant: 'secondary', icon: <Unlock className="h-3 w-3 mr-1" /> };
      case ChapterAccessType.PAID_ONLY:
        return { text: '付费', variant: 'destructive', icon: <Lock className="h-3 w-3 mr-1" /> };
      default:
        return { text: '注册用户', variant: 'outline', icon: <BookOpen className="h-3 w-3 mr-1" /> };
    }
  };
  const accessTypeDisplay = getAccessTypeDisplay(chapter.accessType);
  // 处理章节点击，切换展开/折叠状态
  const handleChapterClick = () => {
    setIsExpanded(!isExpanded);
    onClick(chapter);
  };
  return (
    <Draggable draggableId={chapter.id.toString()} index={index}>
      {(provided) => (
        <div
          ref={provided.innerRef}
          {...provided.draggableProps}
          className="mb-4"
        >
          <div className="relative">
            {/* 拖拽手柄 */}
            <div
              {...provided.dragHandleProps}
              className="absolute left-2 top-4 z-10 flex items-center justify-center p-2 text-muted-foreground transition hover:text-foreground cursor-grab"
            >
              <GripVertical className="h-5 w-5" />
            </div>
            {/* 编辑和删除按钮 */}
            <div className="absolute right-2 top-4 z-10 flex items-center space-x-2">
              <Button 
                onClick={() => onEdit(chapter)}
                size="sm" 
                variant="ghost"
              >
                <Edit className="h-4 w-4" />
              </Button>
              <Button 
                onClick={() => onDelete(chapter.id)}
                size="sm" 
                variant="ghost"
                className="text-destructive hover:text-destructive hover:bg-destructive/10"
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            </div>
            <ChapterSections
              chapter={chapter}
              courseId={chapter.courseId}
              expanded={isExpanded}
              onChapterClick={handleChapterClick}
              onSectionUpdated={onSectionUpdated}
            />
          </div>
        </div>
      )}
    </Draggable>
  );
};
interface ChapterListProps {
  courseId: number;
  onChapterClick: (chapter: Chapter) => void;
  isDialogOpen?: boolean;
  setIsDialogOpen?: React.Dispatch<React.SetStateAction<boolean>>;
  onChapterCreated?: () => void;
  onChapterUpdated?: () => void;
  readOnly?: boolean;
}
export function ChapterList({ 
  courseId, 
  onChapterClick, 
  isDialogOpen: externalIsDialogOpen, 
  setIsDialogOpen: externalSetIsDialogOpen,
  onChapterCreated,
  onChapterUpdated,
  readOnly = false
}: ChapterListProps) {
  const [chapters, setChapters] = useState<Chapter[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingChapter, setEditingChapter] = useState<Chapter | null>(null);
  const [isDragging, setIsDragging] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const form = useForm<ChapterFormValues>({
    resolver: zodResolver(chapterFormSchema),
    defaultValues: {
      title: '',
      description: '',
      accessType: 'FREE',
      estimatedMinutes: 30,
    },
  });
  // 使用外部或内部对话框状态
  const dialogOpen = externalIsDialogOpen !== undefined ? externalIsDialogOpen : isDialogOpen;
  const setDialogOpen = externalSetIsDialogOpen || setIsDialogOpen;
  const loadChapters = async () => {
    try {
      setIsLoading(true);
      setError(null);
      const data = await chapterService.getChaptersByCourse(courseId);
      setChapters(data);
    } catch (err: any) {
      setError(err.message || '获取章节列表失败');
      console.error('获取章节列表失败:', err);
    } finally {
      setIsLoading(false);
    }
  };
  useEffect(() => {
    if (courseId) {
      loadChapters();
    }
  }, [courseId]);
  const openCreateDialog = () => {
    if (readOnly) {
      toast.warning('课程审核中，不能修改内容', {
        description: '课程正在审核中，不能添加或修改章节内容'
      });
      return;
    }
    form.reset({
      title: '',
      description: '',
      accessType: 'FREE',
      estimatedMinutes: 30,
    });
    setEditingChapter(null);
    setDialogOpen(true);
  };
  const openEditDialog = (chapter: Chapter) => {
    if (readOnly) {
      toast.warning('课程审核中，不能修改内容', {
        description: '课程正在审核中，不能编辑章节内容'
      });
      return;
    }
    form.reset({
      title: chapter.title,
      description: chapter.description || '',
      accessType: chapter.accessType === 0 ? 'FREE' : 'PREMIUM',
      estimatedMinutes: 30, // 使用默认值，因为Chapter类型中没有estimatedMinutes字段
    });
    setEditingChapter(chapter);
    setDialogOpen(true);
  };
  const onDragEnd = async (result: any) => {
    if (readOnly) {
      toast.warning('课程审核中，不能修改内容', {
        description: '课程正在审核中，不能调整章节顺序'
      });
      return;
    }
    setIsDragging(false);
    if (!result.destination) {
      return;
    }
    if (result.destination.index === result.source.index) {
      return;
    }
    const items = Array.from(chapters);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);
    // 更新本地状态以立即反映
    setChapters(items);
    try {
      // 创建符合ChapterOrderDTO类型的数组
      const reorderedChapters: ChapterOrderDTO[] = items.map((item, index) => ({
        id: item.id,
        orderIndex: index
      }));
      await chapterService.reorderChapters(courseId, reorderedChapters);
      // 使用正确的sonner toast格式
      toast.success('章节顺序已更新', {
        description: '章节顺序已成功调整'
      });
    } catch (err: any) {
      console.error('更新章节顺序失败:', err);
      // 使用正确的sonner toast格式
      toast.error('更新章节顺序失败', {
        description: err.message || '无法更新章节顺序'
      });
      // 重新加载以确保UI与服务器状态同步
      loadChapters();
    }
  };
  const onSubmit = async (values: ChapterFormValues) => {
    setIsSubmitting(true);
    try {
      // 直接使用数值而不是枚举类型
      const chapterData = {
        ...values,
        accessType: ChapterAccessTypeValueMap[values.accessType],
        courseId,
      };
      console.log('提交章节数据:', chapterData);
      if (editingChapter) {
        // 更新章节
        const updatedChapter = await chapterService.updateChapter(editingChapter.id, chapterData);
        console.log('更新章节成功:', updatedChapter);
        // 使用正确的sonner toast格式
        toast.success('章节已更新', {
          description: `章节 "${values.title}" 已成功更新`
        });
        // 重新加载数据
        loadChapters();
        // 通知父组件
        if (onChapterUpdated) {
          onChapterUpdated();
        }
      } else {
        // 创建新章节
        const newChapter = await chapterService.createChapter(chapterData);
        console.log('创建章节成功:', newChapter);
        // 使用正确的sonner toast格式
        toast.success('章节已创建', {
          description: `章节 "${values.title}" 已成功创建`
        });
        // 重新加载数据
        loadChapters();
        // 通知父组件
        if (onChapterCreated) {
          onChapterCreated();
        }
      }
      // 关闭对话框
      setDialogOpen(false);
    } catch (err: any) {
      console.error('章节操作失败:', err);
      // 输出更详细的错误信息
      if(err.response) {
        console.error('错误响应:', err.response.data);
        console.error('错误状态:', err.response.status);
      }
      // 使用正确的sonner toast格式
      toast.error(editingChapter ? '更新章节失败' : '创建章节失败', {
        description: err.message || '操作失败，请稍后重试'
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  const handleDeleteChapter = async (chapterId: number) => {
    if (readOnly) {
      toast.warning('课程审核中，不能修改内容', {
        description: '课程正在审核中，不能删除章节'
      });
      return;
    }
    if (!confirm('确定要删除这个章节吗？删除后无法恢复。')) {
      return;
    }
    try {
      await chapterService.deleteChapter(chapterId);
      // 使用正确的sonner toast格式
      toast.success('章节已删除', {
        description: '章节已成功删除'
      });
      loadChapters(); // 重新加载章节列表
    } catch (err: any) {
      console.error('删除章节失败:', err);
      // 输出更详细的错误信息
      if(err.response) {
        console.error('错误响应:', err.response.data);
        console.error('错误状态:', err.response.status);
      }
      // 使用正确的sonner toast格式
      toast.error('删除章节失败', {
        description: err.message || '无法删除章节'
      });
    }
  };
  return (
    <>
      <Card className="mt-4">
        <CardHeader className="px-6 pt-6 pb-2">
          <div className="flex justify-between items-center">
            <CardTitle>章节管理</CardTitle>
            {!readOnly && (
              <Button onClick={openCreateDialog}>
                <Plus className="mr-2 h-4 w-4" />
                添加章节
              </Button>
            )}
          </div>
        </CardHeader>
        <CardContent className="p-6">
          {isLoading ? (
            <div className="space-y-4">
              {[1, 2, 3].map((i) => (
                <div key={i} className="flex items-center space-x-4">
                  <Skeleton className="h-12 w-12 rounded-md" />
                  <div className="space-y-2 flex-1">
                    <Skeleton className="h-4 w-[250px]" />
                    <Skeleton className="h-4 w-[400px]" />
                  </div>
                </div>
              ))}
            </div>
          ) : error ? (
            <div className="text-center text-destructive py-8">
              <p>{error}</p>
              <Button 
                onClick={loadChapters} 
                variant="outline" 
                className="mt-2"
              >
                重试
              </Button>
            </div>
          ) : chapters.length === 0 ? (
            <div className="text-center py-12 border-2 border-dashed rounded-md">
              <BookOpen className="h-10 w-10 mx-auto text-muted-foreground mb-4" />
              <h3 className="text-lg font-medium mb-2">尚未添加章节</h3>
              <p className="text-muted-foreground mb-4">点击下方按钮创建第一个章节</p>
              {!readOnly && (
                <Button onClick={openCreateDialog}>
                  <Plus className="mr-2 h-4 w-4" />
                  添加章节
                </Button>
              )}
            </div>
          ) : (
            <DragDropContext
              onDragStart={() => setIsDragging(true)}
              onDragEnd={onDragEnd}
            >
              <Droppable droppableId="chapters">
                {(provided) => (
                  <div
                    {...provided.droppableProps}
                    ref={provided.innerRef}
                    className={isDragging ? 'opacity-70' : ''}
                  >
                    {chapters.map((chapter, index) => (
                      <SortableChapterItem
                        key={chapter.id}
                        chapter={chapter}
                        index={index}
                        onEdit={openEditDialog}
                        onDelete={handleDeleteChapter}
                        onClick={onChapterClick}
                        onSectionUpdated={loadChapters}
                      />
                    ))}
                    {provided.placeholder}
                  </div>
                )}
              </Droppable>
            </DragDropContext>
          )}
        </CardContent>
        <CardFooter className="border-t bg-muted/10 px-6 py-4">
          <p className="text-sm text-muted-foreground">
            提示: 拖拽调整章节顺序 • 点击章节管理小节
          </p>
        </CardFooter>
      </Card>
      <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>
        <DialogContent className="sm:max-w-[525px]">
          <DialogHeader>
            <DialogTitle>
              {editingChapter ? '编辑章节' : '创建新章节'}
            </DialogTitle>
            <DialogDescription>
              {editingChapter 
                ? '修改章节的信息和设置' 
                : '为课程添加新的章节'}
            </DialogDescription>
          </DialogHeader>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="title"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>章节标题</FormLabel>
                    <FormControl>
                      <Input placeholder="输入章节标题" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>章节描述</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="简短描述章节内容（可选）" 
                        {...field} 
                        value={field.value || ''}
                      />
                    </FormControl>
                    <FormDescription>
                      简要介绍本章节的内容和学习目标
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="accessType"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>访问权限</FormLabel>
                      <Select 
                        onValueChange={field.onChange} 
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="选择访问权限" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="FREE">
                            <div className="flex items-center">
                              <Unlock className="h-4 w-4 mr-2" />
                              <span>免费</span>
                            </div>
                          </SelectItem>
                          <SelectItem value="REGISTERED">
                            <div className="flex items-center">
                              <BookOpen className="h-4 w-4 mr-2" />
                              <span>注册用户</span>
                            </div>
                          </SelectItem>
                          <SelectItem value="PREMIUM">
                            <div className="flex items-center">
                              <Lock className="h-4 w-4 mr-2" />
                              <span>付费</span>
                            </div>
                          </SelectItem>
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        设置谁可以访问此章节内容
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="estimatedMinutes"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>学习时长（分钟）</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          min={1} 
                          max={300} 
                          {...field} 
                        />
                      </FormControl>
                      <FormDescription>
                        完成本章节预计所需时间
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              <DialogFooter>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setDialogOpen(false)}
                  disabled={isSubmitting}
                >
                  取消
                </Button>
                <Button 
                  type="submit" 
                  disabled={isSubmitting}
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      {editingChapter ? '保存中...' : '创建中...'}
                    </>
                  ) : (
                    editingChapter ? '保存章节' : '创建章节'
                  )}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
    </>
  );
}
</file>

<file path="front/src/components/dashboard/courses/chapter-sections.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Chapter, Section } from '@/types/course';
import { sectionService } from '@/services';
import { 
  ChevronDown, 
  ChevronRight, 
  Edit, 
  Trash2, 
  File, 
  Video, 
  FileText, 
  Headphones,
  Image as ImageIcon,
  FileCode,
  Plus,
  Loader2,
  BookOpen,
  BrainCircuit
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { SectionEditDrawer } from '@/components/dashboard/sections/section-edit-drawer';
import { SectionDrawer } from '@/components/dashboard/sections/section-drawer';
import { SectionFormValues } from '@/components/dashboard/sections/section-form';
import { toast } from 'sonner';
import useDebounce from '@/hooks/useDebounce';
// 内容类型图标映射
const contentTypeIcons = {
  video: <Video className="h-4 w-4 mr-2" />,
  document: <FileText className="h-4 w-4 mr-2" />,
  audio: <Headphones className="h-4 w-4 mr-2" />,
  text: <FileCode className="h-4 w-4 mr-2" />,
  image: <ImageIcon className="h-4 w-4 mr-2" />,
  mixed: <File className="h-4 w-4 mr-2" />,
  default: <File className="h-4 w-4 mr-2" />
};
// 资源类型图标
const resourceTypeIcons = {
  QUESTION_GROUP: <BrainCircuit className="h-4 w-4 mr-2" />,
  MEDIA: null // 使用内容类型图标
};
interface ChapterSectionsProps {
  chapter: Chapter;
  courseId: number;
  expanded?: boolean;
  onChapterClick?: (chapter: Chapter) => void;
  onSectionCreated?: () => void;
  onSectionUpdated?: () => void;
}
export function ChapterSections({ 
  chapter, 
  courseId, 
  expanded = false,
  onChapterClick,
  onSectionCreated,
  onSectionUpdated
}: ChapterSectionsProps) {
  const router = useRouter();
  const [isExpanded, setIsExpanded] = useState(expanded);
  const [sections, setSections] = useState<Section[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isCreateDrawerOpen, setIsCreateDrawerOpen] = useState(false);
  const [isEditDrawerOpen, setIsEditDrawerOpen] = useState(false);
  const [selectedSection, setSelectedSection] = useState<Section | null>(null);
  // 章节ID防抖，避免频繁请求
  const debouncedChapterId = useDebounce(chapter.id, 500);
  // 根据展开状态加载小节
  useEffect(() => {
    // 仅在展开状态且还没有加载小节时加载数据
    if (isExpanded && (!sections.length || debouncedChapterId !== chapter.id)) {
      loadSections();
    }
  }, [isExpanded, debouncedChapterId]);
  // 加载小节数据
  const loadSections = async () => {
    try {
      setError(null);
      setIsLoading(true);
      const data = await sectionService.getSectionsByChapter(chapter.id);
      setSections(data);
    } catch (err: any) {
      console.error(`加载章节 ${chapter.id} 的小节失败:`, err);
      setError(err.message || '无法加载小节');
      toast.error('获取小节列表失败', {
        description: err.message || '请稍后重试'
      });
    } finally {
      setIsLoading(false);
    }
  };
  // 切换展开/折叠状态
  const toggleExpanded = () => {
    setIsExpanded(!isExpanded);
  };
  // 点击章节
  const handleChapterClick = () => {
    toggleExpanded();
    if (onChapterClick) {
      onChapterClick(chapter);
    }
  };
  // 点击小节，打开编辑抽屉而不是跳转到详情页
  const handleSectionClick = (section: Section) => {
    setSelectedSection(section);
    setIsEditDrawerOpen(true);
  };
  // 点击编辑小节，打开编辑弹窗
  const handleEditSection = (e: React.MouseEvent, section: Section) => {
    e.stopPropagation(); // 阻止冒泡到小节点击
    setSelectedSection(section);
    setIsEditDrawerOpen(true);
  };
  // 创建新小节，打开抽屉
  const handleCreateSection = (e: React.MouseEvent) => {
    e.stopPropagation(); // 阻止冒泡到章节点击
    setIsCreateDrawerOpen(true);
  };
  // 处理小节创建成功
  const handleSectionCreated = () => {
    // 重新加载小节列表
    loadSections();
    // 通知父组件
    if (onSectionCreated) {
      onSectionCreated();
    }
  };
  // 处理小节编辑提交
  const handleSectionUpdated = async () => {
    // 重新加载小节列表
    loadSections();
    // 通知父组件
    if (onSectionUpdated) {
      onSectionUpdated();
    }
  };
  // 处理小节删除
  const handleSectionDeleted = async () => {
    // 重新加载小节列表
    loadSections();
    // 通知父组件
    if (onSectionUpdated) {
      onSectionUpdated();
    }
    toast.success('小节已删除', {
      description: '小节列表已更新'
    });
  };
  // 渲染内容类型图标
  const getContentTypeIcon = (section: Section) => {
    // 如果是题目组资源，使用题目组图标
    if (section.resourceTypeDiscriminator === 'QUESTION_GROUP') {
      return resourceTypeIcons.QUESTION_GROUP;
    }
    // 否则根据内容类型返回对应图标
    return contentTypeIcons[section.contentType as keyof typeof contentTypeIcons] || contentTypeIcons.default;
  };
  return (
    <>
      <Card className="mb-4 border shadow-sm">
        <CardHeader 
          className={`flex flex-row items-center justify-between p-4 cursor-pointer ${isExpanded ? 'border-b' : ''}`}
          onClick={handleChapterClick}
        >
          <div className="flex items-center">
            {isExpanded ? 
              <ChevronDown className="h-5 w-5 mr-2 text-muted-foreground" /> : 
              <ChevronRight className="h-5 w-5 mr-2 text-muted-foreground" />
            }
            <div>
              <CardTitle className="text-lg font-medium">{chapter.title}</CardTitle>
              {chapter.description && (
                <p className="text-sm text-muted-foreground mt-1 line-clamp-1">
                  {chapter.description}
                </p>
              )}
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Button 
              variant="ghost" 
              size="icon"
              onClick={(e) => handleCreateSection(e)}
            >
              <Plus className="h-4 w-4" />
            </Button>
          </div>
        </CardHeader>
        {isExpanded && (
          <CardContent className="p-0">
            {isLoading ? (
              <div className="p-4 space-y-3">
                <Skeleton className="h-12 w-full" />
                <Skeleton className="h-12 w-full" />
                <Skeleton className="h-12 w-full" />
              </div>
            ) : error ? (
              <div className="p-4 text-sm text-red-500">{error}</div>
            ) : sections.length === 0 ? (
              <div className="p-4 text-center text-muted-foreground">
                <p>该章节暂无小节</p>
                <Button 
                  variant="link" 
                  className="mt-2"
                  onClick={(e) => handleCreateSection(e)}
                >
                  <Plus className="h-4 w-4 mr-1" />
                  添加小节
                </Button>
              </div>
            ) : (
              <ul className="divide-y">
                {sections.map((section) => (
                  <li 
                    key={section.id}
                    className="p-3 pl-12 hover:bg-accent transition-colors flex items-center justify-between cursor-pointer"
                    onClick={() => handleSectionClick(section)}
                  >
                    <div className="flex items-center">
                      {getContentTypeIcon(section)}
                      <span>{section.title}</span>
                    </div>
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-8 w-8 opacity-50 hover:opacity-100"
                      onClick={(e) => handleEditSection(e, section)}
                    >
                      <Edit className="h-4 w-4" />
                    </Button>
                  </li>
                ))}
              </ul>
            )}
          </CardContent>
        )}
      </Card>
      {/* 使用抽屉创建小节 */}
      <SectionDrawer
        open={isCreateDrawerOpen}
        onOpenChange={setIsCreateDrawerOpen}
        courseId={courseId}
        chapterId={chapter.id}
        onSuccess={handleSectionCreated}
      />
      {/* 编辑小节抽屉 */}
      {selectedSection && (
        <SectionEditDrawer
          open={isEditDrawerOpen}
          onOpenChange={setIsEditDrawerOpen}
          chapterId={chapter.id}
          courseId={courseId}
          section={selectedSection}
          onSuccess={handleSectionUpdated}
          onDelete={handleSectionDeleted}
        />
      )}
    </>
  );
}
</file>

<file path="front/src/components/dashboard/courses/course-form.tsx">
'use client';
import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import * as z from 'zod';
import { courseService, categoryService, tagService } from '@/services';
import { 
  Course, 
  CourseCreateDTO, 
  CoursePaymentType, 
  CourseDifficulty, 
  CourseStatus,
  Category,
  Tag
} from '@/types/course';
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { AlertCircle, Loader2, Upload } from 'lucide-react';
// 表单验证模式
const formSchema = z.object({
  title: z.string().min(2, '标题至少2个字符').max(100, '标题不能超过100个字符'),
  description: z.string().max(1000, '描述不能超过1000个字符').optional(),
  categoryId: z.number().optional(),
  tagIds: z.array(z.number()).optional(),
  paymentType: z.nativeEnum(CoursePaymentType),
  price: z.number().min(0, '价格不能为负').optional(),
  discountPrice: z.number().min(0, '折扣价格不能为负').optional(),
  difficulty: z.nativeEnum(CourseDifficulty).optional(),
  targetAudience: z.string().max(500, '目标受众不能超过500个字符').optional(),
  learningObjectives: z.string().max(500, '学习目标不能超过500个字符').optional(),
});
interface CourseFormProps {
  course?: Course;
  onSuccess?: (course: Course) => void;
}
export default function CourseForm({ course, onSuccess }: CourseFormProps) {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [categories, setCategories] = useState<Category[]>([]);
  const [tags, setTags] = useState<Tag[]>([]);
  const [isLoadingCategories, setIsLoadingCategories] = useState(false);
  const [isLoadingTags, setIsLoadingTags] = useState(false);
  const [categoryPage, setCategoryPage] = useState(0);
  const [tagPage, setTagPage] = useState(0);
  const [hasMoreCategories, setHasMoreCategories] = useState(true);
  const [hasMoreTags, setHasMoreTags] = useState(true);
  const [searchingCategory, setSearchingCategory] = useState('');
  const [searchingTag, setSearchingTag] = useState('');
  const [categorySearchTimeout, setCategorySearchTimeout] = useState<NodeJS.Timeout | null>(null);
  const [tagSearchTimeout, setTagSearchTimeout] = useState<NodeJS.Timeout | null>(null);
  // 表单默认值
  const defaultValues: Partial<CourseCreateDTO> = {
    title: '',
    description: '',
    categoryId: undefined,
    tagIds: [],
    paymentType: CoursePaymentType.FREE,
    price: 0,
    discountPrice: 0,
    difficulty: CourseDifficulty.BEGINNER,
    targetAudience: '',
    learningObjectives: '',
  };
  // 初始化表单
  const form = useForm<CourseCreateDTO>({
    resolver: zodResolver(formSchema),
    defaultValues: course ? {
      title: course.title,
      description: course.description || '',
      categoryId: course.category?.id,
      tagIds: course.tags?.map(tag => tag.id) || [],
      paymentType: course.paymentType,
      price: course.price || 0,
      discountPrice: course.discountPrice || 0,
      difficulty: course.difficulty || CourseDifficulty.BEGINNER,
      targetAudience: course.targetAudience || '',
      learningObjectives: course.learningObjectives || '',
    } : defaultValues,
  });
  // 加载分类数据，使用分页方式，并支持搜索
  const loadCategories = useCallback(async (page = 0, keyword = '') => {
    if (!hasMoreCategories && page > 0) return;
    setIsLoadingCategories(true);
    try {
      // 使用分页API获取数据
      const pageSize = 20; // 合理的页面大小
      const result = await categoryService.getCategoryList(keyword, page, pageSize);
      if (page === 0) {
        // 重置数据
        setCategories(result.content);
      } else {
        // 追加数据
        setCategories(prev => [...prev, ...result.content.filter(
          cat => !prev.some(p => p.id === cat.id)
        )]);
      }
      // 判断是否还有更多数据
      setHasMoreCategories(page < result.totalPages - 1);
      setCategoryPage(page);
    } catch (err) {
      console.error('加载分类失败:', err);
    } finally {
      setIsLoadingCategories(false);
    }
  }, [hasMoreCategories]);
  // 加载标签数据，使用分页方式，并支持搜索
  const loadTags = useCallback(async (page = 0, keyword = '') => {
    if (!hasMoreTags && page > 0) return;
    setIsLoadingTags(true);
    try {
      const pageSize = 50; // 标签可以一次加载多一些
      const result = await tagService.getTagList(keyword, page, pageSize);
      if (page === 0) {
        // 重置数据
        setTags(result.content);
      } else {
        // 追加数据
        setTags(prev => [...prev, ...result.content.filter(
          tag => !prev.some(p => p.id === tag.id)
        )]);
      }
      // 判断是否还有更多数据
      setHasMoreTags(page < result.totalPages - 1);
      setTagPage(page);
    } catch (err) {
      console.error('加载标签失败:', err);
    } finally {
      setIsLoadingTags(false);
    }
  }, [hasMoreTags]);
  // 处理分类搜索
  const handleCategorySearch = (keyword: string) => {
    setSearchingCategory(keyword);
    // 防抖处理
    if (categorySearchTimeout) {
      clearTimeout(categorySearchTimeout);
    }
    setCategorySearchTimeout(setTimeout(() => {
      loadCategories(0, keyword);
    }, 300));
  };
  // 处理标签搜索
  const handleTagSearch = (keyword: string) => {
    setSearchingTag(keyword);
    // 防抖处理
    if (tagSearchTimeout) {
      clearTimeout(tagSearchTimeout);
    }
    setTagSearchTimeout(setTimeout(() => {
      loadTags(0, keyword);
    }, 300));
  };
  // 加载更多分类
  const handleLoadMoreCategories = () => {
    loadCategories(categoryPage + 1, searchingCategory);
  };
  // 加载更多标签
  const handleLoadMoreTags = () => {
    loadTags(tagPage + 1, searchingTag);
  };
  // 初始加载
  useEffect(() => {
    loadCategories();
    loadTags();
    // 组件卸载时清除定时器
    return () => {
      if (categorySearchTimeout) clearTimeout(categorySearchTimeout);
      if (tagSearchTimeout) clearTimeout(tagSearchTimeout);
    };
  }, [loadCategories, loadTags]);
  // 编辑模式下，确保加载完整的分类和标签数据
  useEffect(() => {
    if (course) {
      // 如果是编辑模式，加载分类详情
      if (course.category && course.category.id) {
        const loadCategory = async () => {
          try {
            setIsLoadingCategories(true);
            const categoryDetail = await categoryService.getCategoryById(course.category!.id);
            if (categoryDetail && !categories.some(c => c.id === categoryDetail.id)) {
              setCategories(prev => [categoryDetail, ...prev]);
            }
          } catch (err) {
            console.error('加载分类详情失败:', err);
          } finally {
            setIsLoadingCategories(false);
          }
        };
        loadCategory();
      }
      // 如果有tags数组，则确保添加到标签列表中
      if (course.tags && course.tags.length > 0) {
        const validTags = course.tags.filter(tag => tag && tag.id && tag.name);
        if (validTags.length > 0) {
          setTags(prev => {
            const existingIds = new Set(prev.map(t => t.id));
            // 过滤出prev中不存在的标签
            const newTags = validTags.filter(tag => !existingIds.has(tag.id));
            return [...newTags, ...prev];
          });
          // 确保表单的tagIds值是正确的
          const tagIds = validTags.map(tag => tag.id);
          form.setValue('tagIds', tagIds);
        }
      }
    }
  }, [course, categories, form]);
  // 添加封面上传预览功能
  const [previewImage, setPreviewImage] = useState<string | null>(course?.coverUrl || null);
  const [coverFile, setCoverFile] = useState<File | null>(null);
  // 处理封面文件选择
  const handleCoverChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setCoverFile(file);
      // 创建预览URL
      const reader = new FileReader();
      reader.onload = (event) => {
        setPreviewImage(event.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };
  // 上传封面图片
  const handleCoverUpload = async () => {
    if (!coverFile || !course) return;
    try {
      setIsSubmitting(true);
      const updatedCourse = await courseService.updateCourseCover(course.id, coverFile);
      // 更新预览图片
      setPreviewImage(updatedCourse.coverUrl || null);
      // 通知上层组件
      if (onSuccess) {
        onSuccess(updatedCourse);
      }
      setCoverFile(null);
      // 重置文件输入
      const fileInput = document.getElementById('cover-upload') as HTMLInputElement;
      if (fileInput) fileInput.value = '';
    } catch (err: any) {
      setError(err.message || '上传封面失败');
    } finally {
      setIsSubmitting(false);
    }
  };
  // 提交表单
  const onSubmit = async (data: CourseCreateDTO) => {
    setIsSubmitting(true);
    setError(null);
    try {
      let result: Course;
      if (course) {
        // 更新课程
        result = await courseService.updateCourse(course.id, data);
      } else {
        // 创建课程
        result = await courseService.createCourse(data);
      }
      // 成功后使用setTimeout安全地处理回调或导航
      setTimeout(() => {
        if (onSuccess) {
          onSuccess(result);
        } else {
          // 默认跳转到课程编辑页
          router.push(`/dashboard/courses/${result.id}`);
        }
      }, 100);
    } catch (err: any) {
      setError(err.message || '提交失败，请稍后重试');
    } finally {
      setIsSubmitting(false);
    }
  };
  return (
    <Card className="shadow-sm">
      <CardHeader className="bg-muted/30">
        <CardTitle className="text-2xl font-bold">{course ? '编辑课程' : '创建新课程'}</CardTitle>
        <CardDescription>
          {course ? '修改课程信息' : '填写课程基本信息，创建完成后可以继续添加内容和封面'}
        </CardDescription>
      </CardHeader>
      <CardContent className="pt-6">
        {error && (
          <Alert variant="destructive" className="mb-6">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>错误</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
            {/* 基本信息区域 */}
            <div className="space-y-6">
              <h3 className="text-lg font-medium border-b pb-2">基本信息</h3>
              {/* 课程标题 */}
              <FormField
                control={form.control}
                name="title"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-base">课程标题</FormLabel>
                    <FormControl>
                      <Input placeholder="输入课程标题" {...field} className="h-10" />
                    </FormControl>
                    <FormDescription>
                      给课程起一个吸引人的标题
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {/* 课程描述 */}
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-base">课程描述</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="详细描述课程内容" 
                        {...field} 
                        rows={5}
                        className="resize-y"
                      />
                    </FormControl>
                    <FormDescription>
                      详细介绍课程内容和特点，支持多行文本
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            {/* 分类与标签区域 */}
            <div className="space-y-6">
              <h3 className="text-lg font-medium border-b pb-2">分类与标签</h3>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* 课程分类 */}
                <FormField
                  control={form.control}
                  name="categoryId"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-base">课程分类</FormLabel>
                      <div className="space-y-2">
                        <div className="flex mb-2">
                          <Input
                            placeholder="搜索分类"
                            value={searchingCategory}
                            onChange={(e) => handleCategorySearch(e.target.value)}
                            className="w-full"
                          />
                        </div>
                        <Select
                          onValueChange={(value) => field.onChange(parseInt(value))}
                          value={field.value?.toString()}
                        >
                          <FormControl>
                            <SelectTrigger className="h-10">
                              <SelectValue placeholder="选择课程分类" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {isLoadingCategories && categoryPage === 0 ? (
                              <div className="flex items-center justify-center py-2">
                                <span className="text-sm text-muted-foreground">加载中...</span>
                              </div>
                            ) : categories.length > 0 ? (
                              <>
                                {categories.map((category) => (
                                  <SelectItem key={category.id} value={category.id.toString()}>
                                    {category.name}
                                  </SelectItem>
                                ))}
                                {hasMoreCategories && (
                                  <div 
                                    className="py-2 px-2 cursor-pointer hover:bg-muted text-center text-sm"
                                    onClick={(e) => {
                                      e.preventDefault();
                                      e.stopPropagation();
                                      handleLoadMoreCategories();
                                    }}
                                  >
                                    {isLoadingCategories ? '加载中...' : '加载更多'}
                                  </div>
                                )}
                              </>
                            ) : (
                              <div className="flex items-center justify-center py-2">
                                <span className="text-sm text-muted-foreground">暂无分类</span>
                              </div>
                            )}
                          </SelectContent>
                        </Select>
                      </div>
                      <FormDescription>
                        选择课程所属的分类
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                {/* 课程难度 */}
                <FormField
                  control={form.control}
                  name="difficulty"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-base">课程难度</FormLabel>
                      <Select
                        onValueChange={(value) => field.onChange(parseInt(value))}
                        defaultValue={field.value?.toString()}
                      >
                        <FormControl>
                          <SelectTrigger className="h-10">
                            <SelectValue placeholder="选择课程难度" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value={CourseDifficulty.BEGINNER.toString()}>初级</SelectItem>
                          <SelectItem value={CourseDifficulty.INTERMEDIATE.toString()}>中级</SelectItem>
                          <SelectItem value={CourseDifficulty.ADVANCED.toString()}>高级</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        选择适合的课程难度级别
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              {/* 课程标签 */}
              <FormField
                control={form.control}
                name="tagIds"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-base">课程标签</FormLabel>
                    <div className="space-y-2">
                      <div className="flex mb-2">
                        <Input
                          placeholder="搜索标签"
                          value={searchingTag}
                          onChange={(e) => handleTagSearch(e.target.value)}
                          className="w-full"
                        />
                      </div>
                      <div className="border rounded-md p-4 min-h-[120px]">
                        {isLoadingTags && tagPage === 0 ? (
                          <div className="flex items-center justify-center h-full">
                            <span className="text-sm text-muted-foreground">加载中...</span>
                          </div>
                        ) : (
                          <div className="flex flex-wrap gap-2">
                            {tags.length > 0 ? (
                              <>
                                {tags.map((tag) => (
                                  <div
                                    key={tag.id}
                                    className={`px-3 py-1 rounded-full text-sm cursor-pointer transition-colors 
                                      ${field.value?.includes(tag.id) 
                                        ? 'bg-primary text-primary-foreground' 
                                        : 'bg-secondary text-secondary-foreground hover:bg-secondary/80'
                                      }`}
                                    onClick={() => {
                                      const currentTags = field.value || [];
                                      if (currentTags.includes(tag.id)) {
                                        field.onChange(currentTags.filter(id => id !== tag.id));
                                      } else {
                                        field.onChange([...currentTags, tag.id]);
                                      }
                                    }}
                                  >
                                    {tag.name}
                                  </div>
                                ))}
                                {hasMoreTags && (
                                  <Button 
                                    variant="outline" 
                                    size="sm" 
                                    onClick={handleLoadMoreTags}
                                    disabled={isLoadingTags}
                                    className="ml-2"
                                  >
                                    {isLoadingTags ? '加载中...' : '加载更多'}
                                  </Button>
                                )}
                              </>
                            ) : (
                              <div className="w-full text-center py-2">
                                <span className="text-sm text-muted-foreground">暂无标签</span>
                              </div>
                            )}
                          </div>
                        )}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        已选择 {field.value?.length || 0} 个标签
                      </div>
                    </div>
                    <FormDescription>
                      选择课程相关的标签，点击标签进行选择
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            {/* 价格设置区域 */}
            <div className="space-y-6">
              <h3 className="text-lg font-medium border-b pb-2">价格设置</h3>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* 付费类型 */}
                <FormField
                  control={form.control}
                  name="paymentType"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-base">付费类型</FormLabel>
                      <Select
                        onValueChange={(value) => field.onChange(parseInt(value))}
                        defaultValue={field.value?.toString()}
                      >
                        <FormControl>
                          <SelectTrigger className="h-10">
                            <SelectValue placeholder="选择付费类型" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value={CoursePaymentType.FREE.toString()}>免费</SelectItem>
                          <SelectItem value={CoursePaymentType.PAID.toString()}>付费</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormDescription>
                        选择课程的付费类型
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                {form.watch('paymentType') === CoursePaymentType.PAID && (
                  <div className="space-y-6 lg:col-span-1">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      {/* 价格 */}
                      <FormField
                        control={form.control}
                        name="price"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-base">课程价格</FormLabel>
                            <FormControl>
                              <Input 
                                type="number" 
                                min="0"
                                step="0.01"
                                placeholder="设置课程价格" 
                                {...field}
                                onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                                className="h-10"
                              />
                            </FormControl>
                            <FormDescription>
                              设置课程的价格（元）
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      {/* 优惠价格 */}
                      <FormField
                        control={form.control}
                        name="discountPrice"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel className="text-base">优惠价格</FormLabel>
                            <FormControl>
                              <Input 
                                type="number" 
                                min="0"
                                step="0.01"
                                placeholder="设置优惠价格" 
                                {...field}
                                onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                                className="h-10"
                              />
                            </FormControl>
                            <FormDescription>
                              设置课程的优惠价格
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>
                )}
              </div>
            </div>
            {/* 目标与收益区域 */}
            <div className="space-y-6">
              <h3 className="text-lg font-medium border-b pb-2">学习目标与受众</h3>
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* 目标受众 */}
                <FormField
                  control={form.control}
                  name="targetAudience"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-base">目标受众</FormLabel>
                      <FormControl>
                        <Textarea 
                          placeholder="描述适合学习的人群" 
                          {...field} 
                          rows={3}
                          className="resize-y"
                        />
                      </FormControl>
                      <FormDescription>
                        描述这门课程适合什么样的学习者
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                {/* 学习目标 */}
                <FormField
                  control={form.control}
                  name="learningObjectives"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-base">学习目标</FormLabel>
                      <FormControl>
                        <Textarea 
                          placeholder="学完课程后能掌握的技能" 
                          {...field} 
                          rows={3}
                          className="resize-y"
                        />
                      </FormControl>
                      <FormDescription>
                        描述学完课程后能获得哪些能力或技能
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>
            {/* 封面上传区域 - 新增 */}
            {course && (
              <div className="space-y-6">
                <h3 className="text-lg font-medium border-b pb-2">课程封面</h3>
                <div className="flex justify-center mb-6">
                  {previewImage ? (
                    <div className="relative w-full max-w-md h-64 rounded-md overflow-hidden">
                      <img
                        src={previewImage}
                        alt="课程封面预览"
                        className="object-cover w-full h-full"
                      />
                    </div>
                  ) : (
                    <div className="border border-dashed border-gray-300 rounded-md p-12 text-center w-full max-w-md">
                      <Upload className="mx-auto h-12 w-12 text-gray-400" />
                      <p className="mt-2 text-sm text-gray-500">尚未上传封面图片</p>
                    </div>
                  )}
                </div>
                <div className="space-y-4">
                  <div className="flex items-center space-x-4">
                    <input
                      id="cover-upload"
                      type="file"
                      accept="image/*"
                      onChange={handleCoverChange}
                      className="block w-full text-sm text-gray-500
                        file:mr-4 file:py-2 file:px-4
                        file:rounded-md file:border-0
                        file:text-sm file:font-semibold
                        file:bg-gray-50 file:text-gray-700
                        hover:file:bg-gray-100"
                    />
                    <Button 
                      type="button"
                      onClick={handleCoverUpload} 
                      disabled={!coverFile || isSubmitting}
                    >
                      {isSubmitting ? '上传中...' : '上传封面'}
                    </Button>
                  </div>
                  {coverFile && (
                    <p className="text-sm text-green-600">
                      已选择文件: {coverFile.name}
                    </p>
                  )}
                </div>
              </div>
            )}
            <div className="flex justify-end space-x-4 pt-4 border-t">
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => router.back()}
                disabled={isSubmitting}
                className="min-w-[100px]"
              >
                取消
              </Button>
              <Button type="submit" disabled={isSubmitting} className="min-w-[100px]">
                {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                {course ? '保存更改' : '创建课程'}
              </Button>
            </div>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}
</file>

<file path="front/src/components/dashboard/courses/CoursePublishBadge.tsx">
import React from 'react';
import { CheckCircle, XCircle } from 'lucide-react';
import { Course } from '@/types/course';
interface CoursePublishBadgeProps {
  course: Course;
  showIcon?: boolean;
}
/**
 * 显示课程是否已发布的徽章组件
 */
export const CoursePublishBadge = ({ course, showIcon = true }: CoursePublishBadgeProps) => {
  // 工作区版本课程，且有publishedVersionId，表示已发布
  const isPublished = !course.isPublishedVersion && course.publishedVersionId != null;
  if (isPublished) {
    return (
      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
        {showIcon && <CheckCircle className="h-3.5 w-3.5 mr-1" />}
        已发布
      </span>
    );
  } else {
    return (
      <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
        {showIcon && <XCircle className="h-3.5 w-3.5 mr-1" />}
        未发布
      </span>
    );
  }
};
export default CoursePublishBadge;
</file>

<file path="front/src/components/dashboard/courses/CourseStatusBadge.tsx">
import { CourseStatus } from '@/types/course';
import { FileEdit, Clock, CheckCircle, Ban, HourglassIcon, XCircle } from 'lucide-react';
interface CourseStatusBadgeProps {
  status: CourseStatus | number;
  showIcon?: boolean;
}
export const CourseStatusBadge = ({ status, showIcon = true }: CourseStatusBadgeProps) => {
  switch (status) {
    case CourseStatus.DRAFT:
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
          {showIcon && <FileEdit className="h-3.5 w-3.5 mr-1" />}
          草稿
        </span>
      );
    case CourseStatus.PENDING_REVIEW:
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
          {showIcon && <HourglassIcon className="h-3.5 w-3.5 mr-1" />}
          待审核
        </span>
      );
    case CourseStatus.REVIEWING:
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
          {showIcon && <Clock className="h-3.5 w-3.5 mr-1" />}
          审核中
        </span>
      );
    case CourseStatus.PUBLISHED:
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
          {showIcon && <CheckCircle className="h-3.5 w-3.5 mr-1" />}
          已发布
        </span>
      );
    case CourseStatus.REJECTED:
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
          {showIcon && <Ban className="h-3.5 w-3.5 mr-1" />}
          已拒绝
        </span>
      );
    case CourseStatus.UNPUBLISHED:
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
          {showIcon && <XCircle className="h-3.5 w-3.5 mr-1" />}
          已下线
        </span>
      );
    default:
      return (
        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
          未知状态
        </span>
      );
  }
};
export default CourseStatusBadge;
</file>

<file path="front/src/components/dashboard/header.tsx">
'use client';
import { useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { useAuthStore } from '@/stores/auth-store';
import { useUIStore } from '@/stores/ui-store';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Menu, User, Settings, LogOut, Sun, Moon, Monitor } from 'lucide-react';
export default function Header() {
  const router = useRouter();
  const { user, logout } = useAuthStore();
  const { sidebarOpen, setSidebarOpen, theme, setTheme } = useUIStore();
  const [isLoggingOut, setIsLoggingOut] = useState(false);
  // 获取用户名首字母（用于头像）
  const getUserInitials = () => {
    if (!user || !user.username) return '用';
    return user.username.charAt(0).toUpperCase();
  };
  // 登出处理
  const handleLogout = async () => {
    setIsLoggingOut(true);
    try {
      await logout();
      toast.success('已成功登出');
      router.push('/login');
    } catch (error) {
      toast.error('登出时发生错误');
    } finally {
      setIsLoggingOut(false);
    }
  };
  return (
    <header className="sticky top-0 z-30 flex h-16 items-center justify-between border-b bg-background px-4 md:px-6">
      {/* 移动端菜单按钮 */}
      <Button
        variant="ghost"
        size="icon"
        className="md:hidden"
        onClick={() => setSidebarOpen(!sidebarOpen)}
      >
        <Menu className="h-5 w-5" />
        <span className="sr-only">切换菜单</span>
      </Button>
      {/* 页面标题（仅桌面端显示） */}
      <div className="hidden md:block">
        <h1 className="text-lg font-medium">仪表盘</h1>
      </div>
      {/* 右侧工具栏 */}
      <div className="flex items-center gap-4">
        {/* 主题切换 */}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon">
              {theme === 'light' && <Sun className="h-[1.2rem] w-[1.2rem]" />}
              {theme === 'dark' && <Moon className="h-[1.2rem] w-[1.2rem]" />}
              {theme === 'system' && <Monitor className="h-[1.2rem] w-[1.2rem]" />}
              <span className="sr-only">切换主题</span>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => setTheme('light')}>
              <Sun className="mr-2 h-4 w-4" />
              <span>亮色</span>
            </DropdownMenuItem>
            <DropdownMenuItem onClick={() => setTheme('dark')}>
              <Moon className="mr-2 h-4 w-4" />
              <span>暗色</span>
            </DropdownMenuItem>
            <DropdownMenuItem onClick={() => setTheme('system')}>
              <Monitor className="mr-2 h-4 w-4" />
              <span>系统</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
        {/* 用户菜单 */}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="rounded-full">
              <Avatar>
                <AvatarImage src={user?.avatar} alt={user?.username || '用户'} />
                <AvatarFallback>{getUserInitials()}</AvatarFallback>
              </Avatar>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>
              <div className="flex flex-col">
                <span>{user?.username || '用户'}</span>
                <span className="text-xs text-muted-foreground">{user?.email}</span>
              </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem asChild>
              <Link href="/dashboard/profile">
                <User className="mr-2 h-4 w-4" />
                <span>个人资料</span>
              </Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <Link href="/dashboard/settings">
                <Settings className="mr-2 h-4 w-4" />
                <span>设置</span>
              </Link>
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem
              disabled={isLoggingOut}
              onClick={handleLogout}
              className="text-destructive focus:text-destructive"
            >
              <LogOut className="mr-2 h-4 w-4" />
              <span>{isLoggingOut ? '登出中...' : '登出'}</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </header>
  );
}
</file>

<file path="front/src/components/dashboard/permissions/delete-confirmation-dialog.tsx">
'use client';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { usePermissionStore } from '@/stores/permission-store';
interface DeleteConfirmationDialogProps {
  mode: 'single' | 'batch';
  id?: number;
}
export function DeleteConfirmationDialog({ mode, id }: DeleteConfirmationDialogProps) {
  const { 
    confirmDialogVisible, 
    setConfirmDialogVisible,
    deletePermission,
    batchDeletePermissions,
    selectedIds,
    isLoading
  } = usePermissionStore();
  const handleConfirm = async () => {
    if (mode === 'single' && id) {
      await deletePermission(id);
    } else if (mode === 'batch' && selectedIds.length > 0) {
      await batchDeletePermissions(selectedIds);
    }
    setConfirmDialogVisible(false);
  };
  const title = mode === 'single' ? '删除权限' : '批量删除权限';
  const description = mode === 'single' 
    ? '确定要删除此权限吗？此操作无法撤销。' 
    : `确定要删除选中的 ${selectedIds.length} 个权限吗？此操作无法撤销。`;
  return (
    <AlertDialog open={confirmDialogVisible} onOpenChange={setConfirmDialogVisible}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>{title}</AlertDialogTitle>
          <AlertDialogDescription>{description}</AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel disabled={isLoading}>取消</AlertDialogCancel>
          <AlertDialogAction 
            onClick={handleConfirm}
            disabled={isLoading}
            className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
          >
            {isLoading ? '删除中...' : '确认删除'}
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}
</file>

<file path="front/src/components/dashboard/permissions/permission-form.tsx">
'use client';
import { useEffect } from 'react';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter
} from '@/components/ui/dialog';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { usePermissionStore } from '@/stores/permission-store';
import { Permission } from '@/types/permission';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
// 权限表单验证Schema
const permissionFormSchema = z.object({
  name: z.string()
    .min(2, '权限名称至少需要2个字符')
    .max(50, '权限名称不能超过50个字符'),
  code: z.string()
    .min(4, '权限编码至少需要4个字符')
    .max(50, '权限编码不能超过50个字符')
    .regex(/^[A-Z0-9_]+$/, '权限编码只能包含大写字母、数字和下划线'),
  description: z.string().optional(),
  url: z.string().optional(),
  method: z.string().optional(),
});
// 表单值类型
type PermissionFormValues = z.infer<typeof permissionFormSchema>;
// HTTP方法选项
const httpMethods = [
  { value: 'GET', label: 'GET' },
  { value: 'POST', label: 'POST' },
  { value: 'PUT', label: 'PUT' },
  { value: 'DELETE', label: 'DELETE' },
  { value: 'PATCH', label: 'PATCH' },
];
export function PermissionForm() {
  // 获取权限状态
  const { 
    currentPermission, 
    formVisible, 
    isLoading,
    setFormVisible, 
    createPermission, 
    updatePermission 
  } = usePermissionStore();
  // 初始化表单
  const form = useForm<PermissionFormValues>({
    resolver: zodResolver(permissionFormSchema),
    defaultValues: {
      name: '',
      code: '',
      description: '',
      url: '',
      method: '',
    },
  });
  // 当currentPermission变化时，更新表单值
  useEffect(() => {
    if (currentPermission) {
      form.reset({
        name: currentPermission.name,
        code: currentPermission.code,
        description: currentPermission.description || '',
        url: currentPermission.url || '',
        method: currentPermission.method || '',
      });
    } else {
      form.reset({
        name: '',
        code: '',
        description: '',
        url: '',
        method: '',
      });
    }
  }, [currentPermission, form]);
  // 提交表单
  const onSubmit = async (values: PermissionFormValues) => {
    // 如果是编辑权限
    if (currentPermission) {
      await updatePermission(currentPermission.id, values);
    } else {
      // 如果是创建权限
      await createPermission(values);
    }
  };
  return (
    <Dialog open={formVisible} onOpenChange={setFormVisible}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>
            {currentPermission ? '编辑权限' : '创建权限'}
          </DialogTitle>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            {/* 权限名称 */}
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>权限名称</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入权限名称" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {/* 权限编码 */}
            <FormField
              control={form.control}
              name="code"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>权限编码</FormLabel>
                  <FormControl>
                    <Input 
                      placeholder="请输入权限编码（大写字母、数字和下划线）" 
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {/* 权限描述 */}
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>权限描述</FormLabel>
                  <FormControl>
                    <Textarea 
                      placeholder="请输入权限描述" 
                      className="resize-none" 
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {/* 资源URL */}
            <FormField
              control={form.control}
              name="url"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>资源URL</FormLabel>
                  <FormControl>
                    <Input 
                      placeholder="请输入资源URL（如：/api/users/{id}）" 
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {/* HTTP方法 */}
            <FormField
              control={form.control}
              name="method"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>HTTP方法</FormLabel>
                  <Select 
                    onValueChange={field.onChange} 
                    value={field.value} 
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="请选择HTTP方法" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {httpMethods.map(method => (
                        <SelectItem key={method.value} value={method.value}>
                          {method.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <DialogFooter className="mt-6">
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => setFormVisible(false)}
                disabled={isLoading}
              >
                取消
              </Button>
              <Button type="submit" disabled={isLoading}>
                {isLoading ? '提交中...' : '提交'}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/dashboard/reviews/course-preview-dialog.tsx">
'use client';
import { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { CourseStructureVO, ChapterVO, SectionVO } from '@/types/course';
import { Loader2, AlertCircle, CheckCircle, XCircle, BookOpen, Video, FileText, Film, FileQuestion } from 'lucide-react';
import { reviewService } from '@/services/review-service';
import { toast } from 'sonner';
// 定义预览对话框组件属性
interface CoursePreviewDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  courseId: number;
  onReviewComplete: () => void;
}
export function CoursePreviewDialog({
  open,
  onOpenChange,
  courseId,
  onReviewComplete
}: CoursePreviewDialogProps) {
  // 状态管理
  const [courseStructure, setCourseStructure] = useState<CourseStructureVO | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [reviewComment, setReviewComment] = useState<string>('');
  const [selectedSectionId, setSelectedSectionId] = useState<number | null>(null);
  const [sectionContent, setSectionContent] = useState<any | null>(null);
  const [isLoadingSection, setIsLoadingSection] = useState<boolean>(false);
  // 加载课程结构
  useEffect(() => {
    if (open && courseId) {
      loadCourseStructure();
    }
  }, [open, courseId]);
  const loadCourseStructure = async () => {
    try {
      setIsLoading(true);
      setError(null);
      console.log('加载课程结构, ID:', courseId);
      const structure = await reviewService.getCourseStructure(courseId);
      setCourseStructure(structure);
    } catch (err: any) {
      console.error('加载课程结构失败:', err);
      setError('无法加载课程结构: ' + (err.message || '未知错误'));
    } finally {
      setIsLoading(false);
    }
  };
  // 加载小节内容
  const loadSectionContent = async (sectionId: number) => {
    if (selectedSectionId === sectionId && sectionContent) {
      return; // 已经加载过该小节
    }
    try {
      setIsLoadingSection(true);
      setSelectedSectionId(sectionId);
      setSectionContent(null);
      // 获取小节信息
      const section = findSectionById(sectionId);
      if (!section) {
        throw new Error('找不到小节信息');
      }
      if (section.resourceTypeDiscriminator === 'MEDIA' && section.mediaId) {
        // 加载媒体资源
        const mediaResponse = await fetch(`/api/preview/resources/sections/${sectionId}/media`);
        if (!mediaResponse.ok) {
          throw new Error('获取媒体资源失败');
        }
        const mediaData = await mediaResponse.json();
        setSectionContent(mediaData.data);
      } else if (section.resourceTypeDiscriminator === 'QUESTION_GROUP' && section.questionGroupId) {
        // 加载题组
        const questionResponse = await fetch(`/api/preview/resources/sections/${sectionId}/question-group`);
        if (!questionResponse.ok) {
          throw new Error('获取题组失败');
        }
        const questionData = await questionResponse.json();
        setSectionContent(questionData.data);
      } else {
        setSectionContent({ message: '此小节没有可预览的内容' });
      }
    } catch (err: any) {
      console.error('加载小节内容失败:', err);
      toast.error('加载失败', {
        description: err.message || '无法加载小节内容',
      });
    } finally {
      setIsLoadingSection(false);
    }
  };
  // 查找指定ID的小节
  const findSectionById = (sectionId: number): SectionVO | null => {
    if (!courseStructure) return null;
    for (const chapter of courseStructure.chapters) {
      const section = chapter.sections.find(s => s.id === sectionId);
      if (section) return section;
    }
    return null;
  };
  // 获取资源类型图标
  const getResourceIcon = (resourceType: string) => {
    switch (resourceType) {
      case 'MEDIA':
        return <Film className="h-4 w-4 mr-2" />;
      case 'QUESTION_GROUP':
        return <FileQuestion className="h-4 w-4 mr-2" />;
      default:
        return <FileText className="h-4 w-4 mr-2" />;
    }
  };
  // 通过审核
  const handleApprove = async () => {
    try {
      setIsSubmitting(true);
      await reviewService.approveCourse(String(courseId), reviewComment);
      toast.success('审核通过', {
        description: '课程已成功通过审核',
      });
      onOpenChange(false); // 关闭对话框
      onReviewComplete(); // 通知父组件刷新数据
    } catch (err: any) {
      console.error('通过审核失败:', err);
      toast.error('操作失败', {
        description: err.message || '无法完成审核操作',
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  // 拒绝审核
  const handleReject = async () => {
    if (!reviewComment.trim()) {
      toast.error('请填写拒绝原因', {
        description: '拒绝时必须提供审核意见',
      });
      return;
    }
    try {
      setIsSubmitting(true);
      await reviewService.rejectCourse(String(courseId), reviewComment);
      toast.success('已拒绝审核', {
        description: '课程审核已被拒绝',
      });
      onOpenChange(false); // 关闭对话框
      onReviewComplete(); // 通知父组件刷新数据
    } catch (err: any) {
      console.error('拒绝审核失败:', err);
      toast.error('操作失败', {
        description: err.message || '无法完成审核操作',
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  // 渲染媒体资源预览
  const renderMediaPreview = (media: any) => {
    if (!media) return <div>无法加载媒体资源</div>;
    return (
      <div className="space-y-4">
        <div className="font-medium text-lg">{media.title}</div>
        {media.description && <p className="text-sm text-muted-foreground">{media.description}</p>}
        {media.type && media.type.startsWith('video') && media.accessUrl && (
          <div className="relative aspect-video rounded-md overflow-hidden bg-muted">
            <video 
              src={media.accessUrl} 
              controls 
              className="w-full h-full object-cover"
              poster={media.thumbnailUrl}
            >
              您的浏览器不支持视频播放
            </video>
          </div>
        )}
        {media.type && media.type.startsWith('audio') && media.accessUrl && (
          <div className="p-4 bg-muted rounded-md">
            <audio src={media.accessUrl} controls className="w-full">
              您的浏览器不支持音频播放
            </audio>
          </div>
        )}
        {media.type && media.type.startsWith('image') && media.accessUrl && (
          <div className="relative aspect-video rounded-md overflow-hidden bg-muted">
            <img 
              src={media.accessUrl} 
              alt={media.title} 
              className="w-full h-full object-contain"
            />
          </div>
        )}
        {(!media.type || (!media.type.startsWith('video') && !media.type.startsWith('audio') && !media.type.startsWith('image'))) && media.accessUrl && (
          <div className="p-4 border rounded-md flex items-center">
            <FileText className="h-5 w-5 mr-2 text-primary" />
            <a 
              href={media.accessUrl} 
              target="_blank" 
              rel="noopener noreferrer"
              className="text-primary underline"
            >
              预览/下载文件
            </a>
          </div>
        )}
      </div>
    );
  };
  // 渲染题组预览
  const renderQuestionGroupPreview = (questionGroup: any) => {
    if (!questionGroup) return <div>无法加载题组资源</div>;
    return (
      <div className="space-y-4">
        <div className="font-medium text-lg">{questionGroup.name}</div>
        {questionGroup.description && <p className="text-sm text-muted-foreground">{questionGroup.description}</p>}
        <div className="text-sm text-muted-foreground">
          共 {questionGroup.questions?.length || 0} 道题目
        </div>
        {questionGroup.questions && questionGroup.questions.length > 0 && (
          <div className="space-y-4 mt-4">
            {questionGroup.questions.map((question: any, index: number) => (
              <div key={question.id} className="border rounded-md p-4">
                <div className="font-medium">
                  题目 {index + 1}: {question.content}
                </div>
                {question.type === 'MULTIPLE_CHOICE' && (
                  <div className="mt-2 space-y-2">
                    {question.options && question.options.map((option: any) => (
                      <div key={option.id} className="flex items-start">
                        <div className={`w-6 h-6 flex items-center justify-center rounded border mr-2 ${option.isCorrect ? 'bg-green-100 border-green-500 text-green-700' : 'bg-gray-100'}`}>
                          {option.label}
                        </div>
                        <div>{option.content}</div>
                      </div>
                    ))}
                  </div>
                )}
                {question.type === 'TRUE_FALSE' && (
                  <div className="mt-2 space-y-2">
                    <div className={`flex items-center ${question.answer === 'TRUE' ? 'text-green-700' : ''}`}>
                      <div className={`w-6 h-6 flex items-center justify-center rounded border mr-2 ${question.answer === 'TRUE' ? 'bg-green-100 border-green-500' : 'bg-gray-100'}`}>
                        T
                      </div>
                      <div>正确</div>
                    </div>
                    <div className={`flex items-center ${question.answer === 'FALSE' ? 'text-green-700' : ''}`}>
                      <div className={`w-6 h-6 flex items-center justify-center rounded border mr-2 ${question.answer === 'FALSE' ? 'bg-green-100 border-green-500' : 'bg-gray-100'}`}>
                        F
                      </div>
                      <div>错误</div>
                    </div>
                  </div>
                )}
                {question.analysis && (
                  <div className="mt-3 pt-3 border-t text-sm">
                    <div className="font-medium">题目解析:</div>
                    <div className="text-muted-foreground">{question.analysis}</div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    );
  };
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] flex flex-col">
        <DialogHeader>
          <DialogTitle>
            课程预览与审核
            {courseStructure && ` - ${courseStructure.course.title}`}
          </DialogTitle>
        </DialogHeader>
        {isLoading ? (
          <div className="flex flex-col items-center justify-center p-12">
            <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
            <div>加载课程内容...</div>
          </div>
        ) : error ? (
          <div className="flex flex-col items-center justify-center p-12 text-destructive">
            <AlertCircle className="h-8 w-8 mb-4" />
            <div>{error}</div>
          </div>
        ) : courseStructure ? (
          <div className="flex flex-1 overflow-hidden">
            {/* 左侧章节目录 */}
            <div className="w-1/3 border-r pr-4 overflow-y-auto">
              <div className="mb-4 pb-2 border-b">
                <h3 className="font-semibold text-sm">课程信息</h3>
                <div className="mt-2 text-sm space-y-1">
                  <div><span className="text-muted-foreground">标题：</span>{courseStructure.course.title}</div>
                  <div><span className="text-muted-foreground">机构：</span>{courseStructure.course.institution?.name || '未知'}</div>
                  <div><span className="text-muted-foreground">章节数：</span>{courseStructure.chapters.length}</div>
                  <div><span className="text-muted-foreground">创建者：</span>{courseStructure.course.creatorName || '未知'}</div>
                </div>
              </div>
              <div className="text-sm font-medium mb-2">章节目录</div>
              <Accordion type="multiple" defaultValue={['chapter-0']} className="w-full">
                {courseStructure.chapters.map((chapter, index) => (
                  <AccordionItem 
                    key={chapter.id} 
                    value={`chapter-${index}`}
                    className="border-b"
                  >
                    <AccordionTrigger className="py-2">
                      <div className="flex items-center gap-2">
                        <BookOpen className="h-4 w-4 text-primary flex-shrink-0" />
                        <span className="text-sm">{chapter.title}</span>
                      </div>
                    </AccordionTrigger>
                    <AccordionContent>
                      <div className="space-y-1 ml-6">
                        {chapter.sections.map((section) => (
                          <button
                            key={section.id}
                            className={`flex items-center w-full text-left py-1.5 px-2 text-sm rounded ${selectedSectionId === section.id ? 'bg-muted' : 'hover:bg-muted/50'}`}
                            onClick={() => loadSectionContent(section.id)}
                          >
                            {getResourceIcon(section.resourceTypeDiscriminator)}
                            <span>{section.title}</span>
                          </button>
                        ))}
                      </div>
                    </AccordionContent>
                  </AccordionItem>
                ))}
              </Accordion>
            </div>
            {/* 右侧内容预览 */}
            <div className="flex-1 pl-4 overflow-y-auto">
              {!selectedSectionId ? (
                <div className="flex flex-col items-center justify-center h-full text-muted-foreground">
                  <FileText className="h-12 w-12 mb-4" />
                  <div>请从左侧章节目录中选择要预览的小节内容</div>
                </div>
              ) : isLoadingSection ? (
                <div className="flex flex-col items-center justify-center h-full">
                  <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
                  <div>加载内容中...</div>
                </div>
              ) : (
                <div className="py-2">
                  {sectionContent ? (
                    <div>
                      {/* 渲染不同类型的内容 */}
                      {sectionContent.type && (
                        renderMediaPreview(sectionContent)
                      )}
                      {sectionContent.questions && (
                        renderQuestionGroupPreview(sectionContent)
                      )}
                      {sectionContent.message && (
                        <div className="text-center text-muted-foreground py-8">
                          {sectionContent.message}
                        </div>
                      )}
                    </div>
                  ) : (
                    <div className="text-center text-muted-foreground py-8">
                      无法加载内容
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        ) : (
          <div className="text-center text-muted-foreground py-12">
            无法加载课程内容
          </div>
        )}
        {/* 审核评价表单 */}
        <div className="border-t pt-4 mt-auto">
          <div className="space-y-4">
            <div>
              <Label htmlFor="review-comment">审核意见</Label>
              <Textarea
                id="review-comment"
                placeholder="请输入审核意见或拒绝原因..."
                value={reviewComment}
                onChange={(e) => setReviewComment(e.target.value)}
                className="mt-1.5"
              />
            </div>
            <DialogFooter>
              <Button
                variant="outline"
                onClick={() => onOpenChange(false)}
                disabled={isSubmitting}
              >
                取消
              </Button>
              <Button
                variant="destructive"
                onClick={handleReject}
                disabled={isSubmitting || isLoading}
                className="gap-2"
              >
                {isSubmitting ? <Loader2 className="h-4 w-4 animate-spin" /> : <XCircle className="h-4 w-4" />}
                拒绝审核
              </Button>
              <Button
                onClick={handleApprove}
                disabled={isSubmitting || isLoading}
                className="gap-2"
              >
                {isSubmitting ? <Loader2 className="h-4 w-4 animate-spin" /> : <CheckCircle className="h-4 w-4" />}
                通过审核
              </Button>
            </DialogFooter>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/dashboard/reviews/review-content-player.tsx">
'use client';
import { useState, useEffect } from 'react';
import { SectionVO } from '@/types/course';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Skeleton } from '@/components/ui/skeleton';
import { Button } from '@/components/ui/button';
import { reviewService } from '@/services';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { toast } from 'sonner';
import { 
  Video, 
  FileText, 
  Headphones, 
  AlertCircle, 
  Loader2,
  BrainCircuit,
  Clock,
  ExternalLink,
  Download
} from 'lucide-react';
interface ReviewContentPlayerProps {
  section: SectionVO;
}
export function ReviewContentPlayer({ section }: ReviewContentPlayerProps) {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [content, setContent] = useState<any | null>(null);
  const [activeTab, setActiveTab] = useState<string>('content');
  // 加载小节资源
  useEffect(() => {
    async function loadSectionResources() {
      try {
        setLoading(true);
        setError(null);
        // 根据资源类型加载对应资源，使用特定的预览API
        if (section.resourceTypeDiscriminator === 'MEDIA' && section.mediaId) {
          const mediaData = await reviewService.getSectionMedia(String(section.id));
          setContent({
            type: 'MEDIA',
            ...mediaData
          });
        } else if (section.resourceTypeDiscriminator === 'QUESTION_GROUP' && section.questionGroupId) {
          const questionData = await reviewService.getSectionQuestionGroup(String(section.id));
          setContent({
            type: 'QUESTION_GROUP',
            ...questionData
          });
        } else {
          setContent(null);
        }
      } catch (err: any) {
        console.error('加载小节资源失败:', err);
        setError(err.message || '无法加载小节资源');
      } finally {
        setLoading(false);
      }
    }
    if (section && section.id) {
      loadSectionResources();
    }
  }, [section]);
  // 渲染媒体资源
  const renderMediaContent = () => {
    if (!content || !content.accessUrl) {
      return (
        <div className="flex flex-col items-center justify-center p-12 text-muted-foreground">
          <FileText className="h-12 w-12 mb-4" />
          <p>该媒体资源暂不可访问</p>
        </div>
      );
    }
    // 从文件URL或类型判断媒体类型
    const mediaType = content.type || 'unknown';
    const fileExt = content.accessUrl.split('.').pop()?.toLowerCase() || '';
    // 检查是否为视频格式
    const isVideo = 
      mediaType.includes('video') || 
      mediaType === 'VIDEO' ||
      ['mp4', 'mov', 'avi', 'wmv', 'flv', 'webm', 'mkv'].includes(fileExt);
    // 检查是否为音频格式
    const isAudio = 
      mediaType.includes('audio') || 
      mediaType === 'AUDIO' ||
      ['mp3', 'wav', 'ogg', 'aac', 'm4a'].includes(fileExt);
    // 检查是否为图片格式
    const isImage = 
      mediaType.includes('image') || 
      mediaType === 'IMAGE' ||
      ['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg'].includes(fileExt);
    // 检查是否为文档格式
    const isDocument = 
      mediaType.includes('pdf') || 
      mediaType.includes('document') || 
      mediaType.includes('msword') || 
      mediaType.includes('excel') || 
      mediaType.includes('powerpoint') ||
      mediaType === 'DOCUMENT' ||
      ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx'].includes(fileExt);
    // 根据媒体类型渲染不同的播放器
    if (isVideo) {
      return (
        <div className="rounded-lg overflow-hidden border shadow-sm">
          <div className="bg-muted p-2 flex justify-between items-center">
            <span className="text-sm font-medium">{content.title || '视频资源'}</span>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => window.open(content.accessUrl, '_blank')}
            >
              <ExternalLink className="h-4 w-4 mr-1" />
              新窗口打开
            </Button>
          </div>
          <div className="aspect-video bg-black">
            <video
              key={content.accessUrl}
              src={content.accessUrl}
              controls
              controlsList="nodownload"
              playsInline
              preload="metadata"
              className="w-full h-full"
              onError={(e) => {
                console.error('视频加载错误:', e);
                toast.error('视频加载失败，请重试');
              }}
            >
              您的浏览器不支持HTML5视频播放，请更新浏览器版本。
            </video>
          </div>
          {content.description && (
            <div className="p-3 bg-muted/50 border-t">
              <p className="text-sm text-muted-foreground">{content.description}</p>
            </div>
          )}
          <div className="p-2 bg-muted flex justify-between items-center text-xs text-muted-foreground">
            <div>
              提示：可使用空格键暂停/播放，左右方向键快退/快进
            </div>
            <div className="flex items-center gap-2">
              <Button 
                variant="ghost" 
                size="sm" 
                className="h-7 px-2"
                onClick={() => {
                  const videoElement = document.querySelector('video');
                  if (videoElement) {
                    if (videoElement.requestFullscreen) {
                      videoElement.requestFullscreen();
                    }
                  }
                }}
              >
                <span className="text-xs">全屏播放</span>
              </Button>
            </div>
          </div>
        </div>
      );
    } else if (isAudio) {
      return (
        <div className="p-6 bg-muted rounded-lg">
          <div className="flex flex-col items-center space-y-4">
            <div className="w-40 h-40 bg-primary/10 rounded-full flex items-center justify-center mb-2">
              <Headphones className="h-16 w-16 text-primary" />
            </div>
            <div className="text-center mb-2">
              <h3 className="text-lg font-medium">{content.title || '音频资源'}</h3>
              {content.description && (
                <p className="text-sm text-muted-foreground mt-1">{content.description}</p>
              )}
            </div>
            <div className="w-full max-w-md bg-card p-4 rounded-lg border shadow-sm">
              <audio
                key={content.accessUrl}
                src={content.accessUrl}
                controls
                className="w-full"
                controlsList="nodownload"
                preload="metadata"
                onError={(e) => {
                  console.error('音频加载错误:', e);
                  toast.error('音频加载失败，请重试');
                }}
              >
                您的浏览器不支持HTML5音频播放，请更新浏览器版本。
              </audio>
              <div className="flex justify-between items-center mt-3 text-xs text-muted-foreground">
                <div>
                  提示：可使用空格键暂停/播放
                </div>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={() => window.open(content.accessUrl, '_blank')}
                >
                  <ExternalLink className="h-3 w-3 mr-1" />
                  新窗口打开
                </Button>
              </div>
            </div>
          </div>
        </div>
      );
    } else if (isDocument) {
      return (
        <div className="relative rounded-lg overflow-hidden border">
          <div className="flex justify-between items-center bg-muted p-2">
            <span className="text-sm font-medium">{content.title || '文档资源'}</span>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => window.open(content.accessUrl, '_blank')}
            >
              <ExternalLink className="h-4 w-4 mr-1" />
              新窗口打开
            </Button>
          </div>
          <iframe
            src={content.accessUrl}
            className="w-full h-[500px] border-0"
            title={content.title || "文档预览"}
            sandbox="allow-scripts allow-same-origin allow-forms"
            referrerPolicy="no-referrer"
            loading="lazy"
            onError={(e) => {
              console.error('文档加载错误:', e);
              toast.error('文档加载失败，请重试');
            }}
          />
        </div>
      );
    } else if (isImage) {
      return (
        <div className="flex flex-col items-center p-4 bg-muted rounded-lg">
          <div className="mb-4 text-center">
            <h3 className="text-lg font-medium">{content.title || '图片资源'}</h3>
            {content.description && (
              <p className="text-sm text-muted-foreground mt-1">{content.description}</p>
            )}
          </div>
          <div className="relative rounded-lg overflow-hidden border bg-white">
            <img
              src={content.accessUrl}
              alt={content.title || '图片资源'}
              className="max-w-full max-h-[500px] object-contain"
            />
          </div>
          <Button 
            variant="ghost" 
            size="sm"
            className="mt-4"
            onClick={() => window.open(content.accessUrl, '_blank')}
          >
            <ExternalLink className="h-4 w-4 mr-2" />
            新窗口查看原图
          </Button>
        </div>
      );
    } else {
      return (
        <div className="p-6 bg-card rounded-lg border shadow-sm">
          <div className="flex flex-col items-center justify-center">
            <div className="w-20 h-20 bg-primary/10 rounded-full flex items-center justify-center mb-4">
              <FileText className="h-10 w-10 text-primary" />
            </div>
            <h3 className="text-lg font-medium mb-1">{content.title || '文件资源'}</h3>
            {content.description && (
              <p className="text-sm text-muted-foreground text-center mb-4 max-w-md">{content.description}</p>
            )}
            <div className="text-center mb-6">
              <p className="text-sm text-muted-foreground">
                当前文件类型 ({mediaType || '未知类型'}) 不支持在线预览
              </p>
              <p className="text-xs text-muted-foreground mt-1">
                文件扩展名: {fileExt || '未知'}, 检测类型: {JSON.stringify({isVideo, isAudio, isImage, isDocument})}
              </p>
            </div>
            <div className="flex gap-3">
              <Button 
                variant="outline" 
                onClick={() => window.open(content.accessUrl, '_blank')}
              >
                <ExternalLink className="h-4 w-4 mr-2" />
                在浏览器中打开
              </Button>
              <Button 
                onClick={() => {
                  // 创建一个临时链接元素来触发下载
                  const a = document.createElement('a');
                  a.href = content.accessUrl || '';
                  // 确保设置一个有效的文件名
                  const fileName = (content.title && content.title.trim()) ? content.title : '资源下载';
                  a.download = fileName;
                  document.body.appendChild(a);
                  a.click();
                  document.body.removeChild(a);
                }}
              >
                <Download className="h-4 w-4 mr-2" />
                下载文件
              </Button>
            </div>
          </div>
        </div>
      );
    }
  };
  // 渲染题组内容
  const renderQuestionGroupContent = () => {
    if (!content || !content.items || content.items.length === 0) {
      return (
        <div className="flex flex-col items-center justify-center p-12 text-muted-foreground">
          <BrainCircuit className="h-12 w-12 mb-4" />
          <p>该题组没有可显示的题目</p>
        </div>
      );
    }
    return (
      <div className="space-y-6 p-4">
        <div className="flex items-center space-x-2">
          <BrainCircuit className="h-6 w-6 text-primary" />
          <h3 className="text-lg font-medium">{content.name || '题目组'}</h3>
        </div>
        <Alert>
          <Clock className="h-4 w-4 text-muted-foreground" />
          <AlertDescription>
            共 {content.items.length} 个题目，预览模式
          </AlertDescription>
        </Alert>
        <div className="space-y-8">
          {content.items.map((item: any, index: number) => (
            <div key={item.id} className="border rounded-md p-4">
              <div className="font-medium">题目 {index + 1}</div>
              <div className="mt-2">{item.question?.content || '未找到题目内容'}</div>
              {item.question?.options && item.question.options.length > 0 && (
                <div className="mt-4 space-y-2">
                  {item.question.options.map((option: any) => (
                    <div key={option.id} className="flex items-start space-x-2">
                      <div className="border rounded w-6 h-6 flex items-center justify-center flex-shrink-0">
                        {option.label}
                      </div>
                      <div>{option.content}</div>
                    </div>
                  ))}
                </div>
              )}
              {item.question?.analysis && (
                <div className="mt-4 p-3 border-l-4 border-primary/50 bg-primary/5">
                  <div className="font-medium">题目解析</div>
                  <div className="mt-1 text-muted-foreground">
                    {item.question.analysis}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    );
  };
  if (loading) {
    return (
      <Card>
        <CardContent className="p-6">
          <div className="space-y-4">
            <Skeleton className="w-2/3 h-8" />
            <Skeleton className="w-full h-[300px]" />
            <Skeleton className="w-full h-20" />
          </div>
        </CardContent>
      </Card>
    );
  }
  if (error) {
    return (
      <Card>
        <CardContent className="p-6">
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>加载失败</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    );
  }
  return (
    <Card>
      <CardHeader>
        <CardTitle>{section.title}</CardTitle>
        {section.description && (
          <CardDescription>{section.description}</CardDescription>
        )}
      </CardHeader>
      <CardContent>
        {!content ? (
          <div className="flex flex-col items-center justify-center p-12 text-muted-foreground">
            <FileText className="h-12 w-12 mb-4" />
            <p>此小节没有可预览的内容</p>
          </div>
        ) : content.type === 'MEDIA' || section.resourceTypeDiscriminator === 'MEDIA' ? (
          renderMediaContent()
        ) : content.type === 'QUESTION_GROUP' || section.resourceTypeDiscriminator === 'QUESTION_GROUP' ? (
          renderQuestionGroupContent()
        ) : (
          <div className="flex flex-col items-center justify-center p-12 text-muted-foreground">
            <FileText className="h-12 w-12 mb-4" />
            <p>不支持的内容类型</p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
</file>

<file path="front/src/components/dashboard/roles/delete-confirmation-dialog.tsx">
'use client';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { Loader2 } from 'lucide-react';
import { useRoleStore } from '@/stores/role-store';
export function DeleteConfirmationDialog() {
  const {
    confirmDialogVisible,
    setConfirmDialogVisible,
    selectedIds,
    deleteRole,
    batchDeleteRoles,
    isLoading,
  } = useRoleStore();
  // 判断是单个删除还是批量删除
  const isBatchDelete = selectedIds.length > 1;
  // 处理删除操作
  const handleDelete = async () => {
    if (isBatchDelete) {
      await batchDeleteRoles(selectedIds);
    } else if (selectedIds.length === 1) {
      await deleteRole(selectedIds[0]);
    }
  };
  return (
    <AlertDialog open={confirmDialogVisible} onOpenChange={setConfirmDialogVisible}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>
            {isBatchDelete
              ? `确认删除 ${selectedIds.length} 个角色`
              : '确认删除角色'}
          </AlertDialogTitle>
          <AlertDialogDescription>
            {isBatchDelete
              ? '此操作将删除选中的所有角色，删除后无法恢复。'
              : '此操作将删除该角色，删除后无法恢复。'}
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel disabled={isLoading}>取消</AlertDialogCancel>
          <AlertDialogAction onClick={handleDelete} disabled={isLoading}>
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            确认删除
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}
</file>

<file path="front/src/components/dashboard/roles/permission-dialog.tsx">
'use client';
import { useEffect, useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Label } from '@/components/ui/label';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Loader2, Search, X } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { useRoleStore } from '@/stores/role-store';
import { usePermissionStore } from '@/stores/permission-store';
import { Permission } from '@/types/permission';
export function PermissionDialog() {
  const { 
    currentRole, 
    permissionDialogVisible, 
    setPermissionDialogVisible, 
    assignPermissions, 
    isLoading 
  } = useRoleStore();
  const { permissions, fetchPermissions } = usePermissionStore();
  // 选中的权限ID列表
  const [selectedPermissionIds, setSelectedPermissionIds] = useState<number[]>([]);
  // 搜索关键词
  const [searchTerm, setSearchTerm] = useState('');
  // 初始加载权限列表
  useEffect(() => {
    fetchPermissions();
  }, [fetchPermissions]);
  // 当对话框打开时，初始化选中的权限
  useEffect(() => {
    if (currentRole && currentRole.permissions) {
      setSelectedPermissionIds(currentRole.permissions.map(p => p.id));
    } else {
      setSelectedPermissionIds([]);
    }
  }, [currentRole, permissionDialogVisible]);
  // 处理权限选择
  const handlePermissionToggle = (id: number) => {
    setSelectedPermissionIds(prev => {
      if (prev.includes(id)) {
        return prev.filter(permId => permId !== id);
      } else {
        return [...prev, id];
      }
    });
  };
  // 处理全选/取消全选
  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedPermissionIds(filteredPermissions.map(p => p.id));
    } else {
      setSelectedPermissionIds([]);
    }
  };
  // 提交权限分配
  const handleSubmit = async () => {
    if (currentRole) {
      await assignPermissions(currentRole.id, selectedPermissionIds);
    }
  };
  // 过滤权限列表
  const filteredPermissions = permissions.filter(permission => {
    return (
      permission.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      permission.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (permission.description && permission.description.toLowerCase().includes(searchTerm.toLowerCase()))
    );
  });
  return (
    <Dialog open={permissionDialogVisible} onOpenChange={setPermissionDialogVisible}>
      <DialogContent className="sm:max-w-[550px]">
        <DialogHeader>
          <DialogTitle>
            {currentRole ? `为角色 "${currentRole.name}" 分配权限` : '分配权限'}
          </DialogTitle>
        </DialogHeader>
        {/* 搜索框 */}
        <div className="flex items-center space-x-2 mb-4">
          <div className="relative flex-1">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="搜索权限..."
              className="pl-8"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            {searchTerm && (
              <button
                type="button"
                onClick={() => setSearchTerm('')}
                className="absolute right-2.5 top-2.5 text-muted-foreground hover:text-foreground"
              >
                <X className="h-4 w-4" />
                <span className="sr-only">清除搜索</span>
              </button>
            )}
          </div>
        </div>
        {/* 全选复选框 */}
        <div className="flex items-center space-x-2 mb-2">
          <Checkbox
            id="select-all"
            checked={
              filteredPermissions.length > 0 &&
              filteredPermissions.every(p => selectedPermissionIds.includes(p.id))
            }
            onCheckedChange={handleSelectAll}
          />
          <Label htmlFor="select-all">全选</Label>
        </div>
        {/* 权限列表 */}
        <ScrollArea className="h-[300px] pr-4">
          <div className="space-y-2">
            {filteredPermissions.length === 0 ? (
              <div className="py-6 text-center text-muted-foreground">
                {searchTerm ? '未找到匹配的权限' : '没有可用的权限'}
              </div>
            ) : (
              filteredPermissions.map((permission) => (
                <div key={permission.id} className="flex items-center space-x-2 py-1">
                  <Checkbox
                    id={`permission-${permission.id}`}
                    checked={selectedPermissionIds.includes(permission.id)}
                    onCheckedChange={() => handlePermissionToggle(permission.id)}
                  />
                  <div className="grid gap-1.5 leading-none">
                    <Label htmlFor={`permission-${permission.id}`} className="font-medium">
                      {permission.name} <span className="text-muted-foreground">({permission.code})</span>
                    </Label>
                    {permission.description && (
                      <p className="text-xs text-muted-foreground">
                        {permission.description}
                      </p>
                    )}
                  </div>
                </div>
              ))
            )}
          </div>
        </ScrollArea>
        {/* 操作按钮 */}
        <div className="flex justify-end space-x-2 pt-4">
          <Button
            variant="outline"
            onClick={() => setPermissionDialogVisible(false)}
            disabled={isLoading}
          >
            取消
          </Button>
          <Button onClick={handleSubmit} disabled={isLoading}>
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            保存
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/dashboard/roles/role-form.tsx">
'use client';
import { useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Loader2 } from 'lucide-react';
import { useRoleStore } from '@/stores/role-store';
import { Role } from '@/types/role';
// 表单验证模式
const formSchema = z.object({
  name: z.string()
    .min(2, { message: '角色名称至少需要2个字符' })
    .max(50, { message: '角色名称不能超过50个字符' }),
  code: z.string()
    .min(4, { message: '角色编码至少需要4个字符' })
    .max(50, { message: '角色编码不能超过50个字符' })
    .regex(/^ROLE_[A-Z0-9_]+$/, { 
      message: '角色编码必须以ROLE_开头，且只能包含大写字母、数字和下划线' 
    }),
  description: z.string().max(200, { message: '描述不能超过200个字符' }).optional(),
});
// 表单值类型
type FormValues = z.infer<typeof formSchema>;
export function RoleForm() {
  // 从store获取状态和方法
  const { 
    formVisible, 
    setFormVisible, 
    currentRole, 
    isLoading, 
    createRole, 
    updateRole 
  } = useRoleStore();
  // 创建表单
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: '',
      code: 'ROLE_',
      description: '',
    },
  });
  // 当currentRole变化时更新表单值
  useEffect(() => {
    if (currentRole) {
      form.reset({
        name: currentRole.name,
        code: currentRole.code,
        description: currentRole.description || '',
      });
    } else {
      form.reset({
        name: '',
        code: 'ROLE_',
        description: '',
      });
    }
  }, [currentRole, form]);
  // 提交表单
  const onSubmit = async (values: FormValues) => {
    if (currentRole) {
      // 更新角色
      await updateRole(currentRole.id, values);
    } else {
      // 创建角色
      await createRole(values);
    }
  };
  return (
    <Dialog open={formVisible} onOpenChange={setFormVisible}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>{currentRole ? '编辑角色' : '创建角色'}</DialogTitle>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>角色名称</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入角色名称" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="code"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>角色编码</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入角色编码 (格式: ROLE_XXX)" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>描述</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="请输入角色描述"
                      className="resize-none"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="flex justify-end space-x-2 pt-4">
              <Button variant="outline" onClick={() => setFormVisible(false)} disabled={isLoading}>取消</Button>
              <Button type="submit" disabled={isLoading}>
                {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                {currentRole ? '更新' : '创建'}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/dashboard/sections/add-resource-dialog.tsx">
'use client';
import { useState, useEffect } from 'react';
import { toast } from 'sonner';
import {
  Search,
  FileText,
  Video,
  Music,
  Image as ImageIcon,
  File,
  Loader2,
  Plus,
  Upload,
  ArrowRight,
  X,
  ListChecks,
  ClipboardList
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { 
  Dialog, 
  DialogContent, 
  DialogDescription, 
  DialogFooter, 
  DialogHeader, 
  DialogTitle, 
  DialogTrigger 
} from '@/components/ui/dialog';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { cn } from '@/lib/utils';
import { Badge } from '@/components/ui/badge';
import { mediaService } from '@/services/media-service';
import questionGroupService from '@/services/question-group';
import { sectionService } from '@/services/section';
import { Empty } from '@/components/ui/empty';
import { QuestionGroup } from '@/types/question';
// 媒体类型映射
const mediaTypeIcons = {
  'VIDEO': <Video className="h-5 w-5" />,
  'AUDIO': <Music className="h-5 w-5" />,
  'DOCUMENT': <FileText className="h-5 w-5" />,
  'IMAGE': <ImageIcon className="h-5 w-5" />,
  'OTHER': <File className="h-5 w-5" />,
};
// 资源类型选项
const resourceTypes = [
  { value: 'primary', label: '主要资源', description: '课程的主要内容' },
  { value: 'supplementary', label: '补充资源', description: '课程的补充材料' },
  { value: 'homework', label: '作业', description: '学习任务和作业' },
  { value: 'reference', label: '参考资料', description: '扩展阅读和参考材料' },
];
// 转换文件大小为可读格式
const formatFileSize = (bytes: number): string => {
  if (bytes === 0) return '0 B';
  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(1024));
  return `${(bytes / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`;
};
interface AddResourceDialogProps {
  sectionId: number;
  onResourceAdded?: () => void;
  trigger?: React.ReactNode;
}
export function AddResourceDialog({ sectionId, onResourceAdded, trigger }: AddResourceDialogProps) {
  // 共享状态
  const [isOpen, setIsOpen] = useState(false);
  const [activeTab, setActiveTab] = useState('media'); // 'media' or 'questionGroup'
  const [error, setError] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  // 媒体资源状态
  const [mediaList, setMediaList] = useState<any[]>([]);
  const [isLoadingMedia, setIsLoadingMedia] = useState(false);
  const [currentPage, setCurrentPage] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [mediaSearchQuery, setMediaSearchQuery] = useState('');
  const [selectedTab, setSelectedTab] = useState('all');
  const [selectedMedia, setSelectedMedia] = useState<any | null>(null);
  const [selectedResourceType, setSelectedResourceType] = useState('primary');
  // 题组状态
  const [questionGroups, setQuestionGroups] = useState<QuestionGroup[]>([]);
  const [isLoadingGroups, setIsLoadingGroups] = useState(false);
  const [groupSearchQuery, setGroupSearchQuery] = useState('');
  const [selectedQuestionGroup, setSelectedQuestionGroup] = useState<QuestionGroup | null>(null);
  // 加载媒体列表
  const loadMediaList = async () => {
    try {
      setIsLoadingMedia(true);
      setError(null);
      // 构建查询参数
      const params: any = {
        page: currentPage,
        size: 12
      };
      // 添加搜索条件
      if (mediaSearchQuery) {
        params.search = mediaSearchQuery;
      }
      // 添加媒体类型过滤
      if (selectedTab !== 'all') {
        params.type = selectedTab;
      }
      // 调用API获取媒体列表
      const response = await mediaService.getMediaList(params);
      if (response && response.data) {
        setMediaList(response.data.content || []);
        setTotalPages(response.data.totalPages || 0);
      } else {
        setMediaList([]);
        setTotalPages(0);
      }
    } catch (err: any) {
      console.error('加载媒体列表失败:', err);
      setError(err.message || '无法加载媒体列表');
    } finally {
      setIsLoadingMedia(false);
    }
  };
  // 加载题组列表
  const loadQuestionGroups = async () => {
    try {
      setIsLoadingGroups(true);
      setError(null);
      // 构建查询参数
      const params: any = {
        page: 0,
        pageSize: 20
      };
      // 添加搜索条件
      if (groupSearchQuery) {
        params.name = groupSearchQuery;
      }
      // 调用API获取题组列表
      const response = await questionGroupService.getQuestionGroupList(params);
      if (response && response.content) {
        setQuestionGroups(response.content || []);
      } else {
        setQuestionGroups([]);
      }
    } catch (err: any) {
      console.error('加载题组列表失败:', err);
      setError(err.message || '无法加载题组列表');
    } finally {
      setIsLoadingGroups(false);
    }
  };
  // 选择媒体资源
  const handleSelectMedia = (media: any) => {
    setSelectedMedia(media.id === selectedMedia?.id ? null : media);
    // 选择媒体时清除题组选择
    setSelectedQuestionGroup(null);
  };
  // 选择题组
  const handleSelectQuestionGroup = (group: QuestionGroup) => {
    setSelectedQuestionGroup(group.id === selectedQuestionGroup?.id ? null : group);
    // 选择题组时清除媒体选择
    setSelectedMedia(null);
  };
  // 添加资源到小节
  const handleAddResource = async () => {
    // 选择了媒体资源
    if (activeTab === 'media' && selectedMedia) {
      if (!selectedResourceType) {
        toast.error('请选择资源类型');
        return;
      }
      try {
        setIsSubmitting(true);
        setError(null);
        // 使用新的API添加资源
        await sectionService.setMediaResource(sectionId, selectedMedia.id, selectedResourceType);
        toast.success('资源添加成功', {
          description: '媒体资源已成功添加到小节'
        });
        // 重置表单
        setSelectedMedia(null);
        // 通知父组件刷新
        if (onResourceAdded) {
          onResourceAdded();
        }
        // 关闭对话框
        setIsOpen(false);
      } catch (err: any) {
        console.error('添加资源失败:', err);
        setError(err.message || '添加资源失败');
        toast.error('添加资源失败', {
          description: err.message || '请稍后重试'
        });
      } finally {
        setIsSubmitting(false);
      }
    } 
    // 选择了题组
    else if (activeTab === 'questionGroup' && selectedQuestionGroup) {
      try {
        setIsSubmitting(true);
        setError(null);
        // 使用新的API添加题组
        await sectionService.setQuestionGroup(sectionId, selectedQuestionGroup.id);
        toast.success('题组添加成功', {
          description: '题组已成功添加到小节'
        });
        // 重置表单
        setSelectedQuestionGroup(null);
        // 通知父组件刷新
        if (onResourceAdded) {
          onResourceAdded();
        }
        // 关闭对话框
        setIsOpen(false);
      } catch (err: any) {
        console.error('添加题组失败:', err);
        setError(err.message || '添加题组失败');
        toast.error('添加题组失败', {
          description: err.message || '请稍后重试'
        });
      } finally {
        setIsSubmitting(false);
      }
    } else {
      toast.error('请选择要添加的内容', {
        description: activeTab === 'media' ? '请选择一个媒体资源' : '请选择一个题组'
      });
    }
  };
  // 当对话框打开或标签切换时加载相应数据
  useEffect(() => {
    if (isOpen) {
      if (activeTab === 'media') {
        loadMediaList();
      } else if (activeTab === 'questionGroup') {
        loadQuestionGroups();
      }
    }
  }, [isOpen, activeTab, currentPage, selectedTab, mediaSearchQuery]);
  // 当题组搜索查询变更时加载题组
  useEffect(() => {
    if (isOpen && activeTab === 'questionGroup') {
      const timer = setTimeout(() => {
        loadQuestionGroups();
      }, 500);
      return () => clearTimeout(timer);
    }
  }, [groupSearchQuery]);
  // 媒体项目组件
  const MediaItem = ({ media }: { media: any }) => {
    const isSelected = selectedMedia?.id === media.id;
    return (
      <div 
        className={cn(
          'border rounded-md p-3 cursor-pointer transition-all hover:border-primary',
          isSelected ? 'border-primary ring-1 ring-primary' : ''
        )}
        onClick={() => handleSelectMedia(media)}
      >
        <div className="flex items-center gap-3">
          <div className="p-2 bg-primary/10 rounded-md">
            {mediaTypeIcons[media.type as keyof typeof mediaTypeIcons] || <File className="h-5 w-5" />}
          </div>
          <div className="flex-1 min-w-0">
            <h4 className="font-medium text-sm truncate">{media.title}</h4>
            <div className="flex flex-col mt-1">
              <span className="text-xs text-muted-foreground">
                {media.type} • {formatFileSize(media.size)}
              </span>
            </div>
          </div>
          {isSelected && (
            <div className="w-5 h-5 rounded-full bg-primary flex items-center justify-center text-primary-foreground">
              <Plus className="h-3 w-3" />
            </div>
          )}
        </div>
      </div>
    );
  };
  // 题组项目组件
  const QuestionGroupItem = ({ group }: { group: QuestionGroup }) => {
    const isSelected = selectedQuestionGroup?.id === group.id;
    return (
      <div 
        className={cn(
          'border rounded-md p-3 cursor-pointer transition-all hover:border-primary',
          isSelected ? 'border-primary ring-1 ring-primary' : ''
        )}
        onClick={() => handleSelectQuestionGroup(group)}
      >
        <div className="flex items-center gap-3">
          <div className="p-2 bg-primary/10 rounded-md">
            <ClipboardList className="h-5 w-5" />
          </div>
          <div className="flex-1 min-w-0">
            <h4 className="font-medium text-sm truncate">{group.name}</h4>
            <div className="flex flex-col mt-1">
              <span className="text-xs text-muted-foreground">
                {group.questionCount || 0} 题 • {group.description ? group.description.substring(0, 20) + (group.description.length > 20 ? '...' : '') : '无描述'}
              </span>
            </div>
          </div>
          {isSelected && (
            <div className="w-5 h-5 rounded-full bg-primary flex items-center justify-center text-primary-foreground">
              <Plus className="h-3 w-3" />
            </div>
          )}
        </div>
      </div>
    );
  };
  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      {trigger ? (
        <DialogTrigger asChild>
          {trigger}
        </DialogTrigger>
      ) : (
        <DialogTrigger asChild>
          <Button>
            <Plus className="h-4 w-4 mr-2" />
            添加资源
          </Button>
        </DialogTrigger>
      )}
      <DialogContent className="sm:max-w-[700px] max-h-[85vh] flex flex-col">
        <DialogHeader>
          <DialogTitle>添加内容到小节</DialogTitle>
          <DialogDescription>
            选择媒体资源或题组添加到小节
          </DialogDescription>
        </DialogHeader>
        {/* 主标签页：媒体 vs 题组 */}
        <Tabs 
          defaultValue="media"
          value={activeTab}
          onValueChange={setActiveTab}
          className="mt-2"
        >
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="media" className="flex items-center">
              <File className="mr-2 h-4 w-4" />
              媒体资源
            </TabsTrigger>
            <TabsTrigger value="questionGroup" className="flex items-center">
              <ListChecks className="mr-2 h-4 w-4" />
              题组
            </TabsTrigger>
          </TabsList>
          {/* 媒体标签内容 */}
          <TabsContent value="media">
            {/* 媒体类型选择和搜索框 */}
            <div className="flex flex-col gap-4 my-4">
              <Tabs defaultValue="all" value={selectedTab} onValueChange={setSelectedTab}>
                <TabsList className="flex w-full overflow-x-auto">
                  <TabsTrigger value="all">全部</TabsTrigger>
                  <TabsTrigger value="VIDEO">视频</TabsTrigger>
                  <TabsTrigger value="AUDIO">音频</TabsTrigger>
                  <TabsTrigger value="DOCUMENT">文档</TabsTrigger>
                  <TabsTrigger value="IMAGE">图片</TabsTrigger>
                  <TabsTrigger value="OTHER">其他</TabsTrigger>
                </TabsList>
              </Tabs>
              <div className="flex items-center gap-2">
                <Input
                  placeholder="搜索媒体资源..."
                  value={mediaSearchQuery}
                  onChange={(e) => setMediaSearchQuery(e.target.value)}
                  className="flex-1"
                />
                <Button variant="outline" onClick={() => loadMediaList()}>
                  <Search className="h-4 w-4" />
                </Button>
              </div>
            </div>
            {/* 媒体列表 */}
            <div className="relative">
              {isLoadingMedia ? (
                <div className="flex flex-col items-center justify-center p-8">
                  <Loader2 className="h-8 w-8 animate-spin text-primary mb-2" />
                  <p className="text-sm text-muted-foreground">加载媒体资源...</p>
                </div>
              ) : error ? (
                <div className="text-center py-8">
                  <p className="text-destructive">{error}</p>
                  <Button variant="outline" onClick={loadMediaList} className="mt-4">
                    <ArrowRight className="h-4 w-4 mr-2" />
                    重试
                  </Button>
                </div>
              ) : mediaList.length === 0 ? (
                <Empty 
                  icon={<Upload className="h-10 w-10" />}
                  title="未找到媒体资源" 
                  description="尝试其他搜索条件或上传新的媒体资源"
                />
              ) : (
                <ScrollArea className="h-[300px] rounded-md border p-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {mediaList.map((media) => (
                      <MediaItem key={media.id} media={media} />
                    ))}
                  </div>
                </ScrollArea>
              )}
            </div>
            {/* 媒体资源类型选择 */}
            {selectedMedia && (
              <div className="mt-4 p-4 border rounded-md bg-muted/20">
                <h4 className="font-medium mb-2">资源类型</h4>
                <Select value={selectedResourceType} onValueChange={setSelectedResourceType}>
                  <SelectTrigger>
                    <SelectValue placeholder="选择资源类型" />
                  </SelectTrigger>
                  <SelectContent>
                    {resourceTypes.map(type => (
                      <SelectItem key={type.value} value={type.value}>
                        <div className="flex flex-col">
                          <span>{type.label}</span>
                          <span className="text-xs text-muted-foreground">{type.description}</span>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <p className="text-xs text-muted-foreground mt-2">
                  选择资源类型以分类课程内容
                </p>
              </div>
            )}
          </TabsContent>
          {/* 题组标签内容 */}
          <TabsContent value="questionGroup">
            {/* 题组搜索框 */}
            <div className="flex items-center gap-2 my-4">
              <Input
                placeholder="搜索题组..."
                value={groupSearchQuery}
                onChange={(e) => setGroupSearchQuery(e.target.value)}
                className="flex-1"
              />
              <Button variant="outline" onClick={() => loadQuestionGroups()}>
                <Search className="h-4 w-4" />
              </Button>
            </div>
            {/* 题组列表 */}
            <div className="relative">
              {isLoadingGroups ? (
                <div className="flex flex-col items-center justify-center p-8">
                  <Loader2 className="h-8 w-8 animate-spin text-primary mb-2" />
                  <p className="text-sm text-muted-foreground">加载题组...</p>
                </div>
              ) : error ? (
                <div className="text-center py-8">
                  <p className="text-destructive">{error}</p>
                  <Button variant="outline" onClick={loadQuestionGroups} className="mt-4">
                    <ArrowRight className="h-4 w-4 mr-2" />
                    重试
                  </Button>
                </div>
              ) : questionGroups.length === 0 ? (
                <Empty 
                  icon={<ListChecks className="h-10 w-10" />}
                  title="未找到题组" 
                  description="尝试其他搜索条件或创建新的题组"
                />
              ) : (
                <ScrollArea className="h-[350px] rounded-md border p-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {questionGroups.map((group) => (
                      <QuestionGroupItem key={group.id} group={group} />
                    ))}
                  </div>
                </ScrollArea>
              )}
            </div>
          </TabsContent>
        </Tabs>
        {/* 错误提示和操作按钮 */}
        <DialogFooter className="mt-6">
          {error && (
            <div className="text-destructive text-sm mb-2 w-full">{error}</div>
          )}
          <Button variant="outline" onClick={() => setIsOpen(false)} disabled={isSubmitting}>
            取消
          </Button>
          <Button onClick={handleAddResource} disabled={isSubmitting}>
            {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {activeTab === 'media' ? '添加媒体资源' : '添加题组'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/dashboard/sections/section-dialog.tsx">
'use client';
import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { SectionForm, SectionFormValues } from './section-form';
import { Section } from '@/types/course';
import { Loader2 } from 'lucide-react';
interface SectionDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  courseId: number;
  chapterId: number;
  section?: Section;
  onSubmit: (values: SectionFormValues) => Promise<void>;
  mode: 'create' | 'edit';
}
export function SectionDialog({
  open,
  onOpenChange,
  courseId,
  chapterId,
  section,
  onSubmit,
  mode = 'create'
}: SectionDialogProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  // 处理表单提交
  const handleSubmit = async (values: SectionFormValues) => {
    try {
      setIsSubmitting(true);
      setError(null);
      await onSubmit(values);
      onOpenChange(false); // 成功后关闭弹窗
    } catch (err: any) {
      setError(err.message || '提交时发生错误');
    } finally {
      setIsSubmitting(false);
    }
  };
  // 处理取消
  const handleCancel = () => {
    onOpenChange(false);
  };
  // 准备默认值
  let defaultValues: Partial<SectionFormValues> = {};
  if (section && mode === 'edit') {
    defaultValues = {
      title: section.title,
      description: section.description || '',
      accessType: section.accessType,
      contentType: section.contentType,
      estimatedMinutes: section.estimatedMinutes
    };
  }
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[800px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {mode === 'create' ? '添加新小节' : '编辑小节'}
          </DialogTitle>
        </DialogHeader>
        {isSubmitting ? (
          <div className="flex items-center justify-center p-6">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
            <span className="ml-2">提交中...</span>
          </div>
        ) : (
          <>
            {error && (
              <div className="bg-destructive/10 text-destructive text-sm p-3 rounded-md mb-4">
                {error}
              </div>
            )}
            <SectionForm
              defaultValues={defaultValues}
              section={section}
              chapterId={chapterId}
              onSubmit={handleSubmit}
              onCancel={handleCancel}
              isSubmitting={isSubmitting}
              error={error}
              mode={mode}
            />
          </>
        )}
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/dashboard/sections/section-drawer.tsx">
'use client';
import { useState, useEffect } from 'react';
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetDescription, SheetFooter } from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { toast } from 'sonner';
import { 
  ChevronRight, 
  Info, 
  Loader2, 
  Save, 
  Search, 
  FileText, 
  Video, 
  Headphones, 
  FileCode, 
  BrainCircuit,
  Clock,
  RefreshCw,
  X,
  CheckCircle,
  AlertCircle,
  Lock,
  File
} from 'lucide-react';
import { Section, ChapterAccessType } from '@/types/course';
import { sectionService, mediaService, questionGroupService } from '@/services';
import { MediaVO, Page, Result } from '@/services/media-service';
import { QuestionGroup } from '@/types/question';
// 访问类型选项
const accessTypes = [
  { value: ChapterAccessType.FREE_TRIAL, label: '免费试看', description: '学习者可以免费访问' },
  { value: ChapterAccessType.PAID_ONLY, label: '付费访问', description: '学习者需购买课程后才能访问' }
];
// 内容类型
interface ContentType {
  value: string;
  label: string;
  icon: React.ReactNode;
}
// 扩展题目组类型，增加需要的属性
interface EnhancedQuestionGroup {
  id: number;
  name: string;
  title?: string; // 用于兼容UI显示
  description?: string;
  institutionId?: number;
  questionCount?: number;
  avgDifficulty?: number;
  creatorId?: number;
  createdAt?: string;
  updatedAt?: string;
}
// 内容类型选项
const contentTypes: ContentType[] = [
  { value: 'video', label: '视频', icon: <Video className="h-5 w-5" /> },
  { value: 'document', label: '文档', icon: <FileText className="h-5 w-5" /> },
  { value: 'audio', label: '音频', icon: <Headphones className="h-5 w-5" /> },
  { value: 'text', label: '文本', icon: <FileCode className="h-5 w-5" /> }
];
// 小节表单数据类型
interface SectionFormData {
  title: string;
  description: string;
  contentType: string;
  accessType: ChapterAccessType;
  estimatedMinutes: number;
  resourceType: 'MEDIA' | 'QUESTION_GROUP' | 'NONE';
  resourceId?: number;
}
interface SectionDrawerProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  courseId: number;
  chapterId: number;
  onSuccess?: () => void;
}
export function SectionDrawer({
  open,
  onOpenChange,
  courseId,
  chapterId,
  onSuccess
}: SectionDrawerProps) {
  // 表单状态
  const [formData, setFormData] = useState<SectionFormData>({
    title: '',
    description: '',
    contentType: 'video',
    accessType: ChapterAccessType.PAID_ONLY,
    estimatedMinutes: 30,
    resourceType: 'NONE'
  });
  // 资源选择和加载状态
  const [selectedMedia, setSelectedMedia] = useState<MediaVO | null>(null);
  const [selectedQuestionGroup, setSelectedQuestionGroup] = useState<EnhancedQuestionGroup | null>(null);
  const [activeTab, setActiveTab] = useState<string>('media');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  // 媒体资源状态
  const [mediaList, setMediaList] = useState<MediaVO[]>([]);
  const [isLoadingMedia, setIsLoadingMedia] = useState(false);
  const [mediaSearchTerm, setMediaSearchTerm] = useState('');
  const [mediaPage, setMediaPage] = useState(0);
  const [mediaTotalPages, setMediaTotalPages] = useState(0);
  const [mediaType, setMediaType] = useState<string>('all');
  // 题目组状态
  const [questionGroups, setQuestionGroups] = useState<EnhancedQuestionGroup[]>([]);
  const [isLoadingQuestionGroups, setIsLoadingQuestionGroups] = useState(false);
  const [questionGroupSearchTerm, setQuestionGroupSearchTerm] = useState('');
  const [questionGroupPage, setQuestionGroupPage] = useState(0);
  const [questionGroupTotalPages, setQuestionGroupTotalPages] = useState(0);
  // 重置表单
  const resetForm = () => {
    setFormData({
      title: '',
      description: '',
      contentType: 'video',
      accessType: ChapterAccessType.PAID_ONLY,
      estimatedMinutes: 30,
      resourceType: 'NONE'
    });
    setSelectedMedia(null);
    setSelectedQuestionGroup(null);
    setActiveTab('media');
    setError(null);
  };
  // 加载媒体资源
  const loadMediaResources = async (page = 0, searchTerm = '', type = 'all') => {
    try {
      setIsLoadingMedia(true);
      const params: any = {
        page,
        size: 10,
      };
      if (searchTerm) {
        params.keyword = searchTerm;
      }
      if (type !== 'all') {
        params.type = type.toUpperCase();
      }
      const response = await mediaService.getMediaList(params);
      if (response && response.data) {
        setMediaList(response.data.content);
        setMediaTotalPages(response.data.totalPages);
      }
    } catch (error) {
      console.error('加载媒体资源失败:', error);
      toast.error('加载媒体资源失败');
    } finally {
      setIsLoadingMedia(false);
    }
  };
  // 加载题目组
  const loadQuestionGroups = async (page = 0, searchTerm = '') => {
    try {
      setIsLoadingQuestionGroups(true);
      const params: any = {
        page,
        pageSize: 10,
      };
      if (searchTerm) {
        params.name = searchTerm;
      }
      const response = await questionGroupService.getQuestionGroupList(params);
      if (response) {
        // 转换后端返回的QuestionGroup为EnhancedQuestionGroup
        const enhancedGroups: EnhancedQuestionGroup[] = response.content.map(group => ({
          ...group,
          title: group.name // 添加title属性以兼容UI
        }));
        setQuestionGroups(enhancedGroups);
        setQuestionGroupTotalPages(response.totalPages);
      }
    } catch (error) {
      console.error('加载题目组失败:', error);
      toast.error('加载题目组失败');
    } finally {
      setIsLoadingQuestionGroups(false);
    }
  };
  // 处理表单字段变更
  const handleChange = (name: keyof SectionFormData, value: any) => {
    setFormData(prev => ({ ...prev, [name]: value }));
    // 根据资源类型自动设置内容类型
    if (name === 'resourceType') {
      if (value === 'MEDIA' && selectedMedia) {
        // 根据媒体类型设置内容类型
        const mediaType = selectedMedia.type.toLowerCase();
        if (mediaType.includes('video')) {
          setFormData(prev => ({ ...prev, contentType: 'video' }));
        } else if (mediaType.includes('audio')) {
          setFormData(prev => ({ ...prev, contentType: 'audio' }));
        } else if (mediaType.includes('document') || mediaType.includes('pdf')) {
          setFormData(prev => ({ ...prev, contentType: 'document' }));
        } else {
          setFormData(prev => ({ ...prev, contentType: 'text' }));
        }
      } else if (value === 'QUESTION_GROUP') {
        setFormData(prev => ({ ...prev, contentType: 'text' }));
      }
    }
  };
  // 选择媒体资源
  const handleSelectMedia = (media: MediaVO) => {
    setSelectedMedia(media);
    setFormData(prev => ({
      ...prev,
      resourceType: 'MEDIA',
      resourceId: media.id,
      // 根据媒体类型设置内容类型
      contentType: media.type.toLowerCase().includes('video') 
        ? 'video' 
        : media.type.toLowerCase().includes('audio')
          ? 'audio'
          : media.type.toLowerCase().includes('document') || media.type.toLowerCase().includes('pdf')
            ? 'document'
            : 'text'
    }));
  };
  // 选择题目组
  const handleSelectQuestionGroup = (group: EnhancedQuestionGroup) => {
    setSelectedQuestionGroup(group);
    setFormData(prev => ({
      ...prev,
      resourceType: 'QUESTION_GROUP',
      resourceId: group.id,
      contentType: 'text'
    }));
  };
  // 处理表单提交
  const handleSubmit = async () => {
    try {
      setIsSubmitting(true);
      setError(null);
      // 验证表单
      if (!formData.title) {
        setError('小节标题不能为空');
        return;
      }
      if (formData.resourceType !== 'NONE' && !formData.resourceId) {
        setError(formData.resourceType === 'MEDIA' ? '请选择媒体资源' : '请选择题目组');
        return;
      }
      // 创建小节数据
      const sectionData = {
        title: formData.title,
        description: formData.description,
        contentType: formData.contentType,
        accessType: formData.accessType,
        estimatedMinutes: formData.estimatedMinutes,
        chapterId: chapterId
      };
      // 创建小节
      const createdSection = await sectionService.createSection(sectionData);
      // 如果有选择资源，绑定资源
      if (formData.resourceType === 'MEDIA' && formData.resourceId && createdSection) {
        await sectionService.setMediaResource(
          createdSection.id, 
          formData.resourceId,
          'primary' // 默认为主要资源类型
        );
      } else if (formData.resourceType === 'QUESTION_GROUP' && formData.resourceId && createdSection) {
        await sectionService.setQuestionGroup(
          createdSection.id,
          formData.resourceId,
          { 
            randomOrder: false,
            orderByDifficulty: false,
            showAnalysis: true
          }
        );
      }
      // 成功提示
      toast.success('小节创建成功', {
        description: '小节已成功添加到章节中'
      });
      // 关闭抽屉并重置表单
      onOpenChange(false);
      resetForm();
      // 调用成功回调
      if (onSuccess) {
        onSuccess();
      }
    } catch (error: any) {
      console.error('创建小节失败:', error);
      setError(error.message || '创建小节失败，请稍后重试');
      toast.error('创建小节失败', {
        description: error.message || '请稍后重试'
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  // 根据激活的标签初始加载资源
  useEffect(() => {
    if (open) {
      if (activeTab === 'media') {
        loadMediaResources(0, mediaSearchTerm, mediaType);
      } else if (activeTab === 'question-group') {
        loadQuestionGroups(0, questionGroupSearchTerm);
      }
    }
  }, [open, activeTab]);
  return (
    <Sheet open={open} onOpenChange={(isOpen) => {
      onOpenChange(isOpen);
      if (!isOpen) {
        resetForm();
      }
    }}>
      <SheetContent className="w-full sm:max-w-md md:max-w-xl lg:max-w-2xl overflow-y-auto p-0">
        <div className="p-6 space-y-6">
          <SheetHeader className="mb-2 text-left">
            <SheetTitle className="text-xl">添加新小节</SheetTitle>
            <SheetDescription>
              填写小节信息并选择关联资源，一步完成小节创建
            </SheetDescription>
          </SheetHeader>
          {error && (
            <Alert variant="destructive" className="mb-5">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          <div className="space-y-8">
            {/* 基本信息 */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium">基本信息</h3>
              <div className="space-y-5">
                <div className="space-y-2">
                  <Label htmlFor="title">小节标题 *</Label>
                  <Input 
                    id="title" 
                    value={formData.title} 
                    onChange={e => handleChange('title', e.target.value)}
                    placeholder="输入小节标题"
                    className="w-full"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="description">小节描述</Label>
                  <Textarea 
                    id="description" 
                    value={formData.description} 
                    onChange={e => handleChange('description', e.target.value)}
                    placeholder="描述小节内容（可选）"
                    rows={3}
                    className="w-full resize-none"
                  />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
                  <div className="space-y-3">
                    <Label>访问权限</Label>
                    <RadioGroup 
                      value={formData.accessType.toString()} 
                      onValueChange={value => handleChange('accessType', parseInt(value))}
                      className="space-y-3"
                    >
                      {accessTypes.map(type => (
                        <div key={type.value} className="flex items-center space-x-2">
                          <RadioGroupItem 
                            value={type.value.toString()} 
                            id={`access-type-${type.value}`} 
                          />
                          <Label htmlFor={`access-type-${type.value}`} className="font-normal">
                            {type.label}
                            <p className="text-xs text-muted-foreground">{type.description}</p>
                          </Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </div>
                  <div className="space-y-3">
                    <Label htmlFor="estimatedMinutes">预计学习时间（分钟）</Label>
                    <Input 
                      id="estimatedMinutes" 
                      type="number" 
                      value={formData.estimatedMinutes} 
                      onChange={e => handleChange('estimatedMinutes', parseInt(e.target.value) || 0)}
                      min={1}
                      max={1000}
                      className="w-full"
                    />
                  </div>
                </div>
              </div>
            </div>
            <Separator />
            {/* 资源选择 */}
            <div className="space-y-5">
              <h3 className="text-lg font-medium">关联资源</h3>
              <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                <TabsList className="grid w-full grid-cols-2 mb-4">
                  <TabsTrigger value="media">媒体资源</TabsTrigger>
                  <TabsTrigger value="question-group">题目组</TabsTrigger>
                </TabsList>
                {/* 媒体资源选择 */}
                <TabsContent value="media" className="space-y-4">
                  <div className="flex items-center gap-2">
                    <Input
                      placeholder="搜索媒体资源..."
                      value={mediaSearchTerm}
                      onChange={e => setMediaSearchTerm(e.target.value)}
                      className="flex-1"
                    />
                    <Button 
                      variant="secondary"
                      size="sm"
                      onClick={() => loadMediaResources(0, mediaSearchTerm, mediaType)}
                    >
                      搜索
                    </Button>
                  </div>
                  {isLoadingMedia ? (
                    <div className="flex justify-center items-center py-6">
                      <Loader2 className="h-6 w-6 animate-spin text-primary" />
                      <span className="ml-2">加载媒体资源中...</span>
                    </div>
                  ) : mediaList.length > 0 ? (
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 max-h-[320px] overflow-y-auto p-1">
                      {mediaList.map(media => (
                        <div
                          key={media.id}
                          className={`rounded-md p-3 cursor-pointer transition-colors ${
                            selectedMedia?.id === media.id 
                              ? 'bg-primary/10 border-primary border' 
                              : 'border hover:bg-accent/50'
                          }`}
                          onClick={() => handleSelectMedia(media)}
                        >
                          <div className="flex flex-col">
                            <div className="font-medium truncate">{media.title}</div>
                            <div className="text-xs text-muted-foreground mt-1 flex justify-between">
                              <span>{media.type.toLowerCase().split('/')[0] || '未知类型'}</span>
                              {media.size ? <span>{(media.size / 1024 / 1024).toFixed(1)} MB</span> : null}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-10 text-muted-foreground">
                      <p>未找到媒体资源</p>
                    </div>
                  )}
                </TabsContent>
                {/* 题目组选择 */}
                <TabsContent value="question-group" className="space-y-4">
                  <div className="flex items-center gap-2">
                    <Input
                      placeholder="搜索题目组..."
                      value={questionGroupSearchTerm}
                      onChange={e => setQuestionGroupSearchTerm(e.target.value)}
                      className="flex-1"
                    />
                    <Button 
                      variant="secondary"
                      size="sm"
                      onClick={() => loadQuestionGroups(0, questionGroupSearchTerm)}
                    >
                      搜索
                    </Button>
                  </div>
                  {isLoadingQuestionGroups ? (
                    <div className="flex justify-center items-center py-6">
                      <Loader2 className="h-6 w-6 animate-spin text-primary" />
                      <span className="ml-2">加载题目组中...</span>
                    </div>
                  ) : questionGroups.length > 0 ? (
                    <div className="grid grid-cols-1 gap-2 max-h-[320px] overflow-y-auto p-1">
                      {questionGroups.map(group => (
                        <div
                          key={group.id}
                          className={`rounded-md p-3 cursor-pointer transition-colors ${
                            selectedQuestionGroup?.id === group.id 
                              ? 'bg-primary/10 border-primary border' 
                              : 'border hover:bg-accent/50'
                          }`}
                          onClick={() => handleSelectQuestionGroup(group)}
                        >
                          <div className="flex flex-col">
                            <div className="font-medium">{group.name}</div>
                            {group.questionCount ? (
                              <div className="text-xs text-muted-foreground mt-1">
                                {group.questionCount} 题
                              </div>
                            ) : null}
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-10 text-muted-foreground">
                      <p>未找到题目组</p>
                    </div>
                  )}
                </TabsContent>
              </Tabs>
              {/* 已选择资源显示 */}
              {(selectedMedia || selectedQuestionGroup) && (
                <div className="bg-muted/50 p-4 rounded-md border">
                  <div className="flex justify-between items-center">
                    <h4 className="font-medium">已选择资源</h4>
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      className="h-8 px-2 text-muted-foreground hover:text-foreground"
                      onClick={() => {
                        setSelectedMedia(null);
                        setSelectedQuestionGroup(null);
                        setFormData(prev => ({ ...prev, resourceType: 'NONE', resourceId: undefined }));
                      }}
                    >
                      清除选择
                    </Button>
                  </div>
                  <div className="mt-2">
                    {selectedMedia && (
                      <div className="text-sm">
                        <span className="font-medium">{selectedMedia.title}</span>
                        <p className="text-xs text-muted-foreground">
                          类型: {selectedMedia.type.toLowerCase().split('/')[0] || '未知'}
                        </p>
                      </div>
                    )}
                    {selectedQuestionGroup && (
                      <div className="text-sm">
                        <span className="font-medium">{selectedQuestionGroup.name}</span>
                        <p className="text-xs text-muted-foreground">
                          {selectedQuestionGroup.questionCount || 0}题
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
        <div className="flex flex-col-reverse sm:flex-row sm:justify-end gap-2 px-6 py-4 border-t">
          <Button 
            variant="outline" 
            onClick={() => onOpenChange(false)}
            disabled={isSubmitting}
          >
            取消
          </Button>
          <Button 
            onClick={handleSubmit}
            disabled={isSubmitting}
          >
            {isSubmitting ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                创建中...
              </>
            ) : "创建小节"}
          </Button>
        </div>
      </SheetContent>
    </Sheet>
  );
}
</file>

<file path="front/src/components/dashboard/sections/section-edit-drawer.tsx">
'use client';
import { useState, useEffect } from 'react';
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetDescription, SheetFooter } from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Separator } from '@/components/ui/separator';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { toast } from 'sonner';
import { 
  ChevronRight, 
  Info, 
  Loader2, 
  Save, 
  Search, 
  FileText, 
  Video, 
  Headphones, 
  FileCode, 
  BrainCircuit,
  Clock,
  X,
  CheckCircle,
  AlertCircle,
  Lock,
  File,
  Trash2
} from 'lucide-react';
import { Section, ChapterAccessType } from '@/types/course';
import { sectionService, mediaService, questionGroupService } from '@/services';
import { MediaVO } from '@/services/media-service';
import { QuestionGroup } from '@/types/question';
// 访问类型选项
const accessTypes = [
  { value: ChapterAccessType.FREE_TRIAL, label: '免费试看', description: '学习者可以免费访问' },
  { value: ChapterAccessType.PAID_ONLY, label: '付费访问', description: '学习者需购买课程后才能访问' }
];
// 内容类型
interface ContentType {
  value: string;
  label: string;
  icon: React.ReactNode;
}
// 扩展题目组类型
interface EnhancedQuestionGroup extends QuestionGroup {
  title?: string; // 用于兼容UI显示
}
// 内容类型选项
const contentTypes: ContentType[] = [
  { value: 'video', label: '视频', icon: <Video className="h-5 w-5" /> },
  { value: 'document', label: '文档', icon: <FileText className="h-5 w-5" /> },
  { value: 'audio', label: '音频', icon: <Headphones className="h-5 w-5" /> },
  { value: 'text', label: '文本', icon: <FileCode className="h-5 w-5" /> }
];
// 小节表单数据类型
interface SectionFormData {
  title: string;
  description: string;
  contentType: string;
  accessType: ChapterAccessType;
  estimatedMinutes: number;
  resourceType: 'MEDIA' | 'QUESTION_GROUP' | 'NONE';
  resourceId?: number;
}
interface SectionEditDrawerProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  courseId: number;
  chapterId: number;
  section: Section;
  onSuccess?: () => void;
  onDelete?: () => void;
}
export function SectionEditDrawer({
  open,
  onOpenChange,
  courseId,
  chapterId,
  section,
  onSuccess,
  onDelete
}: SectionEditDrawerProps) {
  // 表单状态
  const [formData, setFormData] = useState<SectionFormData>({
    title: '',
    description: '',
    contentType: 'video',
    accessType: ChapterAccessType.PAID_ONLY,
    estimatedMinutes: 30,
    resourceType: 'NONE'
  });
  // 资源选择和加载状态
  const [selectedMedia, setSelectedMedia] = useState<MediaVO | null>(null);
  const [selectedQuestionGroup, setSelectedQuestionGroup] = useState<EnhancedQuestionGroup | null>(null);
  const [activeTab, setActiveTab] = useState<string>('media');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  // 媒体资源状态
  const [mediaList, setMediaList] = useState<MediaVO[]>([]);
  const [isLoadingMedia, setIsLoadingMedia] = useState(false);
  const [mediaSearchTerm, setMediaSearchTerm] = useState('');
  const [mediaPage, setMediaPage] = useState(0);
  const [mediaTotalPages, setMediaTotalPages] = useState(0);
  const [mediaType, setMediaType] = useState<string>('all');
  // 题目组状态
  const [questionGroups, setQuestionGroups] = useState<EnhancedQuestionGroup[]>([]);
  const [isLoadingQuestionGroups, setIsLoadingQuestionGroups] = useState(false);
  const [questionGroupSearchTerm, setQuestionGroupSearchTerm] = useState('');
  const [questionGroupPage, setQuestionGroupPage] = useState(0);
  const [questionGroupTotalPages, setQuestionGroupTotalPages] = useState(0);
  // 初始化表单数据
  useEffect(() => {
    if (section && open) {
      // 设置基本表单数据
      setFormData({
        title: section.title,
        description: section.description || '',
        contentType: section.contentType,
        accessType: section.accessType !== undefined ? section.accessType : ChapterAccessType.PAID_ONLY,
        estimatedMinutes: section.estimatedMinutes || 30,
        resourceType: section.resourceTypeDiscriminator === 'MEDIA' 
          ? 'MEDIA' 
          : section.resourceTypeDiscriminator === 'QUESTION_GROUP' 
            ? 'QUESTION_GROUP' 
            : 'NONE',
        resourceId: section.mediaId || section.questionGroupId
      });
      // 加载已绑定资源
      loadCurrentResources();
    }
  }, [section, open]);
  // 加载当前小节的资源
  const loadCurrentResources = async () => {
    if (!section) return;
    // 如果有媒体资源
    if (section.resourceTypeDiscriminator === 'MEDIA' && section.mediaId) {
      try {
        setIsLoadingMedia(true);
        const result = await mediaService.getMediaInfo(section.mediaId);
        if (result && result.data) {
          setSelectedMedia(result.data);
          setActiveTab('media');
        }
      } catch (error) {
        console.error('加载媒体资源失败:', error);
      } finally {
        setIsLoadingMedia(false);
      }
    }
    // 如果有题目组
    else if (section.resourceTypeDiscriminator === 'QUESTION_GROUP' && section.questionGroupId) {
      try {
        setIsLoadingQuestionGroups(true);
        const group = await questionGroupService.getQuestionGroupById(section.questionGroupId);
        if (group) {
          // 转换为EnhancedQuestionGroup
          const enhancedGroup: EnhancedQuestionGroup = {
            ...group,
            title: group.name // 添加title属性以兼容UI
          };
          setSelectedQuestionGroup(enhancedGroup);
          setActiveTab('question-group');
        }
      } catch (error) {
        console.error('加载题目组失败:', error);
      } finally {
        setIsLoadingQuestionGroups(false);
      }
    }
  };
  // 加载媒体资源
  const loadMediaResources = async (page = 0, searchTerm = '', type = 'all') => {
    try {
      setIsLoadingMedia(true);
      const params: any = {
        page,
        size: 10,
      };
      if (searchTerm) {
        params.keyword = searchTerm;
      }
      if (type !== 'all') {
        params.type = type.toUpperCase();
      }
      const response = await mediaService.getMediaList(params);
      if (response && response.data) {
        setMediaList(response.data.content);
        setMediaTotalPages(response.data.totalPages);
      }
    } catch (error) {
      console.error('加载媒体资源失败:', error);
      toast.error('加载媒体资源失败');
    } finally {
      setIsLoadingMedia(false);
    }
  };
  // 加载题目组
  const loadQuestionGroups = async (page = 0, searchTerm = '') => {
    try {
      setIsLoadingQuestionGroups(true);
      const params: any = {
        page,
        pageSize: 10,
      };
      if (searchTerm) {
        params.name = searchTerm;
      }
      const response = await questionGroupService.getQuestionGroupList(params);
      if (response) {
        // 转换后端返回的QuestionGroup为EnhancedQuestionGroup
        const enhancedGroups: EnhancedQuestionGroup[] = response.content.map(group => ({
          ...group,
          title: group.name // 添加title属性以兼容UI
        }));
        setQuestionGroups(enhancedGroups);
        setQuestionGroupTotalPages(response.totalPages);
      }
    } catch (error) {
      console.error('加载题目组失败:', error);
      toast.error('加载题目组失败');
    } finally {
      setIsLoadingQuestionGroups(false);
    }
  };
  // 处理表单字段变更
  const handleChange = (name: keyof SectionFormData, value: any) => {
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  // 选择媒体资源
  const handleSelectMedia = (media: MediaVO) => {
    setSelectedMedia(media);
    setFormData(prev => ({
      ...prev,
      resourceType: 'MEDIA',
      resourceId: media.id,
      // 根据媒体类型设置内容类型
      contentType: media.type?.toLowerCase().includes('video') 
        ? 'video' 
        : media.type?.toLowerCase().includes('audio')
          ? 'audio'
          : media.type?.toLowerCase().includes('document') || media.type?.toLowerCase().includes('pdf')
            ? 'document'
            : 'text'
    }));
  };
  // 选择题目组
  const handleSelectQuestionGroup = (group: EnhancedQuestionGroup) => {
    setSelectedQuestionGroup(group);
    setFormData(prev => ({
      ...prev,
      resourceType: 'QUESTION_GROUP',
      resourceId: group.id,
      contentType: 'text'
    }));
  };
  // 处理表单提交
  const handleSubmit = async () => {
    try {
      setIsSubmitting(true);
      setError(null);
      // 验证表单
      if (!formData.title) {
        setError('小节标题不能为空');
        return;
      }
      // 创建小节更新数据
      const sectionData = {
        title: formData.title,
        description: formData.description,
        contentType: formData.contentType,
        accessType: formData.accessType,
        estimatedMinutes: formData.estimatedMinutes,
        chapterId: chapterId
      };
      // 更新小节基本信息
      await sectionService.updateSection(section.id, sectionData);
      // 处理资源绑定
      if (formData.resourceType === 'MEDIA' && formData.resourceId) {
        // 先解除已有绑定，再绑定新资源
        if (section.resourceTypeDiscriminator && section.resourceTypeDiscriminator !== 'MEDIA') {
          // 如果原来有题目组，先移除
          if (section.resourceTypeDiscriminator === 'QUESTION_GROUP') {
            await sectionService.removeQuestionGroup(section.id);
          }
        }
        await sectionService.setMediaResource(
          section.id, 
          formData.resourceId,
          'primary'
        );
      } else if (formData.resourceType === 'QUESTION_GROUP' && formData.resourceId) {
        // 先解除已有绑定，再绑定新资源
        if (section.resourceTypeDiscriminator && section.resourceTypeDiscriminator !== 'QUESTION_GROUP') {
          // 如果原来有媒体资源，先移除
          if (section.resourceTypeDiscriminator === 'MEDIA') {
            await sectionService.removeMediaResource(section.id);
          }
        }
        await sectionService.setQuestionGroup(
          section.id,
          formData.resourceId,
          { 
            randomOrder: false,
            orderByDifficulty: false,
            showAnalysis: true
          }
        );
      } else if (formData.resourceType === 'NONE' && section.resourceTypeDiscriminator) {
        // 如果选择无资源，但原来有资源，则清除资源
        if (section.resourceTypeDiscriminator === 'MEDIA') {
          await sectionService.removeMediaResource(section.id);
        } else if (section.resourceTypeDiscriminator === 'QUESTION_GROUP') {
          await sectionService.removeQuestionGroup(section.id);
        }
      }
      // 成功提示
      toast.success('小节更新成功', {
        description: '小节信息已成功保存'
      });
      // 关闭抽屉
      onOpenChange(false);
      // 调用成功回调
      if (onSuccess) {
        onSuccess();
      }
    } catch (error: any) {
      console.error('更新小节失败:', error);
      setError(error.message || '更新小节失败，请稍后重试');
      toast.error('更新小节失败', {
        description: error.message || '请稍后重试'
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  // 根据激活的标签初始加载资源
  useEffect(() => {
    if (open) {
      if (activeTab === 'media') {
        loadMediaResources(0, mediaSearchTerm, mediaType);
      } else if (activeTab === 'question-group') {
        loadQuestionGroups(0, questionGroupSearchTerm);
      }
    }
  }, [open, activeTab]);
  // 处理删除小节
  const handleDelete = async () => {
    try {
      setIsSubmitting(true);
      setError(null);
      const confirmed = window.confirm(`确定要删除小节"${section.title}"吗？此操作不可恢复。`);
      if (confirmed) {
        await sectionService.deleteSection(section.id);
        toast.success('小节已删除', {
          description: '小节已成功从章节中移除'
        });
        // 关闭抽屉
        onOpenChange(false);
        // 调用删除成功回调
        if (onDelete) {
          onDelete();
        } else if (onSuccess) {
          onSuccess();
        }
      }
    } catch (error: any) {
      console.error('删除小节失败:', error);
      setError(error.message || '删除小节失败，请稍后重试');
      toast.error('删除小节失败', {
        description: error.message || '请稍后重试'
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  return (
    <Sheet open={open} onOpenChange={onOpenChange}>
      <SheetContent className="w-full sm:max-w-md md:max-w-xl lg:max-w-2xl overflow-y-auto p-0">
        <div className="p-6 space-y-6">
          <div className="flex justify-between items-start">
            <SheetHeader className="mb-2 text-left">
              <SheetTitle className="text-xl">编辑小节</SheetTitle>
              <SheetDescription>
                修改小节信息和关联资源
              </SheetDescription>
            </SheetHeader>
            <Button
              variant="destructive"
              size="sm"
              onClick={handleDelete}
              disabled={isSubmitting}
              className="mt-1"
            >
              删除小节
            </Button>
          </div>
          {error && (
            <Alert variant="destructive" className="mb-5">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          <div className="space-y-8">
            {/* 基本信息 */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium">基本信息</h3>
              <div className="space-y-5">
                <div className="space-y-2">
                  <Label htmlFor="title">小节标题 *</Label>
                  <Input 
                    id="title" 
                    value={formData.title} 
                    onChange={e => handleChange('title', e.target.value)}
                    placeholder="输入小节标题"
                    className="w-full"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="description">小节描述</Label>
                  <Textarea 
                    id="description" 
                    value={formData.description} 
                    onChange={e => handleChange('description', e.target.value)}
                    placeholder="描述小节内容（可选）"
                    rows={3}
                    className="w-full resize-none"
                  />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
                  <div className="space-y-3">
                    <Label>访问权限</Label>
                    <RadioGroup 
                      value={formData.accessType.toString()} 
                      onValueChange={value => handleChange('accessType', parseInt(value))}
                      className="space-y-3"
                    >
                      {accessTypes.map(type => (
                        <div key={type.value} className="flex items-center space-x-2">
                          <RadioGroupItem 
                            value={type.value.toString()} 
                            id={`access-type-${type.value}`} 
                          />
                          <Label htmlFor={`access-type-${type.value}`} className="font-normal">
                            {type.label}
                            <p className="text-xs text-muted-foreground">{type.description}</p>
                          </Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </div>
                  <div className="space-y-3">
                    <Label htmlFor="estimatedMinutes">预计学习时间（分钟）</Label>
                    <Input 
                      id="estimatedMinutes" 
                      type="number" 
                      value={formData.estimatedMinutes} 
                      onChange={e => handleChange('estimatedMinutes', parseInt(e.target.value) || 0)}
                      min={1}
                      max={1000}
                      className="w-full"
                    />
                  </div>
                </div>
              </div>
            </div>
            <Separator />
            {/* 资源选择 */}
            <div className="space-y-5">
              <h3 className="text-lg font-medium">关联资源</h3>
              <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                <TabsList className="grid w-full grid-cols-2 mb-4">
                  <TabsTrigger value="media">媒体资源</TabsTrigger>
                  <TabsTrigger value="question-group">题目组</TabsTrigger>
                </TabsList>
                {/* 媒体资源选择 */}
                <TabsContent value="media" className="space-y-4">
                  <div className="flex items-center gap-2">
                    <Input
                      placeholder="搜索媒体资源..."
                      value={mediaSearchTerm}
                      onChange={e => setMediaSearchTerm(e.target.value)}
                      className="flex-1"
                    />
                    <Button 
                      variant="secondary"
                      size="sm"
                      onClick={() => loadMediaResources(0, mediaSearchTerm, mediaType)}
                    >
                      搜索
                    </Button>
                  </div>
                  {isLoadingMedia ? (
                    <div className="flex justify-center items-center py-6">
                      <Loader2 className="h-6 w-6 animate-spin text-primary" />
                      <span className="ml-2">加载媒体资源中...</span>
                    </div>
                  ) : mediaList.length > 0 ? (
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 max-h-[320px] overflow-y-auto p-1">
                      {mediaList.map(media => (
                        <div
                          key={media.id}
                          className={`rounded-md p-3 cursor-pointer transition-colors ${
                            selectedMedia?.id === media.id 
                              ? 'bg-primary/10 border-primary border' 
                              : 'border hover:bg-accent/50'
                          }`}
                          onClick={() => handleSelectMedia(media)}
                        >
                          <div className="flex flex-col">
                            <div className="font-medium truncate">{media.title}</div>
                            <div className="text-xs text-muted-foreground mt-1 flex justify-between">
                              <span>{media.type?.split('/')[0] || '未知类型'}</span>
                              {media.size ? <span>{(media.size / 1024 / 1024).toFixed(1)} MB</span> : null}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-10 text-muted-foreground">
                      <p>未找到媒体资源</p>
                    </div>
                  )}
                </TabsContent>
                {/* 题目组选择 */}
                <TabsContent value="question-group" className="space-y-4">
                  <div className="flex items-center gap-2">
                    <Input
                      placeholder="搜索题目组..."
                      value={questionGroupSearchTerm}
                      onChange={e => setQuestionGroupSearchTerm(e.target.value)}
                      className="flex-1"
                    />
                    <Button 
                      variant="secondary"
                      size="sm"
                      onClick={() => loadQuestionGroups(0, questionGroupSearchTerm)}
                    >
                      搜索
                    </Button>
                  </div>
                  {isLoadingQuestionGroups ? (
                    <div className="flex justify-center items-center py-6">
                      <Loader2 className="h-6 w-6 animate-spin text-primary" />
                      <span className="ml-2">加载题目组中...</span>
                    </div>
                  ) : questionGroups.length > 0 ? (
                    <div className="grid grid-cols-1 gap-2 max-h-[320px] overflow-y-auto p-1">
                      {questionGroups.map(group => (
                        <div
                          key={group.id}
                          className={`rounded-md p-3 cursor-pointer transition-colors ${
                            selectedQuestionGroup?.id === group.id 
                              ? 'bg-primary/10 border-primary border' 
                              : 'border hover:bg-accent/50'
                          }`}
                          onClick={() => handleSelectQuestionGroup(group)}
                        >
                          <div className="flex flex-col">
                            <div className="font-medium">{group.name}</div>
                            {group.questionCount ? (
                              <div className="text-xs text-muted-foreground mt-1">
                                {group.questionCount} 题
                              </div>
                            ) : null}
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-10 text-muted-foreground">
                      <p>未找到题目组</p>
                    </div>
                  )}
                </TabsContent>
              </Tabs>
              {/* 已选择资源显示 */}
              {(selectedMedia || selectedQuestionGroup) && (
                <div className="bg-muted/50 p-4 rounded-md border">
                  <div className="flex justify-between items-center">
                    <h4 className="font-medium">已选择资源</h4>
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      className="h-8 px-2 text-muted-foreground hover:text-foreground"
                      onClick={() => {
                        setSelectedMedia(null);
                        setSelectedQuestionGroup(null);
                        setFormData(prev => ({ ...prev, resourceType: 'NONE', resourceId: undefined }));
                      }}
                    >
                      清除选择
                    </Button>
                  </div>
                  <div className="mt-2">
                    {selectedMedia && (
                      <div className="text-sm">
                        <span className="font-medium">{selectedMedia.title}</span>
                        <p className="text-xs text-muted-foreground">
                          类型: {selectedMedia.type?.split('/')[0] || '未知'}
                        </p>
                      </div>
                    )}
                    {selectedQuestionGroup && (
                      <div className="text-sm">
                        <span className="font-medium">{selectedQuestionGroup.name}</span>
                        <p className="text-xs text-muted-foreground">
                          {selectedQuestionGroup.questionCount || 0}题
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
        <div className="flex flex-col-reverse sm:flex-row sm:justify-end gap-2 px-6 py-4 border-t">
          <Button 
            variant="outline" 
            onClick={() => onOpenChange(false)}
            disabled={isSubmitting}
          >
            取消
          </Button>
          <Button 
            onClick={handleSubmit}
            disabled={isSubmitting}
          >
            {isSubmitting ? (
              <>
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                保存中...
              </>
            ) : "保存修改"}
          </Button>
        </div>
      </SheetContent>
    </Sheet>
  );
}
</file>

<file path="front/src/components/dashboard/sections/section-form.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { toast } from 'sonner';
import { 
  Save, 
  Loader2, 
  Video, 
  FileText, 
  Headphones,
  Image as ImageIcon,
  FileCode,
  Layers,
  Info,
  Lock,
  Clock,
  Settings,
  File,
  HelpCircle,
  Plus
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Empty } from '@/components/ui/empty';
import { Section, ChapterAccessType } from '@/types/course';
import sectionService from '@/services/section';
// 简化版本：定义本地类型
interface MediaResource {
  id: number;
  filename: string;
  fileType: string;
  fileSize: number;
}
interface QuestionGroup {
  id: number;
  title: string;
  questionCount?: number;
}
// 扩展 Section 类型，确保它包含我们需要的属性
interface ExtendedSection extends Section {
  // 媒体资源相关
  mediaResource?: MediaResource | null;
  mediaResourceName?: string;
  mediaResourceType?: string;
  // 题组相关
  questionGroup?: QuestionGroup | null;
  questionGroupName?: string;
  questionCount?: number;
}
// 小节表单验证Schema
const formSchema = z.object({
  title: z
    .string()
    .min(1, { message: '标题不能为空' })
    .max(200, { message: '标题不能超过200个字符' }),
  description: z
    .string()
    .max(1000, { message: '描述不能超过1000个字符' })
    .optional(),
  contentType: z
    .string()
    .min(1, { message: '请选择内容类型' }),
  accessType: z
    .number()
    .optional(),
  estimatedMinutes: z
    .number()
    .optional()
    .nullable()
    .transform(val => val === null ? undefined : val),
  resourceType: z
    .enum(['media', 'questionGroup', 'none'])
    .default('none'),
  resourceId: z
    .number()
    .optional()
    .nullable()
});
// 内容类型选项
export const contentTypes = [
  { value: 'video', label: '视频', icon: <Video className="h-5 w-5" />, description: '视频课程内容' },
  { value: 'document', label: '文档', icon: <FileText className="h-5 w-5" />, description: '文档课程内容' },
  { value: 'audio', label: '音频', icon: <Headphones className="h-5 w-5" />, description: '音频课程内容' },
  { value: 'text', label: '文本', icon: <FileCode className="h-5 w-5" />, description: '纯文本课程内容' },
  { value: 'image', label: '图片', icon: <ImageIcon className="h-5 w-5" />, description: '图片课程内容' },
  { value: 'mixed', label: '混合', icon: <Layers className="h-5 w-5" />, description: '多种类型的混合内容' },
];
// 访问类型选项
export const accessTypes = [
  { value: ChapterAccessType.FREE_TRIAL, label: '免费试看', description: '学习者可以免费访问' },
  { value: ChapterAccessType.PAID_ONLY, label: '付费访问', description: '学习者需购买课程后才能访问' }
];
export type SectionFormValues = z.infer<typeof formSchema>;
interface SectionFormProps {
  defaultValues?: Partial<SectionFormValues>;
  section?: ExtendedSection;
  chapterId?: number;
  isSubmitting?: boolean;
  onSubmit: (values: SectionFormValues) => void;
  onCancel: () => void;
  submitLabel?: string;
  submitLoadingLabel?: string;
  error?: string | null;
  mode?: 'create' | 'edit';
}
export function SectionForm({
  defaultValues = {
    title: '',
    description: '',
    contentType: 'video',
    resourceType: 'none',
    resourceId: null
  },
  section,
  chapterId,
  isSubmitting = false,
  onSubmit,
  onCancel,
  submitLabel = '保存',
  submitLoadingLabel = '保存中...',
  error = null,
  mode = 'create'
}: SectionFormProps) {
  const form = useForm<SectionFormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: section ? {
      ...defaultValues,
      title: section.title,
      description: section.description || '',
      contentType: section.contentType || 'video',
      accessType: section.accessType,
      estimatedMinutes: section.estimatedMinutes,
      resourceType: section.mediaResource ? 'media' : 
                   section.questionGroup ? 'questionGroup' : 'none',
      resourceId: section.mediaResource?.id || section.questionGroup?.id || null
    } : defaultValues
  });
  const [selectedMedia, setSelectedMedia] = useState<MediaResource | null>(null);
  const [selectedQuestionGroup, setSelectedQuestionGroup] = useState<QuestionGroup | null>(null);
  const [isLoadingResource, setIsLoadingResource] = useState(false);
  // 资源类型
  const resourceType = form.watch('resourceType');
  // 在编辑模式下，加载已有的资源数据
  useEffect(() => {
    if (mode === 'edit' && section) {
      const loadExistingResource = async () => {
        setIsLoadingResource(true);
        try {
          // 加载媒体资源
          if (section.mediaResource) {
            setSelectedMedia(section.mediaResource);
            form.setValue('resourceType', 'media');
            form.setValue('resourceId', section.mediaResource.id);
          } 
          // 如果只有基本信息
          else if (section.mediaResourceName) {
            // 简化版：直接使用基本信息
            setSelectedMedia({
              id: section.id, // 使用小节ID作为临时ID
              filename: section.mediaResourceName || '未命名媒体',
              fileType: section.mediaResourceType || '未知',
              fileSize: 0 // 默认值
            });
            form.setValue('resourceType', 'media');
            form.setValue('resourceId', section.id);
          } 
          // 加载题组资源
          else if (section.questionGroup) {
            setSelectedQuestionGroup(section.questionGroup);
            form.setValue('resourceType', 'questionGroup');
            form.setValue('resourceId', section.questionGroup.id);
          }
          // 如果只有基本信息
          else if (section.questionGroupName) {
            // 简化版：直接使用基本信息
            setSelectedQuestionGroup({
              id: section.id, // 使用小节ID作为临时ID
              title: section.questionGroupName || '未命名题组',
              questionCount: section.questionCount || 0
            });
            form.setValue('resourceType', 'questionGroup');
            form.setValue('resourceId', section.id);
          }
        } catch (error) {
          console.error("加载资源失败:", error);
          toast.error("加载资源失败", {
            description: "无法获取小节相关资源"
          });
        } finally {
          setIsLoadingResource(false);
        }
      };
      loadExistingResource();
    }
  }, [section, mode, form]);
  const handleSubmit = async (values: SectionFormValues) => {
    try {
      await onSubmit(values);
    } catch (err: any) {
      console.error('表单提交错误:', err);
      toast.error('保存失败', {
        description: err.message || '请稍后重试'
      });
    }
  };
  // 处理媒体选择
  const handleMediaSelected = (media: MediaResource) => {
    setSelectedMedia(media);
    form.setValue('resourceId', media.id);
  };
  // 处理题组选择
  const handleQuestionGroupSelected = (questionGroup: QuestionGroup) => {
    setSelectedQuestionGroup(questionGroup);
    form.setValue('resourceId', questionGroup.id);
  };
  // 移除资源
  const handleRemoveResource = () => {
    if (resourceType === 'media') {
      setSelectedMedia(null);
    } else if (resourceType === 'questionGroup') {
      setSelectedQuestionGroup(null);
    }
    form.setValue('resourceId', null);
  };
  // 简化版的媒体选择器组件
  const MediaSelector = ({ onSelect }: { onSelect: (media: MediaResource) => void }) => {
    return (
      <div className="border rounded-md p-6 text-center">
        <Empty
          title="选择媒体资源"
          description="请从媒体库中选择一个资源"
          action={
            <Button onClick={() => {
              // 示例：选择一个模拟媒体资源
              onSelect({
                id: Math.floor(Math.random() * 1000) + 1,
                filename: '示例文件.mp4',
                fileType: 'video/mp4',
                fileSize: 1024 * 1024 * 5 // 5 MB
              });
            }}>
              <Plus className="h-4 w-4 mr-2" />
              选择媒体
            </Button>
          }
        />
      </div>
    );
  };
  // 简化版的题组选择器组件
  const QuestionGroupSelector = ({ onSelect }: { onSelect: (questionGroup: QuestionGroup) => void }) => {
    return (
      <div className="border rounded-md p-6 text-center">
        <Empty
          title="选择题目组"
          description="请从题库中选择一个题目组"
          action={
            <Button onClick={() => {
              // 示例：选择一个模拟题目组
              onSelect({
                id: Math.floor(Math.random() * 1000) + 1,
                title: '示例题目组',
                questionCount: 5
              });
            }}>
              <Plus className="h-4 w-4 mr-2" />
              选择题目组
            </Button>
          }
        />
      </div>
    );
  };
  // 渲染资源选择器
  const renderResourceSelector = () => {
    if (resourceType === 'none') {
      return (
        <div className="border rounded-md p-6 flex flex-col items-center justify-center text-center space-y-2">
          <HelpCircle className="h-8 w-8 text-muted-foreground" />
          <p className="text-sm text-muted-foreground">请先选择资源类型</p>
        </div>
      );
    }
    if (resourceType === 'media') {
      return (
        <div className="space-y-4">
          {selectedMedia ? (
            <div className="border rounded-md p-4 flex justify-between items-center">
              <div className="flex items-center space-x-4">
                <File className="h-8 w-8 text-primary" />
                <div>
                  <p className="font-medium">{selectedMedia.filename}</p>
                  <p className="text-sm text-muted-foreground">
                    {selectedMedia.fileType} · {(selectedMedia.fileSize / 1024 / 1024).toFixed(2)} MB
                  </p>
                </div>
              </div>
              <Button variant="ghost" size="sm" onClick={handleRemoveResource}>
                更换
              </Button>
            </div>
          ) : (
            <MediaSelector onSelect={handleMediaSelected} />
          )}
        </div>
      );
    }
    if (resourceType === 'questionGroup') {
      return (
        <div className="space-y-4">
          {selectedQuestionGroup ? (
            <div className="border rounded-md p-4 flex justify-between items-center">
              <div className="flex items-center space-x-4">
                <HelpCircle className="h-8 w-8 text-primary" />
                <div>
                  <p className="font-medium">{selectedQuestionGroup.title}</p>
                  <p className="text-sm text-muted-foreground">
                    题目数量: {selectedQuestionGroup.questionCount || '未知'}
                  </p>
                </div>
              </div>
              <Button variant="ghost" size="sm" onClick={handleRemoveResource}>
                更换
              </Button>
            </div>
          ) : (
            <QuestionGroupSelector onSelect={handleQuestionGroupSelected} />
          )}
        </div>
      );
    }
    return null;
  };
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(handleSubmit)}>
        <Card className="w-full">
          <CardHeader>
            <CardTitle>{mode === 'create' ? '创建新小节' : '编辑小节'}</CardTitle>
            <CardDescription>
              {mode === 'create' 
                ? '添加新的小节到课程章节中' 
                : '修改现有小节的信息和内容'}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* 错误提示 */}
            {error && (
              <Alert variant="destructive">
                <Info className="h-4 w-4" />
                <AlertTitle>提交错误</AlertTitle>
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
            {/* 基本信息部分 */}
            <div className="space-y-6">
              <h3 className="text-lg font-medium flex items-center gap-2">
                <Settings className="h-5 w-5" />
                基本信息
              </h3>
              {/* 标题 */}
              <FormField
                control={form.control}
                name="title"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>小节标题 *</FormLabel>
                    <FormControl>
                      <Input placeholder="输入小节标题" {...field} />
                    </FormControl>
                    <FormDescription>
                      简洁清晰的标题能帮助学习者理解小节内容
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {/* 描述 */}
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>小节描述</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="简要描述小节内容（可选）" 
                        className="resize-none min-h-[100px]"
                        {...field} 
                      />
                    </FormControl>
                    <FormDescription>
                      简短描述本小节的内容和学习目标
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {/* 内容类型 */}
              <FormField
                control={form.control}
                name="contentType"
                render={({ field }) => (
                  <FormItem className="space-y-4">
                    <FormLabel>内容类型 *</FormLabel>
                    <FormControl>
                      <RadioGroup
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                        className="grid grid-cols-2 md:grid-cols-3 gap-4"
                      >
                        {contentTypes.map((type) => (
                          <div key={type.value}>
                            <RadioGroupItem
                              value={type.value}
                              id={`content-type-${type.value}`}
                              className="peer sr-only"
                              checked={field.value === type.value}
                            />
                            <Label
                              htmlFor={`content-type-${type.value}`}
                              className="flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary cursor-pointer"
                            >
                              <div className="flex flex-col items-center space-y-2">
                                <div className="p-2 bg-primary/10 rounded-md">
                                  {type.icon}
                                </div>
                                <div className="text-center space-y-1">
                                  <p className="text-sm font-medium">{type.label}</p>
                                  <p className="text-xs text-muted-foreground">{type.description}</p>
                                </div>
                              </div>
                            </Label>
                          </div>
                        ))}
                      </RadioGroup>
                    </FormControl>
                    <FormDescription>
                      选择小节的主要内容类型
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* 访问类型 */}
                <FormField
                  control={form.control}
                  name="accessType"
                  render={({ field }) => (
                    <FormItem className="space-y-4">
                      <FormLabel className="flex items-center gap-2">
                        <Lock className="h-4 w-4" />
                        访问权限
                      </FormLabel>
                      <FormControl>
                        <RadioGroup
                          onValueChange={(value) => field.onChange(Number(value))}
                          defaultValue={field.value?.toString()}
                          className="grid grid-cols-1 gap-4"
                        >
                          {accessTypes.map((type) => (
                            <div key={type.value}>
                              <RadioGroupItem
                                value={type.value.toString()}
                                id={`access-type-${type.value}`}
                                className="peer sr-only"
                                checked={field.value === type.value}
                              />
                              <Label
                                htmlFor={`access-type-${type.value}`}
                                className="flex items-center space-x-3 rounded-md border-2 border-muted bg-popover p-4 hover:bg-accent hover:text-accent-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary cursor-pointer"
                              >
                                <div className="flex-1">
                                  <div className="text-sm font-medium">{type.label}</div>
                                  <div className="text-xs text-muted-foreground">{type.description}</div>
                                </div>
                              </Label>
                            </div>
                          ))}
                        </RadioGroup>
                      </FormControl>
                      <FormDescription>
                        设置学习者访问此小节的权限要求
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                {/* 学习时长 */}
                <FormField
                  control={form.control}
                  name="estimatedMinutes"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="flex items-center gap-2">
                        <Clock className="h-4 w-4" />
                        预计学习时间（分钟）
                      </FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          placeholder="例如：30" 
                          min={1}
                          max={999}
                          {...field}
                          onChange={(e) => {
                            const value = e.target.value === '' ? undefined : Number(e.target.value);
                            field.onChange(value);
                          }}
                          value={field.value === undefined ? '' : field.value}
                        />
                      </FormControl>
                      <FormDescription>
                        预计完成本小节学习所需的时间（分钟）
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
            </div>
            {/* 分隔符 */}
            <Separator />
            {/* 资源管理部分 */}
            <div className="space-y-6">
              <h3 className="text-lg font-medium flex items-center gap-2">
                <File className="h-5 w-5" />
                小节资源
              </h3>
              <p className="text-sm text-muted-foreground">
                每个小节可以关联一个资源，可以是媒体文件（视频、音频、文档等）或题目组。
              </p>
              {/* 资源类型选择 */}
              <FormField
                control={form.control}
                name="resourceType"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>资源类型</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="选择资源类型" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="none">不设置资源</SelectItem>
                        <SelectItem value="media">媒体资源</SelectItem>
                        <SelectItem value="questionGroup">题目组</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormDescription>
                      选择要添加到小节的资源类型
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {/* 资源选择器 */}
              {isLoadingResource ? (
                <div className="flex items-center justify-center py-8">
                  <Loader2 className="h-8 w-8 animate-spin text-primary" />
                  <span className="ml-2">加载资源中...</span>
                </div>
              ) : (
                renderResourceSelector()
              )}
            </div>
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button 
              type="button" 
              variant="outline" 
              onClick={onCancel}
              disabled={isSubmitting}
            >
              取消
            </Button>
            <Button 
              type="submit" 
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  {submitLoadingLabel}
                </>
              ) : (
                <>
                  <Save className="mr-2 h-4 w-4" />
                  {submitLabel}
                </>
              )}
            </Button>
          </CardFooter>
        </Card>
      </form>
    </Form>
  );
}
</file>

<file path="front/src/components/dashboard/sections/section-resource-list.tsx">
'use client';
import { useState, useEffect } from 'react';
import { toast } from 'sonner';
import { 
  Plus, 
  Trash2, 
  Video, 
  FileText, 
  Music, 
  Image as ImageIcon, 
  File, 
  Loader2,
  ExternalLink,
  ClipboardList
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Empty } from '@/components/ui/empty';
import { sectionService } from '@/services';
import { Section } from '@/types/course';
// 资源类型映射
const resourceTypes = [
  { value: 'primary', label: '主要资源', description: '课程的主要内容' },
  { value: 'supplementary', label: '补充资源', description: '课程的补充材料' },
  { value: 'homework', label: '作业', description: '学习任务和作业' },
  { value: 'reference', label: '参考资料', description: '扩展阅读和参考材料' },
];
// 媒体类型映射
const mediaTypeIcons = {
  'VIDEO': <Video className="h-5 w-5" />,
  'AUDIO': <Music className="h-5 w-5" />,
  'DOCUMENT': <FileText className="h-5 w-5" />,
  'IMAGE': <ImageIcon className="h-5 w-5" />,
  'OTHER': <File className="h-5 w-5" />,
};
// 资源类型标签颜色
const resourceTypeColors: Record<string, string> = {
  'primary': 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400',
  'supplementary': 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400',
  'homework': 'bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-400',
  'reference': 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400',
};
interface SectionResourceListProps {
  sectionId: number;
  onAddResource?: () => void;
}
export function SectionResourceList({ sectionId, onAddResource }: SectionResourceListProps) {
  const [section, setSection] = useState<Section | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [deleteType, setDeleteType] = useState<'media' | 'questionGroup' | null>(null);
  // 加载小节详情
  const loadSection = async () => {
    try {
      setIsLoading(true);
      setError(null);
      const data = await sectionService.getSectionById(sectionId);
      setSection(data); 
    } catch (err: any) {
      console.error('加载小节详情失败:', err);
      setError(err.message || '无法加载小节详情');
      toast.error('加载小节详情失败', {
        description: err.message || '请稍后重试'
      });
      setSection(null);
    } finally {
      setIsLoading(false);
    }
  };
  // 初始加载
  useEffect(() => {
    if (sectionId) {
      loadSection();
    }
  }, [sectionId]);
  // 打开删除确认对话框
  const handleDeleteClick = (type: 'media' | 'questionGroup') => {
    setDeleteType(type);
    setIsDeleteDialogOpen(true);
  };
  // 确认删除资源
  const handleDeleteConfirm = async () => {
    if (!deleteType) return;
    try {
      setIsDeleting(true);
      if (deleteType === 'media') {
        // 删除媒体资源
        await sectionService.removeMediaResource(sectionId);
        toast.success('媒体资源已删除');
      } else {
        // 删除题目组
        await sectionService.removeQuestionGroup(sectionId);
        toast.success('题目组已删除');
      }
      // 重新加载小节数据
      await loadSection();
      // 关闭对话框
      setIsDeleteDialogOpen(false);
      setDeleteType(null);
    } catch (err: any) {
      console.error('删除失败:', err);
      toast.error('删除失败', {
        description: err.message || '请稍后重试'
      });
    } finally {
      setIsDeleting(false);
    }
  };
  // 获取资源类型信息
  const getResourceTypeInfo = (type: string) => {
    return resourceTypes.find(t => t.value === type) || { value: type, label: type, description: '' };
  };
  // 获取媒体类型图标
  const getMediaTypeIcon = (type: string) => {
    return mediaTypeIcons[type as keyof typeof mediaTypeIcons] || <File className="h-5 w-5" />;
  };
  // 格式化文件大小
  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 B';
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return `${(bytes / Math.pow(1024, i)).toFixed(2)} ${sizes[i]}`;
  };
  // 渲染加载状态
  if (isLoading) {
    return (
      <div className="space-y-3">
        <Skeleton className="h-8 w-full" />
        <Skeleton className="h-24 w-full" />
      </div>
    );
  }
  // 渲染错误状态
  if (error) {
    return (
      <div className="p-4 border border-red-200 rounded-md bg-red-50 text-red-800">
        <p className="font-medium">加载资源失败</p>
        <p className="text-sm">{error}</p>
        <Button variant="outline" size="sm" className="mt-2" onClick={() => loadSection()}>
          重试
        </Button>
      </div>
    );
  }
  // 渲染媒体资源
  const renderMediaResource = () => {
    if (!section || !section.media) return null;
    const media = section.media;
    const resourceTypeInfo = getResourceTypeInfo(section.mediaResourceType || 'primary');
    return (
      <Card key={media.id} className="group relative hover:border-primary/50 transition-colors">
        <CardHeader className="pb-2">
          <div className="flex items-start justify-between">
            <div className="flex items-center gap-2">
              <div className="p-2 rounded-md bg-primary/10">
                {getMediaTypeIcon(media.type || 'OTHER')}
              </div>
              <div>
                <CardTitle className="text-base">{media.title}</CardTitle>
                <CardDescription className="text-xs">
                  {media.type} • {media.size ? formatFileSize(media.size) : '未知大小'}
                </CardDescription>
              </div>
            </div>
            <Badge className={resourceTypeColors[section.mediaResourceType || 'primary']}>
              {resourceTypeInfo.label}
            </Badge>
          </div>
        </CardHeader>
        <CardContent className="pb-2">
          {media.description && (
            <p className="text-sm text-muted-foreground">{media.description}</p>
          )}
        </CardContent>
        <CardFooter className="pt-2 flex justify-between">
          <div>
            {/* 访问URL */}
            {media.accessUrl && (
              <Button variant="outline" size="sm" className="gap-1"
                onClick={() => window.open(media.accessUrl, '_blank')}>
                <ExternalLink className="h-3.5 w-3.5" />
                访问
              </Button>
            )}
          </div>
          <Button 
            variant="ghost" 
            size="sm" 
            className="text-destructive hover:text-destructive gap-1 opacity-0 group-hover:opacity-100"
            onClick={() => handleDeleteClick('media')}
          >
            <Trash2 className="h-3.5 w-3.5" />
            移除
          </Button>
        </CardFooter>
      </Card>
    );
  };
  // 渲染题目组
  const renderQuestionGroup = () => {
    if (!section || !section.questionGroup) return null;
    const questionGroup = section.questionGroup;
    return (
      <Card key={questionGroup.id} className="group relative hover:border-primary/50 transition-colors">
        <CardHeader className="pb-2">
          <div className="flex items-start justify-between">
            <div className="flex items-center gap-2">
              <div className="p-2 rounded-md bg-primary/10">
                <ClipboardList className="h-5 w-5" />
              </div>
              <div>
                <CardTitle className="text-base">{questionGroup.name}</CardTitle>
                <CardDescription className="text-xs">
                  {questionGroup.questionCount || 0} 题
                </CardDescription>
              </div>
            </div>
            <Badge className="bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400">
              题目组
            </Badge>
          </div>
        </CardHeader>
        <CardContent className="pb-2">
          {questionGroup.description && (
            <p className="text-sm text-muted-foreground">{questionGroup.description}</p>
          )}
          <div className="flex flex-wrap gap-2 mt-2">
            {section.randomOrder && (
              <Badge variant="outline" className="text-xs">随机顺序</Badge>
            )}
            {section.orderByDifficulty && (
              <Badge variant="outline" className="text-xs">按难度排序</Badge>
            )}
            {section.showAnalysis && (
              <Badge variant="outline" className="text-xs">显示解析</Badge>
            )}
          </div>
        </CardContent>
        <CardFooter className="pt-2 flex justify-end">
          <Button 
            variant="ghost" 
            size="sm" 
            className="text-destructive hover:text-destructive gap-1 opacity-0 group-hover:opacity-100"
            onClick={() => handleDeleteClick('questionGroup')}
          >
            <Trash2 className="h-3.5 w-3.5" />
            移除
          </Button>
        </CardFooter>
      </Card>
    );
  };
  // 渲染空状态
  const renderEmptyState = () => {
    return (
      <Empty 
        title="暂无资源"
        description="点击添加资源按钮添加媒体资源或题目组到这个小节"
        action={
          <Button onClick={onAddResource}>
            <Plus className="h-4 w-4 mr-2" />
            添加资源
          </Button>
        }
      />
    );
  };
  // 渲染资源内容
  const renderContent = () => {
    if (!section) return renderEmptyState();
    // 检查是否有直接关联的媒体资源
    if (section.resourceTypeDiscriminator === 'MEDIA' && section.media) {
      return renderMediaResource();
    }
    // 检查是否有直接关联的题目组
    if (section.resourceTypeDiscriminator === 'QUESTION_GROUP' && section.questionGroup) {
      return renderQuestionGroup();
    }
    // 如果没有任何资源，显示空状态
    return renderEmptyState();
  };
  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-medium">小节资源</h3>
        <Button onClick={onAddResource} size="sm">
          <Plus className="h-4 w-4 mr-2" />
          添加资源
        </Button>
      </div>
      {renderContent()}
      {/* 删除确认对话框 */}
      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>确认删除</DialogTitle>
            <DialogDescription>
              {deleteType === 'media' ? 
                '确定要移除这个媒体资源吗？此操作无法撤销。' : 
                '确定要移除这个题目组吗？此操作无法撤销。'}
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDeleteDialogOpen(false)}>
              取消
            </Button>
            <Button 
              variant="destructive" 
              onClick={handleDeleteConfirm}
              disabled={isDeleting}
            >
              {isDeleting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              确认删除
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
</file>

<file path="front/src/components/dashboard/sidebar.tsx">
'use client';
import { usePathname } from 'next/navigation';
import Link from 'next/link';
import { UserRole, Role } from '@/types/auth';
import { useAuthStore } from '@/stores/auth-store';
import { useUIStore } from '@/stores/ui-store';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import {
  Home,
  User,
  Users,
  ShieldCheck,
  BookOpen,
  FileText,
  BarChart2,
  Heart,
  ShoppingCart,
  Menu,
  X,
  Building2,
  HardDrive,
  Film,
  Database,
  BookOpen as BookOpenIcon,
  FileQuestion,
  Search,
} from 'lucide-react';
// 侧边栏菜单项
interface MenuItem {
  title: string;
  href: string;
  icon: React.ReactNode;
  roles?: UserRole[];
}
const menuItems: MenuItem[] = [
  {
    title: '仪表盘',
    href: '/dashboard',
    icon: <Home className="w-5 h-5" />,
  },
  {
    title: '个人资料',
    href: '/dashboard/profile',
    icon: <User className="w-5 h-5" />,
  },
  {
    title: '我的收藏',
    href: '/dashboard/favorites',
    icon: <Heart className="w-5 h-5" />,
  },
  {
    title: '我的订单',
    href: '/dashboard/orders',
    icon: <ShoppingCart className="w-5 h-5" />,
  },
  {
    title: '课程搜索',
    href: '/dashboard/course-search',
    icon: <Search className="w-5 h-5" />,
  },
  {
    title: '资源管理',
    href: '/dashboard/media',
    icon: <Film className="w-5 h-5" />,
    roles: [UserRole.INSTITUTION],
  },
  {
    title: '存储配额',
    href: '/dashboard/storage',
    icon: <Database className="w-5 h-5" />,
    roles: [UserRole.INSTITUTION],
  },
  {
    title: '题库管理',
    href: '/dashboard/questions',
    icon: <FileQuestion className="w-5 h-5" />,
    roles: [UserRole.INSTITUTION],
  },
  {
    title: '课程元数据',
    href: '/dashboard/course-metadata',
    icon: <BookOpen className="w-5 h-5" />,
    roles: [UserRole.ADMIN, UserRole.REVIEWER],
  },
  {
    title: '用户管理',
    href: '/dashboard/users',
    icon: <Users className="w-5 h-5" />,
    roles: [UserRole.ADMIN],
  },
  {
    title: '角色管理',
    href: '/dashboard/roles',
    icon: <ShieldCheck className="w-5 h-5" />,
    roles: [UserRole.ADMIN],
  },
  {
    title: '权限管理',
    href: '/dashboard/permissions',
    icon: <ShieldCheck className="w-5 h-5" />,
    roles: [UserRole.ADMIN],
  },
  {
    title: '课程管理',
    href: '/dashboard/courses',
    icon: <BookOpen className="w-5 h-5" />,
    roles: [UserRole.ADMIN, UserRole.INSTITUTION],
  },
  {
    title: '机构审核',
    href: '/dashboard/institutions',
    icon: <Building2 className="w-5 h-5" />,
    roles: [UserRole.ADMIN, UserRole.REVIEWER],
  },
  {
    title: '内容审核',
    href: '/dashboard/reviews',
    icon: <FileText className="w-5 h-5" />,
    roles: [UserRole.ADMIN, UserRole.REVIEWER],
  },
  {
    title: '统计数据',
    href: '/dashboard/statistics',
    icon: <BarChart2 className="w-5 h-5" />,
    roles: [UserRole.ADMIN],
  },
];
export default function Sidebar() {
  const pathname = usePathname();
  const { user } = useAuthStore();
  const { sidebarOpen, setSidebarOpen } = useUIStore();
  // 根据用户角色过滤菜单项
  const filteredMenuItems = menuItems.filter(
    (item) => {
      // 如果菜单项没有角色限制，所有人可见
      if (!item.roles) return true;
      // 如果用户不存在或没有角色信息，不显示
      if (!user || !user.roles || user.roles.length === 0) return false;
      // 检查用户角色数组中是否有菜单要求的角色
      return item.roles.some(requiredRole => 
        user.roles.some(userRole => {
          // 从角色代码中提取角色名，考虑多种可能的格式
          const userRoleCode = userRole.code || '';
          const roleName = userRoleCode.replace('ROLE_', '').toUpperCase();
          const requiredRoleUpper = requiredRole.toUpperCase();
          // 输出调试信息
          console.log(`检查角色: 需要 ${requiredRoleUpper}, 用户有 ${roleName} (原始: ${userRoleCode})`);
          // 比较角色是否匹配（忽略大小写，去除前缀）
          return roleName === requiredRoleUpper;
        })
      );
    }
  );
  return (
    <>
      {/* 移动端侧边栏遮罩 */}
      {sidebarOpen && (
        <div
          className="fixed inset-0 z-40 bg-background/80 backdrop-blur-sm md:hidden"
          onClick={() => setSidebarOpen(false)}
        />
      )}
      {/* 侧边栏 */}
      <aside
        className={cn(
          'fixed top-0 left-0 z-50 h-full w-72 bg-card border-r shadow-sm md:static md:z-0',
          'transform transition-transform duration-200 ease-in-out',
          sidebarOpen ? 'translate-x-0' : '-translate-x-full md:translate-x-0'
        )}
      >
        <div className="flex h-16 items-center justify-between px-4 py-4">
          <Link href="/" className="flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="mr-2 text-primary"
            >
              <path d="M22 2 11 13"></path>
              <path d="m22 2-7 20-4-9-9-4 20-7z"></path>
            </svg>
            <span className="text-xl font-semibold">课程平台</span>
          </Link>
          <Button
            variant="ghost"
            size="icon"
            className="md:hidden"
            onClick={() => setSidebarOpen(false)}
          >
            <X className="h-5 w-5" />
          </Button>
        </div>
        <Separator />
        <nav className="flex flex-col gap-1 p-4">
          {filteredMenuItems.map((item) => (
            <Link
              key={item.href}
              href={item.href}
              className={cn(
                'flex items-center gap-3 rounded-md px-3 py-2 text-sm transition-colors',
                pathname === item.href
                  ? 'bg-primary text-primary-foreground'
                  : 'hover:bg-muted'
              )}
            >
              {item.icon}
              <span>{item.title}</span>
            </Link>
          ))}
        </nav>
      </aside>
    </>
  );
}
</file>

<file path="front/src/components/dashboard/users/delete-confirmation-dialog.tsx">
'use client';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { useUserManagementStore } from '@/stores/user-management-store';
export function DeleteConfirmationDialog() {
  const { 
    confirmDialogVisible, 
    setConfirmDialogVisible, 
    currentUser, 
    selectedIds,
    deleteUser,
    batchDeleteUsers,
    isLoading 
  } = useUserManagementStore();
  // 判断是单个删除还是批量删除
  const isBatchDelete = selectedIds.length > 0 && !currentUser;
  // 获取要删除的用户名或数量
  const getDeleteTarget = () => {
    if (currentUser) {
      return `用户 "${currentUser.username}"`;
    } else if (isBatchDelete) {
      return `${selectedIds.length} 个用户`;
    }
    return '选中的用户';
  };
  // 处理删除操作
  const handleDelete = async () => {
    if (currentUser) {
      await deleteUser(currentUser.id);
    } else if (isBatchDelete) {
      await batchDeleteUsers(selectedIds);
    }
  };
  return (
    <Dialog open={confirmDialogVisible} onOpenChange={setConfirmDialogVisible}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>确认删除</DialogTitle>
          <DialogDescription>
            您确定要删除 {getDeleteTarget()} 吗？此操作无法撤销。
          </DialogDescription>
        </DialogHeader>
        <DialogFooter className="mt-4">
          <Button 
            type="button" 
            variant="outline" 
            onClick={() => setConfirmDialogVisible(false)}
            disabled={isLoading}
          >
            取消
          </Button>
          <Button 
            variant="destructive" 
            onClick={handleDelete}
            disabled={isLoading}
          >
            {isLoading ? '处理中...' : '删除'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/dashboard/users/role-assignment-dialog.tsx">
'use client';
import { useEffect, useState } from 'react';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Checkbox } from '@/components/ui/checkbox';
import { useUserManagementStore } from '@/stores/user-management-store';
import { useRoleStore } from '@/stores/role-store';
import { Role } from '@/types/auth';
export function RoleAssignmentDialog() {
  const { 
    roleDialogVisible, 
    setRoleDialogVisible, 
    currentUser, 
    assignRoles, 
    isLoading 
  } = useUserManagementStore();
  const { roles, fetchRoles } = useRoleStore();
  // 选中的角色ID列表
  const [selectedRoleIds, setSelectedRoleIds] = useState<number[]>([]);
  // 加载角色列表
  useEffect(() => {
    fetchRoles();
  }, [fetchRoles]);
  // 当currentUser变化时，更新选中的角色
  useEffect(() => {
    if (currentUser && currentUser.roles) {
      setSelectedRoleIds(currentUser.roles.map(role => role.id));
    } else {
      setSelectedRoleIds([]);
    }
  }, [currentUser]);
  // 处理角色选择变化
  const handleRoleToggle = (roleId: number) => {
    setSelectedRoleIds(prev => {
      if (prev.includes(roleId)) {
        return prev.filter(id => id !== roleId);
      } else {
        return [...prev, roleId];
      }
    });
  };
  // 提交角色分配
  const handleSubmit = async () => {
    if (currentUser) {
      await assignRoles(currentUser.id, selectedRoleIds);
    }
  };
  return (
    <Dialog open={roleDialogVisible} onOpenChange={setRoleDialogVisible}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>分配角色</DialogTitle>
          <DialogDescription>
            {currentUser ? `为用户 ${currentUser.username} 分配角色` : '选择要分配的角色'}
          </DialogDescription>
        </DialogHeader>
        <div className="py-4">
          <ScrollArea className="h-[300px] pr-4">
            <div className="space-y-4">
              {roles.map((role) => (
                <div key={role.id} className="flex items-center space-x-2">
                  <Checkbox
                    id={`role-${role.id}`}
                    checked={selectedRoleIds.includes(role.id)}
                    onCheckedChange={() => handleRoleToggle(role.id)}
                  />
                  <label
                    htmlFor={`role-${role.id}`}
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer"
                  >
                    <div>{role.name}</div>
                    {role.description && (
                      <p className="text-xs text-muted-foreground mt-1">
                        {role.description}
                      </p>
                    )}
                  </label>
                </div>
              ))}
            </div>
          </ScrollArea>
        </div>
        <DialogFooter>
          <Button 
            type="button" 
            variant="outline" 
            onClick={() => setRoleDialogVisible(false)}
            disabled={isLoading}
          >
            取消
          </Button>
          <Button 
            onClick={handleSubmit} 
            disabled={isLoading || selectedRoleIds.length === 0}
          >
            {isLoading ? '处理中...' : '保存'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/dashboard/users/user-form.tsx">
'use client';
import { useEffect } from 'react';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { useUserManagementStore } from '@/stores/user-management-store';
import { useRoleStore } from '@/stores/role-store';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { UserDTO } from '@/types/user';
// 表单验证模式
const formSchema = z.object({
  username: z.string().min(3, '用户名至少需要3个字符').max(50, '用户名最多50个字符'),
  password: z.string().min(6, '密码至少需要6个字符').max(100, '密码最多100个字符').optional(),
  email: z.string().email('请输入有效的邮箱地址'),
  phone: z.string().regex(/^1[3-9]\d{9}$/, '请输入有效的手机号码').optional(),
  nickname: z.string().min(2, '昵称至少需要2个字符').max(50, '昵称最多50个字符'),
  status: z.number(),
  roleIds: z.array(z.number()).min(1, '请至少选择一个角色'),
});
export function UserForm() {
  const { 
    formVisible, 
    setFormVisible, 
    currentUser, 
    createUser, 
    updateUser, 
    isLoading 
  } = useUserManagementStore();
  const { roles, fetchRoles } = useRoleStore();
  // 初始化表单
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: '',
      password: '',
      email: '',
      phone: '',
      nickname: '',
      status: 1, // 默认启用
      roleIds: [],
    },
  });
  // 加载角色列表
  useEffect(() => {
    fetchRoles();
  }, [fetchRoles]);
  // 当currentUser变化时，更新表单值
  useEffect(() => {
    if (currentUser) {
      form.reset({
        username: currentUser.username,
        // 编辑时不设置密码
        password: undefined,
        email: currentUser.email,
        phone: currentUser.phone || '',
        nickname: currentUser.nickname,
        status: currentUser.status,
        roleIds: currentUser.roles?.map(role => role.id) || [],
      });
    } else {
      form.reset({
        username: '',
        password: '',
        email: '',
        phone: '',
        nickname: '',
        status: 1,
        roleIds: [],
      });
    }
  }, [currentUser, form]);
  // 表单提交处理
  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    const userData: UserDTO = {
      ...values,
      // 如果是编辑模式且密码为空，则不传递密码字段
      ...(currentUser && !values.password && { password: undefined }),
    };
    if (currentUser) {
      await updateUser(currentUser.id, userData);
    } else {
      await createUser(userData);
    }
  };
  return (
    <Dialog open={formVisible} onOpenChange={setFormVisible}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>{currentUser ? '编辑用户' : '创建用户'}</DialogTitle>
          <DialogDescription>
            {currentUser 
              ? '修改用户信息，如不修改密码请留空' 
              : '填写用户信息，创建新用户'}
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="username"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>用户名</FormLabel>
                  <FormControl>
                    <Input 
                      placeholder="请输入用户名" 
                      {...field} 
                      disabled={!!currentUser} // 编辑模式下用户名不可修改
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{currentUser ? '密码 (留空则不修改)' : '密码'}</FormLabel>
                  <FormControl>
                    <Input 
                      type="password" 
                      placeholder={currentUser ? "留空则不修改密码" : "请输入密码"} 
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>邮箱</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入邮箱" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>手机号</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入手机号" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="nickname"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>昵称</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入昵称" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="status"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>状态</FormLabel>
                  <Select
                    onValueChange={(value) => field.onChange(parseInt(value))}
                    defaultValue={field.value.toString()}
                    value={field.value.toString()}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="选择用户状态" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="1">启用</SelectItem>
                      <SelectItem value="0">禁用</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="roleIds"
              render={() => (
                <FormItem>
                  <div className="mb-2">
                    <FormLabel>角色</FormLabel>
                  </div>
                  <div className="grid grid-cols-2 gap-2">
                    {roles.map((role) => (
                      <FormField
                        key={role.id}
                        control={form.control}
                        name="roleIds"
                        render={({ field }) => {
                          return (
                            <FormItem
                              key={role.id}
                              className="flex flex-row items-start space-x-3 space-y-0"
                            >
                              <FormControl>
                                <Checkbox
                                  checked={field.value?.includes(role.id)}
                                  onCheckedChange={(checked) => {
                                    const currentValues = field.value || [];
                                    if (checked) {
                                      field.onChange([...currentValues, role.id]);
                                    } else {
                                      field.onChange(
                                        currentValues.filter((value) => value !== role.id)
                                      );
                                    }
                                  }}
                                />
                              </FormControl>
                              <FormLabel className="font-normal cursor-pointer">
                                {role.name}
                              </FormLabel>
                            </FormItem>
                          );
                        }}
                      />
                    ))}
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <DialogFooter>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => setFormVisible(false)}
                disabled={isLoading}
              >
                取消
              </Button>
              <Button type="submit" disabled={isLoading}>
                {isLoading ? '处理中...' : (currentUser ? '更新' : '创建')}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/dashboard/users/user-list.tsx">
'use client';
import { useEffect, useState } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Input } from '@/components/ui/input';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';
import { Badge } from '@/components/ui/badge';
import { useUserManagementStore } from '@/stores/user-management-store';
import { User } from '@/types/auth';
import { UserQueryParams } from '@/types/user';
import { MoreHorizontal, Plus, Search, RefreshCw } from 'lucide-react';
import { formatDate } from '@/lib/utils';
export function UserList() {
  const {
    users,
    pagination,
    queryParams,
    fetchUsers,
    setQueryParams,
    setCurrentUser,
    setFormVisible,
    setConfirmDialogVisible,
    setRoleDialogVisible,
    selectedIds,
    toggleSelectedId,
    clearSelectedIds,
    updateUserStatus,
    isLoading,
  } = useUserManagementStore();
  // 搜索关键词
  const [searchKeyword, setSearchKeyword] = useState('');
  // 初始加载用户列表
  useEffect(() => {
    fetchUsers();
  }, [fetchUsers]);
  // 处理搜索
  const handleSearch = () => {
    const newParams: Partial<UserQueryParams> = {
      pageNum: 1, // 重置到第一页
    };
    // 根据搜索关键词设置查询参数
    if (searchKeyword) {
      if (searchKeyword.includes('@')) {
        newParams.email = searchKeyword;
      } else if (/^1[3-9]\d{9}$/.test(searchKeyword)) {
        newParams.phone = searchKeyword;
      } else {
        newParams.username = searchKeyword;
      }
    } else {
      // 清空搜索条件
      newParams.username = undefined;
      newParams.email = undefined;
      newParams.phone = undefined;
    }
    fetchUsers(newParams);
  };
  // 处理页码变化
  const handlePageChange = (page: number) => {
    fetchUsers({ pageNum: page });
  };
  // 处理每页数量变化
  const handlePageSizeChange = (size: number) => {
    fetchUsers({ pageSize: size, pageNum: 1 });
  };
  // 处理编辑用户
  const handleEdit = (user: User) => {
    setCurrentUser(user);
    setFormVisible(true);
  };
  // 处理删除用户
  const handleDelete = (user: User) => {
    setCurrentUser(user);
    setConfirmDialogVisible(true);
  };
  // 处理分配角色
  const handleAssignRoles = (user: User) => {
    setCurrentUser(user);
    setRoleDialogVisible(true);
  };
  // 处理批量删除
  const handleBatchDelete = () => {
    setCurrentUser(null);
    setConfirmDialogVisible(true);
  };
  // 处理状态切换
  const handleStatusToggle = async (user: User) => {
    await updateUserStatus(user.id, user.status === 1 ? 0 : 1);
  };
  // 处理全选/取消全选
  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      const allIds = users.map(user => user.id);
      useUserManagementStore.getState().setSelectedIds(allIds);
    } else {
      clearSelectedIds();
    }
  };
  // 判断是否全选
  const isAllSelected = users.length > 0 && selectedIds.length === users.length;
  // 生成分页项
  const renderPaginationItems = () => {
    const { totalPages, number } = pagination;
    const currentPage = number + 1; // API返回的页码从0开始，UI从1开始
    const items = [];
    // 添加首页
    if (totalPages > 5 && currentPage > 3) {
      items.push(
        <PaginationItem key="first">
          <PaginationLink onClick={() => handlePageChange(1)}>1</PaginationLink>
        </PaginationItem>
      );
      if (currentPage > 4) {
        items.push(
          <PaginationItem key="ellipsis-start">
            <PaginationEllipsis />
          </PaginationItem>
        );
      }
    }
    // 添加当前页附近的页码
    for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) {
      items.push(
        <PaginationItem key={i}>
          <PaginationLink 
            isActive={currentPage === i}
            onClick={() => handlePageChange(i)}
          >
            {i}
          </PaginationLink>
        </PaginationItem>
      );
    }
    // 添加末页
    if (totalPages > 5 && currentPage < totalPages - 2) {
      if (currentPage < totalPages - 3) {
        items.push(
          <PaginationItem key="ellipsis-end">
            <PaginationEllipsis />
          </PaginationItem>
        );
      }
      items.push(
        <PaginationItem key="last">
          <PaginationLink onClick={() => handlePageChange(totalPages)}>
            {totalPages}
          </PaginationLink>
        </PaginationItem>
      );
    }
    return items;
  };
  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Input
            placeholder="搜索用户名/邮箱/手机号"
            value={searchKeyword}
            onChange={(e) => setSearchKeyword(e.target.value)}
            className="w-[300px]"
            onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
          />
          <Button variant="outline" size="icon" onClick={handleSearch}>
            <Search className="h-4 w-4" />
          </Button>
          <Button 
            variant="outline" 
            size="icon" 
            onClick={() => {
              setSearchKeyword('');
              fetchUsers({
                username: undefined,
                email: undefined,
                phone: undefined,
                pageNum: 1,
              });
            }}
          >
            <RefreshCw className="h-4 w-4" />
          </Button>
        </div>
        <div className="flex items-center gap-2">
          {selectedIds.length > 0 && (
            <Button 
              variant="destructive" 
              size="sm"
              onClick={handleBatchDelete}
              disabled={isLoading}
            >
              删除选中 ({selectedIds.length})
            </Button>
          )}
          <Button 
            onClick={() => {
              setCurrentUser(null);
              setFormVisible(true);
            }}
            disabled={isLoading}
          >
            <Plus className="h-4 w-4 mr-2" /> 新建用户
          </Button>
        </div>
      </div>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[50px]">
                <Checkbox 
                  checked={isAllSelected}
                  onCheckedChange={handleSelectAll}
                  disabled={users.length === 0}
                />
              </TableHead>
              <TableHead>用户名</TableHead>
              <TableHead>昵称</TableHead>
              <TableHead>邮箱</TableHead>
              <TableHead>手机号</TableHead>
              <TableHead>角色</TableHead>
              <TableHead>状态</TableHead>
              <TableHead>创建时间</TableHead>
              <TableHead className="text-right">操作</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {users.length === 0 ? (
              <TableRow>
                <TableCell colSpan={9} className="h-24 text-center">
                  {isLoading ? '加载中...' : '暂无数据'}
                </TableCell>
              </TableRow>
            ) : (
              users.map((user) => (
                <TableRow key={user.id}>
                  <TableCell>
                    <Checkbox 
                      checked={selectedIds.includes(user.id)}
                      onCheckedChange={() => toggleSelectedId(user.id)}
                    />
                  </TableCell>
                  <TableCell>{user.username}</TableCell>
                  <TableCell>{user.nickname}</TableCell>
                  <TableCell>{user.email}</TableCell>
                  <TableCell>{user.phone || '-'}</TableCell>
                  <TableCell>
                    <div className="flex flex-wrap gap-1">
                      {user.roles?.map((role) => (
                        <Badge key={role.id} variant="outline">
                          {role.name}
                        </Badge>
                      ))}
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge variant={user.status === 1 ? "success" : "destructive"}>
                      {user.status === 1 ? '启用' : '禁用'}
                    </Badge>
                  </TableCell>
                  <TableCell>{formatDate(user.createdAt)}</TableCell>
                  <TableCell className="text-right">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon">
                          <MoreHorizontal className="h-4 w-4" />
                          <span className="sr-only">操作</span>
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuLabel>操作</DropdownMenuLabel>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem onClick={() => handleEdit(user)}>
                          编辑
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => handleAssignRoles(user)}>
                          分配角色
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => handleStatusToggle(user)}>
                          {user.status === 1 ? '禁用' : '启用'}
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem 
                          className="text-destructive focus:text-destructive"
                          onClick={() => handleDelete(user)}
                        >
                          删除
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>
      {pagination.totalElements > 0 && (
        <div className="flex items-center justify-between">
          <div className="text-sm text-muted-foreground">
            共 {pagination.totalElements} 条记录，每页
            <select
              className="mx-1 bg-background"
              value={pagination.size}
              onChange={(e) => handlePageSizeChange(Number(e.target.value))}
              disabled={isLoading}
            >
              <option value="10">10</option>
              <option value="20">20</option>
              <option value="50">50</option>
              <option value="100">100</option>
            </select>
            条
          </div>
          <Pagination>
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious 
                  onClick={() => !pagination.first && handlePageChange(pagination.number)}
                  className={pagination.first ? "pointer-events-none opacity-50" : ""}
                />
              </PaginationItem>
              {renderPaginationItems()}
              <PaginationItem>
                <PaginationNext 
                  onClick={() => !pagination.last && handlePageChange(pagination.number + 2)}
                  className={pagination.last ? "pointer-events-none opacity-50" : ""}
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        </div>
      )}
    </div>
  );
}
</file>

<file path="front/src/components/preview/course-content-player.tsx">
'use client';
import { useState, useEffect } from 'react';
import { Section } from '@/types/course';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { Skeleton } from '@/components/ui/skeleton';
import { Button } from '@/components/ui/button';
import { sectionService, mediaService, questionGroupService } from '@/services';
import { MediaVO } from '@/services/media-service';
import { QuestionGroup } from '@/types/question';
import { QuestionGroupItemVO, Question, QuestionType, QuestionDifficulty } from '@/types/question';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { toast } from 'sonner';
import { 
  Video, 
  FileText, 
  Headphones, 
  AlertCircle, 
  Loader2,
  BrainCircuit,
  Clock,
  ExternalLink,
  RefreshCw,
  ChevronUp,
  ChevronDown,
  Download
} from 'lucide-react';
interface CourseContentPlayerProps {
  section: Section;
}
export function CourseContentPlayer({ section }: CourseContentPlayerProps) {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [media, setMedia] = useState<MediaVO | null>(null);
  const [questionGroup, setQuestionGroup] = useState<QuestionGroup | null>(null);
  const [activeTab, setActiveTab] = useState<string>('content');
  const [mediaUrlLoading, setMediaUrlLoading] = useState(false);
  // 题组相关状态 - 提升到组件顶层
  const [expandedQuestionId, setExpandedQuestionId] = useState<number | null>(null);
  const [groupItems, setGroupItems] = useState<QuestionGroupItemVO[]>([]);
  const [loadingItems, setLoadingItems] = useState<boolean>(false);
  const [itemsError, setItemsError] = useState<string | null>(null);
  // 加载小节资源
  useEffect(() => {
    async function loadSectionResources() {
      try {
        setLoading(true);
        setError(null);
        // 重置资源状态
        setMedia(null);
        setQuestionGroup(null);
        // 根据资源类型加载对应资源
        if (section.resourceTypeDiscriminator === 'MEDIA' && section.mediaId) {
          const mediaData = await mediaService.getMediaInfo(section.mediaId);
          if (mediaData && mediaData.data) {
            setMedia(mediaData.data);
            // 获取媒体访问URL
            await fetchMediaAccessUrl(mediaData.data.id);
          }
        } else if (section.resourceTypeDiscriminator === 'QUESTION_GROUP' && section.questionGroupId) {
          const groupData = await questionGroupService.getQuestionGroupById(section.questionGroupId);
          if (groupData) {
            setQuestionGroup(groupData);
          }
        }
      } catch (err: any) {
        console.error('加载小节资源失败:', err);
        setError(err.message || '无法加载小节资源');
      } finally {
        setLoading(false);
      }
    }
    if (section) {
      loadSectionResources();
    }
  }, [section]);
  // 加载题组中的题目 - 提升到组件顶层
  useEffect(() => {
    async function loadGroupItems() {
      if (!questionGroup) return;
      try {
        setLoadingItems(true);
        setItemsError(null);
        const items = await questionGroupService.getGroupItems(questionGroup.id);
        setGroupItems(items);
      } catch (err: any) {
        console.error('加载题组题目失败:', err);
        setItemsError(err.message || '加载题目失败');
      } finally {
        setLoadingItems(false);
      }
    }
    if (questionGroup) {
      loadGroupItems();
    }
  }, [questionGroup]);
  // 获取媒体访问URL
  const fetchMediaAccessUrl = async (mediaId: number) => {
    try {
      setMediaUrlLoading(true);
      console.log('获取媒体访问URL, mediaId:', mediaId);
      const response = await mediaService.getMediaAccessUrl(mediaId);
      if (response && response.data && response.data.accessUrl) {
        console.log('获取到媒体访问URL');
        // 更新媒体对象的访问URL
        setMedia(prev => {
          if (!prev) return null;
          return {
            ...prev,
            accessUrl: response.data.accessUrl
          };
        });
      } else {
        console.error('获取媒体访问URL失败：未返回有效URL');
        toast.error('无法加载媒体预览');
      }
    } catch (err) {
      console.error('获取媒体访问URL失败:', err);
      toast.error('无法加载媒体预览');
    } finally {
      setMediaUrlLoading(false);
    }
  };
  // 处理展开/折叠题目 - 提升到组件顶层
  const handleToggleQuestion = (questionId: number) => {
    if (expandedQuestionId === questionId) {
      setExpandedQuestionId(null);
    } else {
      setExpandedQuestionId(questionId);
    }
  };
  // 获取问题类型文本
  const getQuestionTypeText = (type: QuestionType) => {
    switch (type) {
      case QuestionType.SINGLE_CHOICE: return '单选题';
      case QuestionType.MULTIPLE_CHOICE: return '多选题';
      case QuestionType.TRUE_FALSE: return '判断题';
      case QuestionType.FILL_BLANK: return '填空题';
      case QuestionType.SHORT_ANSWER: return '简答题';
      default: return '未知题型';
    }
  };
  // 获取问题难度文本
  const getQuestionDifficultyText = (difficulty: QuestionDifficulty) => {
    switch (difficulty) {
      case QuestionDifficulty.EASY: return '简单';
      case QuestionDifficulty.MEDIUM: return '中等';
      case QuestionDifficulty.HARD: return '困难';
      default: return '未知难度';
    }
  };
  // 获取问题类型对应的样式
  const getTypeStyle = (type: QuestionType) => {
    switch (type) {
      case QuestionType.SINGLE_CHOICE: return 'bg-blue-100 text-blue-800';
      case QuestionType.MULTIPLE_CHOICE: return 'bg-purple-100 text-purple-800';
      case QuestionType.TRUE_FALSE: return 'bg-green-100 text-green-800';
      case QuestionType.FILL_BLANK: return 'bg-yellow-100 text-yellow-800';
      case QuestionType.SHORT_ANSWER: return 'bg-orange-100 text-orange-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };
  // 获取问题难度对应的样式
  const getDifficultyStyle = (difficulty: QuestionDifficulty) => {
    switch (difficulty) {
      case QuestionDifficulty.EASY: return 'bg-emerald-100 text-emerald-800';
      case QuestionDifficulty.MEDIUM: return 'bg-amber-100 text-amber-800';
      case QuestionDifficulty.HARD: return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };
  // 渲染加载状态
  if (loading) {
    return (
      <Card>
        <CardHeader>
          <Skeleton className="h-6 w-1/3" />
          <Skeleton className="h-4 w-1/2 mt-2" />
        </CardHeader>
        <CardContent>
          <Skeleton className="h-[400px] w-full rounded-lg" />
        </CardContent>
      </Card>
    );
  }
  // 渲染错误状态
  if (error) {
    return (
      <Alert variant="destructive">
        <AlertCircle className="h-4 w-4" />
        <AlertTitle>加载失败</AlertTitle>
        <AlertDescription>{error}</AlertDescription>
      </Alert>
    );
  }
  // 渲染媒体内容
  const renderMediaContent = () => {
    if (!media) return <p className="text-center text-muted-foreground py-6">该小节没有关联媒体资源</p>;
    // 根据媒体类型渲染不同的播放器
    const mediaType = media.type?.toLowerCase() || '';
    // 判断是否已经获取到访问URL
    if (!media.accessUrl) {
      return (
        <div className="text-center p-6 bg-muted rounded-lg">
          <div className="flex flex-col items-center justify-center py-10">
            {mediaUrlLoading ? (
              <>
                <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
                <p className="text-muted-foreground">正在加载媒体资源...</p>
              </>
            ) : (
              <>
                {mediaType.includes('video') 
                  ? <Video className="h-12 w-12 text-muted-foreground mb-4" />
                  : mediaType.includes('audio')
                    ? <Headphones className="h-12 w-12 text-muted-foreground mb-4" />
                    : <FileText className="h-12 w-12 text-muted-foreground mb-4" />
                }
                <p className="text-muted-foreground mb-4">媒体资源链接加载失败</p>
                <Button 
                  variant="outline" 
                  onClick={() => media && fetchMediaAccessUrl(media.id)}
                >
                  <RefreshCw className="h-4 w-4 mr-2" />
                  重新加载
                </Button>
              </>
            )}
          </div>
        </div>
      );
    }
    // 视频
    if (mediaType.includes('video')) {
      return (
        <div className="rounded-lg overflow-hidden border shadow-sm">
          <div className="bg-muted p-2 flex justify-between items-center">
            <span className="text-sm font-medium">{media.title}</span>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => window.open(media.accessUrl, '_blank')}
            >
              <ExternalLink className="h-4 w-4 mr-1" />
              新窗口打开
            </Button>
          </div>
          <div className="aspect-video bg-black">
            <video
              key={media.accessUrl}
              src={media.accessUrl}
              controls
              controlsList="nodownload"
              playsInline
              preload="metadata"
              className="w-full h-full"
              onError={(e) => {
                console.error('视频加载错误:', e);
                toast.error('视频加载失败，请重试');
              }}
            >
              您的浏览器不支持HTML5视频播放，请更新浏览器版本。
            </video>
          </div>
          {media.description && (
            <div className="p-3 bg-muted/50 border-t">
              <p className="text-sm text-muted-foreground">{media.description}</p>
            </div>
          )}
          <div className="p-2 bg-muted flex justify-between items-center text-xs text-muted-foreground">
            <div>
              提示：可使用空格键暂停/播放，左右方向键快退/快进
            </div>
            <div className="flex items-center">
              <Button 
                variant="ghost" 
                size="sm" 
                className="h-7 px-2"
                onClick={() => {
                  const videoElement = document.querySelector('video');
                  if (videoElement) {
                    if (videoElement.requestFullscreen) {
                      videoElement.requestFullscreen();
                    }
                  }
                }}
              >
                <span className="text-xs">全屏播放</span>
              </Button>
            </div>
          </div>
        </div>
      );
    }
    // 文档 (PDF或其他文档，使用iframe)
    if (mediaType.includes('pdf') || 
        mediaType.includes('document') || 
        mediaType.includes('msword') || 
        mediaType.includes('excel') || 
        mediaType.includes('powerpoint')) {
      return (
        <div className="relative rounded-lg overflow-hidden border">
          <div className="flex justify-between items-center bg-muted p-2">
            <span className="text-sm font-medium">{media.title}</span>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={() => window.open(media.accessUrl, '_blank')}
            >
              <ExternalLink className="h-4 w-4 mr-1" />
              新窗口打开
            </Button>
          </div>
          <iframe
            src={media.accessUrl}
            className="w-full h-[500px] border-0"
            title={media.title || "文档预览"}
            sandbox="allow-scripts allow-same-origin allow-forms"
            referrerPolicy="no-referrer"
            loading="lazy"
            onError={(e) => {
              console.error('文档加载错误:', e);
              toast.error('文档加载失败，请重试');
            }}
          />
        </div>
      );
    }
    // 音频
    if (mediaType.includes('audio')) {
      return (
        <div className="p-6 bg-muted rounded-lg">
          <div className="flex flex-col items-center space-y-4">
            <div className="w-40 h-40 bg-primary/10 rounded-full flex items-center justify-center mb-2">
              <Headphones className="h-16 w-16 text-primary" />
            </div>
            <div className="text-center mb-2">
              <h3 className="text-lg font-medium">{media.title}</h3>
              {media.description && (
                <p className="text-sm text-muted-foreground mt-1">{media.description}</p>
              )}
            </div>
            <div className="w-full max-w-md bg-card p-4 rounded-lg border shadow-sm">
              <audio
                key={media.accessUrl}
                src={media.accessUrl}
                controls
                className="w-full"
                controlsList="nodownload"
                preload="metadata"
                onError={(e) => {
                  console.error('音频加载错误:', e);
                  toast.error('音频加载失败，请重试');
                }}
              >
                您的浏览器不支持HTML5音频播放，请更新浏览器版本。
              </audio>
              <div className="flex justify-between items-center mt-3 text-xs text-muted-foreground">
                <div>
                  提示：可使用空格键暂停/播放
                </div>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={() => window.open(media.accessUrl, '_blank')}
                >
                  <ExternalLink className="h-3 w-3 mr-1" />
                  新窗口打开
                </Button>
              </div>
            </div>
          </div>
        </div>
      );
    }
    // 默认：提供下载链接
    return (
      <div className="p-6 bg-card rounded-lg border shadow-sm">
        <div className="flex flex-col items-center justify-center">
          <div className="w-20 h-20 bg-primary/10 rounded-full flex items-center justify-center mb-4">
            <FileText className="h-10 w-10 text-primary" />
          </div>
          <h3 className="text-lg font-medium mb-1">{media.title}</h3>
          {media.description && (
            <p className="text-sm text-muted-foreground text-center mb-4 max-w-md">{media.description}</p>
          )}
          <div className="text-center mb-6">
            <p className="text-sm text-muted-foreground">
              当前文件类型 ({media.type || '未知类型'}) 不支持在线预览
            </p>
          </div>
          <div className="flex gap-3">
            <Button 
              variant="outline" 
              onClick={() => window.open(media.accessUrl, '_blank')}
            >
              <FileText className="h-4 w-4 mr-2" />
              在浏览器中打开
            </Button>
            <Button 
              onClick={() => {
                // 创建一个临时链接元素来触发下载
                const a = document.createElement('a');
                a.href = media.accessUrl || '';
                // 确保设置一个有效的文件名
                const fileName = (media.title && media.title.trim()) ? media.title : '资源下载';
                a.download = fileName;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
              }}
            >
              <Download className="h-4 w-4 mr-2" />
              下载文件
            </Button>
          </div>
        </div>
      </div>
    );
  };
  // 渲染选项列表
  const renderOptions = (question: Question) => {
    if (!question.options || question.options.length === 0) {
      return <p className="text-muted-foreground text-sm">该题目没有选项</p>;
    }
    return (
      <div className="space-y-2 mt-3">
        {question.options.map((option, index) => {
          const optionLabel = String.fromCharCode(65 + index); // A, B, C, D...
          return (
            <div 
              key={`${question.id}-option-${index}`}
              className={`flex p-3 rounded-md border ${
                option.isCorrect ? 'bg-green-50 border-green-200' : 'bg-white'
              }`}
            >
              <div className="flex-shrink-0 mr-2">
                <span className={`inline-flex items-center justify-center h-6 w-6 rounded-full text-xs font-medium ${
                  option.isCorrect ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                }`}>
                  {optionLabel}
                </span>
              </div>
              <div className="flex-grow">
                <div className="text-sm">{option.content}</div>
                {option.isCorrect && (
                  <div className="text-xs text-green-600 mt-1">
                    正确答案
                  </div>
                )}
              </div>
            </div>
          );
        })}
      </div>
    );
  };
  // 渲染判断题选项
  const renderTrueFalseOptions = (question: Question) => {
    const correctAnswer = question.answer?.toLowerCase() === 'true';
    return (
      <div className="space-y-2 mt-3">
        <div 
          key={`${question.id}-true-option`}
          className={`flex p-3 rounded-md border ${
            correctAnswer ? 'bg-green-50 border-green-200' : 'bg-white'
          }`}
        >
          <div className="flex-shrink-0 mr-2">
            <span className={`inline-flex items-center justify-center h-6 w-6 rounded-full text-xs font-medium ${
              correctAnswer ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
            }`}>
              A
            </span>
          </div>
          <div className="flex-grow">
            <div className="text-sm">正确</div>
            {correctAnswer && (
              <div className="text-xs text-green-600 mt-1">
                正确答案
              </div>
            )}
          </div>
        </div>
        <div 
          key={`${question.id}-false-option`}
          className={`flex p-3 rounded-md border ${
            !correctAnswer ? 'bg-green-50 border-green-200' : 'bg-white'
          }`}
        >
          <div className="flex-shrink-0 mr-2">
            <span className={`inline-flex items-center justify-center h-6 w-6 rounded-full text-xs font-medium ${
              !correctAnswer ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
            }`}>
              B
            </span>
          </div>
          <div className="flex-grow">
            <div className="text-sm">错误</div>
            {!correctAnswer && (
              <div className="text-xs text-green-600 mt-1">
                正确答案
              </div>
            )}
          </div>
        </div>
      </div>
    );
  };
  // 渲染填空题答案
  const renderFillBlankAnswer = (question: Question) => {
    if (!question.answer) {
      return <p className="text-muted-foreground text-sm">该题目没有设置答案</p>;
    }
    // 填空题可能有多个空，答案以分号分隔
    const answers = question.answer.split(';').map(ans => ans.trim());
    return (
      <div className="mt-3 space-y-2">
        <div className="text-sm font-medium">参考答案:</div>
        {answers.map((ans, index) => (
          <div key={`${question.id}-fill-blank-${index}`} className="p-2 bg-green-50 border border-green-200 rounded-md text-sm">
            空 {index + 1}: {ans}
          </div>
        ))}
      </div>
    );
  };
  // 渲染简答题答案
  const renderShortAnswerAnswer = (question: Question) => {
    if (!question.answer) {
      return <p className="text-muted-foreground text-sm">该题目没有设置答案</p>;
    }
    return (
      <div className="mt-3">
        <div className="text-sm font-medium">参考答案:</div>
        <div className="p-3 mt-1 bg-green-50 border border-green-200 rounded-md text-sm whitespace-pre-wrap">
          {question.answer}
        </div>
      </div>
    );
  };
  // 根据题目类型渲染不同的选项/答案
  const renderQuestionAnswer = (question: Question) => {
    switch (question.type) {
      case QuestionType.SINGLE_CHOICE:
      case QuestionType.MULTIPLE_CHOICE:
        return renderOptions(question);
      case QuestionType.TRUE_FALSE:
        return renderTrueFalseOptions(question);
      case QuestionType.FILL_BLANK:
        return renderFillBlankAnswer(question);
      case QuestionType.SHORT_ANSWER:
        return renderShortAnswerAnswer(question);
      default:
        return <p className="text-muted-foreground text-sm">未知题型</p>;
    }
  };
  // 渲染题目组内容
  const renderQuestionGroupContent = () => {
    if (!questionGroup) return <p className="text-center text-muted-foreground py-6">该小节没有关联题目组</p>;
    if (loadingItems) {
      return (
        <div className="p-6 bg-muted rounded-lg">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-medium flex items-center">
              <BrainCircuit className="h-5 w-5 mr-2" />
              {questionGroup.name}
            </h3>
            <div className="text-sm text-muted-foreground">
              共 {questionGroup.questionCount || 0} 题
            </div>
          </div>
          <div className="bg-card rounded-lg p-6 shadow-sm border">
            <div className="flex justify-center items-center py-10">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <span className="ml-2 text-muted-foreground">加载题目中...</span>
            </div>
          </div>
        </div>
      );
    }
    if (itemsError) {
      return (
        <div className="p-6 bg-muted rounded-lg">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-medium flex items-center">
              <BrainCircuit className="h-5 w-5 mr-2" />
              {questionGroup.name}
            </h3>
          </div>
          <Alert variant="destructive">
            <AlertCircle className="h-4 w-4" />
            <AlertTitle>加载失败</AlertTitle>
            <AlertDescription>{itemsError}</AlertDescription>
          </Alert>
        </div>
      );
    }
    if (groupItems.length === 0) {
      return (
        <div className="p-6 bg-muted rounded-lg">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-medium flex items-center">
              <BrainCircuit className="h-5 w-5 mr-2" />
              {questionGroup.name}
            </h3>
          </div>
          <div className="bg-card rounded-lg p-6 shadow-sm border text-center">
            <p className="text-muted-foreground">该题组暂无题目</p>
          </div>
        </div>
      );
    }
    return (
      <div className="p-6 bg-muted rounded-lg">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-medium flex items-center">
            <BrainCircuit className="h-5 w-5 mr-2" />
            {questionGroup.name}
          </h3>
          <div className="text-sm text-muted-foreground">
            共 {groupItems.length} 题
          </div>
        </div>
        <div className="space-y-4">
          {groupItems.map((item, index) => {
            const { question } = item;
            const isExpanded = expandedQuestionId === question.id;
            return (
              <div key={item.id} className="bg-card rounded-lg shadow-sm border overflow-hidden">
                <div 
                  className="flex items-start p-4 cursor-pointer"
                  onClick={() => handleToggleQuestion(question.id)}
                >
                  <div className="mr-3 font-bold text-muted-foreground">
                    {index + 1}.
                  </div>
                  <div className="flex-grow">
                    <div className="flex flex-wrap items-center gap-2 mb-2">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getTypeStyle(question.type)}`}>
                        {getQuestionTypeText(question.type)}
                      </span>
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getDifficultyStyle(question.difficulty)}`}>
                        {getQuestionDifficultyText(question.difficulty)}
                      </span>
                      {item.score && (
                        <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          {item.score} 分
                        </span>
                      )}
                    </div>
                    <div className="text-sm font-medium">
                      {question.title}
                    </div>
                    {question.description && (
                      <div className="mt-1 text-sm text-muted-foreground">
                        {question.description}
                      </div>
                    )}
                  </div>
                  <div className="flex-shrink-0 ml-2">
                    {isExpanded ? (
                      <ChevronUp className="h-5 w-5 text-muted-foreground" />
                    ) : (
                      <ChevronDown className="h-5 w-5 text-muted-foreground" />
                    )}
                  </div>
                </div>
                {isExpanded && (
                  <div className="border-t px-4 py-3 bg-gray-50">
                    {renderQuestionAnswer(question)}
                    {question.analysis && (
                      <div className="mt-4 pt-3 border-t">
                        <div className="text-sm font-medium">题目解析:</div>
                        <div className="p-3 mt-1 bg-blue-50 border border-blue-100 rounded-md text-sm whitespace-pre-wrap">
                          {question.analysis}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  };
  // 没有资源
  if (!media && !questionGroup && section.resourceTypeDiscriminator !== 'MEDIA' && section.resourceTypeDiscriminator !== 'QUESTION_GROUP') {
    return (
      <Card>
        <CardHeader>
          <CardTitle>{section.title}</CardTitle>
          {section.description && (
            <CardDescription>{section.description}</CardDescription>
          )}
        </CardHeader>
        <CardContent>
          <div className="p-6 bg-muted rounded-lg text-center">
            <p className="text-muted-foreground">该小节暂无内容资源</p>
          </div>
        </CardContent>
      </Card>
    );
  }
  return (
    <Card>
      <CardHeader>
        <CardTitle>{section.title}</CardTitle>
        {section.description && (
          <CardDescription>{section.description}</CardDescription>
        )}
        {section.estimatedMinutes && (
          <div className="flex items-center mt-2 text-sm text-muted-foreground">
            <Clock className="h-4 w-4 mr-1" />
            <span>预计学习时间: {section.estimatedMinutes} 分钟</span>
          </div>
        )}
      </CardHeader>
      <CardContent>
        {section.resourceTypeDiscriminator === 'MEDIA' && renderMediaContent()}
        {section.resourceTypeDiscriminator === 'QUESTION_GROUP' && renderQuestionGroupContent()}
      </CardContent>
    </Card>
  );
}
</file>

<file path="front/src/components/providers/theme-provider.tsx">
'use client';
import { useEffect, useState } from 'react';
import { useUIStore, Theme } from '@/stores/ui-store';
interface ThemeProviderProps {
  children: React.ReactNode;
}
export default function ThemeProvider({ children }: ThemeProviderProps) {
  const { theme, setTheme } = useUIStore();
  const [mounted, setMounted] = useState(false);
  // 仅在客户端挂载后执行
  useEffect(() => {
    setMounted(true);
  }, []);
  // 监听系统主题变化
  useEffect(() => {
    if (!mounted) return;
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const handleChange = () => {
      if (theme === 'system') {
        const root = document.documentElement;
        const isDark = mediaQuery.matches;
        root.classList.remove('light', 'dark');
        root.classList.add(isDark ? 'dark' : 'light');
      }
    };
    // 初始设置
    if (theme === 'system') {
      handleChange();
    } else {
      const root = document.documentElement;
      root.classList.remove('light', 'dark');
      root.classList.add(theme);
    }
    // 添加监听
    mediaQuery.addEventListener('change', handleChange);
    return () => {
      // 清理监听
      mediaQuery.removeEventListener('change', handleChange);
    };
  }, [theme, mounted]);
  // 防止服务器端渲染和客户端渲染不匹配
  if (!mounted) {
    // 返回一个空的占位符，避免闪烁
    return <>{children}</>;
  }
  return <>{children}</>;
}
</file>

<file path="front/src/components/question/index.ts">
import QuestionImportModal from './QuestionImportModal';
import { QuestionList } from './QuestionList';
import { QuestionGroupList } from './QuestionGroupList';
import { QuestionTagList } from './QuestionTagList';
import { QuestionDetailForm } from './QuestionDetailForm';
export {
  QuestionImportModal,
  QuestionList,
  QuestionGroupList,
  QuestionTagList,
  QuestionDetailForm
};
</file>

<file path="front/src/components/question/QuestionDetailForm.tsx">
'use client';
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage, Form } from '@/components/ui/form';
import { Save, Plus, Trash2, ChevronDown, ArrowRight, Info } from 'lucide-react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { toast } from 'sonner';
import { Question, QuestionDTO, QuestionType, QuestionDifficulty, QuestionOptionDTO, QuestionTag } from '@/types/question';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { MultiSelect } from '@/components/ui/multi-select';
import { getQuestionTypeText, getQuestionDifficultyText } from '@/utils/questionUtils';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Separator } from '@/components/ui/separator';
// 创建与QuestionDTO匹配的表单验证模式
const questionFormSchema = z.object({
  title: z.string().min(1, { message: '题目标题不能为空' }),
  description: z.string().optional(),
  type: z.nativeEnum(QuestionType),
  difficulty: z.nativeEnum(QuestionDifficulty),
  analysis: z.string().optional(),
  options: z.array(
    z.object({
      content: z.string().min(1, { message: '选项内容不能为空' }),
      isCorrect: z.boolean(),
      optionOrder: z.number()
    })
  ).optional(),
  answer: z.string().optional(),
  tagIds: z.array(z.number()).optional(),
  institutionId: z.number(),
  score: z.number().min(1, { message: '分值必须大于0' }).max(100, { message: '分值不能超过100' })
});
// 使用类型别名确保表单类型与DTO类型兼容
type FormValues = z.infer<typeof questionFormSchema>;
interface QuestionDetailFormProps {
  question: Question;
  tags: QuestionTag[];
  readOnly?: boolean;
  onSubmit: (data: QuestionDTO) => void;
  isSubmitting?: boolean;
}
export function QuestionDetailForm({ 
  question, 
  tags, 
  readOnly = false, 
  onSubmit, 
  isSubmitting = false 
}: QuestionDetailFormProps) {
  // 将题目数据转换为表单数据
  const toFormValues = (question: Question) => {
    // 确保 tagIds 是数组类型
    const tagIds = question.tagIds || 
                  (question.tags ? question.tags.map(tag => tag.id) : []);
    // 单选题和判断题确保只有一个正确答案
    let options = question.options || [];
    if (question.type === QuestionType.SINGLE_CHOICE || question.type === QuestionType.TRUE_FALSE) {
      const correctIndex = options.findIndex(opt => opt.isCorrect);
      if (correctIndex >= 0) {
        options = options.map((opt, index) => ({
          ...opt,
          isCorrect: index === correctIndex
        }));
      }
    }
    // 判断题内容确保为"正确"和"错误"
    if (question.type === QuestionType.TRUE_FALSE && (!options || options.length !== 2)) {
      // 创建判断题的默认选项
      options = [
        { content: '正确', isCorrect: true, optionOrder: 0 } as any,
        { content: '错误', isCorrect: false, optionOrder: 1 } as any
      ];
    }
    return {
      title: question.title,
      description: question.description || '',
      type: question.type,
      difficulty: question.difficulty,
      analysis: question.analysis || '',
      options: options.map(opt => ({
        content: opt.content,
        isCorrect: opt.isCorrect,
        optionOrder: opt.optionOrder
      })),
      answer: question.answer || '',
      tagIds: tagIds,
      institutionId: question.institutionId,
      // @ts-ignore - 处理可能在Question类型中不存在score字段的问题
      score: question.score || 1 // 默认分值为1
    };
  };
  // 设置表单
  const form = useForm<FormValues>({
    resolver: zodResolver(questionFormSchema),
    defaultValues: toFormValues(question)
  });
  // 当外部问题数据更新时，重置表单
  useEffect(() => {
    form.reset(toFormValues(question));
  }, [question, form]);
  // 处理表单提交
  const handleSubmit = (data: FormValues) => {
    try {
      // 确保不修改题目类型
      data.type = question.type;
      // 基础表单验证
      if (!data.title.trim()) {
        toast.error("题目标题不能为空");
        return;
      }
      // 验证分值
      if (!data.score || data.score < 1 || data.score > 100) {
        toast.error("分值必须在1-100之间");
        return;
      }
      // 根据题目类型进行特定验证
      if (data.type === QuestionType.SINGLE_CHOICE || data.type === QuestionType.MULTIPLE_CHOICE) {
        // 选项验证
        if (!data.options || data.options.length < 2) {
          toast.error(`${data.type === QuestionType.SINGLE_CHOICE ? "单选题" : "多选题"}至少需要两个选项`);
          return;
        }
        // 确保所有选项都有内容
        const emptyOptions = data.options.filter(option => !option.content.trim());
        if (emptyOptions.length > 0) {
          toast.error("所有选项都必须填写内容");
          return;
        }
        // 确保选择题至少有一个正确答案
        const hasCorrectOption = data.options.some(option => option.isCorrect);
        if (!hasCorrectOption) {
          toast.error("请至少选择一个正确答案");
          return;
        }
        // 单选题确保只有一个正确答案
        if (data.type === QuestionType.SINGLE_CHOICE) {
          const correctCount = data.options.filter(option => option.isCorrect).length;
          if (correctCount > 1) {
            toast.error("单选题只能有一个正确答案");
            return;
          }
        }
      }
      // 创建提交数据对象
      const submitData: QuestionDTO = {
        ...data,
        // 确保其他必要字段存在
        institutionId: data.institutionId || question.institutionId,
        // 确保content字段正确设置 - 用description的值
        content: data.description,
        // 确保score字段正确设置
        score: data.score
      };
      console.log('最终提交数据:', submitData);
      // 直接调用提交回调
      onSubmit(submitData);
    } catch (error) {
      console.error('表单提交错误:', error);
      toast.error('表单提交失败: ' + (error instanceof Error ? error.message : '未知错误'));
    }
  };
  // 添加选项
  const addOption = () => {
    const currentOptions = form.getValues('options') || [];
    form.setValue('options', [
      ...currentOptions, 
      { content: '', isCorrect: false, optionOrder: currentOptions.length }
    ]);
  };
  // 删除选项
  const removeOption = (index: number) => {
    const currentOptions = form.getValues('options') || [];
    if (currentOptions.length <= 2) {
      toast.error('选择题至少需要两个选项');
      return;
    }
    const newOptions = currentOptions.filter((_, i) => i !== index)
      .map((opt, i) => ({ ...opt, optionOrder: i }));
    form.setValue('options', newOptions);
  };
  // 获取标签选项
  const tagOptions = tags.map(tag => ({
    label: tag.name,
    value: tag.id
  }));
  // 处理标签选择变更
  const handleTagChange = (values: (number | string)[]) => {
    // 将字符串值转换为数字
    const numericValues = values.map(val => 
      typeof val === 'string' ? parseInt(val, 10) : val
    ) as number[];
    // 直接设置表单值并触发表单验证
    form.setValue('tagIds', numericValues, { 
      shouldValidate: true,
      shouldDirty: true,
      shouldTouch: true
    });
  };
  // 处理单选题选项选择
  const handleSingleChoiceChange = (value: string) => {
    const index = parseInt(value);
    const options = form.getValues('options') || [];
    // 创建一个新的选项数组，确保只有一个正确答案
    const updatedOptions = options.map((opt, idx) => ({
      ...opt,
      isCorrect: idx === index
    }));
    // 更新表单值
    form.setValue('options', updatedOptions, {
      shouldValidate: true,
      shouldDirty: true,
      shouldTouch: true
    });
  };
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>题目基本信息</CardTitle>
            <CardDescription>设置题目的标题、类型、难度和分值</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {/* 题目标题 */}
              <FormField
                control={form.control}
                name="title"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>题目标题</FormLabel>
                    <FormControl>
                      <Input {...field} className="w-full" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {/* 题目类型 - 只读 */}
                <FormField
                  control={form.control}
                  name="type"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>题目类型</FormLabel>
                      <FormControl>
                        <div className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background">
                          {getQuestionTypeText(field.value)}
                        </div>
                      </FormControl>
                    </FormItem>
                  )}
                />
                {/* 难度级别 */}
                <FormField
                  control={form.control}
                  name="difficulty"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>难度级别</FormLabel>
                      <Select
                        onValueChange={(value) => field.onChange(parseInt(value))}
                        defaultValue={field.value.toString()}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="选择难度级别" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value={QuestionDifficulty.EASY.toString()}>
                            {getQuestionDifficultyText(QuestionDifficulty.EASY)}
                          </SelectItem>
                          <SelectItem value={QuestionDifficulty.MEDIUM.toString()}>
                            {getQuestionDifficultyText(QuestionDifficulty.MEDIUM)}
                          </SelectItem>
                          <SelectItem value={QuestionDifficulty.HARD.toString()}>
                            {getQuestionDifficultyText(QuestionDifficulty.HARD)}
                          </SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                {/* 分值设置 */}
                <FormField
                  control={form.control}
                  name="score"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>分值</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          min="1" 
                          max="100" 
                          {...field}
                          onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}
                          value={field.value}
                        />
                      </FormControl>
                      <FormDescription className="text-xs">
                        设置题目分值 (1-100)
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>
              {/* 题目描述 */}
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>题目描述</FormLabel>
                    <FormControl>
                      <Textarea {...field} placeholder="请输入题目描述" className="min-h-[100px]" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>
              {form.watch('type') === QuestionType.SINGLE_CHOICE && "单选题选项"}
              {form.watch('type') === QuestionType.MULTIPLE_CHOICE && "多选题选项"}
              {form.watch('type') === QuestionType.TRUE_FALSE && "判断题选项"}
              {form.watch('type') === QuestionType.FILL_BLANK && "填空题答案"}
              {form.watch('type') === QuestionType.SHORT_ANSWER && "简答题答案"}
            </CardTitle>
            <CardDescription>
              {form.watch('type') === QuestionType.SINGLE_CHOICE && "设置单选题的选项和正确答案（单选）"}
              {form.watch('type') === QuestionType.MULTIPLE_CHOICE && "设置多选题的选项和正确答案（可多选）"}
              {form.watch('type') === QuestionType.TRUE_FALSE && "设置判断题的正确答案"}
              {form.watch('type') === QuestionType.FILL_BLANK && "填写填空题的参考答案"}
              {form.watch('type') === QuestionType.SHORT_ANSWER && "填写简答题的参考答案"}
            </CardDescription>
          </CardHeader>
          <CardContent>
            {/* 选择题选项编辑区域 */}
            {(form.watch('type') === QuestionType.SINGLE_CHOICE || 
              form.watch('type') === QuestionType.MULTIPLE_CHOICE) && (
              <div className="space-y-3">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center">
                    <div className="mr-2 text-sm font-medium">选项列表</div>
                    <Badge variant="outline" className="text-xs">
                      {form.watch('options')?.length || 0} 个选项
                    </Badge>
                  </div>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={addOption}
                  >
                    <Plus className="h-4 w-4 mr-1" />
                    添加选项
                  </Button>
                </div>
                <div className="space-y-2 rounded-md border p-3">
                  {form.watch('type') === QuestionType.SINGLE_CHOICE && (
                    <div className="grid grid-cols-[1fr_auto_auto] gap-3">
                      <div className="text-sm font-medium text-muted-foreground">选项内容</div>
                      <div className="text-sm font-medium text-muted-foreground text-center">正确答案</div>
                      <div></div>
                    </div>
                  )}
                  {form.watch('type') === QuestionType.SINGLE_CHOICE && (
                    <RadioGroup
                      value={form.watch('options')?.findIndex(opt => opt.isCorrect)?.toString() || ''}
                      onValueChange={handleSingleChoiceChange}
                      className="space-y-2"
                    >
                      {form.watch('options')?.map((option, index) => (
                        <div key={index} className="grid grid-cols-[1fr_auto_auto] gap-3 items-center">
                          <FormField
                            control={form.control}
                            name={`options.${index}.content`}
                            render={({ field }) => (
                              <FormItem className="m-0">
                                <FormControl>
                                  <Input {...field} placeholder={`选项 ${index + 1}`} />
                                </FormControl>
                              </FormItem>
                            )}
                          />
                          <div className="flex justify-center">
                            <RadioGroupItem value={index.toString()} id={`option-${index}`} />
                          </div>
                          <Button
                            type="button"
                            variant="ghost"
                            size="icon"
                            onClick={() => removeOption(index)}
                          >
                            <Trash2 className="h-4 w-4 text-destructive" />
                          </Button>
                        </div>
                      ))}
                    </RadioGroup>
                  )}
                  {form.watch('type') === QuestionType.MULTIPLE_CHOICE && (
                    <div className="space-y-2">
                      <div className="grid grid-cols-[1fr_auto_auto] gap-3">
                        <div className="text-sm font-medium text-muted-foreground">选项内容</div>
                        <div className="text-sm font-medium text-muted-foreground text-center">正确答案</div>
                        <div></div>
                      </div>
                      {form.watch('options')?.map((option, index) => (
                        <div key={index} className="grid grid-cols-[1fr_auto_auto] gap-3 items-center">
                          <FormField
                            control={form.control}
                            name={`options.${index}.content`}
                            render={({ field }) => (
                              <FormItem className="m-0">
                                <FormControl>
                                  <Input {...field} placeholder={`选项 ${index + 1}`} />
                                </FormControl>
                              </FormItem>
                            )}
                          />
                          <div className="flex justify-center">
                            <FormField
                              control={form.control}
                              name={`options.${index}.isCorrect`}
                              render={({ field }) => (
                                <FormItem className="m-0">
                                  <FormControl>
                                    <Checkbox
                                      checked={field.value}
                                      onCheckedChange={field.onChange}
                                    />
                                  </FormControl>
                                </FormItem>
                              )}
                            />
                          </div>
                          <Button
                            type="button"
                            variant="ghost"
                            size="icon"
                            onClick={() => removeOption(index)}
                          >
                            <Trash2 className="h-4 w-4 text-destructive" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            )}
            {/* 判断题选项 */}
            {form.watch('type') === QuestionType.TRUE_FALSE && (
              <div className="space-y-3">
                <div className="text-sm font-medium">选择正确答案</div>
                <div className="rounded-md border p-4">
                  <RadioGroup
                    value={form.watch('options')?.findIndex(opt => opt.isCorrect)?.toString() || '0'}
                    onValueChange={(value) => {
                      const updatedOptions = [
                        { content: '正确', isCorrect: value === '0', optionOrder: 0 },
                        { content: '错误', isCorrect: value === '1', optionOrder: 1 }
                      ];
                      form.setValue('options', updatedOptions);
                    }}
                    className="flex flex-col space-y-3"
                  >
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="0" id="true-option" />
                      <Label htmlFor="true-option" className="text-base">正确</Label>
                    </div>
                    <div className="flex items-center space-x-2">
                      <RadioGroupItem value="1" id="false-option" />
                      <Label htmlFor="false-option" className="text-base">错误</Label>
                    </div>
                  </RadioGroup>
                </div>
              </div>
            )}
            {/* 填空题和简答题的答案 */}
            {(form.watch('type') === QuestionType.FILL_BLANK || 
              form.watch('type') === QuestionType.SHORT_ANSWER) && (
              <FormField
                control={form.control}
                name="answer"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>参考答案</FormLabel>
                    <FormControl>
                      <Textarea {...field} placeholder="请输入参考答案" className="min-h-[150px]" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            )}
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>题目解析与标签</CardTitle>
            <CardDescription>添加题目解析和相关标签</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {/* 解析编辑区域 */}
            <FormField
              control={form.control}
              name="analysis"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>题目解析</FormLabel>
                  <FormControl>
                    <Textarea {...field} placeholder="请输入题目解析" className="min-h-[150px]" />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {/* 标签选择区域 */}
            <FormField
              control={form.control}
              name="tagIds"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>题目标签</FormLabel>
                  <FormControl>
                    <MultiSelect
                      options={tagOptions}
                      selected={field.value || []}
                      onSelectChange={handleTagChange}
                      placeholder="选择标签"
                      disabled={false}
                      className="cursor-pointer hover:border-primary focus:border-primary"
                    />
                  </FormControl>
                  <FormDescription className="text-xs">
                    选择适合题目的标签，可多选
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />
          </CardContent>
          <CardFooter className="flex justify-end pt-2">
            <Button 
              type="button" 
              disabled={isSubmitting}
              onClick={form.handleSubmit(handleSubmit)}
              className="relative"
            >
              {isSubmitting && (
                <span className="absolute inset-0 flex items-center justify-center bg-primary/80 rounded-md">
                  <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                </span>
              )}
              <Save className="h-4 w-4 mr-1" />
              {isSubmitting ? '保存中...' : '保存修改'}
            </Button>
          </CardFooter>
        </Card>
      </form>
    </Form>
  );
}
</file>

<file path="front/src/components/question/QuestionGroupList.tsx">
'use client';
import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Skeleton } from '@/components/ui/skeleton';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Card, CardContent } from '@/components/ui/card';
import { 
  MoreHorizontal, 
  Search, 
  Plus,
  Edit,
  Trash2,
  FolderPlus,
  Eye,
  CheckSquare
} from 'lucide-react';
import debounce from 'lodash/debounce';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Checkbox } from '@/components/ui/checkbox';
import { questionGroupService, questionService, questionTagService } from '@/services';
import { Question, QuestionDifficulty, QuestionGroup, QuestionType, QuestionTag } from '@/types/question';
import { getQuestionTypeText, getQuestionDifficultyText, getQuestionDifficultyColor } from '@/utils/questionUtils';
import { getCreateGroupUrl, getEditGroupUrl } from '@/utils/navigationUtils';
interface QuestionGroupListProps {
  institutionId: number;
  onDataChange?: () => void;
}
interface GroupQuestion extends Question {
  groupItemId: number;
}
export function QuestionGroupList({ institutionId, onDataChange }: QuestionGroupListProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [groups, setGroups] = useState<QuestionGroup[]>([]);
  const [searchKeyword, setSearchKeyword] = useState('');
  const [expandedGroups, setExpandedGroups] = useState<string[]>([]);
  const [groupQuestions, setGroupQuestions] = useState<Record<number, GroupQuestion[]>>({});
  const [loadingGroups, setLoadingGroups] = useState<Record<number, boolean>>({});
  const [selectedGroupId, setSelectedGroupId] = useState<number | null>(null);
  const [isAddQuestionsDialogOpen, setIsAddQuestionsDialogOpen] = useState(false);
  const [availableQuestions, setAvailableQuestions] = useState<Question[]>([]);
  const [selectedQuestions, setSelectedQuestions] = useState<number[]>([]);
  const [isLoadingQuestions, setIsLoadingQuestions] = useState(false);
  const [questionSearchKeyword, setQuestionSearchKeyword] = useState('');
  const [selectedQuestionType, setSelectedQuestionType] = useState<string>('');
  const [selectedQuestionDifficulty, setSelectedQuestionDifficulty] = useState<string>('');
  const [selectedQuestionTagId, setSelectedQuestionTagId] = useState<string>('');
  const [questionTags, setQuestionTags] = useState<QuestionTag[]>([]);
  // 使用 useCallback 和 debounce 优化搜索
  const debouncedFetchGroups = useCallback(
    debounce(async (keyword: string) => {
      setIsLoading(true);
      try {
        const response = await questionGroupService.getGroups({
          keyword,
          page: 0,
          size: 100
        });
        setGroups(response.content);
      } catch (error) {
        console.error('获取题组列表失败:', error);
        toast.error('获取题组列表失败');
      } finally {
        setIsLoading(false);
      }
    }, 300),
    []
  );
  // 监听搜索关键词变化
  useEffect(() => {
    debouncedFetchGroups(searchKeyword);
    return () => {
      debouncedFetchGroups.cancel();
    };
  }, [searchKeyword, debouncedFetchGroups]);
  // 获取题组列表
  const fetchGroups = async () => {
    debouncedFetchGroups(searchKeyword);
    // 如果提供了onDataChange回调，触发它
    if (onDataChange) {
      onDataChange();
    }
  };
  // 处理搜索
  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchKeyword(e.target.value);
  };
  // 处理题组展开/收起 - 只负责数据加载
  const handleGroupExpand = async (groupId: string) => {
    // 如果正在加载，直接返回
    const id = parseInt(groupId);
    if (loadingGroups[id]) return;
    // 只有没有缓存数据时才加载
    if (!groupQuestions[id]) {
      setLoadingGroups(prev => ({ ...prev, [id]: true }));
      try {
        const items = await questionGroupService.getGroupItems(id);
        setGroupQuestions(prev => ({ 
          ...prev, 
          [id]: items.map(item => ({
            ...item.question,
            groupItemId: item.id
          }))
        }));
      } catch (error) {
        console.error('获取题组题目失败:', error);
        toast.error('获取题组题目失败');
      } finally {
        setLoadingGroups(prev => ({ ...prev, [id]: false }));
      }
    }
  };
  // 创建题组
  const handleCreateGroup = () => {
    router.push(getCreateGroupUrl());
  };
  // 编辑题组
  const handleEditGroup = (id: number) => {
    router.push(getEditGroupUrl(id));
  };
  // 删除题组
  const handleDeleteGroup = async (id: number) => {
    if (confirm('确定要删除此题组吗？')) {
      try {
        await questionGroupService.deleteGroup(id);
        // 删除后更新展开状态和题目缓存
        const groupIdStr = id.toString();
        setExpandedGroups(prev => prev.filter(groupId => groupId !== groupIdStr));
        setGroupQuestions(prev => {
          const newState = { ...prev };
          delete newState[id];
          return newState;
        });
        toast.success('删除成功');
        fetchGroups();
      } catch (error) {
        console.error('删除题组失败:', error);
        toast.error('删除题组失败');
      }
    }
  };
  // 加载标签列表
  useEffect(() => {
    if (institutionId) {
      loadQuestionTags();
    }
  }, [institutionId]);
  // 获取题目标签列表
  const loadQuestionTags = async () => {
    try {
      const response = await questionTagService.getAllQuestionTags(institutionId);
      setQuestionTags(response);
    } catch (error) {
      console.error('获取题目标签列表失败:', error);
    }
  };
  // 加载可用题目列表
  const loadAvailableQuestions = async () => {
    if (!selectedGroupId) return;
    setIsLoadingQuestions(true);
    try {
      // 处理标签ID
      const tagId = selectedQuestionTagId && selectedQuestionTagId !== 'all' 
        ? parseInt(selectedQuestionTagId) 
        : undefined;
      const tagIds = tagId ? [tagId] : undefined;
      const response = await questionService.getQuestionList({
        keyword: questionSearchKeyword,
        type: selectedQuestionType && selectedQuestionType !== 'all' ? parseInt(selectedQuestionType) : undefined,
        difficulty: selectedQuestionDifficulty && selectedQuestionDifficulty !== 'all' ? parseInt(selectedQuestionDifficulty) : undefined,
        tagIds: tagIds,
        page: 0,
        pageSize: 100
      });
      setAvailableQuestions(response.content);
    } catch (error) {
      console.error('获取题目列表失败:', error);
      toast.error('获取题目列表失败');
    } finally {
      setIsLoadingQuestions(false);
    }
  };
  // 监听题目筛选条件变化
  useEffect(() => {
    if (isAddQuestionsDialogOpen) {
      loadAvailableQuestions();
    }
  }, [questionSearchKeyword, selectedQuestionType, selectedQuestionDifficulty, selectedQuestionTagId]);
  // 处理添加题目到题组
  const handleAddQuestionsToGroup = async () => {
    if (!selectedGroupId || selectedQuestions.length === 0) return;
    try {
      // 使用questionGroupService.addQuestionsToGroup方法，它调用了正确的API
      await questionGroupService.addQuestionsToGroup(selectedGroupId, selectedQuestions);
      // 添加成功后，如果组已经展开，则需要重新加载题目
      if (expandedGroups.includes(selectedGroupId.toString())) {
        // 清除当前组的题目缓存，强制重新加载
        setGroupQuestions(prev => {
          const newState = { ...prev };
          delete newState[selectedGroupId];
          return newState;
        });
        // 重新加载题目
        handleGroupExpand(selectedGroupId.toString());
      }
      // 重新获取题组列表以更新题目数量
      fetchGroups();
      toast.success('添加题目成功', {
        description: `已成功添加 ${selectedQuestions.length} 个题目到题组`
      });
      setIsAddQuestionsDialogOpen(false);
      setSelectedQuestions([]);
    } catch (error) {
      console.error('添加题目失败:', error);
      toast.error('添加题目失败');
    }
  };
  // 处理选择题目
  const handleQuestionSelect = (questionId: number) => {
    setSelectedQuestions(prev => {
      if (prev.includes(questionId)) {
        return prev.filter(id => id !== questionId);
      } else {
        return [...prev, questionId];
      }
    });
  };
  // 处理全选题目
  const handleSelectAllQuestions = (checked: boolean) => {
    if (checked) {
      setSelectedQuestions(availableQuestions.map(q => q.id));
    } else {
      setSelectedQuestions([]);
    }
  };
  // 修改添加题目的处理函数
  const handleAddQuestions = (groupId: number) => {
    setSelectedGroupId(groupId);
    setSelectedQuestions([]);
    setQuestionSearchKeyword('');
    setSelectedQuestionType('');
    setSelectedQuestionDifficulty('');
    setSelectedQuestionTagId('');
    setIsAddQuestionsDialogOpen(true);
    loadAvailableQuestions();
  };
  // 查看题目详情
  const handleViewQuestion = (questionId: number) => {
    router.push(`/dashboard/questions/${questionId}`);
  };
  // 从题组中移除题目
  const handleRemoveQuestion = async (groupId: number, itemId: number) => {
    if (confirm('确定要从题组中移除此题目吗？')) {
      try {
        await questionGroupService.removeItemFromGroup(groupId, itemId);
        // 更新本地缓存中的题目列表
        setGroupQuestions(prev => {
          const updatedQuestions = prev[groupId]?.filter(q => q.groupItemId !== itemId) || [];
          return {
            ...prev,
            [groupId]: updatedQuestions
          };
        });
        // 更新题组列表以刷新题目计数
        fetchGroups();
        toast.success('移除成功');
      } catch (error) {
        console.error('移除题目失败:', error);
        toast.error('移除题目失败');
      }
    }
  };
  // 加载骨架屏
  if (isLoading && groups.length === 0) {
    return (
      <div className="space-y-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex justify-between items-center">
              <Skeleton className="h-10 w-1/4" />
              <Skeleton className="h-10 w-28" />
            </div>
          </CardContent>
        </Card>
        {[...Array(3)].map((_, index) => (
          <Card key={index}>
            <CardContent className="p-4">
              <Skeleton className="h-12 w-full" />
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }
  return (
    <div className="space-y-4">
      {/* 搜索和操作栏 */}
      <Card>
        <CardContent className="p-4">
          <div className="flex flex-col sm:flex-row justify-between gap-4">
            <div className="flex flex-1 items-center space-x-2">
              <Input
                placeholder="搜索题组..."
                value={searchKeyword}
                onChange={handleSearch}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    debouncedFetchGroups(searchKeyword);
                  }
                }}
                className="max-w-sm"
              />
              <Button 
                variant="outline" 
                size="icon"
                onClick={() => debouncedFetchGroups(searchKeyword)}
              >
                <Search className="h-4 w-4" />
              </Button>
            </div>
            <Button onClick={(e) => {
              e.stopPropagation();
              handleCreateGroup();
            }}>
              <Plus className="h-4 w-4 mr-2" />
              创建题组
            </Button>
          </div>
        </CardContent>
      </Card>
      {/* 题组列表 */}
      <Accordion
        type="multiple"
        value={expandedGroups}
        onValueChange={(value) => {
          // 直接更新状态
          setExpandedGroups(value);
          // 检查新展开的组ID
          const newExpandedIds = value.filter(id => !expandedGroups.includes(id));
          // 对每个新展开的组加载数据
          newExpandedIds.forEach(groupId => {
            handleGroupExpand(groupId);
          });
        }}
        className="space-y-2"
      >
        {groups.map((group) => (
          <AccordionItem
            key={group.id}
            value={group.id.toString()}
            className="border rounded-lg"
          >
            <div className="flex items-center justify-between px-4">
              <AccordionTrigger className="flex-1 hover:no-underline">
                <div className="flex items-center space-x-4">
                  <span className="font-medium">{group.name}</span>
                  <Badge variant="outline">
                    {group.questionCount} 题
                  </Badge>
                </div>
              </AccordionTrigger>
              <div className="flex items-center space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleAddQuestions(group.id);
                  }}
                >
                  <FolderPlus className="h-4 w-4 mr-2" />
                  添加题目
                </Button>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button 
                      variant="ghost" 
                      size="sm" 
                      onClick={(e) => {
                        e.stopPropagation();
                      }}
                    >
                      <MoreHorizontal className="h-4 w-4" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end">
                    <DropdownMenuItem onClick={(e) => {
                      e.stopPropagation();
                      handleEditGroup(group.id);
                    }}>
                      <Edit className="h-4 w-4 mr-2" />
                      编辑
                    </DropdownMenuItem>
                    <DropdownMenuItem onClick={(e) => {
                      e.stopPropagation();
                      handleDeleteGroup(group.id);
                    }}>
                      <Trash2 className="h-4 w-4 mr-2" />
                      删除
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </div>
            <AccordionContent>
              <div className="px-4 pb-4">
                {loadingGroups[group.id] ? (
                  <div className="space-y-2">
                    {[...Array(3)].map((_, index) => (
                      <Skeleton key={index} className="h-12 w-full" />
                    ))}
                  </div>
                ) : groupQuestions[group.id]?.length === 0 ? (
                  <div className="text-center py-8 text-muted-foreground">
                    暂无题目
                  </div>
                ) : (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>题目</TableHead>
                        <TableHead>类型</TableHead>
                        <TableHead>难度</TableHead>
                        <TableHead className="text-right">操作</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {groupQuestions[group.id]?.map((question) => (
                        <TableRow key={question.id}>
                          <TableCell>{question.title}</TableCell>
                          <TableCell>{getQuestionTypeText(question.type)}</TableCell>
                          <TableCell>
                            <Badge variant={getQuestionDifficultyColor(question.difficulty)}>
                              {getQuestionDifficultyText(question.difficulty)}
                            </Badge>
                          </TableCell>
                          <TableCell className="text-right">
                            <div className="flex items-center justify-end space-x-2">
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => handleViewQuestion(question.id)}
                              >
                                <Eye className="h-4 w-4 mr-2" />
                                查看
                              </Button>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => handleRemoveQuestion(group.id, question.groupItemId)}
                              >
                                <Trash2 className="h-4 w-4 mr-2" />
                                移除
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                )}
              </div>
            </AccordionContent>
          </AccordionItem>
        ))}
      </Accordion>
      {groups.length === 0 && !isLoading && (
        <div className="text-center py-8 text-muted-foreground">
          暂无题组
        </div>
      )}
      {/* 添加题目弹窗 */}
      <Dialog open={isAddQuestionsDialogOpen} onOpenChange={setIsAddQuestionsDialogOpen}>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle className="text-xl font-bold flex items-center">
              <FolderPlus className="h-5 w-5 mr-2 text-primary" />
              添加题目到题组
            </DialogTitle>
            <DialogDescription className="text-base">
              选择要添加到题组的题目，已选择 <span className="font-semibold text-primary">{selectedQuestions.length}</span> 个题目
            </DialogDescription>
          </DialogHeader>
          {/* 搜索和筛选 */}
          <div className="bg-muted/30 p-4 rounded-lg space-y-4">
            {/* 第一层：搜索框 */}
            <div className="flex items-center space-x-2 w-full">
              <Input
                placeholder="搜索题目..."
                value={questionSearchKeyword}
                onChange={(e) => setQuestionSearchKeyword(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    loadAvailableQuestions();
                  }
                }}
                className="flex-1 border-primary/20 focus-visible:ring-primary/30"
              />
              <Button 
                variant="outline" 
                size="icon"
                onClick={loadAvailableQuestions}
                className="border-primary/20 hover:bg-primary/10 hover:text-primary"
              >
                <Search className="h-4 w-4" />
              </Button>
            </div>
            {/* 第二层：筛选选项 */}
            <div className="flex items-center flex-wrap gap-3">
              <div className="flex items-center space-x-2">
                <span className="text-sm text-muted-foreground">题目类型:</span>
                <Select
                  value={selectedQuestionType}
                  onValueChange={setSelectedQuestionType}
                >
                  <SelectTrigger className="w-[160px] border-primary/20 focus:ring-primary/30">
                    <SelectValue placeholder="选择题目类型" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">全部类型</SelectItem>
                    {Object.values(QuestionType)
                      .filter(type => typeof type === 'number')
                      .map(type => (
                        <SelectItem key={type} value={type.toString()}>
                          {getQuestionTypeText(type as QuestionType)}
                        </SelectItem>
                      ))
                    }
                  </SelectContent>
                </Select>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-sm text-muted-foreground">难度级别:</span>
                <Select value={selectedQuestionDifficulty} onValueChange={setSelectedQuestionDifficulty}>
                  <SelectTrigger className="w-[160px] border-primary/20 focus:ring-primary/30">
                    <SelectValue placeholder="选择难度" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">全部难度</SelectItem>
                    <SelectItem value={QuestionDifficulty.EASY.toString()}>
                      {getQuestionDifficultyText(QuestionDifficulty.EASY)}
                    </SelectItem>
                    <SelectItem value={QuestionDifficulty.MEDIUM.toString()}>
                      {getQuestionDifficultyText(QuestionDifficulty.MEDIUM)}
                    </SelectItem>
                    <SelectItem value={QuestionDifficulty.HARD.toString()}>
                      {getQuestionDifficultyText(QuestionDifficulty.HARD)}
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="flex items-center space-x-2">
                <span className="text-sm text-muted-foreground">标签筛选:</span>
                <Select 
                  value={selectedQuestionTagId} 
                  onValueChange={setSelectedQuestionTagId}
                >
                  <SelectTrigger className="w-[160px] border-primary/20 focus:ring-primary/30">
                    <SelectValue placeholder="选择标签" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">所有标签</SelectItem>
                    {questionTags.map(tag => (
                      <SelectItem key={tag.id} value={tag.id.toString()}>
                        {tag.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>
          <ScrollArea className="h-[400px] pr-4 border rounded-lg">
            {isLoadingQuestions ? (
              <div className="space-y-2 p-4">
                {[...Array(3)].map((_, index) => (
                  <Skeleton key={index} className="h-16 w-full" />
                ))}
              </div>
            ) : availableQuestions.length === 0 ? (
              <div className="flex flex-col items-center justify-center h-full py-12 text-muted-foreground">
                <Search className="h-12 w-12 mb-4 text-muted-foreground/60" />
                <p className="text-lg">暂无匹配的题目</p>
                <p className="text-sm">尝试修改搜索条件或清除筛选器</p>
              </div>
            ) : (
              <div className="space-y-1 p-2">
                <div className="flex items-center space-x-2 p-2 sticky top-0 bg-background z-10 border-b">
                  <Checkbox
                    id="select-all"
                    checked={availableQuestions.length > 0 && selectedQuestions.length === availableQuestions.length}
                    onCheckedChange={handleSelectAllQuestions}
                    className="border-primary/40 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground"
                  />
                  <label htmlFor="select-all" className="text-sm font-medium cursor-pointer select-none">
                    全选 ({availableQuestions.length} 个题目)
                  </label>
                </div>
                {availableQuestions.map((question) => (
                  <div
                    key={question.id}
                    className={`flex items-start space-x-2 p-3 rounded-md hover:bg-muted/60 cursor-pointer transition-colors ${
                      selectedQuestions.includes(question.id) ? 'bg-primary/10 border border-primary/20' : ''
                    }`}
                    onClick={() => handleQuestionSelect(question.id)}
                  >
                    <Checkbox
                      checked={selectedQuestions.includes(question.id)}
                      onCheckedChange={() => handleQuestionSelect(question.id)}
                      className="mt-1 border-primary/40 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground"
                    />
                    <div className="flex-1">
                      <div className="font-medium">{question.title}</div>
                      <div className="flex items-center mt-1 space-x-2">
                        <Badge variant="outline" className="bg-muted/80">
                          {getQuestionTypeText(question.type)}
                        </Badge>
                        <Badge variant={getQuestionDifficultyColor(question.difficulty)}>
                          {getQuestionDifficultyText(question.difficulty)}
                        </Badge>
                        {question.tags && question.tags.length > 0 && (
                          <div className="flex items-center space-x-1">
                            {question.tags.slice(0, 2).map(tag => (
                              <Badge key={tag.id} variant="secondary" className="text-xs">
                                {tag.name}
                              </Badge>
                            ))}
                            {question.tags.length > 2 && (
                              <span className="text-xs text-muted-foreground">
                                +{question.tags.length - 2}
                              </span>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                    <Button 
                      variant="ghost" 
                      size="icon" 
                      className={`h-8 w-8 opacity-0 group-hover:opacity-100 ${
                        selectedQuestions.includes(question.id) ? 'opacity-100' : ''
                      }`}
                      onClick={(e) => {
                        e.stopPropagation();
                        handleQuestionSelect(question.id);
                      }}
                    >
                      <CheckSquare className={`h-4 w-4 ${
                        selectedQuestions.includes(question.id) ? 'text-primary' : 'text-muted-foreground'
                      }`} />
                    </Button>
                  </div>
                ))}
              </div>
            )}
          </ScrollArea>
          <DialogFooter>
            <div className="flex items-center justify-between w-full">
              <div className="flex items-center text-sm text-muted-foreground space-x-2">
                <CheckSquare className="h-4 w-4 text-primary" />
                <span>已选择 <span className="font-semibold text-foreground">{selectedQuestions.length}</span> 个题目</span>
              </div>
              <div className="space-x-2">
                <Button
                  variant="outline"
                  onClick={() => setIsAddQuestionsDialogOpen(false)}
                >
                  取消
                </Button>
                <Button
                  onClick={handleAddQuestionsToGroup}
                  disabled={selectedQuestions.length === 0}
                  className="bg-primary hover:bg-primary/90"
                >
                  <FolderPlus className="h-4 w-4 mr-2" />
                  添加选中题目
                </Button>
              </div>
            </div>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
</file>

<file path="front/src/components/question/QuestionImportModal.tsx">
'use client';
import { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { AlertCircle, CheckCircle, Upload, X } from 'lucide-react';
import questionImportService from '@/services/question-import';
import { QuestionImportResultVO } from '@/types/question';
import useQuestionStore from '@/stores/question-store';
interface QuestionImportModalProps {
  institutionId: number;
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}
export default function QuestionImportModal({
  institutionId,
  isOpen,
  onClose,
  onSuccess
}: QuestionImportModalProps) {
  // 引用文件输入
  const fileInputRef = useRef<HTMLInputElement>(null);
  // 文件状态
  const [file, setFile] = useState<File | null>(null);
  const [fileName, setFileName] = useState<string>('');
  // 导入状态
  const [isImporting, setImporting] = useState<boolean>(false);
  const [progress, setProgress] = useState<number>(0);
  const [importResult, setImportResult] = useState<QuestionImportResultVO | null>(null);
  const [error, setError] = useState<string | null>(null);
  // 触发文件选择
  const handleSelectFile = () => {
    fileInputRef.current?.click();
  };
  // 文件选择变更处理
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0];
    if (selectedFile) {
      // 验证文件类型
      if (!selectedFile.name.endsWith('.xlsx') && !selectedFile.name.endsWith('.xls')) {
        setError('请选择Excel文件（.xlsx或.xls格式）');
        return;
      }
      // 清除之前的状态
      setFile(selectedFile);
      setFileName(selectedFile.name);
      setError(null);
      setImportResult(null);
    }
  };
  // 清除选择的文件
  const handleClearFile = () => {
    setFile(null);
    setFileName('');
    setError(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };
  // 下载模板
  const handleDownloadTemplate = async () => {
    try {
      await questionImportService.downloadTemplate();
    } catch (error) {
      setError('下载模板失败，请重试');
      console.error('下载模板失败:', error);
    }
  };
  // 导入处理
  const handleImport = async () => {
    if (!file) {
      setError('请先选择要导入的Excel文件');
      return;
    }
    try {
      setImporting(true);
      setProgress(10); // 初始进度
      // 模拟上传进度
      const progressInterval = setInterval(() => {
        setProgress((prev) => {
          if (prev >= 90) {
            clearInterval(progressInterval);
            return 90;
          }
          return prev + 10;
        });
      }, 500);
      // 执行导入
      const result = await questionImportService.importQuestions(file, institutionId);
      // 清除进度模拟
      clearInterval(progressInterval);
      setProgress(100);
      // 设置结果
      setImportResult(result);
      // 如果导入成功，通知父组件
      if (result.successCount > 0) {
        onSuccess();
      }
    } catch (error) {
      console.error('导入失败:', error);
      setError(typeof error === 'object' && error !== null && 'message' in error 
        ? (error as {message: string}).message
        : '导入失败，请检查文件格式或网络连接');
    } finally {
      setImporting(false);
    }
  };
  // 重置状态，准备新导入
  const handleReset = () => {
    setFile(null);
    setFileName('');
    setError(null);
    setImportResult(null);
    setProgress(0);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };
  // 关闭模态框
  const handleClose = () => {
    if (!isImporting) {
      handleReset();
      onClose();
    }
  };
  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>批量导入试题</DialogTitle>
        </DialogHeader>
        {/* 文件上传区域 */}
        {!importResult && (
          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <Button 
                type="button" 
                variant="outline" 
                onClick={handleDownloadTemplate}
                disabled={isImporting}
              >
                下载导入模板
              </Button>
            </div>
            <div 
              className={`border-2 border-dashed rounded-md p-6 text-center cursor-pointer hover:border-primary transition-colors
                ${file ? 'border-green-500' : 'border-gray-300'}`}
              onClick={handleSelectFile}
            >
              <input
                ref={fileInputRef}
                type="file"
                accept=".xlsx,.xls"
                onChange={handleFileChange}
                className="hidden"
                disabled={isImporting}
              />
              {!file ? (
                <div className="space-y-2">
                  <Upload className="mx-auto h-12 w-12 text-gray-400" />
                  <div className="text-sm text-gray-500">
                    点击上传或拖拽Excel文件到此处
                  </div>
                  <div className="text-xs text-gray-400">
                    支持.xlsx和.xls格式
                  </div>
                </div>
              ) : (
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2 text-left">
                    <CheckCircle className="h-5 w-5 text-green-500" />
                    <div>
                      <div className="text-sm font-medium">{fileName}</div>
                      <div className="text-xs text-gray-500">
                        {(file.size / 1024).toFixed(2)} KB
                      </div>
                    </div>
                  </div>
                  <Button 
                    type="button" 
                    variant="ghost" 
                    size="sm" 
                    onClick={(e) => {
                      e.stopPropagation();
                      handleClearFile();
                    }}
                    disabled={isImporting}
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              )}
            </div>
            {/* 错误提示 */}
            {error && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
            {/* 导入进度 */}
            {isImporting && (
              <div className="space-y-2">
                <Progress value={progress} className="h-2" />
                <div className="text-xs text-gray-500 text-center">
                  正在导入，请稍候...
                </div>
              </div>
            )}
          </div>
        )}
        {/* 导入结果 */}
        {importResult && (
          <div className="space-y-4">
            <Alert variant={importResult.failureCount > 0 ? "destructive" : "default"}>
              <div className="space-y-2">
                <div className="font-medium">导入完成</div>
                <div className="text-sm space-y-1">
                  <div>总条目数：{importResult.totalCount}</div>
                  <div>成功导入：{importResult.successCount}</div>
                  <div>导入失败：{importResult.failureCount}</div>
                  <div>用时：{(importResult.duration / 1000).toFixed(2)}秒</div>
                </div>
              </div>
            </Alert>
            {/* 失败项目列表 */}
            {importResult.failureItems.length > 0 && (
              <div className="space-y-2">
                <Label>失败记录：</Label>
                <div className="max-h-40 overflow-y-auto border rounded-md p-2">
                  {importResult.failureItems.map((item, index) => (
                    <div key={index} className="text-sm py-1 border-b last:border-0">
                      <div className="font-medium">第{item.rowIndex}行: {item.title}</div>
                      <div className="text-red-500">{item.errorMessage}</div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}
        {/* 底部按钮 */}
        <DialogFooter>
          {!importResult ? (
            <>
              <Button 
                type="button" 
                variant="outline" 
                onClick={handleClose}
                disabled={isImporting}
              >
                取消
              </Button>
              <Button 
                type="button" 
                onClick={handleImport}
                disabled={!file || isImporting}
              >
                开始导入
              </Button>
            </>
          ) : (
            <>
              <Button 
                type="button" 
                variant="outline" 
                onClick={handleReset}
              >
                继续导入
              </Button>
              <Button 
                type="button" 
                onClick={handleClose}
              >
                完成
              </Button>
            </>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/question/QuestionList.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Card, CardContent } from '@/components/ui/card';
import { 
  MoreHorizontal, 
  Search, 
  Filter,
  Trash2,
  Edit,
  Eye,
  Copy,
  ChevronDown,
  ChevronUp,
  AlertCircle,
  Save,
  Plus,
} from 'lucide-react';
import { questionService, questionTagService } from '@/services';
import { Question, QuestionDifficulty, QuestionType, QuestionTag, QuestionOptionDTO } from '@/types/question';
import useQuestionStore from '@/stores/question-store';
import { getQuestionTypeText, getQuestionDifficultyText } from '@/utils/questionUtils';
import { executeQuestionSearch } from '@/services/question-helper';
import { QuestionDetailForm } from './QuestionDetailForm';
import { 
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Textarea } from '@/components/ui/textarea';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import React from 'react';
interface QuestionListProps {
  institutionId: number;
}
export function QuestionList({ institutionId }: QuestionListProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);
  const [questions, setQuestions] = useState<Question[]>([]);
  const [totalQuestions, setTotalQuestions] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize] = useState(10);
  // 筛选状态
  const [searchTitle, setSearchTitle] = useState('');
  const [filterTypeLocal, setFilterTypeLocal] = useState<QuestionType | null>(null);
  const [filterDifficulty, setFilterDifficulty] = useState<QuestionDifficulty | null>(null);
  const [filterTagIds, setFilterTagIds] = useState<number[]>([]);
  const [selectedTagId, setSelectedTagId] = useState<string>('');
  const [tags, setTags] = useState<QuestionTag[]>([]);
  // 界面交互状态
  const [expandedQuestionId, setExpandedQuestionId] = useState<number | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [questionToDelete, setQuestionToDelete] = useState<number | null>(null);
  // 编辑状态
  const [editingAnalysis, setEditingAnalysis] = useState<{[key: number]: string}>({});
  const [editingOptions, setEditingOptions] = useState<{[key: number]: QuestionOptionDTO[]}>({});
  // 从问题状态存储获取状态
  const {
    selectedQuestionIds,
    isSelectAll,
    setPage,
    setFilter,
    selectQuestion,
    selectAll,
    setFilterType: setGlobalFilterType,
  } = useQuestionStore();
  // 加载标签列表
  useEffect(() => {
    if (institutionId) {
      loadTags();
    }
  }, [institutionId]);
  // 获取所有标签
  const loadTags = async () => {
    try {
      const response = await questionTagService.getAllQuestionTags(institutionId);
      setTags(response);
    } catch (error) {
      console.error('获取标签列表失败:', error);
      toast.error('获取标签失败');
    }
  };
  // 加载问题列表
  useEffect(() => {
    fetchQuestions();
  }, [currentPage, pageSize, filterTypeLocal, filterDifficulty, filterTagIds, institutionId]);
  // 获取问题列表
  const fetchQuestions = async () => {
    if (!institutionId) return;
    setIsLoading(true);
    try {
      const result = await questionService.getQuestionList({
        institutionId,
        page: currentPage - 1,
        pageSize,
        type: filterTypeLocal === null ? undefined : filterTypeLocal,
        difficulty: filterDifficulty === null ? undefined : filterDifficulty,
        tagIds: filterTagIds,
        search: searchTitle
      });
      setQuestions(result.content);
      setTotalQuestions(result.totalElements);
    } catch (error) {
      console.error('获取问题列表失败:', error);
      toast.error('获取题目列表失败');
    } finally {
      setIsLoading(false);
    }
  };
  // 处理搜索
  const handleSearch = () => {
    setCurrentPage(1);
    fetchQuestions();
  };
  // 处理类型筛选变化
  const handleTypeChange = (value: string) => {
    const typeNumber = value === 'all' ? null : parseInt(value) as QuestionType;
    setFilterTypeLocal(typeNumber);
    setGlobalFilterType(typeNumber);
    setCurrentPage(1);
  };
  // 处理难度筛选变化
  const handleDifficultyChange = (value: string) => {
    const difficultyNumber = value === 'all' ? null : parseInt(value) as QuestionDifficulty;
    setFilterDifficulty(difficultyNumber);
    setCurrentPage(1);
  };
  // 处理标签筛选变化
  const handleTagChange = (value: string) => {
    const tagId = value === 'all' ? null : parseInt(value);
    const tagIds = tagId ? [tagId] : [];
    setSelectedTagId(value);
    setFilterTagIds(tagIds);
    setCurrentPage(1);
  };
  // 处理展开/折叠
  const handleToggleExpand = (questionId: number) => {
    // 如果之前已经展开并且要关闭，先清除编辑状态
    if (expandedQuestionId === questionId) {
      setEditingAnalysis({});
      setEditingOptions({});
      setExpandedQuestionId(null);
    } else {
      // 如果要打开，初始化编辑状态
      const question = questions.find(q => q.id === questionId);
      if (question) {
        setEditingAnalysis({ [questionId]: question.analysis || '' });
        setEditingOptions({ [questionId]: question.options || [] });
      }
      setExpandedQuestionId(questionId);
    }
  };
  // 打开删除确认对话框
  const openDeleteDialog = (questionId: number) => {
    setQuestionToDelete(questionId);
    setDeleteDialogOpen(true);
  };
  // 处理删除
  const handleDelete = async () => {
    if (!questionToDelete) return;
    try {
      // 先检查题目是否被任何题组引用
      const checkResult = await questionService.checkQuestionReferences(questionToDelete, institutionId);
      if (checkResult.isReferenced) {
        // 如果题目被引用，显示更友好的错误信息
        toast.error('无法删除题目：该题目正在被一个或多个题组使用。请先从题组中移除此题目，然后再尝试删除。');
        setDeleteDialogOpen(false);
        setQuestionToDelete(null);
        return;
      }
      // 如果没有被引用，正常执行删除
      await questionService.deleteQuestion(questionToDelete);
      toast.success('删除成功');
      await fetchQuestions();
      setDeleteDialogOpen(false);
      setQuestionToDelete(null);
    } catch (error: any) {
      console.error('删除题目失败:', error);
      // 处理外键约束错误
      if (error.response?.data?.message?.includes('foreign key constraint fails') || 
          error.message?.includes('DataIntegrityViolationException')) {
        toast.error('无法删除题目：该题目正在被一个或多个题组使用。请先从题组中移除此题目，然后再尝试删除。');
      } else {
        toast.error('删除失败: ' + (error.message || '未知错误'));
      }
    }
  };
  // 处理解析编辑
  const handleAnalysisChange = (questionId: number, analysis: string) => {
    setEditingAnalysis({
      ...editingAnalysis,
      [questionId]: analysis
    });
  };
  // 处理选项编辑 - 内容
  const handleOptionContentChange = (questionId: number, optionIndex: number, content: string) => {
    const options = [...(editingOptions[questionId] || [])];
    options[optionIndex] = { ...options[optionIndex], content };
    setEditingOptions({
      ...editingOptions,
      [questionId]: options
    });
  };
  // 处理选项编辑 - 正确性
  const handleOptionCorrectChange = (questionId: number, optionIndex: number, isCorrect: boolean, questionType: QuestionType) => {
    const options = [...(editingOptions[questionId] || [])];
    // 如果是单选题，先重置所有选项为不正确
    if (questionType === QuestionType.SINGLE_CHOICE && isCorrect) {
      options.forEach(option => option.isCorrect = false);
    }
    options[optionIndex] = { ...options[optionIndex], isCorrect };
    setEditingOptions({
      ...editingOptions,
      [questionId]: options
    });
  };
  // 添加选项
  const handleAddOption = (questionId: number) => {
    const options = [...(editingOptions[questionId] || [])];
    options.push({ 
      content: '', 
      isCorrect: false, 
      optionOrder: options.length 
    });
    setEditingOptions({
      ...editingOptions,
      [questionId]: options
    });
  };
  // 删除选项
  const handleRemoveOption = (questionId: number, optionIndex: number) => {
    const options = [...(editingOptions[questionId] || [])];
    if (options.length <= 2) {
      toast.error('选择题至少需要两个选项');
      return;
    }
    const updatedOptions = options.filter((_, i) => i !== optionIndex)
      .map((opt, i) => ({ ...opt, optionOrder: i }));
    setEditingOptions({
      ...editingOptions,
      [questionId]: updatedOptions
    });
  };
  // 保存修改
  const handleSaveChanges = async (questionId: number) => {
    const question = questions.find(q => q.id === questionId);
    if (!question) return;
    const options = editingOptions[questionId] || [];
    const analysis = editingAnalysis[questionId] || '';
    // 验证选项
    if ((question.type === QuestionType.SINGLE_CHOICE || question.type === QuestionType.MULTIPLE_CHOICE) && options.length < 2) {
      toast.error('选项数量不足，请至少添加两个选项');
      return;
    }
    // 验证单选题必须有一个正确答案
    if (question.type === QuestionType.SINGLE_CHOICE && !options.some(opt => opt.isCorrect)) {
      toast.error('单选题必须有一个正确答案');
      return;
    }
    // 验证多选题必须有至少一个正确答案
    if (question.type === QuestionType.MULTIPLE_CHOICE && !options.some(opt => opt.isCorrect)) {
      toast.error('多选题必须至少有一个正确答案');
      return;
    }
    // 验证所有选项都有内容
    if (options.some(opt => !opt.content.trim())) {
      toast.error('所有选项都必须填写内容');
      return;
    }
    setIsSubmitting(true);
    try {
      // 从原始题目中获取分值，如果不存在则使用默认值
      // @ts-ignore - 处理可能在Question类型中不存在score字段的问题
      const score = question.score !== undefined ? question.score : 1;
      const data = {
        id: question.id,
        title: question.title,
        content: question.description || '',
        type: question.type,
        difficulty: question.difficulty,
        options: options,
        answer: question.answer,
        analysis: analysis,
        institutionId: institutionId,
        tagIds: question.tagIds || question.tags?.map(tag => tag.id) || [],
        score: score
      };
      console.log('提交更新数据:', data);
      const response = await questionService.updateQuestion(questionId, data);
      console.log('更新成功:', response);
      toast.success('题目更新成功');
      // 刷新题目列表
      await fetchQuestions();
      // 关闭编辑状态
      setExpandedQuestionId(null);
      setEditingAnalysis({});
      setEditingOptions({});
    } catch (error: any) {
      console.error('更新题目失败:', error);
      if (error.response?.data?.message) {
        toast.error(`更新失败: ${error.response.data.message}`);
      } else {
        toast.error('更新失败，请检查数据格式');
      }
    } finally {
      setIsSubmitting(false);
    }
  };
  // 渲染选项编辑器
  const renderOptionEditor = (questionId: number, questionType: QuestionType) => {
    const options = editingOptions[questionId] || [];
    return (
      <div className="space-y-3">
        <div className="flex items-center justify-between">
          <h3 className="text-sm font-medium">选项</h3>
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={() => handleAddOption(questionId)}
          >
            <Plus className="h-3 w-3 mr-1" />
            添加选项
          </Button>
        </div>
        <div className="space-y-2">
          {questionType === QuestionType.SINGLE_CHOICE ? (
            <RadioGroup
              value={options.findIndex(opt => opt.isCorrect) >= 0 ? 
                options.findIndex(opt => opt.isCorrect).toString() : ""}
              onValueChange={(value) => {
                // 直接更新所有选项，而不是调用handleOptionCorrectChange
                const updatedOptions = options.map((option, idx) => ({
                  ...option,
                  isCorrect: idx === parseInt(value)
                }));
                setEditingOptions({
                  ...editingOptions,
                  [questionId]: updatedOptions
                });
              }}
            >
              {options.map((option, index) => (
                <div key={index} className="flex items-center gap-2">
                  <Input
                    value={option.content}
                    onChange={(e) => handleOptionContentChange(questionId, index, e.target.value)}
                    placeholder={`选项 ${index + 1}`}
                    className="flex-1"
                  />
                  <div className="flex items-center">
                    <RadioGroupItem value={index.toString()} id={`option-${questionId}-${index}`} />
                    <Label htmlFor={`option-${questionId}-${index}`} className="ml-2">
                      {option.isCorrect ? '正确答案' : ''}
                    </Label>
                  </div>
                  <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleRemoveOption(questionId, index);
                    }}
                    title="删除选项"
                  >
                    <Trash2 className="h-4 w-4 text-destructive" />
                  </Button>
                </div>
              ))}
            </RadioGroup>
          ) : (
            // 多选题保持原样
            options.map((option, index) => (
              <div key={index} className="flex items-center gap-2">
                <Input
                  value={option.content}
                  onChange={(e) => handleOptionContentChange(questionId, index, e.target.value)}
                  placeholder={`选项 ${index + 1}`}
                  className="flex-1"
                />
                <Checkbox
                  checked={option.isCorrect}
                  onCheckedChange={(checked) => {
                    handleOptionCorrectChange(
                      questionId, 
                      index, 
                      !!checked, 
                      QuestionType.MULTIPLE_CHOICE
                    );
                  }}
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="icon"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleRemoveOption(questionId, index);
                  }}
                  title="删除选项"
                >
                  <Trash2 className="h-4 w-4 text-destructive" />
                </Button>
              </div>
            ))
          )}
        </div>
      </div>
    );
  };
  // 判断题渲染
  const renderTrueFalseEditor = (questionId: number) => {
    const options = editingOptions[questionId] || [];
    if (options.length !== 2) {
      // 初始化选项
      const updatedOptions = [
        { content: '正确', isCorrect: options.some(o => o.content === '正确' && o.isCorrect), optionOrder: 0 },
        { content: '错误', isCorrect: options.some(o => o.content === '错误' && o.isCorrect), optionOrder: 1 }
      ];
      setEditingOptions({
        ...editingOptions,
        [questionId]: updatedOptions
      });
    }
    return (
      <div className="space-y-2">
        <h3 className="text-sm font-medium">答案</h3>
        <RadioGroup
          value={options.findIndex(opt => opt.isCorrect).toString()}
          onValueChange={(value) => {
            const updatedOptions = [
              { content: '正确', isCorrect: value === '0', optionOrder: 0 },
              { content: '错误', isCorrect: value === '1', optionOrder: 1 }
            ];
            setEditingOptions({
              ...editingOptions,
              [questionId]: updatedOptions
            });
          }}
        >
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="0" id={`true-${questionId}`} />
              <Label htmlFor={`true-${questionId}`}>正确</Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="1" id={`false-${questionId}`} />
              <Label htmlFor={`false-${questionId}`}>错误</Label>
            </div>
          </div>
        </RadioGroup>
      </div>
    );
  };
  return (
    <div className="space-y-3">
      {/* 搜索和筛选区域 */}
      <div className="flex flex-wrap items-center gap-2 mb-4">
        <div className="flex-1 flex flex-wrap items-center gap-2">
          <div className="min-w-[180px] w-full sm:w-auto">
            <Input
              placeholder="搜索题目..."
              value={searchTitle}
              onChange={(e) => setSearchTitle(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
            />
          </div>
          <Select value={filterTypeLocal?.toString() || 'all'} onValueChange={handleTypeChange}>
            <SelectTrigger className="w-[120px]">
              <SelectValue placeholder="题目类型" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">全部类型</SelectItem>
              <SelectItem value={QuestionType.SINGLE_CHOICE.toString()}>
                {getQuestionTypeText(QuestionType.SINGLE_CHOICE)}
              </SelectItem>
              <SelectItem value={QuestionType.MULTIPLE_CHOICE.toString()}>
                {getQuestionTypeText(QuestionType.MULTIPLE_CHOICE)}
              </SelectItem>
              <SelectItem value={QuestionType.TRUE_FALSE.toString()}>
                {getQuestionTypeText(QuestionType.TRUE_FALSE)}
              </SelectItem>
              <SelectItem value={QuestionType.FILL_BLANK.toString()}>
                {getQuestionTypeText(QuestionType.FILL_BLANK)}
              </SelectItem>
              <SelectItem value={QuestionType.SHORT_ANSWER.toString()}>
                {getQuestionTypeText(QuestionType.SHORT_ANSWER)}
              </SelectItem>
            </SelectContent>
          </Select>
          <Select value={filterDifficulty?.toString() || 'all'} onValueChange={handleDifficultyChange}>
            <SelectTrigger className="w-[120px]">
              <SelectValue placeholder="难度级别" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">全部难度</SelectItem>
              <SelectItem value={QuestionDifficulty.EASY.toString()}>
                {getQuestionDifficultyText(QuestionDifficulty.EASY)}
              </SelectItem>
              <SelectItem value={QuestionDifficulty.MEDIUM.toString()}>
                {getQuestionDifficultyText(QuestionDifficulty.MEDIUM)}
              </SelectItem>
              <SelectItem value={QuestionDifficulty.HARD.toString()}>
                {getQuestionDifficultyText(QuestionDifficulty.HARD)}
              </SelectItem>
            </SelectContent>
          </Select>
          <Select value={selectedTagId || 'all'} onValueChange={handleTagChange}>
            <SelectTrigger className="w-[120px]">
              <SelectValue placeholder="标签筛选" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">全部标签</SelectItem>
              {tags.map(tag => (
                <SelectItem key={tag.id} value={tag.id.toString()}>
                  {tag.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Button onClick={handleSearch} size="sm">
            <Search className="h-4 w-4 mr-1" />
            搜索
          </Button>
        </div>
      </div>
      {/* 问题列表 */}
      <div className="space-y-1">
        {isLoading ? (
          // 加载骨架屏
          <div className="border rounded-md overflow-hidden">
            <table className="w-full">
              <thead>
                <tr className="bg-muted">
                  <th className="px-4 py-2 text-left font-medium text-sm">题目</th>
                  <th className="px-4 py-2 text-left font-medium text-sm w-24">类型</th>
                  <th className="px-4 py-2 text-left font-medium text-sm w-24">难度</th>
                  <th className="px-4 py-2 text-right font-medium text-sm w-20">操作</th>
                </tr>
              </thead>
              <tbody>
                {Array.from({ length: 5 }).map((_, i) => (
                  <tr key={i} className="border-t">
                    <td className="px-4 py-3">
                      <Skeleton className="h-4 w-3/4" />
                    </td>
                    <td className="px-4 py-3">
                      <Skeleton className="h-4 w-full" />
                    </td>
                    <td className="px-4 py-3">
                      <Skeleton className="h-4 w-full" />
                    </td>
                    <td className="px-4 py-3">
                      <Skeleton className="h-4 w-full" />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : questions.length === 0 ? (
          // 空状态
          <div className="p-8 flex flex-col items-center justify-center border rounded-md bg-gray-50">
            <AlertCircle className="h-6 w-6 text-muted-foreground mb-1" />
            <p className="text-center text-muted-foreground text-sm">未找到匹配的题目</p>
          </div>
        ) : (
          // 使用表格布局展示问题列表
          <div className="border rounded-md overflow-hidden">
            <table className="w-full">
              <thead>
                <tr className="bg-muted">
                  <th className="px-4 py-2 text-left font-medium text-sm">题目</th>
                  <th className="px-4 py-2 text-left font-medium text-sm w-24">类型</th>
                  <th className="px-4 py-2 text-left font-medium text-sm w-24">难度</th>
                  <th className="px-4 py-2 text-right font-medium text-sm w-20">操作</th>
                </tr>
              </thead>
              <tbody>
                {questions.map((question, index) => {
                  const isExpanded = expandedQuestionId === question.id;
                  // 为不同题型设置不同颜色样式
                  const getTypeStyle = (type: QuestionType) => {
                    switch(type) {
                      case QuestionType.SINGLE_CHOICE: return "bg-blue-50 text-blue-700";
                      case QuestionType.MULTIPLE_CHOICE: return "bg-purple-50 text-purple-700";
                      case QuestionType.TRUE_FALSE: return "bg-green-50 text-green-700";
                      case QuestionType.FILL_BLANK: return "bg-orange-50 text-orange-700";
                      case QuestionType.SHORT_ANSWER: return "bg-pink-50 text-pink-700";
                      default: return "bg-gray-50 text-gray-700";
                    }
                  };
                  // 为不同难度设置不同样式
                  const getDifficultyStyle = (difficulty: QuestionDifficulty) => {
                    switch(difficulty) {
                      case QuestionDifficulty.EASY: return "bg-green-500 text-white";
                      case QuestionDifficulty.MEDIUM: return "bg-black text-white";
                      case QuestionDifficulty.HARD: return "bg-red-500 text-white";
                      default: return "bg-gray-500 text-white";
                    }
                  };
                  return (
                    <React.Fragment key={question.id}>
                      <tr 
                        className={`border-t hover:bg-muted/50 cursor-pointer ${isExpanded ? 'bg-muted/40' : ''}`}
                        onClick={() => handleToggleExpand(question.id)}
                      >
                        <td className="px-4 py-3">
                          <div className="flex flex-col">
                            <div className="flex items-center gap-2">
                              <span className="font-medium text-sm">{question.title}</span>
                              {/* 分值标签 */}
                              <span className="text-xs px-1.5 py-0.5 rounded bg-blue-100 text-blue-800">
                                {question.score || 1}分
                              </span>
                            </div>
                            {question.description && (
                              <p className="text-xs text-muted-foreground line-clamp-1 mt-0.5">
                                {question.description}
                              </p>
                            )}
                            {/* 标签显示 */}
                            {question.tags && question.tags.length > 0 && (
                              <div className="flex flex-wrap gap-1 mt-1">
                                {question.tags.slice(0, 3).map(tag => (
                                  <Badge key={tag.id} variant="outline" className="text-xs px-1 py-0">
                                    {tag.name}
                                  </Badge>
                                ))}
                                {question.tags.length > 3 && (
                                  <span className="text-xs text-muted-foreground">+{question.tags.length - 3}</span>
                                )}
                              </div>
                            )}
                          </div>
                        </td>
                        <td className="px-4 py-3">
                          <span className={`inline-flex text-xs px-2 py-1 rounded-md ${getTypeStyle(question.type)}`}>
                            {getQuestionTypeText(question.type)}
                          </span>
                        </td>
                        <td className="px-4 py-3">
                          <span className={`inline-flex text-xs px-2 py-1 rounded-md ${getDifficultyStyle(question.difficulty)}`}>
                            {getQuestionDifficultyText(question.difficulty)}
                          </span>
                        </td>
                        <td className="px-4 py-3 text-right">
                          <div className="flex justify-end items-center">
                            {isExpanded ? (
                              <ChevronUp className="h-4 w-4 text-muted-foreground" />
                            ) : (
                              <ChevronDown className="h-4 w-4 text-muted-foreground" />
                            )}
                            <DropdownMenu>
                              <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>
                                <Button variant="ghost" size="sm" className="h-8 w-8 p-0 ml-1">
                                  <MoreHorizontal className="h-4 w-4" />
                                </Button>
                              </DropdownMenuTrigger>
                              <DropdownMenuContent align="end">
                                <DropdownMenuItem onClick={() => handleToggleExpand(question.id)}>
                                  <Eye className="h-4 w-4 mr-2" />
                                  展开详情
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={() => router.push(`/dashboard/questions/${question.id}`)}>
                                  <Edit className="h-4 w-4 mr-2" />
                                  编辑全部
                                </DropdownMenuItem>
                                <DropdownMenuItem onClick={() => openDeleteDialog(question.id)}>
                                  <Trash2 className="h-4 w-4 mr-2" />
                                  删除
                                </DropdownMenuItem>
                              </DropdownMenuContent>
                            </DropdownMenu>
                          </div>
                        </td>
                      </tr>
                      {/* 展开的编辑区域 */}
                      {isExpanded && (
                        <tr>
                          <td colSpan={4} className="bg-gray-50 border-t border-dashed">
                            <div className="p-4 space-y-3">
                              {/* 选项编辑区域 */}
                              {(question.type === QuestionType.SINGLE_CHOICE || 
                                question.type === QuestionType.MULTIPLE_CHOICE) && (
                                renderOptionEditor(question.id, question.type)
                              )}
                              {/* 判断题编辑区域 */}
                              {question.type === QuestionType.TRUE_FALSE && (
                                renderTrueFalseEditor(question.id)
                              )}
                              {/* 解析编辑区域 */}
                              <div className="space-y-1">
                                <Label className="text-xs">题目解析</Label>
                                <Textarea
                                  value={
                                    editingAnalysis[question.id] !== undefined 
                                      ? editingAnalysis[question.id] 
                                      : question.analysis || ''
                                  }
                                  onChange={(e) => handleAnalysisChange(question.id, e.target.value)}
                                  placeholder="输入题目解析"
                                  className="min-h-[80px] text-sm"
                                />
                              </div>
                              {/* 保存按钮 */}
                              <div className="flex justify-end pt-2">
                                <Button 
                                  variant="default" 
                                  size="sm"
                                  onClick={() => handleSaveChanges(question.id)}
                                  disabled={isSubmitting}
                                >
                                  {isSubmitting ? (
                                    <>保存中...</>
                                  ) : (
                                    <>
                                      <Save className="h-3.5 w-3.5 mr-1" />
                                      保存修改
                                    </>
                                  )}
                                </Button>
                              </div>
                            </div>
                          </td>
                        </tr>
                      )}
                    </React.Fragment>
                  );
                })}
              </tbody>
            </table>
          </div>
        )}
      </div>
      {/* 分页控件 */}
      {!isLoading && questions.length > 0 && (
        <div className="flex justify-between items-center mt-4">
          <div className="text-xs text-muted-foreground">
            共 {totalQuestions} 条记录，当前第 {currentPage} 页，每页 {pageSize} 条
          </div>
          <div className="flex items-center space-x-1">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
              disabled={currentPage <= 1}
              className="h-7 px-2 text-xs"
            >
              上一页
            </Button>
            <div className="flex items-center">
              {Array.from({ length: Math.min(5, Math.ceil(totalQuestions / pageSize)) }, (_, i) => {
                // 计算要显示的页码
                let pageNum = 1;
                const totalPages = Math.ceil(totalQuestions / pageSize);
                if (totalPages <= 5) {
                  // 如果总页数少于5，显示所有页
                  pageNum = i + 1;
                } else if (currentPage <= 3) {
                  // 当前页接近开始
                  pageNum = i + 1;
                } else if (currentPage >= totalPages - 2) {
                  // 当前页接近结束
                  pageNum = totalPages - 4 + i;
                } else {
                  // 当前页在中间
                  pageNum = currentPage - 2 + i;
                }
                return (
                  <Button
                    key={i}
                    variant={pageNum === currentPage ? "default" : "outline"}
                    size="sm"
                    className="h-7 w-7 p-0 mx-0.5 text-xs"
                    onClick={() => setCurrentPage(pageNum)}
                  >
                    {pageNum}
                  </Button>
                );
              })}
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage(Math.min(Math.ceil(totalQuestions / pageSize), currentPage + 1))}
              disabled={currentPage >= Math.ceil(totalQuestions / pageSize)}
              className="h-7 px-2 text-xs"
            >
              下一页
            </Button>
          </div>
        </div>
      )}
      {/* 删除确认对话框 */}
      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>确认删除</AlertDialogTitle>
            <AlertDialogDescription>
              您确定要删除这道题目吗？此操作不可撤销。
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>取消</AlertDialogCancel>
            <AlertDialogAction onClick={handleDelete}>
              确认删除
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}
</file>

<file path="front/src/components/question/QuestionTagList.tsx">
'use client';
import { useState, useEffect } from 'react';
import { toast } from 'sonner';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Card, CardContent } from '@/components/ui/card';
import { 
  MoreHorizontal, 
  Search,
  Plus,
  Edit,
  Trash2,
  Tag
} from 'lucide-react';
import { questionTagService } from '@/services';
import { QuestionTag, QuestionTagDTO } from '@/types/question';
import useQuestionStore from '@/stores/question-store';
interface QuestionTagListProps {
  institutionId: number;
}
export function QuestionTagList({ institutionId }: QuestionTagListProps) {
  const [isLoading, setIsLoading] = useState(true);
  const [tags, setTags] = useState<QuestionTag[]>([]);
  const [totalCount, setTotalCount] = useState(0);
  const [page, setPage] = useState(0);
  const [pageSize, setPageSize] = useState(10);
  const [searchName, setSearchName] = useState('');
  // 弹窗状态
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isDeleteConfirmOpen, setIsDeleteConfirmOpen] = useState(false);
  const [currentTag, setCurrentTag] = useState<QuestionTag | null>(null);
  const [formData, setFormData] = useState<QuestionTagDTO>({
    name: '',
    description: '',
    institutionId: institutionId
  });
  // 初始加载
  useEffect(() => {
    if (institutionId) {
      fetchTags();
    }
  }, [institutionId, page, pageSize]);
  // 获取问题标签列表
  const fetchTags = async () => {
    setIsLoading(true);
    try {
      const response = await questionTagService.getQuestionTagList({
        page,
        pageSize,
        name: searchName || undefined,
        institutionId
      });
      setTags(response.content);
      setTotalCount(response.totalElements);
    } catch (error) {
      console.error('获取问题标签列表失败:', error);
      toast.error('获取问题标签列表失败');
    } finally {
      setIsLoading(false);
    }
  };
  // 搜索处理
  const handleSearch = () => {
    setPage(0);
    fetchTags();
  };
  // 打开创建对话框
  const handleOpenCreateDialog = () => {
    setCurrentTag(null);
    setFormData({
      name: '',
      description: '',
      institutionId
    });
    setIsDialogOpen(true);
  };
  // 打开编辑对话框
  const handleOpenEditDialog = (tag: QuestionTag) => {
    setCurrentTag(tag);
    setFormData({
      name: tag.name,
      description: tag.description || '',
      institutionId
    });
    setIsDialogOpen(true);
  };
  // 表单输入变更
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  // 保存问题标签
  const handleSaveTag = async () => {
    try {
      if (!formData.name.trim()) {
        toast.error('标签名不能为空');
        return;
      }
      if (currentTag) {
        // 更新已有问题标签
        await questionTagService.updateQuestionTag(currentTag.id, formData);
        toast.success('更新成功');
      } else {
        // 创建新问题标签
        await questionTagService.createQuestionTag(formData);
        toast.success('创建成功');
      }
      setIsDialogOpen(false);
      fetchTags();
    } catch (error) {
      console.error('保存问题标签失败:', error);
      toast.error('保存失败，请重试');
    }
  };
  // 打开删除确认
  const handleOpenDeleteConfirm = (tag: QuestionTag) => {
    setCurrentTag(tag);
    setIsDeleteConfirmOpen(true);
  };
  // 删除问题标签
  const handleDeleteTag = async () => {
    if (!currentTag) return;
    try {
      await questionTagService.deleteQuestionTag(currentTag.id);
      toast.success('删除成功');
      setIsDeleteConfirmOpen(false);
      fetchTags();
    } catch (error) {
      console.error('删除问题标签失败:', error);
      toast.error('删除失败，请重试');
    }
  };
  // 格式化日期
  const formatDate = (dateString?: string) => {
    if (!dateString) return '-';
    return new Date(dateString).toLocaleString('zh-CN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };
  // 加载骨架屏
  if (isLoading && tags.length === 0) {
    return (
      <div className="space-y-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex justify-between items-center">
              <Skeleton className="h-10 w-1/3" />
              <Skeleton className="h-10 w-20" />
            </div>
          </CardContent>
        </Card>
        <div className="rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>
                  <Skeleton className="h-5 w-32" />
                </TableHead>
                <TableHead>
                  <Skeleton className="h-5 w-40" />
                </TableHead>
                <TableHead>
                  <Skeleton className="h-5 w-20" />
                </TableHead>
                <TableHead className="text-right">
                  <Skeleton className="h-5 w-20 ml-auto" />
                </TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {[...Array(5)].map((_, i) => (
                <TableRow key={i}>
                  <TableCell>
                    <Skeleton className="h-5 w-32" />
                  </TableCell>
                  <TableCell>
                    <Skeleton className="h-5 w-full max-w-md" />
                  </TableCell>
                  <TableCell>
                    <Skeleton className="h-5 w-32" />
                  </TableCell>
                  <TableCell className="text-right">
                    <Skeleton className="h-8 w-8 ml-auto" />
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </div>
    );
  }
  return (
    <div className="space-y-4">
      {/* 搜索栏 */}
      <Card>
        <CardContent className="p-4">
          <div className="flex justify-between items-center">
            <div className="flex items-center space-x-2 w-full max-w-sm">
              <Input
                placeholder="搜索标签名称..."
                value={searchName}
                onChange={(e) => setSearchName(e.target.value)}
                className="flex-1"
              />
              <Button onClick={handleSearch} variant="outline" size="icon">
                <Search className="h-4 w-4" />
              </Button>
            </div>
            <Button onClick={handleOpenCreateDialog} size="sm">
              <Plus className="h-4 w-4 mr-2" />
              新建标签
            </Button>
          </div>
        </CardContent>
      </Card>
      {/* 问题标签列表 */}
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>标签名称</TableHead>
              <TableHead>描述</TableHead>
              <TableHead>创建时间</TableHead>
              <TableHead className="text-right">操作</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {tags.length === 0 ? (
              <TableRow>
                <TableCell colSpan={4} className="text-center py-8 text-muted-foreground">
                  暂无数据
                </TableCell>
              </TableRow>
            ) : (
              tags.map((tag) => (
                <TableRow key={tag.id}>
                  <TableCell>
                    <div className="flex items-center gap-2">
                      <Tag className="h-4 w-4 text-muted-foreground" />
                      <span className="font-medium">{tag.name}</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="truncate max-w-md" title={tag.description || ''}>
                      {tag.description || <span className="text-muted-foreground text-xs">无描述</span>}
                    </div>
                  </TableCell>
                  <TableCell>{formatDate(tag.createdAt)}</TableCell>
                  <TableCell className="text-right">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem onClick={() => handleOpenEditDialog(tag)}>
                          <Edit className="h-4 w-4 mr-2" />
                          编辑
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => handleOpenDeleteConfirm(tag)}>
                          <Trash2 className="h-4 w-4 mr-2" />
                          删除
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>
      {/* 创建/编辑对话框 */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {currentTag ? '编辑标签' : '创建新标签'}
            </DialogTitle>
            <DialogDescription>
              {currentTag ? '修改标签信息' : '创建一个新的题目标签'}
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <label htmlFor="name" className="text-sm font-medium">
                标签名称 <span className="text-red-500">*</span>
              </label>
              <Input
                id="name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                placeholder="输入标签名称"
              />
            </div>
            <div className="space-y-2">
              <label htmlFor="description" className="text-sm font-medium">
                描述
              </label>
              <Input
                id="description"
                name="description"
                value={formData.description}
                onChange={handleInputChange}
                placeholder="输入标签描述（可选）"
              />
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
              取消
            </Button>
            <Button onClick={handleSaveTag}>保存</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      {/* 删除确认对话框 */}
      <Dialog open={isDeleteConfirmOpen} onOpenChange={setIsDeleteConfirmOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>确认删除</DialogTitle>
            <DialogDescription>
              您确定要删除标签 "{currentTag?.name}" 吗？删除后不可恢复。
              删除标签不会影响已标记的题目，但这些题目将不再与此标签关联。
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDeleteConfirmOpen(false)}>
              取消
            </Button>
            <Button variant="destructive" onClick={handleDeleteTag}>
              删除
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
</file>

<file path="front/src/components/ui/accordion.tsx">
"use client"
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDownIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Accordion({
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Root>) {
  return <AccordionPrimitive.Root data-slot="accordion" {...props} />
}
function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot="accordion-item"
      className={cn("border-b last:border-b-0", className)}
      {...props}
    />
  )
}
function AccordionTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        data-slot="accordion-trigger"
        className={cn(
          "focus-visible:border-ring focus-visible:ring-ring/50 flex flex-1 items-start justify-between gap-4 rounded-md py-4 text-left text-sm font-medium transition-all outline-none hover:underline focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&[data-state=open]>svg]:rotate-180",
          className
        )}
        {...props}
      >
        {children}
        <ChevronDownIcon className="text-muted-foreground pointer-events-none size-4 shrink-0 translate-y-0.5 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
}
function AccordionContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Content>) {
  return (
    <AccordionPrimitive.Content
      data-slot="accordion-content"
      className="data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down overflow-hidden text-sm"
      {...props}
    >
      <div className={cn("pt-0 pb-4", className)}>{children}</div>
    </AccordionPrimitive.Content>
  )
}
export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="front/src/components/ui/alert-dialog.tsx">
"use client"
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"
function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}
function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}
function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}
function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}
function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}
function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}
function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}
function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  )
}
function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}
function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  )
}
export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="front/src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)
const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"
const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"
const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"
export { Alert, AlertTitle, AlertDescription }
</file>

<file path="front/src/components/ui/avatar.tsx">
"use client"
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"
import { cn } from "@/lib/utils"
function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}
function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}
function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}
export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="front/src/components/ui/badge.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
        success:
          "border-transparent bg-green-500 text-white [a&]:hover:bg-green-600/90 focus-visible:ring-green-500/20 dark:focus-visible:ring-green-500/40",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)
function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"
  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}
export { Badge, badgeVariants }
</file>

<file path="front/src/components/ui/breadcrumb.tsx">
import * as React from "react"
import { ChevronRight, MoreHorizontal } from "lucide-react"
import { Slot } from "@radix-ui/react-slot"
import { cn } from "@/lib/utils"
const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"
const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"
const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"
const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"
  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"
const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"
const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children || <ChevronRight className="h-4 w-4" />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"
const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">更多</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"
export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="front/src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)
function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}
export { Button, buttonVariants }
</file>

<file path="front/src/components/ui/captcha.tsx">
'use client';
import { useState, useEffect } from 'react';
import { toast } from 'sonner';
import Image from 'next/image';
import authService from '@/services/auth';
interface CaptchaProps {
  onCaptchaKeyChange: (captchaKey: string) => void;
}
export function Captcha({ onCaptchaKeyChange }: CaptchaProps) {
  const [captchaImage, setCaptchaImage] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const fetchCaptcha = async () => {
    setIsLoading(true);
    try {
      console.log('验证码组件：开始获取验证码');
      const captchaData = await authService.getCaptcha();
      if (!captchaData.captchaId) {
        throw new Error('获取验证码Key失败');
      }
      console.log('验证码组件：获取到验证码Key', captchaData.captchaId);
      setCaptchaImage(captchaData.captchaImage);
      onCaptchaKeyChange(captchaData.captchaId);
    } catch (error) {
      console.error('验证码组件：获取验证码失败', error);
      toast.error('获取验证码失败，请点击刷新');
    } finally {
      setIsLoading(false);
    }
  };
  // 组件挂载后获取验证码
  useEffect(() => {
    fetchCaptcha();
  }, []);
  return (
    <div 
      className="h-10 cursor-pointer border rounded-md overflow-hidden flex items-center justify-center min-w-[100px] captcha-component"
      onClick={fetchCaptcha}
      title="点击刷新验证码"
    >
      {isLoading ? (
        <div className="animate-pulse flex space-x-1 items-center">
          <div className="h-2 w-2 bg-gray-300 rounded-full"></div>
          <div className="h-2 w-2 bg-gray-300 rounded-full"></div>
          <div className="h-2 w-2 bg-gray-300 rounded-full"></div>
        </div>
      ) : captchaImage ? (
        <img 
          src={captchaImage} 
          alt="验证码" 
          className="h-full w-auto"
        />
      ) : (
        <span className="text-sm text-gray-500">点击获取</span>
      )}
    </div>
  );
}
</file>

<file path="front/src/components/ui/card.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}
function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn("flex flex-col gap-1.5 px-6", className)}
      {...props}
    />
  )
}
function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}
function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}
function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6", className)}
      {...props}
    />
  )
}
export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="front/src/components/ui/checkbox.tsx">
"use client"
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}
export { Checkbox }
</file>

<file path="front/src/components/ui/command.tsx">
"use client"
import * as React from "react"
import { DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"
import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"
const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName
interface CommandDialogProps extends DialogProps {}
const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}
const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))
CommandInput.displayName = CommandPrimitive.Input.displayName
const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))
CommandList.displayName = CommandPrimitive.List.displayName
const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))
CommandEmpty.displayName = CommandPrimitive.Empty.displayName
const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))
CommandGroup.displayName = CommandPrimitive.Group.displayName
const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName
const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  />
))
CommandItem.displayName = CommandPrimitive.Item.displayName
const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"
export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="front/src/components/ui/dialog.tsx">
"use client"
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}
function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}
function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}
function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}
function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}
function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}
function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}
function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}
function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}
function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}
</file>

<file path="front/src/components/ui/dropdown-menu.tsx">
"use client"
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}
function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}
function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}
function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}
function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}
function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive-foreground data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/40 data-[variant=destructive]:focus:text-destructive-foreground data-[variant=destructive]:*:[svg]:!text-destructive-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}
function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}
function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}
function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}
function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}
function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}
function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}
function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}
function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}
function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}
export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}
</file>

<file path="front/src/components/ui/empty.tsx">
import React, { ReactNode } from 'react';
import { cn } from '@/lib/utils';
interface EmptyProps {
  /** 图标元素 */
  icon?: ReactNode;
  /** 标题文字 */
  title?: string;
  /** 描述文字 */
  description?: string;
  /** 操作按钮 */
  action?: React.ReactNode;
  /** 额外的className */
  className?: string;
}
/**
 * 空状态组件，用于显示列表或内容为空的状态
 */
export function Empty({
  icon,
  title,
  description,
  action,
  className,
}: EmptyProps) {
  return (
    <div className={cn(
      'flex flex-col items-center justify-center py-12 text-center',
      className
    )}>
      {icon && (
        <div className="text-muted-foreground mb-4">
          {icon}
        </div>
      )}
      {title && (
        <h3 className="text-lg font-semibold mb-2">
          {title}
        </h3>
      )}
      {description && (
        <p className="text-sm text-muted-foreground max-w-sm">
          {description}
        </p>
      )}
      {action && (
        <div className="mt-4">
          {action}
        </div>
      )}
    </div>
  );
}
</file>

<file path="front/src/components/ui/form.tsx">
"use client"
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"
import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"
const Form = FormProvider
type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}
const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)
const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}
const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)
  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }
  const { id } = itemContext
  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}
type FormItemContextValue = {
  id: string
}
const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)
function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()
  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}
function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()
  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive-foreground", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}
function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()
  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}
function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()
  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children
  if (!body) {
    return null
  }
  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive-foreground text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}
export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="front/src/components/ui/input.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}
export { Input }
</file>

<file path="front/src/components/ui/label.tsx">
"use client"
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cn } from "@/lib/utils"
function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}
export { Label }
</file>

<file path="front/src/components/ui/multi-select.tsx">
'use client';
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";
import {
  Check as CheckIcon,
  XCircle,
  ChevronDown,
  X as XIcon,
  WandSparkles,
  ChevronsUpDown,
} from "lucide-react";
import { useEffect, useState } from "react";
import { cn } from "@/lib/utils";
import { Separator } from "@/components/ui/separator";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
  CommandSeparator,
} from "@/components/ui/command";
/**
 * Variants for the multi-select component to handle different styles.
 */
const multiSelectVariants = cva(
  "m-1 transition ease-in-out delay-150 hover:-translate-y-1 hover:scale-110 duration-300",
  {
    variants: {
      variant: {
        default:
          "border-foreground/10 text-foreground bg-card hover:bg-card/80",
        secondary:
          "border-foreground/10 bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        inverted: "inverted",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);
/**
 * 导出OptionType类型以便重用
 */
export type OptionType = {
  label: string;
  value: number | string;
  icon?: React.ComponentType<{ className?: string }>;
};
/**
 * Props for MultiSelect component
 */
interface MultiSelectProps
  extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, 'onChange' | 'defaultValue'>,
    VariantProps<typeof multiSelectVariants> {
  /**
   * 选项数组
   */
  options: OptionType[];
  /**
   * 选中值变化时的回调函数 (新的接口兼容原始组件)
   */
  onValueChange?: (value: (number | string)[]) => void;
  /**
   * 当前选中的值 (新的接口兼容原始组件)
   */
  defaultSelectedValues?: (number | string)[];
  /**
   * 当前选中的值 (保留旧接口以兼容现有代码)
   */
  selected?: (number | string)[];
  /**
   * 值变化时的回调 (保留旧接口以兼容现有代码)
   */
  onSelectChange?: (selected: (number | string)[]) => void;
  /**
   * 占位符文本
   */
  placeholder?: string;
  /**
   * 动画持续时间（秒）
   */
  animation?: number;
  /**
   * 最多显示的选中项数量
   */
  maxCount?: number;
  /**
   * 是否为模态弹出框
   */
  modalPopover?: boolean;
  /**
   * 禁用状态
   */
  disabled?: boolean;
}
export const MultiSelect = React.forwardRef<
  HTMLButtonElement,
  MultiSelectProps
>(
  (
    {
      options,
      onValueChange,
      onSelectChange,
      variant,
      selected = [],
      defaultSelectedValues,
      placeholder = "选择选项",
      animation = 0,
      maxCount = 3,
      modalPopover = false,
      className,
      disabled = false,
      ...props
    },
    ref
  ) => {
    // 使用 defaultSelectedValues 或 selected 作为初始值
    const initialValues = defaultSelectedValues || selected || [];
    const [selectedValues, setSelectedValues] = 
      React.useState<(number | string)[]>(initialValues);
    const [isPopoverOpen, setIsPopoverOpen] = React.useState(false);
    const [isAnimating, setIsAnimating] = React.useState(false);
    const [searchTerm, setSearchTerm] = React.useState("");
    const [filteredOptions, setFilteredOptions] = React.useState(options);
    // 当外部 selected 或 defaultSelectedValues 值变化时更新内部状态
    React.useEffect(() => {
      if (defaultSelectedValues !== undefined) {
        setSelectedValues(defaultSelectedValues);
      } else if (selected !== undefined) {
        setSelectedValues(selected);
      }
    }, [defaultSelectedValues, selected]);
    // 当搜索词改变时过滤选项
    React.useEffect(() => {
      if (searchTerm) {
        setFilteredOptions(
          options.filter((option) => 
            option.label.toLowerCase().includes(searchTerm.toLowerCase())
          )
        );
      } else {
        setFilteredOptions(options);
      }
    }, [searchTerm, options]);
    const handleInputKeyDown = (
      event: React.KeyboardEvent<HTMLInputElement>
    ) => {
      if (event.key === "Enter") {
        setIsPopoverOpen(true);
      } else if (event.key === "Backspace" && !event.currentTarget.value) {
        const newSelectedValues = [...selectedValues];
        newSelectedValues.pop();
        setSelectedValues(newSelectedValues);
        // 调用两个回调函数，确保兼容性
        if (onSelectChange) onSelectChange(newSelectedValues);
        if (onValueChange) onValueChange(newSelectedValues);
      }
    };
    const toggleOption = (option: number | string) => {
      if (disabled) return;
      const newSelectedValues = selectedValues.includes(option)
        ? selectedValues.filter((value) => value !== option)
        : [...selectedValues, option];
      setSelectedValues(newSelectedValues);
      // 调用两个回调函数，确保兼容性
      if (onSelectChange) onSelectChange(newSelectedValues);
      if (onValueChange) onValueChange(newSelectedValues);
      // 保持弹出框打开，以便连续选择
      setIsPopoverOpen(true);
      // 添加额外的动画效果和反馈
      setIsAnimating(true);
      setTimeout(() => setIsAnimating(false), 300);
    };
    const handleClear = () => {
      if (disabled) return;
      setSelectedValues([]);
      // 调用两个回调函数，确保兼容性
      if (onSelectChange) onSelectChange([]);
      if (onValueChange) onValueChange([]);
    };
    const handleTogglePopover = () => {
      if (!disabled) {
        setIsPopoverOpen((prev) => !prev);
      }
    };
    const clearExtraOptions = () => {
      if (disabled) return;
      const newSelectedValues = selectedValues.slice(0, maxCount);
      setSelectedValues(newSelectedValues);
      // 调用两个回调函数，确保兼容性
      if (onSelectChange) onSelectChange(newSelectedValues);
      if (onValueChange) onValueChange(newSelectedValues);
    };
    const toggleAll = () => {
      if (disabled) return;
      if (selectedValues.length === options.length) {
        handleClear();
      } else {
        const allValues = options.map((option) => option.value);
        setSelectedValues(allValues);
        // 调用两个回调函数，确保兼容性
        if (onSelectChange) onSelectChange(allValues);
        if (onValueChange) onValueChange(allValues);
      }
    };
    return (
      <Popover
        open={isPopoverOpen}
        onOpenChange={setIsPopoverOpen}
        modal={modalPopover}
      >
        <PopoverTrigger asChild>
          <Button
            ref={ref}
            type="button"
            {...props}
            disabled={disabled}
            onClick={handleTogglePopover}
            className={cn(
              "flex w-full p-1 rounded-md border min-h-10 h-auto items-center justify-between bg-background hover:bg-background/90 hover:border-primary focus:border-primary [&_svg]:pointer-events-auto",
              disabled && "opacity-50 cursor-not-allowed",
              !disabled && "cursor-pointer",
              className
            )}
            aria-expanded={isPopoverOpen}
            aria-haspopup="true"
            aria-label={`选择${placeholder}`}
            data-trigger="true"
          >
            {selectedValues.length > 0 ? (
              <div className="flex justify-between items-center w-full">
                <div className="flex flex-wrap items-center">
                  {selectedValues.slice(0, maxCount).map((value) => {
                    const option = options.find((o) => o.value === value);
                    const IconComponent = option?.icon;
                    return (
                      <Badge
                        key={String(value)}
                        className={cn(
                          isAnimating ? "animate-bounce" : "",
                          multiSelectVariants({ variant })
                        )}
                        style={{ animationDuration: `${animation}s` }}
                      >
                        {IconComponent && (
                          <IconComponent className="h-4 w-4 mr-2" />
                        )}
                        {option?.label}
                        {!disabled && (
                          <XCircle
                            className="ml-2 h-4 w-4 cursor-pointer"
                            onClick={(event) => {
                              event.stopPropagation();
                              toggleOption(value);
                            }}
                          />
                        )}
                      </Badge>
                    );
                  })}
                  {selectedValues.length > maxCount && (
                    <Badge
                      className={cn(
                        "bg-transparent text-foreground border-foreground/10 hover:bg-transparent",
                        isAnimating ? "animate-bounce" : "",
                        multiSelectVariants({ variant })
                      )}
                      style={{ animationDuration: `${animation}s` }}
                    >
                      {`+ ${selectedValues.length - maxCount} 项`}
                      {!disabled && (
                        <XCircle
                          className="ml-2 h-4 w-4 cursor-pointer"
                          onClick={(event) => {
                            event.stopPropagation();
                            clearExtraOptions();
                          }}
                        />
                      )}
                    </Badge>
                  )}
                </div>
                {!disabled && (
                  <div className="flex items-center justify-between">
                    <XIcon
                      className="h-4 mx-2 cursor-pointer text-muted-foreground"
                      onClick={(event) => {
                        event.stopPropagation();
                        handleClear();
                      }}
                    />
                    <Separator
                      orientation="vertical"
                      className="flex min-h-6 h-full"
                    />
                    <ChevronDown className="h-4 mx-2 cursor-pointer text-muted-foreground" />
                  </div>
                )}
              </div>
            ) : (
              <div className="flex items-center justify-between w-full mx-auto">
                <span className="text-sm text-muted-foreground mx-3">
                  {placeholder}
                </span>
                <ChevronDown className="h-4 cursor-pointer text-muted-foreground mx-2" />
              </div>
            )}
          </Button>
        </PopoverTrigger>
        <PopoverContent
          className="w-auto p-0 z-50"
          align="start"
          onEscapeKeyDown={() => setIsPopoverOpen(false)}
          sideOffset={5}
          onInteractOutside={(e) => {
            // 只有当点击的不是触发器时才关闭
            if (!(e.target as HTMLElement).closest('[data-trigger="true"]')) {
              setIsPopoverOpen(false);
            }
          }}
        >
          <Command className="w-full">
            <CommandInput
              placeholder="搜索标签..."
              value={searchTerm}
              onValueChange={setSearchTerm}
              className="h-9"
            />
            <CommandList className="max-h-[300px] overflow-auto">
              <CommandEmpty>未找到匹配项</CommandEmpty>
              <CommandGroup>
                <CommandItem
                  key="all"
                  onSelect={toggleAll}
                  className="cursor-pointer"
                >
                  <div
                    className={cn(
                      "mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary",
                      selectedValues.length === options.length
                        ? "bg-primary text-primary-foreground"
                        : "opacity-50 [&_svg]:invisible"
                    )}
                  >
                    <CheckIcon className="h-4 w-4" />
                  </div>
                  <span>(全选)</span>
                </CommandItem>
                {filteredOptions.map((option) => {
                  const isSelected = selectedValues.includes(option.value);
                  return (
                    <CommandItem
                      key={String(option.value)}
                      onSelect={() => toggleOption(option.value)}
                      className="cursor-pointer"
                    >
                      <div
                        className={cn(
                          "mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary",
                          isSelected
                            ? "bg-primary text-primary-foreground"
                            : "opacity-50 [&_svg]:invisible"
                        )}
                      >
                        <CheckIcon className="h-4 w-4" />
                      </div>
                      {option.icon && (
                        <option.icon className="mr-2 h-4 w-4 text-muted-foreground" />
                      )}
                      <span>{option.label}</span>
                    </CommandItem>
                  );
                })}
              </CommandGroup>
              <CommandSeparator />
              <CommandGroup>
                <div className="flex items-center justify-between">
                  {selectedValues.length > 0 && (
                    <>
                      <CommandItem
                        onSelect={handleClear}
                        className="flex-1 justify-center cursor-pointer"
                      >
                        清除
                      </CommandItem>
                      <Separator
                        orientation="vertical"
                        className="flex min-h-6 h-full"
                      />
                    </>
                  )}
                  <CommandItem
                    onSelect={() => setIsPopoverOpen(false)}
                    className="flex-1 justify-center cursor-pointer max-w-full"
                  >
                    关闭
                  </CommandItem>
                </div>
              </CommandGroup>
            </CommandList>
          </Command>
        </PopoverContent>
        {animation > 0 && selectedValues.length > 0 && (
          <WandSparkles
            className={cn(
              "cursor-pointer my-2 text-foreground bg-background w-3 h-3",
              isAnimating ? "" : "text-muted-foreground"
            )}
            onClick={() => setIsAnimating(!isAnimating)}
          />
        )}
      </Popover>
    );
  }
);
MultiSelect.displayName = "MultiSelect";
</file>

<file path="front/src/components/ui/pagination.tsx">
import * as React from "react"
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  MoreHorizontalIcon,
} from "lucide-react"
import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"
function Pagination({ className, ...props }: React.ComponentProps<"nav">) {
  return (
    <nav
      role="navigation"
      aria-label="pagination"
      data-slot="pagination"
      className={cn("mx-auto flex w-full justify-center", className)}
      {...props}
    />
  )
}
function PaginationContent({
  className,
  ...props
}: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="pagination-content"
      className={cn("flex flex-row items-center gap-1", className)}
      {...props}
    />
  )
}
function PaginationItem({ ...props }: React.ComponentProps<"li">) {
  return <li data-slot="pagination-item" {...props} />
}
type PaginationLinkProps = {
  isActive?: boolean
} & Pick<React.ComponentProps<typeof Button>, "size"> &
  React.ComponentProps<"a">
function PaginationLink({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) {
  return (
    <a
      aria-current={isActive ? "page" : undefined}
      data-slot="pagination-link"
      data-active={isActive}
      className={cn(
        buttonVariants({
          variant: isActive ? "outline" : "ghost",
          size,
        }),
        className
      )}
      {...props}
    />
  )
}
function PaginationPrevious({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to previous page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pl-2.5", className)}
      {...props}
    >
      <ChevronLeftIcon />
      <span className="hidden sm:block">Previous</span>
    </PaginationLink>
  )
}
function PaginationNext({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to next page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pr-2.5", className)}
      {...props}
    >
      <span className="hidden sm:block">Next</span>
      <ChevronRightIcon />
    </PaginationLink>
  )
}
function PaginationEllipsis({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      aria-hidden
      data-slot="pagination-ellipsis"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontalIcon className="size-4" />
      <span className="sr-only">More pages</span>
    </span>
  )
}
export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}
</file>

<file path="front/src/components/ui/popover.tsx">
"use client"
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"
import { cn } from "@/lib/utils"
const Popover = PopoverPrimitive.Root
const PopoverTrigger = PopoverPrimitive.Trigger
const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName
export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="front/src/components/ui/progress.tsx">
"use client"
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"
import { cn } from "@/lib/utils"
const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-2 w-full overflow-hidden rounded-full bg-primary/10",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName
export { Progress }
</file>

<file path="front/src/components/ui/radio-group.tsx">
"use client"
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { CircleIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function RadioGroup({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {
  return (
    <RadioGroupPrimitive.Root
      data-slot="radio-group"
      className={cn("grid gap-3", className)}
      {...props}
    />
  )
}
function RadioGroupItem({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {
  return (
    <RadioGroupPrimitive.Item
      data-slot="radio-group-item"
      className={cn(
        "border-input text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 aspect-square size-4 shrink-0 rounded-full border shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator
        data-slot="radio-group-indicator"
        className="relative flex items-center justify-center"
      >
        <CircleIcon className="fill-primary absolute top-1/2 left-1/2 size-2 -translate-x-1/2 -translate-y-1/2" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
}
export { RadioGroup, RadioGroupItem }
</file>

<file path="front/src/components/ui/review-pagination.tsx">
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react";
import { Button } from "@/components/ui/button";
interface ReviewPaginationProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
  siblings?: number;
}
export function ReviewPagination({
  currentPage,
  totalPages,
  onPageChange,
  siblings = 1
}: ReviewPaginationProps) {
  // 生成页码数组
  const generatePagination = () => {
    // 如果总页数小于7，直接显示所有页码
    if (totalPages <= 7) {
      return Array.from({ length: totalPages }, (_, i) => i + 1);
    }
    // 计算左右边界
    const leftSiblingIndex = Math.max(currentPage - siblings, 1);
    const rightSiblingIndex = Math.min(currentPage + siblings, totalPages);
    // 是否显示边界省略号
    const shouldShowLeftDots = leftSiblingIndex > 2;
    const shouldShowRightDots = rightSiblingIndex < totalPages - 1;
    // 始终显示第一页和最后一页
    const firstPageIndex = 1;
    const lastPageIndex = totalPages;
    // 只显示左边省略号
    if (!shouldShowLeftDots && shouldShowRightDots) {
      const leftItemCount = 3 + 2 * siblings;
      const leftRange = Array.from(
        { length: leftItemCount },
        (_, i) => i + 1
      );
      return [...leftRange, -1, lastPageIndex];
    }
    // 只显示右边省略号
    if (shouldShowLeftDots && !shouldShowRightDots) {
      const rightItemCount = 3 + 2 * siblings;
      const rightRange = Array.from(
        { length: rightItemCount },
        (_, i) => totalPages - rightItemCount + i + 1
      );
      return [firstPageIndex, -1, ...rightRange];
    }
    // 显示两边省略号
    if (shouldShowLeftDots && shouldShowRightDots) {
      const middleRange = Array.from(
        { length: rightSiblingIndex - leftSiblingIndex + 1 },
        (_, i) => leftSiblingIndex + i
      );
      return [firstPageIndex, -1, ...middleRange, -1, lastPageIndex];
    }
    return [];
  };
  const pages = generatePagination();
  // 处理页面切换
  const handlePageChange = (page: number) => {
    if (page >= 1 && page <= totalPages) {
      onPageChange(page);
    }
  };
  // 渲染省略号或页码按钮
  const renderPaginationItem = (page: number, index: number) => {
    // 渲染省略号
    if (page === -1) {
      return (
        <span
          key={`ellipsis-${index}`}
          className="mx-1 flex h-9 w-9 items-center justify-center text-sm text-muted-foreground"
        >
          <MoreHorizontal className="h-4 w-4" />
        </span>
      );
    }
    // 渲染页码按钮
    return (
      <Button
        key={page}
        variant={currentPage === page ? "default" : "outline"}
        size="icon"
        className="h-9 w-9"
        onClick={() => handlePageChange(page)}
        aria-current={currentPage === page ? "page" : undefined}
      >
        {page}
      </Button>
    );
  };
  // 如果只有一页则不显示
  if (totalPages <= 1) {
    return null;
  }
  return (
    <nav className="flex items-center space-x-1" aria-label="Pagination">
      <Button
        variant="outline"
        size="icon"
        className="h-9 w-9"
        onClick={() => handlePageChange(currentPage - 1)}
        disabled={currentPage === 1}
      >
        <ChevronLeft className="h-4 w-4" />
        <span className="sr-only">上一页</span>
      </Button>
      <div className="flex items-center">
        {pages.map(renderPaginationItem)}
      </div>
      <Button
        variant="outline"
        size="icon"
        className="h-9 w-9"
        onClick={() => handlePageChange(currentPage + 1)}
        disabled={currentPage === totalPages}
      >
        <ChevronRight className="h-4 w-4" />
        <span className="sr-only">下一页</span>
      </Button>
    </nav>
  );
}
</file>

<file path="front/src/components/ui/scroll-area.tsx">
"use client"
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"
import { cn } from "@/lib/utils"
const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName
const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName
export { ScrollArea, ScrollBar }
</file>

<file path="front/src/components/ui/select.tsx">
"use client"
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}
function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}
function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}
function SelectTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger>) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex h-9 w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}
function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}
function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("px-2 py-1.5 text-sm font-medium", className)}
      {...props}
    />
  )
}
function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}
function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}
function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}
function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}
export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}
</file>

<file path="front/src/components/ui/separator.tsx">
"use client"
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"
import { cn } from "@/lib/utils"
const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName
export { Separator }
</file>

<file path="front/src/components/ui/sheet.tsx">
"use client"
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}
function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}
function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}
function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}
function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}
function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}
function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}
function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}
function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}
function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="front/src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"
function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-primary/10 animate-pulse rounded-md", className)}
      {...props}
    />
  )
}
export { Skeleton }
</file>

<file path="front/src/components/ui/slider.tsx">
"use client"
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"
import { cn } from "@/lib/utils"
const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName
export { Slider }
</file>

<file path="front/src/components/ui/sonner.tsx">
"use client"
import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"
const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()
  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground font-medium",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground font-medium",
        },
      }}
      {...props}
    />
  )
}
export { Toaster }
</file>

<file path="front/src/components/ui/switch.tsx">
"use client"
import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"
import { cn } from "@/lib/utils"
function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 inline-flex h-5 w-9 shrink-0 items-center rounded-full border-2 border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background pointer-events-none block size-4 rounded-full ring-0 shadow-lg transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}
export { Switch }
</file>

<file path="front/src/components/ui/table.tsx">
"use client"
import * as React from "react"
import { cn } from "@/lib/utils"
function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}
function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}
function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}
function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}
function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}
function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-muted-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}
function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}
function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}
export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="front/src/components/ui/tabs.tsx">
"use client"
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"
import { cn } from "@/lib/utils"
function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}
function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-1",
        className
      )}
      {...props}
    />
  )
}
function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring inline-flex flex-1 items-center justify-center gap-1.5 rounded-md px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}
function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}
export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="front/src/components/ui/textarea.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}
export { Textarea }
</file>

<file path="front/src/components/ui/tooltip.tsx">
"use client"
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"
import { cn } from "@/lib/utils"
function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}
function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}
function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}
function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}
export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="front/src/components/ui/use-toast.ts">
// 基于sonner库提供的toast API封装的React hook
import { toast, type ToastT } from "sonner"
type ToastProps = ToastT & {
  title?: React.ReactNode
  description?: React.ReactNode
  action?: {
    label: string
    onClick: () => void
  }
}
export const useToast = () => {
  return {
    toast: (props: ToastProps) => {
      // 如果props是字符串，则直接显示为普通toast
      if (typeof props === "string") {
        return toast(props)
      }
      // 解构props中的参数
      const { title, description, action, ...rest } = props
      // 如果有title和description，则显示带有标题和描述的toast
      if (title && description) {
        return toast(title, {
          description,
          action: action
            ? {
                label: action.label,
                onClick: action.onClick,
              }
            : undefined,
          ...rest,
        })
      }
      // 如果只有title，则显示简单toast
      return toast(title, { ...rest })
    },
    // 暴露sonner库的其他方法
    dismiss: toast.dismiss,
    error: (props: ToastProps) => {
      if (typeof props === "string") {
        return toast.error(props)
      }
      const { title, description, action, ...rest } = props
      if (title && description) {
        return toast.error(title, {
          description,
          action: action
            ? {
                label: action.label,
                onClick: action.onClick,
              }
            : undefined,
          ...rest,
        })
      }
      return toast.error(title, { ...rest })
    },
    success: (props: ToastProps) => {
      if (typeof props === "string") {
        return toast.success(props)
      }
      const { title, description, action, ...rest } = props
      if (title && description) {
        return toast.success(title, {
          description,
          action: action
            ? {
                label: action.label,
                onClick: action.onClick,
              }
            : undefined,
          ...rest,
        })
      }
      return toast.success(title, { ...rest })
    },
  }
}
</file>

<file path="front/src/hooks/use-debounce.ts">
import { useState, useEffect } from 'react';
export default function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    return () => {
      clearTimeout(timer);
    };
  }, [value, delay]);
  return debouncedValue;
}
</file>

<file path="front/src/hooks/useDebounce.ts">
import { useState, useEffect } from 'react';
/**
 * 防抖Hook
 * @param value 需要防抖的值
 * @param delay 延迟时间（毫秒）
 * @returns 防抖后的值
 */
export default function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);
  useEffect(() => {
    // 设置定时器
    const timer = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    // 清理定时器
    return () => {
      clearTimeout(timer);
    };
  }, [value, delay]);
  return debouncedValue;
}
</file>

<file path="front/src/hooks/useMediaUpload.ts">
import { useState } from 'react';
import { toast } from 'sonner';
import { MediaService, CompleteUploadDTO } from '@/services/media-service';
interface UploadOptions {
  file: File;
  title?: string;
  description?: string;
  chunkSize?: number;
  onProgress?: (progress: number) => void;
  onSuccess?: (mediaId: number) => void;
  onError?: (error: any) => void;
}
export function useMediaUpload(mediaService: MediaService) {
  const [uploading, setUploading] = useState(false);
  const [progress, setProgress] = useState(0);
  const upload = async (options: UploadOptions) => {
    const { 
      file, 
      title = file.name, 
      description = '', 
      chunkSize = 10 * 1024 * 1024, 
      onProgress, 
      onSuccess, 
      onError 
    } = options;
    try {
      setUploading(true);
      setProgress(0);
      console.log('开始初始化上传', {
        fileName: file.name,
        fileSize: file.size,
        fileType: file.type,
        chunkSize
      });
      // 初始化上传
      const initResult = await mediaService.initiateUpload({
        title,
        description,
        filename: file.name,
        contentType: file.type,
        fileSize: file.size,
        chunkSize
      });
      if (!initResult.data) {
        throw new Error(initResult.message || '初始化上传失败');
      }
      const { mediaId, uploadId, totalParts, presignedUrls } = initResult.data;
      console.log('开始上传分片', {
        mediaId,
        uploadId,
        totalParts,
        fileSize: file.size,
        chunkSize,
      });
      // 记录已完成的分片
      const completedParts: CompleteUploadDTO['completedParts'] = [];
      // 上传所有分片
      const uploadPromises = presignedUrls.map(async ({ partNumber, url }) => {
        const start = (partNumber - 1) * chunkSize;
        const end = partNumber === totalParts ? file.size : partNumber * chunkSize;
        console.log(`准备上传分片 ${partNumber}/${totalParts} - 大小: ${end - start}, 范围: ${start}-${end}`);
        const chunk = file.slice(start, end);
        try {
          // 上传分片到S3
          console.log(`分片 ${partNumber} 开始上传到URL: ${url}`);
          const response = await fetch(url, {
            method: 'PUT',
            body: chunk,
            headers: {
              'Content-Type': 'application/octet-stream'
            }
          });
          if (!response.ok) {
            throw new Error(`分片 ${partNumber} 上传失败: ${response.statusText}`);
          }
          // 获取ETag并确保正确处理格式
          let eTag = response.headers.get('ETag') || '';
          console.log(`分片 ${partNumber} 上传到S3成功，原始ETag: ${eTag}`);
          // 打印所有响应头
          const headers = [...response.headers.entries()].reduce((obj, [key, value]) => {
            obj[key] = value;
            return obj;
          }, {} as any);
          console.log(`分片 ${partNumber} 响应头:`, headers);
          // 如果没有ETag，尝试从不同的header获取
          if (!eTag) {
            console.warn(`分片 ${partNumber} 没有找到ETag，尝试从其他header获取`);
            // 尝试从不同的header格式获取
            eTag = response.headers.get('etag') || 
                   headers['x-amz-etag'] || 
                   headers['ETag'] || 
                   headers['etag'] || 
                   '';
            if (eTag) {
              console.log(`分片 ${partNumber} 从其他header获取到ETag: ${eTag}`);
            } else {
              // 如果仍然没有找到，生成一个占位符（注意：这只是调试目的）
              console.error(`分片 ${partNumber} 无法获取ETag，这可能导致合并失败`);
            }
          }
          console.log(`分片 ${partNumber} 处理后的ETag: ${eTag}`);
          // 记录已完成的分片
          completedParts.push({
            partNumber: Number(partNumber),
            etag: eTag  // 使用正确的属性名
          });
          // 更新进度
          const currentProgress = (completedParts.length / totalParts) * 100;
          setProgress(currentProgress);
          onProgress?.(currentProgress);
        } catch (error) {
          console.error(`分片 ${partNumber} 上传失败:`, error);
          throw error;
        }
      });
      // 等待所有分片上传完成
      await Promise.all(uploadPromises);
      // 按分片编号排序
      completedParts.sort((a, b) => a.partNumber - b.partNumber);
      console.log('所有分片上传完成，准备合并分片 (JSON)：', JSON.stringify(completedParts, null, 2));
      console.log('所有分片上传完成，原始对象：', completedParts);
      // 构建请求对象
      const completeRequest = {
        uploadId,
        completedParts: completedParts.map(part => ({
          partNumber: part.partNumber,
          etag: part.etag
        }))
      };
      // 检查请求对象是否正确
      console.log('合并请求对象 (JSON)：', JSON.stringify(completeRequest, null, 2));
      console.log('合并请求原始对象：', completeRequest);
      console.log('是否所有分片都有eTag：', completeRequest.completedParts.every(part => part.etag !== null && part.etag !== undefined && part.etag !== ''));
      // 详细检查每个分片的ETag
      completeRequest.completedParts.forEach(part => {
        console.log(`分片 ${part.partNumber} 的ETag: "${part.etag}", 类型: ${typeof part.etag}, 长度: ${part.etag?.length || 0}`);
      });
      // 完成上传
      const completeResult = await mediaService.completeUpload(mediaId, completeRequest);
      if (!completeResult.data) {
        throw new Error(completeResult.message || '完成上传失败');
      }
      console.log('合并分片成功，返回结果：', completeResult.data);
      setProgress(100);
      onSuccess?.(mediaId);
      toast.success('上传成功', {
        description: "文件已成功上传到服务器"
      });
    } catch (error) {
      console.error('上传失败:', error);
      onError?.(error);
      toast.error('上传失败', {
        description: error instanceof Error ? error.message : String(error)
      });
    } finally {
      setUploading(false);
    }
  };
  return {
    upload,
    uploading,
    progress,
  };
}
</file>

<file path="front/src/lib/http.ts">
import axios from 'axios';
import { toast } from 'sonner';
// 创建axios实例
const instance = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8080',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});
// 请求拦截器
instance.interceptors.request.use(
  (config) => {
    // 从localStorage获取token
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);
// 响应拦截器
instance.interceptors.response.use(
  (response) => {
    const { code, message, data } = response.data;
    // 如果code不是200，说明请求出错
    if (code !== 200) {
      toast.error(message || '请求失败');
      return Promise.reject(new Error(message));
    }
    return response.data;
  },
  (error) => {
    if (error.response) {
      const { status, data } = error.response;
      // 处理常见的HTTP错误
      switch (status) {
        case 401:
          toast.error('请先登录');
          // TODO: 跳转到登录页
          break;
        case 403:
          toast.error('没有权限');
          break;
        case 404:
          toast.error('资源不存在');
          break;
        case 500:
          toast.error('服务器错误');
          break;
        default:
          toast.error(data?.message || '请求失败');
      }
    } else if (error.request) {
      toast.error('网络错误');
    } else {
      toast.error('请求配置错误');
    }
    return Promise.reject(error);
  }
);
// HTTP工具类
export const http = {
  get: <T>(url: string, config?: any) => 
    instance.get<any, T>(url, config),
  post: <T>(url: string, data?: any, config?: any) => 
    instance.post<any, T>(url, data, config),
  put: <T>(url: string, data?: any, config?: any) => 
    instance.put<any, T>(url, data, config),
  delete: <T>(url: string, config?: any) => 
    instance.delete<any, T>(url, config),
  patch: <T>(url: string, data?: any, config?: any) => 
    instance.patch<any, T>(url, data, config),
};
</file>

<file path="front/src/lib/request.ts">
import axios from 'axios';
import { toast } from 'sonner';
// 创建axios实例
export const axiosInstance = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});
// 请求拦截器
axiosInstance.interceptors.request.use(
  (config) => {
    // 从localStorage获取token
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);
// 响应拦截器
axiosInstance.interceptors.response.use(
  (response) => {
    const data = response.data;
    // 如果响应成功但业务状态码不是200，显示错误信息
    if (data && data.code !== 200) {
      toast.error(data.message || '操作失败');
      return Promise.reject(new Error(data.message || '操作失败'));
    }
    return response;
  },
  (error) => {
    // 处理网络错误
    if (!error.response) {
      toast.error('网络错误，请检查您的网络连接');
      return Promise.reject(error);
    }
    // 处理HTTP错误
    const status = error.response.status;
    switch (status) {
      case 401:
        toast.error('登录已过期，请重新登录');
        // 清除token并跳转到登录页
        localStorage.removeItem('token');
        window.location.href = '/login';
        break;
      case 403:
        toast.error('没有权限访问该资源');
        break;
      case 404:
        toast.error('请求的资源不存在');
        break;
      case 500:
        toast.error('服务器错误，请稍后重试');
        break;
      default:
        toast.error(error.response.data?.message || '操作失败，请重试');
    }
    return Promise.reject(error);
  }
);
</file>

<file path="front/src/lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
/**
 * 格式化日期为 YYYY-MM-DD HH:mm:ss 格式
 * @param date 日期字符串或Date对象
 * @returns 格式化后的日期字符串
 */
export function formatDate(date: string | Date | undefined): string {
  if (!date) return '-';
  const d = typeof date === 'string' ? new Date(date) : date;
  // 检查日期是否有效
  if (isNaN(d.getTime())) return '-';
  const year = d.getFullYear();
  const month = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  const hours = String(d.getHours()).padStart(2, '0');
  const minutes = String(d.getMinutes()).padStart(2, '0');
  const seconds = String(d.getSeconds()).padStart(2, '0');
  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}
</file>

<file path="front/src/middleware.ts">
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
// 需要保护的路由前缀
const PROTECTED_PATHS = ['/dashboard'];
// 不需要认证的路由
const PUBLIC_PATHS = ['/login', '/register', '/courses', '/'];
// 路由中间件
export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  // 检查是否是受保护的路由
  const isProtectedPath = PROTECTED_PATHS.some(path => pathname.startsWith(path));
  // 如果不是受保护的路由，直接放行
  if (!isProtectedPath) return NextResponse.next();
  // 获取令牌
  const token = request.cookies.get('token')?.value;
  // 如果没有令牌，重定向到登录页
  if (!token) {
    // 创建登录重定向URL，包含原始目标URL作为参数
    const redirectUrl = new URL('/login', request.url);
    redirectUrl.searchParams.set('redirectTo', pathname);
    return NextResponse.redirect(redirectUrl);
  }
  // 有令牌，放行请求
  return NextResponse.next();
}
// 配置需要执行中间件的路径
export const config = {
  matcher: [
    // 需要保护的路由
    '/dashboard/:path*',
    // 也可以添加其他需要保护的路由
  ],
};
</file>

<file path="front/src/services/api.ts">
'use client';
import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { ApiError, ApiResponse } from '@/types/api';
// 安全获取localStorage中的值
const getStorageItem = (key: string): string | null => {
  if (typeof window === 'undefined') return null;
  return localStorage.getItem(key);
};
// 安全设置localStorage中的值
const setStorageItem = (key: string, value: string): void => {
  if (typeof window === 'undefined') return;
  localStorage.setItem(key, value);
};
// 安全删除localStorage中的值
const removeStorageItem = (key: string): void => {
  if (typeof window === 'undefined') return;
  localStorage.removeItem(key);
};
// 创建axios实例
const api = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  },
});
// 请求拦截器
api.interceptors.request.use(
  (config) => {
    // 从localStorage获取token
    const token = getStorageItem('token');
    // 如果存在token，添加到请求头
    if (token && config.headers) {
      config.headers.Authorization = `Bearer ${token}`;
      // 确保不将token作为URL参数
      if (config.params && config.params.headers) {
        delete config.params.headers;
      }
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);
// 检查token是否需要刷新
const shouldRefreshToken = (token: string): boolean => {
  try {
    // 解析token获取过期时间
    const payload = JSON.parse(atob(token.split('.')[1]));
    const expiresIn = payload.exp * 1000; // 转换为毫秒
    const now = Date.now();
    // 如果token还有15分钟就过期，才刷新
    return expiresIn - now < 15 * 60 * 1000;
  } catch (error) {
    console.error('解析token失败：', error);
    return false;
  }
};
// 响应拦截器
api.interceptors.response.use(
  (response: AxiosResponse<ApiResponse>) => {
    // 检查当前token是否需要刷新
    const token = getStorageItem('token');
    if (token && shouldRefreshToken(token)) {
      // 静默刷新token
      refreshTokenSilently();
    }
    return response;
  },
  async (error: AxiosError<ApiResponse>) => {
    const originalRequest = error.config as AxiosRequestConfig & { _retry?: boolean };
    const requestUrl = originalRequest.url || '';
    // 检查是否为登录或注册请求
    const isAuthRequest = requestUrl.includes('/auth/login') || 
                         requestUrl.includes('/auth/register') ||
                         requestUrl.includes('/auth/captcha') ||
                         requestUrl.includes('/auth/refresh-token');
    // 只在401错误时尝试刷新token
    if (error.response?.status === 401 && !originalRequest._retry && !isAuthRequest) {
      originalRequest._retry = true;
      try {
        // 尝试刷新令牌
        const refreshToken = getStorageItem('refreshToken');
        if (refreshToken) {
          console.log('Token过期，开始刷新');
          const response = await axios.post<ApiResponse<{ accessToken: string; refreshToken: string; tokenType: string; expiresIn: number }>>(
            `${api.defaults.baseURL}/auth/refresh-token`,
            { refreshToken }
          );
          if (response.data.code !== 200 || !response.data.data) {
            throw new Error(response.data.message || '刷新令牌失败');
          }
          const { accessToken, refreshToken: newRefreshToken, tokenType = 'Bearer' } = response.data.data;
          if (!accessToken) {
            throw new Error('刷新令牌失败：未获取到有效的访问令牌');
          }
          // 更新localStorage中的令牌
          setStorageItem('token', accessToken);
          setStorageItem('refreshToken', newRefreshToken);
          // 更新请求头并重试原始请求
          const authHeader = `${tokenType} ${accessToken}`;
          api.defaults.headers.common.Authorization = authHeader;
          originalRequest.headers = originalRequest.headers || {};
          originalRequest.headers.Authorization = authHeader;
          return api(originalRequest);
        } else {
          throw new Error('会话已过期，请重新登录');
        }
      } catch (refreshError) {
        // 刷新失败，清除令牌并重定向到登录页
        removeStorageItem('token');
        removeStorageItem('refreshToken');
        if (typeof window !== 'undefined') {
          window.location.href = '/login';
        }
        return Promise.reject(refreshError);
      }
    }
    // 构造API错误对象
    const apiError: ApiError = {
      code: error.response?.data?.code || error.response?.status || 500,
      message: error.response?.data?.message || error.message || '请求失败',
      errors: error.response?.data?.errors,
    };
    return Promise.reject(apiError);
  }
);
// 静默刷新token的函数
const refreshTokenSilently = async () => {
  try {
    const refreshToken = getStorageItem('refreshToken');
    if (!refreshToken) return;
    const response = await axios.post<ApiResponse<{ accessToken: string; refreshToken: string; }>>(
      `${api.defaults.baseURL}/auth/refresh-token`,
      { refreshToken }
    );
    if (response.data.code === 200 && response.data.data) {
      const { accessToken, refreshToken: newRefreshToken } = response.data.data;
      setStorageItem('token', accessToken);
      setStorageItem('refreshToken', newRefreshToken);
      api.defaults.headers.common.Authorization = `Bearer ${accessToken}`;
    }
  } catch (error) {
    console.error('静默刷新token失败：', error);
  }
};
/**
 * 封装的请求函数
 */
export const request = {
  /**
   * GET请求
   * @param url 请求路径
   * @param config 请求配置
   */
  get: async <T>(url: string, config?: any): Promise<AxiosResponse<ApiResponse<T>>> => {
    try {
      return await api.get<ApiResponse<T>>(url, config);
    } catch (error) {
      // 如果配置中设置了silentOnAuthError，且是401或403错误，则静默失败（不打印错误）
      const isAuthError = axios.isAxiosError(error) && 
        (error.response?.status === 401 || error.response?.status === 403);
      if (!(config?.silentOnAuthError && isAuthError)) {
        console.error(`GET ${url} 请求失败:`, error);
      }
      throw error;
    }
  },
  /**
   * POST请求
   * @param url 请求路径
   * @param data 请求数据
   * @param config 请求配置
   */
  post: async <T>(url: string, data?: any, config?: any): Promise<AxiosResponse<ApiResponse<T>>> => {
    try {
      return await api.post<ApiResponse<T>>(url, data, config);
    } catch (error) {
      // 如果配置中设置了silentOnAuthError，且是401或403错误，则静默失败（不打印错误）
      const isAuthError = axios.isAxiosError(error) && 
        (error.response?.status === 401 || error.response?.status === 403);
      if (!(config?.silentOnAuthError && isAuthError)) {
        console.error(`POST ${url} 请求失败:`, error);
      }
      throw error;
    }
  },
  /**
   * PATCH请求
   * @param url 请求路径
   * @param data 请求数据
   * @param config 请求配置
   */
  patch: async <T>(url: string, data?: any, config?: any): Promise<AxiosResponse<ApiResponse<T>>> => {
    try {
      return await api.patch<ApiResponse<T>>(url, data, config);
    } catch (error) {
      // 如果配置中设置了silentOnAuthError，且是401或403错误，则静默失败（不打印错误）
      const isAuthError = axios.isAxiosError(error) && 
        (error.response?.status === 401 || error.response?.status === 403);
      if (!(config?.silentOnAuthError && isAuthError)) {
        console.error(`PATCH ${url} 请求失败:`, error);
      }
      throw error;
    }
  },
  /**
   * PUT请求
   * @param url 请求路径
   * @param data 请求数据
   * @param config 请求配置
   */
  put: async <T>(url: string, data?: any, config?: any): Promise<AxiosResponse<ApiResponse<T>>> => {
    try {
      return await api.put<ApiResponse<T>>(url, data, config);
    } catch (error) {
      // 如果配置中设置了silentOnAuthError，且是401或403错误，则静默失败（不打印错误）
      const isAuthError = axios.isAxiosError(error) && 
        (error.response?.status === 401 || error.response?.status === 403);
      if (!(config?.silentOnAuthError && isAuthError)) {
        console.error(`PUT ${url} 请求失败:`, error);
      }
      throw error;
    }
  },
  /**
   * DELETE请求
   * @param url 请求路径
   * @param config 请求配置
   */
  delete: async <T>(url: string, config?: any): Promise<AxiosResponse<ApiResponse<T>>> => {
    try {
      return await api.delete<ApiResponse<T>>(url, config);
    } catch (error) {
      // 如果配置中设置了silentOnAuthError，且是401或403错误，则静默失败（不打印错误）
      const isAuthError = axios.isAxiosError(error) && 
        (error.response?.status === 401 || error.response?.status === 403);
      if (!(config?.silentOnAuthError && isAuthError)) {
        console.error(`DELETE ${url} 请求失败:`, error);
      }
      throw error;
    }
  }
};
export default api;
</file>

<file path="front/src/services/auth.ts">
'use client';
import { CaptchaResponse, EmailVerificationRequest, LoginRequest, LoginResponse, RegisterRequest, User } from '@/types/auth';
import { request } from './api';
import axios from 'axios';
/**
 * 认证服务
 */
const authService = {
  /**
   * 获取验证码
   */
  getCaptcha: async () => {
    try {
      console.log('开始获取验证码');
      // 第一步：获取验证码key
      const keyResponse = await request.get<any>('/auth/captcha/key');
      // 检查响应
      if (!keyResponse || !keyResponse.data) {
        console.error('获取验证码key响应为空');
        throw new Error('获取验证码失败，响应为空');
      }
      if (keyResponse.data.code !== 200) {
        console.error('获取验证码key失败，错误码：', keyResponse.data.code, '错误信息：', keyResponse.data.message);
        throw new Error(keyResponse.data.message || '获取验证码失败');
      }
      // 提取验证码key
      const captchaKey = keyResponse.data.data;
      console.log('获取到验证码key：', captchaKey);
      if (!captchaKey) {
        console.error('验证码key为空');
        throw new Error('获取验证码失败，验证码key为空');
      }
      // 第二步：获取验证码图片
      const baseUrl = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080/api';
      const imageUrl = `${baseUrl}/auth/captcha/image/${encodeURIComponent(captchaKey)}`;
      console.log('请求验证码图片URL:', imageUrl);
      const imageResponse = await axios.get(
        imageUrl, 
        { 
          responseType: 'arraybuffer'
        }
      );
      console.log('验证码图片响应状态：', imageResponse.status);
      // 将图片数据转换为base64
      const captchaImage = `data:image/jpeg;base64,${Buffer.from(imageResponse.data).toString('base64')}`;
      return { captchaId: captchaKey, captchaImage };
    } catch (error) {
      console.error('获取验证码失败：', error);
      throw new Error('获取验证码失败，请刷新页面重试');
    }
  },
  /**
   * 用户登录
   */
  login: async (data: LoginRequest) => {
    // 确保captchaKey和captchaCode正确传递
    console.log('开始登录，验证码参数：', {
      captchaKey: data.captchaKey,
      captchaCode: data.captchaCode
    });
    // 打印完整的请求参数（密码用星号隐藏）
    const logData = {
      ...data,
      password: '******'
    };
    console.log('登录请求参数：', logData);
    // 发起登录请求
    const response = await request.post<any>('/auth/login', data);
    console.log('登录响应：', response);
    // 检查是否有响应和响应数据
    if (!response || !response.data) {
      console.error('登录响应为空');
      throw new Error('登录失败，响应为空');
    }
    // 检查响应状态码
    if (response.data.code !== 200) {
      console.error('登录失败，错误码：', response.data.code, '错误信息：', response.data.message);
      throw new Error(response.data.message || '登录失败');
    }
    // 提取令牌数据
    const tokenData = response.data.data;
    console.log('提取的令牌数据：', tokenData);
    if (!tokenData) {
      console.error('令牌数据为空');
      throw new Error('登录失败，未获取到令牌数据');
    }
    if (!tokenData.accessToken) {
      console.error('访问令牌为空', tokenData);
      throw new Error('登录失败，未获取到有效的访问令牌');
    }
    // 为了兼容旧代码，设置token字段
    const loginResponse: LoginResponse = {
      accessToken: tokenData.accessToken,
      refreshToken: tokenData.refreshToken,
      tokenType: tokenData.tokenType || 'Bearer',
      expiresIn: tokenData.expiresIn || 0,
      token: tokenData.accessToken, // 兼容旧代码
      user: undefined // 稍后会尝试获取
    };
    try {
      // 获取用户信息
      console.log('尝试获取用户信息，使用令牌：', loginResponse.accessToken);
      // 确保使用正确的授权头
      const authHeader = {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `${loginResponse.tokenType} ${loginResponse.accessToken}`
        }
      };
      // 获取用户信息
      const userResponse = await request.get<User>('/users/current', authHeader);
      console.log('用户信息响应：', userResponse);
      if (userResponse?.data?.data) {
        loginResponse.user = userResponse.data.data;
        console.log('成功设置用户信息到登录响应');
      } else {
        console.warn('未获取到用户信息或格式不正确');
      }
    } catch (error) {
      console.error('获取用户信息失败', error);
      // 继续返回令牌数据，但没有用户信息
    }
    return loginResponse;
  },
  /**
   * 用户注册
   */
  register: async (data: RegisterRequest) => {
    const response = await request.post<{ message: string }>('/auth/register', data);
    return response.data.data;
  },
  /**
   * 刷新令牌
   */
  refreshToken: async (refreshToken: string) => {
    // 发起刷新令牌请求
    const response = await request.post<any>(
      '/auth/refresh-token',
      { refreshToken }
    );
    console.log('刷新令牌响应：', response);
    // 检查是否有响应和响应数据
    if (!response || !response.data) {
      console.error('刷新令牌响应为空');
      throw new Error('刷新令牌失败，响应为空');
    }
    // 检查响应状态码
    if (response.data.code !== 200) {
      console.error('刷新令牌失败，错误码：', response.data.code, '错误信息：', response.data.message);
      throw new Error(response.data.message || '刷新令牌失败');
    }
    // 提取令牌数据
    const tokenData = response.data.data;
    console.log('提取的令牌数据：', tokenData);
    if (!tokenData) {
      console.error('令牌数据为空');
      throw new Error('刷新令牌失败，未获取到令牌数据');
    }
    if (!tokenData.accessToken) {
      console.error('访问令牌为空', tokenData);
      throw new Error('刷新令牌失败，未获取到有效的访问令牌');
    }
    // 构造响应对象
    const loginResponse: LoginResponse = {
      accessToken: tokenData.accessToken,
      refreshToken: tokenData.refreshToken,
      tokenType: tokenData.tokenType || 'Bearer',
      expiresIn: tokenData.expiresIn || 0,
      token: tokenData.accessToken // 兼容旧代码
    };
    return loginResponse;
  },
  /**
   * 用户注销
   */
  logout: async () => {
    const response = await request.post<{ message: string }>('/auth/logout');
    return response.data.data;
  },
  /**
   * 获取当前用户信息
   */
  getCurrentUser: async () => {
    console.log('开始获取当前用户信息');
    try {
      // 获取存储的访问令牌
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('获取用户信息失败：未找到访问令牌');
        throw new Error('获取用户信息失败：未找到访问令牌');
      }
      // 确保使用正确的API路径和授权头
      const response = await request.get<any>('/users/current', {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('获取用户信息响应：', response);
      // 检查是否有响应和响应数据
      if (!response || !response.data) {
        console.error('获取用户信息响应为空');
        throw new Error('获取用户信息失败，响应为空');
      }
      // 检查响应状态码
      if (response.data.code !== 200) {
        console.error('获取用户信息失败，错误码：', response.data.code, '错误信息：', response.data.message);
        throw new Error(response.data.message || '获取用户信息失败');
      }
      // 提取用户数据
      const userData = response.data.data;
      console.log('提取的用户数据：', userData);
      if (!userData) {
        console.error('用户数据为空');
        throw new Error('获取用户信息失败，用户数据为空');
      }
      return userData;
    } catch (error) {
      console.error('获取用户信息出错：', error);
      throw error;
    }
  },
  /**
   * 发送邮箱验证码
   */
  sendEmailVerificationCode: async (data: EmailVerificationRequest) => {
    console.log('开始发送邮箱验证码，参数：', {
      email: data.email,
      captchaKey: data.captchaKey,
      captchaCode: data.captchaCode
    });
    const response = await request.post<any>('/auth/email-verification-code', data);
    console.log('发送邮箱验证码响应：', response);
    // 检查响应状态
    if (!response || !response.data) {
      console.error('发送邮箱验证码响应为空');
      throw new Error('发送邮箱验证码失败，响应为空');
    }
    if (response.data.code !== 200) {
      console.error('发送邮箱验证码失败，错误码：', response.data.code, '错误信息：', response.data.message);
      throw new Error(response.data.message || '发送邮箱验证码失败');
    }
    return response.data.data;
  }
};
export default authService;
</file>

<file path="front/src/services/category.ts">
'use client';
import { request } from './api';
import { Category, CategoryDTO, CategoryTree } from '@/types/course';
import { ApiResponse, PaginationResult } from '@/types/api';
import { AxiosResponse } from 'axios';
import { useCacheStore } from '@/stores/cache-store';
/**
 * 分类管理服务
 */
const categoryService = {
  /**
   * 获取分类列表（分页）
   */
  getCategoryList: async (keyword?: string, page = 0, size = 10): Promise<PaginationResult<Category>> => {
    try {
      const params: any = { page, size };
      if (keyword) params.keyword = keyword;
      const response: AxiosResponse<ApiResponse<PaginationResult<Category>>> = 
        await request.get<PaginationResult<Category>>('/categories', { params });
      return response.data.data;
    } catch (error) {
      console.error('获取分类列表失败:', error);
      throw error;
    }
  },
  /**
   * 根据ID获取分类详情
   */
  getCategoryById: async (id: number): Promise<Category | null> => {
    // 先从缓存中查找
    const cachedCategory = useCacheStore.getState().getCategoryById(id);
    if (cachedCategory) {
      return cachedCategory;
    }
    try {
      const response: AxiosResponse<ApiResponse<Category>> = 
        await request.get<Category>(`/categories/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`获取分类详情失败, ID: ${id}:`, error);
      return null;
    }
  },
  /**
   * 根据编码获取分类
   */
  getCategoryByCode: async (code: string): Promise<Category> => {
    try {
      const response: AxiosResponse<ApiResponse<Category>> = await request.get<Category>(`/categories/code/${code}`);
      return response.data.data;
    } catch (error) {
      console.error(`根据编码获取分类失败, code: ${code}:`, error);
      throw error;
    }
  },
  /**
   * 创建分类
   */
  createCategory: async (category: CategoryDTO): Promise<number> => {
    try {
      const response: AxiosResponse<ApiResponse<{id: number}>> = await request.post<{id: number}>('/categories', category);
      // 创建后清除缓存
      useCacheStore.getState().clearCategoriesCache();
      return response.data.data.id;
    } catch (error) {
      console.error('创建分类失败:', error);
      throw error;
    }
  },
  /**
   * 更新分类
   */
  updateCategory: async (id: number, category: CategoryDTO): Promise<void> => {
    try {
      await request.put(`/categories/${id}`, category);
      // 更新后清除缓存
      useCacheStore.getState().clearCategoriesCache();
    } catch (error) {
      console.error(`更新分类失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 删除分类
   */
  deleteCategory: async (id: number): Promise<void> => {
    try {
      await request.delete(`/categories/${id}`);
      // 删除后清除缓存
      useCacheStore.getState().clearCategoriesCache();
    } catch (error) {
      console.error(`删除分类失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 获取所有根分类
   */
  getRootCategories: async (): Promise<Category[]> => {
    try {
      const response = await request.get<Category[]>('/categories/roots');
      const categories = (response.data as unknown as ApiResponse<Category[]>).data || [];
      return categories;
    } catch (error) {
      console.error('获取根分类失败:', error);
      return [];
    }
  },
  /**
   * 获取子分类
   */
  getChildCategories: async (parentId: number): Promise<Category[]> => {
    try {
      const response: AxiosResponse<ApiResponse<Category[]>> = 
        await request.get<Category[]>(`/categories/children/${parentId}`);
      return response.data.data;
    } catch (error) {
      console.error(`获取子分类失败, parentId: ${parentId}:`, error);
      throw error;
    }
  },
  /**
   * 获取分类树
   */
  getCategoryTree: async (): Promise<CategoryTree[]> => {
    try {
      const response: AxiosResponse<ApiResponse<CategoryTree[]>> = 
        await request.get<CategoryTree[]>('/categories/tree');
      return response.data.data || [];
    } catch (error) {
      console.error('获取分类树失败:', error);
      return [];
    }
  },
  /**
   * 检查分类编码是否可用
   */
  isCodeAvailable: async (code: string, excludeId?: number): Promise<boolean> => {
    try {
      const params: any = { code };
      if (excludeId) params.excludeId = excludeId;
      const response: AxiosResponse<ApiResponse<{available: boolean}>> = 
        await request.get<{available: boolean}>('/categories/check-code', { params });
      return response.data.data.available;
    } catch (error) {
      console.error(`检查分类编码是否可用失败, code: ${code}:`, error);
      throw error;
    }
  },
  /**
   * 更新分类状态
   */
  updateCategoryStatus: async (id: number, enabled: boolean): Promise<void> => {
    try {
      await request.put(`/categories/${id}/status?enabled=${enabled}`);
      // 更新后清除缓存
      useCacheStore.getState().clearCategoriesCache();
    } catch (error) {
      console.error(`更新分类状态失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 更新分类排序
   */
  updateCategoryOrder: async (id: number, orderIndex: number): Promise<void> => {
    try {
      await request.put(`/categories/${id}/order?orderIndex=${orderIndex}`);
      // 更新后清除缓存
      useCacheStore.getState().clearCategoriesCache();
    } catch (error) {
      console.error(`更新分类排序失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 获取所有分类列表
   */
  getAllCategories: async (): Promise<Category[]> => {
    const cacheStore = useCacheStore.getState();
    // 如果缓存有效，使用缓存
    if (cacheStore.isCategoriesCacheValid()) {
      return cacheStore.categories || [];
    }
    try {
      const response = await request.get<Category[]>('/categories');
      const categories = (response.data as unknown as ApiResponse<Category[]>).data || [];
      // 更新缓存
      cacheStore.setCategories(categories);
      return categories;
    } catch (error) {
      console.error('获取分类列表失败:', error);
      // 如果请求失败但缓存存在，返回缓存数据
      if (cacheStore.categories) {
        console.log('请求失败，使用过期的分类缓存');
        return cacheStore.categories;
      }
      return [];
    }
  },
  /**
   * 手动清除缓存
   */
  clearCache(): void {
    useCacheStore.getState().clearCategoriesCache();
  }
};
export default categoryService;
</file>

<file path="front/src/services/chapter.ts">
'use client';
import { request } from './api';
import { 
  Chapter, 
  ChapterCreateDTO, 
  ChapterOrderDTO,
  ChapterAccessType
} from '@/types/course';
import { ApiResponse } from '@/types/api';
import { AxiosResponse } from 'axios';
// 章节缓存
interface ChapterCache {
  byId: Record<number, Chapter>;
  byCourse: Record<number, Chapter[]>;
  timestamp: Record<string, number>;
}
// 缓存过期时间（毫秒）
const CACHE_EXPIRY = 60 * 1000; // 1分钟
// 初始化缓存
const cache: ChapterCache = {
  byId: {},
  byCourse: {},
  timestamp: {}
};
// 检查缓存是否过期
const isCacheExpired = (key: string): boolean => {
  const timestamp = cache.timestamp[key];
  if (!timestamp) return true;
  return Date.now() - timestamp > CACHE_EXPIRY;
};
// 设置缓存
const setCache = (key: string, data: any) => {
  cache.timestamp[key] = Date.now();
  return data;
};
/**
 * 章节管理服务
 */
const chapterService = {
  /**
   * 创建章节
   */
  createChapter: async (chapter: ChapterCreateDTO): Promise<Chapter> => {
    try {
      const response: AxiosResponse<ApiResponse<Chapter>> = await request.post<Chapter>('/chapters', chapter);
      const newChapter = response.data.data;
      // 更新缓存
      cache.byId[newChapter.id] = newChapter;
      // 清除课程章节列表缓存
      delete cache.byCourse[chapter.courseId];
      return newChapter;
    } catch (error) {
      console.error('创建章节失败:', error);
      throw error;
    }
  },
  /**
   * 根据ID获取章节详情
   */
  getChapterById: async (id: number): Promise<Chapter> => {
    try {
      // 检查缓存
      const cacheKey = `chapter_${id}`;
      if (cache.byId[id] && !isCacheExpired(cacheKey)) {
        return cache.byId[id];
      }
      const response: AxiosResponse<ApiResponse<Chapter>> = await request.get<Chapter>(`/chapters/${id}`);
      const chapter = response.data.data;
      // 更新缓存
      cache.byId[id] = setCache(cacheKey, chapter);
      return chapter;
    } catch (error) {
      console.error(`获取章节详情失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 更新章节
   */
  updateChapter: async (id: number, chapter: ChapterCreateDTO): Promise<Chapter> => {
    try {
      const response: AxiosResponse<ApiResponse<Chapter>> = await request.put<Chapter>(`/chapters/${id}`, chapter);
      const updatedChapter = response.data.data;
      // 更新缓存
      cache.byId[id] = updatedChapter;
      // 清除课程章节列表缓存
      delete cache.byCourse[chapter.courseId];
      return updatedChapter;
    } catch (error) {
      console.error(`更新章节失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 删除章节
   */
  deleteChapter: async (id: number): Promise<void> => {
    try {
      // 先获取章节信息，以便清除相关缓存
      let courseId;
      if (cache.byId[id]) {
        courseId = cache.byId[id].courseId;
      }
      await request.delete(`/chapters/${id}`);
      // 清除缓存
      delete cache.byId[id];
      // 清除课程章节列表缓存
      if (courseId) {
        delete cache.byCourse[courseId];
      }
    } catch (error) {
      console.error(`删除章节失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 获取课程下的章节列表
   */
  getChaptersByCourse: async (courseId: number): Promise<Chapter[]> => {
    try {
      // 检查缓存
      const cacheKey = `course_${courseId}_chapters`;
      if (cache.byCourse[courseId] && !isCacheExpired(cacheKey)) {
        return cache.byCourse[courseId];
      }
      const response: AxiosResponse<ApiResponse<Chapter[]>> = 
        await request.get<Chapter[]>(`/chapters/course/${courseId}`);
      const chapters = response.data.data;
      // 更新缓存
      cache.byCourse[courseId] = setCache(cacheKey, chapters);
      // 同时更新单个章节缓存
      chapters.forEach(chapter => {
        cache.byId[chapter.id] = chapter;
        setCache(`chapter_${chapter.id}`, chapter);
      });
      return chapters;
    } catch (error) {
      console.error(`获取课程章节列表失败, courseId: ${courseId}:`, error);
      throw error;
    }
  },
  /**
   * 更新章节访问类型
   */
  updateAccessType: async (id: number, accessType: ChapterAccessType): Promise<Chapter> => {
    try {
      const response: AxiosResponse<ApiResponse<Chapter>> = 
        await request.put<Chapter>(`/chapters/${id}/access-type?accessType=${accessType}`);
      return response.data.data;
    } catch (error) {
      console.error(`更新章节访问类型失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 调整章节顺序
   */
  reorderChapters: async (courseId: number, chapterOrders: ChapterOrderDTO[]): Promise<Chapter[]> => {
    try {
      const response: AxiosResponse<ApiResponse<Chapter[]>> = 
        await request.put<Chapter[]>(`/chapters/course/${courseId}/reorder`, chapterOrders);
      const chapters = response.data.data;
      // 更新缓存
      cache.byCourse[courseId] = chapters;
      setCache(`course_${courseId}_chapters`, chapters);
      // 更新单个章节缓存
      chapters.forEach(chapter => {
        cache.byId[chapter.id] = chapter;
        setCache(`chapter_${chapter.id}`, chapter);
      });
      return chapters;
    } catch (error) {
      console.error(`调整章节顺序失败, courseId: ${courseId}:`, error);
      throw error;
    }
  },
  /**
   * 清除缓存
   */
  clearCache: () => {
    cache.byId = {};
    cache.byCourse = {};
    cache.timestamp = {};
  }
};
export default chapterService;
</file>

<file path="front/src/services/course-service.ts">
'use client';
import { request } from './api';
import { ApiResponse, PaginationResult } from '@/types/api';
import { AxiosResponse } from 'axios';
import { Course, CoursePaymentType, CourseDifficulty } from '@/types/course';
import { Category } from '@/types/course';
import { Tag } from '@/types/course';
import { CourseStructureVO } from '@/types/course';
import { CourseQueryParams, CourseListResponse } from '@/types/course';
// 搜索参数接口
interface CourseSearchParams {
  keyword?: string;
  categoryId?: number;
  tagIds?: number[];
  difficulty?: CourseDifficulty;
  paymentType?: CoursePaymentType;
  minPrice?: number;
  maxPrice?: number;
  sortBy?: string;
  page?: number;
  pageSize?: number;
}
/**
 * 课程服务
 */
const courseService = {
  /**
   * 搜索课程
   */
  searchCourses: async (params: CourseSearchParams): Promise<PaginationResult<Course>> => {
    try {
      const response: AxiosResponse<ApiResponse<PaginationResult<Course>>> = 
        await request.post('/courses/search', params);
      return response.data.data;
    } catch (error) {
      console.error('搜索课程失败:', error);
      throw error;
    }
  },
  /**
   * 获取热门课程
   */
  getHotCourses: async (): Promise<Course[]> => {
    try {
      const response: AxiosResponse<ApiResponse<Course[]>> = 
        await request.get('/courses/hot');
      return response.data.data;
    } catch (error) {
      console.error('获取热门课程失败:', error);
      throw error;
    }
  },
  /**
   * 获取最新课程
   */
  getLatestCourses: async (): Promise<Course[]> => {
    try {
      const response: AxiosResponse<ApiResponse<Course[]>> = 
        await request.get('/courses/latest');
      return response.data.data;
    } catch (error) {
      console.error('获取最新课程失败:', error);
      throw error;
    }
  },
  /**
   * 获取所有分类
   */
  getAllCategories: async (): Promise<Category[]> => {
    try {
      const response: AxiosResponse<ApiResponse<Category[]>> = 
        await request.get('/courses/categories');
      return response.data.data;
    } catch (error) {
      console.error('获取课程分类失败:', error);
      throw error;
    }
  },
  /**
   * 获取所有标签
   */
  getAllTags: async (): Promise<Tag[]> => {
    try {
      const response: AxiosResponse<ApiResponse<Tag[]>> = 
        await request.get('/courses/tags');
      return response.data.data;
    } catch (error) {
      console.error('获取课程标签失败:', error);
      throw error;
    }
  },
  /**
   * 获取课程的公开结构
   * 根据用户是否已购买课程，返回不同级别的内容
   * @param courseId 课程ID
   * @param isEnrolled 是否已购买课程
   * @returns 课程结构（含章节和小节）
   */
  getPublicCourseStructure: async (courseId: number, isEnrolled: boolean = false): Promise<CourseStructureVO> => {
    try {
      const response: AxiosResponse<ApiResponse<CourseStructureVO>> = 
        await request.get<CourseStructureVO>(`/courses/${courseId}/public-structure`, {
          params: { isEnrolled }
        });
      return response.data.data;
    } catch (error) {
      console.error(`获取课程公开结构失败, ID: ${courseId}:`, error);
      throw error;
    }
  },
  /**
   * 获取机构发布版本课程列表
   */
  getPublishedCoursesByInstitution: async (params?: CourseQueryParams): Promise<CourseListResponse> => {
    try {
      const response: AxiosResponse<ApiResponse<CourseListResponse>> = 
        await request.get('/courses/institution', { params });
      return response.data.data;
    } catch (error) {
      console.error('获取机构发布版本课程列表失败:', error);
      throw error;
    }
  }
};
export default courseService;
</file>

<file path="front/src/services/course.ts">
'use client';
import { request } from './api';
import { 
  Course, CourseCreateDTO, 
  PreviewUrlVO, 
  CourseStatus,
  CoursePaymentType,
  CourseQueryParams,
  CourseListResponse
} from '@/types/course';
import { ApiResponse, PaginationResult } from '@/types/api';
import { AxiosResponse } from 'axios';
/**
 * 构建查询参数
 */
const buildQueryParams = (params?: CourseQueryParams): any => {
  if (!params) return {};
  const queryParams: any = {};
  if (params.page !== undefined) queryParams.page = params.page;
  if (params.size !== undefined) queryParams.size = params.size;
  if (params.keyword) queryParams.keyword = params.keyword;
  if (params.status !== undefined) queryParams.status = params.status;
  if (params.categoryId) queryParams.categoryId = params.categoryId;
  if (params.difficulty !== undefined) queryParams.difficulty = params.difficulty;
  if (params.sortBy) queryParams.sort = `${params.sortBy},${params.sortDir || 'asc'}`;
  return queryParams;
};
/**
 * 课程管理服务
 */
const courseService = {
  /**
   * 获取课程列表（分页）
   */
  getCourseList: async (page = 0, size = 10, keyword?: string, status?: CourseStatus): Promise<PaginationResult<Course>> => {
    try {
      const params: any = { page, size };
      if (keyword) params.keyword = keyword;
      if (status !== undefined) params.status = status;
      const response: AxiosResponse<ApiResponse<PaginationResult<Course>>> = 
        await request.get<PaginationResult<Course>>('/courses', { params });
      // 确保响应数据符合预期格式
      if (response?.data?.data) {
        return response.data.data;
      }
      // 如果响应格式不符，返回一个空的分页结果
      console.warn('API响应格式不符合预期:', response);
      return {
        content: [],
        totalElements: 0,
        totalPages: 0,
        size,
        number: page,
        empty: true,
        first: true,
        last: true,
        numberOfElements: 0,
        pageable: {
          pageNumber: page,
          pageSize: size,
          sort: {
            empty: true,
            sorted: false,
            unsorted: true
          },
          offset: 0,
          paged: true,
          unpaged: false
        }
      };
    } catch (error) {
      console.error('获取课程列表失败:', error);
      // 出错时返回空结果而不是抛出异常，让UI层处理
      return {
        content: [],
        totalElements: 0,
        totalPages: 0,
        size,
        number: page,
        empty: true,
        first: true,
        last: true,
        numberOfElements: 0,
        pageable: {
          pageNumber: page,
          pageSize: size,
          sort: {
            empty: true,
            sorted: false,
            unsorted: true
          },
          offset: 0,
          paged: true,
          unpaged: false
        }
      };
    }
  },
  /**
   * 根据ID获取课程详情
   */
  getCourseById: async (id: number): Promise<Course> => {
    try {
      const response: AxiosResponse<ApiResponse<Course>> = await request.get<Course>(`/courses/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`获取课程详情失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 创建课程
   */
  createCourse: async (course: CourseCreateDTO): Promise<Course> => {
    try {
      const response: AxiosResponse<ApiResponse<Course>> = await request.post<Course>('/courses', course);
      return response.data.data;
    } catch (error) {
      console.error('创建课程失败:', error);
      throw error;
    }
  },
  /**
   * 更新课程
   */
  updateCourse: async (id: number, course: CourseCreateDTO): Promise<Course> => {
    try {
      const response: AxiosResponse<ApiResponse<Course>> = await request.put<Course>(`/courses/${id}`, course);
      return response.data.data;
    } catch (error) {
      console.error(`更新课程失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 删除课程
   */
  deleteCourse: async (id: number): Promise<void> => {
    try {
      await request.delete(`/courses/${id}`);
    } catch (error) {
      console.error(`删除课程失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 更新课程封面
   */
  updateCourseCover: async (id: number, file: File): Promise<Course> => {
    try {
      const formData = new FormData();
      formData.append('file', file);
      const response: AxiosResponse<ApiResponse<Course>> = await request.post<Course>(
        `/courses/${id}/cover`, 
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        }
      );
      return response.data.data;
    } catch (error) {
      console.error(`更新课程封面失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 更新课程支付设置
   */
  updatePaymentSettings: async (
    id: number, 
    paymentType: CoursePaymentType, 
    price?: number, 
    discountPrice?: number
  ): Promise<Course> => {
    try {
      const params: any = { paymentType };
      if (price !== undefined) params.price = price;
      if (discountPrice !== undefined) params.discountPrice = discountPrice;
      const response: AxiosResponse<ApiResponse<Course>> = await request.post<Course>(
        `/courses/${id}/payment`, 
        null, 
        { params }
      );
      return response.data.data;
    } catch (error) {
      console.error(`更新课程支付设置失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 提交课程审核
   */
  submitForReview: async (id: number): Promise<Course> => {
    try {
      const response: AxiosResponse<ApiResponse<Course>> = await request.post<Course>(`/courses/${id}/submit`);
      return response.data.data;
    } catch (error) {
      console.error(`提交课程审核失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 生成课程预览URL
   */
  generatePreviewUrl: async (id: number): Promise<PreviewUrlVO> => {
    try {
      const response: AxiosResponse<ApiResponse<PreviewUrlVO>> = await request.get<PreviewUrlVO>(`/courses/${id}/preview`);
      return response.data.data;
    } catch (error) {
      console.error(`生成课程预览URL失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 访问课程预览
   */
  previewCourse: async (token: string): Promise<Course> => {
    try {
      const response: AxiosResponse<ApiResponse<Course>> = await request.get<Course>(`/courses/preview/${token}`);
      return response.data.data;
    } catch (error) {
      console.error(`访问课程预览失败, token: ${token}:`, error);
      throw error;
    }
  },
  /**
   * 开始审核课程 (仅限管理员)
   */
  startReview: async (id: number): Promise<Course> => {
    try {
      const response: AxiosResponse<ApiResponse<Course>> = await request.post<Course>(`/courses/${id}/review/start`);
      return response.data.data;
    } catch (error) {
      console.error(`开始审核课程失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 通过课程审核 (仅限管理员)
   */
  approveCourse: async (id: number, comment?: string): Promise<Course> => {
    try {
      const params: any = {};
      if (comment) params.comment = comment;
      const response: AxiosResponse<ApiResponse<Course>> = await request.post<Course>(
        `/courses/${id}/review/approve`, 
        null, 
        { params }
      );
      return response.data.data;
    } catch (error) {
      console.error(`通过课程审核失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 拒绝课程审核 (仅限管理员)
   */
  rejectCourse: async (id: number, reason: string): Promise<Course> => {
    try {
      const params: any = { reason };
      const response: AxiosResponse<ApiResponse<Course>> = await request.post<Course>(
        `/courses/${id}/review/reject`, 
        null, 
        { params }
      );
      return response.data.data;
    } catch (error) {
      console.error(`拒绝课程审核失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 重新编辑被拒绝的课程
   */
  reEditRejectedCourse: async (id: number): Promise<Course> => {
    try {
      const response: AxiosResponse<ApiResponse<Course>> = await request.post<Course>(`/courses/${id}/re-edit`);
      return response.data.data;
    } catch (error) {
      console.error(`重新编辑被拒绝的课程失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 获取机构发布版本课程列表
   */
  getPublishedCoursesByInstitution: async (params?: CourseQueryParams): Promise<CourseListResponse> => {
    try {
      const queryParams = buildQueryParams(params);
      const response: AxiosResponse<ApiResponse<CourseListResponse>> = await request.get<CourseListResponse>(
        '/courses/published',
        { params: queryParams }
      );
      return response.data.data;
    } catch (error) {
      console.error('获取机构发布版本课程列表失败:', error);
      throw error;
    }
  },
  /**
   * 获取课程的发布版本
   */
  getPublishedVersion: async (courseId: number): Promise<Course> => {
    try {
      const response: AxiosResponse<ApiResponse<Course>> = await request.get<Course>(
        `/courses/${courseId}/published-version`
      );
      return response.data.data;
    } catch (error) {
      console.error(`获取课程发布版本失败, ID: ${courseId}:`, error);
      throw error;
    }
  }
};
export default courseService;
</file>

<file path="front/src/services/favorite-service.ts">
import { request } from '@/services/api';
import { Page, ApiResponse } from '@/types/api';
import { AxiosResponse } from 'axios';
interface UserFavoriteVO {
  id: number;
  courseId: number;
  courseTitle: string;
  courseCoverImage: string;
  coursePrice: string;
  categoryName: string;
  institutionName: string;
  favoriteTime: string;
}
// 收藏服务
const favoriteService = {
  // 获取收藏列表
  getFavorites: async (page: number, size: number): Promise<Page<UserFavoriteVO>> => {
    try {
      const response: AxiosResponse<ApiResponse<Page<UserFavoriteVO>>> = 
        await request.get(`/favorites?page=${page}&size=${size}`);
      return response.data.data;
    } catch (error) {
      console.error('获取收藏列表失败:', error);
      throw error;
    }
  },
  // 添加收藏
  addFavorite: async (courseId: number): Promise<void> => {
    try {
      await request.post(`/favorites/${courseId}`);
    } catch (error) {
      console.error('添加收藏失败:', error);
      throw error;
    }
  },
  // 取消收藏
  removeFavorite: async (courseId: number): Promise<void> => {
    try {
      await request.delete(`/favorites/${courseId}`);
    } catch (error) {
      console.error('取消收藏失败:', error);
      throw error;
    }
  },
  // 检查是否已收藏
  checkFavorite: async (courseId: number): Promise<boolean> => {
    try {
      const response: AxiosResponse<ApiResponse<boolean>> = 
        await request.get(`/favorites/check/${courseId}`);
      return response.data.data;
    } catch (error) {
      console.error('检查收藏状态失败:', error);
      throw error;
    }
  },
  // 获取收藏数量
  getFavoriteCount: async (): Promise<number> => {
    try {
      const response: AxiosResponse<ApiResponse<number>> = 
        await request.get('/favorites/count');
      return response.data.data;
    } catch (error) {
      console.error('获取收藏数量失败:', error);
      throw error;
    }
  }
};
export default favoriteService;
export type { UserFavoriteVO };
</file>

<file path="front/src/services/index.ts">
import courseService from './course';
import chapterService from './chapter';
import sectionService from './section';
import categoryService from './category';
import tagService from './tag';
import { mediaService } from './media-service';
import questionGroupService from './question-group';
import questionService from './question';
import questionTagService from './question-tag';
import userService from './user';
import authService from './auth';
import reviewService from './review-service';
export {
  courseService,
  chapterService,
  sectionService,
  categoryService,
  tagService,
  mediaService,
  questionGroupService,
  questionService,
  questionTagService,
  userService,
  authService,
  reviewService
};
</file>

<file path="front/src/services/institution.ts">
import { request } from './api';
import { InstitutionApplyRequest, InstitutionApplicationResponse } from '@/types/institution';
/**
 * 机构服务 - 处理机构申请和查询相关接口
 */
export const institutionService = {
  /**
   * 申请创建机构
   * @param data 申请数据
   * @returns 申请ID
   */
  async applyInstitution(data: InstitutionApplyRequest): Promise<string> {
    const response = await request.post<string>('/institutions/apply', data);
    return response.data.data;
  },
  /**
   * 查询申请状态
   * @param applicationId 申请ID
   * @param email 联系邮箱
   * @returns 申请详情
   */
  async getApplicationStatus(applicationId: string, email: string): Promise<InstitutionApplicationResponse> {
    const response = await request.get<InstitutionApplicationResponse>(
      `/institutions/application-status?applicationId=${applicationId}&email=${encodeURIComponent(email)}`
    );
    return response.data.data;
  }
};
export default institutionService;
</file>

<file path="front/src/services/institutionAuth.ts">
import { request } from './api';
import { InstitutionRegisterRequest } from '@/types/institution';
/**
 * 机构认证服务 - 处理机构用户注册相关接口
 */
export const institutionAuthService = {
  /**
   * 使用机构注册码注册机构用户
   * @param data 注册数据
   */
  async register(data: InstitutionRegisterRequest): Promise<void> {
    try {
      console.log("发送机构用户注册请求到: /auth/institution/register");
      const response = await request.post('/auth/institution/register', data);
      console.log("注册API响应:", response.data);
      // 检查响应状态
      if (response.data.code !== 200 && response.data.code !== 201) {
        throw {
          code: response.data.code,
          message: response.data.message || "注册失败",
          errors: response.data.errors
        };
      }
    } catch (error) {
      console.error("机构注册服务捕获到错误:", error);
      throw error;
    }
  }
};
export default institutionAuthService;
</file>

<file path="front/src/services/institutionMember.ts">
import { request } from './api';
/**
 * 机构成员服务 - 处理机构成员管理相关接口
 */
export const institutionMemberService = {
  /**
   * 获取机构注册码（机构用户）
   * @returns 机构注册码
   */
  async getRegisterCode(): Promise<string> {
    const response = await request.get<string>('/institutions/members/register-code');
    return response.data.data;
  }
};
export default institutionMemberService;
</file>

<file path="front/src/services/media-service.ts">
import { http } from '@/lib/http';
// 媒体类型
export enum MediaType {
  VIDEO = 'VIDEO',
  AUDIO = 'AUDIO',
  IMAGE = 'IMAGE',
  DOCUMENT = 'DOCUMENT',
  OTHER = 'OTHER'
}
// 媒体状态
export enum MediaStatus {
  UPLOADING = 'UPLOADING', 
  PROCESSING = 'PROCESSING',
  COMPLETED = 'COMPLETED',
  FAILED = 'FAILED'
}
// 通用响应类型
export interface Result<T> {
    code: number;
    message: string;
    data: T;
}
// 分页响应
export interface Page<T> {
    content: T[];
    totalElements: number;
    totalPages: number;
    size: number;
    number: number;
}
// 媒体查询参数
export interface MediaQueryParams {
    page?: number;
    size?: number;
    sort?: string[];
    type?: MediaType;
}
// 媒体信息
export interface MediaVO {
    id: number;
    title: string;
    description?: string;
    type: string;
    size: number;
    originalFilename: string;
    status: string;
    institutionId: number;
    uploaderId: number;
    uploadTime: string;
    lastAccessTime: string;
    accessUrl?: string;
}
// 媒体访问URL响应
export interface MediaAccessUrlVO {
    accessUrl: string;
}
// 上传初始化请求
export interface MediaUploadInitDTO {
    filename: string;
    title: string;
    description?: string;
    contentType: string;
    fileSize: number;
    chunkSize?: number;
}
// 上传初始化响应
export interface UploadInitiationVO {
    mediaId: number;
    uploadId: string;
    totalParts: number;
    chunkSize: number;
    presignedUrls: PresignedUrlInfo[];
}
// 预签名URL信息
export interface PresignedUrlInfo {
    partNumber: number;
    url: string;
}
// 上传状态响应
export interface UploadStatusVO {
    mediaId: number;
    status: string;
    totalParts: number;
    completedParts: number;
    progressPercentage: number;
    completedPartNumbers: number[];
    initiatedAt: string;
    lastUpdatedAt: string;
    expiresAt: string;
}
// 完成上传请求
export interface CompleteUploadDTO {
    uploadId: string;
    completedParts: Array<{
        partNumber: number;
        etag: string;
    }>;
}
export interface MediaService {
  /**
   * 分页获取媒体列表
   * @param params 查询参数
   */
  getMediaList(params: MediaQueryParams): Promise<Result<Page<MediaVO>>>;
  /**
   * 获取媒体详情
   * @param mediaId 媒体ID
   */
  getMediaInfo(mediaId: number): Promise<Result<MediaVO>>;
  /**
   * 初始化上传
   * @param initDTO 初始化上传请求参数
   */
  initiateUpload(initDTO: MediaUploadInitDTO): Promise<Result<UploadInitiationVO>>;
  /**
   * 完成上传
   * @param mediaId 媒体ID
   * @param dto 完成上传请求参数
   */
  completeUpload(mediaId: number, dto: CompleteUploadDTO): Promise<Result<MediaVO>>;
  /**
   * 取消上传
   * @param mediaId 媒体ID
   */
  cancelUpload(mediaId: number): Promise<Result<void>>;
  /**
   * 获取媒体访问URL
   * @param mediaId 媒体ID
   * @param expirationMinutes URL有效期（分钟）
   */
  getMediaAccessUrl(mediaId: number, expirationMinutes?: number): Promise<Result<MediaAccessUrlVO>>;
  /**
   * 删除媒体
   * @param mediaId 媒体ID
   */
  deleteMedia(mediaId: number): Promise<Result<void>>;
}
class MediaServiceImpl implements MediaService {
  async getMediaList(params: MediaQueryParams): Promise<Result<Page<MediaVO>>> {
    console.log('MediaService.getMediaList请求参数:', params);
    // 确保将type作为查询参数传递
    const queryParams: any = { ...params };
    // 如果传递了type参数，确保它被正确地作为查询参数传递
    if (params.type) {
      queryParams.type = params.type;
    }
    console.log('发送到API的查询参数:', queryParams);
    return http.get('/api/media', { params: queryParams });
  }
  async getMediaInfo(mediaId: number): Promise<Result<MediaVO>> {
    return http.get(`/api/media/${mediaId}`);
  }
  async initiateUpload(initDTO: MediaUploadInitDTO): Promise<Result<UploadInitiationVO>> {
    return http.post('/api/media/initiate-upload', initDTO);
  }
  async completeUpload(mediaId: number, dto: CompleteUploadDTO): Promise<Result<MediaVO>> {
    return http.post(`/api/media/${mediaId}/complete`, dto);
  }
  async cancelUpload(mediaId: number): Promise<Result<void>> {
    return http.delete(`/api/media/${mediaId}/cancel`);
  }
  async getMediaAccessUrl(mediaId: number, expirationMinutes?: number): Promise<Result<MediaAccessUrlVO>> {
    return http.get(`/api/media/${mediaId}/access`, {
      params: expirationMinutes ? { expirationMinutes } : undefined
    });
  }
  async deleteMedia(mediaId: number): Promise<Result<void>> {
    return http.delete(`/api/media/${mediaId}`);
  }
}
export const mediaService = new MediaServiceImpl();
</file>

<file path="front/src/services/permission.ts">
'use client';
import { request } from './api';
import { Permission, PermissionDTO } from '@/types/permission';
import { ApiResponse } from '@/types/api';
import { AxiosResponse } from 'axios';
/**
 * 权限管理服务
 */
const permissionService = {
  /**
   * 获取权限列表
   */
  getPermissionList: async (): Promise<Permission[]> => {
    try {
      const response: AxiosResponse<ApiResponse<Permission[]>> = await request.get<Permission[]>('/permissions');
      return response.data.data;
    } catch (error) {
      console.error('获取权限列表失败:', error);
      throw error;
    }
  },
  /**
   * 根据ID获取权限详情
   */
  getPermissionById: async (id: number): Promise<Permission> => {
    try {
      const response: AxiosResponse<ApiResponse<Permission>> = await request.get<Permission>(`/permissions/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`获取权限详情失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 创建权限
   */
  createPermission: async (permission: PermissionDTO): Promise<Permission> => {
    try {
      const response: AxiosResponse<ApiResponse<Permission>> = await request.post<Permission>('/permissions', permission);
      return response.data.data;
    } catch (error) {
      console.error('创建权限失败:', error);
      throw error;
    }
  },
  /**
   * 更新权限
   */
  updatePermission: async (id: number, permission: PermissionDTO): Promise<Permission> => {
    try {
      const response: AxiosResponse<ApiResponse<Permission>> = await request.put<Permission>(`/permissions/${id}`, permission);
      return response.data.data;
    } catch (error) {
      console.error(`更新权限失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 删除权限
   */
  deletePermission: async (id: number): Promise<void> => {
    try {
      await request.delete(`/permissions/${id}`);
    } catch (error) {
      console.error(`删除权限失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 批量删除权限
   */
  batchDeletePermissions: async (ids: number[]): Promise<void> => {
    try {
      await request.delete('/permissions/batch', { data: ids });
    } catch (error) {
      console.error('批量删除权限失败:', error);
      throw error;
    }
  }
};
export default permissionService;
</file>

<file path="front/src/services/question-group.ts">
'use client';
import { request } from './api';
import { ApiResponse, PaginationResult } from '@/types/api';
import { AxiosResponse } from 'axios';
import { Question, QuestionGroup, QuestionGroupDTO, QuestionGroupItemVO } from '@/types/question';
interface GetGroupsParams {
  institutionId?: number;
  keyword?: string;
  page?: number;
  size?: number;
  pageSize?: number;
}
interface QuestionGroupItemDTO {
  groupId: number;
  questionId: number;
  orderIndex?: number;
}
/**
 * 问题组管理服务
 */
const questionGroupService = {
  /**
   * 获取问题组列表
   */
  getQuestionGroupList: async (
    params: { page?: number; pageSize?: number; name?: string; institutionId?: number; }
  ): Promise<PaginationResult<QuestionGroup>> => {
    try {
      const response: AxiosResponse<ApiResponse<PaginationResult<QuestionGroup>>> = 
        await request.get('/questions/groups', { params });
      return response.data.data;
    } catch (error) {
      console.error('获取问题组列表失败:', error);
      throw error;
    }
  },
  /**
   * 获取问题组详情
   */
  getQuestionGroupById: async (id: number): Promise<QuestionGroup> => {
    try {
      const response: AxiosResponse<ApiResponse<QuestionGroup>> = 
        await request.get(`/questions/groups/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`获取问题组详情失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 创建问题组
   */
  createQuestionGroup: async (questionGroup: QuestionGroupDTO): Promise<QuestionGroup> => {
    try {
      const response: AxiosResponse<ApiResponse<QuestionGroup>> = 
        await request.post('/questions/groups', questionGroup);
      return response.data.data;
    } catch (error) {
      console.error('创建问题组失败:', error);
      throw error;
    }
  },
  /**
   * 更新问题组
   */
  updateQuestionGroup: async (id: number, questionGroup: QuestionGroupDTO): Promise<QuestionGroup> => {
    try {
      const response: AxiosResponse<ApiResponse<QuestionGroup>> = 
        await request.put(`/questions/groups/${id}`, questionGroup);
      return response.data.data;
    } catch (error) {
      console.error(`更新问题组失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 删除问题组
   */
  deleteQuestionGroup: async (id: number): Promise<void> => {
    try {
      await request.delete(`/questions/groups/${id}`);
    } catch (error) {
      console.error(`删除问题组失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 获取问题组内的问题列表
   */
  getQuestionsInGroup: async (
    groupId: number,
    params?: { page?: number; pageSize?: number; }
  ): Promise<PaginationResult<Question>> => {
    try {
      const response: AxiosResponse<ApiResponse<PaginationResult<Question>>> = 
        await request.get(`/questions/groups/${groupId}/questions`, { params });
      return response.data.data;
    } catch (error) {
      console.error(`获取问题组内问题列表失败, 组ID: ${groupId}:`, error);
      throw error;
    }
  },
  /**
   * 添加问题到问题组
   */
  addQuestionsToGroup: async (groupId: number, questionIds: number[]): Promise<void> => {
    try {
      await request.post(`/questions/groups/${groupId}/questions`, questionIds);
    } catch (error) {
      console.error(`添加问题到问题组失败, 组ID: ${groupId}:`, error);
      throw error;
    }
  },
  /**
   * 从问题组中移除问题
   */
  removeQuestionFromGroup: async (groupId: number, questionId: number): Promise<void> => {
    try {
      await request.delete(`/questions/groups/${groupId}/questions/${questionId}`);
    } catch (error) {
      console.error(`从问题组中移除问题失败, 组ID: ${groupId}, 问题ID: ${questionId}:`, error);
      throw error;
    }
  },
  /**
   * 获取题组列表
   */
  getGroups: async (params: GetGroupsParams): Promise<PaginationResult<QuestionGroup>> => {
    try {
      const response: AxiosResponse<ApiResponse<PaginationResult<QuestionGroup>>> = 
        await request.get('/questions/groups', { params });
      return response.data.data;
    } catch (error) {
      console.error('获取题组列表失败:', error);
      throw error;
    }
  },
  /**
   * 获取题组详情
   */
  getGroupById: async (id: number): Promise<QuestionGroup> => {
    try {
      const response: AxiosResponse<ApiResponse<QuestionGroup>> = 
        await request.get(`/questions/groups/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`获取题组详情失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 创建题组
   */
  createGroup: async (groupDTO: QuestionGroupDTO): Promise<QuestionGroup> => {
    try {
      const response: AxiosResponse<ApiResponse<QuestionGroup>> = 
        await request.post('/questions/groups', groupDTO);
      return response.data.data;
    } catch (error) {
      console.error('创建题组失败:', error);
      throw error;
    }
  },
  /**
   * 更新题组
   */
  updateGroup: async (id: number, groupDTO: QuestionGroupDTO): Promise<QuestionGroup> => {
    try {
      const response: AxiosResponse<ApiResponse<QuestionGroup>> = 
        await request.put(`/questions/groups/${id}`, groupDTO);
      return response.data.data;
    } catch (error) {
      console.error(`更新题组失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 删除题组
   */
  deleteGroup: async (id: number): Promise<void> => {
    try {
      await request.delete(`/questions/groups/${id}`);
    } catch (error) {
      console.error(`删除题组失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 获取题组中的题目
   */
  getGroupItems: async (groupId: number): Promise<QuestionGroupItemVO[]> => {
    try {
      const response: AxiosResponse<ApiResponse<QuestionGroupItemVO[]>> = 
        await request.get(`/questions/groups/${groupId}/items`);
      return response.data.data;
    } catch (error) {
      console.error(`获取题组题目失败, ID: ${groupId}:`, error);
      throw error;
    }
  },
  /**
   * 添加题目到题组
   */
  addQuestionToGroup: async (groupId: number, questionId: number): Promise<QuestionGroupItemVO> => {
    try {
      const itemDTO: QuestionGroupItemDTO = {
        groupId,
        questionId,
        orderIndex: 0 // 默认添加到最后
      };
      const response: AxiosResponse<ApiResponse<QuestionGroupItemVO>> = 
        await request.post('/questions/groups/items', itemDTO);
      return response.data.data;
    } catch (error) {
      console.error('添加题目到题组失败:', error);
      throw error;
    }
  },
  /**
   * 从题组中移除题目
   */
  removeItemFromGroup: async (groupId: number, itemId: number): Promise<void> => {
    try {
      await request.delete(`/questions/groups/${groupId}/items/${itemId}`);
    } catch (error) {
      console.error('从题组移除题目失败:', error);
      throw error;
    }
  },
  /**
   * 更新题目顺序
   */
  updateItemsOrder: async (groupId: number, itemIds: number[]): Promise<boolean> => {
    try {
      const response: AxiosResponse<ApiResponse<boolean>> = 
        await request.put(`/questions/groups/${groupId}/items/order`, 
          itemIds.map((id, index) => ({
            id,
            orderIndex: index
          }))
        );
      return response.data.data;
    } catch (error) {
      console.error('更新题目顺序失败:', error);
      throw error;
    }
  }
};
export default questionGroupService;
</file>

<file path="front/src/services/question-helper.ts">
/**
 * 题目服务辅助函数
 */
import { QuestionType, QuestionDifficulty } from '@/types/question';
import questionService from './question';
import { toast } from 'sonner';
/**
 * 执行题目搜索
 * @param params - 搜索参数
 * @param callbacks - 回调函数
 */
export const executeQuestionSearch = async (
  params: {
    institutionId: number;
    page?: number;
    pageSize?: number;
    keyword?: string;
    type?: number | null;
    difficulty?: number | null;
    tagIds?: number[] | null;
  },
  callbacks: {
    onLoading?: (loading: boolean) => void;
    onSuccess?: (content: any[], total: number) => void;
    onError?: (error: any) => void;
  }
) => {
  // 设置加载状态
  if (callbacks.onLoading) {
    callbacks.onLoading(true);
  }
  try {
    // 构建API参数
    const apiParams: Record<string, any> = {
      page: params.page !== undefined ? params.page : 0,
      pageSize: params.pageSize || 10,
      institutionId: params.institutionId
    };
    // 添加可选参数
    if (params.keyword) apiParams.keyword = params.keyword;
    if (params.type !== undefined) apiParams.type = params.type;
    if (params.difficulty !== undefined) apiParams.difficulty = params.difficulty;
    if (params.tagIds && params.tagIds.length > 0) apiParams.tagIds = params.tagIds;
    // 打印请求参数
    console.log('搜索请求参数:', apiParams);
    // 发送请求
    const response = await questionService.getQuestionList(apiParams);
    // 处理成功回调
    if (callbacks.onSuccess) {
      callbacks.onSuccess(response.content, response.totalElements);
    }
  } catch (error) {
    console.error('搜索题目失败:', error);
    toast.error('搜索题目失败');
    // 处理错误回调
    if (callbacks.onError) {
      callbacks.onError(error);
    }
  } finally {
    // 重置加载状态
    if (callbacks.onLoading) {
      callbacks.onLoading(false);
    }
  }
};
</file>

<file path="front/src/services/question-import.ts">
'use client';
import { request } from './api';
import { ApiResponse } from '@/types/api';
import axios, { AxiosResponse } from 'axios';
import { QuestionImportResultVO } from '@/types/question';
/**
 * 试题导入服务
 */
const questionImportService = {
  /**
   * 下载试题导入模板
   */
  downloadTemplate: async (): Promise<void> => {
    try {
      // 由于这个请求直接返回文件，不是JSON，使用axios直接请求
      const baseUrl = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080/api';
      const token = localStorage.getItem('token');
      const response = await axios.get(`${baseUrl}/questions/import/template`, {
        responseType: 'blob',
        headers: {
          Authorization: token ? `Bearer ${token}` : '',
        }
      });
      // 创建下载链接
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', '试题导入模板.xlsx');
      document.body.appendChild(link);
      link.click();
      // 清理
      window.URL.revokeObjectURL(url);
      document.body.removeChild(link);
    } catch (error) {
      console.error('下载试题导入模板失败:', error);
      throw error;
    }
  },
  /**
   * 导入试题
   * @param file Excel文件
   * @param institutionId 机构ID
   * @param batchSize 批处理大小（可选）
   */
  importQuestions: async (
    file: File,
    institutionId: number,
    batchSize?: number
  ): Promise<QuestionImportResultVO> => {
    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('institutionId', institutionId.toString());
      if (batchSize) {
        formData.append('batchSize', batchSize.toString());
      }
      const response: AxiosResponse<ApiResponse<QuestionImportResultVO>> = await request.post(
        '/questions/import',
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        }
      );
      return response.data.data;
    } catch (error) {
      console.error('导入试题失败:', error);
      throw error;
    }
  },
};
export default questionImportService;
</file>

<file path="front/src/services/question-tag.ts">
'use client';
import { request } from './api';
import { ApiResponse, PaginationResult } from '@/types/api';
import { AxiosResponse } from 'axios';
import { QuestionTag, QuestionTagDTO } from '@/types/question';
/**
 * 问题标签管理服务
 */
const questionTagService = {
  /**
   * 获取问题标签列表
   */
  getQuestionTagList: async (
    params: { page?: number; pageSize?: number; name?: string; institutionId?: number; }
  ): Promise<PaginationResult<QuestionTag>> => {
    try {
      const response: AxiosResponse<ApiResponse<PaginationResult<QuestionTag>>> = 
        await request.get('/questions/tags', { params });
      return response.data.data;
    } catch (error) {
      console.error('获取问题标签列表失败:', error);
      throw error;
    }
  },
  /**
   * 获取所有问题标签（不分页）
   */
  getAllQuestionTags: async (institutionId: number): Promise<QuestionTag[]> => {
    try {
      const response: AxiosResponse<ApiResponse<QuestionTag[]>> = 
        await request.get('/questions/tags/all', { params: { institutionId } });
      return response.data.data;
    } catch (error) {
      console.error('获取所有问题标签失败:', error);
      throw error;
    }
  },
  /**
   * 获取问题标签详情
   */
  getQuestionTagById: async (id: number): Promise<QuestionTag> => {
    try {
      const response: AxiosResponse<ApiResponse<QuestionTag>> = 
        await request.get(`/questions/tags/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`获取问题标签详情失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 创建问题标签
   */
  createQuestionTag: async (questionTag: QuestionTagDTO): Promise<QuestionTag> => {
    try {
      const response: AxiosResponse<ApiResponse<QuestionTag>> = 
        await request.post('/questions/tags', questionTag);
      return response.data.data;
    } catch (error) {
      console.error('创建问题标签失败:', error);
      throw error;
    }
  },
  /**
   * 更新问题标签
   */
  updateQuestionTag: async (id: number, questionTag: QuestionTagDTO): Promise<QuestionTag> => {
    try {
      const response: AxiosResponse<ApiResponse<QuestionTag>> = 
        await request.put(`/questions/tags/${id}`, questionTag);
      return response.data.data;
    } catch (error) {
      console.error(`更新问题标签失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 删除问题标签
   */
  deleteQuestionTag: async (id: number): Promise<void> => {
    try {
      await request.delete(`/questions/tags/${id}`);
    } catch (error) {
      console.error(`删除问题标签失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 批量删除问题标签
   */
  batchDeleteQuestionTags: async (ids: number[]): Promise<void> => {
    try {
      await request.delete('/questions/tags/batch', { data: ids });
    } catch (error) {
      console.error('批量删除问题标签失败:', error);
      throw error;
    }
  }
};
export default questionTagService;
</file>

<file path="front/src/services/question.ts">
'use client';
import { request } from './api';
import { ApiResponse, PaginationResult } from '@/types/api';
import { AxiosResponse } from 'axios';
import { Question, QuestionDTO, QuestionQueryParams } from '@/types/question';
/**
 * 问题管理服务
 */
const questionService = {
  /**
   * 获取问题列表（分页）
   */
  getQuestionList: async (params: QuestionQueryParams): Promise<PaginationResult<Question>> => {
    try {
      const { page = 0, pageSize = 10, institutionId, type, difficulty, title, search, tagIds, ...restParams } = params;
      // 将title和search参数都重命名为keyword
      let keyword = title || search;
      // 创建请求参数对象
      const requestParams: Record<string, any> = {
        page,
        pageSize,
        institutionId,
        ...restParams
      };
      // 仅当有值时添加可选参数
      if (type !== undefined) requestParams.type = type;
      if (difficulty !== undefined) requestParams.difficulty = difficulty;
      if (keyword) requestParams.keyword = keyword;
      // 处理tagIds数组 - 如果是数组且有元素，转换为逗号分隔的字符串
      if (tagIds && Array.isArray(tagIds) && tagIds.length > 0) {
        requestParams.tagIds = tagIds.join(',');
      }
      // 添加调试日志
      console.log('请求参数:', JSON.stringify(requestParams));
      const response: AxiosResponse<ApiResponse<PaginationResult<Question>>> = await request.get('/v1/questions', { params: requestParams });
      return response.data.data;
    } catch (error) {
      console.error('获取问题列表失败:', error);
      throw error;
    }
  },
  /**
   * 获取单个问题详情
   */
  getQuestionById: async (id: number): Promise<Question> => {
    try {
      const response: AxiosResponse<ApiResponse<Question>> = await request.get(`/v1/questions/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`获取问题详情失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 创建问题
   */
  createQuestion: async (question: QuestionDTO): Promise<Question> => {
    try {
      const response: AxiosResponse<ApiResponse<Question>> = await request.post('/v1/questions', question);
      return response.data.data;
    } catch (error) {
      console.error('创建问题失败:', error);
      throw error;
    }
  },
  /**
   * 更新问题
   */
  updateQuestion: async (id: number, question: QuestionDTO): Promise<Question> => {
    try {
      const response: AxiosResponse<ApiResponse<Question>> = await request.put(`/v1/questions/${id}`, question);
      return response.data.data;
    } catch (error) {
      console.error(`更新问题失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 删除问题
   */
  deleteQuestion: async (questionId: number): Promise<void> => {
    try {
      await request.delete(`/v1/questions/${questionId}`);
    } catch (error) {
      console.error(`删除题目失败, ID: ${questionId}:`, error);
      throw error;
    }
  },
  /**
   * 批量删除问题
   */
  batchDeleteQuestions: async (ids: number[]): Promise<void> => {
    try {
      await request.delete('/v1/questions/batch', { data: ids });
    } catch (error) {
      console.error('批量删除问题失败:', error);
      throw error;
    }
  },
  /**
   * 检查题目是否被引用
   */
  checkQuestionReferences: async (questionId: number, institutionId: number): Promise<{ isReferenced: boolean; references: any }> => {
    try {
      const response: AxiosResponse<ApiResponse<{ isReferenced: boolean; references: any }>> = 
        await request.get(`/v1/questions/${questionId}/check-references`, { 
          params: { institutionId } 
        });
      return response.data.data;
    } catch (error) {
      console.error(`检查题目引用失败, ID: ${questionId}:`, error);
      throw error;
    }
  }
};
export default questionService;
</file>

<file path="front/src/services/review-service.ts">
'use client';
import { request } from './api';
import { ApiResponse } from '@/types/api';
import { ReviewTask, ReviewResponseDTO, ReviewType, ReviewStatus } from '@/types/review';
import { CourseStructureVO } from '@/types/course';
import { AxiosResponse } from 'axios';
/**
 * 审核服务
 */
export const reviewService = {
  /**
   * 获取所有审核课程列表 (待审核课程)
   * @param page 页码或分页对象
   * @param size 每页数量
   */
  getAllCourses: async (page: number | any = 0, size: number = 10): Promise<any> => {
    try {
      // 确保page是数字
      const pageNum = typeof page === 'object' ? 0 : page;
      const response: AxiosResponse<ApiResponse<any>> = await request.get<any>(
        `/reviewer/courses/pending?page=${pageNum}&size=${size}`
      );
      console.log('审核课程列表响应:', response.data);
      return response.data.data;
    } catch (error) {
      console.error('获取审核课程列表失败:', error);
      throw error;
    }
  },
  /**
   * 获取正在审核的课程列表
   * @param page 页码
   * @param size 每页数量
   */
  getReviewingCourses: async (page: number = 0, size: number = 10): Promise<any> => {
    try {
      const response: AxiosResponse<ApiResponse<any>> = await request.get<any>(
        `/reviewer/courses/reviewing?page=${page}&size=${size}`
      );
      console.log('正在审核课程列表响应:', response.data);
      return response.data.data;
    } catch (error) {
      console.error('获取正在审核课程列表失败:', error);
      throw error;
    }
  },
  /**
   * 获取审核任务列表
   * @param page 页码
   * @param size 每页数量
   */
  getReviewTasks: async (page: number = 0, size: number = 10): Promise<any> => {
    try {
      const response: AxiosResponse<ApiResponse<any>> = await request.get<any>(
        `/reviews?page=${page}&size=${size}`
      );
      console.log('审核任务列表响应:', response.data);
      return response.data.data;
    } catch (error) {
      console.error('获取审核任务列表失败:', error);
      throw error;
    }
  },
  /**
   * 获取审核任务详情
   * @param reviewId 审核ID
   */
  getReviewTask: async (reviewId: string): Promise<ReviewTask> => {
    try {
      const response: AxiosResponse<ApiResponse<ReviewTask>> = await request.get<ReviewTask>(
        `/reviews/${reviewId}/task`
      );
      console.log('审核任务详情响应:', response.data);
      return response.data.data;
    } catch (error) {
      console.error('获取审核任务失败:', error);
      throw error;
    }
  },
  /**
   * 获取课程结构
   * @param courseId 课程ID
   */
  getCourseStructure: async (courseId: number): Promise<CourseStructureVO> => {
    try {
      const response: AxiosResponse<ApiResponse<CourseStructureVO>> = await request.get<CourseStructureVO>(
        `/reviewer/courses/${courseId}/structure`
      );
      console.log('课程结构响应:', response.data);
      return response.data.data;
    } catch (error) {
      console.error('获取课程结构失败:', error);
      throw error;
    }
  },
  /**
   * 获取小节媒体内容
   * @param sectionId 小节ID
   */
  getSectionMedia: async (sectionId: string | number): Promise<any> => {
    try {
      const response: AxiosResponse<ApiResponse<any>> = await request.get<any>(
        `/preview/resources/sections/${sectionId}/media`
      );
      return response.data.data;
    } catch (error) {
      console.error('获取小节媒体失败:', error);
      throw error;
    }
  },
  /**
   * 获取小节题组内容
   * @param sectionId 小节ID
   */
  getSectionQuestionGroup: async (sectionId: string | number): Promise<any> => {
    try {
      const response: AxiosResponse<ApiResponse<any>> = await request.get<any>(
        `/preview/resources/sections/${sectionId}/question-group`
      );
      return response.data.data;
    } catch (error) {
      console.error('获取小节题组失败:', error);
      throw error;
    }
  },
  /**
   * 开始审核课程
   * @param courseId 课程ID
   */
  startReview: async (courseId: number): Promise<any> => {
    try {
      const response: AxiosResponse<ApiResponse<any>> = await request.post<any>(
        `/reviewer/courses/${courseId}/review/start`
      );
      return response.data.data;
    } catch (error) {
      console.error('开始审核课程失败:', error);
      throw error;
    }
  },
  /**
   * 通过课程审核
   * @param courseId 课程ID
   * @param comment 审核意见
   */
  approveCourse: async (courseId: string, comment: string): Promise<void> => {
    try {
      const response: AxiosResponse<ApiResponse<void>> = await request.post<void>(
        `/reviewer/courses/${courseId}/review/approve?comment=${comment || ''}`
      );
      return response.data.data;
    } catch (error) {
      console.error('通过课程审核失败:', error);
      throw error;
    }
  },
  /**
   * 拒绝课程审核
   * @param courseId 课程ID
   * @param comment 拒绝原因
   */
  rejectCourse: async (courseId: string, comment: string): Promise<void> => {
    try {
      const data = { reason: comment };
      const response: AxiosResponse<ApiResponse<void>> = await request.post<void>(
        `/reviewer/courses/${courseId}/review/reject`,
        data
      );
      return response.data.data;
    } catch (error) {
      console.error('拒绝课程审核失败:', error);
      throw error;
    }
  },
  /**
   * 获取课程详情
   * @param courseId 课程ID
   */
  getCourseById: async (courseId: number): Promise<any> => {
    try {
      const response: AxiosResponse<ApiResponse<any>> = await request.get<any>(
        `/reviewer/courses/${courseId}`
      );
      return response.data.data;
    } catch (error) {
      console.error('获取课程详情失败:', error);
      throw error;
    }
  }
};
// 添加默认导出
export default reviewService;
</file>

<file path="front/src/services/reviewerInstitution.ts">
import { request } from './api';
import { InstitutionApplicationResponse, InstitutionResponse, Page, InstitutionApplicationQueryParams } from '@/types/institution';
/**
 * 机构审核服务 - 处理机构申请审核相关接口（管理员/审核员使用）
 */
export const reviewerInstitutionService = {
  /**
   * 分页查询机构申请列表
   * @param params 查询参数
   * @returns 申请列表分页数据
   */
  async getApplications(params: InstitutionApplicationQueryParams): Promise<Page<InstitutionApplicationResponse>> {
    const { page = 0, size = 10, status } = params;
    let url = `/reviewer/institutions/applications?page=${page}&size=${size}`;
    if (status !== undefined) {
      url += `&status=${status}`;
    }
    if (params.name) {
      url += `&name=${encodeURIComponent(params.name)}`;
    }
    if (params.applicationId) {
      url += `&applicationId=${encodeURIComponent(params.applicationId)}`;
    }
    if (params.contactEmail) {
      url += `&contactEmail=${encodeURIComponent(params.contactEmail)}`;
    }
    if (params.contactPerson) {
      url += `&contactPerson=${encodeURIComponent(params.contactPerson)}`;
    }
    const response = await request.get<Page<InstitutionApplicationResponse>>(url);
    return response.data.data;
  },
  /**
   * 获取申请详情
   * @param id 申请ID
   * @returns 申请详情
   */
  async getApplicationDetail(id: number): Promise<InstitutionApplicationResponse> {
    const response = await request.get<InstitutionApplicationResponse>(`/reviewer/institutions/applications/${id}`);
    return response.data.data;
  },
  /**
   * 审核通过
   * @param id 申请ID
   * @returns 创建的机构信息
   */
  async approveApplication(id: number): Promise<InstitutionResponse> {
    const response = await request.post<InstitutionResponse>(`/reviewer/institutions/applications/${id}/approve`);
    return response.data.data;
  },
  /**
   * 审核拒绝
   * @param id 申请ID
   * @param reason 拒绝原因
   */
  async rejectApplication(id: number, reason: string): Promise<void> {
    await request.post(`/reviewer/institutions/applications/${id}/reject?reason=${encodeURIComponent(reason)}`);
  }
};
export default reviewerInstitutionService;
</file>

<file path="front/src/services/role.ts">
'use client';
import { request } from './api';
import { Role, RoleDTO } from '@/types/role';
import { ApiResponse } from '@/types/api';
import { AxiosResponse } from 'axios';
/**
 * 角色管理服务
 */
const roleService = {
  /**
   * 获取角色列表
   */
  getRoleList: async (): Promise<Role[]> => {
    try {
      const response: AxiosResponse<ApiResponse<Role[]>> = await request.get<Role[]>('/roles');
      return response.data.data;
    } catch (error) {
      console.error('获取角色列表失败:', error);
      throw error;
    }
  },
  /**
   * 根据ID获取角色详情
   */
  getRoleById: async (id: number): Promise<Role> => {
    try {
      const response: AxiosResponse<ApiResponse<Role>> = await request.get<Role>(`/roles/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`获取角色详情失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 创建角色
   */
  createRole: async (role: RoleDTO): Promise<Role> => {
    try {
      const response: AxiosResponse<ApiResponse<Role>> = await request.post<Role>('/roles', role);
      return response.data.data;
    } catch (error) {
      console.error('创建角色失败:', error);
      throw error;
    }
  },
  /**
   * 更新角色
   */
  updateRole: async (id: number, role: RoleDTO): Promise<Role> => {
    try {
      const response: AxiosResponse<ApiResponse<Role>> = await request.put<Role>(`/roles/${id}`, role);
      return response.data.data;
    } catch (error) {
      console.error(`更新角色失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 删除角色
   */
  deleteRole: async (id: number): Promise<void> => {
    try {
      await request.delete(`/roles/${id}`);
    } catch (error) {
      console.error(`删除角色失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 批量删除角色
   */
  batchDeleteRoles: async (ids: number[]): Promise<void> => {
    try {
      await request.delete('/roles/batch', { data: ids });
    } catch (error) {
      console.error('批量删除角色失败:', error);
      throw error;
    }
  },
  /**
   * 给角色分配权限
   */
  assignPermissions: async (roleId: number, permissionIds: number[]): Promise<Role> => {
    try {
      const response: AxiosResponse<ApiResponse<Role>> = await request.put<Role>(
        `/roles/${roleId}/permissions`, 
        permissionIds
      );
      return response.data.data;
    } catch (error) {
      console.error(`给角色分配权限失败, roleId: ${roleId}:`, error);
      throw error;
    }
  }
};
export default roleService;
</file>

<file path="front/src/services/section.ts">
'use client';
import { request } from './api';
import { 
  Section, 
  SectionCreateDTO, 
  SectionOrderDTO,
  SectionResource,
  SectionResourceDTO,
  SectionQuestionGroup,
  SectionQuestionGroupDTO,
  SectionQuestionGroupConfigDTO
} from '@/types/course';
import { ApiResponse } from '@/types/api';
import { AxiosResponse } from 'axios';
import { isCacheExpired, setCache, MAX_CACHE_AGE } from '@/utils/cache';
// 缓存对象
const cache: {
  byId: Record<number, Section>,
  byChapter: Record<number, Section[]>
} = {
  byId: {},
  byChapter: {}
};
export const sectionService = {
  /**
   * 创建小节
   */
  createSection: async (section: SectionCreateDTO): Promise<Section> => {
    try {
      const response: AxiosResponse<ApiResponse<Section>> = await request.post<Section>('/sections', section);
      const newSection = response.data.data;
      // 更新缓存
      cache.byId[newSection.id] = newSection;
      // 清除相关章节的小节列表缓存
      delete cache.byChapter[section.chapterId];
      return newSection;
    } catch (error) {
      console.error('创建小节失败:', error);
      throw error;
    }
  },
  /**
   * 获取小节详情
   */
  getSectionById: async (id: number): Promise<Section> => {
    try {
      // 检查缓存
      const cacheKey = `section_${id}`;
      if (cache.byId[id] && !isCacheExpired(cacheKey)) {
        return cache.byId[id];
      }
      const response: AxiosResponse<ApiResponse<Section>> = await request.get<Section>(`/sections/${id}`);
      const section = response.data.data;
      // 更新缓存
      cache.byId[id] = setCache(cacheKey, section);
      return section;
    } catch (error) {
      console.error(`获取小节详情失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 更新小节
   */
  updateSection: async (id: number, section: SectionCreateDTO): Promise<Section> => {
    try {
      const response: AxiosResponse<ApiResponse<Section>> = await request.put<Section>(`/sections/${id}`, section);
      const updatedSection = response.data.data;
      // 更新缓存
      cache.byId[id] = updatedSection;
      // 清除相关章节的小节列表缓存
      delete cache.byChapter[section.chapterId];
      return updatedSection;
    } catch (error) {
      console.error(`更新小节失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 删除小节
   */
  deleteSection: async (id: number): Promise<void> => {
    try {
      await request.delete(`/sections/${id}`);
      // 从缓存中移除
      if (cache.byId[id]) {
        const chapterId = cache.byId[id].chapterId;
        delete cache.byId[id];
        // 清除相关章节的小节列表缓存
        if (chapterId) {
          delete cache.byChapter[chapterId];
        }
      }
    } catch (error) {
      console.error(`删除小节失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 获取章节下的小节列表
   */
  getSectionsByChapter: async (chapterId: number): Promise<Section[]> => {
    try {
      // 检查缓存
      const cacheKey = `chapter_${chapterId}_sections`;
      if (cache.byChapter[chapterId] && !isCacheExpired(cacheKey)) {
        return cache.byChapter[chapterId];
      }
      const response: AxiosResponse<ApiResponse<Section[]>> = 
        await request.get<Section[]>(`/sections/chapter/${chapterId}`);
      const sections = response.data.data;
      // 更新缓存
      cache.byChapter[chapterId] = setCache(cacheKey, sections);
      // 同时更新单个小节缓存
      sections.forEach(section => {
        cache.byId[section.id] = section;
        setCache(`section_${section.id}`, section);
      });
      return sections;
    } catch (error) {
      console.error(`获取章节下的小节列表失败, chapterId: ${chapterId}:`, error);
      throw error;
    }
  },
  /**
   * 获取课程下的所有小节
   */
  getSectionsByCourse: async (courseId: number): Promise<Section[]> => {
    try {
      const response: AxiosResponse<ApiResponse<Section[]>> = 
        await request.get<Section[]>(`/sections/course/${courseId}`);
      const sections = response.data.data;
      // 更新单个小节缓存
      sections.forEach(section => {
        cache.byId[section.id] = section;
        setCache(`section_${section.id}`, section);
      });
      return sections;
    } catch (error) {
      console.error(`获取课程下的所有小节失败, courseId: ${courseId}:`, error);
      throw error;
    }
  },
  /**
   * 调整小节顺序
   */
  reorderSections: async (chapterId: number, sectionOrders: SectionOrderDTO[]): Promise<Section[]> => {
    try {
      const response: AxiosResponse<ApiResponse<Section[]>> = 
        await request.put<Section[]>(`/sections/chapter/${chapterId}/reorder`, sectionOrders);
      const sections = response.data.data;
      // 更新缓存
      cache.byChapter[chapterId] = sections;
      setCache(`chapter_${chapterId}_sections`, sections);
      // 更新单个小节缓存
      sections.forEach(section => {
        cache.byId[section.id] = section;
        setCache(`section_${section.id}`, section);
      });
      return sections;
    } catch (error) {
      console.error(`调整小节顺序失败, chapterId: ${chapterId}:`, error);
      throw error;
    }
  },
  /**
   * 设置小节媒体资源（直接关联）
   */
  setMediaResource: async (sectionId: number, mediaId: number, resourceType: string): Promise<Section> => {
    try {
      const response: AxiosResponse<ApiResponse<Section>> = 
        await request.put<Section>(`/sections/${sectionId}/media/${mediaId}?resourceType=${resourceType}`);
      const updatedSection = response.data.data;
      // 更新缓存
      cache.byId[sectionId] = updatedSection;
      return updatedSection;
    } catch (error) {
      console.error(`设置小节媒体资源失败, sectionId: ${sectionId}, mediaId: ${mediaId}:`, error);
      throw error;
    }
  },
  /**
   * 移除小节媒体资源（直接关联）
   */
  removeMediaResource: async (sectionId: number): Promise<Section> => {
    try {
      const response: AxiosResponse<ApiResponse<Section>> = 
        await request.delete<Section>(`/sections/${sectionId}/media`);
      const updatedSection = response.data.data;
      // 更新缓存
      cache.byId[sectionId] = updatedSection;
      return updatedSection;
    } catch (error) {
      console.error(`移除小节媒体资源失败, sectionId: ${sectionId}:`, error);
      throw error;
    }
  },
  /**
   * 设置小节题目组（直接关联）
   */
  setQuestionGroup: async (
    sectionId: number, 
    questionGroupId: number, 
    config?: SectionQuestionGroupConfigDTO
  ): Promise<Section> => {
    try {
      const response: AxiosResponse<ApiResponse<Section>> = 
        await request.put<Section>(`/sections/${sectionId}/question-group/${questionGroupId}`, config || {});
      const updatedSection = response.data.data;
      // 更新缓存
      cache.byId[sectionId] = updatedSection;
      return updatedSection;
    } catch (error) {
      console.error(`设置小节题目组失败, sectionId: ${sectionId}, questionGroupId: ${questionGroupId}:`, error);
      throw error;
    }
  },
  /**
   * 移除小节题目组（直接关联）
   */
  removeQuestionGroup: async (sectionId: number): Promise<Section> => {
    try {
      const response: AxiosResponse<ApiResponse<Section>> = 
        await request.delete<Section>(`/sections/${sectionId}/question-group`);
      const updatedSection = response.data.data;
      // 更新缓存
      cache.byId[sectionId] = updatedSection;
      return updatedSection;
    } catch (error) {
      console.error(`移除小节题目组失败, sectionId: ${sectionId}:`, error);
      throw error;
    }
  },
  /**
   * 添加小节资源
   * @deprecated 使用 setMediaResource 替代
   */
  addSectionResource: async (resource: SectionResourceDTO): Promise<SectionResource> => {
    try {
      const response: AxiosResponse<ApiResponse<SectionResource>> = 
        await request.post<SectionResource>('/sections/resources', resource);
      // 清除相关小节缓存
      delete cache.byId[resource.sectionId];
      return response.data.data;
    } catch (error) {
      console.error(`添加小节资源失败, sectionId: ${resource.sectionId}:`, error);
      throw error;
    }
  },
  /**
   * 获取小节资源列表
   * @deprecated 资源现在直接存储在小节对象中
   */
  getSectionResources: async (sectionId: number): Promise<SectionResource[]> => {
    try {
      const response: AxiosResponse<ApiResponse<SectionResource[]>> = 
        await request.get<SectionResource[]>(`/sections/${sectionId}/resources`);
      return response.data.data;
    } catch (error) {
      console.error(`获取小节资源列表失败, sectionId: ${sectionId}:`, error);
      throw error;
    }
  },
  /**
   * 删除小节资源
   * @deprecated 使用 removeMediaResource 替代
   */
  deleteSectionResource: async (resourceId: number): Promise<void> => {
    try {
      await request.delete(`/sections/resources/${resourceId}`);
    } catch (error) {
      console.error(`删除小节资源失败, resourceId: ${resourceId}:`, error);
      throw error;
    }
  },
  /**
   * 添加小节题目组
   * @deprecated 使用 setQuestionGroup 替代
   */
  addSectionQuestionGroup: async (questionGroup: SectionQuestionGroupDTO): Promise<SectionQuestionGroup> => {
    try {
      const response: AxiosResponse<ApiResponse<SectionQuestionGroup>> = 
        await request.post<SectionQuestionGroup>('/sections/question-groups', questionGroup);
      // 清除相关小节缓存
      delete cache.byId[questionGroup.sectionId];
      return response.data.data;
    } catch (error) {
      console.error(`添加小节题目组失败, sectionId: ${questionGroup.sectionId}:`, error);
      throw error;
    }
  },
  /**
   * 获取小节题目组列表
   * @deprecated 题目组现在直接存储在小节对象中
   */
  getSectionQuestionGroups: async (sectionId: number): Promise<SectionQuestionGroup[]> => {
    try {
      const response: AxiosResponse<ApiResponse<SectionQuestionGroup[]>> = 
        await request.get<SectionQuestionGroup[]>(`/sections/${sectionId}/question-groups`);
      return response.data.data;
    } catch (error) {
      console.error(`获取小节题目组列表失败, sectionId: ${sectionId}:`, error);
      throw error;
    }
  },
  /**
   * 更新小节题目组
   * @deprecated 使用 setQuestionGroup 替代
   */
  updateSectionQuestionGroup: async (
    sectionId: number, 
    questionGroupId: number, 
    questionGroup: SectionQuestionGroupDTO
  ): Promise<SectionQuestionGroup> => {
    try {
      const response: AxiosResponse<ApiResponse<SectionQuestionGroup>> = 
        await request.put<SectionQuestionGroup>(`/sections/${sectionId}/question-groups/${questionGroupId}`, questionGroup);
      // 清除相关小节缓存
      delete cache.byId[sectionId];
      return response.data.data;
    } catch (error) {
      console.error(`更新小节题目组失败, sectionId: ${sectionId}, questionGroupId: ${questionGroupId}:`, error);
      throw error;
    }
  },
  /**
   * 删除小节题目组
   * @deprecated 使用 removeQuestionGroup 替代
   */
  deleteSectionQuestionGroup: async (sectionId: number, questionGroupId: number): Promise<void> => {
    try {
      await request.delete(`/sections/${sectionId}/question-groups/${questionGroupId}`);
      // 清除相关小节缓存
      delete cache.byId[sectionId];
    } catch (error) {
      console.error(`删除小节题目组失败, sectionId: ${sectionId}, questionGroupId: ${questionGroupId}:`, error);
      throw error;
    }
  }
};
export default sectionService;
</file>

<file path="front/src/services/storage-service.ts">
import { http } from '@/lib/http';
import type { Result, QuotaInfoVO } from '@/types/api';
export interface StorageService {
  /**
   * 获取机构的存储配额信息
   * @param institutionId 机构ID
   */
  getQuotaInfo(institutionId: number): Promise<Result<QuotaInfoVO>>;
  /**
   * 获取机构的详细配额信息
   * @param institutionId 机构ID
   */
  getAllQuotas(institutionId: number): Promise<Result<QuotaInfoVO[]>>;
  /**
   * 获取当前机构的存储配额使用情况
   */
  getCurrentQuotas(): Promise<Result<QuotaInfoVO[]>>;
}
class StorageServiceImpl implements StorageService {
  async getQuotaInfo(institutionId: number): Promise<Result<QuotaInfoVO>> {
    return http.get(`/api/storage/quota/${institutionId}`);
  }
  async getAllQuotas(institutionId: number): Promise<Result<QuotaInfoVO[]>> {
    return http.get(`/api/storage/quota/${institutionId}/details`);
  }
  async getCurrentQuotas(): Promise<Result<QuotaInfoVO[]>> {
    return http.get('/api/media/quota');
  }
}
export const storageService = new StorageServiceImpl();
</file>

<file path="front/src/services/tag.ts">
'use client';
import { request } from './api';
import { Tag, TagDTO } from '@/types/course';
import { ApiResponse, PaginationResult } from '@/types/api';
import { AxiosResponse } from 'axios';
import { useCacheStore } from '@/stores/cache-store';
/**
 * 标签管理服务
 */
const tagService = {
  /**
   * 获取标签列表（分页）
   */
  getTagList: async (keyword?: string, page = 0, size = 20): Promise<PaginationResult<Tag>> => {
    try {
      const params: any = { page, size };
      if (keyword) params.keyword = keyword;
      const response = await request.get<PaginationResult<Tag>>('/tags', { params });
      const result = (response.data as unknown as ApiResponse<PaginationResult<Tag>>).data;
      return result || {
        content: [],
        totalElements: 0,
        totalPages: 0,
        size: 0,
        number: 0,
        first: true,
        last: true,
        empty: true,
        numberOfElements: 0
      };
    } catch (error) {
      console.error('获取标签列表失败:', error);
      return {
        content: [],
        totalElements: 0,
        totalPages: 0,
        size: 0,
        number: 0,
        first: true,
        last: true,
        empty: true,
        numberOfElements: 0
      };
    }
  },
  /**
   * 根据ID获取标签详情
   */
  getTagById: async (id: number): Promise<Tag | null> => {
    // 先从缓存中查找
    const cachedTag = useCacheStore.getState().getTagById(id);
    if (cachedTag) {
      return cachedTag;
    }
    try {
      const response = await request.get<Tag>(`/tags/${id}`);
      const tag = (response.data as unknown as ApiResponse<Tag>).data;
      return tag || null;
    } catch (error) {
      console.error(`获取标签详情失败, ID: ${id}:`, error);
      return null;
    }
  },
  /**
   * 根据名称获取标签
   */
  getTagByName: async (name: string): Promise<Tag | null> => {
    try {
      const response = await request.get<Tag>(`/tags/name/${encodeURIComponent(name)}`);
      const tag = (response.data as unknown as ApiResponse<Tag>).data;
      return tag || null;
    } catch (error) {
      console.error(`根据名称获取标签失败, name: ${name}:`, error);
      return null;
    }
  },
  /**
   * 创建标签
   */
  createTag: async (tag: TagDTO): Promise<number> => {
    try {
      const response = await request.post<{id: number}>('/tags', tag);
      const result = (response.data as unknown as ApiResponse<{id: number}>).data;
      // 创建后清除缓存
      useCacheStore.getState().clearTagsCache();
      return result.id;
    } catch (error) {
      console.error('创建标签失败:', error);
      throw error;
    }
  },
  /**
   * 更新标签
   */
  updateTag: async (id: number, tag: TagDTO): Promise<void> => {
    try {
      await request.put(`/tags/${id}`, tag);
      // 更新后清除缓存
      useCacheStore.getState().clearTagsCache();
    } catch (error) {
      console.error(`更新标签失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 删除标签
   */
  deleteTag: async (id: number): Promise<void> => {
    try {
      await request.delete(`/tags/${id}`);
      // 删除后清除缓存
      useCacheStore.getState().clearTagsCache();
    } catch (error) {
      console.error(`删除标签失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 获取热门标签
   */
  getPopularTags: async (limit = 10): Promise<Tag[]> => {
    try {
      const response = await request.get<Tag[]>(`/tags/popular?limit=${limit}`);
      const tags = (response.data as unknown as ApiResponse<Tag[]>).data;
      return tags || [];
    } catch (error) {
      console.error(`获取热门标签失败:`, error);
      return [];
    }
  },
  /**
   * 检查标签名称是否可用
   */
  isNameAvailable: async (name: string, excludeId?: number): Promise<boolean> => {
    try {
      const params: any = { name };
      if (excludeId) params.excludeId = excludeId;
      const response: AxiosResponse<ApiResponse<{available: boolean}>> = 
        await request.get<{available: boolean}>('/tags/check-name', { params });
      return response.data.data.available;
    } catch (error) {
      console.error(`检查标签名称是否可用失败, name: ${name}:`, error);
      throw error;
    }
  },
  /**
   * 批量获取或创建标签
   */
  batchGetOrCreateTags: async (tagNames: string[]): Promise<number[]> => {
    try {
      const response = await request.post<number[]>('/tags/batch', tagNames);
      const ids = (response.data as unknown as ApiResponse<number[]>).data;
      // 批量操作后清除缓存
      useCacheStore.getState().clearTagsCache();
      return ids || [];
    } catch (error) {
      console.error('批量获取或创建标签失败:', error);
      return [];
    }
  },
  /**
   * 获取所有标签
   * @returns 标签列表
   */
  async getAllTags(): Promise<Tag[]> {
    const cacheStore = useCacheStore.getState();
    // 如果缓存有效，使用缓存
    if (cacheStore.isTagsCacheValid()) {
      return cacheStore.tags || [];
    }
    try {
      const response = await request.get<Tag[]>('/tags');
      const tags = (response.data as unknown as ApiResponse<Tag[]>).data || [];
      // 更新缓存
      cacheStore.setTags(tags);
      return tags;
    } catch (error) {
      console.error('获取标签失败:', error);
      // 如果请求失败但缓存存在，返回缓存数据
      if (cacheStore.tags) {
        console.log('请求失败，使用过期的标签缓存');
        return cacheStore.tags;
      }
      throw error;
    }
  },
  /**
   * 手动清除缓存
   */
  clearCache(): void {
    useCacheStore.getState().clearTagsCache();
  }
};
export default tagService;
</file>

<file path="front/src/services/user.ts">
'use client';
import { request } from './api';
import { User } from '@/types/auth';
import { UserDTO, UserQueryParams, UserPageResponse, UserStatusDTO } from '@/types/user';
import { ApiResponse } from '@/types/api';
import { AxiosResponse } from 'axios';
// 用户个人资料更新请求参数
export interface ProfileUpdateRequest {
  nickname?: string;
  phone?: string;
}
// 密码修改请求参数
export interface PasswordChangeRequest {
  oldPassword: string;
  newPassword: string;
  confirmPassword: string;
}
// 邮箱更新验证码请求参数
export interface EmailCodeRequest {
  email: string;
  captchaKey: string;
  captchaCode: string;
}
// 邮箱更新请求参数
export interface EmailUpdateRequest {
  newEmail: string;
  emailCode: string;
  password: string;
}
// 头像上传响应
export interface AvatarUploadResponse {
  avatarUrl: string;
}
/**
 * 用户服务
 */
const userService = {
  /**
   * 获取当前用户信息
   */
  getCurrentUser: async (): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.get<User>('/users/current', {
        // 允许用户登出后静默失败
        silentError: true
      });
      return response.data.data;
    } catch (error) {
      console.error('获取用户信息失败', error);
      throw error;
    }
  },
  /**
   * 更新当前用户个人资料
   */
  updateCurrentUserProfile: async (profile: ProfileUpdateRequest): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.put<User>('/users/current', profile);
      return response.data.data;
    } catch (error) {
      console.error('更新用户资料失败:', error);
      throw error;
    }
  },
  /**
   * 修改当前用户密码
   */
  changePassword: async (passwordData: PasswordChangeRequest): Promise<void> => {
    try {
      await request.put('/users/current/password', passwordData);
    } catch (error) {
      console.error('修改密码失败:', error);
      throw error;
    }
  },
  /**
   * 上传用户头像
   */
  uploadAvatar: async (file: File): Promise<AvatarUploadResponse> => {
    try {
      const formData = new FormData();
      formData.append('file', file);
      const response: AxiosResponse<ApiResponse<AvatarUploadResponse>> = await request.post<AvatarUploadResponse>(
        '/users/current/avatar',
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        }
      );
      return response.data.data;
    } catch (error) {
      console.error('上传头像失败:', error);
      throw error;
    }
  },
  /**
   * 更新用户邮箱
   */
  updateEmail: async (emailData: EmailUpdateRequest): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.put<User>('/users/current/email', emailData);
      return response.data.data;
    } catch (error) {
      console.error('更新邮箱失败:', error);
      throw error;
    }
  },
  /**
   * 获取用户基本信息
   */
  getBasicUserInfo: async (userId: number): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.get<User>(`/users/basic/${userId}`);
      return response.data.data;
    } catch (error) {
      console.error(`获取用户基本信息失败, ID: ${userId}:`, error);
      throw error;
    }
  },
  /**
   * 获取用户列表（分页）
   */
  getUserList: async (queryParams: UserQueryParams): Promise<UserPageResponse> => {
    try {
      const response: AxiosResponse<ApiResponse<UserPageResponse>> = await request.get<UserPageResponse>(
        '/users',
        { params: queryParams }
      );
      return response.data.data;
    } catch (error) {
      console.error('获取用户列表失败:', error);
      throw error;
    }
  },
  /**
   * 根据ID获取用户详情
   */
  getUserById: async (id: number): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.get<User>(`/users/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`获取用户详情失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 创建用户
   */
  createUser: async (user: UserDTO): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.post<User>('/users', user);
      return response.data.data;
    } catch (error) {
      console.error('创建用户失败:', error);
      throw error;
    }
  },
  /**
   * 更新用户
   */
  updateUser: async (id: number, user: UserDTO): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.put<User>(`/users/${id}`, user);
      return response.data.data;
    } catch (error) {
      console.error(`更新用户失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 删除用户
   */
  deleteUser: async (id: number): Promise<void> => {
    try {
      await request.delete(`/users/${id}`);
    } catch (error) {
      console.error(`删除用户失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 批量删除用户
   */
  batchDeleteUsers: async (ids: number[]): Promise<void> => {
    try {
      await request.delete('/users/batch', { data: ids });
    } catch (error) {
      console.error('批量删除用户失败:', error);
      throw error;
    }
  },
  /**
   * 修改用户状态
   */
  updateUserStatus: async (id: number, status: UserStatusDTO): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.patch<User>(
        `/users/${id}/status?status=${status.status}`
      );
      return response.data.data;
    } catch (error) {
      console.error(`修改用户状态失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 给用户分配角色
   */
  assignRoles: async (userId: number, roleIds: number[]): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.put<User>(
        `/users/${userId}/roles`, 
        roleIds
      );
      return response.data.data;
    } catch (error) {
      console.error(`给用户分配角色失败, userId: ${userId}:`, error);
      throw error;
    }
  }
};
export default userService;
</file>

<file path="front/src/stores/auth-store.ts">
'use client';
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { User, LoginRequest, RegisterRequest, EmailVerificationRequest } from '@/types/auth';
import authService from '@/services/auth';
import { ApiError } from '@/types/api';
// 认证状态接口
interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  // 认证方法
  login: (credentials: LoginRequest) => Promise<void>;
  register: (data: RegisterRequest) => Promise<void>;
  logout: () => Promise<void>;
  refreshToken: () => Promise<void>;
  sendEmailVerificationCode: (data: EmailVerificationRequest) => Promise<void>;
  // 状态管理方法
  setUser: (user: User | null) => void;
  clearError: () => void;
  handleApiError: (error: any) => Promise<void>;
  // 添加初始化方法
  initializeAuth: () => Promise<void>;
}
// 创建认证状态
export const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      user: null,
      isAuthenticated: false,
      isLoading: false,
      error: null,
      // 初始化认证状态
      initializeAuth: async () => {
        const token = localStorage.getItem('token');
        const refreshToken = localStorage.getItem('refreshToken');
        if (!token || !refreshToken) {
          set({ isAuthenticated: false, user: null });
          return;
        }
        // 如果有token但没有user信息，尝试获取用户信息
        if (!get().user && token) {
          try {
            const user = await authService.getCurrentUser();
            set({ user, isAuthenticated: true });
          } catch (error) {
            // 如果获取用户信息失败，尝试刷新token
            try {
              await get().refreshToken();
            } catch (refreshError) {
              // 如果刷新也失败，清除认证状态
              await get().logout();
            }
          }
        }
      },
      // 登录方法
      login: async (credentials: LoginRequest) => {
        set({ isLoading: true, error: null });
        console.log('开始登录，凭据：', { ...credentials, password: '******' });
        try {
          const response = await authService.login(credentials);
          console.log('登录成功，响应：', { ...response, accessToken: '******', refreshToken: '******' });
          if (!response.accessToken) {
            console.error('登录失败：未获取到有效的访问令牌');
            set({
              isLoading: false,
              error: '登录失败：未获取到有效的访问令牌',
            });
            throw new Error('登录失败：未获取到有效的访问令牌');
          }
          // 存储令牌
          localStorage.setItem('token', response.accessToken);
          localStorage.setItem('refreshToken', response.refreshToken);
          // 设置cookie
          document.cookie = `token=${response.accessToken}; path=/`;
          document.cookie = `refreshToken=${response.refreshToken}; path=/`;
          // 获取用户信息（只在首次登录时获取）
          try {
            const user = await authService.getCurrentUser();
            console.log('成功获取用户信息：', user);
            // 更新状态，包含用户信息
            set({
              user: user,
              isAuthenticated: true,
              isLoading: false,
            });
          } catch (userError) {
            console.error('获取用户信息失败：', userError);
            // 如果获取用户信息失败，认为是认证失败
            set({
              isLoading: false,
              error: '登录失败：无法获取用户信息',
              isAuthenticated: false,
              user: null
            });
            throw userError;
          }
        } catch (error) {
          const apiError = error as ApiError;
          console.error('登录失败：', apiError);
          set({
            isLoading: false,
            error: apiError.message || '登录失败',
          });
          throw error;
        }
      },
      // 注册方法
      register: async (data: RegisterRequest) => {
        set({ isLoading: true, error: null });
        try {
          await authService.register(data);
          set({ isLoading: false });
        } catch (error) {
          const apiError = error as ApiError;
          set({
            isLoading: false,
            error: apiError.message || '注册失败',
          });
          throw error;
        }
      },
      // 发送邮箱验证码
      sendEmailVerificationCode: async (data: EmailVerificationRequest) => {
        set({ isLoading: true, error: null });
        try {
          await authService.sendEmailVerificationCode(data);
          set({ isLoading: false });
        } catch (error) {
          const apiError = error as ApiError;
          set({
            isLoading: false,
            error: apiError.message || '发送邮箱验证码失败',
          });
          throw error;
        }
      },
      // 注销方法
      logout: async () => {
        set({ isLoading: true });
        try {
          const token = localStorage.getItem('token');
          if (token) {
            await authService.logout();
          }
        } catch (error) {
          console.error('注销时发生错误：', error);
        } finally {
          // 清除所有认证相关的状态和存储
          localStorage.removeItem('token');
          localStorage.removeItem('refreshToken');
          // 清除cookie
          document.cookie = 'token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT';
          document.cookie = 'refreshToken=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT';
          // 更新状态
          set({
            user: null,
            isAuthenticated: false,
            isLoading: false,
            error: null
          });
        }
      },
      // 刷新令牌
      refreshToken: async () => {
        const refreshToken = localStorage.getItem('refreshToken');
        console.log('尝试刷新令牌，有刷新令牌：', !!refreshToken);
        if (!refreshToken) {
          console.warn('无法刷新令牌：没有刷新令牌');
          await get().logout();
          return;
        }
        set({ isLoading: true });
        try {
          const response = await authService.refreshToken(refreshToken);
          console.log('刷新令牌成功，响应：', { ...response, accessToken: '******', refreshToken: '******' });
          if (!response.accessToken) {
            console.error('刷新令牌失败：未获取到有效的访问令牌');
            throw new Error('刷新令牌失败：未获取到有效的访问令牌');
          }
          // 更新令牌
          localStorage.setItem('token', response.accessToken);
          localStorage.setItem('refreshToken', response.refreshToken);
          // 设置cookie
          document.cookie = `token=${response.accessToken}; path=/`;
          document.cookie = `refreshToken=${response.refreshToken}; path=/`;
          // 保持当前用户信息不变，只更新认证状态
          set({
            isLoading: false,
            isAuthenticated: true
          });
          console.log('令牌已更新');
        } catch (error) {
          console.error('刷新令牌失败：', error);
          // 刷新失败直接登出
          await get().logout();
        }
      },
      // 设置用户
      setUser: (user: User | null) => {
        set({
          user,
          isAuthenticated: !!user,
        });
      },
      // 清除错误
      clearError: () => {
        set({ error: null });
      },
      // 处理API请求错误
      handleApiError: async (error: any) => {
        if (error.status === 401) {
          // token失效直接登出
          await get().logout();
          return;
        }
        // 其他错误正常处理
        set({ error: error.message || '请求失败' });
      },
    }),
    {
      name: 'auth-storage',
      partialize: (state) => ({
        user: state.user,
        isAuthenticated: state.isAuthenticated
      }),
      // 添加存储版本控制
      version: 1,
      // 添加迁移逻辑
      migrate: (persistedState: any, version: number) => {
        if (version === 0) {
          // 处理旧版本的状态迁移
          return {
            user: persistedState.user,
            isAuthenticated: persistedState.isAuthenticated
          };
        }
        return persistedState;
      }
    }
  )
);
</file>

<file path="front/src/stores/cache-store.ts">
import { create } from 'zustand';
import { Tag, Category } from '@/types/course';
interface CacheState {
  // 标签缓存
  tags: Tag[] | null;
  tagMap: Map<number, Tag>;
  lastTagsFetchTime: number;
  // 分类缓存
  categories: Category[] | null;
  categoryMap: Map<number, Category>;
  lastCategoriesFetchTime: number;
  // 缓存时间设置
  CACHE_TTL: number; // 缓存有效期（毫秒）
  // 标签相关方法
  setTags: (tags: Tag[]) => void;
  getTagById: (id: number) => Tag | undefined;
  getTagsByIds: (ids: number[]) => Tag[];
  clearTagsCache: () => void;
  isTagsCacheValid: () => boolean;
  // 分类相关方法
  setCategories: (categories: Category[]) => void;
  getCategoryById: (id: number) => Category | undefined;
  getCategoriesByIds: (ids: number[]) => Category[];
  clearCategoriesCache: () => void;
  isCategoriesCacheValid: () => boolean;
  // 通用方法
  clearAllCache: () => void;
}
export const useCacheStore = create<CacheState>((set, get) => ({
  // 初始状态
  tags: null,
  tagMap: new Map(),
  lastTagsFetchTime: 0,
  categories: null,
  categoryMap: new Map(),
  lastCategoriesFetchTime: 0,
  CACHE_TTL: 5 * 60 * 1000, // 5分钟缓存
  // 标签相关方法
  setTags: (tags: Tag[]) => {
    const tagMap = new Map(tags.map(tag => [tag.id, tag]));
    set({ 
      tags, 
      tagMap,
      lastTagsFetchTime: Date.now() 
    });
  },
  getTagById: (id: number) => {
    return get().tagMap.get(id);
  },
  getTagsByIds: (ids: number[]) => {
    const { tagMap } = get();
    return ids.map(id => tagMap.get(id)).filter((tag): tag is Tag => tag !== undefined);
  },
  clearTagsCache: () => {
    set({ 
      tags: null, 
      tagMap: new Map(),
      lastTagsFetchTime: 0 
    });
  },
  isTagsCacheValid: () => {
    const { lastTagsFetchTime, CACHE_TTL, tags } = get();
    return tags !== null && (Date.now() - lastTagsFetchTime < CACHE_TTL);
  },
  // 分类相关方法
  setCategories: (categories: Category[]) => {
    const categoryMap = new Map(categories.map(category => [category.id, category]));
    set({ 
      categories, 
      categoryMap,
      lastCategoriesFetchTime: Date.now() 
    });
  },
  getCategoryById: (id: number) => {
    return get().categoryMap.get(id);
  },
  getCategoriesByIds: (ids: number[]) => {
    const { categoryMap } = get();
    return ids.map(id => categoryMap.get(id)).filter((category): category is Category => category !== undefined);
  },
  clearCategoriesCache: () => {
    set({ 
      categories: null, 
      categoryMap: new Map(),
      lastCategoriesFetchTime: 0 
    });
  },
  isCategoriesCacheValid: () => {
    const { lastCategoriesFetchTime, CACHE_TTL, categories } = get();
    return categories !== null && (Date.now() - lastCategoriesFetchTime < CACHE_TTL);
  },
  // 通用方法
  clearAllCache: () => {
    set({ 
      tags: null, 
      tagMap: new Map(),
      lastTagsFetchTime: 0,
      categories: null, 
      categoryMap: new Map(),
      lastCategoriesFetchTime: 0 
    });
  },
}));
</file>

<file path="front/src/stores/course-store.ts">
'use client';
import { create } from 'zustand';
import { Course, Chapter, Section, CourseStatus } from '@/types/course';
interface CourseStore {
  // 课程列表状态
  courses: Course[];
  totalCourses: number;
  currentPage: number;
  pageSize: number;
  isLoading: boolean;
  error: string | null;
  // 当前课程
  currentCourse: Course | null;
  // 当前课程的章节
  chapters: Chapter[];
  // 当前选中的章节
  currentChapter: Chapter | null;
  // 当前章节的小节
  sections: Section[];
  // 当前选中的小节
  currentSection: Section | null;
  // 筛选条件
  filterTitle: string;
  filterStatus: CourseStatus | null;
  // 预览相关
  previewUrl: string | null;
  // 动作
  setCourses: (courses: Course[], total: number) => void;
  setCurrentCourse: (course: Course | null) => void;
  setChapters: (chapters: Chapter[]) => void;
  setCurrentChapter: (chapter: Chapter | null) => void;
  setSections: (sections: Section[]) => void;
  setCurrentSection: (section: Section | null) => void;
  setPage: (page: number, pageSize?: number) => void;
  setFilter: (filterData: { title?: string; status?: CourseStatus | null }) => void;
  setLoading: (isLoading: boolean) => void;
  setError: (error: string | null) => void;
  setPreviewUrl: (url: string | null) => void;
  reset: () => void;
}
const useCourseStore = create<CourseStore>((set) => ({
  // 初始状态
  courses: [],
  totalCourses: 0,
  currentPage: 1,
  pageSize: 10,
  isLoading: false,
  error: null,
  currentCourse: null,
  chapters: [],
  currentChapter: null,
  sections: [],
  currentSection: null,
  filterTitle: '',
  filterStatus: null,
  previewUrl: null,
  // 动作
  setCourses: (courses, total) => set({
    courses,
    totalCourses: total
  }),
  setCurrentCourse: (course) => set({
    currentCourse: course
  }),
  setChapters: (chapters) => set({
    chapters
  }),
  setCurrentChapter: (chapter) => set({
    currentChapter: chapter
  }),
  setSections: (sections) => set({
    sections
  }),
  setCurrentSection: (section) => set({
    currentSection: section
  }),
  setPage: (page, pageSize = 10) => set({
    currentPage: page,
    pageSize
  }),
  setFilter: (filterData) => set((state) => ({
    ...state,
    filterTitle: filterData.title !== undefined ? filterData.title : state.filterTitle,
    filterStatus: filterData.status !== undefined ? filterData.status : state.filterStatus,
    currentPage: 1
  })),
  setLoading: (isLoading) => set({
    isLoading
  }),
  setError: (error) => set({
    error
  }),
  setPreviewUrl: (url) => set({
    previewUrl: url
  }),
  reset: () => set({
    currentCourse: null,
    chapters: [],
    currentChapter: null,
    sections: [],
    currentSection: null,
    error: null
  })
}));
export default useCourseStore;
</file>

<file path="front/src/stores/permission-store.ts">
'use client';
import { create } from 'zustand';
import { Permission, PermissionDTO } from '@/types/permission';
import permissionService from '@/services/permission';
import { toast } from 'sonner';
interface PermissionState {
  // 权限列表
  permissions: Permission[];
  // 当前编辑的权限
  currentPermission: Permission | null;
  // 加载状态
  isLoading: boolean;
  // 错误信息
  error: string | null;
  // 表单可见性
  formVisible: boolean;
  // 确认对话框可见性
  confirmDialogVisible: boolean;
  // 待删除的权限ID列表
  selectedIds: number[];
  // 获取权限列表
  fetchPermissions: () => Promise<void>;
  // 根据ID获取权限
  fetchPermissionById: (id: number) => Promise<void>;
  // 创建权限
  createPermission: (permission: PermissionDTO) => Promise<void>;
  // 更新权限
  updatePermission: (id: number, permission: PermissionDTO) => Promise<void>;
  // 删除权限
  deletePermission: (id: number) => Promise<void>;
  // 批量删除权限
  batchDeletePermissions: (ids: number[]) => Promise<void>;
  // 设置当前权限
  setCurrentPermission: (permission: Permission | null) => void;
  // 设置表单可见性
  setFormVisible: (visible: boolean) => void;
  // 设置确认对话框可见性
  setConfirmDialogVisible: (visible: boolean) => void;
  // 设置选中权限ID列表
  setSelectedIds: (ids: number[]) => void;
  // 添加选中权限ID
  addSelectedId: (id: number) => void;
  // 移除选中权限ID
  removeSelectedId: (id: number) => void;
  // 切换选中权限ID
  toggleSelectedId: (id: number) => void;
  // 清空选中权限ID
  clearSelectedIds: () => void;
  // 清除错误
  clearError: () => void;
}
export const usePermissionStore = create<PermissionState>()((set, get) => ({
  permissions: [],
  currentPermission: null,
  isLoading: false,
  error: null,
  formVisible: false,
  confirmDialogVisible: false,
  selectedIds: [],
  // 获取权限列表
  fetchPermissions: async () => {
    set({ isLoading: true, error: null });
    try {
      const permissions = await permissionService.getPermissionList();
      set({ permissions, isLoading: false });
    } catch (error) {
      console.error('获取权限列表失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '获取权限列表失败' 
      });
      toast.error('获取权限列表失败');
    }
  },
  // 根据ID获取权限
  fetchPermissionById: async (id: number) => {
    set({ isLoading: true, error: null });
    try {
      const permission = await permissionService.getPermissionById(id);
      set({ currentPermission: permission, isLoading: false });
    } catch (error) {
      console.error(`获取权限详情失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '获取权限详情失败'
      });
      toast.error('获取权限详情失败');
    }
  },
  // 创建权限
  createPermission: async (permission: PermissionDTO) => {
    set({ isLoading: true, error: null });
    try {
      const createdPermission = await permissionService.createPermission(permission);
      set(state => ({ 
        permissions: [...state.permissions, createdPermission],
        isLoading: false,
        formVisible: false,
        currentPermission: null
      }));
      toast.success('创建权限成功');
    } catch (error) {
      console.error('创建权限失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '创建权限失败'
      });
      toast.error('创建权限失败');
    }
  },
  // 更新权限
  updatePermission: async (id: number, permission: PermissionDTO) => {
    set({ isLoading: true, error: null });
    try {
      const updatedPermission = await permissionService.updatePermission(id, permission);
      set(state => ({
        permissions: state.permissions.map(p => p.id === id ? updatedPermission : p),
        isLoading: false,
        formVisible: false,
        currentPermission: null
      }));
      toast.success('更新权限成功');
    } catch (error) {
      console.error(`更新权限失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '更新权限失败'
      });
      toast.error('更新权限失败');
    }
  },
  // 删除权限
  deletePermission: async (id: number) => {
    set({ isLoading: true, error: null });
    try {
      await permissionService.deletePermission(id);
      set(state => ({
        permissions: state.permissions.filter(p => p.id !== id),
        isLoading: false
      }));
      toast.success('删除权限成功');
    } catch (error) {
      console.error(`删除权限失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '删除权限失败'
      });
      toast.error('删除权限失败');
    }
  },
  // 批量删除权限
  batchDeletePermissions: async (ids: number[]) => {
    set({ isLoading: true, error: null });
    try {
      await permissionService.batchDeletePermissions(ids);
      set(state => ({
        permissions: state.permissions.filter(p => !ids.includes(p.id)),
        isLoading: false,
        selectedIds: [],
        confirmDialogVisible: false
      }));
      toast.success('批量删除权限成功');
    } catch (error) {
      console.error('批量删除权限失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '批量删除权限失败'
      });
      toast.error('批量删除权限失败');
    }
  },
  // 设置当前权限
  setCurrentPermission: (permission) => {
    set({ currentPermission: permission });
  },
  // 设置表单可见性
  setFormVisible: (visible) => {
    // 如果关闭表单，清空当前权限
    if (!visible) {
      set({ currentPermission: null });
    }
    set({ formVisible: visible });
  },
  // 设置确认对话框可见性
  setConfirmDialogVisible: (visible) => {
    set({ confirmDialogVisible: visible });
  },
  // 设置选中权限ID列表
  setSelectedIds: (ids) => {
    set({ selectedIds: ids });
  },
  // 添加选中权限ID
  addSelectedId: (id) => {
    set(state => ({
      selectedIds: [...state.selectedIds, id]
    }));
  },
  // 移除选中权限ID
  removeSelectedId: (id) => {
    set(state => ({
      selectedIds: state.selectedIds.filter(itemId => itemId !== id)
    }));
  },
  // 切换选中权限ID
  toggleSelectedId: (id) => {
    set(state => {
      if (state.selectedIds.includes(id)) {
        return { selectedIds: state.selectedIds.filter(itemId => itemId !== id) };
      } else {
        return { selectedIds: [...state.selectedIds, id] };
      }
    });
  },
  // 清空选中权限ID
  clearSelectedIds: () => {
    set({ selectedIds: [] });
  },
  // 清除错误
  clearError: () => {
    set({ error: null });
  }
}));
</file>

<file path="front/src/stores/question-store.ts">
'use client';
import { create } from 'zustand';
import { Question, QuestionDifficulty, QuestionGroup, QuestionTag, QuestionType } from '@/types/question';
interface QuestionStore {
  // 问题列表状态
  questions: Question[];
  totalQuestions: number;
  currentPage: number;
  pageSize: number;
  // 筛选条件
  filterTitle: string;
  filterKeyword: string;
  filterType: QuestionType | null;
  filterDifficulty: QuestionDifficulty | null;
  filterTagIds: number[];
  filterGroupId: number | null;
  // 多选状态
  selectedQuestionIds: number[];
  isSelectAll: boolean;
  // 问题详情
  currentQuestion: Question | null;
  // 问题组状态
  questionGroups: QuestionGroup[];
  currentQuestionGroup: QuestionGroup | null;
  // 问题标签状态
  questionTags: QuestionTag[];
  // 导入相关状态
  isImporting: boolean;
  importProgress: number;
  // Action: 设置问题列表
  setQuestions: (questions: Question[], total: number) => void;
  // Action: 设置分页
  setPage: (page: number, pageSize: number) => void;
  // Action: 设置筛选条件
  setFilter: (filterData: {
    title?: string;
    keyword?: string;
    type?: QuestionType | null;
    difficulty?: QuestionDifficulty | null;
    tagIds?: number[];
    groupId?: number | null;
  }) => void;
  // Action: 选择问题
  selectQuestion: (id: number, selected: boolean) => void;
  // Action: 全选/取消全选
  selectAll: (selected: boolean) => void;
  // Action: 设置当前问题
  setCurrentQuestion: (question: Question | null) => void;
  // Action: 设置问题组列表
  setQuestionGroups: (groups: QuestionGroup[]) => void;
  // Action: 设置当前问题组
  setCurrentQuestionGroup: (group: QuestionGroup | null) => void;
  // Action: 设置问题标签列表
  setQuestionTags: (tags: QuestionTag[]) => void;
  // Action: 设置导入状态
  setImportState: (isImporting: boolean, progress: number) => void;
  // Action: 重置状态
  resetState: () => void;
  // Action: 设置筛选类型
  setFilterType: (type: QuestionType | null | any) => void;
  // Action: 设置当前页码
  setCurrentPage: (page: number) => void;
  // Action: 设置查询参数
  setQueryParams: (params: any) => void;
}
const useQuestionStore = create<QuestionStore>((set) => ({
  // 初始状态
  questions: [],
  totalQuestions: 0,
  currentPage: 1,
  pageSize: 10,
  filterTitle: '',
  filterKeyword: '',
  filterType: null,
  filterDifficulty: null,
  filterTagIds: [],
  filterGroupId: null,
  selectedQuestionIds: [],
  isSelectAll: false,
  currentQuestion: null,
  questionGroups: [],
  currentQuestionGroup: null,
  questionTags: [],
  isImporting: false,
  importProgress: 0,
  // Actions
  setQuestions: (questions, total) => set({
    questions,
    totalQuestions: total,
    selectedQuestionIds: [],
    isSelectAll: false
  }),
  setPage: (page, pageSize) => set({
    currentPage: page,
    pageSize
  }),
  setFilter: (filterData) => set((state) => ({
    ...state,
    filterTitle: filterData.title !== undefined ? filterData.title : state.filterTitle,
    filterKeyword: filterData.keyword !== undefined ? filterData.keyword : state.filterKeyword,
    filterType: filterData.type !== undefined ? filterData.type : state.filterType,
    filterDifficulty: filterData.difficulty !== undefined ? filterData.difficulty : state.filterDifficulty,
    filterTagIds: filterData.tagIds || state.filterTagIds,
    filterGroupId: filterData.groupId !== undefined ? filterData.groupId : state.filterGroupId,
    currentPage: 1
  })),
  selectQuestion: (id, selected) => set((state) => {
    if (selected && !state.selectedQuestionIds.includes(id)) {
      return {
        selectedQuestionIds: [...state.selectedQuestionIds, id],
        isSelectAll: state.questions.length === state.selectedQuestionIds.length + 1
      };
    } else if (!selected && state.selectedQuestionIds.includes(id)) {
      return {
        selectedQuestionIds: state.selectedQuestionIds.filter(qId => qId !== id),
        isSelectAll: false
      };
    }
    return state;
  }),
  selectAll: (selected) => set((state) => ({
    selectedQuestionIds: selected ? state.questions.map(q => q.id) : [],
    isSelectAll: selected
  })),
  setCurrentQuestion: (question) => set({
    currentQuestion: question
  }),
  setQuestionGroups: (groups) => set({
    questionGroups: groups
  }),
  setCurrentQuestionGroup: (group) => set({
    currentQuestionGroup: group
  }),
  setQuestionTags: (tags) => set({
    questionTags: tags
  }),
  setImportState: (isImporting, progress) => set({
    isImporting,
    importProgress: progress
  }),
  resetState: () => set({
    questions: [],
    totalQuestions: 0,
    currentPage: 1,
    pageSize: 10,
    filterTitle: '',
    filterKeyword: '',
    filterType: null,
    filterDifficulty: null,
    filterTagIds: [],
    filterGroupId: null,
    selectedQuestionIds: [],
    isSelectAll: false,
    currentQuestion: null,
    isImporting: false,
    importProgress: 0
  }),
  setFilterType: (type) => set((state) => ({
    ...state,
    filterType: type,
    currentPage: 1
  })),
  setCurrentPage: (page) => set((state) => ({
    ...state,
    currentPage: page
  })),
  setQueryParams: (params) => set((state) => ({
    ...state,
    ...params
  })),
}));
export default useQuestionStore;
</file>

<file path="front/src/stores/role-store.ts">
'use client';
import { create } from 'zustand';
import { Role, RoleDTO } from '@/types/role';
import roleService from '@/services/role';
import { toast } from 'sonner';
interface RoleState {
  // 角色列表
  roles: Role[];
  // 当前编辑的角色
  currentRole: Role | null;
  // 加载状态
  isLoading: boolean;
  // 错误信息
  error: string | null;
  // 表单可见性
  formVisible: boolean;
  // 确认对话框可见性
  confirmDialogVisible: boolean;
  // 权限分配对话框可见性
  permissionDialogVisible: boolean;
  // 待删除的角色ID列表
  selectedIds: number[];
  // 获取角色列表
  fetchRoles: () => Promise<void>;
  // 根据ID获取角色
  fetchRoleById: (id: number) => Promise<void>;
  // 创建角色
  createRole: (role: RoleDTO) => Promise<void>;
  // 更新角色
  updateRole: (id: number, role: RoleDTO) => Promise<void>;
  // 删除角色
  deleteRole: (id: number) => Promise<void>;
  // 批量删除角色
  batchDeleteRoles: (ids: number[]) => Promise<void>;
  // 给角色分配权限
  assignPermissions: (roleId: number, permissionIds: number[]) => Promise<void>;
  // 设置当前角色
  setCurrentRole: (role: Role | null) => void;
  // 设置表单可见性
  setFormVisible: (visible: boolean) => void;
  // 设置确认对话框可见性
  setConfirmDialogVisible: (visible: boolean) => void;
  // 设置权限分配对话框可见性
  setPermissionDialogVisible: (visible: boolean) => void;
  // 设置选中角色ID列表
  setSelectedIds: (ids: number[]) => void;
  // 添加选中角色ID
  addSelectedId: (id: number) => void;
  // 移除选中角色ID
  removeSelectedId: (id: number) => void;
  // 切换选中角色ID
  toggleSelectedId: (id: number) => void;
  // 清空选中角色ID
  clearSelectedIds: () => void;
  // 清除错误
  clearError: () => void;
}
export const useRoleStore = create<RoleState>()((set, get) => ({
  roles: [],
  currentRole: null,
  isLoading: false,
  error: null,
  formVisible: false,
  confirmDialogVisible: false,
  permissionDialogVisible: false,
  selectedIds: [],
  // 获取角色列表
  fetchRoles: async () => {
    set({ isLoading: true, error: null });
    try {
      const roles = await roleService.getRoleList();
      set({ roles, isLoading: false });
    } catch (error) {
      console.error('获取角色列表失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '获取角色列表失败' 
      });
      toast.error('获取角色列表失败');
    }
  },
  // 根据ID获取角色
  fetchRoleById: async (id: number) => {
    set({ isLoading: true, error: null });
    try {
      const role = await roleService.getRoleById(id);
      set({ currentRole: role, isLoading: false });
    } catch (error) {
      console.error(`获取角色详情失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '获取角色详情失败'
      });
      toast.error('获取角色详情失败');
    }
  },
  // 创建角色
  createRole: async (role: RoleDTO) => {
    set({ isLoading: true, error: null });
    try {
      const createdRole = await roleService.createRole(role);
      set(state => ({ 
        roles: [...state.roles, createdRole],
        isLoading: false,
        formVisible: false,
        currentRole: null
      }));
      toast.success('创建角色成功');
    } catch (error) {
      console.error('创建角色失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '创建角色失败'
      });
      toast.error('创建角色失败');
    }
  },
  // 更新角色
  updateRole: async (id: number, role: RoleDTO) => {
    set({ isLoading: true, error: null });
    try {
      const updatedRole = await roleService.updateRole(id, role);
      set(state => ({
        roles: state.roles.map(r => r.id === id ? updatedRole : r),
        isLoading: false,
        formVisible: false,
        currentRole: null
      }));
      toast.success('更新角色成功');
    } catch (error) {
      console.error(`更新角色失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '更新角色失败'
      });
      toast.error('更新角色失败');
    }
  },
  // 删除角色
  deleteRole: async (id: number) => {
    set({ isLoading: true, error: null });
    try {
      await roleService.deleteRole(id);
      set(state => ({
        roles: state.roles.filter(r => r.id !== id),
        isLoading: false
      }));
      toast.success('删除角色成功');
    } catch (error) {
      console.error(`删除角色失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '删除角色失败'
      });
      toast.error('删除角色失败');
    }
  },
  // 批量删除角色
  batchDeleteRoles: async (ids: number[]) => {
    set({ isLoading: true, error: null });
    try {
      await roleService.batchDeleteRoles(ids);
      set(state => ({
        roles: state.roles.filter(r => !ids.includes(r.id)),
        isLoading: false,
        selectedIds: [],
        confirmDialogVisible: false
      }));
      toast.success('批量删除角色成功');
    } catch (error) {
      console.error('批量删除角色失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '批量删除角色失败'
      });
      toast.error('批量删除角色失败');
    }
  },
  // 给角色分配权限
  assignPermissions: async (roleId: number, permissionIds: number[]) => {
    set({ isLoading: true, error: null });
    try {
      const updatedRole = await roleService.assignPermissions(roleId, permissionIds);
      set(state => ({
        roles: state.roles.map(r => r.id === roleId ? updatedRole : r),
        isLoading: false,
        permissionDialogVisible: false,
        currentRole: null
      }));
      toast.success('权限分配成功');
    } catch (error) {
      console.error(`权限分配失败, roleId: ${roleId}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '权限分配失败'
      });
      toast.error('权限分配失败');
    }
  },
  // 设置当前角色
  setCurrentRole: (role) => {
    set({ currentRole: role });
  },
  // 设置表单可见性
  setFormVisible: (visible) => {
    // 如果关闭表单，清空当前角色
    if (!visible) {
      set({ currentRole: null });
    }
    set({ formVisible: visible });
  },
  // 设置确认对话框可见性
  setConfirmDialogVisible: (visible) => {
    set({ confirmDialogVisible: visible });
  },
  // 设置权限分配对话框可见性
  setPermissionDialogVisible: (visible) => {
    set({ permissionDialogVisible: visible });
  },
  // 设置选中角色ID列表
  setSelectedIds: (ids) => {
    set({ selectedIds: ids });
  },
  // 添加选中角色ID
  addSelectedId: (id) => {
    set(state => ({
      selectedIds: [...state.selectedIds, id]
    }));
  },
  // 移除选中角色ID
  removeSelectedId: (id) => {
    set(state => ({
      selectedIds: state.selectedIds.filter(itemId => itemId !== id)
    }));
  },
  // 切换选中角色ID
  toggleSelectedId: (id) => {
    set(state => {
      if (state.selectedIds.includes(id)) {
        return { selectedIds: state.selectedIds.filter(itemId => itemId !== id) };
      } else {
        return { selectedIds: [...state.selectedIds, id] };
      }
    });
  },
  // 清空选中角色ID
  clearSelectedIds: () => {
    set({ selectedIds: [] });
  },
  // 清除错误
  clearError: () => {
    set({ error: null });
  }
}));
</file>

<file path="front/src/stores/ui-store.ts">
'use client';
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
// 主题类型
export type Theme = 'light' | 'dark' | 'system';
// UI状态接口
interface UIState {
  // 侧边栏状态
  sidebarOpen: boolean;
  toggleSidebar: () => void;
  setSidebarOpen: (open: boolean) => void;
  // 主题状态
  theme: Theme;
  setTheme: (theme: Theme) => void;
}
// 创建UI状态
export const useUIStore = create<UIState>()(
  persist(
    (set) => ({
      // 侧边栏状态（默认收起）
      sidebarOpen: false,
      toggleSidebar: () => set((state) => ({ sidebarOpen: !state.sidebarOpen })),
      setSidebarOpen: (open: boolean) => set({ sidebarOpen: open }),
      // 主题状态（默认跟随系统）
      theme: 'system',
      setTheme: (theme: Theme) => {
        set({ theme });
        // 根据主题更新文档类
        const root = document.documentElement;
        root.classList.remove('light', 'dark');
        // 如果是系统主题，则根据系统偏好设置
        if (theme === 'system') {
          const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches
            ? 'dark'
            : 'light';
          root.classList.add(systemTheme);
        } else {
          root.classList.add(theme);
        }
      },
    }),
    {
      name: 'ui-storage', // localStorage的键名
    }
  )
);
</file>

<file path="front/src/stores/user-management-store.ts">
'use client';
import { create } from 'zustand';
import { User } from '@/types/auth';
import { UserDTO, UserQueryParams, UserPageResponse, UserStatusDTO } from '@/types/user';
import userService from '@/services/user';
import { toast } from 'sonner';
interface UserManagementState {
  // 用户列表
  users: User[];
  // 用户分页信息
  pagination: {
    totalElements: number;
    totalPages: number;
    size: number;
    number: number;
    first: boolean;
    last: boolean;
  };
  // 当前查询参数
  queryParams: UserQueryParams;
  // 当前编辑的用户
  currentUser: User | null;
  // 加载状态
  isLoading: boolean;
  // 错误信息
  error: string | null;
  // 表单可见性
  formVisible: boolean;
  // 确认对话框可见性
  confirmDialogVisible: boolean;
  // 角色分配对话框可见性
  roleDialogVisible: boolean;
  // 待删除的用户ID列表
  selectedIds: number[];
  // 查询用户列表
  fetchUsers: (params?: Partial<UserQueryParams>) => Promise<void>;
  // 根据ID获取用户
  fetchUserById: (id: number) => Promise<void>;
  // 创建用户
  createUser: (user: UserDTO) => Promise<void>;
  // 更新用户
  updateUser: (id: number, user: UserDTO) => Promise<void>;
  // 删除用户
  deleteUser: (id: number) => Promise<void>;
  // 批量删除用户
  batchDeleteUsers: (ids: number[]) => Promise<void>;
  // 更新用户状态
  updateUserStatus: (id: number, status: number) => Promise<void>;
  // 给用户分配角色
  assignRoles: (userId: number, roleIds: number[]) => Promise<void>;
  // 设置查询参数
  setQueryParams: (params: Partial<UserQueryParams>) => void;
  // 设置当前用户
  setCurrentUser: (user: User | null) => void;
  // 设置表单可见性
  setFormVisible: (visible: boolean) => void;
  // 设置确认对话框可见性
  setConfirmDialogVisible: (visible: boolean) => void;
  // 设置角色分配对话框可见性
  setRoleDialogVisible: (visible: boolean) => void;
  // 设置选中用户ID列表
  setSelectedIds: (ids: number[]) => void;
  // 添加选中用户ID
  addSelectedId: (id: number) => void;
  // 移除选中用户ID
  removeSelectedId: (id: number) => void;
  // 切换选中用户ID
  toggleSelectedId: (id: number) => void;
  // 清空选中用户ID
  clearSelectedIds: () => void;
  // 清除错误
  clearError: () => void;
}
export const useUserManagementStore = create<UserManagementState>()((set, get) => ({
  users: [],
  pagination: {
    totalElements: 0,
    totalPages: 0,
    size: 10,
    number: 0,
    first: true,
    last: true,
  },
  queryParams: {
    pageNum: 1,
    pageSize: 10,
  },
  currentUser: null,
  isLoading: false,
  error: null,
  formVisible: false,
  confirmDialogVisible: false,
  roleDialogVisible: false,
  selectedIds: [],
  // 查询用户列表
  fetchUsers: async (params) => {
    set({ isLoading: true, error: null });
    try {
      // 合并查询参数
      const queryParams = params 
        ? { ...get().queryParams, ...params }
        : get().queryParams;
      set({ queryParams });
      const response = await userService.getUserList(queryParams);
      set({ 
        users: response.content,
        pagination: {
          totalElements: response.totalElements,
          totalPages: response.totalPages,
          size: response.size,
          number: response.number,
          first: response.first,
          last: response.last,
        },
        isLoading: false
      });
    } catch (error) {
      console.error('获取用户列表失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '获取用户列表失败' 
      });
      toast.error('获取用户列表失败');
    }
  },
  // 根据ID获取用户
  fetchUserById: async (id) => {
    set({ isLoading: true, error: null });
    try {
      const user = await userService.getUserById(id);
      set({ currentUser: user, isLoading: false });
    } catch (error) {
      console.error(`获取用户详情失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '获取用户详情失败'
      });
      toast.error('获取用户详情失败');
    }
  },
  // 创建用户
  createUser: async (user) => {
    set({ isLoading: true, error: null });
    try {
      const createdUser = await userService.createUser(user);
      set(state => ({ 
        users: [createdUser, ...state.users],
        isLoading: false,
        formVisible: false,
        currentUser: null
      }));
      toast.success('创建用户成功');
    } catch (error) {
      console.error('创建用户失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '创建用户失败'
      });
      toast.error('创建用户失败');
    }
  },
  // 更新用户
  updateUser: async (id, user) => {
    set({ isLoading: true, error: null });
    try {
      const updatedUser = await userService.updateUser(id, user);
      set(state => ({
        users: state.users.map(u => u.id === id ? updatedUser : u),
        isLoading: false,
        formVisible: false,
        currentUser: null
      }));
      toast.success('更新用户成功');
    } catch (error) {
      console.error(`更新用户失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '更新用户失败'
      });
      toast.error('更新用户失败');
    }
  },
  // 删除用户
  deleteUser: async (id) => {
    set({ isLoading: true, error: null });
    try {
      await userService.deleteUser(id);
      set(state => ({
        users: state.users.filter(u => u.id !== id),
        isLoading: false,
        confirmDialogVisible: false
      }));
      toast.success('删除用户成功');
    } catch (error) {
      console.error(`删除用户失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '删除用户失败'
      });
      toast.error('删除用户失败');
    }
  },
  // 批量删除用户
  batchDeleteUsers: async (ids) => {
    set({ isLoading: true, error: null });
    try {
      await userService.batchDeleteUsers(ids);
      set(state => ({
        users: state.users.filter(u => !ids.includes(u.id)),
        isLoading: false,
        selectedIds: [],
        confirmDialogVisible: false
      }));
      toast.success('批量删除用户成功');
    } catch (error) {
      console.error('批量删除用户失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '批量删除用户失败'
      });
      toast.error('批量删除用户失败');
    }
  },
  // 更新用户状态
  updateUserStatus: async (id, status) => {
    set({ isLoading: true, error: null });
    try {
      const updatedUser = await userService.updateUserStatus(id, { status });
      set(state => ({
        users: state.users.map(u => u.id === id ? updatedUser : u),
        isLoading: false
      }));
      toast.success('更新用户状态成功');
    } catch (error) {
      console.error(`更新用户状态失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '更新用户状态失败'
      });
      toast.error('更新用户状态失败');
    }
  },
  // 给用户分配角色
  assignRoles: async (userId, roleIds) => {
    set({ isLoading: true, error: null });
    try {
      const updatedUser = await userService.assignRoles(userId, roleIds);
      set(state => ({
        users: state.users.map(u => u.id === userId ? updatedUser : u),
        isLoading: false,
        roleDialogVisible: false,
        currentUser: null
      }));
      toast.success('角色分配成功');
    } catch (error) {
      console.error(`角色分配失败, userId: ${userId}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '角色分配失败'
      });
      toast.error('角色分配失败');
    }
  },
  // 设置查询参数
  setQueryParams: (params) => {
    set(state => ({ 
      queryParams: { ...state.queryParams, ...params } 
    }));
  },
  // 设置当前用户
  setCurrentUser: (user) => {
    set({ currentUser: user });
  },
  // 设置表单可见性
  setFormVisible: (visible) => {
    // 如果关闭表单，清空当前用户
    if (!visible) {
      set({ currentUser: null });
    }
    set({ formVisible: visible });
  },
  // 设置确认对话框可见性
  setConfirmDialogVisible: (visible) => {
    set({ confirmDialogVisible: visible });
  },
  // 设置角色分配对话框可见性
  setRoleDialogVisible: (visible) => {
    set({ roleDialogVisible: visible });
  },
  // 设置选中用户ID列表
  setSelectedIds: (ids) => {
    set({ selectedIds: ids });
  },
  // 添加选中用户ID
  addSelectedId: (id) => {
    set(state => ({
      selectedIds: [...state.selectedIds, id]
    }));
  },
  // 移除选中用户ID
  removeSelectedId: (id) => {
    set(state => ({
      selectedIds: state.selectedIds.filter(itemId => itemId !== id)
    }));
  },
  // 切换选中用户ID
  toggleSelectedId: (id) => {
    set(state => {
      if (state.selectedIds.includes(id)) {
        return { selectedIds: state.selectedIds.filter(itemId => itemId !== id) };
      } else {
        return { selectedIds: [...state.selectedIds, id] };
      }
    });
  },
  // 清空选中用户ID
  clearSelectedIds: () => {
    set({ selectedIds: [] });
  },
  // 清除错误
  clearError: () => {
    set({ error: null });
  }
}));
</file>

<file path="front/src/types/api.ts">
/**
 * API相关类型定义
 */
/**
 * API通用响应结构
 */
export interface ApiResponse<T = any> {
  code: number;
  message: string;
  data: T;
  success: boolean;
  errors?: Record<string, string[]>;
}
/**
 * API错误结构
 */
export interface ApiError {
  code: number;
  message: string;
  errors?: Record<string, string[]>;
}
/**
 * 分页请求参数
 */
export interface PaginationParams {
  page?: number;
  size?: number;
  keyword?: string;
  sort?: string;
  order?: 'asc' | 'desc';
}
/**
 * 分页响应结果
 */
export interface PaginationResult<T> {
  content: T[];
  totalElements: number;
  totalPages: number;
  number: number;
  size: number;
  first: boolean;
  last: boolean;
  empty: boolean;
  numberOfElements: number;
  pageable?: {
    pageNumber: number;
    pageSize: number;
    sort?: {
      sorted: boolean;
      unsorted: boolean;
      empty: boolean;
    };
    offset: number;
    paged: boolean;
    unpaged: boolean;
  };
}
// Spring Boot Pageable参数
export interface Pageable {
  page?: number;
  size?: number;
  sort?: string | string[];
}
// Spring Boot Page响应结构
export interface Page<T> {
  content: T[];
  totalElements: number;
  totalPages: number;
  size: number;
  number: number;
  first: boolean;
  last: boolean;
  numberOfElements: number;
  empty: boolean;
}
// 通用响应类型
export interface Result<T> {
  code: number;
  message: string;
  data: T;
}
// 存储配额信息
export interface QuotaInfoVO {
  type: string;
  typeName: string;
  totalQuota: number;
  usedQuota: number;
  lastUpdatedTime: string;
  availableQuota: number;
  usagePercentage: number;
}
</file>

<file path="front/src/types/auth.ts">
// 用户角色枚举
export enum UserRole {
  ADMIN = 'ADMIN',           // 管理员
  REVIEWER = 'REVIEWER',     // 审核员
  USER = 'USER',             // 普通用户
  INSTITUTION = 'INSTITUTION' // 机构用户
}
// 角色对象接口
export interface Role {
  id: number;
  name: string;
  code: string;
  description?: string;
  createdAt?: string;
  updatedAt?: string;
  permissions?: any[];
}
// 用户类型定义
export interface User {
  id: number;
  username: string;
  email: string;
  nickname?: string;
  phone?: string;
  avatar?: string;
  status?: number;
  roles: Role[];  // 角色对象数组
  createdAt: string;
  updatedAt: string;
  lastLoginAt?: string;
  institutionId: number;
  role: string;
}
// 登录请求参数
export interface LoginRequest {
  username: string;
  password: string;
}
// 邮箱验证码请求参数
export interface EmailVerificationRequest {
  email: string;
  captchaCode: string;
  captchaKey: string;
}
// 注册请求参数
export interface RegisterRequest {
  username: string;
  email: string;
  password: string;
  confirmPassword: string;
  captchaCode: string;
  captchaKey: string;
  emailCode: string;        // 邮箱验证码
}
// 登录响应
export interface LoginResponse {
  accessToken: string;      // 访问令牌
  token?: string;           // 兼容旧代码
  refreshToken: string;     // 刷新令牌
  tokenType: string;        // 令牌类型
  expiresIn: number;        // 过期时间（毫秒）
  user?: User;              // 用户信息（可能需要单独获取）
}
// 验证码响应
export interface CaptchaResponse {
  captchaId: string;
  captchaImage: string;
}
export interface RefreshTokenResponse {
  accessToken: string;
  refreshToken: string;
}
</file>

<file path="front/src/types/course.ts">
// 标签类型定义
export interface Tag {
  id: number;
  name: string;
  description?: string;
  useCount?: number;
  courseCount?: number;
  createdAt?: string;
  updatedAt?: string;
}
// 标签创建/更新请求参数
export interface TagDTO {
  id?: number;
  name: string;
  description?: string;
}
// 分类类型定义
export interface Category {
  id: number;
  name: string;
  description?: string;
  parentId?: number;
  parentName?: string;
  level?: number;
  iconUrl?: string;
  orderIndex?: number;
  courseCount?: number;
  childrenCount?: number;
  createdAt?: string;
  updatedAt?: string;
}
// 分类创建/更新请求参数
export interface CategoryDTO {
  id?: number;
  name: string;
  code: string;
  description?: string;
  parentId?: number;
  orderIndex?: number;
  enabled?: boolean;
  icon?: string;
}
// 分类树结构
export interface CategoryTree {
  id: number;
  name: string;
  code: string;
  description?: string;
  level?: number;
  orderIndex?: number;
  enabled?: boolean;
  icon?: string;
  courseCount?: number;
  children?: CategoryTree[];
  fullPath?: string;
}
// 课程状态枚举
export enum CourseStatus {
  DRAFT = 0,              // 草稿
  PENDING_REVIEW = 1,     // 待审核
  REVIEWING = 2,          // 审核中
  REJECTED = 3,           // 已拒绝
  PUBLISHED = 4,          // 已发布
  UNPUBLISHED = 5         // 已下线
}
// 付费类型枚举
export enum CoursePaymentType {
  FREE = 0,          // 免费
  PAID = 1           // 付费
}
// 章节访问类型枚举
export enum ChapterAccessType {
  FREE_TRIAL = 0,    // 免费试学
  PAID_ONLY = 1      // 付费访问
}
// 课程难度枚举
export enum CourseDifficulty {
  BEGINNER = 1,      // 初级
  INTERMEDIATE = 2,  // 中级
  ADVANCED = 3       // 高级
}
// 机构简要信息
export interface InstitutionVO {
  id: number;
  name: string;
  logo?: string;
}
// 课程模型
export interface Course {
  id: number;
  title: string;
  description?: string;
  coverUrl?: string;
  status: number;
  versionType: number;
  isPublishedVersion?: boolean;
  publishedVersionId?: number; // 指向发布版本的ID
  creatorId?: number;
  creatorName?: string;
  institution?: InstitutionVO;
  category?: Category;
  tags?: Tag[];
  paymentType: number;
  price?: number;
  discountPrice?: number;
  difficulty?: number;
  targetAudience?: string;
  learningObjectives?: string;
  totalLessons?: number;
  totalDuration?: number;
  totalChapters?: number;
  totalSections?: number;
  studentCount?: number;      // 学习人数
  averageRating?: number;     // 平均评分(1-5星)
  ratingCount?: number;       // 评分人数
  submittedAt?: string;
  reviewStartedAt?: string;
  reviewedAt?: string;
  publishedAt?: string;
  reviewComment?: string;
  reviewerId?: number;
  reviewerName?: string;
  createdAt?: string;
  updatedAt?: string;
}
// 课程创建/更新请求参数
export interface CourseCreateDTO {
  title: string;
  description?: string;
  categoryId?: number;
  tagIds?: number[];
  paymentType: CoursePaymentType;
  price?: number;
  discountPrice?: number;
  difficulty?: CourseDifficulty;
  targetAudience?: string;
  learningObjectives?: string;
}
// 章节模型
export interface Chapter {
  id: number;
  title: string;
  description?: string;
  orderIndex: number;
  accessType: number;
  courseId: number;
  courseName?: string;
  sections?: Section[];
  createdAt?: string;
  updatedAt?: string;
}
// 章节创建/更新请求参数
export interface ChapterCreateDTO {
  title: string;
  description?: string;
  courseId: number;
  orderIndex?: number;
  accessType?: ChapterAccessType;
  estimatedMinutes?: number;
}
// 章节排序请求参数
export interface ChapterOrderDTO {
  id: number;
  orderIndex: number;
}
// 小节模型
export interface Section {
  id: number;
  title: string;
  description?: string;
  orderIndex: number;
  contentType: string; // video, document, audio, text, image, mixed
  chapterId: number;
  chapterTitle?: string;
  // 访问类型
  accessType?: number;
  // 预计学习时间（分钟）
  estimatedMinutes?: number;
  // 资源类型鉴别器：MEDIA, QUESTION_GROUP, NONE
  resourceTypeDiscriminator?: string;
  // 直接关联的媒体资源（仅当resourceTypeDiscriminator为MEDIA时有效）
  media?: MediaVO;
  // 媒体资源ID（仅当resourceTypeDiscriminator为MEDIA时有效）
  mediaId?: number;
  // 媒体资源类型(primary, supplementary, homework, reference)
  mediaResourceType?: string;
  // 直接关联的题目组（仅当resourceTypeDiscriminator为QUESTION_GROUP时有效）
  questionGroup?: QuestionGroupVO;
  // 题目组ID（仅当resourceTypeDiscriminator为QUESTION_GROUP时有效）
  questionGroupId?: number;
  // 题目组配置（仅当resourceTypeDiscriminator为QUESTION_GROUP时有效）
  randomOrder?: boolean;
  orderByDifficulty?: boolean;
  showAnalysis?: boolean;
  // 已弃用：使用直接关联的媒体资源或题目组替代
  resources?: SectionResource[];
  // 已弃用：使用直接关联的媒体资源或题目组替代
  questionGroups?: SectionQuestionGroup[];
  createdTime?: number;
  updatedTime?: number;
}
// 小节创建/更新请求参数
export interface SectionCreateDTO {
  title: string;
  description?: string;
  chapterId: number;
  orderIndex?: number;
  contentType: string;
  accessType?: ChapterAccessType; // 访问类型
  estimatedMinutes?: number; // 预计学习时间
}
// 小节排序请求参数
export interface SectionOrderDTO {
  id: number;
  orderIndex: number;
}
// 媒体信息
export interface MediaVO {
  id: number;
  title: string;
  description?: string;
  type?: string;
  size?: number;
  originalFilename?: string;
  status?: string;
  institutionId?: number;
  uploaderId?: number;
  uploadTime?: number;
  lastAccessTime?: number;
  accessUrl?: string;
}
// 小节资源模型
export interface SectionResource {
  id: number;
  sectionId: number;
  mediaId: number;
  media?: MediaVO; // 媒体信息
  resourceType: string; // primary, supplementary, homework, reference
  orderIndex: number;
  createdTime?: number;
  updatedTime?: number;
}
// 小节资源创建/更新请求参数
export interface SectionResourceDTO {
  sectionId: number;
  mediaId: number;
  resourceType: string;
  orderIndex?: number;
}
// 题目组简要信息
export interface QuestionGroupVO {
  id: number;
  name: string;
  description?: string;
  institutionId?: number;
  questionCount?: number;
  creatorId?: number;
  creatorName?: string;
  createdTime?: number;
  updatedTime?: number;
}
// 小节题目组模型
export interface SectionQuestionGroup {
  id: number;
  sectionId: number;
  questionGroupId: number;
  questionGroup?: QuestionGroupVO; // 题目组信息
  orderIndex: number;
  randomOrder: boolean;
  orderByDifficulty: boolean;
  showAnalysis: boolean;
  createdTime?: number;
  updatedTime?: number;
}
// 小节题目组创建/更新请求参数
export interface SectionQuestionGroupDTO {
  sectionId: number;
  questionGroupId: number;
  orderIndex?: number;
  randomOrder?: boolean;
  orderByDifficulty?: boolean;
  showAnalysis?: boolean;
}
// 小节题目组配置DTO
export interface SectionQuestionGroupConfigDTO {
  randomOrder?: boolean;
  orderByDifficulty?: boolean;
  showAnalysis?: boolean;
}
// 课程预览URL
export interface PreviewUrlVO {
  url: string;
  expireTime: string;
  courseId: number;
  courseTitle: string;
}
/**
 * 课程结构视图对象
 */
export interface CourseStructureVO {
  course: Course;
  chapters: ChapterVO[];
}
/**
 * 章节视图对象
 */
export interface ChapterVO {
  id: number;
  title: string;
  description?: string;
  order: number;
  accessType: number;
  estimatedMinutes?: number;
  sections: SectionVO[];
}
/**
 * 小节视图对象
 */
export interface SectionVO {
  id: number;
  title: string;
  description?: string;
  order: number;
  duration?: number;
  resourceTypeDiscriminator: 'MEDIA' | 'QUESTION_GROUP' | 'NONE';
  mediaId?: number;
  questionGroupId?: number;
  accessType?: number;
}
// 课程查询参数
export interface CourseQueryParams {
  page?: number;
  size?: number;
  keyword?: string;
  status?: CourseStatus;
  categoryId?: number;
  difficulty?: CourseDifficulty;
  sortBy?: string;
  sortDir?: 'asc' | 'desc';
}
// 课程列表响应
export interface CourseListResponse {
  content: Course[];
  totalElements: number;
  totalPages: number;
  size: number;
  number: number;
  empty: boolean;
  first: boolean;
  last: boolean;
  numberOfElements: number;
  pageable: {
    pageNumber: number;
    pageSize: number;
    sort?: {
      sorted: boolean;
      unsorted: boolean;
      empty: boolean;
    };
    offset: number;
    paged: boolean;
    unpaged: boolean;
  };
}
</file>

<file path="front/src/types/institution.ts">
/**
 * 机构入驻申请请求参数
 */
export interface InstitutionApplyRequest {
  name: string;                  // 机构名称
  logo?: string;                 // 机构Logo URL
  description?: string;          // 机构描述
  contactPerson: string;         // 联系人
  contactPhone?: string;         // 联系电话
  contactEmail: string;          // 联系邮箱
  address?: string;              // 地址
  captchaKey: string;            // 验证码Key
  captchaCode: string;           // 验证码
}
/**
 * 机构用户注册请求参数
 */
export interface InstitutionRegisterRequest {
  username: string;              // 用户名
  password: string;              // 密码
  email: string;                 // 邮箱
  phone?: string;                // 手机号
  institutionCode: string;       // 机构注册码
  captchaKey: string;            // 验证码Key
  captchaCode: string;           // 验证码
  emailCode: string;             // 邮箱验证码
}
/**
 * 机构信息响应
 */
export interface InstitutionResponse {
  id: number;                    // ID
  name: string;                  // 机构名称
  logo?: string;                 // 机构Logo
  description?: string;          // 机构描述
  status: number;                // 状态：0-待审核，1-正常，2-禁用
  contactPerson: string;         // 联系人
  contactPhone?: string;         // 联系电话
  contactEmail: string;          // 联系邮箱
  address?: string;              // 地址
  createdAt: string;             // 创建时间
  updatedAt: string;             // 更新时间
}
/**
 * 机构申请信息响应
 */
export interface InstitutionApplicationResponse {
  id: number;                    // ID
  applicationId: string;         // 申请ID
  name: string;                  // 机构名称
  logo?: string;                 // 机构Logo
  description?: string;          // 机构描述
  contactPerson: string;         // 联系人
  contactPhone?: string;         // 联系电话
  contactEmail: string;          // 联系邮箱
  address?: string;              // 地址
  status: number;                // 状态：0-待审核，1-已通过，2-已拒绝
  reviewComment?: string;        // 审核结果备注
  reviewerId?: number;           // 审核人ID
  reviewedAt?: string;           // 审核时间
  institutionId?: number;        // 关联的机构ID
  createdAt: string;             // 创建时间
  updatedAt: string;             // 更新时间
}
/**
 * 机构申请查询参数
 */
export interface InstitutionApplicationQueryParams {
  applicationId?: string;        // 申请ID
  name?: string;                 // 机构名称
  contactPerson?: string;        // 联系人
  contactEmail?: string;         // 联系邮箱
  status?: number;               // 状态：0-待审核，1-已通过，2-已拒绝
  page?: number;                 // 页码
  size?: number;                 // 每页条数
}
/**
 * 通用分页响应接口
 */
export interface Page<T> {
  content: T[];                  // 数据内容
  totalElements: number;         // 总记录数
  totalPages: number;            // 总页数
  size: number;                  // 每页条数
  number: number;                // 当前页码
  numberOfElements: number;      // 当前页记录数
  first: boolean;                // 是否第一页
  last: boolean;                 // 是否最后一页
  empty: boolean;                // 是否为空
}
</file>

<file path="front/src/types/permission.ts">
// 权限实体类型
export interface Permission {
  id: number;
  name: string;         // 权限名称
  code: string;         // 权限编码
  description?: string; // 权限描述
  url?: string;         // 资源URL
  method?: string;      // HTTP方法
  createdAt?: string;   // 创建时间
  updatedAt?: string;   // 更新时间
}
// 权限创建/更新DTO
export interface PermissionDTO {
  id?: number;
  name: string;         // 权限名称
  code: string;         // 权限编码
  description?: string; // 权限描述
  url?: string;         // 资源URL
  method?: string;      // HTTP方法
}
// 分页查询参数
export interface PermissionQueryParams {
  page?: number;
  pageSize?: number;
  name?: string;
  code?: string;
}
</file>

<file path="front/src/types/question.ts">
// 问题类型
export interface Question {
  id: number;
  title: string;
  description?: string;
  type: QuestionType;
  difficulty: QuestionDifficulty;
  options?: QuestionOption[];
  answer?: string;
  analysis?: string;
  institutionId: number;
  createdBy: number;
  createdAt: string;
  updatedAt?: string;
  tagIds?: number[];
  tags?: QuestionTag[];
  score?: number;
}
// 问题创建/更新DTO
export interface QuestionDTO {
  title: string;
  description?: string;
  type: QuestionType;
  difficulty: QuestionDifficulty;
  options?: QuestionOptionDTO[];
  answer?: string;
  analysis?: string;
  institutionId: number;
  tagIds?: number[];
  content?: string;
  score?: number;
}
// 题目类型枚举
export enum QuestionType {
  SINGLE_CHOICE = 0,
  MULTIPLE_CHOICE = 1,
  TRUE_FALSE = 2,
  FILL_BLANK = 3,
  SHORT_ANSWER = 4
}
// 题目难度枚举
export enum QuestionDifficulty {
  EASY = 1,
  MEDIUM = 2,
  HARD = 3
}
// 问题选项
export interface QuestionOption {
  id: number;
  content: string;
  isCorrect: boolean;
  questionId: number;
  optionOrder: number;
}
// 问题选项DTO
export interface QuestionOptionDTO {
  content: string;
  isCorrect: boolean;
  optionOrder: number;
}
// 问题标签
export interface QuestionTag {
  id: number;
  name: string;
  description?: string;
  institutionId: number;
  createdAt?: string;
  updatedAt?: string;
}
// 问题标签DTO
export interface QuestionTagDTO {
  name: string;
  description?: string;
  institutionId: number;
}
// 问题组
export interface QuestionGroup {
  id: number;
  name: string;
  description?: string;
  institutionId: number;
  questionCount: number;
  creatorId: number;
  createdAt: string;
  updatedAt: string;
}
// 问题组DTO
export interface QuestionGroupDTO {
  name: string;
  description?: string;
  institutionId: number;
}
// 问题查询参数
export interface QuestionQueryParams {
  page?: number;
  pageSize?: number;
  title?: string;
  keyword?: string;
  search?: string;
  type?: QuestionType;
  difficulty?: QuestionDifficulty;
  institutionId?: number;
  tagIds?: number[];
  groupId?: number;
}
/**
 * 试题导入结果
 */
export interface QuestionImportResultVO {
  /**
   * 总条目数
   */
  totalCount: number;
  /**
   * 成功导入数
   */
  successCount: number;
  /**
   * 失败数
   */
  failureCount: number;
  /**
   * 导入用时(毫秒)
   */
  duration: number;
  /**
   * 失败记录列表
   */
  failureItems: FailureItem[];
}
/**
 * 导入失败记录项
 */
export interface FailureItem {
  /**
   * Excel行号(从1开始)
   */
  rowIndex: number;
  /**
   * 题目标题
   */
  title: string;
  /**
   * 错误信息
   */
  errorMessage: string;
}
/**
 * 题目组项视图对象
 */
export interface QuestionGroupItemVO {
  /**
   * 项目ID
   */
  id: number;
  /**
   * 题目组ID
   */
  groupId: number;
  /**
   * 题目
   */
  question: Question;
  /**
   * 在组中的顺序
   */
  orderIndex: number;
  /**
   * 难度级别（可覆盖题目原始难度）
   */
  difficulty?: number;
  /**
   * 分值（可覆盖题目原始分值）
   */
  score?: number;
}
// 题组中的题目
export interface QuestionGroupItem {
  id: number;
  groupId: number;
  questionId: number;
  orderIndex: number;
  question: Question;
  createdAt: string;
  updatedAt: string;
}
</file>

<file path="front/src/types/review.ts">
/**
 * 课程审核相关类型定义
 */
import { Course, CourseStatus } from './course';
/**
 * 审核任务状态枚举
 */
export enum ReviewStatus {
  PENDING = 0,       // 待审核
  IN_PROGRESS = 1,   // 审核中
  COMPLETED = 2,     // 已完成
}
/**
 * 审核任务类型枚举
 */
export enum ReviewType {
  COURSE = 0,        // 课程审核
  INSTITUTION = 1,   // 机构审核
}
/**
 * 审核任务模型
 */
export interface ReviewTask {
  id: number;
  reviewType: ReviewType;
  targetId: number;    // 审核对象ID（课程ID或机构ID）
  targetName: string;  // 审核对象名称
  status: ReviewStatus;
  submittedAt: string;
  reviewStartedAt?: string;
  reviewCompletedAt?: string;
  reviewerId?: number;
  reviewerName?: string;
  comment?: string;    // 审核意见
  createdAt: string;
  updatedAt: string;
  // 可选的关联信息
  course?: Course;     // 如果是课程审核，包含课程基本信息
}
/**
 * 课程审核响应类型
 */
export interface ReviewResponseDTO {
  comment?: string;      // 审核意见或拒绝原因
}
/**
 * 分页审核任务列表
 */
export interface ReviewTaskPage {
  content: ReviewTask[];
  totalElements: number;
  totalPages: number;
  size: number;
  number: number;
  first: boolean;
  last: boolean;
  empty: boolean;
}
</file>

<file path="front/src/types/role.ts">
import { Permission } from './permission';
// 角色实体类型
export interface Role {
  id: number;
  name: string;         // 角色名称
  code: string;         // 角色编码
  description?: string; // 角色描述
  createdAt?: string;   // 创建时间
  updatedAt?: string;   // 更新时间
  permissions?: Permission[]; // 权限列表
}
// 角色创建/更新DTO
export interface RoleDTO {
  id?: number;
  name: string;          // 角色名称
  code: string;          // 角色编码（格式：ROLE_XXX）
  description?: string;  // 角色描述
  permissionIds?: number[]; // 权限ID列表
}
// 分页查询参数
export interface RoleQueryParams {
  page?: number;
  pageSize?: number;
  name?: string;
  code?: string;
}
</file>

<file path="front/src/types/user.ts">
// 导入基础类型
import { Role } from './auth';
// 用户查询参数
export interface UserQueryParams {
  username?: string;
  email?: string;
  phone?: string;
  status?: number;
  roleId?: number;
  institutionId?: number;
  pageNum?: number;
  pageSize?: number;
}
// 用户分页响应
export interface UserPageResponse {
  content: User[];
  totalElements: number;
  totalPages: number;
  size: number;
  number: number;
  numberOfElements: number;
  first: boolean;
  last: boolean;
  empty: boolean;
}
// 用户创建/更新DTO
export interface UserDTO {
  id?: number;
  username: string;
  email: string;
  institutionId: number;
  password?: string;
  role?: string;
  phone?: string;
  nickname?: string;
  status?: number;
  name: string;
}
// 用户状态更新DTO
export interface UserStatusDTO {
  status: number; // 0-禁用，1-正常
}
// 用户角色分配DTO
export interface UserRoleAssignmentDTO {
  roleIds: number[];
}
export interface User {
  id: number;
  username: string;
  email: string;
  institutionId: number;
  role: string;
  createdAt: string;
  updatedAt: string;
}
</file>

<file path="front/src/utils/cache.ts">
/**
 * 缓存工具模块
 * 提供前端状态管理的简单缓存机制
 */
// 缓存最长有效期（毫秒）：5分钟
export const MAX_CACHE_AGE = 5 * 60 * 1000;
// 缓存时间戳记录
const cacheTimestamps: Record<string, number> = {};
/**
 * 判断缓存是否已过期
 * @param key 缓存键
 * @param maxAge 最大有效期（毫秒），默认为 MAX_CACHE_AGE
 * @returns 是否已过期
 */
export function isCacheExpired(key: string, maxAge: number = MAX_CACHE_AGE): boolean {
  const timestamp = cacheTimestamps[key];
  if (!timestamp) return true;
  const now = Date.now();
  return now - timestamp > maxAge;
}
/**
 * 设置缓存并记录时间戳
 * @param key 缓存键
 * @param data 要缓存的数据
 * @returns 原始数据（方便链式调用）
 */
export function setCache<T>(key: string, data: T): T {
  cacheTimestamps[key] = Date.now();
  return data;
}
/**
 * 清除指定键的缓存
 * @param key 缓存键
 */
export function clearCache(key: string): void {
  delete cacheTimestamps[key];
}
/**
 * 清除所有缓存
 */
export function clearAllCache(): void {
  Object.keys(cacheTimestamps).forEach(key => {
    delete cacheTimestamps[key];
  });
}
</file>

<file path="front/src/utils/date.ts">
/**
 * 格式化日期为友好的显示格式
 * @param dateString ISO日期字符串或Date对象
 * @param format 格式化模式，默认为 'yyyy-MM-dd HH:mm'
 * @returns 格式化后的日期字符串
 */
export function formatDate(dateString: string | Date, format: string = 'yyyy-MM-dd HH:mm'): string {
  if (!dateString) return '';
  const date = typeof dateString === 'string' ? new Date(dateString) : dateString;
  if (isNaN(date.getTime())) {
    return '';
  }
  const year = date.getFullYear();
  const month = date.getMonth() + 1;
  const day = date.getDate();
  const hours = date.getHours();
  const minutes = date.getMinutes();
  const seconds = date.getSeconds();
  // 补零函数
  const pad = (num: number): string => num.toString().padStart(2, '0');
  // 替换格式化字符串
  return format
    .replace('yyyy', year.toString())
    .replace('MM', pad(month))
    .replace('dd', pad(day))
    .replace('HH', pad(hours))
    .replace('mm', pad(minutes))
    .replace('ss', pad(seconds));
}
/**
 * 计算日期之间的时间差，返回友好的文本
 * @param dateString 要计算的日期
 * @param compareWith 比较的日期，默认为当前时间
 * @returns 友好的时间差显示，如 "3小时前"
 */
export function timeAgo(dateString: string | Date, compareWith: string | Date = new Date()): string {
  const date = typeof dateString === 'string' ? new Date(dateString) : dateString;
  const compareDate = typeof compareWith === 'string' ? new Date(compareWith) : compareWith;
  const seconds = Math.floor((compareDate.getTime() - date.getTime()) / 1000);
  if (seconds < 0) {
    return formatDate(date);
  }
  // 定义时间间隔
  const intervals = {
    年: 31536000,
    月: 2592000,
    周: 604800,
    天: 86400,
    小时: 3600,
    分钟: 60,
    秒: 1
  };
  // 找到最合适的时间单位
  for (const [unit, secondsInUnit] of Object.entries(intervals)) {
    const interval = Math.floor(seconds / secondsInUnit);
    if (interval >= 1) {
      return `${interval}${unit}前`;
    }
  }
  return '刚刚';
}
</file>

<file path="front/src/utils/navigationUtils.ts">
/**
 * 导航工具函数
 */
/**
 * 获取题目管理页面URL，可以指定激活的标签页
 * @param tab 要激活的标签页
 * @returns 题目管理页面URL
 */
export function getQuestionsPageUrl(tab: 'questions' | 'groups' | 'tags' = 'questions'): string {
  return `/dashboard/questions?tab=${tab}`;
}
/**
 * 获取创建题目组的URL
 * @returns 创建题目组页面URL
 */
export function getCreateGroupUrl(): string {
  return '/dashboard/question-groups/create';
}
/**
 * 获取编辑题目组的URL
 * @param id 题目组ID
 * @returns 编辑题目组页面URL
 */
export function getEditGroupUrl(id: number): string {
  return `/dashboard/question-groups/${id}?edit=true`;
}
/**
 * 获取题目组详情页URL
 * @param id 题目组ID
 * @returns 题目组详情页URL
 */
export function getGroupDetailUrl(id: number): string {
  return `/dashboard/question-groups/${id}`;
}
</file>

<file path="front/src/utils/questionUtils.ts">
import { QuestionType, QuestionDifficulty } from '@/types/question';
/**
 * 获取题目类型的描述文本
 * @param type 题目类型
 * @returns 类型描述文本
 */
export function getQuestionTypeText(type: QuestionType): string {
  switch (type) {
    case QuestionType.SINGLE_CHOICE:
      return '单选题';
    case QuestionType.MULTIPLE_CHOICE:
      return '多选题';
    case QuestionType.TRUE_FALSE:
      return '判断题';
    case QuestionType.FILL_BLANK:
      return '填空题';
    case QuestionType.SHORT_ANSWER:
      return '简答题';
    default:
      return '未知类型';
  }
}
/**
 * 获取题目难度的描述文本
 * @param difficulty 难度级别
 * @returns 难度描述文本
 */
export function getQuestionDifficultyText(difficulty: QuestionDifficulty): string {
  switch (difficulty) {
    case QuestionDifficulty.EASY:
      return '简单';
    case QuestionDifficulty.MEDIUM:
      return '中等';
    case QuestionDifficulty.HARD:
      return '困难';
    default:
      return '未知难度';
  }
}
/**
 * 获取题目难度的颜色
 * @param difficulty 难度级别
 * @returns Badge 变体名称
 */
export function getQuestionDifficultyColor(difficulty: QuestionDifficulty): 'success' | 'default' | 'destructive' {
  switch (difficulty) {
    case QuestionDifficulty.EASY:
      return 'success';
    case QuestionDifficulty.MEDIUM:
      return 'default';
    case QuestionDifficulty.HARD:
      return 'destructive';
    default:
      return 'default';
  }
}
</file>

<file path="front/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
</file>

<file path="mvnw.cmd">
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
</file>

<file path="pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.9</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.zhangziqi</groupId>
    <artifactId>online_course_mine</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>online_course_mine</name>
    <description>online_course_mine</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.12.5</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>0.12.5</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>0.12.5</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>
        <!-- Swagger/OpenAPI -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.5.0</version>
        </dependency>
        <!-- 验证码 -->
        <dependency>
            <groupId>com.github.penggle</groupId>
            <artifactId>kaptcha</artifactId>
            <version>2.3.2</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>2.3.232</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <!-- MinIO 依赖 -->
        <dependency>
            <groupId>io.minio</groupId>
            <artifactId>minio</artifactId>
            <version>8.5.7</version>
        </dependency>
        <!-- AWS S3 依赖 -->
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>s3</artifactId>
            <version>2.20.68</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>aws-core</artifactId>
            <version>2.20.68</version>
        </dependency>
        <!-- Jackson JSR310 支持 -->
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>
        <!-- EasyExcel依赖 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>easyexcel</artifactId>
            <version>3.3.3</version>
        </dependency>
        <!-- 支付宝SDK -->
        <dependency>
            <groupId>com.alipay.sdk</groupId>
            <artifactId>alipay-sdk-java</artifactId>
            <version>4.38.0.ALL</version>
        </dependency>
        <!-- 支付宝开放平台SDK -->
        <dependency>
            <groupId>com.alipay.sdk</groupId>
            <artifactId>alipay-easysdk</artifactId>
            <version>2.2.3</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/AlipayConfig.java">
package com.zhangziqi.online_course_mine.config;
import com.alipay.api.AlipayClient;
import com.alipay.api.DefaultAlipayClient;
import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
@Data
@Configuration
@ConfigurationProperties(prefix = "alipay")
public class AlipayConfig {
    private String appId;
    private String appPrivateKey;
    private String alipayPublicKey;
    private String notifyUrl;
    private String gatewayUrl;
    @Bean
    public AlipayClient alipayClient() {
        return new DefaultAlipayClient(
            gatewayUrl,
            appId,
            appPrivateKey,
            "json",
            "UTF-8",
            alipayPublicKey,
            "RSA2"
        );
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/AsyncConfig.java">
package com.zhangziqi.online_course_mine.config;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.security.task.DelegatingSecurityContextAsyncTaskExecutor;
import java.util.concurrent.Executor;
import java.util.concurrent.ThreadPoolExecutor;
/**
 * 异步任务配置
 */
@Configuration
@EnableAsync
@Slf4j
public class AsyncConfig {
    /**
     * 导入任务线程池
     */
    @Bean(name = "importTaskExecutor")
    public Executor importTaskExecutor() {
        ThreadPoolTaskExecutor delegate = new ThreadPoolTaskExecutor();
        // 核心线程数：CPU核心数
        delegate.setCorePoolSize(Runtime.getRuntime().availableProcessors());
        // 最大线程数：CPU核心数 * 2
        delegate.setMaxPoolSize(Runtime.getRuntime().availableProcessors() * 2);
        // 队列容量
        delegate.setQueueCapacity(500);
        // 线程名前缀
        delegate.setThreadNamePrefix("import-task-");
        // 拒绝策略：由调用者线程执行
        delegate.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
        // 等待所有任务结束后再关闭线程池
        delegate.setWaitForTasksToCompleteOnShutdown(true);
        // 等待时间（秒）
        delegate.setAwaitTerminationSeconds(60);
        delegate.initialize();
        log.info("导入任务线程池初始化完成，核心线程数: {}, 最大线程数: {}", 
                delegate.getCorePoolSize(), delegate.getMaxPoolSize());
        // 使用DelegatingSecurityContextAsyncTaskExecutor包装原始执行器，确保安全上下文传播
        return new DelegatingSecurityContextAsyncTaskExecutor(delegate);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/CacheConfig.java">
package com.zhangziqi.online_course_mine.config;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheConfiguration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.RedisSerializationContext;
import org.springframework.data.redis.serializer.StringRedisSerializer;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;
/**
 * 缓存配置
 */
@Configuration
@EnableCaching
public class CacheConfig {
    // 缓存名称常量
    public static final String USER_CACHE = "userCache";
    public static final String PERMISSION_CACHE = "permissions";
    public static final String ROLE_CACHE = "roles";
    // 缓存时间常量（分钟）
    private static final long DEFAULT_EXPIRE_MINUTES = 30;
    private static final long USER_EXPIRE_MINUTES = 60;
    private static final long PERMISSION_EXPIRE_MINUTES = 120; // 权限缓存2小时
    private static final long ROLE_EXPIRE_MINUTES = 120; // 角色缓存2小时
    /**
     * 配置Redis缓存管理器
     */
    @Bean
    public RedisCacheManager cacheManager(RedisConnectionFactory connectionFactory) {
        // 使用Jackson2JsonRedisSerializer作为序列化器
        Jackson2JsonRedisSerializer<Object> serializer = new Jackson2JsonRedisSerializer<>(Object.class);
        // 配置ObjectMapper，确保序列化时保留类型信息
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.registerModule(new JavaTimeModule()); // 支持Java 8时间类型
        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        objectMapper.activateDefaultTyping(
            LaissezFaireSubTypeValidator.instance,
            ObjectMapper.DefaultTyping.NON_FINAL
        );
        serializer.setObjectMapper(objectMapper);
        // 默认缓存配置
        RedisCacheConfiguration defaultCacheConfig = RedisCacheConfiguration.defaultCacheConfig()
                .entryTtl(Duration.ofMinutes(DEFAULT_EXPIRE_MINUTES))
                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer()))
                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(serializer))
                .disableCachingNullValues();
        // 自定义不同缓存名称的配置
        Map<String, RedisCacheConfiguration> cacheConfigurations = new HashMap<>();
        // 用户缓存配置
        cacheConfigurations.put(USER_CACHE, 
            defaultCacheConfig.entryTtl(Duration.ofMinutes(USER_EXPIRE_MINUTES)));
        // 权限缓存配置
        cacheConfigurations.put(PERMISSION_CACHE, 
            defaultCacheConfig.entryTtl(Duration.ofMinutes(PERMISSION_EXPIRE_MINUTES)));
        // 角色缓存配置
        cacheConfigurations.put(ROLE_CACHE, 
            defaultCacheConfig.entryTtl(Duration.ofMinutes(ROLE_EXPIRE_MINUTES)));
        // 构建缓存管理器
        return RedisCacheManager.builder(connectionFactory)
                .cacheDefaults(defaultCacheConfig)
                .withInitialCacheConfigurations(cacheConfigurations)
                .transactionAware()
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/JpaAuditingConfig.java">
package com.zhangziqi.online_course_mine.config;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.AuditorAware;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import java.util.Optional;
/**
 * JPA审计配置
 */
@Configuration
@EnableJpaAuditing
public class JpaAuditingConfig {
    /**
     * 当前操作用户
     */
    @Bean
    public AuditorAware<String> auditorProvider() {
        return () -> Optional.of("System");
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/KaptchaConfig.java">
package com.zhangziqi.online_course_mine.config;
import com.google.code.kaptcha.impl.DefaultKaptcha;
import com.google.code.kaptcha.util.Config;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import java.util.Properties;
/**
 * 验证码配置
 */
@Configuration
public class KaptchaConfig {
    /**
     * 图形验证码生成器
     */
    @Bean
    public DefaultKaptcha captchaProducer() {
        DefaultKaptcha defaultKaptcha = new DefaultKaptcha();
        Properties properties = new Properties();
        // 图片宽度
        properties.setProperty("kaptcha.image.width", "150");
        // 图片高度
        properties.setProperty("kaptcha.image.height", "50");
        // 字体大小
        properties.setProperty("kaptcha.textproducer.font.size", "38");
        // 字体颜色
        properties.setProperty("kaptcha.textproducer.font.color", "0,0,0");
        // 字体
        properties.setProperty("kaptcha.textproducer.font.names", "Arial,Courier");
        // 字符间距
        properties.setProperty("kaptcha.textproducer.char.space", "5");
        // 验证码长度
        properties.setProperty("kaptcha.textproducer.char.length", "4");
        // 干扰线颜色
        properties.setProperty("kaptcha.noise.color", "blue");
        // 图片边框
        properties.setProperty("kaptcha.border", "no");
        // 背景颜色渐变，开始颜色
        properties.setProperty("kaptcha.background.clear.from", "white");
        // 背景颜色渐变，结束颜色
        properties.setProperty("kaptcha.background.clear.to", "white");
        Config config = new Config(properties);
        defaultKaptcha.setConfig(config);
        return defaultKaptcha;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/MinioConfig.java">
package com.zhangziqi.online_course_mine.config;
import io.minio.MinioClient;
import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
@Data
@Configuration
@ConfigurationProperties(prefix = "minio")
public class MinioConfig {
    private String endpoint;
    private String accessKey;
    private String secretKey;
    private String bucketName;
    @Bean
    public MinioClient minioClient() {
        return MinioClient.builder()
                .endpoint(endpoint)
                .credentials(accessKey, secretKey)
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/OpenApiConfig.java">
package com.zhangziqi.online_course_mine.config;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
/**
 * OpenAPI配置
 */
@Configuration
public class OpenApiConfig {
    /**
     * 配置OpenAPI
     */
    @Bean
    public OpenAPI openAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("在线课程平台API")
                        .description("在线课程平台的RESTful API文档")
                        .version("1.0.0")
                        .contact(new Contact()
                                .name("在线课程平台团队")
                                .email("support@example.com")
                                .url("https://example.com"))
                        .license(new License()
                                .name("MIT License")
                                .url("https://opensource.org/licenses/MIT")))
                // 添加JWT认证
                .addSecurityItem(new SecurityRequirement().addList("Bearer Authentication"))
                .components(new Components()
                        .addSecuritySchemes("Bearer Authentication", createAPIKeyScheme()));
    }
    /**
     * 创建API密钥方案
     */
    private SecurityScheme createAPIKeyScheme() {
        return new SecurityScheme()
                .type(SecurityScheme.Type.HTTP)
                .bearerFormat("JWT")
                .scheme("bearer");
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/redis/RedisConfig.java">
package com.zhangziqi.online_course_mine.config.redis;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;
/**
 * Redis配置
 */
@Configuration
public class RedisConfig {
    /**
     * Redis模板
     */
    @Bean
    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(factory);
        // 使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值
        Jackson2JsonRedisSerializer<Object> jacksonSerializer = new Jackson2JsonRedisSerializer<>(Object.class);
        ObjectMapper om = new ObjectMapper();
        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        // 指定序列化输入的类型，类必须是非final修饰的
        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);
        // 添加Java 8日期时间模块支持
        om.registerModule(new JavaTimeModule());
        jacksonSerializer.setObjectMapper(om);
        // 值采用json序列化
        template.setValueSerializer(jacksonSerializer);
        // 使用StringRedisSerializer来序列化和反序列化redis的key值
        template.setKeySerializer(new StringRedisSerializer());
        template.setHashKeySerializer(new StringRedisSerializer());
        template.setHashValueSerializer(jacksonSerializer);
        template.afterPropertiesSet();
        return template;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/S3Config.java">
package com.zhangziqi.online_course_mine.config;
import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.AwsCredentials;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.S3Configuration;
import software.amazon.awssdk.services.s3.presigner.S3Presigner;
import java.net.URI;
@Data
@Configuration
@ConfigurationProperties(prefix = "aws.s3")
public class S3Config {
    private String endpoint;
    private String region;
    private String accessKey;
    private String secretKey;
    private String bucketName;
    private boolean pathStyleAccess;
    @Bean
    public S3Client s3Client() {
        AwsCredentials credentials = AwsBasicCredentials.create(accessKey, secretKey);
        S3Configuration serviceConfiguration = S3Configuration.builder()
            .pathStyleAccessEnabled(pathStyleAccess)
            .chunkedEncodingEnabled(true)
            .build();
        return S3Client.builder()
            .endpointOverride(URI.create(endpoint))
            .credentialsProvider(() -> credentials)
            .region(Region.of(region))
            .serviceConfiguration(serviceConfiguration)
            .build();
    }
    @Bean
    public S3Presigner s3Presigner() {
        AwsCredentials credentials = AwsBasicCredentials.create(accessKey, secretKey);
        S3Configuration serviceConfiguration = S3Configuration.builder()
            .pathStyleAccessEnabled(pathStyleAccess)
            .build();
        return S3Presigner.builder()
            .endpointOverride(URI.create(endpoint))
            .credentialsProvider(() -> credentials)
            .region(Region.of(region))
            .serviceConfiguration(serviceConfiguration)
            .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/security/JwtConfig.java">
package com.zhangziqi.online_course_mine.config.security;
import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;
/**
 * JWT配置
 */
@Data
@Configuration
@ConfigurationProperties(prefix = "jwt")
public class JwtConfig {
    /**
     * 密钥
     */
    private String secret;
    /**
     * 访问令牌过期时间（毫秒）
     */
    private long accessTokenExpiration;
    /**
     * 刷新令牌过期时间（毫秒）
     */
    private long refreshTokenExpiration;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/security/SecurityConfig.java">
package com.zhangziqi.online_course_mine.config.security;
import com.zhangziqi.online_course_mine.security.jwt.JwtAuthenticationFilter;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import java.util.Arrays;
/**
 * 安全配置
 */
@Configuration
@EnableWebSecurity
@EnableMethodSecurity
@RequiredArgsConstructor
public class SecurityConfig {
    private final JwtAuthenticationFilter jwtAuthenticationFilter;
    /**
     * 安全过滤器链
     */
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            // 禁用CSRF
            .csrf(AbstractHttpConfigurer::disable)
            // 启用CORS
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            // 设置Session管理策略为无状态
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            // 授权请求配置
            .authorizeHttpRequests(auth -> auth
                // 公开接口
                .requestMatchers("/api/auth/**", "/api/public/**", "/api/institutions/apply", 
                                 "/api/institutions/application-status", "/h2-console/**",
                                 "/api/alipay/**").permitAll()
                // Swagger相关接口
                .requestMatchers("/swagger-ui/**", "/v3/api-docs/**", "/swagger-resources/**").permitAll()
                // 其他所有请求需要认证
                .anyRequest().authenticated()
            )
            // 添加JWT过滤器
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }
    /**
     * 密码编码器
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
    /**
     * 认证管理器
     */
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }
    /**
     * CORS配置源
     */
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("*"));
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("authorization", "content-type", "x-auth-token"));
        configuration.setExposedHeaders(Arrays.asList("x-auth-token"));
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/StorageConfigProperties.java">
package com.zhangziqi.online_course_mine.config;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Configuration;
@Configuration
@EnableConfigurationProperties({MinioConfig.class, S3Config.class})
public class StorageConfigProperties {
    // 此类仅用于启用ConfigurationProperties注解的绑定
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/constant/OrderConstants.java">
package com.zhangziqi.online_course_mine.constant;
/**
 * 订单相关常量
 */
public class OrderConstants {
    /**
     * 订单来源
     */
    public static final String SOURCE_PC = "PC";
    public static final String SOURCE_MOBILE = "MOBILE";
    public static final String SOURCE_H5 = "H5";
    public static final String SOURCE_APP = "APP";
    /**
     * 支付方式
     */
    public static final String PAYMENT_METHOD_ALIPAY = "ALIPAY";
    public static final String PAYMENT_METHOD_WECHAT = "WECHAT";
    public static final String PAYMENT_METHOD_BALANCE = "BALANCE";
    public static final String PAYMENT_METHOD_FREE = "FREE";
    /**
     * 订单类型
     */
    public static final String TYPE_COURSE = "COURSE";
    public static final String TYPE_VIP = "VIP";
    public static final String TYPE_RECHARGE = "RECHARGE";
    /**
     * 支付宝交易状态
     */
    public static final String ALIPAY_TRADE_SUCCESS = "TRADE_SUCCESS";
    public static final String ALIPAY_TRADE_FINISHED = "TRADE_FINISHED";
    public static final String ALIPAY_TRADE_CLOSED = "TRADE_CLOSED";
    /**
     * 回调成功响应
     */
    public static final String NOTIFY_SUCCESS = "success";
    public static final String NOTIFY_FAIL = "fail";
    /**
     * 订单退款原因
     */
    public static final String REFUND_REASON_COURSE_UNPUBLISHED = "课程已下架，系统自动退款";
    public static final String REFUND_REASON_USER_REQUEST = "用户申请退款";
    public static final String REFUND_REASON_ADMIN_OPERATION = "管理员操作退款";
    private OrderConstants() {
        // 私有构造函数防止实例化
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/AlipayTestController.java">
package com.zhangziqi.online_course_mine.controller;
import com.alipay.api.AlipayApiException;
import com.alipay.api.AlipayClient;
import com.alipay.api.internal.util.AlipaySignature;
import com.alipay.api.request.AlipayTradePagePayRequest;
import com.zhangziqi.online_course_mine.config.AlipayConfig;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.*;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
@Slf4j
@RestController
@RequestMapping("/api/alipay")
@RequiredArgsConstructor
public class AlipayTestController {
    private final AlipayClient alipayClient;
    private final AlipayConfig alipayConfig;
    /**
     * 生成支付宝支付链接
     */
    @GetMapping("/pay")
    public String pay(@RequestParam(defaultValue = "0.01") BigDecimal amount) {
        try {
            // 创建API对应的request
            AlipayTradePagePayRequest alipayRequest = new AlipayTradePagePayRequest();
            // 设置回调地址
            alipayRequest.setNotifyUrl(alipayConfig.getNotifyUrl());
            alipayRequest.setReturnUrl("http://localhost:8080/api/alipay/return");
            // 生成订单号
            String outTradeNo = UUID.randomUUID().toString().replace("-", "");
            // 设置请求参数
            Map<String, Object> bizContent = new HashMap<>();
            bizContent.put("out_trade_no", outTradeNo);
            bizContent.put("total_amount", amount);
            bizContent.put("subject", "测试商品");
            bizContent.put("product_code", "FAST_INSTANT_TRADE_PAY");
            alipayRequest.setBizContent(com.alibaba.fastjson.JSON.toJSONString(bizContent));
            // 调用SDK生成支付链接
            String form = alipayClient.pageExecute(alipayRequest).getBody();
            log.info("生成支付表单: {}", form);
            return form;
        } catch (AlipayApiException e) {
            log.error("支付宝支付错误", e);
            return "支付宝接口调用异常: " + e.getMessage();
        }
    }
    /**
     * 支付宝同步回调接口
     */
    @GetMapping("/return")
    public String returnUrl(@RequestParam Map<String, String> params) {
        log.info("支付宝同步回调参数: {}", params);
        try {
            // 验证签名
            boolean signVerified = AlipaySignature.rsaCheckV1(
                params, 
                alipayConfig.getAlipayPublicKey(), 
                "UTF-8", 
                "RSA2"
            );
            if (signVerified) {
                String outTradeNo = params.get("out_trade_no");
                String tradeNo = params.get("trade_no");
                String totalAmount = params.get("total_amount");
                log.info("验签成功，订单号: {}, 支付宝交易号: {}, 金额: {}", outTradeNo, tradeNo, totalAmount);
                return "支付成功！订单号: " + outTradeNo;
            } else {
                log.warn("验签失败");
                return "验签失败";
            }
        } catch (AlipayApiException e) {
            log.error("支付宝回调验签异常", e);
            return "验签异常: " + e.getMessage();
        }
    }
    /**
     * 支付宝异步通知接口
     */
    @PostMapping("/notify")
    public String notifyUrl(@RequestParam Map<String, String> params) {
        log.info("支付宝异步通知参数: {}", params);
        try {
            // 验证签名
            boolean signVerified = AlipaySignature.rsaCheckV1(
                params, 
                alipayConfig.getAlipayPublicKey(), 
                "UTF-8", 
                "RSA2"
            );
            if (signVerified) {
                // 验签成功
                String outTradeNo = params.get("out_trade_no");
                String tradeNo = params.get("trade_no");
                String tradeStatus = params.get("trade_status");
                String totalAmount = params.get("total_amount");
                log.info("异步通知验签成功，订单号: {}, 支付宝交易号: {}, 交易状态: {}, 金额: {}", 
                         outTradeNo, tradeNo, tradeStatus, totalAmount);
                // 判断交易状态
                if ("TRADE_SUCCESS".equals(tradeStatus) || "TRADE_FINISHED".equals(tradeStatus)) {
                    // 支付成功，执行业务逻辑
                    log.info("订单 {} 支付成功，金额: {}", outTradeNo, totalAmount);
                    // TODO: 更新订单状态，创建支付记录等
                }
                return "success";  // 要返回success，表示接收成功
            } else {
                log.warn("异步通知验签失败");
                return "fail";
            }
        } catch (AlipayApiException e) {
            log.error("支付宝异步通知验签异常", e);
            return "fail";
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/AuthController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.LoginDTO;
import com.zhangziqi.online_course_mine.model.dto.RefreshTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.dto.EmailVerificationDTO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.AuthService;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import com.zhangziqi.online_course_mine.service.EmailService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.UUID;
/**
 * 认证控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/auth")
@Tag(name = "认证接口", description = "包括注册、登录、刷新令牌等接口")
public class AuthController {
    private final AuthService authService;
    private final CaptchaService captchaService;
    private final EmailService emailService;
    /**
     * 获取验证码key
     */
    @GetMapping("/captcha/key")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
        summary = "获取验证码key",
        description = "获取验证码key，用于后续获取验证码图片"
    )
    public Result<String> getCaptchaKey() {
        return Result.success(UUID.randomUUID().toString());
    }
    /**
     * 获取验证码图片
     */
    @GetMapping("/captcha/image/{key}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
        summary = "获取验证码图片",
        description = "根据验证码key获取对应的验证码图片"
    )
    public void getCaptchaImage(
        @Parameter(description = "验证码key") 
        @PathVariable String key,
        HttpServletResponse response
    ) throws IOException {
        BufferedImage image = captchaService.generateCaptcha(key);
        response.setContentType(MediaType.IMAGE_JPEG_VALUE);
        response.setHeader(HttpHeaders.CACHE_CONTROL, "no-store, no-cache, must-revalidate");
        response.setHeader(HttpHeaders.PRAGMA, "no-cache");
        response.setDateHeader(HttpHeaders.EXPIRES, 0);
        ImageIO.write(image, "jpg", response.getOutputStream());
    }
    /**
     * 发送邮箱验证码
     *
     * @param emailVerificationDTO 邮箱验证码请求
     * @return 结果
     */
    @PostMapping("/email-verification-code")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "发送邮箱验证码", description = "发送邮箱验证码（用于用户注册）")
    public Result<Void> sendEmailVerificationCode(@Valid @RequestBody EmailVerificationDTO emailVerificationDTO) {
        // 验证图形验证码
        if (!captchaService.validateCaptcha(emailVerificationDTO.getCaptchaKey(), emailVerificationDTO.getCaptchaCode())) {
            return Result.fail("验证码错误");
        }
        // 生成邮箱验证码
        String code = emailService.generateVerificationCode();
        // 发送验证码
        emailService.sendVerificationCode(emailVerificationDTO.getEmail(), code);
        // 保存验证码到Redis
        emailService.saveVerificationCode(emailVerificationDTO.getEmail(), code);
        return Result.success();
    }
    /**
     * 发送邮箱更新验证码
     *
     * @param emailVerificationDTO 邮箱验证码请求
     * @return 结果
     */
    @PostMapping("/email-update-code")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "发送邮箱更新验证码", description = "发送邮箱更新验证码（用于更换邮箱）")
    public Result<Void> sendEmailUpdateCode(@Valid @RequestBody EmailVerificationDTO emailVerificationDTO) {
        // 验证图形验证码
        if (!captchaService.validateCaptcha(emailVerificationDTO.getCaptchaKey(), emailVerificationDTO.getCaptchaCode())) {
            return Result.fail("验证码错误");
        }
        // 生成邮箱验证码
        String code = emailService.generateVerificationCode();
        // 发送更新验证码邮件
        emailService.sendEmailUpdateCode(emailVerificationDTO.getEmail(), code);
        // 保存验证码到Redis
        emailService.saveVerificationCode(emailVerificationDTO.getEmail(), code);
        return Result.success();
    }
    /**
     * 用户注册
     *
     * @param registerDTO 注册请求
     * @return 结果
     */
    @PostMapping("/register")
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(summary = "用户注册", description = "注册新用户")
    public Result<Void> register(@Valid @RequestBody RegisterDTO registerDTO) {
        authService.register(registerDTO);
        return Result.success();
    }
    /**
     * 用户登录
     *
     * @param loginDTO 登录请求
     * @return JWT令牌
     */
    @PostMapping("/login")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "用户登录", description = "用户登录获取JWT令牌")
    public Result<JwtTokenDTO> login(@Valid @RequestBody LoginDTO loginDTO) {
        JwtTokenDTO jwtTokenDTO = authService.login(loginDTO);
        return Result.success(jwtTokenDTO);
    }
    /**
     * 刷新令牌
     *
     * @param refreshTokenDTO 刷新令牌请求
     * @return JWT令牌
     */
    @PostMapping("/refresh-token")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "刷新令牌", description = "刷新JWT令牌")
    public Result<JwtTokenDTO> refreshToken(@Valid @RequestBody RefreshTokenDTO refreshTokenDTO) {
        JwtTokenDTO jwtTokenDTO = authService.refreshToken(refreshTokenDTO);
        return Result.success(jwtTokenDTO);
    }
    /**
     * 注销
     *
     * @param request 请求
     * @return 结果
     */
    @PostMapping("/logout")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "注销", description = "用户注销")
    public Result<Void> logout(HttpServletRequest request) {
        // 从请求头中获取JWT令牌
        String bearerToken = request.getHeader("Authorization");
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            String token = bearerToken.substring(7);
            authService.logout(token);
        }
        return Result.success();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/CategoryController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.CategoryDTO;
import com.zhangziqi.online_course_mine.model.vo.CategoryTreeVO;
import com.zhangziqi.online_course_mine.model.vo.CategoryVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.CategoryService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
/**
 * 分类管理控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/categories")
@Tag(name = "分类管理", description = "课程分类的创建、查询、编辑、删除等功能")
public class CategoryController {
    private final CategoryService categoryService;
    /**
     * 创建分类
     *
     * @param categoryDTO 分类信息
     * @return 创建后的分类ID
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasAnyRole('ADMIN', 'REVIEWER')")
    @Operation(summary = "创建分类", description = "创建新的课程分类")
    public Result<Map<String, Long>> createCategory(@Valid @RequestBody CategoryDTO categoryDTO) {
        log.info("创建分类: {}", categoryDTO);
        Long id = categoryService.createCategory(categoryDTO);
        Map<String, Long> result = new HashMap<>();
        result.put("id", id);
        return Result.success(result);
    }
    /**
     * 更新分类
     *
     * @param id 分类ID
     * @param categoryDTO 分类信息
     * @return 操作结果
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAnyRole('ADMIN', 'REVIEWER')")
    @Operation(summary = "更新分类", description = "更新分类信息")
    public Result<Void> updateCategory(
            @Parameter(description = "分类ID") @PathVariable("id") Long id,
            @Valid @RequestBody CategoryDTO categoryDTO) {
        log.info("更新分类: id={}, {}", id, categoryDTO);
        categoryService.updateCategory(id, categoryDTO);
        return Result.success();
    }
    /**
     * 删除分类
     *
     * @param id 分类ID
     * @return 操作结果
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAnyRole('ADMIN', 'REVIEWER')")
    @Operation(summary = "删除分类", description = "删除指定的分类")
    public Result<Void> deleteCategory(@Parameter(description = "分类ID") @PathVariable("id") Long id) {
        log.info("删除分类: id={}", id);
        categoryService.deleteCategory(id);
        return Result.success();
    }
    /**
     * 获取分类详情
     *
     * @param id 分类ID
     * @return 分类详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取分类详情", description = "根据ID获取分类详情")
    public Result<CategoryVO> getCategory(@Parameter(description = "分类ID") @PathVariable("id") Long id) {
        log.info("获取分类详情: id={}", id);
        CategoryVO category = categoryService.getCategory(id);
        return Result.success(category);
    }
    /**
     * 根据编码获取分类
     *
     * @param code 分类编码
     * @return 分类详情
     */
    @GetMapping("/code/{code}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAnyRole('ADMIN', 'REVIEWER', 'INSTITUTION')")
    @Operation(summary = "根据编码获取分类", description = "根据编码获取分类详情")
    public Result<CategoryVO> getCategoryByCode(@Parameter(description = "分类编码") @PathVariable("code") String code) {
        log.info("根据编码获取分类: code={}", code);
        CategoryVO category = categoryService.getCategoryByCode(code);
        return Result.success(category);
    }
    /**
     * 分页查询分类
     *
     * @param keyword 搜索关键词
     * @param pageable 分页参数
     * @return 分类列表
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "分页查询分类", description = "分页获取分类列表，支持关键词搜索")
    public Result<Page<CategoryVO>> listCategories(
            @Parameter(description = "搜索关键词") @RequestParam(required = false) String keyword,
            @PageableDefault(size = 10) Pageable pageable) {
        log.info("分页查询分类: keyword={}", keyword);
        Page<CategoryVO> categories = categoryService.listCategories(keyword, pageable);
        return Result.success(categories);
    }
    /**
     * 获取所有根分类
     *
     * @return 根分类列表
     */
    @GetMapping("/roots")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取根分类", description = "获取所有顶级分类")
    public Result<List<CategoryVO>> listRootCategories() {
        log.info("获取所有根分类");
        List<CategoryVO> rootCategories = categoryService.listRootCategories();
        return Result.success(rootCategories);
    }
    /**
     * 获取子分类
     *
     * @param parentId 父分类ID
     * @return 子分类列表
     */
    @GetMapping("/children/{parentId}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取子分类", description = "获取指定父分类下的所有子分类")
    public Result<List<CategoryVO>> listChildCategories(
            @Parameter(description = "父分类ID") @PathVariable("parentId") Long parentId) {
        log.info("获取子分类: parentId={}", parentId);
        List<CategoryVO> childCategories = categoryService.listChildCategories(parentId);
        return Result.success(childCategories);
    }
    /**
     * 获取分类树
     *
     * @return 分类树
     */
    @GetMapping("/tree")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取分类树", description = "获取完整的分类树结构")
    public Result<List<CategoryTreeVO>> getCategoryTree() {
        log.info("获取分类树");
        List<CategoryTreeVO> categoryTree = categoryService.getCategoryTree();
        return Result.success(categoryTree);
    }
    /**
     * 检查分类编码是否可用
     *
     * @param code 分类编码
     * @param excludeId 排除的分类ID（更新时使用）
     * @return 是否可用
     */
    @GetMapping("/check-code")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAnyRole('ADMIN', 'REVIEWER')")
    @Operation(summary = "检查分类编码是否可用", description = "检查分类编码是否已被使用")
    public Result<Map<String, Boolean>> isCodeAvailable(
            @Parameter(description = "分类编码") @RequestParam String code,
            @Parameter(description = "排除的分类ID") @RequestParam(required = false) Long excludeId) {
        log.info("检查分类编码是否可用: code={}, excludeId={}", code, excludeId);
        boolean available = categoryService.isCodeAvailable(code, excludeId);
        Map<String, Boolean> result = new HashMap<>();
        result.put("available", available);
        return Result.success(result);
    }
    /**
     * 更新分类状态
     *
     * @param id 分类ID
     * @param enabled 是否启用
     * @return 操作结果
     */
    @PutMapping("/{id}/status")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAnyRole('ADMIN', 'REVIEWER')")
    @Operation(summary = "更新分类状态", description = "启用或禁用指定分类")
    public Result<Void> updateCategoryStatus(
            @Parameter(description = "分类ID") @PathVariable("id") Long id,
            @Parameter(description = "是否启用") @RequestParam Boolean enabled) {
        log.info("更新分类状态: id={}, enabled={}", id, enabled);
        categoryService.updateCategoryStatus(id, enabled);
        return Result.success();
    }
    /**
     * 更新分类排序
     *
     * @param id 分类ID
     * @param orderIndex 排序索引
     * @return 操作结果
     */
    @PutMapping("/{id}/order")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAnyRole('ADMIN', 'REVIEWER')")
    @Operation(summary = "更新分类排序", description = "更新指定分类的排序索引")
    public Result<Void> updateCategoryOrder(
            @Parameter(description = "分类ID") @PathVariable("id") Long id,
            @Parameter(description = "排序索引") @RequestParam Integer orderIndex) {
        log.info("更新分类排序: id={}, orderIndex={}", id, orderIndex);
        categoryService.updateCategoryOrder(id, orderIndex);
        return Result.success();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/ChapterController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.chapter.ChapterCreateDTO;
import com.zhangziqi.online_course_mine.model.dto.chapter.ChapterOrderDTO;
import com.zhangziqi.online_course_mine.model.vo.ChapterVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.security.SecurityUtil;
import com.zhangziqi.online_course_mine.service.ChapterService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;
/**
 * 章节控制器
 * 处理课程章节的创建、更新、查询和管理
 */
@Slf4j
@RestController
@RequestMapping("/api/chapters")
@RequiredArgsConstructor
@Tag(name = "章节管理", description = "课程章节创建、更新、查询和管理相关操作")
public class ChapterController {
    private final ChapterService chapterService;
    /**
     * 创建章节
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "创建章节", description = "创建一个新的课程章节")
    public Result<ChapterVO> createChapter(@Valid @RequestBody ChapterCreateDTO dto) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("创建章节, 课程ID: {}, 机构ID: {}, 章节标题: {}", 
                dto.getCourseId(), institutionId, dto.getTitle());
        ChapterVO chapter = chapterService.createChapter(dto);
        return Result.success(chapter);
    }
    /**
     * 获取章节详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取章节详情", description = "获取指定章节的详细信息")
    public Result<ChapterVO> getChapterById(
            @Parameter(description = "章节ID") @PathVariable("id") Long chapterId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取章节详情, 章节ID: {}, 机构ID: {}", chapterId, institutionId);
        ChapterVO chapter = chapterService.getChapterById(chapterId);
        return Result.success(chapter);
    }
    /**
     * 更新章节
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "更新章节", description = "更新指定章节的信息")
    public Result<ChapterVO> updateChapter(
            @Parameter(description = "章节ID") @PathVariable("id") Long chapterId,
            @Valid @RequestBody ChapterCreateDTO dto) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("更新章节, 章节ID: {}, 机构ID: {}, 章节标题: {}", 
                chapterId, institutionId, dto.getTitle());
        ChapterVO chapter = chapterService.updateChapter(chapterId, dto);
        return Result.success(chapter);
    }
    /**
     * 删除章节
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "删除章节", description = "删除指定的章节")
    public Result<Void> deleteChapter(
            @Parameter(description = "章节ID") @PathVariable("id") Long chapterId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("删除章节, 章节ID: {}, 机构ID: {}", chapterId, institutionId);
        chapterService.deleteChapter(chapterId);
        return Result.success();
    }
    /**
     * 获取课程章节列表
     */
    @GetMapping("/course/{courseId}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取课程章节列表", description = "获取指定课程的所有章节")
    public Result<List<ChapterVO>> getChaptersByCourse(
            @Parameter(description = "课程ID") @PathVariable("courseId") Long courseId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取课程章节列表, 课程ID: {}, 机构ID: {}", courseId, institutionId);
        List<ChapterVO> chapters = chapterService.getChaptersByCourse(courseId);
        return Result.success(chapters);
    }
    /**
     * 更新章节访问类型
     */
    @PutMapping("/{id}/access-type")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "更新章节访问类型", description = "更新指定章节的访问类型")
    public Result<ChapterVO> updateAccessType(
            @Parameter(description = "章节ID") @PathVariable("id") Long chapterId,
            @Parameter(description = "访问类型") @RequestParam Integer accessType) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("更新章节访问类型, 章节ID: {}, 机构ID: {}, 访问类型: {}", 
                chapterId, institutionId, accessType);
        ChapterVO chapter = chapterService.updateAccessType(chapterId, accessType);
        return Result.success(chapter);
    }
    /**
     * 调整章节顺序
     */
    @PutMapping("/course/{courseId}/reorder")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "调整章节顺序", description = "调整课程中章节的顺序")
    public Result<List<ChapterVO>> reorderChapters(
            @Parameter(description = "课程ID") @PathVariable("courseId") Long courseId,
            @Valid @RequestBody List<ChapterOrderDTO> chapterOrders) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("调整章节顺序, 课程ID: {}, 机构ID: {}, 章节数量: {}", 
                courseId, institutionId, chapterOrders.size());
        List<ChapterVO> chapters = chapterService.reorderChapters(courseId, chapterOrders);
        return Result.success(chapters);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/CourseController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.course.CourseCreateDTO;
import com.zhangziqi.online_course_mine.model.dto.course.CourseSearchDTO;
import com.zhangziqi.online_course_mine.model.vo.CourseVO;
import com.zhangziqi.online_course_mine.model.vo.CourseStructureVO;
import com.zhangziqi.online_course_mine.model.vo.PreviewUrlVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.security.SecurityUtil;
import com.zhangziqi.online_course_mine.service.CourseService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
/**
 * 课程控制器
 * 处理课程的创建、更新、查询和管理
 */
@Slf4j
@RestController
@RequestMapping("/api/courses")
@RequiredArgsConstructor
@Tag(name = "课程管理", description = "课程创建、更新、查询和管理相关操作")
public class CourseController {
    private final CourseService courseService;
    /**
     * 创建课程
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "创建课程", description = "创建一个新的课程")
    public Result<CourseVO> createCourse(@Valid @RequestBody CourseCreateDTO dto) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        Long userId = SecurityUtil.getCurrentUserId();
        log.info("创建课程, 用户ID: {}, 机构ID: {}, 课程标题: {}", 
                userId, institutionId, dto.getTitle());
        CourseVO course = courseService.createCourse(dto, userId, institutionId);
        return Result.success(course);
    }
    /**
     * 获取课程详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取课程详情", description = "获取指定课程的详细信息")
    public Result<CourseVO> getCourseById(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取课程详情, 课程ID: {}, 机构ID: {}", courseId, institutionId);
        CourseVO course = courseService.getCourseById(courseId);
        return Result.success(course);
    }
    /**
     * 更新课程
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "更新课程", description = "更新指定课程的信息")
    public Result<CourseVO> updateCourse(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId,
            @Valid @RequestBody CourseCreateDTO dto) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("更新课程, 课程ID: {}, 机构ID: {}, 课程标题: {}", 
                courseId, institutionId, dto.getTitle());
        CourseVO course = courseService.updateCourse(courseId, dto, institutionId);
        return Result.success(course);
    }
    /**
     * 删除课程
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "删除课程", description = "删除指定的课程")
    public Result<Void> deleteCourse(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("删除课程, 课程ID: {}, 机构ID: {}", courseId, institutionId);
        courseService.deleteCourse(courseId);
        return Result.success();
    }
    /**
     * 获取机构课程列表
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取机构工作区课程列表", description = "分页获取当前机构的工作区课程列表（非发布版本）")
    public Result<Page<CourseVO>> getCoursesByInstitution(
            @PageableDefault(size = 10) Pageable pageable) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取机构工作区课程列表, 机构ID: {}", institutionId);
        Page<CourseVO> courses = courseService.getWorkspaceCoursesByInstitution(institutionId, pageable);
        return Result.success(courses);
    }
    /**
     * 获取机构发布版本课程列表
     */
    @GetMapping("/published")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取机构发布版本课程列表", description = "分页获取当前机构的发布版本课程列表")
    public Result<Page<CourseVO>> getPublishedCoursesByInstitution(
            @PageableDefault(size = 10) Pageable pageable) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取机构发布版本课程列表, 机构ID: {}", institutionId);
        Page<CourseVO> courses = courseService.getPublishedCoursesByInstitution(institutionId, pageable);
        return Result.success(courses);
    }
    /**
     * 获取课程的发布版本
     */
    @GetMapping("/{id}/published-version")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取课程的发布版本", description = "根据工作区版本ID获取对应的发布版本")
    public Result<CourseVO> getPublishedVersion(
            @Parameter(description = "工作区版本课程ID") @PathVariable("id") Long courseId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取课程发布版本, 工作区课程ID: {}, 机构ID: {}", courseId, institutionId);
        CourseVO publishedVersion = courseService.getPublishedVersionByWorkspaceId(courseId);
        if (publishedVersion == null) {
            return Result.fail(404, "该课程尚未发布");
        }
        return Result.success(publishedVersion);
    }
    /**
     * 提交课程审核
     */
    @PostMapping("/{id}/submit")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "提交课程审核", description = "将课程提交审核")
    public Result<CourseVO> submitForReview(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("提交课程审核, 课程ID: {}, 机构ID: {}", courseId, institutionId);
        CourseVO course = courseService.submitForReview(courseId);
        return Result.success(course);
    }
    /**
     * 更新课程封面
     */
    @PostMapping(value = "/{id}/cover", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "更新课程封面", description = "上传课程封面图片")
    public Result<CourseVO> updateCourseCover(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId,
            @Parameter(description = "封面图片文件") @RequestParam("file") MultipartFile file) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("更新课程封面, 课程ID: {}, 机构ID: {}, 文件大小: {}", 
                courseId, institutionId, file.getSize());
        try {
            CourseVO course = courseService.updateCourseCover(courseId, file);
            return Result.success(course);
        } catch (BusinessException e) {
            return Result.fail(e.getCode(), e.getMessage());
        } catch (IOException e) {
            log.error("课程封面上传失败", e);
            return Result.fail(500, "课程封面上传失败: " + e.getMessage());
        }
    }
    /**
     * 更新课程支付设置
     */
    @PostMapping("/{id}/payment")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "更新课程支付设置", description = "更新指定课程的支付类型和价格")
    public Result<CourseVO> updatePaymentSettings(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId,
            @Parameter(description = "支付类型") @RequestParam Integer paymentType,
            @Parameter(description = "价格") @RequestParam(required = false) BigDecimal price,
            @Parameter(description = "折扣价格") @RequestParam(required = false) BigDecimal discountPrice) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("更新课程支付设置, 课程ID: {}, 机构ID: {}, 支付类型: {}, 价格: {}, 折扣价格: {}", 
                courseId, institutionId, paymentType, price, discountPrice);
        CourseVO course = courseService.updatePaymentSettings(courseId, paymentType, price, discountPrice);
        return Result.success(course);
    }
    /**
     * 生成课程预览URL
     */
    @GetMapping("/{id}/preview")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "生成课程预览URL", description = "生成一个临时的课程预览URL")
    public Result<PreviewUrlVO> generatePreviewUrl(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("生成课程预览URL, 课程ID: {}, 机构ID: {}", courseId, institutionId);
        PreviewUrlVO previewUrl = courseService.generatePreviewUrl(courseId);
        return Result.success(previewUrl);
    }
    /**
     * 访问课程预览
     */
    @GetMapping("/preview/{token}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "访问课程预览", description = "通过预览令牌访问课程结构")
    public Result<CourseStructureVO> previewCourse(
            @Parameter(description = "预览令牌") @PathVariable("token") String token) {
        log.info("访问课程预览, 令牌: {}", token);
        CourseStructureVO courseStructure = courseService.getCourseStructureByPreviewToken(token);
        return Result.success(courseStructure);
    }
    /**
     * 开始审核课程 (仅限管理员)
     */
    @PostMapping("/{id}/review/start")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAnyAuthority('ROLE_ADMIN', 'ROLE_REVIEWER')")
    @Operation(summary = "开始审核课程", description = "管理员或审核员开始审核课程")
    public Result<CourseVO> startReview(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId) {
        Long reviewerId = SecurityUtil.getCurrentUserId();
        log.info("开始审核课程, 课程ID: {}, 审核员ID: {}", courseId, reviewerId);
        CourseVO course = courseService.startReview(courseId, reviewerId);
        return Result.success(course);
    }
    /**
     * 通过课程审核 (仅限管理员)
     */
    @PostMapping("/{id}/review/approve")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAnyAuthority('ROLE_ADMIN', 'ROLE_REVIEWER')")
    @Operation(summary = "通过课程审核", description = "管理员或审核员通过课程审核")
    public Result<CourseVO> approveCourse(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId,
            @Parameter(description = "审核意见") @RequestParam(required = false) String comment) {
        Long reviewerId = SecurityUtil.getCurrentUserId();
        log.info("通过课程审核, 课程ID: {}, 审核员ID: {}", courseId, reviewerId);
        CourseVO course = courseService.approveCourse(courseId, comment, reviewerId);
        return Result.success(course);
    }
    /**
     * 拒绝课程审核 (仅限管理员)
     */
    @PostMapping("/{id}/review/reject")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAnyAuthority('ROLE_ADMIN', 'ROLE_REVIEWER')")
    @Operation(summary = "拒绝课程审核", description = "管理员或审核员拒绝课程审核")
    public Result<CourseVO> rejectCourse(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId,
            @Parameter(description = "拒绝原因") @RequestParam String reason) {
        Long reviewerId = SecurityUtil.getCurrentUserId();
        log.info("拒绝课程审核, 课程ID: {}, 审核员ID: {}", courseId, reviewerId);
        CourseVO course = courseService.rejectCourse(courseId, reason, reviewerId);
        return Result.success(course);
    }
    /**
     * 重新编辑被拒绝的课程
     */
    @PostMapping("/{id}/re-edit")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "重新编辑被拒绝的课程", description = "将被拒绝的课程重新变为草稿状态进行编辑")
    public Result<CourseVO> reEditRejectedCourse(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("重新编辑被拒绝的课程, 课程ID: {}, 机构ID: {}", courseId, institutionId);
        CourseVO course = courseService.reEditRejectedCourse(courseId);
        return Result.success(course);
    }
    /**
     * 搜索课程（公开API，任何人都可以访问）
     */
    @PostMapping("/search")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "搜索课程", description = "根据多种条件搜索已发布的课程")
    public Result<Page<CourseVO>> searchCourses(
            @Valid @RequestBody CourseSearchDTO searchDTO,
            @PageableDefault(size = 10) Pageable pageable) {
        log.info("搜索课程, 关键词: {}, 分类ID: {}, 标签IDs: {}", 
                searchDTO.getKeyword(), searchDTO.getCategoryId(), searchDTO.getTagIds());
        Page<CourseVO> courses = courseService.searchCourses(searchDTO, pageable);
        return Result.success(courses);
    }
    /**
     * 获取热门课程（公开API，任何人都可以访问）
     */
    @GetMapping("/hot")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取热门课程", description = "获取指定数量的热门课程")
    public Result<List<CourseVO>> getHotCourses(
            @Parameter(description = "限制数量") @RequestParam(defaultValue = "10") int limit) {
        log.info("获取热门课程, 限制数量: {}", limit);
        List<CourseVO> courses = courseService.getHotCourses(limit);
        return Result.success(courses);
    }
    /**
     * 获取最新课程（公开API，任何人都可以访问）
     */
    @GetMapping("/latest")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取最新课程", description = "获取指定数量的最新课程")
    public Result<List<CourseVO>> getLatestCourses(
            @Parameter(description = "限制数量") @RequestParam(defaultValue = "10") int limit) {
        log.info("获取最新课程, 限制数量: {}", limit);
        List<CourseVO> courses = courseService.getLatestCourses(limit);
        return Result.success(courses);
    }
    /**
     * 获取课程结构（公开API - 处理付费课程预览）
     * 用于课程页面展示，区分不同付费类型和用户状态
     * - 免费课程：显示全部内容
     * - 付费课程-已购买用户：显示全部内容
     * - 付费课程-未购买用户：只显示免费试学章节内容
     */
    @GetMapping("/{id}/public-structure")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取课程公开结构", description = "返回课程结构，对于付费课程的未购买用户仅返回免费试学章节内容")
    public Result<CourseStructureVO> getPublicCourseStructure(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId,
            @Parameter(description = "用户是否已购买课程") @RequestParam(required = false, defaultValue = "false") boolean isEnrolled) {
        log.info("获取课程公开结构, 课程ID: {}, 是否已购买: {}", courseId, isEnrolled);
        try {
            CourseStructureVO courseStructure = courseService.getPublicCourseStructure(courseId, isEnrolled);
            return Result.success(courseStructure);
        } catch (BusinessException e) {
            return Result.fail(e.getCode(), e.getMessage());
        } catch (Exception e) {
            log.error("获取课程公开结构失败: {}", e.getMessage(), e);
            return Result.fail(500, "获取课程公开结构失败: " + e.getMessage());
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/CourseReviewController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.review.ReviewCreateDTO;
import com.zhangziqi.online_course_mine.model.vo.CourseReviewSectionVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.model.vo.ReviewVO;
import com.zhangziqi.online_course_mine.security.SecurityUtil;
import com.zhangziqi.online_course_mine.service.CourseReviewService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
/**
 * 课程评论控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/courses")
@Tag(name = "课程评论API", description = "课程评论相关接口")
public class CourseReviewController {
    private final CourseReviewService reviewService;
    /**
     * 获取课程评论区
     */
    @GetMapping("/{courseId}/reviews")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取课程评论区", description = "获取课程评论区，包含评分统计和评论列表")
    public Result<CourseReviewSectionVO> getCourseReviewSection(
            @PathVariable @Parameter(description = "课程ID") Long courseId,
            @RequestParam(required = false) @Parameter(description = "页码，从0开始") Integer page,
            @RequestParam(required = false) @Parameter(description = "每页大小") Integer size,
            @RequestParam(required = false) @Parameter(description = "排序方式: newest, highest_rating, lowest_rating") String orderBy) {
        log.info("获取课程评论区, 课程ID: {}, 页码: {}, 每页大小: {}, 排序方式: {}", courseId, page, size, orderBy);
        CourseReviewSectionVO reviewSection = reviewService.getCourseReviewSection(courseId, page, size, orderBy);
        return Result.success(reviewSection);
    }
    /**
     * 创建课程评论
     */
    @PostMapping("/reviews")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("isAuthenticated()")
    @Operation(summary = "创建课程评论", description = "创建或更新课程评论")
    public Result<ReviewVO> createReview(@RequestBody @Valid ReviewCreateDTO reviewDTO) {
        Long userId = SecurityUtil.getCurrentUserId();
        log.info("创建课程评论, 课程ID: {}, 用户ID: {}, 评分: {}", 
                reviewDTO.getCourseId(), userId, reviewDTO.getRating());
        ReviewVO review = reviewService.createReview(reviewDTO, userId);
        return Result.success(review);
    }
    /**
     * 删除课程评论
     */
    @DeleteMapping("/reviews/{reviewId}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("isAuthenticated()")
    @Operation(summary = "删除评论", description = "删除用户自己的评论")
    public Result<Void> deleteReview(@PathVariable @Parameter(description = "评论ID") Long reviewId) {
        Long userId = SecurityUtil.getCurrentUserId();
        log.info("删除课程评论, 评论ID: {}, 用户ID: {}", reviewId, userId);
        reviewService.deleteReview(reviewId, userId);
        return Result.success();
    }
    /**
     * 获取当前用户对课程的评论
     */
    @GetMapping("/{courseId}/reviews/mine")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("isAuthenticated()")
    @Operation(summary = "获取当前用户对课程的评论", description = "获取当前用户对指定课程的评论信息")
    public Result<ReviewVO> getUserReviewOnCourse(@PathVariable @Parameter(description = "课程ID") Long courseId) {
        Long userId = SecurityUtil.getCurrentUserId();
        log.info("获取用户对课程的评论, 课程ID: {}, 用户ID: {}", courseId, userId);
        ReviewVO review = reviewService.getUserReviewOnCourse(userId, courseId);
        return Result.success(review);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/InstitutionAuthController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.InstitutionRegisterDTO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import com.zhangziqi.online_course_mine.service.EmailService;
import com.zhangziqi.online_course_mine.service.InstitutionAuthService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
/**
 * 机构用户注册控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/auth/institution")
@Tag(name = "机构用户认证", description = "机构用户注册相关接口")
public class InstitutionAuthController {
    private final InstitutionAuthService institutionAuthService;
    private final CaptchaService captchaService;
    private final EmailService emailService;
    /**
     * 机构用户注册
     *
     * @param registerDTO 注册参数
     * @return 结果
     */
    @PostMapping("/register")
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(summary = "机构用户注册", description = "使用机构注册码注册机构用户")
    public Result<Void> registerInstitutionMember(@Valid @RequestBody InstitutionRegisterDTO registerDTO) {
        log.info("收到机构用户注册请求: username={}, email={}, institutionCode={}, captchaKey={}", 
                registerDTO.getUsername(), registerDTO.getEmail(), 
                registerDTO.getInstitutionCode(), registerDTO.getCaptchaKey());
        // 验证图形验证码
        boolean captchaValid = captchaService.validateCaptcha(registerDTO.getCaptchaKey(), registerDTO.getCaptchaCode());
        log.info("图形验证码验证结果: {}, key={}, code={}", captchaValid, registerDTO.getCaptchaKey(), registerDTO.getCaptchaCode());
        if (!captchaValid) {
            log.warn("图形验证码验证失败: key={}, code={}", registerDTO.getCaptchaKey(), registerDTO.getCaptchaCode());
            return Result.fail("验证码错误");
        }
        // 验证邮箱验证码
        boolean emailCodeValid = emailService.validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode());
        log.info("邮箱验证码验证结果: {}, email={}, code={}", emailCodeValid, registerDTO.getEmail(), registerDTO.getEmailCode());
        if (!emailCodeValid) {
            log.warn("邮箱验证码验证失败: email={}, code={}", registerDTO.getEmail(), registerDTO.getEmailCode());
            return Result.fail("邮箱验证码错误或已过期");
        }
        log.info("开始处理机构用户注册: username={}, institutionCode={}", registerDTO.getUsername(), registerDTO.getInstitutionCode());
        try {
            institutionAuthService.registerWithInstitutionCode(registerDTO);
            log.info("机构用户注册成功: username={}", registerDTO.getUsername());
            return Result.success();
        } catch (Exception e) {
            log.error("机构用户注册失败: username={}, 原因: {}", registerDTO.getUsername(), e.getMessage(), e);
            return Result.fail(e.getMessage());
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/InstitutionController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplyDTO;
import com.zhangziqi.online_course_mine.model.vo.InstitutionApplicationVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import com.zhangziqi.online_course_mine.service.InstitutionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
/**
 * 机构申请控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/institutions")
@Tag(name = "机构申请", description = "机构申请相关接口")
public class InstitutionController {
    private final InstitutionService institutionService;
    private final CaptchaService captchaService;
    /**
     * 申请创建机构
     *
     * @param applyDTO 申请参数
     * @return 申请ID
     */
    @PostMapping("/apply")
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(summary = "申请创建机构", description = "提交机构入驻申请，需等待审核员审核")
    public Result<String> applyInstitution(@Valid @RequestBody InstitutionApplyDTO applyDTO) {
        // 验证图形验证码
        if (!captchaService.validateCaptcha(applyDTO.getCaptchaKey(), applyDTO.getCaptchaCode())) {
            return Result.fail("验证码错误");
        }
        log.info("申请创建机构: {}", applyDTO.getName());
        String applicationId = institutionService.applyInstitution(applyDTO);
        return Result.success(applicationId);
    }
    /**
     * 查询申请状态
     *
     * @param applicationId 申请ID
     * @param email 联系邮箱
     * @return 申请状态
     */
    @GetMapping("/application-status")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "查询申请状态", description = "通过申请ID和邮箱查询机构申请状态")
    public Result<InstitutionApplicationVO> getApplicationStatus(
            @Parameter(description = "申请ID") @RequestParam String applicationId,
            @Parameter(description = "联系邮箱") @RequestParam String email) {
        log.info("查询申请状态: {}, {}", applicationId, email);
        return Result.success(
            institutionService.getApplicationStatus(applicationId, email)
        );
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/InstitutionMemberController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.InstitutionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
/**
 * 机构成员管理控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/institutions/members")
@PreAuthorize("hasRole('INSTITUTION')")
@Tag(name = "机构成员管理", description = "机构成员管理相关接口")
public class InstitutionMemberController {
    private final InstitutionService institutionService;
    /**
     * 获取机构注册码
     *
     * @param authentication 认证信息
     * @return 注册码
     */
    @GetMapping("/register-code")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取机构注册码", description = "获取当前用户所属机构的注册码")
    public Result<String> getRegisterCode(Authentication authentication) {
        String username = authentication.getName();
        log.info("获取机构注册码: {}", username);
        return Result.success(institutionService.getInstitutionRegisterCode(username));
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/MediaController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.media.MediaUploadInitDTO;
import com.zhangziqi.online_course_mine.model.dto.media.UploadInitiationVO;
import com.zhangziqi.online_course_mine.model.dto.media.CompleteUploadDTO;
import com.zhangziqi.online_course_mine.model.vo.MediaVO;
import com.zhangziqi.online_course_mine.model.vo.QuotaInfoVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.security.SecurityUtil;
import com.zhangziqi.online_course_mine.service.MediaService;
import com.zhangziqi.online_course_mine.service.StorageQuotaService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * 媒体控制器
 * 处理媒体上传和管理请求
 */
@Slf4j
@RestController
@RequestMapping("/api/media")
@RequiredArgsConstructor
@Tag(name = "媒体管理", description = "媒体文件上传、管理相关操作")
public class MediaController {
    private final MediaService mediaService;
    private final StorageQuotaService storageQuotaService;
    /**
     * 初始化上传
     */
    @PostMapping("/initiate-upload")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "初始化上传", description = "初始化分片上传，返回上传ID和预签名URL")
    public Result<UploadInitiationVO> initiateUpload(@Valid @RequestBody MediaUploadInitDTO dto) {
        // 获取当前用户ID和机构ID
        Long userId = SecurityUtil.getCurrentUserId();
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("初始化上传, 用户ID: {}, 机构ID: {}, 文件名: {}, 文件大小: {}", 
                userId, institutionId, dto.getFilename(), dto.getFileSize());
        UploadInitiationVO result = mediaService.initiateUpload(dto, institutionId, userId);
        return Result.success(result);
    }
    /**
     * 完成上传
     */
    @PostMapping("/{id}/complete")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "完成上传", description = "通知服务器所有分片已上传完成，请求合并分片")
    public Result<MediaVO> completeUpload(
            @Parameter(description = "媒体ID") @PathVariable("id") Long mediaId,
            @Valid @RequestBody CompleteUploadDTO dto) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("完成上传, mediaId: {}, institutionId: {}, uploadId: {}, completedParts: {}", 
                mediaId, institutionId, dto.getUploadId(), dto.getCompletedParts().size());
        MediaVO media = mediaService.completeUpload(mediaId, institutionId, dto);
        return Result.success(media);
    }
    /**
     * 取消上传
     */
    @DeleteMapping("/{id}/cancel")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "取消上传", description = "取消上传并清理已上传的分片")
    public Result<Void> cancelUpload(
            @Parameter(description = "媒体ID") @PathVariable("id") Long mediaId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("取消上传, 媒体ID: {}, 机构ID: {}", mediaId, institutionId);
        mediaService.cancelUpload(mediaId, institutionId);
        return Result.success();
    }
    /**
     * 获取媒体信息
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取媒体信息", description = "获取指定媒体的详细信息")
    public Result<MediaVO> getMediaInfo(
            @Parameter(description = "媒体ID") @PathVariable("id") Long mediaId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        Long userId = SecurityUtil.getCurrentUserId();
        log.info("获取媒体信息, mediaId: {}, institutionId: {}, userId: {}, 请求路径: {}", 
                mediaId, institutionId, userId, "/api/media/" + mediaId);
        try {
            MediaVO media = mediaService.getMediaInfo(mediaId, institutionId);
            log.info("成功获取媒体信息: {}", media);
            return Result.success(media);
        } catch (Exception e) {
            log.error("获取媒体信息失败, mediaId: {}, institutionId: {}, error: {}", 
                    mediaId, institutionId, e.getMessage());
            throw e;
        }
    }
    /**
     * 获取媒体访问URL
     */
    @GetMapping("/{id}/access")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取媒体访问URL", description = "获取媒体文件的临时访问URL")
    public Result<Map<String, String>> getMediaAccessUrl(
            @Parameter(description = "媒体ID") @PathVariable("id") Long mediaId,
            @Parameter(description = "URL有效期（分钟）") @RequestParam(required = false, defaultValue = "60") Long expirationMinutes) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        String url = mediaService.getMediaAccessUrl(mediaId, institutionId, expirationMinutes);
        Map<String, String> result = new HashMap<>();
        result.put("accessUrl", url);
        return Result.success(result);
    }
    /**
     * 获取媒体列表
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取媒体列表", description = "分页获取机构的媒体文件列表")
    public Result<Page<MediaVO>> getMediaList(
            @PageableDefault(size = 10) Pageable pageable) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        Page<MediaVO> mediaList = mediaService.getMediaList(institutionId, pageable);
        return Result.success(mediaList);
    }
    /**
     * 获取存储配额信息
     */
    @GetMapping("/quota")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取存储配额信息", description = "获取机构的存储配额使用情况")
    public Result<List<QuotaInfoVO>> getStorageQuota() {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        List<QuotaInfoVO> quotaInfo = storageQuotaService.getAllQuotas(institutionId);
        return Result.success(quotaInfo);
    }
    /**
     * 删除媒体文件
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "删除媒体文件", description = "删除指定的媒体文件并释放存储配额")
    public Result<Void> deleteMedia(
            @Parameter(description = "媒体ID") @PathVariable("id") Long mediaId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("删除媒体文件, mediaId: {}, institutionId: {}", mediaId, institutionId);
        mediaService.deleteMedia(mediaId, institutionId);
        return Result.success();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/OrderController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.order.OrderCreateDTO;
import com.zhangziqi.online_course_mine.model.dto.order.OrderRefundDTO;
import com.zhangziqi.online_course_mine.model.vo.OrderVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.security.SecurityUtil;
import com.zhangziqi.online_course_mine.service.OrderService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
/**
 * 订单控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/orders")
@Tag(name = "订单接口", description = "订单创建、查询、退款等接口")
public class OrderController {
    private final OrderService orderService;
    /**
     * 创建订单
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(summary = "创建订单", description = "创建课程订单")
    public Result<OrderVO> createOrder(@Valid @RequestBody OrderCreateDTO dto) {
        Long userId = SecurityUtil.getCurrentUserId();
        log.info("创建订单, 用户ID: {}, 课程ID: {}", userId, dto.getCourseId());
        OrderVO orderVO = orderService.createOrder(dto.getCourseId(), userId);
        return Result.success(orderVO);
    }
    /**
     * 获取用户订单列表
     */
    @GetMapping("/my")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取当前用户订单列表", description = "获取已登录用户的所有订单")
    public Result<List<OrderVO>> getUserOrders() {
        Long userId = SecurityUtil.getCurrentUserId();
        log.info("获取用户订单列表, 用户ID: {}", userId);
        List<OrderVO> orders = orderService.getUserOrders(userId);
        return Result.success(orders);
    }
    /**
     * 分页获取用户订单
     */
    @GetMapping("/my/page")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "分页获取当前用户订单", description = "分页获取已登录用户的订单")
    public Result<Page<OrderVO>> getUserOrdersPage(
            @Parameter(description = "页码") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "每页条数") @RequestParam(defaultValue = "10") int size) {
        Long userId = SecurityUtil.getCurrentUserId();
        log.info("分页获取用户订单, 用户ID: {}, 页码: {}, 每页条数: {}", userId, page, size);
        Pageable pageable = PageRequest.of(page, size);
        Page<OrderVO> orderPage = orderService.getUserOrders(userId, pageable);
        return Result.success(orderPage);
    }
    /**
     * 根据ID获取订单详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取订单详情", description = "根据订单ID获取订单详情")
    public Result<OrderVO> getOrderById(@Parameter(description = "订单ID") @PathVariable Long id) {
        Long userId = SecurityUtil.getCurrentUserId();
        log.info("获取订单详情, 订单ID: {}, 用户ID: {}", id, userId);
        OrderVO orderVO = orderService.getOrderById(id);
        // 验证订单所有者或管理员权限
        if (!orderVO.getUserId().equals(userId) && !SecurityUtil.isAdmin()) {
            return Result.fail(403, "无权访问此订单");
        }
        return Result.success(orderVO);
    }
    /**
     * 申请退款
     */
    @PostMapping("/{id}/refund")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "申请退款", description = "对指定订单申请退款")
    public Result<OrderVO> refundOrder(
            @Parameter(description = "订单ID") @PathVariable Long id, 
            @Valid @RequestBody OrderRefundDTO dto) {
        Long userId = SecurityUtil.getCurrentUserId();
        log.info("申请退款, 订单ID: {}, 用户ID: {}, 退款原因: {}", id, userId, dto.getRefundReason());
        OrderVO orderVO = orderService.refundOrder(id, dto, userId);
        return Result.success(orderVO);
    }
    /**
     * 支付宝异步通知
     */
    @PostMapping("/alipay/notify")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "支付宝异步通知", description = "处理支付宝异步通知")
    public String alipayNotify(@RequestParam Map<String, String> params) {
        log.info("接收到支付宝异步通知: {}", params);
        return orderService.handleAlipayNotify(params);
    }
    /**
     * 获取机构订单列表（机构管理员）
     */
    @GetMapping("/institution")
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取机构订单列表", description = "获取当前用户所属机构的所有订单")
    public Result<List<OrderVO>> getInstitutionOrders() {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取机构订单列表, 机构ID: {}", institutionId);
        List<OrderVO> orders = orderService.getInstitutionOrders(institutionId);
        return Result.success(orders);
    }
    /**
     * 分页获取机构订单（机构管理员）
     */
    @GetMapping("/institution/page")
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "分页获取机构订单", description = "分页获取当前用户所属机构的订单")
    public Result<Page<OrderVO>> getInstitutionOrdersPage(
            @Parameter(description = "页码") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "每页条数") @RequestParam(defaultValue = "10") int size) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("分页获取机构订单, 机构ID: {}, 页码: {}, 每页条数: {}", institutionId, page, size);
        Pageable pageable = PageRequest.of(page, size);
        Page<OrderVO> orderPage = orderService.getInstitutionOrders(institutionId, pageable);
        return Result.success(orderPage);
    }
    /**
     * 获取机构收入统计（机构管理员）
     */
    @GetMapping("/institution/income")
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取机构收入统计", description = "获取当前用户所属机构的收入统计")
    public Result<Map<String, BigDecimal>> getInstitutionIncome() {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取机构收入统计, 机构ID: {}", institutionId);
        BigDecimal totalIncome = orderService.calculateInstitutionTotalIncome(institutionId);
        BigDecimal totalRefund = orderService.calculateInstitutionTotalRefund(institutionId);
        BigDecimal netIncome = orderService.calculateInstitutionNetIncome(institutionId);
        Map<String, BigDecimal> incomeStats = new HashMap<>();
        incomeStats.put("totalIncome", totalIncome);
        incomeStats.put("totalRefund", totalRefund);
        incomeStats.put("netIncome", netIncome);
        return Result.success(incomeStats);
    }
    /**
     * 获取所有订单（平台管理员）
     */
    @GetMapping("/admin/all")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取所有订单", description = "平台管理员获取所有订单")
    public Result<List<OrderVO>> getAllOrders() {
        log.info("管理员获取所有订单");
        List<OrderVO> orders = orderService.getAllOrders();
        return Result.success(orders);
    }
    /**
     * 分页获取所有订单（平台管理员）
     */
    @GetMapping("/admin/page")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "分页获取所有订单", description = "平台管理员分页获取所有订单")
    public Result<Page<OrderVO>> getAllOrdersPage(
            @Parameter(description = "页码") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "每页条数") @RequestParam(defaultValue = "10") int size) {
        log.info("管理员分页获取所有订单, 页码: {}, 每页条数: {}", page, size);
        Pageable pageable = PageRequest.of(page, size);
        Page<OrderVO> orderPage = orderService.getAllOrders(pageable);
        return Result.success(orderPage);
    }
    /**
     * 处理退款申请（机构管理员或平台管理员）
     */
    @PostMapping("/admin/{id}/process-refund")
    @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'INSTITUTION_ADMIN')")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "处理退款申请", description = "处理订单退款申请")
    public Result<OrderVO> processRefund(
            @Parameter(description = "订单ID") @PathVariable Long id,
            @Parameter(description = "是否批准") @RequestParam boolean approved) {
        Long operatorId = SecurityUtil.getCurrentUserId();
        log.info("处理退款申请, 订单ID: {}, 操作人ID: {}, 是否批准: {}", id, operatorId, approved);
        OrderVO orderVO = orderService.processRefund(id, approved, operatorId);
        return Result.success(orderVO);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/PermissionController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.PermissionDTO;
import com.zhangziqi.online_course_mine.model.vo.PermissionVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.PermissionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;
/**
 * 权限管理控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/permissions")
@Tag(name = "权限管理", description = "权限查询、创建、编辑、删除等功能")
public class PermissionController {
    private final PermissionService permissionService;
    /**
     * 获取权限列表
     *
     * @return 权限列表
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "获取权限列表", description = "获取所有权限列表")
    public Result<List<PermissionVO>> getPermissionList() {
        log.info("获取权限列表");
        List<PermissionVO> permissionList = permissionService.getPermissionList();
        return Result.success(permissionList);
    }
    /**
     * 获取权限详情
     *
     * @param id 权限ID
     * @return 权限详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "获取权限详情", description = "根据权限ID获取权限详情")
    public Result<PermissionVO> getPermissionById(@Parameter(description = "权限ID") @PathVariable("id") Long id) {
        log.info("获取权限详情: {}", id);
        PermissionVO permissionVO = permissionService.getPermissionById(id);
        return Result.success(permissionVO);
    }
    /**
     * 创建权限
     *
     * @param permissionDTO 权限信息
     * @return 创建后的权限信息
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "创建权限", description = "创建新权限")
    public Result<PermissionVO> createPermission(@Valid @RequestBody PermissionDTO permissionDTO) {
        log.info("创建权限: {}", permissionDTO);
        PermissionVO permissionVO = permissionService.createPermission(permissionDTO);
        return Result.success(permissionVO);
    }
    /**
     * 更新权限
     *
     * @param id            权限ID
     * @param permissionDTO 权限信息
     * @return 更新后的权限信息
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "更新权限", description = "更新权限信息")
    public Result<PermissionVO> updatePermission(
            @Parameter(description = "权限ID") @PathVariable("id") Long id,
            @Valid @RequestBody PermissionDTO permissionDTO) {
        log.info("更新权限: {}, {}", id, permissionDTO);
        PermissionVO permissionVO = permissionService.updatePermission(id, permissionDTO);
        return Result.success(permissionVO);
    }
    /**
     * 删除权限
     *
     * @param id 权限ID
     * @return 无
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "删除权限", description = "根据权限ID删除权限")
    public Result<Void> deletePermission(@Parameter(description = "权限ID") @PathVariable("id") Long id) {
        log.info("删除权限: {}", id);
        permissionService.deletePermission(id);
        return Result.success();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/PreviewResourceController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.vo.MediaVO;
import com.zhangziqi.online_course_mine.model.vo.QuestionGroupVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.model.vo.SectionVO;
import com.zhangziqi.online_course_mine.security.SecurityUtil;
import com.zhangziqi.online_course_mine.service.MediaService;
import com.zhangziqi.online_course_mine.service.QuestionGroupService;
import com.zhangziqi.online_course_mine.service.SectionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import java.util.Set;
/**
 * 预览资源控制器
 * 用于课程预览时获取媒体资源和题组资源
 * 支持多种用户角色：管理员、审核员、学员、匿名访问
 */
@Slf4j
@RestController
@RequestMapping("/api/preview/resources")
@RequiredArgsConstructor
@Tag(name = "预览资源", description = "预览模式下获取媒体资源和题组资源相关操作")
public class PreviewResourceController {
    private final SectionService sectionService;
    private final MediaService mediaService;
    private final QuestionGroupService questionGroupService;
    /**
     * 获取小节媒体资源（预览模式）
     * 支持多种用户角色：
     * - 管理员/审核员：直接访问
     * - 学员：需验证是否有权限（已购买或可试看）
     * - 匿名用户：需通过有效的预览令牌访问
     */
    @GetMapping("/sections/{id}/media")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取小节媒体资源", description = "获取指定小节的媒体资源，包含临时访问URL（支持多种角色）")
    public Result<MediaVO> getSectionMedia(
            @Parameter(description = "小节ID") @PathVariable("id") Long sectionId) {
        // 获取小节信息
        SectionVO section = sectionService.getSectionById(sectionId);
        if (!"MEDIA".equals(section.getResourceTypeDiscriminator())) {
            log.warn("小节不是媒体类型, 小节ID: {}, 资源类型: {}", sectionId, section.getResourceTypeDiscriminator());
            throw new ResourceNotFoundException("小节非媒体类型资源");
        }
        Long mediaId = section.getMediaId();
        if (mediaId == null) {
            log.warn("小节未关联媒体资源, 小节ID: {}", sectionId);
            throw new ResourceNotFoundException("小节未关联媒体资源");
        }
        // 获取媒体资源（包含临时访问URL）
        MediaVO mediaVO = mediaService.getMediaByIdForPreview(mediaId);
        log.info("成功获取预览媒体资源, 小节ID: {}, 媒体ID: {}", sectionId, mediaId);
        return Result.success(mediaVO);
    }
    /**
     * 获取小节题组（预览模式）
     * 支持多种用户角色：
     * - 管理员/审核员：直接访问
     * - 学员：需验证是否有权限（已购买或可试看）
     * - 匿名用户：需通过有效的预览令牌访问
     */
    @GetMapping("/sections/{id}/question-group")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取小节题组", description = "获取指定小节的题组，包含详细题目（支持多种角色）")
    public Result<QuestionGroupVO> getSectionQuestionGroup(
            @Parameter(description = "小节ID") @PathVariable("id") Long sectionId) {
        // 获取小节信息
        SectionVO section = sectionService.getSectionById(sectionId);
        if (!"QUESTION_GROUP".equals(section.getResourceTypeDiscriminator())) {
            log.warn("小节不是题组类型, 小节ID: {}, 资源类型: {}", sectionId, section.getResourceTypeDiscriminator());
            throw new ResourceNotFoundException("小节非题组类型资源");
        }
        Long questionGroupId = section.getQuestionGroupId();
        if (questionGroupId == null) {
            log.warn("小节未关联题组资源, 小节ID: {}", sectionId);
            throw new ResourceNotFoundException("小节未关联题组资源");
        }
        // 获取题组详情，包含题目
        QuestionGroupVO questionGroupVO = questionGroupService.getGroupByIdForPreview(questionGroupId, true);
        log.info("成功获取预览题组资源, 小节ID: {}, 题组ID: {}", sectionId, questionGroupId);
        return Result.success(questionGroupVO);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/QuestionController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.QuestionDTO;
import com.zhangziqi.online_course_mine.model.vo.QuestionVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.security.SecurityUtil;
import com.zhangziqi.online_course_mine.service.QuestionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
/**
 * 题目管理控制器
 */
@Slf4j
@RestController
@RequestMapping("/api/v1/questions")
@RequiredArgsConstructor
@Tag(name = "题目管理", description = "题目创建、管理相关操作")
public class QuestionController {
    private final QuestionService questionService;
    /**
     * 创建题目
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "创建题目", description = "创建新的题目，包括单选题和多选题")
    public Result<QuestionVO> createQuestion(@Valid @RequestBody QuestionDTO questionDTO) {
        // 获取当前用户ID和机构ID
        Long currentUserId = SecurityUtil.getCurrentUserId();
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        // 确保DTO中的机构ID与当前用户的机构ID一致
        questionDTO.setInstitutionId(institutionId);
        log.info("创建题目, 用户ID: {}, 机构ID: {}, 题目类型: {}", 
                currentUserId, institutionId, questionDTO.getType());
        QuestionVO question = questionService.createQuestion(questionDTO, currentUserId);
        return Result.success(question);
    }
    /**
     * 更新题目
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "更新题目", description = "更新现有题目的内容和选项")
    public Result<QuestionVO> updateQuestion(
            @Parameter(description = "题目ID") @PathVariable Long id, 
            @Valid @RequestBody QuestionDTO questionDTO) {
        // 获取当前用户ID和机构ID
        Long currentUserId = SecurityUtil.getCurrentUserId();
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        // 确保DTO中的ID与路径参数一致
        if (!id.equals(questionDTO.getId())) {
            return Result.fail(HttpStatus.BAD_REQUEST.value(), "请求参数不一致");
        }
        // 确保DTO中的机构ID与当前用户的机构ID一致
        questionDTO.setInstitutionId(institutionId);
        log.info("更新题目, ID: {}, 用户ID: {}, 机构ID: {}", 
                id, currentUserId, institutionId);
        QuestionVO updatedQuestion = questionService.updateQuestion(questionDTO, currentUserId);
        return Result.success(updatedQuestion);
    }
    /**
     * 获取题目详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取题目详情", description = "获取指定题目的详细信息")
    public Result<QuestionVO> getQuestion(
            @Parameter(description = "题目ID") @PathVariable Long id) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取题目详情, ID: {}, 机构ID: {}", id, institutionId);
        QuestionVO question = questionService.getQuestionById(id, institutionId);
        return Result.success(question);
    }
    /**
     * 删除题目
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "删除题目", description = "删除指定的题目")
    public Result<Void> deleteQuestion(
            @Parameter(description = "题目ID") @PathVariable Long id) {
        Long currentUserId = SecurityUtil.getCurrentUserId();
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("删除题目, ID: {}, 用户ID: {}, 机构ID: {}", 
                id, currentUserId, institutionId);
        questionService.deleteQuestion(id, institutionId, currentUserId);
        return Result.success();
    }
    /**
     * 分页查询题目列表
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取题目列表", description = "分页获取题目列表，可按类型、难度、关键词和标签筛选")
    public Result<Page<QuestionVO>> getQuestions(
            @Parameter(description = "题目类型") @RequestParam(required = false) Integer type,
            @Parameter(description = "难度级别") @RequestParam(required = false) Integer difficulty,
            @Parameter(description = "关键词") @RequestParam(required = false) String keyword,
            @Parameter(description = "标签ID列表，支持数组或逗号分隔的字符串") @RequestParam(required = false) String tagIds,
            @PageableDefault(size = 10) Pageable pageable) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        // 处理tagIds参数（支持逗号分隔的字符串）
        List<Long> tagIdList = null;
        if (tagIds != null && !tagIds.isEmpty()) {
            tagIdList = Arrays.stream(tagIds.split(","))
                    .map(String::trim)
                    .filter(s -> !s.isEmpty())
                    .map(Long::parseLong)
                    .collect(Collectors.toList());
        }
        log.info("获取题目列表, 机构ID: {}, 类型: {}, 难度: {}, 关键词: {}, 标签IDs: {}", 
                institutionId, type, difficulty, keyword, tagIdList);
        Page<QuestionVO> questions = questionService.getQuestions(
                institutionId, type, difficulty, keyword, tagIdList, pageable);
        return Result.success(questions);
    }
    /**
     * 随机获取题目
     */
    @GetMapping("/random")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "随机获取题目", description = "随机获取指定数量的题目，可按类型筛选")
    public Result<List<QuestionVO>> getRandomQuestions(
            @Parameter(description = "题目类型") @RequestParam Integer type,
            @Parameter(description = "题目数量") @RequestParam(defaultValue = "5") int count) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("随机获取题目, 机构ID: {}, 类型: {}, 数量: {}", 
                institutionId, type, count);
        List<QuestionVO> questions = questionService.getRandomQuestions(institutionId, type, count);
        return Result.success(questions);
    }
    /**
     * 检查题目是否被引用
     */
    @GetMapping("/{id}/check-references")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "检查题目引用", description = "检查题目是否被题组或其他实体引用")
    public Result<Map<String, Object>> checkQuestionReferences(
            @Parameter(description = "题目ID") @PathVariable Long id) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("检查题目引用关系, ID: {}, 机构ID: {}", id, institutionId);
        // 检查题目是否被题组引用
        boolean isReferencedByGroups = questionService.isQuestionReferencedByGroups(id, institutionId);
        Map<String, Object> result = new HashMap<>();
        result.put("isReferenced", isReferencedByGroups);
        result.put("references", Collections.singletonMap("groups", isReferencedByGroups));
        return Result.success(result);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/QuestionGroupController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.QuestionGroupDTO;
import com.zhangziqi.online_course_mine.model.dto.QuestionGroupItemDTO;
import com.zhangziqi.online_course_mine.model.vo.QuestionGroupItemVO;
import com.zhangziqi.online_course_mine.model.vo.QuestionGroupVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.security.SecurityUtil;
import com.zhangziqi.online_course_mine.service.QuestionGroupService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;
/**
 * 题目组控制器
 * 处理题目组的创建、更新、查询和管理请求
 */
@Slf4j
@RestController
@RequestMapping("/api/questions/groups")
@RequiredArgsConstructor
@Tag(name = "题目组管理", description = "题目组的创建、更新、查询和管理相关操作")
public class QuestionGroupController {
    private final QuestionGroupService groupService;
    /**
     * 创建题目组
     */
    @PostMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "创建题目组", description = "创建一个新的题目组")
    public Result<QuestionGroupVO> createGroup(@Valid @RequestBody QuestionGroupDTO groupDTO) {
        Long userId = SecurityUtil.getCurrentUserId();
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("创建题目组, 用户ID: {}, 机构ID: {}, 题目组名称: {}", 
                userId, institutionId, groupDTO.getName());
        // 设置机构ID
        groupDTO.setInstitutionId(institutionId);
        QuestionGroupVO groupVO = groupService.createGroup(groupDTO, userId);
        return Result.success(groupVO);
    }
    /**
     * 更新题目组
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "更新题目组", description = "更新指定ID的题目组信息")
    public Result<QuestionGroupVO> updateGroup(
            @Parameter(description = "题目组ID") @PathVariable("id") Long id,
            @Valid @RequestBody QuestionGroupDTO groupDTO) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("更新题目组, 题目组ID: {}, 机构ID: {}, 题目组名称: {}", 
                id, institutionId, groupDTO.getName());
        // 设置题目组ID和机构ID
        groupDTO.setId(id);
        groupDTO.setInstitutionId(institutionId);
        QuestionGroupVO groupVO = groupService.updateGroup(groupDTO);
        return Result.success(groupVO);
    }
    /**
     * 获取题目组详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取题目组详情", description = "获取指定ID的题目组详细信息")
    public Result<QuestionGroupVO> getGroup(
            @Parameter(description = "题目组ID") @PathVariable("id") Long id,
            @Parameter(description = "是否包含题目项") @RequestParam(required = false, defaultValue = "true") boolean includeItems) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取题目组详情, 题目组ID: {}, 机构ID: {}, 包含题目项: {}", 
                id, institutionId, includeItems);
        QuestionGroupVO groupVO = groupService.getGroupById(id, institutionId, includeItems);
        return Result.success(groupVO);
    }
    /**
     * 删除题目组
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "删除题目组", description = "删除指定ID的题目组")
    public Result<Void> deleteGroup(
            @Parameter(description = "题目组ID") @PathVariable("id") Long id) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("删除题目组, 题目组ID: {}, 机构ID: {}", id, institutionId);
        groupService.deleteGroup(id, institutionId);
        return Result.success();
    }
    /**
     * 分页查询题目组列表
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取题目组列表", description = "分页获取机构的题目组列表")
    public Result<Page<QuestionGroupVO>> getGroups(
            @Parameter(description = "关键词搜索") @RequestParam(required = false) String keyword,
            @Parameter(description = "页码") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "每页条数") @RequestParam(defaultValue = "10") int size) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取题目组列表, 机构ID: {}, 关键词: {}, 页码: {}, 每页条数: {}", 
                institutionId, keyword, page, size);
        Pageable pageable = PageRequest.of(page, size);
        Page<QuestionGroupVO> groupPage = groupService.getGroups(institutionId, keyword, pageable);
        return Result.success(groupPage);
    }
    /**
     * 获取所有题目组
     */
    @GetMapping("/all")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取所有题目组", description = "获取机构的所有题目组")
    public Result<List<QuestionGroupVO>> getAllGroups() {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取所有题目组, 机构ID: {}", institutionId);
        List<QuestionGroupVO> groups = groupService.getAllGroups(institutionId);
        return Result.success(groups);
    }
    /**
     * 为题目组添加题目
     */
    @PostMapping("/items")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "添加题目到题目组", description = "向题目组中添加题目")
    public Result<QuestionGroupItemVO> addQuestionToGroup(@Valid @RequestBody QuestionGroupItemDTO itemDTO) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("添加题目到题目组, 题目组ID: {}, 题目ID: {}, 机构ID: {}", 
                itemDTO.getGroupId(), itemDTO.getQuestionId(), institutionId);
        QuestionGroupItemVO itemVO = groupService.addQuestionToGroup(itemDTO);
        return Result.success(itemVO);
    }
    /**
     * 更新题目组项
     */
    @PutMapping("/items/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "更新题目组项", description = "更新题目组中的题目项信息")
    public Result<QuestionGroupItemVO> updateGroupItem(
            @Parameter(description = "题目组项ID") @PathVariable("id") Long id,
            @Valid @RequestBody QuestionGroupItemDTO itemDTO) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("更新题目组项, 题目组项ID: {}, 题目组ID: {}, 机构ID: {}", 
                id, itemDTO.getGroupId(), institutionId);
        itemDTO.setId(id);
        QuestionGroupItemVO itemVO = groupService.updateGroupItem(itemDTO);
        return Result.success(itemVO);
    }
    /**
     * 从题目组移除题目
     */
    @DeleteMapping("/{groupId}/items/{itemId}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "从题目组移除题目", description = "从题目组中移除指定的题目项")
    public Result<Void> removeQuestionFromGroup(
            @Parameter(description = "题目组ID") @PathVariable("groupId") Long groupId,
            @Parameter(description = "题目组项ID") @PathVariable("itemId") Long itemId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("从题目组移除题目, 题目组ID: {}, 题目组项ID: {}, 机构ID: {}", 
                groupId, itemId, institutionId);
        groupService.removeQuestionFromGroup(groupId, itemId, institutionId);
        return Result.success();
    }
    /**
     * 获取题目组中的所有题目
     */
    @GetMapping("/{groupId}/items")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取题目组中的所有题目", description = "获取指定题目组中的所有题目项")
    public Result<List<QuestionGroupItemVO>> getGroupItems(
            @Parameter(description = "题目组ID") @PathVariable("groupId") Long groupId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取题目组中的所有题目, 题目组ID: {}, 机构ID: {}", groupId, institutionId);
        List<QuestionGroupItemVO> items = groupService.getGroupItems(groupId, institutionId);
        return Result.success(items);
    }
    /**
     * 更新题目组中题目的顺序
     */
    @PutMapping("/{groupId}/items/order")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "更新题目顺序", description = "更新题目组中题目的顺序")
    public Result<Boolean> updateItemsOrder(
            @Parameter(description = "题目组ID") @PathVariable("groupId") Long groupId,
            @RequestBody List<QuestionGroupItemDTO> itemDTOs) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("更新题目顺序, 题目组ID: {}, 机构ID: {}, 题目项数量: {}", 
                groupId, institutionId, itemDTOs.size());
        boolean result = groupService.updateItemsOrder(groupId, itemDTOs, institutionId);
        return Result.success(result);
    }
    /**
     * 批量添加题目到题目组
     */
    @PostMapping("/{groupId}/questions")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "批量添加题目到题目组", description = "向题目组中批量添加多个题目")
    public Result<List<QuestionGroupItemVO>> addQuestionsToGroup(
            @Parameter(description = "题目组ID") @PathVariable("groupId") Long groupId,
            @RequestBody List<Long> questionIds) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("批量添加题目到题目组, 题目组ID: {}, 题目数量: {}, 机构ID: {}", 
                groupId, questionIds.size(), institutionId);
        List<QuestionGroupItemVO> items = groupService.addQuestionsToGroup(groupId, questionIds, institutionId);
        return Result.success(items);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/QuestionImportController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.vo.QuestionImportResultVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.security.SecurityUtil;
import com.zhangziqi.online_course_mine.service.QuestionImportService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
/**
 * 试题导入控制器
 */
@RestController
@RequestMapping("/api/questions/import")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "试题导入", description = "试题批量导入相关接口")
public class QuestionImportController {
    private final QuestionImportService questionImportService;
    @Value("${question.import.default-batch-size:50}")
    private Integer defaultBatchSize;
    /**
     * 下载试题导入模板
     */
    @GetMapping("/template")
    @Operation(summary = "下载试题导入模板", description = "下载批量导入试题的Excel模板文件")
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    public void downloadTemplate(HttpServletResponse response) throws IOException {
        questionImportService.generateExcelTemplate(response);
    }
    /**
     * 导入试题Excel
     */
    @PostMapping
    @Operation(summary = "导入试题", description = "批量导入试题Excel文件")
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    public Result<QuestionImportResultVO> importQuestions(
            @Parameter(description = "Excel文件", required = true)
            @RequestParam("file") MultipartFile file,
            @Parameter(description = "机构ID", required = true)
            @RequestParam("institutionId") Long institutionId,
            @Parameter(description = "批处理大小，默认为配置中的值")
            @RequestParam(value = "batchSize", required = false) Integer batchSize) throws IOException {
        // 获取当前用户ID
        Long userId = SecurityUtil.getCurrentUserId();
        // 如果未指定批处理大小，使用默认值
        Integer actualBatchSize = batchSize != null ? batchSize : defaultBatchSize;
        // 执行导入
        QuestionImportResultVO result = questionImportService.importQuestions(
                file, institutionId, userId, actualBatchSize);
        return Result.success(result);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/QuestionTagController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.QuestionTagDTO;
import com.zhangziqi.online_course_mine.model.vo.QuestionTagVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.security.SecurityUtil;
import com.zhangziqi.online_course_mine.service.QuestionTagService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;
/**
 * 题目标签控制器
 * 处理题目标签的创建、更新、查询和管理请求
 */
@Slf4j
@RestController
@RequestMapping("/api/questions/tags")
@RequiredArgsConstructor
@Tag(name = "题目标签管理", description = "题目标签的创建、更新、查询和管理相关操作")
public class QuestionTagController {
    private final QuestionTagService tagService;
    /**
     * 创建标签
     */
    @PostMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "创建标签", description = "创建一个新的题目标签")
    public Result<QuestionTagVO> createTag(@Valid @RequestBody QuestionTagDTO tagDTO) {
        Long userId = SecurityUtil.getCurrentUserId();
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("创建标签, 用户ID: {}, 机构ID: {}, 标签名称: {}", 
                userId, institutionId, tagDTO.getName());
        // 设置机构ID
        tagDTO.setInstitutionId(institutionId);
        QuestionTagVO tagVO = tagService.createTag(tagDTO, userId);
        return Result.success(tagVO);
    }
    /**
     * 更新标签
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "更新标签", description = "更新指定ID的标签信息")
    public Result<QuestionTagVO> updateTag(
            @Parameter(description = "标签ID") @PathVariable("id") Long id,
            @Valid @RequestBody QuestionTagDTO tagDTO) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("更新标签, 标签ID: {}, 机构ID: {}, 标签名称: {}", 
                id, institutionId, tagDTO.getName());
        // 设置标签ID和机构ID
        tagDTO.setId(id);
        tagDTO.setInstitutionId(institutionId);
        QuestionTagVO tagVO = tagService.updateTag(tagDTO);
        return Result.success(tagVO);
    }
    /**
     * 获取标签详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取标签详情", description = "获取指定ID的标签详细信息")
    public Result<QuestionTagVO> getTag(
            @Parameter(description = "标签ID") @PathVariable("id") Long id) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取标签详情, 标签ID: {}, 机构ID: {}", id, institutionId);
        QuestionTagVO tagVO = tagService.getTagById(id, institutionId);
        return Result.success(tagVO);
    }
    /**
     * 删除标签
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "删除标签", description = "删除指定ID的标签")
    public Result<Void> deleteTag(
            @Parameter(description = "标签ID") @PathVariable("id") Long id) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("删除标签, 标签ID: {}, 机构ID: {}", id, institutionId);
        tagService.deleteTag(id, institutionId);
        return Result.success();
    }
    /**
     * 分页查询标签列表
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取标签列表", description = "分页获取机构的标签列表")
    public Result<Page<QuestionTagVO>> getTags(
            @Parameter(description = "关键词搜索") @RequestParam(required = false) String keyword,
            @Parameter(description = "页码") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "每页条数") @RequestParam(defaultValue = "10") int size) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取标签列表, 机构ID: {}, 关键词: {}, 页码: {}, 每页条数: {}", 
                institutionId, keyword, page, size);
        Pageable pageable = PageRequest.of(page, size);
        Page<QuestionTagVO> tagPage = tagService.getTags(institutionId, keyword, pageable);
        return Result.success(tagPage);
    }
    /**
     * 获取所有标签
     */
    @GetMapping("/all")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取所有标签", description = "获取机构的所有标签")
    public Result<List<QuestionTagVO>> getAllTags() {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取所有标签, 机构ID: {}", institutionId);
        List<QuestionTagVO> tags = tagService.getAllTags(institutionId);
        return Result.success(tags);
    }
    /**
     * 获取题目的标签
     */
    @GetMapping("/question/{questionId}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取题目标签", description = "获取指定题目关联的所有标签")
    public Result<List<QuestionTagVO>> getTagsByQuestionId(
            @Parameter(description = "题目ID") @PathVariable("questionId") Long questionId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取题目标签, 题目ID: {}, 机构ID: {}", questionId, institutionId);
        List<QuestionTagVO> tags = tagService.getTagsByQuestionId(questionId);
        return Result.success(tags);
    }
    /**
     * 为题目添加标签
     */
    @PostMapping("/question/{questionId}/tag/{tagId}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "添加标签到题目", description = "为题目添加指定标签")
    public Result<Boolean> addTagToQuestion(
            @Parameter(description = "题目ID") @PathVariable("questionId") Long questionId,
            @Parameter(description = "标签ID") @PathVariable("tagId") Long tagId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("添加标签到题目, 题目ID: {}, 标签ID: {}, 机构ID: {}", 
                questionId, tagId, institutionId);
        boolean result = tagService.addTagToQuestion(questionId, tagId, institutionId);
        return Result.success(result);
    }
    /**
     * 移除题目标签
     */
    @DeleteMapping("/question/{questionId}/tag/{tagId}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "移除题目标签", description = "从题目中移除指定标签")
    public Result<Boolean> removeTagFromQuestion(
            @Parameter(description = "题目ID") @PathVariable("questionId") Long questionId,
            @Parameter(description = "标签ID") @PathVariable("tagId") Long tagId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("移除题目标签, 题目ID: {}, 标签ID: {}, 机构ID: {}", 
                questionId, tagId, institutionId);
        boolean result = tagService.removeTagFromQuestion(questionId, tagId, institutionId);
        return Result.success(result);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/ReviewerCourseController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.course.CourseReviewDTO;
import com.zhangziqi.online_course_mine.model.vo.CourseStructureVO;
import com.zhangziqi.online_course_mine.model.vo.CourseVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.security.SecurityUtil;
import com.zhangziqi.online_course_mine.service.CourseService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
/**
 * 审核员课程管理控制器
 */
@Slf4j
@RestController
@RequestMapping("/api/reviewer/courses")
@RequiredArgsConstructor
@Tag(name = "审核员课程管理", description = "审核员查看和审核课程相关操作")
public class ReviewerCourseController {
    private final CourseService courseService;
    /**
     * 获取待审核课程列表
     */
    @GetMapping("/pending")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_REVIEWER')")
    @Operation(summary = "获取待审核课程列表", description = "分页获取待审核的课程列表")
    public Result<Page<CourseVO>> getPendingCourses(
            @PageableDefault(size = 10) Pageable pageable) {
        log.info("获取待审核课程列表");
        Page<CourseVO> courses = courseService.getCoursesByStatus(
                1, pageable); // 1 表示待审核状态
        return Result.success(courses);
    }
    /**
     * 获取正在审核的课程列表
     */
    @GetMapping("/reviewing")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_REVIEWER')")
    @Operation(summary = "获取正在审核的课程列表", description = "分页获取当前审核员正在审核的课程列表")
    public Result<Page<CourseVO>> getReviewingCourses(
            @PageableDefault(size = 10) Pageable pageable) {
        Long reviewerId = SecurityUtil.getCurrentUserId();
        log.info("获取正在审核的课程列表, 审核员ID: {}", reviewerId);
        Page<CourseVO> courses = courseService.getCoursesByStatusAndReviewer(
                2, reviewerId, pageable); // 2 表示审核中状态
        return Result.success(courses);
    }
    /**
     * 获取课程结构详情
     */
    @GetMapping("/{id}/structure")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_REVIEWER')")
    @Operation(summary = "获取课程结构", description = "获取课程的完整结构，包括章节和小节")
    public Result<CourseStructureVO> getCourseStructure(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId) {
        log.info("审核员获取课程结构, 课程ID: {}", courseId);
        CourseStructureVO structure = courseService.getCourseStructure(courseId);
        return Result.success(structure);
    }
    /**
     * 开始审核课程
     */
    @PostMapping("/{id}/review/start")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_REVIEWER')")
    @Operation(summary = "开始审核课程", description = "审核员开始审核课程")
    public Result<CourseVO> startReview(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId) {
        Long reviewerId = SecurityUtil.getCurrentUserId();
        log.info("开始审核课程, 课程ID: {}, 审核员ID: {}", courseId, reviewerId);
        CourseVO course = courseService.startReview(courseId, reviewerId);
        return Result.success(course);
    }
    /**
     * 通过课程审核
     */
    @PostMapping("/{id}/review/approve")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_REVIEWER')")
    @Operation(summary = "通过课程审核", description = "审核员通过课程审核")
    public Result<CourseVO> approveCourse(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId,
            @Parameter(description = "审核意见") @RequestParam(required = false) String comment) {
        Long reviewerId = SecurityUtil.getCurrentUserId();
        log.info("通过课程审核, 课程ID: {}, 审核员ID: {}", courseId, reviewerId);
        CourseVO course = courseService.approveCourse(courseId, comment, reviewerId);
        return Result.success(course);
    }
    /**
     * 拒绝课程审核
     */
    @PostMapping("/{id}/review/reject")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_REVIEWER')")
    @Operation(summary = "拒绝课程审核", description = "审核员拒绝课程审核")
    public Result<CourseVO> rejectCourse(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId,
            @RequestBody CourseReviewDTO dto) {
        Long reviewerId = SecurityUtil.getCurrentUserId();
        log.info("拒绝课程审核, 课程ID: {}, 审核员ID: {}, 原因: {}", 
                courseId, reviewerId, dto.getReason());
        CourseVO course = courseService.rejectCourse(courseId, dto.getReason(), reviewerId);
        return Result.success(course);
    }
    /**
     * 获取课程详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_REVIEWER')")
    @Operation(summary = "获取课程详情", description = "审核员获取课程详情")
    public Result<CourseVO> getCourseById(
            @Parameter(description = "课程ID") @PathVariable("id") Long courseId) {
        log.info("审核员获取课程详情, 课程ID: {}", courseId);
        CourseVO course = courseService.getCourseById(courseId);
        return Result.success(course);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/ReviewerInstitutionController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplicationQueryDTO;
import com.zhangziqi.online_course_mine.model.vo.InstitutionApplicationVO;
import com.zhangziqi.online_course_mine.model.vo.InstitutionVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.InstitutionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;
/**
 * 审核员机构审核控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/reviewer/institutions")
@PreAuthorize("hasAnyRole('ADMIN', 'REVIEWER')")
@Tag(name = "机构审核", description = "机构申请审核相关接口")
public class ReviewerInstitutionController {
    private final InstitutionService institutionService;
    /**
     * 分页查询机构申请
     *
     * @param queryDTO 查询参数
     * @return 申请分页
     */
    @GetMapping("/applications")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "分页查询机构申请", description = "分页查询机构申请列表，可按状态筛选")
    public Result<Page<InstitutionApplicationVO>> getApplications(@Valid InstitutionApplicationQueryDTO queryDTO) {
        log.info("分页查询机构申请: {}", queryDTO);
        return Result.success(
            institutionService.getApplications(queryDTO)
        );
    }
    /**
     * 查询申请详情
     *
     * @param id 申请ID
     * @return 申请详情
     */
    @GetMapping("/applications/{id}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "查询申请详情", description = "根据ID查询机构申请详情")
    public Result<InstitutionApplicationVO> getApplicationDetail(
            @Parameter(description = "申请ID") @PathVariable Long id) {
        log.info("查询申请详情: {}", id);
        return Result.success(
            institutionService.getApplicationDetail(id)
        );
    }
    /**
     * 审核通过申请
     *
     * @param id 申请ID
     * @param authentication 认证信息
     * @return 机构信息
     */
    @PostMapping("/applications/{id}/approve")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "审核通过", description = "通过机构申请，自动创建机构并生成注册码")
    public Result<InstitutionVO> approveApplication(
            @Parameter(description = "申请ID") @PathVariable Long id,
            Authentication authentication) {
        String username = authentication.getName();
        log.info("审核通过申请: {}, 审核人: {}", id, username);
        return Result.success(
            institutionService.approveApplication(id, username)
        );
    }
    /**
     * 审核拒绝申请
     *
     * @param id 申请ID
     * @param reason 拒绝原因
     * @param authentication 认证信息
     * @return 结果
     */
    @PostMapping("/applications/{id}/reject")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "审核拒绝", description = "拒绝机构申请")
    public Result<Void> rejectApplication(
            @Parameter(description = "申请ID") @PathVariable Long id,
            @Parameter(description = "拒绝原因") @RequestParam String reason,
            Authentication authentication) {
        String username = authentication.getName();
        log.info("审核拒绝申请: {}, 审核人: {}, 原因: {}", id, username, reason);
        institutionService.rejectApplication(id, reason, username);
        return Result.success();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/RoleController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.RoleDTO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.model.vo.RoleVO;
import com.zhangziqi.online_course_mine.service.RoleService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Set;
/**
 * 角色管理控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/roles")
@Tag(name = "角色管理", description = "角色查询、创建、编辑、删除等功能")
public class RoleController {
    private final RoleService roleService;
    /**
     * 获取角色列表
     *
     * @return 角色列表
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "获取角色列表", description = "获取所有角色列表")
    public Result<List<RoleVO>> getRoleList() {
        log.info("获取角色列表");
        List<RoleVO> roleList = roleService.getRoleList();
        return Result.success(roleList);
    }
    /**
     * 获取角色详情
     *
     * @param id 角色ID
     * @return 角色详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "获取角色详情", description = "根据角色ID获取角色详情")
    public Result<RoleVO> getRoleById(@Parameter(description = "角色ID") @PathVariable("id") Long id) {
        log.info("获取角色详情: {}", id);
        RoleVO roleVO = roleService.getRoleById(id);
        return Result.success(roleVO);
    }
    /**
     * 创建角色
     *
     * @param roleDTO 角色信息
     * @return 创建后的角色信息
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "创建角色", description = "创建新角色")
    public Result<RoleVO> createRole(@Valid @RequestBody RoleDTO roleDTO) {
        log.info("创建角色: {}", roleDTO);
        RoleVO roleVO = roleService.createRole(roleDTO);
        return Result.success(roleVO);
    }
    /**
     * 更新角色
     *
     * @param id      角色ID
     * @param roleDTO 角色信息
     * @return 更新后的角色信息
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "更新角色", description = "更新角色信息")
    public Result<RoleVO> updateRole(
            @Parameter(description = "角色ID") @PathVariable("id") Long id,
            @Valid @RequestBody RoleDTO roleDTO) {
        log.info("更新角色: {}, {}", id, roleDTO);
        RoleVO roleVO = roleService.updateRole(id, roleDTO);
        return Result.success(roleVO);
    }
    /**
     * 删除角色
     *
     * @param id 角色ID
     * @return 无
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "删除角色", description = "根据角色ID删除角色")
    public Result<Void> deleteRole(@Parameter(description = "角色ID") @PathVariable("id") Long id) {
        log.info("删除角色: {}", id);
        roleService.deleteRole(id);
        return Result.success();
    }
    /**
     * 给角色分配权限
     *
     * @param id            角色ID
     * @param permissionIds 权限ID列表
     * @return 更新后的角色信息
     */
    @PutMapping("/{id}/permissions")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "给角色分配权限", description = "给角色分配权限")
    public Result<RoleVO> assignPermissions(
            @Parameter(description = "角色ID") @PathVariable("id") Long id,
            @Parameter(description = "权限ID列表") @RequestBody Set<Long> permissionIds) {
        log.info("给角色分配权限: {}, {}", id, permissionIds);
        RoleVO roleVO = roleService.assignPermissions(id, permissionIds);
        return Result.success(roleVO);
    }
    /**
     * 批量删除角色
     *
     * @param ids 角色ID列表
     * @return 无
     */
    @DeleteMapping("/batch")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "批量删除角色", description = "批量删除角色")
    public Result<Void> batchDeleteRoles(@Parameter(description = "角色ID列表") @RequestBody List<Long> ids) {
        log.info("批量删除角色: {}", ids);
        roleService.batchDeleteRoles(ids);
        return Result.success();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/SectionController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.section.*;
import com.zhangziqi.online_course_mine.model.vo.SectionVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.security.SecurityUtil;
import com.zhangziqi.online_course_mine.service.SectionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;
/**
 * 小节控制器
 * 处理课程小节及其资源的创建、更新、查询和管理
 */
@Slf4j
@RestController
@RequestMapping("/api/sections")
@RequiredArgsConstructor
@Tag(name = "小节管理", description = "课程小节及其资源的创建、更新、查询和管理相关操作")
public class SectionController {
    private final SectionService sectionService;
    /**
     * 创建小节
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "创建小节", description = "创建一个新的小节")
    public Result<SectionVO> createSection(@Valid @RequestBody SectionCreateDTO dto) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("创建小节, 章节ID: {}, 机构ID: {}, 小节标题: {}", 
                dto.getChapterId(), institutionId, dto.getTitle());
        SectionVO section = sectionService.createSection(dto);
        return Result.success(section);
    }
    /**
     * 获取小节详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取小节详情", description = "获取指定小节的详细信息")
    public Result<SectionVO> getSectionById(
            @Parameter(description = "小节ID") @PathVariable("id") Long sectionId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取小节详情, 小节ID: {}, 机构ID: {}", sectionId, institutionId);
        SectionVO section = sectionService.getSectionById(sectionId);
        return Result.success(section);
    }
    /**
     * 更新小节
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "更新小节", description = "更新指定小节的信息")
    public Result<SectionVO> updateSection(
            @Parameter(description = "小节ID") @PathVariable("id") Long sectionId,
            @Valid @RequestBody SectionCreateDTO dto) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("更新小节, 小节ID: {}, 机构ID: {}, 小节标题: {}", 
                sectionId, institutionId, dto.getTitle());
        SectionVO section = sectionService.updateSection(sectionId, dto);
        return Result.success(section);
    }
    /**
     * 删除小节
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "删除小节", description = "删除指定的小节")
    public Result<Void> deleteSection(
            @Parameter(description = "小节ID") @PathVariable("id") Long sectionId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("删除小节, 小节ID: {}, 机构ID: {}", sectionId, institutionId);
        sectionService.deleteSection(sectionId);
        return Result.success();
    }
    /**
     * 获取章节下的小节列表
     */
    @GetMapping("/chapter/{chapterId}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取章节下的小节列表", description = "获取指定章节下的所有小节")
    public Result<List<SectionVO>> getSectionsByChapter(
            @Parameter(description = "章节ID") @PathVariable("chapterId") Long chapterId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取章节下的小节列表, 章节ID: {}, 机构ID: {}", chapterId, institutionId);
        List<SectionVO> sections = sectionService.getSectionsByChapter(chapterId);
        return Result.success(sections);
    }
    /**
     * 获取课程下的所有小节
     */
    @GetMapping("/course/{courseId}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "获取课程下的所有小节", description = "获取指定课程下的所有小节")
    public Result<List<SectionVO>> getSectionsByCourse(
            @Parameter(description = "课程ID") @PathVariable("courseId") Long courseId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("获取课程下的所有小节, 课程ID: {}, 机构ID: {}", courseId, institutionId);
        List<SectionVO> sections = sectionService.getSectionsByCourse(courseId);
        return Result.success(sections);
    }
    /**
     * 调整小节顺序
     */
    @PutMapping("/chapter/{chapterId}/reorder")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "调整小节顺序", description = "调整章节中小节的顺序")
    public Result<List<SectionVO>> reorderSections(
            @Parameter(description = "章节ID") @PathVariable("chapterId") Long chapterId,
            @Valid @RequestBody List<SectionOrderDTO> sectionOrders) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("调整小节顺序, 章节ID: {}, 机构ID: {}, 小节数量: {}", 
                chapterId, institutionId, sectionOrders.size());
        List<SectionVO> sections = sectionService.reorderSections(chapterId, sectionOrders);
        return Result.success(sections);
    }
    /**
     * 设置小节媒体资源（直接关联）
     */
    @PutMapping("/{id}/media/{mediaId}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "设置小节媒体资源", description = "为小节设置直接关联的媒体资源")
    public Result<SectionVO> setMediaResource(
            @Parameter(description = "小节ID") @PathVariable("id") Long sectionId,
            @Parameter(description = "媒体资源ID") @PathVariable("mediaId") Long mediaId,
            @Parameter(description = "资源类型") @RequestParam(required = true) String resourceType) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("设置小节媒体资源, 小节ID: {}, 媒体ID: {}, 资源类型: {}, 机构ID: {}", 
                sectionId, mediaId, resourceType, institutionId);
        SectionVO section = sectionService.setMediaResource(sectionId, mediaId, resourceType);
        return Result.success(section);
    }
    /**
     * 移除小节媒体资源（直接关联）
     */
    @DeleteMapping("/{id}/media")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "移除小节媒体资源", description = "移除小节直接关联的媒体资源")
    public Result<SectionVO> removeMediaResource(
            @Parameter(description = "小节ID") @PathVariable("id") Long sectionId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("移除小节媒体资源, 小节ID: {}, 机构ID: {}", sectionId, institutionId);
        SectionVO section = sectionService.removeMediaResource(sectionId);
        return Result.success(section);
    }
    /**
     * 设置小节题目组（直接关联）
     */
    @PutMapping("/{id}/question-group/{questionGroupId}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "设置小节题目组", description = "为小节设置直接关联的题目组")
    public Result<SectionVO> setQuestionGroup(
            @Parameter(description = "小节ID") @PathVariable("id") Long sectionId,
            @Parameter(description = "题目组ID") @PathVariable("questionGroupId") Long questionGroupId,
            @Valid @RequestBody(required = false) SectionQuestionGroupConfigDTO dto) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("设置小节题目组, 小节ID: {}, 题目组ID: {}, 机构ID: {}", 
                sectionId, questionGroupId, institutionId);
        SectionVO section = sectionService.setQuestionGroup(sectionId, questionGroupId, dto);
        return Result.success(section);
    }
    /**
     * 移除小节题目组（直接关联）
     */
    @DeleteMapping("/{id}/question-group")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAuthority('ROLE_INSTITUTION')")
    @Operation(summary = "移除小节题目组", description = "移除小节直接关联的题目组")
    public Result<SectionVO> removeQuestionGroup(
            @Parameter(description = "小节ID") @PathVariable("id") Long sectionId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("移除小节题目组, 小节ID: {}, 机构ID: {}", sectionId, institutionId);
        SectionVO section = sectionService.removeQuestionGroup(sectionId);
        return Result.success(section);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/StorageQuotaController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.vo.QuotaInfoVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.StorageQuotaService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;
/**
 * 存储配额控制器
 */
@RestController
@RequestMapping("/api/storage/quota")
@RequiredArgsConstructor
public class StorageQuotaController {
    private final StorageQuotaService storageQuotaService;
    /**
     * 获取机构当前的配额信息
     *
     * @param institutionId 机构ID
     * @return 配额信息
     */
    @GetMapping("/{institutionId}")
    @PreAuthorize("hasRole('INSTITUTION')")
    public Result<QuotaInfoVO> getQuotaInfo(@PathVariable Long institutionId) {
        // 注意：实际业务中需要验证当前用户是否属于该机构
        // 这里简化处理，假设前端传入的就是当前用户所属机构ID
        QuotaInfoVO quotaInfo = storageQuotaService.getQuotaInfo(institutionId);
        return Result.success(quotaInfo);
    }
    /**
     * 获取机构所有类型的配额信息
     *
     * @param institutionId 机构ID
     * @return 配额信息列表
     */
    @GetMapping("/{institutionId}/details")
    @PreAuthorize("hasRole('INSTITUTION')")
    public Result<List<QuotaInfoVO>> getAllQuotas(@PathVariable Long institutionId) {
        // 同样需要验证当前用户是否属于该机构
        List<QuotaInfoVO> quotas = storageQuotaService.getAllQuotas(institutionId);
        return Result.success(quotas);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/TagController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.TagDTO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.model.vo.TagVO;
import com.zhangziqi.online_course_mine.service.TagService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * 标签管理控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/tags")
@Tag(name = "标签管理", description = "课程标签的创建、查询、编辑、删除等功能")
public class TagController {
    private final TagService tagService;
    /**
     * 创建标签
     *
     * @param tagDTO 标签信息
     * @return 创建后的标签ID
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasAnyRole('ADMIN', 'REVIEWER')")
    @Operation(summary = "创建标签", description = "创建新的课程标签")
    public Result<Map<String, Long>> createTag(@Valid @RequestBody TagDTO tagDTO) {
        log.info("创建标签: {}", tagDTO);
        Long id = tagService.createTag(tagDTO);
        Map<String, Long> result = new HashMap<>();
        result.put("id", id);
        return Result.success(result);
    }
    /**
     * 更新标签
     *
     * @param id 标签ID
     * @param tagDTO 标签信息
     * @return 操作结果
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAnyRole('ADMIN', 'REVIEWER')")
    @Operation(summary = "更新标签", description = "更新标签信息")
    public Result<Void> updateTag(
            @Parameter(description = "标签ID") @PathVariable("id") Long id,
            @Valid @RequestBody TagDTO tagDTO) {
        log.info("更新标签: id={}, {}", id, tagDTO);
        tagService.updateTag(id, tagDTO);
        return Result.success();
    }
    /**
     * 删除标签
     *
     * @param id 标签ID
     * @return 操作结果
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAnyRole('ADMIN', 'REVIEWER')")
    @Operation(summary = "删除标签", description = "删除指定的标签")
    public Result<Void> deleteTag(@Parameter(description = "标签ID") @PathVariable("id") Long id) {
        log.info("删除标签: id={}", id);
        tagService.deleteTag(id);
        return Result.success();
    }
    /**
     * 获取标签详情
     *
     * @param id 标签ID
     * @return 标签详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取标签详情", description = "根据ID获取标签详情")
    public Result<TagVO> getTag(@Parameter(description = "标签ID") @PathVariable("id") Long id) {
        log.info("获取标签详情: id={}", id);
        TagVO tag = tagService.getTag(id);
        return Result.success(tag);
    }
    /**
     * 根据名称获取标签
     *
     * @param name 标签名称
     * @return 标签详情
     */
    @GetMapping("/name/{name}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "根据名称获取标签", description = "根据名称获取标签详情")
    public Result<TagVO> getTagByName(@Parameter(description = "标签名称") @PathVariable("name") String name) {
        log.info("根据名称获取标签: name={}", name);
        TagVO tag = tagService.getTagByName(name);
        return Result.success(tag);
    }
    /**
     * 分页查询标签
     *
     * @param keyword 搜索关键词
     * @param pageable 分页参数
     * @return 标签列表
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "分页查询标签", description = "分页获取标签列表，支持关键词搜索")
    public Result<Page<TagVO>> listTags(
            @Parameter(description = "搜索关键词") @RequestParam(required = false) String keyword,
            @PageableDefault(size = 20) Pageable pageable) {
        log.info("分页查询标签: keyword={}", keyword);
        Page<TagVO> tags = tagService.listTags(keyword, pageable);
        return Result.success(tags);
    }
    /**
     * 获取热门标签
     *
     * @param limit 数量限制
     * @return 热门标签列表
     */
    @GetMapping("/popular")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取热门标签", description = "获取使用最多的标签列表")
    public Result<List<TagVO>> getPopularTags(
            @Parameter(description = "数量限制") @RequestParam(defaultValue = "10") int limit) {
        log.info("获取热门标签: limit={}", limit);
        List<TagVO> popularTags = tagService.getPopularTags(limit);
        return Result.success(popularTags);
    }
    /**
     * 检查标签名称是否可用
     *
     * @param name 标签名称
     * @param excludeId 排除的标签ID（更新时使用）
     * @return 是否可用
     */
    @GetMapping("/check-name")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasAnyRole('ADMIN', 'REVIEWER')")
    @Operation(summary = "检查标签名称是否可用", description = "检查标签名称是否已被使用")
    public Result<Map<String, Boolean>> isNameAvailable(
            @Parameter(description = "标签名称") @RequestParam String name,
            @Parameter(description = "排除的标签ID") @RequestParam(required = false) Long excludeId) {
        log.info("检查标签名称是否可用: name={}, excludeId={}", name, excludeId);
        boolean available = tagService.isNameAvailable(name, excludeId);
        Map<String, Boolean> result = new HashMap<>();
        result.put("available", available);
        return Result.success(result);
    }
    /**
     * 批量获取或创建标签
     *
     * @param tagNames 标签名称列表
     * @return 标签ID列表
     */
    @PostMapping("/batch")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "批量获取或创建标签", description = "根据名称批量获取或创建标签")
    public Result<List<Long>> batchGetOrCreateTags(@RequestBody List<String> tagNames) {
        log.info("批量获取或创建标签: tagNames={}", tagNames);
        List<Long> tagIds = tagService.getOrCreateTags(tagNames).stream()
                .map(tag -> tag.getId())
                .toList();
        return Result.success(tagIds);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/UserController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.ChangePasswordDTO;
import com.zhangziqi.online_course_mine.model.dto.EmailUpdateDTO;
import com.zhangziqi.online_course_mine.model.dto.UserDTO;
import com.zhangziqi.online_course_mine.model.dto.UserProfileDTO;
import com.zhangziqi.online_course_mine.model.dto.UserQueryDTO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import com.zhangziqi.online_course_mine.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
/**
 * 用户管理控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/users")
@Tag(name = "用户管理", description = "用户查询、创建、编辑、删除等功能")
public class UserController {
    private final UserService userService;
    /**
     * 分页查询用户列表
     *
     * @param queryDTO 查询条件
     * @return 用户列表（分页）
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "分页查询用户列表", description = "根据条件分页查询用户列表")
    public Result<Page<UserVO>> getUserList(@Valid UserQueryDTO queryDTO) {
        log.info("分页查询用户列表: {}", queryDTO);
        Page<UserVO> page = userService.getUserList(queryDTO);
        return Result.success(page);
    }
    /**
     * 获取用户详情
     *
     * @param id 用户ID
     * @return 用户详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "获取用户详情", description = "根据用户ID获取用户详情")
    public Result<UserVO> getUserById(@Parameter(description = "用户ID") @PathVariable("id") Long id) {
        log.info("获取用户详情: {}", id);
        UserVO userVO = userService.getUserById(id);
        return Result.success(userVO);
    }
    /**
     * 创建用户
     *
     * @param userDTO 用户信息
     * @return 创建后的用户信息
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "创建用户", description = "创建新用户")
    public Result<UserVO> createUser(@Valid @RequestBody UserDTO userDTO) {
        log.info("创建用户: {}", userDTO);
        UserVO userVO = userService.createUser(userDTO);
        return Result.success(userVO);
    }
    /**
     * 更新用户
     *
     * @param id 用户ID
     * @param userDTO 用户信息
     * @return 更新后的用户信息
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "更新用户", description = "更新用户信息")
    public Result<UserVO> updateUser(
            @Parameter(description = "用户ID") @PathVariable("id") Long id,
            @Valid @RequestBody UserDTO userDTO) {
        log.info("更新用户: {}, {}", id, userDTO);
        UserVO userVO = userService.updateUser(id, userDTO);
        return Result.success(userVO);
    }
    /**
     * 删除用户
     *
     * @param id 用户ID
     * @return 无
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "删除用户", description = "根据用户ID删除用户")
    public Result<Void> deleteUser(@Parameter(description = "用户ID") @PathVariable("id") Long id) {
        log.info("删除用户: {}", id);
        userService.deleteUser(id);
        return Result.success();
    }
    /**
     * 修改用户状态
     *
     * @param id 用户ID
     * @param status 状态（0-禁用，1-正常）
     * @return 更新后的用户信息
     */
    @PatchMapping("/{id}/status")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "修改用户状态", description = "修改用户状态（0-禁用，1-正常）")
    public Result<UserVO> updateUserStatus(
            @Parameter(description = "用户ID") @PathVariable("id") Long id,
            @Parameter(description = "状态（0-禁用，1-正常）") @RequestParam("status") Integer status) {
        log.info("修改用户状态: {}, {}", id, status);
        UserVO userVO = userService.updateUserStatus(id, status);
        return Result.success(userVO);
    }
    /**
     * 给用户分配角色
     *
     * @param id 用户ID
     * @param roleIds 角色ID列表
     * @return 更新后的用户信息
     */
    @PutMapping("/{id}/roles")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "给用户分配角色", description = "给用户分配角色")
    public Result<UserVO> assignRoles(
            @Parameter(description = "用户ID") @PathVariable("id") Long id,
            @Parameter(description = "角色ID列表") @RequestBody Set<Long> roleIds) {
        log.info("给用户分配角色: {}, {}", id, roleIds);
        UserVO userVO = userService.assignRoles(id, roleIds);
        return Result.success(userVO);
    }
    /**
     * 批量删除用户
     *
     * @param ids 用户ID列表
     * @return 无
     */
    @DeleteMapping("/batch")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "批量删除用户", description = "批量删除用户")
    public Result<Void> batchDeleteUsers(@Parameter(description = "用户ID列表") @RequestBody List<Long> ids) {
        log.info("批量删除用户: {}", ids);
        userService.batchDeleteUsers(ids);
        return Result.success();
    }
    /**
     * 获取当前用户信息
     *
     * @return 当前用户信息
     */
    @GetMapping("/current")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取当前用户信息", description = "获取当前登录用户的详细信息")
    public Result<UserVO> getCurrentUser() {
        String username = getCurrentUsername();
        log.info("获取当前用户信息: {}", username);
        UserVO userVO = userService.getCurrentUser(username);
        return Result.success(userVO);
    }
    /**
     * 更新当前用户信息
     *
     * @param profileDTO 用户个人信息
     * @return 更新后的用户信息
     */
    @PutMapping("/current")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "更新当前用户信息", description = "更新当前登录用户的个人信息")
    public Result<UserVO> updateCurrentUser(@Valid @RequestBody UserProfileDTO profileDTO) {
        String username = getCurrentUsername();
        log.info("更新当前用户信息: {}, {}", username, profileDTO);
        UserVO userVO = userService.updateCurrentUserProfile(username, profileDTO.getNickname(), profileDTO.getPhone());
        return Result.success(userVO);
    }
    /**
     * 修改当前用户密码
     *
     * @param changePasswordDTO 密码修改请求
     * @return 操作结果
     */
    @PutMapping("/current/password")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "修改密码", description = "修改当前用户密码")
    public Result<Void> changePassword(@Valid @RequestBody ChangePasswordDTO changePasswordDTO) {
        String username = getCurrentUsername();
        // 校验新密码与确认密码是否一致
        if (!changePasswordDTO.getNewPassword().equals(changePasswordDTO.getConfirmPassword())) {
            return Result.fail(400, "新密码与确认密码不一致");
        }
        log.info("修改当前用户密码: {}", username);
        boolean result = userService.changePassword(username, 
                changePasswordDTO.getOldPassword(), 
                changePasswordDTO.getNewPassword());
        return result ? Result.success() : Result.fail(400, "密码修改失败");
    }
    /**
     * 更新当前用户邮箱
     *
     * @param emailUpdateDTO 邮箱更新请求
     * @return 操作结果
     */
    @PutMapping("/current/email")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "更新邮箱", description = "更新当前用户邮箱（需验证码）")
    public Result<UserVO> updateEmail(@Valid @RequestBody EmailUpdateDTO emailUpdateDTO) {
        String username = getCurrentUsername();
        log.info("更新当前用户邮箱: {}, 新邮箱: {}", username, emailUpdateDTO.getNewEmail());
        UserVO userVO = userService.updateEmail(username, 
                emailUpdateDTO.getNewEmail(), 
                emailUpdateDTO.getEmailCode(), 
                emailUpdateDTO.getPassword());
        return Result.success(userVO);
    }
    /**
     * 上传头像
     *
     * @param file 头像文件
     * @return 头像URL
     */
    @PostMapping(value = "/current/avatar", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "上传头像", description = "上传当前用户头像")
    public Result<Map<String, String>> uploadAvatar(@RequestParam("file") MultipartFile file) {
        String username = getCurrentUsername();
        log.info("上传头像: {}, 文件大小: {}", username, file.getSize());
        try {
            // 调用服务层方法上传并更新头像
            Map<String, String> result = userService.uploadAndUpdateAvatar(username, file);
            return Result.success(result);
        } catch (BusinessException e) {
            return Result.fail(e.getCode(), e.getMessage());
        } catch (IOException e) {
            log.error("头像上传失败", e);
            return Result.fail(500, "头像上传失败: " + e.getMessage());
        }
    }
    /**
     * 获取用户基本信息（用于前端展示）
     *
     * @param userId 用户ID
     * @return 用户基本信息
     */
    @GetMapping("/basic/{userId}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取用户基本信息", description = "获取用户基本信息（用于前端展示）")
    public Result<UserVO> getBasicUserInfo(@PathVariable("userId") Long userId) {
        log.info("获取用户基本信息: {}", userId);
        UserVO userVO = userService.getBasicUserInfo(userId);
        return Result.success(userVO);
    }
    /**
     * 获取当前登录用户名
     *
     * @return 当前登录用户名
     */
    private String getCurrentUsername() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        return authentication.getName();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/UserFavoriteController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.model.vo.UserFavoriteVO;
import com.zhangziqi.online_course_mine.security.SecurityUtil;
import com.zhangziqi.online_course_mine.service.UserFavoriteService;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.web.bind.annotation.*;
/**
 * 用户收藏课程控制器
 */
@RestController
@RequestMapping("/api/favorites")
@RequiredArgsConstructor
public class UserFavoriteController {
    private final UserFavoriteService userFavoriteService;
    /**
     * 收藏课程
     */
    @PostMapping("/{courseId}")
    public Result<Void> addFavorite(@PathVariable Long courseId) {
        Long userId = SecurityUtil.getCurrentUserId();
        boolean success = userFavoriteService.addFavorite(userId, courseId);
        if (success) {
            return Result.success();
        } else {
            return Result.fail("收藏失败");
        }
    }
    /**
     * 取消收藏
     */
    @DeleteMapping("/{courseId}")
    public Result<Void> removeFavorite(@PathVariable Long courseId) {
        Long userId = SecurityUtil.getCurrentUserId();
        boolean success = userFavoriteService.removeFavorite(userId, courseId);
        if (success) {
            return Result.success();
        } else {
            return Result.fail("取消收藏失败");
        }
    }
    /**
     * 检查是否已收藏
     */
    @GetMapping("/check/{courseId}")
    public Result<Boolean> checkFavorite(@PathVariable Long courseId) {
        Long userId = SecurityUtil.getCurrentUserId();
        boolean isFavorite = userFavoriteService.isFavorite(userId, courseId);
        return Result.success(isFavorite);
    }
    /**
     * 获取收藏列表
     */
    @GetMapping
    public Result<Page<UserFavoriteVO>> getFavorites(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        Long userId = SecurityUtil.getCurrentUserId();
        PageRequest pageRequest = PageRequest.of(page, size, 
                Sort.by(Sort.Direction.DESC, "favoriteTime"));
        Page<UserFavoriteVO> favorites = userFavoriteService.getUserFavorites(userId, pageRequest);
        return Result.success(favorites);
    }
    /**
     * 获取收藏数量
     */
    @GetMapping("/count")
    public Result<Long> getFavoriteCount() {
        Long userId = SecurityUtil.getCurrentUserId();
        long count = userFavoriteService.countUserFavorites(userId);
        return Result.success(count);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/excel/QuestionExcelListener.java">
package com.zhangziqi.online_course_mine.excel;
import com.alibaba.excel.context.AnalysisContext;
import com.alibaba.excel.event.AnalysisEventListener;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.QuestionDTO;
import com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO;
import com.zhangziqi.online_course_mine.model.excel.QuestionExcelData;
import com.zhangziqi.online_course_mine.model.vo.QuestionImportResultVO;
import com.zhangziqi.online_course_mine.model.vo.QuestionTagVO;
import com.zhangziqi.online_course_mine.service.QuestionService;
import com.zhangziqi.online_course_mine.service.QuestionTagService;
import lombok.Getter;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
/**
 * 试题Excel解析监听器
 */
@Slf4j
public class QuestionExcelListener extends AnalysisEventListener<QuestionExcelData> {
    private final QuestionService questionService;
    private final QuestionTagService questionTagService;
    private final Long institutionId;
    private final Long userId;
    private final Integer batchSize;
    private final TransactionTemplate transactionTemplate;
    /**
     * 导入结果
     */
    @Getter
    private final QuestionImportResultVO result;
    /**
     * 批处理记录
     */
    private final List<QuestionExcelData> dataList = new ArrayList<>();
    /**
     * 机构所有标签缓存
     */
    private final Map<String, QuestionTagVO> tagCache = new HashMap<>();
    /**
     * 统计信息
     */
    private final AtomicInteger successCount = new AtomicInteger(0);
    private final AtomicInteger failureCount = new AtomicInteger(0);
    private final AtomicInteger totalCount = new AtomicInteger(0);
    public QuestionExcelListener(QuestionService questionService, 
                             QuestionTagService questionTagService,
                             Long institutionId,
                             Long userId,
                             Integer batchSize,
                             TransactionTemplate transactionTemplate) {
        this.questionService = questionService;
        this.questionTagService = questionTagService;
        this.institutionId = institutionId;
        this.userId = userId;
        this.batchSize = batchSize == null ? 50 : batchSize;
        this.transactionTemplate = transactionTemplate;
        this.result = QuestionImportResultVO.builder()
                .totalCount(0)
                .successCount(0)
                .failureCount(0)
                .failureItems(new ArrayList<>())
                .build();
        // 预加载机构所有标签
        loadAllTags();
    }
    /**
     * 每解析一行数据，会调用此方法
     */
    @Override
    public void invoke(QuestionExcelData data, AnalysisContext context) {
        // 记录总行数
        totalCount.incrementAndGet();
        // 添加到批处理列表
        dataList.add(data);
        // 达到批处理大小，执行批量保存
        if (dataList.size() >= batchSize) {
            saveData();
            dataList.clear();
        }
    }
    /**
     * 所有数据解析完成后调用
     */
    @Override
    public void doAfterAllAnalysed(AnalysisContext context) {
        // 处理剩余数据
        if (!dataList.isEmpty()) {
            saveData();
            dataList.clear();
        }
        // 更新结果统计
        result.setTotalCount(totalCount.get());
        result.setSuccessCount(successCount.get());
        result.setFailureCount(failureCount.get());
        log.info("试题导入完成，总计: {}，成功: {}，失败: {}", 
                totalCount.get(), successCount.get(), failureCount.get());
    }
    /**
     * 批量保存数据
     */
    private void saveData() {
        // 记录当前批次的行号
        Map<QuestionExcelData, Integer> rowIndexMap = new HashMap<>();
        int rowIndex = 1; // 表头为第1行，数据从第2行开始
        for (int i = 0; i < dataList.size(); i++) {
            // 当前数据在Excel中的行号
            rowIndex = i + 2; // +2是因为表头占一行，且索引从0开始
            rowIndexMap.put(dataList.get(i), rowIndex);
        }
        // 处理每条数据
        for (QuestionExcelData excelData : dataList) {
            final int currentRowIndex = rowIndexMap.get(excelData);
            try {
                // 使用事务模板，每个题目一个独立事务
                Boolean success = transactionTemplate.execute(new TransactionCallback<Boolean>() {
                    @Override
                    public Boolean doInTransaction(TransactionStatus status) {
                        try {
                            // 校验和转换数据
                            QuestionDTO questionDTO = convertToQuestionDTO(excelData);
                            // 保存题目
                            com.zhangziqi.online_course_mine.model.vo.QuestionVO savedQuestion = questionService.createQuestion(questionDTO, userId);
                            // 处理标签
                            if (savedQuestion != null && savedQuestion.getId() != null && 
                                excelData.getTags() != null && !excelData.getTags().trim().isEmpty()) {
                                processQuestionTags(savedQuestion.getId(), excelData.getTags());
                            }
                            return true;
                        } catch (Exception e) {
                            // 明确设置事务回滚
                            status.setRollbackOnly();
                            log.error("保存题目时出错，行号: {}, 标题: {}, 错误: {}", 
                                    currentRowIndex, excelData.getTitle(), e.getMessage());
                            throw e; // 重新抛出以触发事务回滚
                        }
                    }
                });
                // 记录成功
                if (success != null && success) {
                    successCount.incrementAndGet();
                }
            } catch (Exception e) {
                // 记录失败
                failureCount.incrementAndGet();
                // 添加失败信息
                result.getFailureItems().add(
                    QuestionImportResultVO.FailureItem.builder()
                        .rowIndex(currentRowIndex)
                        .title(StringUtils.defaultIfBlank(excelData.getTitle(), "未知标题"))
                        .errorMessage(e.getMessage())
                        .build()
                );
                log.error("导入试题失败，行号: {}, 标题: {}, 错误: {}", 
                    currentRowIndex, excelData.getTitle(), e.getMessage());
            }
        }
    }
    /**
     * 转换Excel数据为题目DTO
     */
    private QuestionDTO convertToQuestionDTO(QuestionExcelData excelData) {
        // 基础数据校验
        validateExcelData(excelData);
        // 构建选项列表
        List<QuestionOptionDTO> options = buildOptions(excelData);
        // 创建题目DTO
        return QuestionDTO.builder()
                .institutionId(institutionId)
                .title(excelData.getTitle())
                .content(excelData.getContent())
                .type(excelData.getType())
                .difficulty(excelData.getDifficulty())
                .score(excelData.getScore())
                .analysis(excelData.getAnalysis())
                .options(options)
                .answer(excelData.getCorrectAnswer())
                .build();
    }
    /**
     * 校验Excel数据
     */
    private void validateExcelData(QuestionExcelData excelData) {
        // 标题校验
        if (StringUtils.isBlank(excelData.getTitle())) {
            throw new BusinessException("题目标题不能为空");
        }
        // 内容校验
        if (StringUtils.isBlank(excelData.getContent())) {
            throw new BusinessException("题目内容不能为空");
        }
        // 类型校验
        if (excelData.getType() == null || excelData.getType() < 0 || excelData.getType() > 4) {
            throw new BusinessException("题目类型必须为0(单选题)、1(多选题)、2(判断题)、3(填空题)或4(简答题)");
        }
        // 难度校验
        if (excelData.getDifficulty() == null || 
            excelData.getDifficulty() < 1 || 
            excelData.getDifficulty() > 3) {
            throw new BusinessException("难度级别必须为1(简单)、2(中等)或3(困难)");
        }
        // 分值校验
        if (excelData.getScore() == null || excelData.getScore() < 1 || excelData.getScore() > 100) {
            throw new BusinessException("分值必须在1-100之间");
        }
        // 根据题目类型进行特定校验
        switch (excelData.getType()) {
            case 0: // 单选题
            case 1: // 多选题
                validateChoiceQuestion(excelData);
                break;
            case 2: // 判断题
                validateTrueFalseQuestion(excelData);
                break;
            case 3: // 填空题
                validateFillBlankQuestion(excelData);
                break;
            case 4: // 简答题
                // 简答题不需要选项和正确答案，只需要题干和解析
                break;
        }
    }
    /**
     * 校验选择题(单选题和多选题)
     */
    private void validateChoiceQuestion(QuestionExcelData excelData) {
        // 选项校验
        if (StringUtils.isBlank(excelData.getOptionA()) || StringUtils.isBlank(excelData.getOptionB())) {
            throw new BusinessException("选择题至少需要提供A、B两个选项");
        }
        // 正确答案校验
        if (StringUtils.isBlank(excelData.getCorrectAnswer())) {
            throw new BusinessException("正确答案不能为空");
        }
        // 单选题答案校验
        if (excelData.getType() == 0 && excelData.getCorrectAnswer().length() > 1) {
            throw new BusinessException("单选题只能有一个正确答案");
        }
        // 多选题答案校验
        if (excelData.getType() == 1 && excelData.getCorrectAnswer().length() < 2) {
            throw new BusinessException("多选题至少需要两个正确选项");
        }
        // 验证答案有效性
        validateCorrectAnswer(excelData);
    }
    /**
     * 校验判断题
     */
    private void validateTrueFalseQuestion(QuestionExcelData excelData) {
        // 判断题必须只有A和B两个选项，分别代表"正确"和"错误"
        if (StringUtils.isBlank(excelData.getOptionA()) || StringUtils.isBlank(excelData.getOptionB())) {
            throw new BusinessException("判断题必须提供A(正确)和B(错误)两个选项");
        }
        // 如果选项A不是"正确"，选项B不是"错误"，进行提示
        if (!"正确".equals(excelData.getOptionA()) || !"错误".equals(excelData.getOptionB())) {
            log.warn("判断题选项A应为'正确'，选项B应为'错误'");
        }
        // 正确答案校验，只能是A或B
        if (StringUtils.isBlank(excelData.getCorrectAnswer()) || 
            (!excelData.getCorrectAnswer().equalsIgnoreCase("A") && 
             !excelData.getCorrectAnswer().equalsIgnoreCase("B"))) {
            throw new BusinessException("判断题答案只能是A(正确)或B(错误)");
        }
    }
    /**
     * 校验填空题
     */
    private void validateFillBlankQuestion(QuestionExcelData excelData) {
        // 填空题必须有正确答案，但不需要选项
        if (StringUtils.isBlank(excelData.getCorrectAnswer())) {
            throw new BusinessException("填空题必须提供正确答案");
        }
    }
    /**
     * 验证正确答案的有效性(仅适用于选择题)
     */
    private void validateCorrectAnswer(QuestionExcelData excelData) {
        // 对于非选择题类型，不需要验证选项
        if (excelData.getType() > 1) {
            return;
        }
        String correctAnswer = excelData.getCorrectAnswer().toUpperCase();
        // 验证每个答案选项是否存在
        for (char c : correctAnswer.toCharArray()) {
            if (c < 'A' || c > 'F') {
                throw new BusinessException("正确答案格式无效，应为A-F的字母组合");
            }
            // 检查选项是否存在
            switch (c) {
                case 'A':
                    if (StringUtils.isBlank(excelData.getOptionA())) {
                        throw new BusinessException("选项A不存在，无法设为正确答案");
                    }
                    break;
                case 'B':
                    if (StringUtils.isBlank(excelData.getOptionB())) {
                        throw new BusinessException("选项B不存在，无法设为正确答案");
                    }
                    break;
                case 'C':
                    if (StringUtils.isBlank(excelData.getOptionC())) {
                        throw new BusinessException("选项C不存在，无法设为正确答案");
                    }
                    break;
                case 'D':
                    if (StringUtils.isBlank(excelData.getOptionD())) {
                        throw new BusinessException("选项D不存在，无法设为正确答案");
                    }
                    break;
                case 'E':
                    if (StringUtils.isBlank(excelData.getOptionE())) {
                        throw new BusinessException("选项E不存在，无法设为正确答案");
                    }
                    break;
                case 'F':
                    if (StringUtils.isBlank(excelData.getOptionF())) {
                        throw new BusinessException("选项F不存在，无法设为正确答案");
                    }
                    break;
                default:
                    throw new BusinessException("未知的选项标识: " + c);
            }
        }
    }
    /**
     * 构建选项列表
     */
    private List<QuestionOptionDTO> buildOptions(QuestionExcelData excelData) {
        List<QuestionOptionDTO> options = new ArrayList<>();
        // 简答题不需要选项
        if (excelData.getType() == 4) {
            return options;
        }
        // 填空题不需要选项
        if (excelData.getType() == 3) {
            return options;
        }
        String correctAnswer = excelData.getCorrectAnswer() != null ? excelData.getCorrectAnswer().toUpperCase() : "";
        // 添加选项A
        if (StringUtils.isNotBlank(excelData.getOptionA())) {
            options.add(QuestionOptionDTO.builder()
                    .content(excelData.getOptionA())
                    .isCorrect(correctAnswer.contains("A"))
                    .orderIndex(0)
                    .build());
        }
        // 添加选项B
        if (StringUtils.isNotBlank(excelData.getOptionB())) {
            options.add(QuestionOptionDTO.builder()
                    .content(excelData.getOptionB())
                    .isCorrect(correctAnswer.contains("B"))
                    .orderIndex(1)
                    .build());
        }
        // 添加选项C
        if (StringUtils.isNotBlank(excelData.getOptionC())) {
            options.add(QuestionOptionDTO.builder()
                    .content(excelData.getOptionC())
                    .isCorrect(correctAnswer.contains("C"))
                    .orderIndex(2)
                    .build());
        }
        // 添加选项D
        if (StringUtils.isNotBlank(excelData.getOptionD())) {
            options.add(QuestionOptionDTO.builder()
                    .content(excelData.getOptionD())
                    .isCorrect(correctAnswer.contains("D"))
                    .orderIndex(3)
                    .build());
        }
        // 添加选项E
        if (StringUtils.isNotBlank(excelData.getOptionE())) {
            options.add(QuestionOptionDTO.builder()
                    .content(excelData.getOptionE())
                    .isCorrect(correctAnswer.contains("E"))
                    .orderIndex(4)
                    .build());
        }
        // 添加选项F
        if (StringUtils.isNotBlank(excelData.getOptionF())) {
            options.add(QuestionOptionDTO.builder()
                    .content(excelData.getOptionF())
                    .isCorrect(correctAnswer.contains("F"))
                    .orderIndex(5)
                    .build());
        }
        return options;
    }
    /**
     * 加载机构所有标签
     */
    private void loadAllTags() {
        try {
            // 获取机构的所有标签
            List<QuestionTagVO> tags = questionTagService.getAllTags(institutionId);
            // 缓存标签
            for (QuestionTagVO tag : tags) {
                tagCache.put(tag.getName(), tag);
            }
            log.info("已加载机构标签 {} 个", tagCache.size());
        } catch (Exception e) {
            log.error("加载机构标签失败", e);
        }
    }
    /**
     * 处理题目标签
     */
    private void processQuestionTags(Long questionId, String tagsStr) {
        if (tagsStr == null || tagsStr.trim().isEmpty()) {
            return;
        }
        // 拆分标签
        String[] tagNames = tagsStr.split(",");
        for (String tagName : tagNames) {
            tagName = tagName.trim();
            if (tagName.isEmpty()) {
                continue;
            }
            try {
                // 使用新的事务处理标签
                final String finalTagName = tagName;
                transactionTemplate.execute(new TransactionCallback<Void>() {
                    @Override
                    public Void doInTransaction(TransactionStatus status) {
                        try {
                            // 检查标签是否存在
                            Long tagId = getOrCreateTag(finalTagName);
                            // 关联标签到题目
                            if (tagId != null) {
                                questionTagService.addTagToQuestion(questionId, tagId, institutionId);
                            }
                            return null;
                        } catch (Exception e) {
                            status.setRollbackOnly();
                            throw e;
                        }
                    }
                });
            } catch (Exception e) {
                // 记录警告但不影响主流程
                log.warn("为题目 {} 添加标签 {} 失败: {}", questionId, tagName, e.getMessage());
            }
        }
    }
    /**
     * 获取或创建标签
     */
    private Long getOrCreateTag(String tagName) {
        // 先从缓存中查找
        if (tagCache.containsKey(tagName)) {
            return tagCache.get(tagName).getId();
        }
        try {
            // 创建新标签
            com.zhangziqi.online_course_mine.model.dto.QuestionTagDTO tagDTO = 
                com.zhangziqi.online_course_mine.model.dto.QuestionTagDTO.builder()
                    .institutionId(institutionId)
                    .name(tagName)
                    .build();
            com.zhangziqi.online_course_mine.model.vo.QuestionTagVO newTag = 
                questionTagService.createTag(tagDTO, userId);
            // 添加到缓存
            if (newTag != null) {
                tagCache.put(tagName, newTag);
                return newTag.getId();
            }
        } catch (Exception e) {
            log.error("创建标签 {} 失败: {}", tagName, e.getMessage());
        }
        return null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/exception/BusinessException.java">
package com.zhangziqi.online_course_mine.exception;
import lombok.Getter;
/**
 * 业务异常
 */
@Getter
public class BusinessException extends RuntimeException {
    /**
     * 错误码
     */
    private final int code;
    /**
     * 错误消息
     */
    private final String message;
    public BusinessException(int code, String message) {
        super(message);
        this.code = code;
        this.message = message;
    }
    public BusinessException(String message) {
        this(500, message);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/exception/GlobalExceptionHandler.java">
package com.zhangziqi.online_course_mine.exception;
import com.zhangziqi.online_course_mine.model.vo.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.AuthenticationException;
import org.springframework.validation.BindException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
/**
 * 全局异常处理器
 */
@Slf4j
@RestControllerAdvice
public class GlobalExceptionHandler {
    /**
     * 处理业务异常
     */
    @ExceptionHandler(BusinessException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public Result<Void> handleBusinessException(BusinessException e) {
        log.error("业务异常: {}", e.getMessage());
        return Result.fail(e.getCode(), e.getMessage());
    }
    /**
     * 处理服务层异常
     */
    @ExceptionHandler(ServiceException.class)
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public Result<Void> handleServiceException(ServiceException e) {
        log.error("服务层异常: {}", e.getMessage());
        int code;
        try {
            code = Integer.parseInt(e.getCode());
        } catch (NumberFormatException ex) {
            code = 400; // 默认使用HTTP 400状态码
        }
        return Result.fail(code, e.getMessage());
    }
    /**
     * 处理认证异常
     */
    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    @ExceptionHandler(AuthenticationException.class)
    public Result<Void> handleAuthenticationException(AuthenticationException e) {
        log.error("认证异常: {}", e.getMessage());
        String message = e instanceof BadCredentialsException ? "用户名或密码错误" : "认证失败";
        return Result.fail(401, message);
    }
    /**
     * 处理授权异常
     */
    @ResponseStatus(HttpStatus.FORBIDDEN)
    @ExceptionHandler(AccessDeniedException.class)
    public Result<Void> handleAccessDeniedException(AccessDeniedException e) {
        log.error("权限不足: {}", e.getMessage());
        return Result.fail(403, "权限不足");
    }
    /**
     * 处理参数校验异常
     */
    @ExceptionHandler({MethodArgumentNotValidException.class, BindException.class})
    public Result<Void> handleValidationException(Exception e) {
        List<FieldError> fieldErrors;
        if (e instanceof MethodArgumentNotValidException) {
            fieldErrors = ((MethodArgumentNotValidException) e).getBindingResult().getFieldErrors();
        } else {
            fieldErrors = ((BindException) e).getBindingResult().getFieldErrors();
        }
        String message = fieldErrors.stream()
                .map(error -> error.getField() + ": " + error.getDefaultMessage())
                .collect(Collectors.joining(", "));
        log.error("参数校验异常: {}", message);
        return Result.fail(400, message);
    }
    /**
     * 处理其他异常
     */
    @ExceptionHandler(Exception.class)
    public Result<Void> handleException(Exception e) {
        log.error("系统异常", e);
        return Result.fail(500, "系统异常，请联系管理员");
    }
    /**
     * 处理资源未找到异常
     */
    @ExceptionHandler(ResourceNotFoundException.class)
    @ResponseStatus(HttpStatus.NOT_FOUND)
    public Result<Void> handleResourceNotFoundException(ResourceNotFoundException e) {
        log.error("资源未找到: {}", e.getMessage());
        return Result.fail(404, e.getMessage());
    }
    /**
     * 处理凭证错误异常
     */
    @ExceptionHandler(BadCredentialsException.class)
    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    public Result<Void> handleBadCredentialsException(BadCredentialsException e) {
        log.error("认证失败: {}", e.getMessage());
        return Result.fail(401, "用户名或密码错误");
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/exception/ResourceNotFoundException.java">
package com.zhangziqi.online_course_mine.exception;
/**
 * 资源未找到异常
 */
public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
    public ResourceNotFoundException(String message, Throwable cause) {
        super(message, cause);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/exception/ServiceException.java">
package com.zhangziqi.online_course_mine.exception;
/**
 * 服务层业务逻辑异常
 */
public class ServiceException extends RuntimeException {
    /**
     * 错误码
     */
    private String code;
    /**
     * 构造方法
     *
     * @param message 错误信息
     */
    public ServiceException(String message) {
        super(message);
        this.code = "SERVICE_ERROR";
    }
    /**
     * 构造方法
     *
     * @param message 错误信息
     * @param code 错误码
     */
    public ServiceException(String message, String code) {
        super(message);
        this.code = code;
    }
    /**
     * 构造方法
     *
     * @param message 错误信息
     * @param cause 错误原因
     */
    public ServiceException(String message, Throwable cause) {
        super(message, cause);
        this.code = "SERVICE_ERROR";
    }
    /**
     * 获取错误码
     *
     * @return 错误码
     */
    public String getCode() {
        return code;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/converter/InstitutionApplicationConverter.java">
package com.zhangziqi.online_course_mine.model.converter;
import com.zhangziqi.online_course_mine.model.entity.InstitutionApplication;
import com.zhangziqi.online_course_mine.model.vo.InstitutionApplicationVO;
import org.springframework.beans.BeanUtils;
/**
 * 机构申请转换器
 */
public class InstitutionApplicationConverter {
    /**
     * 将实体转换为VO
     *
     * @param application 机构申请实体
     * @return 机构申请VO
     */
    public static InstitutionApplicationVO toVO(InstitutionApplication application) {
        if (application == null) {
            return null;
        }
        InstitutionApplicationVO vo = new InstitutionApplicationVO();
        BeanUtils.copyProperties(application, vo);
        return vo;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/converter/InstitutionConverter.java">
package com.zhangziqi.online_course_mine.model.converter;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.vo.InstitutionVO;
import org.springframework.beans.BeanUtils;
/**
 * 机构转换器
 */
public class InstitutionConverter {
    /**
     * 将实体转换为VO
     *
     * @param institution 机构实体
     * @return 机构VO
     */
    public static InstitutionVO toVO(Institution institution) {
        if (institution == null) {
            return null;
        }
        InstitutionVO vo = new InstitutionVO();
        BeanUtils.copyProperties(institution, vo);
        return vo;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/CategoryDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Data;
/**
 * 分类数据传输对象
 */
@Data
public class CategoryDTO {
    /**
     * 分类ID（更新时使用）
     */
    private Long id;
    /**
     * 分类名称
     */
    @NotBlank(message = "分类名称不能为空")
    @Size(max = 100, message = "分类名称不能超过100个字符")
    private String name;
    /**
     * 分类编码
     */
    @NotBlank(message = "分类编码不能为空")
    @Size(max = 50, message = "分类编码不能超过50个字符")
    @Pattern(regexp = "^[a-zA-Z0-9_-]+$", message = "分类编码只能包含字母、数字、下划线和连字符")
    private String code;
    /**
     * 分类描述
     */
    @Size(max = 500, message = "分类描述不能超过500个字符")
    private String description;
    /**
     * 父分类ID
     */
    private Long parentId;
    /**
     * 排序索引
     */
    private Integer orderIndex;
    /**
     * 是否启用
     */
    private Boolean enabled = true;
    /**
     * 分类图标
     */
    @Size(max = 255, message = "图标路径不能超过255个字符")
    private String icon;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/ChangePasswordDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 密码修改DTO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "密码修改请求")
public class ChangePasswordDTO {
    @NotBlank(message = "旧密码不能为空")
    @Schema(description = "旧密码", example = "oldPassword123")
    private String oldPassword;
    @NotBlank(message = "新密码不能为空")
    @Pattern(regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,20}$", 
            message = "密码必须包含大小写字母和数字，长度为8-20位")
    @Schema(description = "新密码", example = "newPassword123")
    private String newPassword;
    @NotBlank(message = "确认密码不能为空")
    @Schema(description = "确认密码", example = "newPassword123")
    private String confirmPassword;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/chapter/ChapterCreateDTO.java">
package com.zhangziqi.online_course_mine.model.dto.chapter;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.Min;
/**
 * 章节创建数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ChapterCreateDTO {
    /**
     * 章节标题
     */
    @NotBlank(message = "章节标题不能为空")
    @Size(max = 200, message = "章节标题长度不能超过200个字符")
    private String title;
    /**
     * 章节描述
     */
    @Size(max = 1000, message = "章节描述长度不能超过1000个字符")
    private String description;
    /**
     * 所属课程ID
     */
    @NotNull(message = "课程ID不能为空")
    private Long courseId;
    /**
     * 排序索引
     */
    @Min(value = 0, message = "排序索引不能为负数")
    private Integer orderIndex;
    /**
     * 访问类型 (0-免费试学, 1-付费访问)
     */
    private Integer accessType;
    /**
     * 学习时长估计(分钟)
     */
    @Min(value = 0, message = "学习时长不能为负数")
    private Integer estimatedMinutes;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/chapter/ChapterOrderDTO.java">
package com.zhangziqi.online_course_mine.model.dto.chapter;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Min;
/**
 * 章节排序数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ChapterOrderDTO {
    /**
     * 章节ID
     */
    @NotNull(message = "章节ID不能为空")
    private Long id;
    /**
     * 排序索引
     */
    @NotNull(message = "排序索引不能为空")
    @Min(value = 0, message = "排序索引不能为负数")
    private Integer orderIndex;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/course/CourseCreateDTO.java">
package com.zhangziqi.online_course_mine.model.dto.course;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.DecimalMax;
import java.math.BigDecimal;
import java.util.Set;
/**
 * 课程创建数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class CourseCreateDTO {
    /**
     * 课程标题
     */
    @NotBlank(message = "课程标题不能为空")
    @Size(max = 200, message = "课程标题长度不能超过200个字符")
    private String title;
    /**
     * 课程描述
     */
    @Size(max = 2000, message = "课程描述长度不能超过2000个字符")
    private String description;
    /**
     * 课程分类ID
     */
    private Long categoryId;
    /**
     * 课程标签ID列表
     */
    private Set<Long> tagIds;
    /**
     * 付费类型 (0-免费, 1-付费)
     */
    @NotNull(message = "付费类型不能为空")
    private Integer paymentType;
    /**
     * 课程价格 (付费课程必填)
     */
    @DecimalMin(value = "0.0", message = "价格不能为负数")
    @DecimalMax(value = "100000.0", message = "价格不能超过100000")
    private BigDecimal price;
    /**
     * 折扣价格
     */
    @DecimalMin(value = "0.0", message = "折扣价格不能为负数")
    @DecimalMax(value = "100000.0", message = "折扣价格不能超过100000")
    private BigDecimal discountPrice;
    /**
     * 难度级别 (1-初级, 2-中级, 3-高级)
     */
    @Min(value = 1, message = "难度级别最小为1")
    @Max(value = 3, message = "难度级别最大为3")
    private Integer difficulty;
    /**
     * 适合人群
     */
    @Size(max = 1000, message = "适合人群描述长度不能超过1000个字符")
    private String targetAudience;
    /**
     * 学习目标
     */
    @Size(max = 1000, message = "学习目标描述长度不能超过1000个字符")
    private String learningObjectives;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/course/CourseReviewDTO.java">
package com.zhangziqi.online_course_mine.model.dto.course;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
/**
 * 课程审核DTO
 * 用于审核员提交审核结果
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "课程审核DTO")
public class CourseReviewDTO {
    /**
     * 审核意见/拒绝原因
     */
    @NotBlank(message = "审核意见不能为空")
    @Size(max = 500, message = "审核意见不能超过500个字符")
    @Schema(description = "审核意见/拒绝原因", required = true, example = "内容质量不符合要求")
    private String reason;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/course/CourseSearchDTO.java">
package com.zhangziqi.online_course_mine.model.dto.course;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.math.BigDecimal;
import java.util.List;
/**
 * 课程搜索数据传输对象
 * 用于封装课程搜索参数
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "课程搜索DTO")
public class CourseSearchDTO {
    /**
     * 搜索关键词，用于匹配课程标题、描述
     */
    @Schema(description = "搜索关键词", example = "Java编程")
    private String keyword;
    /**
     * 课程分类ID
     */
    @Schema(description = "课程分类ID", example = "1")
    private Long categoryId;
    /**
     * 课程标签ID列表
     */
    @Schema(description = "课程标签ID列表", example = "[1, 2, 3]")
    private List<Long> tagIds;
    /**
     * 课程难度级别 (1-初级, 2-中级, 3-高级)
     */
    @Schema(description = "课程难度级别(1-初级, 2-中级, 3-高级)", example = "2")
    private Integer difficulty;
    /**
     * 最低价格
     */
    @Schema(description = "最低价格", example = "0")
    private BigDecimal minPrice;
    /**
     * 最高价格
     */
    @Schema(description = "最高价格", example = "100")
    private BigDecimal maxPrice;
    /**
     * 付费类型 (0-免费, 1-付费)
     */
    @Schema(description = "付费类型(0-免费, 1-付费)", example = "0")
    private Integer paymentType;
    /**
     * 机构ID
     */
    @Schema(description = "机构ID", example = "1")
    private Long institutionId;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/CourseReviewDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 课程审核DTO
 * 用于提交审核意见
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "课程审核DTO")
public class CourseReviewDTO {
    /**
     * 审核意见或拒绝原因
     */
    @NotBlank(message = "审核意见不能为空")
    @Size(max = 500, message = "审核意见最多500个字符")
    @Schema(description = "审核意见或拒绝原因", example = "内容质量不符合要求，需要进一步完善")
    private String reason;
    /**
     * 审核评分（可选）
     */
    @Schema(description = "审核评分（1-5）", example = "4")
    private Integer score;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/EmailUpdateDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 邮箱更新DTO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "邮箱更新请求")
public class EmailUpdateDTO {
    @NotBlank(message = "新邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "新邮箱", example = "newemail@example.com")
    private String newEmail;
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "邮箱验证码", example = "123456")
    private String emailCode;
    @NotBlank(message = "当前密码不能为空")
    @Schema(description = "当前密码", example = "password123")
    private String password;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/EmailVerificationDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
/**
 * 邮箱验证码请求DTO
 */
@Data
@Schema(description = "邮箱验证码请求")
public class EmailVerificationDTO {
    /**
     * 邮箱
     */
    @NotBlank(message = "邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "邮箱", example = "zhangsan@example.com")
    private String email;
    /**
     * 验证码Key
     */
    @NotBlank(message = "验证码Key不能为空")
    @Schema(description = "验证码Key", example = "123456")
    private String captchaKey;
    /**
     * 验证码
     */
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "验证码", example = "1234")
    private String captchaCode;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/InstitutionApplicationQueryDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Data;
/**
 * 机构申请查询DTO
 */
@Data
@Schema(description = "机构申请查询参数")
public class InstitutionApplicationQueryDTO {
    @Schema(description = "申请ID", example = "APP123456")
    private String applicationId;
    @Schema(description = "机构名称", example = "示例教育机构")
    private String name;
    @Schema(description = "联系人", example = "张三")
    private String contactPerson;
    @Schema(description = "联系邮箱", example = "contact@example.com")
    private String contactEmail;
    @Schema(description = "状态：0-待审核，1-已通过，2-已拒绝", example = "0")
    private Integer status;
    @Schema(description = "页码", defaultValue = "1")
    private Integer pageNum = 1;
    @Schema(description = "每页条数", defaultValue = "10")
    private Integer pageSize = 10;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/InstitutionApplyDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Data;
/**
 * 机构申请DTO
 */
@Data
@Schema(description = "机构申请参数")
public class InstitutionApplyDTO {
    @NotBlank(message = "机构名称不能为空")
    @Schema(description = "机构名称", example = "示例教育机构")
    private String name;
    @Schema(description = "机构Logo", example = "https://example.com/logo.png")
    private String logo;
    @Size(max = 500, message = "机构描述最多500字")
    @Schema(description = "机构描述", example = "专注于提供高质量的在线课程...")
    private String description;
    @NotBlank(message = "联系人不能为空")
    @Schema(description = "联系人", example = "张三")
    private String contactPerson;
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    @Schema(description = "联系电话", example = "13800138000")
    private String contactPhone;
    @NotBlank(message = "联系邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "联系邮箱", example = "contact@example.com")
    private String contactEmail;
    @Schema(description = "地址", example = "北京市朝阳区xxx街道xxx号")
    private String address;
    @NotBlank(message = "验证码Key不能为空")
    @Schema(description = "验证码Key", example = "7d8f3e")
    private String captchaKey;
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "验证码", example = "A2B3")
    private String captchaCode;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/InstitutionRegisterDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Data;
/**
 * 机构用户注册DTO
 */
@Data
@Schema(description = "机构用户注册参数")
public class InstitutionRegisterDTO {
    @NotBlank(message = "用户名不能为空")
    @Size(min = 4, max = 20, message = "用户名长度为4-20位")
    @Pattern(regexp = "^[a-zA-Z0-9_]+$", message = "用户名只能包含字母、数字和下划线")
    @Schema(description = "用户名", example = "institution_user")
    private String username;
    @NotBlank(message = "密码不能为空")
    @Size(min = 6, max = 20, message = "密码长度为6-20位")
    @Schema(description = "密码", example = "password123")
    private String password;
    @NotBlank(message = "邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "邮箱", example = "user@example.com")
    private String email;
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    @Schema(description = "手机号", example = "13800138000")
    private String phone;
    @NotBlank(message = "机构注册码不能为空")
    @Schema(description = "机构注册码", example = "ABC12345")
    private String institutionCode;
    @NotBlank(message = "验证码Key不能为空")
    @Schema(description = "验证码Key", example = "7d8f3e")
    private String captchaKey;
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "验证码", example = "A2B3")
    private String captchaCode;
    @NotBlank(message = "邮箱验证码不能为空")
    @Size(min = 6, max = 6, message = "邮箱验证码长度必须为6位")
    @Pattern(regexp = "^\\d{6}$", message = "邮箱验证码必须为6位数字")
    @Schema(description = "邮箱验证码", example = "123456")
    private String emailCode;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/JwtTokenDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * JWT令牌数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class JwtTokenDTO {
    /**
     * 访问令牌
     */
    private String accessToken;
    /**
     * 刷新令牌
     */
    private String refreshToken;
    /**
     * 令牌类型
     */
    @Builder.Default
    private String tokenType = "Bearer";
    /**
     * 过期时间（毫秒）
     */
    private long expiresIn;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/LoginDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
/**
 * 登录请求DTO
 */
@Data
@Schema(description = "登录请求")
public class LoginDTO {
    /**
     * 用户名
     */
    @NotBlank(message = "用户名不能为空")
    @Schema(description = "用户名", example = "zhangsan")
    private String username;
    /**
     * 密码
     */
    @NotBlank(message = "密码不能为空")
    @Schema(description = "密码", example = "password123")
    private String password;
    /**
     * 验证码Key
     */
    @NotBlank(message = "验证码Key不能为空")
    @Schema(description = "验证码Key", example = "123456")
    private String captchaKey;
    /**
     * 验证码
     */
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "验证码", example = "1234")
    private String captchaCode;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/media/CompleteUploadDTO.java">
package com.zhangziqi.online_course_mine.model.dto.media;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import lombok.Data;
import java.util.List;
@Data
public class CompleteUploadDTO {
    /**
     * 上传ID
     */
    @NotNull(message = "上传ID不能为空")
    private String uploadId;
    /**
     * 已完成的分片信息列表
     */
    @NotEmpty(message = "分片信息不能为空")
    private List<PartInfo> completedParts;
    @Data
    public static class PartInfo {
        /**
         * 分片编号
         */
        private int partNumber;
        /**
         * 分片的ETag
         */
        private String eTag;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/media/MediaUploadInitDTO.java">
package com.zhangziqi.online_course_mine.model.dto.media;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 媒体上传初始化DTO
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class MediaUploadInitDTO {
    @NotBlank(message = "标题不能为空")
    private String title;                // 媒体标题
    private String description;          // 媒体描述（可选）
    @NotBlank(message = "文件名不能为空")
    private String filename;             // 原始文件名
    @NotBlank(message = "内容类型不能为空")
    private String contentType;          // 内容类型
    @NotNull(message = "文件大小不能为空")
    @Min(value = 1, message = "文件大小必须大于0")
    private Long fileSize;               // 文件大小（字节）
    private Integer chunkSize;           // 分片大小（字节，可选）
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/media/PresignedUrlInfo.java">
package com.zhangziqi.online_course_mine.model.dto.media;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 预签名URL信息
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class PresignedUrlInfo {
    private Integer partNumber; // 分片编号
    private String url;         // 预签名URL
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/media/UploadInitiationVO.java">
package com.zhangziqi.online_course_mine.model.dto.media;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.List;
/**
 * 上传初始化响应VO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class UploadInitiationVO {
    private Long mediaId;                        // 媒体ID
    private String uploadId;                     // 上传ID
    private Integer totalParts;                  // 总分片数
    private Long chunkSize;                      // 分片大小（字节）
    private List<PresignedUrlInfo> presignedUrls; // 预签名URL列表
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/media/UploadStatusInfo.java">
package com.zhangziqi.online_course_mine.model.dto.media;
import com.zhangziqi.online_course_mine.model.enums.MediaStatus;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
/**
 * 上传状态信息
 * 用于在Redis中保存分片上传的状态
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class UploadStatusInfo {
    private Long mediaId;            // 媒体ID
    private Long institutionId;      // 机构ID
    private Long uploaderId;         // 上传者ID
    private String uploadId;         // S3上传ID
    private String objectKey;        // S3对象键
    private String filename;         // 原始文件名
    private String contentType;      // 内容类型
    private Long fileSize;           // 文件总大小
    private MediaStatus status;      // 上传状态
    private Integer totalParts;      // 总分片数
    @Builder.Default
    private List<PartInfo> completedParts = new ArrayList<>(); // 已完成的分片信息
    private LocalDateTime initiatedAt;     // 初始化时间
    private LocalDateTime lastUpdatedAt;   // 最后更新时间
    private LocalDateTime expiresAt;       // 过期时间
    /**
     * 分片信息
     */
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class PartInfo {
        private Integer partNumber;  // 分片编号
        private String eTag;         // 分片ETag
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/order/OrderCreateDTO.java">
package com.zhangziqi.online_course_mine.model.dto.order;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 订单创建数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class OrderCreateDTO {
    /**
     * 课程ID
     */
    @NotNull(message = "课程ID不能为空")
    private Long courseId;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/order/OrderRefundDTO.java">
package com.zhangziqi.online_course_mine.model.dto.order;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.math.BigDecimal;
/**
 * 订单退款数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class OrderRefundDTO {
    /**
     * 退款金额（默认全额退款）
     */
    private BigDecimal refundAmount;
    /**
     * 退款原因
     */
    @NotBlank(message = "退款原因不能为空")
    @Size(max = 500, message = "退款原因不能超过500个字符")
    private String refundReason;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/PermissionDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 权限数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "权限数据")
public class PermissionDTO {
    @Schema(description = "权限ID")
    private Long id;
    @NotBlank(message = "权限名称不能为空")
    @Size(min = 2, max = 50, message = "权限名称长度为2-50个字符")
    @Schema(description = "权限名称", example = "用户查询")
    private String name;
    @NotBlank(message = "权限编码不能为空")
    @Size(min = 4, max = 50, message = "权限编码长度为4-50个字符")
    @Pattern(regexp = "^[A-Z0-9_]+$", message = "权限编码只能包含大写字母、数字和下划线")
    @Schema(description = "权限编码", example = "USER_QUERY")
    private String code;
    @Schema(description = "权限描述")
    private String description;
    @Schema(description = "资源URL")
    private String url;
    @Schema(description = "HTTP方法", example = "GET")
    private String method;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/QuestionDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.util.List;
/**
 * 题目数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class QuestionDTO {
    /**
     * 题目ID（创建时为null，更新时必须提供）
     */
    private Long id;
    /**
     * 所属机构ID
     */
    @NotNull(message = "机构ID不能为空")
    private Long institutionId;
    /**
     * 题目标题
     */
    @NotBlank(message = "题目标题不能为空")
    @Size(max = 255, message = "题目标题长度不能超过255个字符")
    private String title;
    /**
     * 题目内容
     */
    @Size(max = 2000, message = "题目内容长度不能超过2000个字符")
    private String content;
    /**
     * 题目类型：0-单选题，1-多选题，2-判断题，3-填空题，4-简答题
     */
    @NotNull(message = "题目类型不能为空")
    @Min(value = 0, message = "题目类型值无效")
    @Max(value = 4, message = "题目类型值无效")
    private Integer type;
    /**
     * 难度级别：1-简单，2-中等，3-困难
     */
    @NotNull(message = "难度级别不能为空")
    @Min(value = 1, message = "难度级别必须介于1-3之间")
    @Max(value = 3, message = "难度级别必须介于1-3之间")
    private Integer difficulty;
    /**
     * 分值
     */
    @NotNull(message = "分值不能为空")
    @Min(value = 1, message = "分值必须大于0")
    @Max(value = 100, message = "分值不能超过100")
    private Integer score;
    /**
     * 解析说明
     */
    @Size(max = 2000, message = "解析说明长度不能超过2000个字符")
    private String analysis;
    /**
     * 题目选项列表（仅用于单选题、多选题和判断题）
     */
    @Valid
    private List<QuestionOptionDTO> options;
    /**
     * 正确答案（填空题必填，简答题可选）
     */
    @Size(max = 2000, message = "正确答案长度不能超过2000个字符")
    private String answer;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/QuestionGroupDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
/**
 * 题目组数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class QuestionGroupDTO {
    /**
     * 题目组ID（创建时为null，更新时必须提供）
     */
    private Long id;
    /**
     * 所属机构ID
     */
    @NotNull(message = "机构ID不能为空")
    private Long institutionId;
    /**
     * 题目组名称
     */
    @NotBlank(message = "题目组名称不能为空")
    @Size(max = 100, message = "题目组名称长度不能超过100个字符")
    private String name;
    /**
     * 题目组描述
     */
    @Size(max = 500, message = "题目组描述长度不能超过500个字符")
    private String description;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/QuestionGroupItemDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
/**
 * 题目组项数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class QuestionGroupItemDTO {
    /**
     * 题目组项ID（创建时为null，更新时可能需要提供）
     */
    private Long id;
    /**
     * 题目组ID
     */
    @NotNull(message = "题目组ID不能为空")
    private Long groupId;
    /**
     * 题目ID
     */
    @NotNull(message = "题目ID不能为空")
    private Long questionId;
    /**
     * 在组中的顺序
     */
    @NotNull(message = "顺序不能为空")
    @Min(value = 0, message = "顺序必须大于等于0")
    private Integer orderIndex;
    /**
     * 难度级别（可覆盖题目原始难度）
     */
    private Integer difficulty;
    /**
     * 分值（可覆盖题目原始分值）
     */
    private Integer score;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/QuestionOptionDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
/**
 * 题目选项数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class QuestionOptionDTO {
    /**
     * 选项ID（创建时为null，更新时可能需要提供）
     */
    private Long id;
    /**
     * 选项内容
     */
    @NotBlank(message = "选项内容不能为空")
    @Size(max = 1000, message = "选项内容长度不能超过1000个字符")
    private String content;
    /**
     * 是否为正确选项
     */
    @NotNull(message = "必须指定选项是否正确")
    private Boolean isCorrect;
    /**
     * 选项顺序
     */
    @NotNull(message = "选项顺序不能为空")
    private Integer orderIndex;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/QuestionTagDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
/**
 * 题目标签数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class QuestionTagDTO {
    /**
     * 标签ID（创建时为null，更新时必须提供）
     */
    private Long id;
    /**
     * 所属机构ID
     */
    @NotNull(message = "机构ID不能为空")
    private Long institutionId;
    /**
     * 标签名称
     */
    @NotBlank(message = "标签名称不能为空")
    @Size(max = 50, message = "标签名称长度不能超过50个字符")
    private String name;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/RefreshTokenDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
/**
 * 刷新令牌请求DTO
 */
@Data
@Schema(description = "刷新令牌请求")
public class RefreshTokenDTO {
    /**
     * 刷新令牌
     */
    @NotBlank(message = "刷新令牌不能为空")
    @Schema(description = "刷新令牌", example = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...")
    private String refreshToken;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/RegisterDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Data;
/**
 * 注册请求DTO
 */
@Data
@Schema(description = "注册请求")
public class RegisterDTO {
    /**
     * 用户名
     */
    @NotBlank(message = "用户名不能为空")
    @Size(min = 4, max = 20, message = "用户名长度为4-20位")
    @Pattern(regexp = "^[a-zA-Z0-9_]+$", message = "用户名只能包含字母、数字和下划线")
    @Schema(description = "用户名", example = "zhangsan")
    private String username;
    /**
     * 密码
     */
    @NotBlank(message = "密码不能为空")
    @Size(min = 6, max = 20, message = "密码长度为6-20位")
    @Schema(description = "密码", example = "password123")
    private String password;
    /**
     * 邮箱
     */
    @NotBlank(message = "邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "邮箱", example = "zhangsan@example.com")
    private String email;
    /**
     * 手机号
     */
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    @Schema(description = "手机号", example = "13812345678")
    private String phone;
    /**
     * 验证码Key
     */
    @NotBlank(message = "验证码Key不能为空")
    @Schema(description = "验证码Key", example = "123456")
    private String captchaKey;
    /**
     * 验证码
     */
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "验证码", example = "1234")
    private String captchaCode;
    /**
     * 邮箱验证码
     */
    @NotBlank(message = "邮箱验证码不能为空")
    @Size(min = 6, max = 6, message = "邮箱验证码长度必须为6位")
    @Pattern(regexp = "^\\d{6}$", message = "邮箱验证码必须为6位数字")
    @Schema(description = "邮箱验证码", example = "123456")
    private String emailCode;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/review/ReviewCreateDTO.java">
package com.zhangziqi.online_course_mine.model.dto.review;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 创建课程评论DTO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ReviewCreateDTO {
    /**
     * 课程ID
     */
    @NotNull(message = "课程ID不能为空")
    private Long courseId;
    /**
     * 评分 (1-5)
     */
    @NotNull(message = "评分不能为空")
    @Min(value = 1, message = "评分最小为1")
    @Max(value = 5, message = "评分最大为5")
    private Integer rating;
    /**
     * 评价内容
     */
    @Size(max = 1000, message = "评价内容不能超过1000个字符")
    private String content;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/review/ReviewQueryDTO.java">
package com.zhangziqi.online_course_mine.model.dto.review;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 课程评论查询DTO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ReviewQueryDTO {
    /**
     * 课程ID
     */
    private Long courseId;
    /**
     * 排序方式
     * newest - 最新
     * highest_rating - 评分从高到低
     * lowest_rating - 评分从低到高
     */
    @Builder.Default
    private String orderBy = "newest";
    /**
     * 筛选特定评分
     */
    private Integer ratingFilter;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/RoleDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.Set;
/**
 * 角色数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "角色数据")
public class RoleDTO {
    @Schema(description = "角色ID")
    private Long id;
    @NotBlank(message = "角色名称不能为空")
    @Size(min = 2, max = 50, message = "角色名称长度为2-50个字符")
    @Schema(description = "角色名称", example = "系统管理员")
    private String name;
    @NotBlank(message = "角色编码不能为空")
    @Size(min = 4, max = 50, message = "角色编码长度为4-50个字符")
    @Pattern(regexp = "^ROLE_[A-Z0-9_]+$", message = "角色编码必须以ROLE_开头，且只能包含大写字母、数字和下划线")
    @Schema(description = "角色编码", example = "ROLE_ADMIN")
    private String code;
    @Schema(description = "角色描述")
    private String description;
    @Schema(description = "权限ID列表")
    private Set<Long> permissionIds;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/section/SectionCreateDTO.java">
package com.zhangziqi.online_course_mine.model.dto.section;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.Min;
/**
 * 小节创建数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class SectionCreateDTO {
    /**
     * 小节标题
     */
    @NotBlank(message = "小节标题不能为空")
    @Size(max = 200, message = "小节标题长度不能超过200个字符")
    private String title;
    /**
     * 小节描述
     */
    @Size(max = 1000, message = "小节描述长度不能超过1000个字符")
    private String description;
    /**
     * 所属章节ID
     */
    @NotNull(message = "章节ID不能为空")
    private Long chapterId;
    /**
     * 排序索引
     */
    @Min(value = 0, message = "排序索引不能为负数")
    private Integer orderIndex;
    /**
     * 内容类型 (video, document, audio, text, image, mixed)
     */
    @NotBlank(message = "内容类型不能为空")
    private String contentType;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/section/SectionOrderDTO.java">
package com.zhangziqi.online_course_mine.model.dto.section;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Min;
/**
 * 小节排序数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class SectionOrderDTO {
    /**
     * 小节ID
     */
    @NotNull(message = "小节ID不能为空")
    private Long id;
    /**
     * 排序索引
     */
    @NotNull(message = "排序索引不能为空")
    @Min(value = 0, message = "排序索引不能为负数")
    private Integer orderIndex;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/section/SectionQuestionGroupConfigDTO.java">
package com.zhangziqi.online_course_mine.model.dto.section;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import jakarta.validation.constraints.NotNull;
/**
 * 小节题目组配置数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class SectionQuestionGroupConfigDTO {
    /**
     * 是否随机题目顺序
     */
    @Builder.Default
    private Boolean randomOrder = false;
    /**
     * 是否按难度顺序排序
     */
    @Builder.Default
    private Boolean orderByDifficulty = false;
    /**
     * 是否显示答案解析
     */
    @Builder.Default
    private Boolean showAnalysis = true;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/TagDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Data;
/**
 * 标签数据传输对象
 */
@Data
public class TagDTO {
    /**
     * 标签ID（更新时使用）
     */
    private Long id;
    /**
     * 标签名称
     */
    @NotBlank(message = "标签名称不能为空")
    @Size(max = 50, message = "标签名称不能超过50个字符")
    private String name;
    /**
     * 标签描述
     */
    @Size(max = 255, message = "标签描述不能超过255个字符")
    private String description;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/UserDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.Set;
/**
 * 用户数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "用户数据")
public class UserDTO {
    @Schema(description = "用户ID")
    private Long id;
    @NotBlank(message = "用户名不能为空")
    @Size(min = 4, max = 20, message = "用户名长度为4-20位")
    @Pattern(regexp = "^[a-zA-Z0-9_]+$", message = "用户名只能包含字母、数字和下划线")
    @Schema(description = "用户名", example = "zhangsan")
    private String username;
    @Schema(description = "密码")
    private String password;
    @NotBlank(message = "邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "邮箱", example = "zhangsan@example.com")
    private String email;
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    @Schema(description = "手机号", example = "13812345678")
    private String phone;
    @Schema(description = "头像")
    private String avatar;
    @Schema(description = "昵称")
    private String nickname;
    @Schema(description = "状态：0-禁用，1-正常")
    private Integer status;
    @Schema(description = "机构ID")
    private Long institutionId;
    @Schema(description = "角色ID列表")
    private Set<Long> roleIds;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/UserProfileDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Pattern;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 用户个人信息更新DTO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "用户个人信息更新请求")
public class UserProfileDTO {
    @Schema(description = "昵称", example = "张三")
    private String nickname;
    @Schema(description = "手机号", example = "13800138000")
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    private String phone;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/UserQueryDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Data;
/**
 * 用户查询参数
 */
@Data
@Schema(description = "用户查询参数")
public class UserQueryDTO {
    @Schema(description = "用户名")
    private String username;
    @Schema(description = "邮箱")
    private String email;
    @Schema(description = "手机号")
    private String phone;
    @Schema(description = "状态：0-禁用，1-正常")
    private Integer status;
    @Schema(description = "机构ID")
    private Long institutionId;
    @Schema(description = "角色ID")
    private Long roleId;
    @Schema(description = "页码", defaultValue = "1")
    private Integer pageNum = 1;
    @Schema(description = "每页条数", defaultValue = "10")
    private Integer pageSize = 10;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/BaseEntity.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import java.time.LocalDateTime;
/**
 * 基础实体类
 */
@Data
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
public abstract class BaseEntity {
    /**
     * 主键ID
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    /**
     * 创建时间
     */
    @CreatedDate
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;
    /**
     * 更新时间
     */
    @LastModifiedDate
    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Category.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.util.ArrayList;
import java.util.List;
/**
 * 课程分类实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "categories")
@EqualsAndHashCode(callSuper = true)
public class Category extends BaseEntity {
    /**
     * 分类名称
     */
    @Column(nullable = false, length = 100)
    private String name;
    /**
     * 分类编码（唯一标识）
     */
    @Column(nullable = false, unique = true, length = 50)
    private String code;
    /**
     * 分类描述
     */
    @Column(length = 500)
    private String description;
    /**
     * 父分类
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "parent_id")
    private Category parent;
    /**
     * 子分类列表
     */
    @OneToMany(mappedBy = "parent", cascade = CascadeType.ALL)
    @Builder.Default
    private List<Category> children = new ArrayList<>();
    /**
     * 层级（1-一级分类，2-二级分类，以此类推）
     */
    private Integer level;
    /**
     * 排序索引
     */
    private Integer orderIndex;
    /**
     * 是否启用
     */
    @Builder.Default
    private Boolean enabled = true;
    /**
     * 分类图标
     */
    @Column(length = 255)
    private String icon;
    /**
     * 关联的课程
     */
    @OneToMany(mappedBy = "category")
    @Builder.Default
    private List<Course> courses = new ArrayList<>();
    /**
     * 获取分类的完整路径
     * @return 分类路径（如：计算机科学/编程语言/Java）
     */
    @Transient
    public String getFullPath() {
        if (parent == null) {
            return name;
        }
        return parent.getFullPath() + "/" + name;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Chapter.java">
package com.zhangziqi.online_course_mine.model.entity;
import com.zhangziqi.online_course_mine.model.enums.ChapterAccessType;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.util.ArrayList;
import java.util.List;
/**
 * 章节实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "chapters")
@EqualsAndHashCode(callSuper = true)
public class Chapter extends BaseEntity {
    /**
     * 章节标题
     */
    @Column(nullable = false, length = 200)
    private String title;
    /**
     * 章节描述
     */
    @Column(length = 1000)
    private String description;
    /**
     * 排序索引
     */
    private Integer orderIndex;
    /**
     * 访问类型 (FREE_TRIAL/PAID_ONLY)
     */
    @Builder.Default
    private Integer accessType = ChapterAccessType.PAID_ONLY.getValue();
    /**
     * 学习时长估计(分钟)
     */
    private Integer estimatedMinutes;
    /**
     * 所属课程
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "course_id", nullable = false)
    private Course course;
    /**
     * 章节小节
     */
    @OneToMany(mappedBy = "chapter", cascade = CascadeType.ALL, orphanRemoval = true)
    @OrderBy("orderIndex ASC")
    @Builder.Default
    private List<Section> sections = new ArrayList<>();
    /**
     * 获取课程ID
     */
    public Long getCourseId() {
        return course != null ? course.getId() : null;
    }
    /**
     * 设置课程ID
     */
    public void setCourseId(Long courseId) {
        if (courseId != null) {
            this.course = Course.builder().id(courseId).build();
        } else {
            this.course = null;
        }
    }
    /**
     * 获取访问类型枚举
     */
    @Transient
    public ChapterAccessType getAccessTypeEnum() {
        return ChapterAccessType.getByValue(this.accessType);
    }
    /**
     * 设置访问类型枚举
     */
    public void setAccessTypeEnum(ChapterAccessType accessType) {
        this.accessType = accessType != null ? accessType.getValue() : null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Course.java">
package com.zhangziqi.online_course_mine.model.entity;
import com.zhangziqi.online_course_mine.model.enums.CourseStatus;
import com.zhangziqi.online_course_mine.model.enums.CourseVersion;
import com.zhangziqi.online_course_mine.model.enums.CoursePaymentType;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
/**
 * 课程实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "courses")
@EqualsAndHashCode(callSuper = true)
public class Course extends BaseEntity {
    /**
     * 课程标题
     */
    @Column(nullable = false, length = 200)
    private String title;
    /**
     * 课程描述
     */
    @Column(length = 2000)
    private String description;
    /**
     * 封面图片
     */
    @Column(length = 255)
    private String coverImage;
    /**
     * 课程状态
     */
    @Builder.Default
    private Integer status = CourseStatus.DRAFT.getValue();
    /**
     * 所属机构
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "institution_id", nullable = false)
    private Institution institution;
    /**
     * 创建者ID
     */
    @Column(name = "creator_id")
    private Long creatorId;
    /**
     * 审核状态
     */
    private Integer reviewStatus;
    /**
     * 审核人ID
     */
    private Long reviewerId;
    /**
     * 审核时间
     */
    private LocalDateTime reviewedAt;
    /**
     * 审核意见
     */
    @Column(length = 1000)
    private String reviewComment;
    /**
     * 发布版本ID（指向当前发布版本的课程ID）
     */
    private Long publishedVersionId;
    /**
     * 是否为发布版本
     */
    @Builder.Default
    private Boolean isPublishedVersion = false;
    /**
     * 版本号
     */
    @Builder.Default
    private Integer version = 1;
    /**
     * 版本类型
     */
    @Builder.Default
    private Integer versionType = CourseVersion.DRAFT.getValue();
    /**
     * 支付类型（免费/付费）
     */
    @Builder.Default
    private Integer paymentType = CoursePaymentType.FREE.getValue();
    /**
     * 课程价格
     */
    @Column(precision = 10, scale = 2)
    private BigDecimal price;
    /**
     * 折扣价格
     */
    @Column(precision = 10, scale = 2)
    private BigDecimal discountPrice;
    /**
     * 难度级别 (1-初级, 2-中级, 3-高级)
     */
    private Integer difficulty;
    /**
     * 总课时数
     */
    private Integer totalLessons;
    /**
     * 总时长(分钟)
     */
    private Integer totalDuration;
    /**
     * 学习人数
     */
    @Builder.Default
    private Integer studentCount = 0;
    /**
     * 平均评分(1-5星)
     */
    @Column
    private Float averageRating;
    /**
     * 评分人数
     */
    @Builder.Default
    private Integer ratingCount = 0;
    /**
     * 适合人群
     */
    @Column(length = 1000)
    private String targetAudience;
    /**
     * 学习目标
     */
    @Column(length = 1000)
    private String learningObjectives;
    /**
     * 课程分类
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "category_id")
    private Category category;
    /**
     * 课程标签
     */
    @ManyToMany
    @JoinTable(
        name = "course_tags",
        joinColumns = @JoinColumn(name = "course_id"),
        inverseJoinColumns = @JoinColumn(name = "tag_id")
    )
    @Builder.Default
    private Set<Tag> tags = new HashSet<>();
    /**
     * 课程章节
     */
    @OneToMany(mappedBy = "course", cascade = CascadeType.ALL, orphanRemoval = true)
    @OrderBy("orderIndex ASC")
    @Builder.Default
    private List<Chapter> chapters = new ArrayList<>();
    /**
     * 收藏此课程的用户
     */
    @OneToMany(mappedBy = "course", cascade = CascadeType.ALL, orphanRemoval = true)
    @Builder.Default
    private Set<UserFavorite> favoriteUsers = new HashSet<>();
    /**
     * 购买此课程的用户关联
     */
    @OneToMany(mappedBy = "course", cascade = {CascadeType.PERSIST, CascadeType.MERGE})
    @Builder.Default
    private Set<UserCourse> enrolledUsers = new HashSet<>();
    /**
     * 课程相关订单
     */
    @OneToMany(mappedBy = "course", cascade = CascadeType.ALL)
    @Builder.Default
    private List<Order> orders = new ArrayList<>();
    /**
     * 乐观锁版本字段
     */
    @Version
    private Integer dataVersion;
    /**
     * 获取机构ID
     */
    public Long getInstitutionId() {
        return institution != null ? institution.getId() : null;
    }
    /**
     * 设置机构ID
     */
    public void setInstitutionId(Long institutionId) {
        if (institutionId != null) {
            this.institution = Institution.builder().id(institutionId).build();
        } else {
            this.institution = null;
        }
    }
    /**
     * 获取课程状态枚举
     */
    @Transient
    public CourseStatus getStatusEnum() {
        return CourseStatus.getByValue(this.status);
    }
    /**
     * 设置课程状态枚举
     */
    public void setStatusEnum(CourseStatus status) {
        this.status = status != null ? status.getValue() : null;
    }
    /**
     * 获取版本类型枚举
     */
    @Transient
    public CourseVersion getVersionTypeEnum() {
        return CourseVersion.getByValue(this.versionType);
    }
    /**
     * 设置版本类型枚举
     */
    public void setVersionTypeEnum(CourseVersion versionType) {
        this.versionType = versionType != null ? versionType.getValue() : null;
    }
    /**
     * 获取支付类型枚举
     */
    @Transient
    public CoursePaymentType getPaymentTypeEnum() {
        return CoursePaymentType.getByValue(this.paymentType);
    }
    /**
     * 设置支付类型枚举
     */
    public void setPaymentTypeEnum(CoursePaymentType paymentType) {
        this.paymentType = paymentType != null ? paymentType.getValue() : null;
    }
    /**
     * 增加学生数
     */
    public void incrementStudentCount() {
        if (this.studentCount == null) {
            this.studentCount = 0;
        }
        this.studentCount++;
    }
    /**
     * 减少学生数
     */
    public void decrementStudentCount() {
        if (this.studentCount != null && this.studentCount > 0) {
            this.studentCount--;
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/CourseReview.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
/**
 * 课程评论实体类
 */
@Data
@Entity
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "course_reviews")
@EqualsAndHashCode(callSuper = true)
public class CourseReview extends BaseEntity {
    /**
     * 关联的课程
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "course_id", nullable = false)
    private Course course;
    /**
     * 用户ID
     */
    @Column(name = "user_id", nullable = false)
    private Long userId;
    /**
     * 评分 (1-5)
     */
    @Column(nullable = false)
    private Integer rating;
    /**
     * 评价内容
     */
    @Column(length = 1000)
    private String content;
    /**
     * 点赞数
     */
    @Builder.Default
    private Integer likeCount = 0;
    /**
     * 乐观锁版本字段
     */
    @Version
    private Integer dataVersion;
    /**
     * 获取课程ID
     */
    @Transient
    public Long getCourseId() {
        return course != null ? course.getId() : null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Institution.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
/**
 * 机构实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "institutions")
@EqualsAndHashCode(callSuper = true)
public class Institution extends BaseEntity {
    /**
     * 机构名称
     */
    @Column(nullable = false, length = 100)
    private String name;
    /**
     * 机构Logo
     */
    private String logo;
    /**
     * 机构描述
     */
    @Column(length = 500)
    private String description;
    /**
     * 状态（0-待审核，1-正常，2-禁用）
     */
    @Builder.Default
    private Integer status = 0;
    /**
     * 机构注册码
     */
    @Column(unique = true, length = 20)
    private String registerCode;
    /**
     * 联系人
     */
    @Column(length = 50)
    private String contactPerson;
    /**
     * 联系电话
     */
    @Column(length = 20)
    private String contactPhone;
    /**
     * 联系邮箱
     */
    private String contactEmail;
    /**
     * 地址
     */
    @Column(length = 255)
    private String address;
    /**
     * 机构媒体资源
     */
    @OneToMany(mappedBy = "institution", cascade = CascadeType.ALL, orphanRemoval = true)
    @Builder.Default
    private List<Media> mediaList = new ArrayList<>();
    /**
     * 机构存储配额
     */
    @OneToMany(mappedBy = "institution", cascade = CascadeType.ALL, orphanRemoval = true)
    @Builder.Default
    private List<StorageQuota> quotas = new ArrayList<>();
    /**
     * 机构课程列表
     */
    @OneToMany(mappedBy = "institution", cascade = CascadeType.ALL, orphanRemoval = true)
    @Builder.Default
    private List<Course> courses = new ArrayList<>();
    /**
     * 机构用户
     */
    @OneToMany(mappedBy = "institution", cascade = CascadeType.ALL)
    @Builder.Default
    private Set<User> users = new HashSet<>();
    /**
     * 关联的题库
     */
    @OneToMany(mappedBy = "institution", cascade = CascadeType.ALL)
    @Builder.Default
    private Set<Question> questions = new HashSet<>();
    /**
     * 机构课程订单
     */
    @OneToMany(mappedBy = "institution", cascade = CascadeType.ALL)
    @Builder.Default
    private List<Order> orders = new ArrayList<>();
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/InstitutionApplication.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.time.LocalDateTime;
/**
 * 机构申请实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "institution_applications")
public class InstitutionApplication extends BaseEntity {
    /**
     * 申请ID（业务编号）
     */
    @Column(unique = true, length = 20)
    private String applicationId;
    /**
     * 机构名称
     */
    @Column(nullable = false, length = 100)
    private String name;
    /**
     * 机构Logo
     */
    private String logo;
    /**
     * 机构描述
     */
    @Column(length = 500)
    private String description;
    /**
     * 联系人
     */
    @Column(length = 50)
    private String contactPerson;
    /**
     * 联系电话
     */
    @Column(length = 20)
    private String contactPhone;
    /**
     * 联系邮箱
     */
    private String contactEmail;
    /**
     * 地址
     */
    @Column(length = 255)
    private String address;
    /**
     * 状态（0-待审核，1-已通过，2-已拒绝）
     */
    @Builder.Default
    private Integer status = 0;
    /**
     * 审核结果备注
     */
    @Column(length = 500)
    private String reviewComment;
    /**
     * 审核人ID
     */
    private Long reviewerId;
    /**
     * 审核时间
     */
    private LocalDateTime reviewedAt;
    /**
     * 关联的机构ID（审核通过后）
     */
    private Long institutionId;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Media.java">
package com.zhangziqi.online_course_mine.model.entity;
import com.zhangziqi.online_course_mine.model.enums.MediaStatus;
import com.zhangziqi.online_course_mine.model.enums.MediaType;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import java.time.LocalDateTime;
/**
 * 媒体资源实体
 */
@Entity
@Table(name = "media")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@EqualsAndHashCode(callSuper = false)
public class Media {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    /**
     * 媒体标题
     */
    private String title;
    /**
     * 媒体描述
     */
    private String description;
    /**
     * 媒体类型（视频、音频、文档）
     */
    @Enumerated(EnumType.STRING)
    private MediaType type;
    /**
     * 文件大小（字节）
     */
    private Long size;
    /**
     * 原始文件名
     */
    private String originalFilename;
    /**
     * 存储路径
     */
    private String storagePath;
    /**
     * 媒体状态
     */
    @Enumerated(EnumType.STRING)
    private MediaStatus status;
    /**
     * 所属机构
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "institution_id", nullable = false)
    private Institution institution;
    /**
     * 上传者ID（只记录ID，不做实体关联）
     */
    @Column(name = "uploader_id")
    private Long uploaderId;
    /**
     * 上传时间
     */
    @CreationTimestamp
    private LocalDateTime uploadTime;
    /**
     * 最后访问时间
     */
    @UpdateTimestamp
    private LocalDateTime lastAccessTime;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Order.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.math.BigDecimal;
import java.time.LocalDateTime;
/**
 * 订单实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "orders")
@EqualsAndHashCode(callSuper = true)
public class Order extends BaseEntity {
    /**
     * 订单号（支付宝交易创建时生成）
     */
    @Column(nullable = false, unique = true, length = 64)
    private String orderNo;
    /**
     * 订单标题
     */
    @Column(nullable = false, length = 200)
    private String title;
    /**
     * 订单描述
     */
    @Column(length = 500)
    private String description;
    /**
     * 订单金额
     */
    @Column(nullable = false, precision = 10, scale = 2)
    private BigDecimal amount;
    /**
     * 购买用户
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;
    /**
     * 课程
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "course_id", nullable = false)
    private Course course;
    /**
     * 机构（冗余字段，方便查询）
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "institution_id", nullable = false)
    private Institution institution;
    /**
     * 支付宝交易号（支付成功后回填）
     */
    @Column(length = 64)
    private String tradeNo;
    /**
     * 支付时间
     */
    private LocalDateTime paidAt;
    /**
     * 订单状态：
     * 0-待支付，1-已支付，2-已关闭，3-申请退款，4-已退款，5-退款失败
     */
    @Column(nullable = false)
    @Builder.Default
    private Integer status = 0;
    /**
     * 退款时间
     */
    private LocalDateTime refundedAt;
    /**
     * 退款金额
     */
    @Column(precision = 10, scale = 2)
    private BigDecimal refundAmount;
    /**
     * 退款原因
     */
    @Column(length = 500)
    private String refundReason;
    /**
     * 退款交易号
     */
    @Column(length = 64)
    private String refundTradeNo;
    /**
     * 关联的用户课程记录
     */
    @OneToOne(mappedBy = "order", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private UserCourse userCourse;
    /**
     * 支付链接（临时存储，不持久化到数据库）
     */
    @Transient
    private String payUrl;
    /**
     * 获取用户ID
     */
    public Long getUserId() {
        return user != null ? user.getId() : null;
    }
    /**
     * 获取课程ID
     */
    public Long getCourseId() {
        return course != null ? course.getId() : null;
    }
    /**
     * 获取机构ID
     */
    public Long getInstitutionId() {
        return institution != null ? institution.getId() : null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Permission.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
/**
 * 权限实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "permissions")
@EqualsAndHashCode(callSuper = true)
public class Permission extends BaseEntity {
    /**
     * 权限名称
     */
    @Column(nullable = false, length = 50)
    private String name;
    /**
     * 权限编码
     */
    @Column(nullable = false, unique = true, length = 50)
    private String code;
    /**
     * 权限描述
     */
    @Column(length = 255)
    private String description;
    /**
     * 资源路径
     */
    @Column(length = 255)
    private String url;
    /**
     * HTTP方法
     */
    @Column(length = 10)
    private String method;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Question.java">
package com.zhangziqi.online_course_mine.model.entity;
import com.zhangziqi.online_course_mine.model.enums.QuestionType;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
/**
 * 测试题实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "questions")
@EqualsAndHashCode(callSuper = true)
public class Question extends BaseEntity {
    /**
     * 题目标题/简称
     */
    @Column(nullable = false, length = 200)
    private String title;
    /**
     * 题目内容/题干
     */
    @Column(nullable = false, length = 2000)
    private String content;
    /**
     * 题目类型
     */
    @Builder.Default
    @Column(nullable = false)
    private Integer type = QuestionType.SINGLE_CHOICE.getValue();
    /**
     * 难度级别（1-5）
     */
    @Column(nullable = false)
    private Integer difficulty;
    /**
     * 分值
     */
    @Column(nullable = false)
    private Integer score;
    /**
     * 解析
     */
    @Column(length = 2000)
    private String analysis;
    /**
     * 正确答案（填空题必填，简答题可选）
     */
    @Column(length = 2000)
    private String answer;
    /**
     * 所属机构
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "institution_id", nullable = false)
    private Institution institution;
    /**
     * 创建者ID
     */
    @Column(name = "creator_id")
    private Long creatorId;
    /**
     * 创建者名称
     */
    @Column(name = "creator_name", length = 100)
    private String creatorName;
    /**
     * 创建时间
     */
    @Column(name = "created_time")
    private LocalDateTime createdTime;
    /**
     * 更新时间
     */
    @Column(name = "updated_time")
    private LocalDateTime updatedTime;
    /**
     * 选项列表
     */
    @OneToMany(mappedBy = "question", cascade = CascadeType.ALL, orphanRemoval = true)
    @OrderBy("orderIndex ASC")
    @Builder.Default
    private List<QuestionOption> options = new ArrayList<>();
    /**
     * 获取机构ID
     */
    public Long getInstitutionId() {
        return institution != null ? institution.getId() : null;
    }
    /**
     * 设置机构ID
     */
    public void setInstitutionId(Long institutionId) {
        if (institutionId != null) {
            this.institution = Institution.builder().id(institutionId).build();
        } else {
            this.institution = null;
        }
    }
    /**
     * 获取题目类型枚举
     */
    @Transient
    public QuestionType getTypeEnum() {
        return QuestionType.getByValue(this.type);
    }
    /**
     * 设置题目类型枚举
     */
    public void setTypeEnum(QuestionType questionType) {
        this.type = questionType != null ? questionType.getValue() : null;
    }
    /**
     * 添加选项
     */
    public void addOption(QuestionOption option) {
        options.add(option);
        option.setQuestion(this);
    }
    /**
     * 移除选项
     */
    public void removeOption(QuestionOption option) {
        options.remove(option);
        option.setQuestion(null);
    }
    /**
     * 保存前操作
     */
    @PrePersist
    public void prePersist() {
        this.createdTime = LocalDateTime.now();
        this.updatedTime = this.createdTime;
    }
    /**
     * 更新前操作
     */
    @PreUpdate
    public void preUpdate() {
        this.updatedTime = LocalDateTime.now();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/QuestionGroup.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.*;
import lombok.experimental.SuperBuilder;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
/**
 * 题目组实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "question_groups")
@EqualsAndHashCode(callSuper = true)
public class QuestionGroup extends BaseEntity {
    /**
     * 题目组名称
     */
    @Column(nullable = false, length = 100)
    private String name;
    /**
     * 题目组描述
     */
    @Column(length = 500)
    private String description;
    /**
     * 所属机构
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "institution_id", nullable = false)
    private Institution institution;
    /**
     * 创建者ID
     */
    @Column(name = "creator_id")
    private Long creatorId;
    /**
     * 创建者名称
     */
    @Column(name = "creator_name", length = 100)
    private String creatorName;
    /**
     * 创建时间
     */
    @Column(name = "created_time")
    private LocalDateTime createdTime;
    /**
     * 更新时间
     */
    @Column(name = "updated_time")
    private LocalDateTime updatedTime;
    /**
     * 题目组项列表
     */
    @OneToMany(mappedBy = "group", cascade = CascadeType.ALL, orphanRemoval = true)
    @OrderBy("orderIndex ASC")
    @Builder.Default
    private List<QuestionGroupItem> items = new ArrayList<>();
    /**
     * 获取机构ID
     */
    public Long getInstitutionId() {
        return institution != null ? institution.getId() : null;
    }
    /**
     * 设置机构ID
     */
    public void setInstitutionId(Long institutionId) {
        if (institutionId != null) {
            this.institution = Institution.builder().id(institutionId).build();
        } else {
            this.institution = null;
        }
    }
    /**
     * 添加题目组项
     */
    public void addItem(QuestionGroupItem item) {
        items.add(item);
        item.setGroup(this);
    }
    /**
     * 移除题目组项
     */
    public void removeItem(QuestionGroupItem item) {
        items.remove(item);
        item.setGroup(null);
    }
    /**
     * 保存前操作
     */
    @PrePersist
    public void prePersist() {
        this.createdTime = LocalDateTime.now();
        this.updatedTime = this.createdTime;
    }
    /**
     * 更新前操作
     */
    @PreUpdate
    public void preUpdate() {
        this.updatedTime = LocalDateTime.now();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/QuestionGroupItem.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.*;
import lombok.experimental.SuperBuilder;
/**
 * 题目组项实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "question_group_items", 
       uniqueConstraints = @UniqueConstraint(columnNames = {"group_id", "question_id"}))
@EqualsAndHashCode(callSuper = true)
public class QuestionGroupItem extends BaseEntity {
    /**
     * 题目组
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "group_id", nullable = false)
    private QuestionGroup group;
    /**
     * 题目
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "question_id", nullable = false)
    private Question question;
    /**
     * 在组中的顺序
     */
    @Column(nullable = false)
    private Integer orderIndex;
    /**
     * 难度级别（可覆盖题目原始难度）
     */
    private Integer difficulty;
    /**
     * 分值（可覆盖题目原始分值）
     */
    private Integer score;
    /**
     * 获取题目组ID
     */
    public Long getGroupId() {
        return group != null ? group.getId() : null;
    }
    /**
     * 获取题目ID
     */
    public Long getQuestionId() {
        return question != null ? question.getId() : null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/QuestionOption.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
/**
 * 题目选项实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "question_options")
@EqualsAndHashCode(callSuper = true)
public class QuestionOption extends BaseEntity {
    /**
     * 所属题目
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "question_id", nullable = false)
    private Question question;
    /**
     * 选项内容
     */
    @Column(nullable = false, length = 1000)
    private String content;
    /**
     * 是否正确选项
     */
    @Builder.Default
    @Column(nullable = false)
    private Boolean isCorrect = false;
    /**
     * 排序序号
     */
    @Column(nullable = false)
    private Integer orderIndex;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/QuestionTag.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.*;
import lombok.experimental.SuperBuilder;
import java.time.LocalDateTime;
/**
 * 题目标签实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "question_tags")
@EqualsAndHashCode(callSuper = true)
public class QuestionTag extends BaseEntity {
    /**
     * 标签名称
     */
    @Column(nullable = false, length = 50)
    private String name;
    /**
     * 所属机构
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "institution_id", nullable = false)
    private Institution institution;
    /**
     * 创建者ID
     */
    @Column(name = "creator_id")
    private Long creatorId;
    /**
     * 创建时间
     */
    @Column(name = "created_time")
    private LocalDateTime createdTime;
    /**
     * 更新时间
     */
    @Column(name = "updated_time")
    private LocalDateTime updatedTime;
    /**
     * 获取机构ID
     */
    public Long getInstitutionId() {
        return institution != null ? institution.getId() : null;
    }
    /**
     * 设置机构ID
     */
    public void setInstitutionId(Long institutionId) {
        if (institutionId != null) {
            this.institution = Institution.builder().id(institutionId).build();
        } else {
            this.institution = null;
        }
    }
    /**
     * 保存前操作
     */
    @PrePersist
    public void prePersist() {
        this.createdTime = LocalDateTime.now();
        this.updatedTime = this.createdTime;
    }
    /**
     * 更新前操作
     */
    @PreUpdate
    public void preUpdate() {
        this.updatedTime = LocalDateTime.now();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/QuestionTagMapping.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.*;
import lombok.experimental.SuperBuilder;
/**
 * 题目-标签映射实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "question_tag_mappings", 
       uniqueConstraints = @UniqueConstraint(columnNames = {"question_id", "tag_id"}))
@EqualsAndHashCode(callSuper = true)
public class QuestionTagMapping extends BaseEntity {
    /**
     * 题目
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "question_id", nullable = false)
    private Question question;
    /**
     * 标签
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "tag_id", nullable = false)
    private QuestionTag tag;
    /**
     * 获取题目ID
     */
    public Long getQuestionId() {
        return question != null ? question.getId() : null;
    }
    /**
     * 获取标签ID
     */
    public Long getTagId() {
        return tag != null ? tag.getId() : null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Role.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.util.HashSet;
import java.util.Set;
/**
 * 角色实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "roles")
@EqualsAndHashCode(callSuper = true)
public class Role extends BaseEntity {
    /**
     * 角色名称
     */
    @Column(nullable = false, unique = true, length = 50)
    private String name;
    /**
     * 角色编码
     */
    @Column(nullable = false, unique = true, length = 50)
    private String code;
    /**
     * 角色描述
     */
    @Column(length = 255)
    private String description;
    /**
     * 角色权限
     */
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
        name = "role_permissions",
        joinColumns = @JoinColumn(name = "role_id"),
        inverseJoinColumns = @JoinColumn(name = "permission_id")
    )
    @Builder.Default
    private Set<Permission> permissions = new HashSet<>();
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Section.java">
package com.zhangziqi.online_course_mine.model.entity;
import com.zhangziqi.online_course_mine.model.enums.ContentType;
import com.zhangziqi.online_course_mine.model.enums.ResourceType;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.util.ArrayList;
import java.util.List;
/**
 * 课程小节实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "sections")
@EqualsAndHashCode(callSuper = true)
public class Section extends BaseEntity {
    /**
     * 小节标题
     */
    @Column(nullable = false, length = 200)
    private String title;
    /**
     * 小节描述
     */
    @Column(length = 1000)
    private String description;
    /**
     * 排序索引
     */
    private Integer orderIndex;
    /**
     * 内容类型
     */
    @Column(length = 20)
    private String contentType;
    /**
     * 所属章节
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "chapter_id", nullable = false)
    private Chapter chapter;
    /**
     * 资源类型鉴别器：MEDIA, QUESTION_GROUP, NONE
     */
    @Column(name = "resource_type_discriminator", length = 20)
    private String resourceTypeDiscriminator;
    /**
     * 媒体资源（仅当resourceTypeDiscriminator为MEDIA时有效）
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "media_id")
    private Media media;
    /**
     * 媒体资源类型(primary, supplementary, homework, reference)
     */
    @Column(name = "media_resource_type", length = 20)
    private String mediaResourceType;
    /**
     * 题目组（仅当resourceTypeDiscriminator为QUESTION_GROUP时有效）
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "question_group_id")
    private QuestionGroup questionGroup;
    /**
     * 是否随机题目顺序（仅当resourceTypeDiscriminator为QUESTION_GROUP时有效）
     */
    @Builder.Default
    private Boolean randomOrder = false;
    /**
     * 是否按难度顺序排序（仅当resourceTypeDiscriminator为QUESTION_GROUP时有效）
     */
    @Builder.Default
    private Boolean orderByDifficulty = false;
    /**
     * 是否显示答案解析（仅当resourceTypeDiscriminator为QUESTION_GROUP时有效）
     */
    @Builder.Default
    private Boolean showAnalysis = true;
    /**
     * 获取章节ID
     */
    public Long getChapterId() {
        return chapter != null ? chapter.getId() : null;
    }
    /**
     * 设置章节ID
     */
    public void setChapterId(Long chapterId) {
        if (chapterId != null) {
            this.chapter = Chapter.builder().id(chapterId).build();
        } else {
            this.chapter = null;
        }
    }
    /**
     * 获取内容类型枚举
     */
    @Transient
    public ContentType getContentTypeEnum() {
        return ContentType.getByCode(this.contentType);
    }
    /**
     * 设置内容类型枚举
     */
    public void setContentTypeEnum(ContentType contentType) {
        this.contentType = contentType != null ? contentType.getCode() : null;
    }
    /**
     * 获取媒体ID
     */
    public Long getMediaId() {
        return media != null ? media.getId() : null;
    }
    /**
     * 设置媒体ID
     */
    public void setMediaId(Long mediaId) {
        if (mediaId != null) {
            this.media = Media.builder().id(mediaId).build();
            this.resourceTypeDiscriminator = "MEDIA";
        } else if ("MEDIA".equals(this.resourceTypeDiscriminator)) {
            this.media = null;
            this.resourceTypeDiscriminator = "NONE";
        }
    }
    /**
     * 获取题目组ID
     */
    public Long getQuestionGroupId() {
        return questionGroup != null ? questionGroup.getId() : null;
    }
    /**
     * 设置题目组ID
     */
    public void setQuestionGroupId(Long questionGroupId) {
        if (questionGroupId != null) {
            this.questionGroup = QuestionGroup.builder().id(questionGroupId).build();
            this.resourceTypeDiscriminator = "QUESTION_GROUP";
        } else if ("QUESTION_GROUP".equals(this.resourceTypeDiscriminator)) {
            this.questionGroup = null;
            this.resourceTypeDiscriminator = "NONE";
        }
    }
    /**
     * 获取媒体资源类型枚举
     */
    @Transient
    public ResourceType getMediaResourceTypeEnum() {
        return ResourceType.getByCode(this.mediaResourceType);
    }
    /**
     * 设置媒体资源类型枚举
     */
    public void setMediaResourceTypeEnum(ResourceType resourceType) {
        this.mediaResourceType = resourceType != null ? resourceType.getCode() : null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/StorageQuota.java">
package com.zhangziqi.online_course_mine.model.entity;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import jakarta.persistence.*;
import lombok.Data;
import lombok.EqualsAndHashCode;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import java.time.LocalDateTime;
/**
 * 存储配额实体
 */
@Entity
@Table(name = "storage_quota")
@Data
@EqualsAndHashCode(callSuper = false)
public class StorageQuota {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    /**
     * 配额类型
     */
    @Enumerated(EnumType.STRING)
    private QuotaType type;
    /**
     * 总配额(字节)
     */
    private Long totalQuota;
    /**
     * 已使用配额(字节)
     */
    private Long usedQuota;
    /**
     * 存储空间是否启用
     */
    private Boolean enabled;
    /**
     * 所属机构
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "institution_id", nullable = false)
    private Institution institution;
    /**
     * 创建时间
     */
    @CreationTimestamp
    private LocalDateTime createdAt;
    /**
     * 更新时间
     */
    @UpdateTimestamp
    private LocalDateTime updatedAt;
    /**
     * 过期时间(可选)
     */
    private LocalDateTime expiresAt;
    /**
     * 获取机构ID
     */
    public Long getInstitutionId() {
        return institution != null ? institution.getId() : null;
    }
    /**
     * 设置机构ID
     */
    public void setInstitutionId(Long institutionId) {
        if (institutionId != null) {
            this.institution = Institution.builder().id(institutionId).build();
        } else {
            this.institution = null;
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Tag.java">
package com.zhangziqi.online_course_mine.model.entity;
import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;
/**
 * 标签实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "tags")
@EqualsAndHashCode(callSuper = false, onlyExplicitlyIncluded = true)
public class Tag extends BaseEntity {
    /**
     * 重写equals方法，只基于ID比较
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Tag tag = (Tag) o;
        return Objects.equals(getId(), tag.getId());
    }
    /**
     * 重写hashCode方法，只基于ID计算
     */
    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
    /**
     * 标签名称
     */
    @Column(nullable = false, unique = true, length = 50)
    private String name;
    /**
     * 标签描述
     */
    @Column(length = 255)
    private String description;
    /**
     * 使用次数
     */
    @Builder.Default
    private Integer useCount = 0;
    /**
     * 标签关联的课程
     */
    @ManyToMany(mappedBy = "tags")
    @Builder.Default
    @JsonIgnore
    private Set<Course> courses = new HashSet<>();
    /**
     * 增加使用次数
     */
    public void incrementUseCount() {
        if (this.useCount == null) {
            this.useCount = 1;
        } else {
            this.useCount++;
        }
    }
    /**
     * 减少使用次数
     */
    public void decrementUseCount() {
        if (this.useCount != null && this.useCount > 0) {
            this.useCount--;
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/User.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import org.hibernate.annotations.DynamicUpdate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
/**
 * 用户实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@DynamicUpdate
@Table(name = "users")
public class User extends BaseEntity {
    /**
     * 用户名
     */
    @Column(nullable = false, unique = true, length = 50)
    private String username;
    /**
     * 密码
     */
    @Column(nullable = false)
    private String password;
    /**
     * 姓名
     */
    @Column(length = 50)
    private String name;
    /**
     * 邮箱
     */
    @Column(unique = true)
    private String email;
    /**
     * 手机号
     */
    @Column(unique = true)
    private String phone;
    /**
     * 头像
     */
    @Column(length = 255)
    private String avatar;
    /**
     * 昵称
     */
    @Column(length = 50)
    private String nickname;
    /**
     * 状态（0-禁用，1-正常）
     */
    @Builder.Default
    private Integer status = 1;
    /**
     * 所属机构（仅机构用户）
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "institution_id")
    private Institution institution;
    /**
     * 最后登录时间
     */
    private LocalDateTime lastLoginAt;
    /**
     * 用户角色
     */
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
        name = "user_roles",
        joinColumns = @JoinColumn(name = "user_id"),
        inverseJoinColumns = @JoinColumn(name = "role_id")
    )
    @Builder.Default
    private Set<Role> roles = new HashSet<>();
    /**
     * 用户收藏的课程
     */
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    @Builder.Default
    private Set<UserFavorite> favorites = new HashSet<>();
    /**
     * 用户购买的课程
     */
    @OneToMany(mappedBy = "user", cascade = {CascadeType.PERSIST, CascadeType.MERGE})
    @Builder.Default
    private Set<UserCourse> purchasedCourses = new HashSet<>();
    /**
     * 用户的订单
     */
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
    @Builder.Default
    private List<Order> orders = new ArrayList<>();
    /**
     * 获取机构ID
     */
    public Long getInstitutionId() {
        return institution != null ? institution.getId() : null;
    }
    /**
     * 设置机构ID
     */
    public void setInstitutionId(Long institutionId) {
        if (institutionId != null) {
            this.institution = Institution.builder().id(institutionId).build();
        } else {
            this.institution = null;
        }
    }
    /**
     * 判断用户是否启用
     */
    public boolean getEnabled() {
        return status != null && status == 1;
    }
    /**
     * 用于Builder模式的机构ID设置
     */
    public abstract static class UserBuilder<C extends User, B extends UserBuilder<C, B>> extends BaseEntity.BaseEntityBuilder<C, B> {
        /**
         * 设置机构ID
         */
        public B institutionId(Long institutionId) {
            if (institutionId != null) {
                this.institution(Institution.builder().id(institutionId).build());
            }
            return self();
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/UserCourse.java">
package com.zhangziqi.online_course_mine.model.entity;
import com.zhangziqi.online_course_mine.model.enums.UserCourseStatus;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.time.LocalDateTime;
/**
 * 用户课程关联实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "user_courses", 
       uniqueConstraints = @UniqueConstraint(columnNames = {"user_id", "course_id"}))
@EqualsAndHashCode(callSuper = true)
public class UserCourse extends BaseEntity {
    /**
     * 用户
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;
    /**
     * 课程
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "course_id", nullable = false)
    private Course course;
    /**
     * 购买时间
     */
    @Column(nullable = false)
    private LocalDateTime purchasedAt;
    /**
     * 关联订单
     */
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "order_id")
    private Order order;
    /**
     * 过期时间（如果有）
     */
    private LocalDateTime expireAt;
    /**
     * 学习进度（百分比）
     */
    @Builder.Default
    private Integer progress = 0;
    /**
     * 状态：0-正常，1-已过期，2-已退款
     */
    @Builder.Default
    @Column(nullable = false)
    private Integer status = UserCourseStatus.NORMAL.getValue();
    /**
     * 乐观锁版本字段
     */
    @Version
    private Integer version;
    /**
     * 最后学习时间
     */
    private LocalDateTime lastLearnAt;
    /**
     * 学习时长（秒）
     */
    @Builder.Default
    private Integer learnDuration = 0;
    /**
     * 获取用户ID
     */
    public Long getUserId() {
        return user != null ? user.getId() : null;
    }
    /**
     * 获取课程ID
     */
    public Long getCourseId() {
        return course != null ? course.getId() : null;
    }
    /**
     * 获取订单ID
     */
    public Long getOrderId() {
        return order != null ? order.getId() : null;
    }
    /**
     * 获取状态枚举
     */
    @Transient
    public UserCourseStatus getStatusEnum() {
        return UserCourseStatus.valueOf(this.status);
    }
    /**
     * 设置状态枚举
     */
    public void setStatusEnum(UserCourseStatus status) {
        this.status = status != null ? status.getValue() : null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/UserFavorite.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.time.LocalDateTime;
/**
 * 用户收藏课程实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "user_favorites", 
       uniqueConstraints = @UniqueConstraint(columnNames = {"user_id", "course_id"}))
@EqualsAndHashCode(callSuper = true)
public class UserFavorite extends BaseEntity {
    /**
     * 用户
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;
    /**
     * 课程
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "course_id", nullable = false)
    private Course course;
    /**
     * 收藏时间
     */
    @Builder.Default
    private LocalDateTime favoriteTime = LocalDateTime.now();
    /**
     * 获取用户ID
     */
    public Long getUserId() {
        return user != null ? user.getId() : null;
    }
    /**
     * 获取课程ID
     */
    public Long getCourseId() {
        return course != null ? course.getId() : null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/ChapterAccessType.java">
package com.zhangziqi.online_course_mine.model.enums;
import lombok.Getter;
/**
 * 章节访问类型枚举
 */
@Getter
public enum ChapterAccessType {
    /**
     * 免费试学（无需付费即可访问的章节）
     */
    FREE_TRIAL(0, "免费试学"),
    /**
     * 付费访问（需要付费才能访问的章节）
     */
    PAID_ONLY(1, "付费访问");
    /**
     * 类型值
     */
    private final Integer value;
    /**
     * 类型描述
     */
    private final String description;
    ChapterAccessType(Integer value, String description) {
        this.value = value;
        this.description = description;
    }
    /**
     * 根据类型值获取类型枚举
     *
     * @param value 类型值
     * @return 类型枚举
     */
    public static ChapterAccessType getByValue(Integer value) {
        if (value == null) {
            return null;
        }
        for (ChapterAccessType type : ChapterAccessType.values()) {
            if (type.getValue().equals(value)) {
                return type;
            }
        }
        return null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/ContentType.java">
package com.zhangziqi.online_course_mine.model.enums;
import lombok.Getter;
/**
 * 内容类型枚举
 */
@Getter
public enum ContentType {
    /**
     * 视频内容
     */
    VIDEO("video", "视频"),
    /**
     * 文档内容
     */
    DOCUMENT("document", "文档"),
    /**
     * 音频内容
     */
    AUDIO("audio", "音频"),
    /**
     * 文本内容
     */
    TEXT("text", "文本"),
    /**
     * 图片内容
     */
    IMAGE("image", "图片"),
    /**
     * 混合内容
     */
    MIXED("mixed", "混合内容");
    /**
     * 内容类型编码
     */
    private final String code;
    /**
     * 内容类型描述
     */
    private final String description;
    ContentType(String code, String description) {
        this.code = code;
        this.description = description;
    }
    /**
     * 根据编码获取内容类型枚举
     *
     * @param code 编码
     * @return 内容类型枚举
     */
    public static ContentType getByCode(String code) {
        if (code == null) {
            return null;
        }
        for (ContentType type : ContentType.values()) {
            if (type.getCode().equals(code)) {
                return type;
            }
        }
        return null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/CoursePaymentType.java">
package com.zhangziqi.online_course_mine.model.enums;
import lombok.Getter;
/**
 * 课程付费类型枚举
 */
@Getter
public enum CoursePaymentType {
    /**
     * 免费课程
     */
    FREE(0, "免费"),
    /**
     * 付费课程
     */
    PAID(1, "付费");
    /**
     * 类型值
     */
    private final Integer value;
    /**
     * 类型描述
     */
    private final String description;
    CoursePaymentType(Integer value, String description) {
        this.value = value;
        this.description = description;
    }
    /**
     * 根据类型值获取类型枚举
     *
     * @param value 类型值
     * @return 类型枚举
     */
    public static CoursePaymentType getByValue(Integer value) {
        if (value == null) {
            return null;
        }
        for (CoursePaymentType type : CoursePaymentType.values()) {
            if (type.getValue().equals(value)) {
                return type;
            }
        }
        return null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/CourseStatus.java">
package com.zhangziqi.online_course_mine.model.enums;
import lombok.Getter;
/**
 * 课程状态枚举
 */
@Getter
public enum CourseStatus {
    /**
     * 草稿
     */
    DRAFT(0, "草稿"),
    /**
     * 待审核
     */
    PENDING_REVIEW(1, "待审核"),
    /**
     * 审核中
     */
    REVIEWING(2, "审核中"),
    /**
     * 已拒绝
     */
    REJECTED(3, "已拒绝"),
    /**
     * 已发布
     */
    PUBLISHED(4, "已发布"),
    /**
     * 已下线
     */
    UNPUBLISHED(5, "已下线");
    /**
     * 状态值
     */
    private final Integer value;
    /**
     * 状态描述
     */
    private final String description;
    CourseStatus(Integer value, String description) {
        this.value = value;
        this.description = description;
    }
    /**
     * 根据状态值获取状态枚举
     *
     * @param value 状态值
     * @return 状态枚举
     */
    public static CourseStatus getByValue(Integer value) {
        if (value == null) {
            return null;
        }
        for (CourseStatus status : CourseStatus.values()) {
            if (status.getValue().equals(value)) {
                return status;
            }
        }
        return null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/CourseVersion.java">
package com.zhangziqi.online_course_mine.model.enums;
import lombok.Getter;
/**
 * 课程版本类型枚举
 */
@Getter
public enum CourseVersion {
    /**
     * 草稿版本
     */
    DRAFT(0, "草稿"),
    /**
     * 审核版本
     */
    REVIEW(1, "审核版本"),
    /**
     * 发布版本
     */
    PUBLISHED(2, "发布版本");
    /**
     * 版本类型值
     */
    private final Integer value;
    /**
     * 版本类型描述
     */
    private final String description;
    CourseVersion(Integer value, String description) {
        this.value = value;
        this.description = description;
    }
    /**
     * 根据版本类型值获取版本类型枚举
     *
     * @param value 版本类型值
     * @return 版本类型枚举
     */
    public static CourseVersion getByValue(Integer value) {
        if (value == null) {
            return null;
        }
        for (CourseVersion version : CourseVersion.values()) {
            if (version.getValue().equals(value)) {
                return version;
            }
        }
        return null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/MediaStatus.java">
package com.zhangziqi.online_course_mine.model.enums;
/**
 * 媒体状态枚举
 */
public enum MediaStatus {
    /**
     * 上传中
     */
    UPLOADING,
    /**
     * 处理中（如转码）
     */
    PROCESSING,
    /**
     * 已完成
     */
    COMPLETED,
    /**
     * 失败
     */
    FAILED
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/MediaType.java">
package com.zhangziqi.online_course_mine.model.enums;
/**
 * 媒体类型枚举
 */
public enum MediaType {
    /**
     * 视频
     */
    VIDEO,
    /**
     * 音频
     */
    AUDIO,
    /**
     * 文档
     */
    DOCUMENT
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/OrderStatus.java">
package com.zhangziqi.online_course_mine.model.enums;
import lombok.Getter;
/**
 * 订单状态枚举
 */
@Getter
public enum OrderStatus {
    PENDING(0, "待支付"),
    PAID(1, "已支付"),
    CLOSED(2, "已关闭"),
    REFUNDING(3, "申请退款"),
    REFUNDED(4, "已退款"),
    REFUND_FAILED(5, "退款失败");
    // 添加常量而不是新的枚举值，因为CREATED与PENDING是相同的状态值
    public static final int CREATED = 0; // 创建（同待支付）
    private final int value;
    private final String desc;
    OrderStatus(int value, String desc) {
        this.value = value;
        this.desc = desc;
    }
    /**
     * 根据值获取枚举
     */
    public static OrderStatus valueOf(int value) {
        for (OrderStatus status : OrderStatus.values()) {
            if (status.getValue() == value) {
                return status;
            }
        }
        throw new IllegalArgumentException("无效的订单状态值: " + value);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/QuestionType.java">
package com.zhangziqi.online_course_mine.model.enums;
import lombok.Getter;
/**
 * 题目类型枚举
 */
@Getter
public enum QuestionType {
    /**
     * 单选题
     */
    SINGLE_CHOICE(0, "单选题"),
    /**
     * 多选题
     */
    MULTIPLE_CHOICE(1, "多选题"),
    /**
     * 判断题
     */
    TRUE_FALSE(2, "判断题"),
    /**
     * 填空题
     */
    FILL_BLANK(3, "填空题"),
    /**
     * 简答题
     */
    SHORT_ANSWER(4, "简答题");
    /**
     * 类型值
     */
    private final Integer value;
    /**
     * 类型描述
     */
    private final String description;
    QuestionType(Integer value, String description) {
        this.value = value;
        this.description = description;
    }
    /**
     * 根据类型值获取类型枚举
     *
     * @param value 类型值
     * @return 类型枚举
     */
    public static QuestionType getByValue(Integer value) {
        if (value == null) {
            return null;
        }
        for (QuestionType type : QuestionType.values()) {
            if (type.getValue().equals(value)) {
                return type;
            }
        }
        return null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/QuotaType.java">
package com.zhangziqi.online_course_mine.model.enums;
/**
 * 配额类型枚举
 */
public enum QuotaType {
    /**
     * 视频配额
     */
    VIDEO,
    /**
     * 文档配额
     */
    DOCUMENT,
    /**
     * 总配额
     */
    TOTAL
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/ResourceType.java">
package com.zhangziqi.online_course_mine.model.enums;
import lombok.Getter;
/**
 * 课程资源类型枚举
 */
@Getter
public enum ResourceType {
    /**
     * 主要内容
     */
    PRIMARY("primary", "主要内容"),
    /**
     * 补充材料
     */
    SUPPLEMENTARY("supplementary", "补充材料"),
    /**
     * 课后作业
     */
    HOMEWORK("homework", "课后作业"),
    /**
     * 参考资料
     */
    REFERENCE("reference", "参考资料");
    /**
     * 资源类型编码
     */
    private final String code;
    /**
     * 资源类型描述
     */
    private final String description;
    ResourceType(String code, String description) {
        this.code = code;
        this.description = description;
    }
    /**
     * 根据编码获取资源类型枚举
     *
     * @param code 编码
     * @return 资源类型枚举
     */
    public static ResourceType getByCode(String code) {
        if (code == null) {
            return null;
        }
        for (ResourceType type : ResourceType.values()) {
            if (type.getCode().equals(code)) {
                return type;
            }
        }
        return null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/RoleEnum.java">
package com.zhangziqi.online_course_mine.model.enums;
import lombok.Getter;
/**
 * 角色枚举
 */
@Getter
public enum RoleEnum {
    /**
     * 普通用户
     */
    USER("普通用户", "ROLE_USER"),
    /**
     * 管理员
     */
    ADMIN("管理员", "ROLE_ADMIN"),
    /**
     * 审核人员
     */
    REVIEWER("审核人员", "ROLE_REVIEWER"),
    /**
     * 机构用户
     */
    INSTITUTION("机构用户", "ROLE_INSTITUTION");
    /**
     * 角色名称
     */
    private final String name;
    /**
     * 角色编码
     */
    private final String code;
    RoleEnum(String name, String code) {
        this.name = name;
        this.code = code;
    }
    /**
     * 根据编码获取角色枚举
     *
     * @param code 编码
     * @return 角色枚举
     */
    public static RoleEnum getByCode(String code) {
        for (RoleEnum role : RoleEnum.values()) {
            if (role.getCode().equals(code)) {
                return role;
            }
        }
        return null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/UserCourseStatus.java">
package com.zhangziqi.online_course_mine.model.enums;
import lombok.Getter;
/**
 * 用户课程状态枚举
 */
@Getter
public enum UserCourseStatus {
    NORMAL(0, "正常"),
    EXPIRED(1, "已过期"),
    REFUNDED(2, "已退款");
    private final int value;
    private final String desc;
    UserCourseStatus(int value, String desc) {
        this.value = value;
        this.desc = desc;
    }
    public static UserCourseStatus valueOf(int value) {
        for (UserCourseStatus status : UserCourseStatus.values()) {
            if (status.getValue() == value) {
                return status;
            }
        }
        throw new IllegalArgumentException("无效的用户课程状态值: " + value);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/excel/QuestionExcelData.java">
package com.zhangziqi.online_course_mine.model.excel;
import com.alibaba.excel.annotation.ExcelProperty;
import com.alibaba.excel.annotation.write.style.ColumnWidth;
import com.alibaba.excel.annotation.write.style.ContentRowHeight;
import com.alibaba.excel.annotation.write.style.HeadRowHeight;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 试题Excel数据模型
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@ContentRowHeight(20) // 内容行高
@HeadRowHeight(25)    // 标题行高
public class QuestionExcelData {
    /**
     * 题目标题/简称
     */
    @ExcelProperty(value = "题目标题", index = 0)
    @ColumnWidth(25)
    private String title;
    /**
     * 题目内容/题干
     */
    @ExcelProperty(value = "题目内容", index = 1)
    @ColumnWidth(40)
    private String content;
    /**
     * 题目类型 0-单选题，1-多选题，2-判断题，3-填空题，4-简答题
     */
    @ExcelProperty(value = "题目类型(0单选/1多选/2判断/3填空/4简答)", index = 2)
    @ColumnWidth(35)
    private Integer type;
    /**
     * 难度级别 (1-简单, 2-中等, 3-困难)
     */
    @ExcelProperty(value = "难度(1简单/2中等/3困难)", index = 3)
    @ColumnWidth(25)
    private Integer difficulty;
    /**
     * 分值
     */
    @ExcelProperty(value = "分值", index = 4)
    @ColumnWidth(10)
    private Integer score;
    /**
     * 解析
     */
    @ExcelProperty(value = "解析", index = 5)
    @ColumnWidth(30)
    private String analysis;
    /**
     * 选项A内容
     */
    @ExcelProperty(value = "选项A", index = 6)
    @ColumnWidth(30)
    private String optionA;
    /**
     * 选项B内容
     */
    @ExcelProperty(value = "选项B", index = 7)
    @ColumnWidth(30)
    private String optionB;
    /**
     * 选项C内容
     */
    @ExcelProperty(value = "选项C", index = 8)
    @ColumnWidth(30)
    private String optionC;
    /**
     * 选项D内容
     */
    @ExcelProperty(value = "选项D", index = 9)
    @ColumnWidth(30)
    private String optionD;
    /**
     * 选项E内容 (可选)
     */
    @ExcelProperty(value = "选项E(可选)", index = 10)
    @ColumnWidth(30)
    private String optionE;
    /**
     * 选项F内容 (可选)
     */
    @ExcelProperty(value = "选项F(可选)", index = 11)
    @ColumnWidth(30)
    private String optionF;
    /**
     * 正确答案，如：A、B、AB、BCD等
     */
    @ExcelProperty(value = "正确答案", index = 12)
    @ColumnWidth(15)
    private String correctAnswer;
    /**
     * 标签，多个标签用逗号分隔
     */
    @ExcelProperty(value = "标签(逗号分隔)", index = 13)
    @ColumnWidth(30)
    private String tags;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/CategoryTreeVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.Data;
import java.util.ArrayList;
import java.util.List;
/**
 * 分类树形结构展示对象
 */
@Data
public class CategoryTreeVO {
    /**
     * 分类ID
     */
    private Long id;
    /**
     * 分类名称
     */
    private String name;
    /**
     * 分类编码
     */
    private String code;
    /**
     * 分类描述
     */
    private String description;
    /**
     * 层级
     */
    private Integer level;
    /**
     * 排序索引
     */
    private Integer orderIndex;
    /**
     * 是否启用
     */
    private Boolean enabled;
    /**
     * 分类图标
     */
    private String icon;
    /**
     * 课程数量
     */
    private Long courseCount;
    /**
     * 子分类
     */
    private List<CategoryTreeVO> children = new ArrayList<>();
    /**
     * 完整路径
     */
    private String fullPath;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/CategoryVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import com.zhangziqi.online_course_mine.model.entity.Category;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
/**
 * 分类值对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class CategoryVO {
    /**
     * 分类ID
     */
    private Long id;
    /**
     * 分类名称
     */
    private String name;
    /**
     * 分类描述
     */
    private String description;
    /**
     * 父分类ID
     */
    private Long parentId;
    /**
     * 父分类名称
     */
    private String parentName;
    /**
     * 层级
     */
    private Integer level;
    /**
     * 分类图标
     */
    private String iconUrl;
    /**
     * 排序索引
     */
    private Integer orderIndex;
    /**
     * 课程数量
     */
    private Integer courseCount;
    /**
     * 子分类数量
     */
    private Integer childrenCount;
    /**
     * 创建时间
     */
    private LocalDateTime createdAt;
    /**
     * 更新时间
     */
    private LocalDateTime updatedAt;
    /**
     * 从实体转换为VO
     */
    public static CategoryVO fromEntity(Category category) {
        if (category == null) {
            return null;
        }
        CategoryVO.CategoryVOBuilder builder = CategoryVO.builder()
                .id(category.getId())
                .name(category.getName())
                .description(category.getDescription())
                .level(category.getLevel())
                .iconUrl(category.getIcon())
                .orderIndex(category.getOrderIndex())
                .courseCount(category.getCourses() != null ? category.getCourses().size() : 0)
                .createdAt(category.getCreatedAt())
                .updatedAt(category.getUpdatedAt());
        // 设置父分类信息
        if (category.getParent() != null) {
            builder.parentId(category.getParent().getId());
            builder.parentName(category.getParent().getName());
        }
        return builder.build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/ChapterVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import com.zhangziqi.online_course_mine.model.entity.Chapter;
import com.zhangziqi.online_course_mine.model.enums.ChapterAccessType;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
/**
 * 章节值对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ChapterVO {
    private Long id;
    private String title;
    private String description;
    private Integer orderIndex;
    private Integer accessType;
    private Long courseId;
    private String courseName;
    private List<SectionVO> sections;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    /**
     * 从实体转换为VO
     */
    public static ChapterVO fromEntity(Chapter chapter) {
        if (chapter == null) {
            return null;
        }
        ChapterVO.ChapterVOBuilder builder = ChapterVO.builder()
                .id(chapter.getId())
                .title(chapter.getTitle())
                .description(chapter.getDescription())
                .orderIndex(chapter.getOrderIndex())
                .accessType(chapter.getAccessType())
                .createdAt(chapter.getCreatedAt())
                .updatedAt(chapter.getUpdatedAt());
        // 设置课程信息
        if (chapter.getCourse() != null) {
            builder.courseId(chapter.getCourse().getId());
            builder.courseName(chapter.getCourse().getTitle());
        }
        // 章节不包含小节时返回空列表
        builder.sections(new ArrayList<>());
        return builder.build();
    }
    /**
     * 从实体转换为VO，包含小节信息
     */
    public static ChapterVO fromEntityWithSections(Chapter chapter) {
        ChapterVO chapterVO = fromEntity(chapter);
        if (chapterVO != null && chapter.getSections() != null && !chapter.getSections().isEmpty()) {
            chapterVO.setSections(chapter.getSections().stream()
                    .map(SectionVO::fromEntity)
                    .collect(Collectors.toList()));
        }
        return chapterVO;
    }
    /**
     * 获取访问类型枚举
     */
    public ChapterAccessType getAccessTypeEnum() {
        return ChapterAccessType.getByValue(this.accessType);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/CourseReviewSectionVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.List;
/**
 * 课程评论区整体VO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class CourseReviewSectionVO {
    /**
     * 课程ID
     */
    private Long courseId;
    /**
     * 评分统计
     */
    private ReviewStatsVO stats;
    /**
     * 评论列表
     */
    private List<ReviewVO> reviews;
    /**
     * 总评论数
     */
    private Integer totalReviews;
    /**
     * 当前页码
     */
    private Integer currentPage;
    /**
     * 总页数
     */
    private Integer totalPages;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/CourseStructureVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import com.zhangziqi.online_course_mine.model.entity.Course;
import com.zhangziqi.online_course_mine.model.entity.Chapter;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
/**
 * 课程结构视图对象
 * 用于一次性返回课程的完整结构，包括章节和小节信息
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class CourseStructureVO {
    /**
     * 课程基本信息
     */
    private CourseVO course;
    /**
     * 章节列表，包含小节信息
     */
    @Builder.Default
    private List<ChapterVO> chapters = new ArrayList<>();
    /**
     * 从课程实体创建课程结构VO（包含完整层次结构）
     */
    public static CourseStructureVO fromEntity(Course course) {
        if (course == null) {
            return null;
        }
        // 构建基本课程信息
        CourseVO courseVO = CourseVO.fromEntity(course);
        // 构建章节信息，并包含小节
        List<ChapterVO> chapterVOs = new ArrayList<>();
        if (course.getChapters() != null && !course.getChapters().isEmpty()) {
            chapterVOs = course.getChapters().stream()
                    .map(ChapterVO::fromEntityWithSections)
                    .collect(Collectors.toList());
        }
        // 构建完整结构
        return CourseStructureVO.builder()
                .course(courseVO)
                .chapters(chapterVOs)
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/CourseVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import com.zhangziqi.online_course_mine.model.entity.Course;
import com.zhangziqi.online_course_mine.model.entity.Tag;
import com.zhangziqi.online_course_mine.model.enums.CoursePaymentType;
import com.zhangziqi.online_course_mine.model.enums.CourseStatus;
import com.zhangziqi.online_course_mine.model.enums.CourseVersion;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;
/**
 * 课程值对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class CourseVO {
    private Long id;
    private String title;
    private String description;
    private String coverUrl;
    private Integer status;
    private Integer versionType;
    private Boolean isPublishedVersion;
    private Long publishedVersionId;
    private Long creatorId;
    private String creatorName;
    private InstitutionVO institution;
    private CategoryVO category;
    private Set<TagVO> tags;
    private Integer paymentType;
    private BigDecimal price;
    private BigDecimal discountPrice;
    private Integer difficulty;
    private String targetAudience;
    private String learningObjectives;
    private Integer totalLessons;
    private Integer totalDuration;
    private Integer totalChapters;
    private Integer totalSections;
    private Integer studentCount;
    private Float averageRating;
    private Integer ratingCount;
    private LocalDateTime submittedAt;
    private LocalDateTime reviewStartedAt;
    private LocalDateTime reviewedAt;
    private LocalDateTime publishedAt;
    private String reviewComment;
    private Long reviewerId;
    private String reviewerName;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;
    /**
     * 从实体转换为VO
     */
    public static CourseVO fromEntity(Course course) {
        if (course == null) {
            return null;
        }
        // 构建CourseVO对象
        CourseVO.CourseVOBuilder builder = CourseVO.builder()
                .id(course.getId())
                .title(course.getTitle())
                .description(course.getDescription())
                .coverUrl(course.getCoverImage())
                .status(course.getStatus())
                .versionType(course.getVersionType())
                .isPublishedVersion(course.getIsPublishedVersion())
                .publishedVersionId(course.getPublishedVersionId())
                .creatorId(course.getCreatorId())
                .creatorName("")
                .paymentType(course.getPaymentType())
                .price(course.getPrice())
                .discountPrice(course.getDiscountPrice())
                .difficulty(course.getDifficulty())
                .targetAudience(course.getTargetAudience())
                .learningObjectives(course.getLearningObjectives())
                .totalLessons(course.getTotalLessons())
                .totalDuration(course.getTotalDuration())
                .totalChapters(course.getChapters() != null ? course.getChapters().size() : 0)
                .totalSections(0) // 这里需要根据章节计算小节总数
                .studentCount(course.getStudentCount())
                .averageRating(course.getAverageRating())
                .ratingCount(course.getRatingCount())
                .submittedAt(null) // 需要添加这些字段到Entity中或从其他地方获取
                .reviewStartedAt(null)
                .reviewedAt(course.getReviewedAt())
                .publishedAt(null)
                .reviewComment(course.getReviewComment())
                .reviewerId(course.getReviewerId())
                .reviewerName(null) // 需要添加这个字段到Entity中或从其他地方获取
                .createdAt(course.getCreatedAt())
                .updatedAt(course.getUpdatedAt());
        // 设置机构
        if (course.getInstitution() != null) {
            InstitutionVO institutionVO = new InstitutionVO();
            institutionVO.setId(course.getInstitution().getId());
            institutionVO.setName(course.getInstitution().getName());
            builder.institution(institutionVO);
        }
        // 设置分类
        if (course.getCategory() != null) {
            builder.category(CategoryVO.fromEntity(course.getCategory()));
        }
        // 设置标签
        if (course.getTags() != null && !course.getTags().isEmpty()) {
            Set<TagVO> tagVOs = course.getTags().stream()
                    .map(TagVO::fromEntity)
                    .collect(Collectors.toSet());
            builder.tags(tagVOs);
        } else {
            builder.tags(new HashSet<>());
        }
        return builder.build();
    }
    /**
     * 获取状态枚举
     */
    public CourseStatus getStatusEnum() {
        return CourseStatus.getByValue(this.status);
    }
    /**
     * 获取版本类型枚举
     */
    public CourseVersion getVersionTypeEnum() {
        return CourseVersion.getByValue(this.versionType);
    }
    /**
     * 获取付费类型枚举
     */
    public CoursePaymentType getPaymentTypeEnum() {
        return CoursePaymentType.getByValue(this.paymentType);
    }
    /**
     * 获取版本类型显示文本
     */
    public String getVersionTypeText() {
        if (Boolean.TRUE.equals(isPublishedVersion)) {
            return "发布版本";
        } else {
            // 工作区版本，返回当前状态
            String statusText = "";
            if (status != null) {
                switch (status) {
                    case 1: return "草稿版本";
                    case 2: return "待审核版本";
                    case 3: return "审核中版本";
                    case 4: return "已拒绝版本";
                    case 5: return "已发布版本";
                    case 6: return "已下线版本";
                    default: statusText = "未知状态";
                }
            }
            return "工作区" + (statusText.isEmpty() ? "" : " - " + statusText);
        }
    }
    /**
     * 获取发布状态文本
     * @return 文本说明课程是否已发布
     */
    public String getPublishStateText() {
        if (publishedVersionId != null) {
            return "已发布";
        } else {
            return "未发布";
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/InstitutionApplicationVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Data;
import java.time.LocalDateTime;
/**
 * 机构申请VO
 */
@Data
@Schema(description = "机构申请信息")
public class InstitutionApplicationVO {
    @Schema(description = "ID")
    private Long id;
    @Schema(description = "申请ID")
    private String applicationId;
    @Schema(description = "机构名称")
    private String name;
    @Schema(description = "机构Logo")
    private String logo;
    @Schema(description = "机构描述")
    private String description;
    @Schema(description = "联系人")
    private String contactPerson;
    @Schema(description = "联系电话")
    private String contactPhone;
    @Schema(description = "联系邮箱")
    private String contactEmail;
    @Schema(description = "地址")
    private String address;
    @Schema(description = "状态：0-待审核，1-已通过，2-已拒绝")
    private Integer status;
    @Schema(description = "审核结果备注")
    private String reviewComment;
    @Schema(description = "审核人ID")
    private Long reviewerId;
    @Schema(description = "审核时间")
    private LocalDateTime reviewedAt;
    @Schema(description = "关联的机构ID")
    private Long institutionId;
    @Schema(description = "创建时间")
    private LocalDateTime createdAt;
    @Schema(description = "更新时间")
    private LocalDateTime updatedAt;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/InstitutionVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
/**
 * 机构VO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "机构信息")
public class InstitutionVO {
    @Schema(description = "ID")
    private Long id;
    @Schema(description = "机构名称")
    private String name;
    @Schema(description = "机构Logo")
    private String logo;
    @Schema(description = "机构描述")
    private String description;
    @Schema(description = "状态：0-待审核，1-正常，2-禁用")
    private Integer status;
    @Schema(description = "联系人")
    private String contactPerson;
    @Schema(description = "联系电话")
    private String contactPhone;
    @Schema(description = "联系邮箱")
    private String contactEmail;
    @Schema(description = "地址")
    private String address;
    @Schema(description = "创建时间")
    private LocalDateTime createdAt;
    @Schema(description = "更新时间")
    private LocalDateTime updatedAt;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/MediaVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
/**
 * 媒体信息VO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class MediaVO {
    private Long id;                // 媒体ID
    private String title;           // 标题
    private String description;     // 描述
    private String type;            // 媒体类型
    private Long size;              // 文件大小
    private String originalFilename; // 原始文件名
    private String status;          // 状态
    private Long institutionId;     // 机构ID
    private Long uploaderId;        // 上传者ID
    private LocalDateTime uploadTime; // 上传时间
    private LocalDateTime lastAccessTime; // 最后访问时间
    private String accessUrl;       // 访问URL（可能为空，需要单独请求）
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/OrderVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import com.zhangziqi.online_course_mine.model.entity.Order;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.math.BigDecimal;
import java.time.LocalDateTime;
/**
 * 订单值对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class OrderVO {
    /**
     * 订单ID
     */
    private Long id;
    /**
     * 订单号
     */
    private String orderNo;
    /**
     * 订单标题
     */
    private String title;
    /**
     * 订单描述
     */
    private String description;
    /**
     * 订单金额
     */
    private BigDecimal amount;
    /**
     * 用户ID
     */
    private Long userId;
    /**
     * 用户姓名
     */
    private String userName;
    /**
     * 课程ID
     */
    private Long courseId;
    /**
     * 课程标题
     */
    private String courseTitle;
    /**
     * 课程封面
     */
    private String courseCover;
    /**
     * 机构ID
     */
    private Long institutionId;
    /**
     * 机构名称
     */
    private String institutionName;
    /**
     * 支付宝交易号
     */
    private String tradeNo;
    /**
     * 支付时间
     */
    private LocalDateTime paidAt;
    /**
     * 订单状态
     * 0: 待支付
     * 1: 已支付
     * 2: 已关闭
     * 3: 申请退款
     * 4: 已退款
     * 5: 退款失败
     */
    private Integer status;
    /**
     * 退款时间
     */
    private LocalDateTime refundedAt;
    /**
     * 退款金额
     */
    private BigDecimal refundAmount;
    /**
     * 退款原因
     */
    private String refundReason;
    /**
     * 退款交易号
     */
    private String refundTradeNo;
    /**
     * 支付链接（仅在创建付费订单时返回）
     */
    private String payUrl;
    /**
     * 创建时间
     */
    private LocalDateTime createdAt;
    /**
     * 更新时间
     */
    private LocalDateTime updatedAt;
    /**
     * 从实体转换为VO
     */
    public static OrderVO fromEntity(Order order) {
        if (order == null) {
            return null;
        }
        OrderVO.OrderVOBuilder builder = OrderVO.builder()
                .id(order.getId())
                .orderNo(order.getOrderNo())
                .title(order.getTitle())
                .description(order.getDescription())
                .amount(order.getAmount())
                .userId(order.getUser().getId())
                .userName(order.getUser().getUsername())
                .courseId(order.getCourse().getId())
                .courseTitle(order.getCourse().getTitle())
                .courseCover(order.getCourse().getCoverImage())
                .tradeNo(order.getTradeNo())
                .paidAt(order.getPaidAt())
                .status(order.getStatus())
                .refundedAt(order.getRefundedAt())
                .refundAmount(order.getRefundAmount())
                .refundReason(order.getRefundReason())
                .refundTradeNo(order.getRefundTradeNo())
                .payUrl(order.getPayUrl())
                .createdAt(order.getCreatedAt())
                .updatedAt(order.getUpdatedAt());
        // 检查Institution是否为空
        if (order.getInstitution() != null) {
            builder.institutionId(order.getInstitution().getId())
                  .institutionName(order.getInstitution().getName());
        }
        return builder.build();
    }
    /**
     * 获取状态文本
     */
    public String getStatusText() {
        return com.zhangziqi.online_course_mine.model.enums.OrderStatus.valueOf(status).getDesc();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/PermissionVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
/**
 * 权限视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "权限信息")
public class PermissionVO {
    @Schema(description = "权限ID")
    private Long id;
    @Schema(description = "权限名称")
    private String name;
    @Schema(description = "权限编码")
    private String code;
    @Schema(description = "权限描述")
    private String description;
    @Schema(description = "资源URL")
    private String url;
    @Schema(description = "HTTP方法")
    private String method;
    @Schema(description = "创建时间")
    private LocalDateTime createdAt;
    @Schema(description = "更新时间")
    private LocalDateTime updatedAt;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/PreviewUrlVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
/**
 * 预览URL值对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class PreviewUrlVO {
    /**
     * 预览URL
     */
    private String url;
    /**
     * 过期时间
     */
    private LocalDateTime expireTime;
    /**
     * 课程ID
     */
    private Long courseId;
    /**
     * 课程标题
     */
    private String courseTitle;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/QuestionGroupItemVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 题目组项视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class QuestionGroupItemVO {
    /**
     * 题目组项ID
     */
    private Long id;
    /**
     * 题目组ID
     */
    private Long groupId;
    /**
     * 题目ID
     */
    private Long questionId;
    /**
     * 题目信息（可选，详情查询时返回）
     */
    private QuestionVO question;
    /**
     * 在组中的顺序
     */
    private Integer orderIndex;
    /**
     * 难度级别（可覆盖题目原始难度）
     */
    private Integer difficulty;
    /**
     * 实际难度描述
     */
    private String difficultyDesc;
    /**
     * 分值（可覆盖题目原始分值）
     */
    private Integer score;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/QuestionGroupVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
import java.util.List;
/**
 * 题目组视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class QuestionGroupVO {
    /**
     * 题目组ID
     */
    private Long id;
    /**
     * 所属机构ID
     */
    private Long institutionId;
    /**
     * 题目组名称
     */
    private String name;
    /**
     * 题目组描述
     */
    private String description;
    /**
     * 题目数量
     */
    private Long questionCount;
    /**
     * 题目项列表（可选，详情查询时返回）
     */
    private List<QuestionGroupItemVO> items;
    /**
     * 创建者ID
     */
    private Long creatorId;
    /**
     * 创建者名称
     */
    private String creatorName;
    /**
     * 创建时间
     */
    private LocalDateTime createdTime;
    /**
     * 更新时间
     */
    private LocalDateTime updatedTime;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/QuestionImportResultVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.ArrayList;
import java.util.List;
/**
 * 试题导入结果
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class QuestionImportResultVO {
    /**
     * 总条目数
     */
    private int totalCount;
    /**
     * 成功导入数
     */
    private int successCount;
    /**
     * 失败数
     */
    private int failureCount;
    /**
     * 导入用时(毫秒)
     */
    private long duration;
    /**
     * 失败记录列表
     */
    @Builder.Default
    private List<FailureItem> failureItems = new ArrayList<>();
    /**
     * 失败记录项
     */
    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class FailureItem {
        /**
         * Excel行号(从1开始)
         */
        private int rowIndex;
        /**
         * 题目标题
         */
        private String title;
        /**
         * 错误信息
         */
        private String errorMessage;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/QuestionOptionVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 题目选项视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class QuestionOptionVO {
    /**
     * 选项ID
     */
    private Long id;
    /**
     * 所属题目ID
     */
    private Long questionId;
    /**
     * 选项内容
     */
    private String content;
    /**
     * 是否为正确选项
     */
    private Boolean isCorrect;
    /**
     * 选项顺序
     */
    private Integer orderIndex;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/QuestionTagVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
/**
 * 题目标签视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class QuestionTagVO {
    /**
     * 标签ID
     */
    private Long id;
    /**
     * 所属机构ID
     */
    private Long institutionId;
    /**
     * 标签名称
     */
    private String name;
    /**
     * 关联的题目数量
     */
    private Long questionCount;
    /**
     * 创建者ID
     */
    private Long creatorId;
    /**
     * 创建时间
     */
    private LocalDateTime createdTime;
    /**
     * 更新时间
     */
    private LocalDateTime updatedTime;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/QuestionVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
import java.util.List;
/**
 * 题目视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class QuestionVO {
    /**
     * 题目ID
     */
    private Long id;
    /**
     * 所属机构ID
     */
    private Long institutionId;
    /**
     * 题目标题
     */
    private String title;
    /**
     * 题目内容
     */
    private String content;
    /**
     * 题目类型：1-单选题，2-多选题
     */
    private Integer type;
    /**
     * 题目类型描述
     */
    private String typeDesc;
    /**
     * 难度级别：1-简单，2-中等，3-困难
     */
    private Integer difficulty;
    /**
     * 难度级别描述
     */
    private String difficultyDesc;
    /**
     * 分值
     */
    private Integer score;
    /**
     * 解析说明
     */
    private String analysis;
    /**
     * 正确答案（填空题必填，简答题可选）
     */
    private String answer;
    /**
     * 题目选项列表
     */
    private List<QuestionOptionVO> options;
    /**
     * 标签列表
     */
    private List<QuestionTagVO> tags;
    /**
     * 创建者ID
     */
    private Long creatorId;
    /**
     * 创建者名称
     */
    private String creatorName;
    /**
     * 创建时间
     */
    private LocalDateTime createdTime;
    /**
     * 更新时间
     */
    private LocalDateTime updatedTime;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/QuotaInfoVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
/**
 * 存储配额信息VO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class QuotaInfoVO {
    /**
     * 配额类型
     */
    private String type;
    /**
     * 配额类型名称
     */
    private String typeName;
    /**
     * 总配额（字节）
     */
    private Long totalQuota;
    /**
     * 已用配额（字节）
     */
    private Long usedQuota;
    /**
     * 最后更新时间
     */
    private LocalDateTime lastUpdatedTime;
    /**
     * 获取可用配额
     */
    public Long getAvailableQuota() {
        return totalQuota - usedQuota;
    }
    /**
     * 获取使用百分比
     */
    public Double getUsagePercentage() {
        if (totalQuota == null || totalQuota == 0) {
            return 0.0;
        }
        return (double) usedQuota / totalQuota * 100.0;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/Result.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 统一返回结果
 * @param <T> 数据类型
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Result<T> {
    /**
     * 状态码
     */
    private Integer code;
    /**
     * 消息
     */
    private String message;
    /**
     * 数据
     */
    private T data;
    /**
     * 成功
     */
    public static <T> Result<T> success() {
        return success(null);
    }
    /**
     * 成功
     * @param data 数据
     */
    public static <T> Result<T> success(T data) {
        return Result.<T>builder()
                .code(200)
                .message("操作成功")
                .data(data)
                .build();
    }
    /**
     * 失败
     * @param code 状态码
     * @param message 消息
     */
    public static <T> Result<T> fail(Integer code, String message) {
        return Result.<T>builder()
                .code(code)
                .message(message)
                .build();
    }
    /**
     * 失败
     * @param message 消息
     */
    public static <T> Result<T> fail(String message) {
        return fail(500, message);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/ReviewStatsVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.Map;
/**
 * 课程评论统计VO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ReviewStatsVO {
    /**
     * 课程ID
     */
    private Long courseId;
    /**
     * 平均评分
     */
    private Float averageRating;
    /**
     * 评分人数
     */
    private Integer ratingCount;
    /**
     * 各分数段人数
     * key: 评分(1-5)
     * value: 该评分的人数
     */
    private Map<Integer, Integer> ratingDistribution;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/ReviewVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import com.zhangziqi.online_course_mine.model.entity.CourseReview;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.beans.BeanUtils;
import java.time.LocalDateTime;
/**
 * 课程评论VO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ReviewVO {
    /**
     * 评论ID
     */
    private Long id;
    /**
     * 课程ID
     */
    private Long courseId;
    /**
     * 课程标题
     */
    private String courseTitle;
    /**
     * 用户ID
     */
    private Long userId;
    /**
     * 用户名
     */
    private String username;
    /**
     * 用户头像
     */
    private String userAvatar;
    /**
     * 评分 (1-5)
     */
    private Integer rating;
    /**
     * 评论内容
     */
    private String content;
    /**
     * 点赞数
     */
    private Integer likeCount;
    /**
     * 创建时间
     */
    private LocalDateTime createdAt;
    /**
     * 更新时间
     */
    private LocalDateTime updatedAt;
    /**
     * 从实体转换为VO
     */
    public static ReviewVO fromEntity(CourseReview review) {
        ReviewVO vo = new ReviewVO();
        BeanUtils.copyProperties(review, vo);
        if (review.getCourse() != null) {
            vo.setCourseId(review.getCourse().getId());
            vo.setCourseTitle(review.getCourse().getTitle());
        }
        return vo;
    }
    /**
     * 从实体转换为VO，并填充用户信息
     */
    public static ReviewVO fromEntity(CourseReview review, String username, String userAvatar) {
        ReviewVO vo = fromEntity(review);
        vo.setUsername(username);
        vo.setUserAvatar(userAvatar);
        return vo;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/RoleVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
import java.util.Set;
/**
 * 角色视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "角色信息")
public class RoleVO {
    @Schema(description = "角色ID")
    private Long id;
    @Schema(description = "角色名称")
    private String name;
    @Schema(description = "角色编码")
    private String code;
    @Schema(description = "角色描述")
    private String description;
    @Schema(description = "创建时间")
    private LocalDateTime createdAt;
    @Schema(description = "更新时间")
    private LocalDateTime updatedAt;
    @Schema(description = "权限列表")
    private Set<Permission> permissions;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/SectionVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import com.zhangziqi.online_course_mine.model.entity.Section;
import com.zhangziqi.online_course_mine.model.enums.ContentType;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
/**
 * 小节视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class SectionVO {
    /**
     * 小节ID
     */
    private Long id;
    /**
     * 小节标题
     */
    private String title;
    /**
     * 小节描述
     */
    private String description;
    /**
     * 排序索引
     */
    private Integer orderIndex;
    /**
     * 内容类型
     */
    private String contentType;
    /**
     * 所属章节ID
     */
    private Long chapterId;
    /**
     * 章节标题（可选）
     */
    private String chapterTitle;
    /**
     * 资源类型鉴别器：MEDIA, QUESTION_GROUP, NONE
     */
    private String resourceTypeDiscriminator;
    /**
     * 直接关联的媒体资源（仅当resourceTypeDiscriminator为MEDIA时有效）
     */
    private MediaVO media;
    /**
     * 媒体资源ID（仅当resourceTypeDiscriminator为MEDIA时有效）
     */
    private Long mediaId;
    /**
     * 媒体资源类型(primary, supplementary, homework, reference)
     */
    private String mediaResourceType;
    /**
     * 直接关联的题目组（仅当resourceTypeDiscriminator为QUESTION_GROUP时有效）
     */
    private QuestionGroupVO questionGroup;
    /**
     * 题目组ID（仅当resourceTypeDiscriminator为QUESTION_GROUP时有效）
     */
    private Long questionGroupId;
    /**
     * 是否随机题目顺序（仅当resourceTypeDiscriminator为QUESTION_GROUP时有效）
     */
    private Boolean randomOrder;
    /**
     * 是否按难度顺序排序（仅当resourceTypeDiscriminator为QUESTION_GROUP时有效）
     */
    private Boolean orderByDifficulty;
    /**
     * 是否显示答案解析（仅当resourceTypeDiscriminator为QUESTION_GROUP时有效）
     */
    private Boolean showAnalysis;
    /**
     * 创建时间
     */
    private Long createdTime;
    /**
     * 更新时间
     */
    private Long updatedTime;
    /**
     * 将实体转换为VO（基本信息）
     */
    public static SectionVO fromEntity(Section entity) {
        if (entity == null) {
            return null;
        }
        SectionVO.SectionVOBuilder builder = SectionVO.builder()
            .id(entity.getId())
            .title(entity.getTitle())
            .description(entity.getDescription())
            .orderIndex(entity.getOrderIndex())
            .contentType(entity.getContentType())
            .chapterId(entity.getChapterId())
            .chapterTitle(entity.getChapter() != null ? entity.getChapter().getTitle() : null)
            .resourceTypeDiscriminator(entity.getResourceTypeDiscriminator())
            .mediaId(entity.getMediaId())
            .mediaResourceType(entity.getMediaResourceType())
            .questionGroupId(entity.getQuestionGroupId())
            .randomOrder(entity.getRandomOrder())
            .orderByDifficulty(entity.getOrderByDifficulty())
            .showAnalysis(entity.getShowAnalysis())
            .createdTime(entity.getCreatedAt() != null ? entity.getCreatedAt().toEpochSecond(java.time.ZoneOffset.UTC) : null)
            .updatedTime(entity.getUpdatedAt() != null ? entity.getUpdatedAt().toEpochSecond(java.time.ZoneOffset.UTC) : null);
        // 处理媒体资源
        if (entity.getMedia() != null) {
            MediaVO mediaVO = MediaVO.builder()
                .id(entity.getMedia().getId())
                .title(entity.getMedia().getTitle())
                .description(entity.getMedia().getDescription())
                .type(entity.getMedia().getType() != null ? entity.getMedia().getType().name() : null)
                .size(entity.getMedia().getSize())
                .originalFilename(entity.getMedia().getOriginalFilename())
                .status(entity.getMedia().getStatus() != null ? entity.getMedia().getStatus().name() : null)
                .institutionId(entity.getMedia().getInstitution() != null ? entity.getMedia().getInstitution().getId() : null)
                .uploaderId(entity.getMedia().getUploaderId())
                .uploadTime(entity.getMedia().getUploadTime())
                .lastAccessTime(entity.getMedia().getLastAccessTime())
                .accessUrl(entity.getMedia().getStoragePath())
                .build();
            builder.media(mediaVO);
        }
        // 处理题目组
        if (entity.getQuestionGroup() != null) {
            QuestionGroupVO questionGroupVO = QuestionGroupVO.builder()
                .id(entity.getQuestionGroup().getId())
                .name(entity.getQuestionGroup().getName())
                .description(entity.getQuestionGroup().getDescription())
                .institutionId(entity.getQuestionGroup().getInstitutionId())
                .questionCount((long) (entity.getQuestionGroup().getItems() != null ? entity.getQuestionGroup().getItems().size() : 0))
                .creatorId(entity.getQuestionGroup().getCreatorId())
                .creatorName(entity.getQuestionGroup().getCreatorName())
                .createdTime(entity.getQuestionGroup().getCreatedTime())
                .updatedTime(entity.getQuestionGroup().getUpdatedTime())
                .build();
            builder.questionGroup(questionGroupVO);
        }
        return builder.build();
    }
    /**
     * 获取内容类型枚举
     */
    public ContentType getContentTypeEnum() {
        return ContentType.getByCode(this.contentType);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/StorageQuotaVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.Data;
import java.time.LocalDateTime;
/**
 * 存储配额VO
 */
@Data
public class StorageQuotaVO {
    /**
     * 配额ID
     */
    private Long id;
    /**
     * 配额类型
     */
    private String type;
    /**
     * 总配额大小(字节)
     */
    private Long totalQuota;
    /**
     * 已使用配额(字节)
     */
    private Long usedQuota;
    /**
     * 可用配额(字节)
     */
    private Long availableQuota;
    /**
     * 使用百分比
     */
    private double usagePercentage;
    /**
     * 过期时间
     */
    private LocalDateTime expiresAt;
    /**
     * 机构ID
     */
    private Long institutionId;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/TagVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import com.zhangziqi.online_course_mine.model.entity.Tag;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
/**
 * 标签值对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class TagVO {
    /**
     * 标签ID
     */
    private Long id;
    /**
     * 标签名称
     */
    private String name;
    /**
     * 标签描述
     */
    private String description;
    /**
     * 使用次数
     */
    private Integer useCount;
    /**
     * 相关课程数量
     */
    private Integer courseCount;
    /**
     * 创建时间
     */
    private LocalDateTime createdAt;
    /**
     * 更新时间
     */
    private LocalDateTime updatedAt;
    /**
     * 从实体转换为VO
     */
    public static TagVO fromEntity(Tag tag) {
        if (tag == null) {
            return null;
        }
        return TagVO.builder()
                .id(tag.getId())
                .name(tag.getName())
                .useCount(tag.getUseCount())
                .createdAt(tag.getCreatedAt())
                .updatedAt(tag.getUpdatedAt())
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/UserCourseVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import com.zhangziqi.online_course_mine.model.entity.UserCourse;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
/**
 * 用户课程关系值对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class UserCourseVO {
    /**
     * ID
     */
    private Long id;
    /**
     * 用户ID
     */
    private Long userId;
    /**
     * 用户名
     */
    private String userName;
    /**
     * 课程ID
     */
    private Long courseId;
    /**
     * 课程标题
     */
    private String courseTitle;
    /**
     * 课程封面
     */
    private String courseCover;
    /**
     * 机构ID
     */
    private Long institutionId;
    /**
     * 机构名称
     */
    private String institutionName;
    /**
     * 购买时间
     */
    private LocalDateTime purchasedAt;
    /**
     * 订单ID
     */
    private Long orderId;
    /**
     * 订单号
     */
    private String orderNo;
    /**
     * 过期时间（如果有）
     */
    private LocalDateTime expireAt;
    /**
     * 学习进度（百分比）
     */
    private Integer progress;
    /**
     * 状态
     * 0: 正常学习
     * 1: 已过期
     * 2: 已退款
     */
    private Integer status;
    /**
     * 最后学习时间
     */
    private LocalDateTime lastLearnAt;
    /**
     * 学习总时长（秒）
     */
    private Integer learnDuration;
    /**
     * 创建时间
     */
    private LocalDateTime createdAt;
    /**
     * 更新时间
     */
    private LocalDateTime updatedAt;
    /**
     * 从实体转换为VO
     */
    public static UserCourseVO fromEntity(UserCourse userCourse) {
        if (userCourse == null) {
            return null;
        }
        return UserCourseVO.builder()
                .id(userCourse.getId())
                .userId(userCourse.getUser().getId())
                .userName(userCourse.getUser().getUsername())
                .courseId(userCourse.getCourse().getId())
                .courseTitle(userCourse.getCourse().getTitle())
                .courseCover(userCourse.getCourse().getCoverImage())
                .institutionId(userCourse.getCourse().getInstitution().getId())
                .institutionName(userCourse.getCourse().getInstitution().getName())
                .purchasedAt(userCourse.getPurchasedAt())
                .orderId(userCourse.getOrder() != null ? userCourse.getOrder().getId() : null)
                .orderNo(userCourse.getOrder() != null ? userCourse.getOrder().getOrderNo() : null)
                .expireAt(userCourse.getExpireAt())
                .progress(userCourse.getProgress())
                .status(userCourse.getStatus())
                .lastLearnAt(userCourse.getLastLearnAt())
                .learnDuration(userCourse.getLearnDuration())
                .createdAt(userCourse.getCreatedAt())
                .updatedAt(userCourse.getUpdatedAt())
                .build();
    }
    /**
     * 获取状态文本
     */
    public String getStatusText() {
        switch (status) {
            case 0:
                return "正常学习";
            case 1:
                return "已过期";
            case 2:
                return "已退款";
            default:
                return "未知状态";
        }
    }
    /**
     * 获取学习进度文本
     */
    public String getProgressText() {
        return progress + "%";
    }
    /**
     * 格式化学习时长
     */
    public String getFormattedDuration() {
        if (learnDuration == null || learnDuration == 0) {
            return "0小时0分钟";
        }
        int hours = learnDuration / 3600;
        int minutes = (learnDuration % 3600) / 60;
        return hours + "小时" + minutes + "分钟";
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/UserFavoriteVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
/**
 * 用户收藏课程视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class UserFavoriteVO {
    /**
     * 收藏ID
     */
    private Long id;
    /**
     * 课程ID
     */
    private Long courseId;
    /**
     * 课程标题
     */
    private String courseTitle;
    /**
     * 课程封面图片
     */
    private String courseCoverImage;
    /**
     * 课程价格
     */
    private String coursePrice;
    /**
     * 课程分类名称
     */
    private String categoryName;
    /**
     * 机构名称
     */
    private String institutionName;
    /**
     * 收藏时间
     */
    private LocalDateTime favoriteTime;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/UserVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import com.zhangziqi.online_course_mine.model.entity.Role;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
import java.util.Set;
/**
 * 用户视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "用户信息")
public class UserVO {
    @Schema(description = "用户ID")
    private Long id;
    @Schema(description = "用户名")
    private String username;
    @Schema(description = "邮箱")
    private String email;
    @Schema(description = "手机号")
    private String phone;
    @Schema(description = "头像")
    private String avatar;
    @Schema(description = "昵称")
    private String nickname;
    @Schema(description = "状态：0-禁用，1-正常")
    private Integer status;
    @Schema(description = "机构ID")
    private Long institutionId;
    @Schema(description = "创建时间")
    private LocalDateTime createdAt;
    @Schema(description = "更新时间")
    private LocalDateTime updatedAt;
    @Schema(description = "最后登录时间")
    private LocalDateTime lastLoginAt;
    @Schema(description = "角色列表")
    private Set<Role> roles;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/OnlineCourseMineApplication.java">
package com.zhangziqi.online_course_mine;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
@SpringBootApplication
public class OnlineCourseMineApplication {
    public static void main(String[] args) {
        SpringApplication.run(OnlineCourseMineApplication.class, args);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/CategoryRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Category;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 课程分类Repository
 */
@Repository
public interface CategoryRepository extends JpaRepository<Category, Long>, JpaSpecificationExecutor<Category> {
    /**
     * 根据编码查找分类
     * 
     * @param code 分类编码
     * @return 分类
     */
    Optional<Category> findByCode(String code);
    /**
     * 根据名称查找分类
     * 
     * @param name 分类名称
     * @return 分类
     */
    Optional<Category> findByName(String name);
    /**
     * 查找所有根分类（无父分类的分类）
     * 
     * @return 根分类列表
     */
    List<Category> findByParentIsNull();
    /**
     * 根据父分类ID查找子分类
     * 
     * @param parentId 父分类ID
     * @return 子分类列表
     */
    List<Category> findByParentId(Long parentId);
    /**
     * 根据层级查找分类
     * 
     * @param level 层级
     * @return 分类列表
     */
    List<Category> findByLevel(Integer level);
    /**
     * 检查分类下是否有课程
     * 
     * @param categoryId 分类ID
     * @return 课程数量
     */
    @Query("SELECT COUNT(c) FROM Course c WHERE c.category.id = :categoryId")
    long countCoursesByCategoryId(@Param("categoryId") Long categoryId);
    /**
     * 根据父分类ID统计子分类数量
     * 
     * @param parentId 父分类ID
     * @return 子分类数量
     */
    long countByParentId(Long parentId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/ChapterRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Chapter;
import com.zhangziqi.online_course_mine.model.entity.Course;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
/**
 * 章节Repository
 */
@Repository
public interface ChapterRepository extends JpaRepository<Chapter, Long> {
    /**
     * 根据课程查找章节，按排序索引排序
     * 
     * @param course 课程
     * @return 章节列表
     */
    List<Chapter> findByCourseOrderByOrderIndexAsc(Course course);
    /**
     * 根据课程ID查找章节，按排序索引排序
     * 
     * @param courseId 课程ID
     * @return 章节列表
     */
    List<Chapter> findByCourse_IdOrderByOrderIndexAsc(Long courseId);
    /**
     * 根据课程ID删除所有章节
     * 
     * @param courseId 课程ID
     */
    void deleteByCourse_Id(Long courseId);
    /**
     * 查找课程下最大的排序索引
     * 
     * @param courseId 课程ID
     * @return 最大排序索引
     */
    @Query("SELECT MAX(c.orderIndex) FROM Chapter c WHERE c.course.id = :courseId")
    Integer findMaxOrderIndexByCourse_Id(@Param("courseId") Long courseId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/CourseRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Course;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 课程Repository
 */
@Repository
public interface CourseRepository extends JpaRepository<Course, Long>, JpaSpecificationExecutor<Course> {
    /**
     * 根据机构查找课程（分页）
     * 
     * @param institution 机构
     * @param pageable 分页参数
     * @return 课程分页
     */
    Page<Course> findByInstitution(Institution institution, Pageable pageable);
    /**
     * 根据机构和创建者ID查找课程（分页）
     * 
     * @param institution 机构
     * @param creatorId 创建者ID
     * @param pageable 分页参数
     * @return 课程分页
     */
    Page<Course> findByInstitutionAndCreatorId(Institution institution, Long creatorId, Pageable pageable);
    /**
     * 根据机构和课程状态查找课程（分页）
     * 
     * @param institution 机构
     * @param status 课程状态
     * @param pageable 分页参数
     * @return 课程分页
     */
    Page<Course> findByInstitutionAndStatus(Institution institution, Integer status, Pageable pageable);
    /**
     * 根据机构ID和课程ID查找课程
     * 
     * @param courseId 课程ID
     * @param institutionId 机构ID
     * @return 课程
     */
    @Query("SELECT c FROM Course c WHERE c.id = :courseId AND c.institution.id = :institutionId")
    Optional<Course> findByIdAndInstitutionId(@Param("courseId") Long courseId, @Param("institutionId") Long institutionId);
    /**
     * 根据发布版本ID查找工作副本
     * 
     * @param publishedVersionId 发布版本ID
     * @return 工作副本
     */
    Optional<Course> findByPublishedVersionId(Long publishedVersionId);
    /**
     * 查找工作区版本对应的发布版本
     * 
     * @param workspaceId 工作区版本ID
     * @return 发布版本
     */
    @Query("SELECT c FROM Course c WHERE c.publishedVersionId = :workspaceId AND c.isPublishedVersion = true")
    Optional<Course> findPublishedVersionByWorkspaceId(@Param("workspaceId") Long workspaceId);
    /**
     * 根据课程状态查找课程（分页）
     * 
     * @param status 课程状态
     * @param pageable 分页参数
     * @return 课程分页
     */
    Page<Course> findByStatus(Integer status, Pageable pageable);
    /**
     * 根据分类ID查找课程（分页）
     * 
     * @param categoryId 分类ID
     * @param pageable 分页参数
     * @return 课程分页
     */
    @Query("SELECT c FROM Course c WHERE c.category.id = :categoryId")
    Page<Course> findByCategoryId(@Param("categoryId") Long categoryId, Pageable pageable);
    /**
     * 根据分类ID统计课程数量
     * 
     * @param categoryId 分类ID
     * @return 课程数量
     */
    @Query("SELECT COUNT(c) FROM Course c WHERE c.category.id = :categoryId")
    long countByCategoryId(@Param("categoryId") Long categoryId);
    /**
     * 根据标题模糊查询课程（分页）
     * 
     * @param title 标题关键词
     * @param pageable 分页参数
     * @return 课程分页
     */
    Page<Course> findByTitleContaining(String title, Pageable pageable);
    /**
     * 查找是否为发布版本的课程（分页）
     * 
     * @param isPublishedVersion 是否为发布版本
     * @param pageable 分页参数
     * @return 课程分页
     */
    Page<Course> findByIsPublishedVersion(Boolean isPublishedVersion, Pageable pageable);
    /**
     * 根据机构ID和isPublishedVersion字段查询课程
     * 
     * @param institution 机构
     * @param isPublishedVersion 是否为发布版本
     * @param pageable 分页参数
     * @return 课程分页
     */
    Page<Course> findByInstitutionAndIsPublishedVersion(Institution institution, Boolean isPublishedVersion, Pageable pageable);
    /**
     * 根据机构ID和发布版本状态查询课程
     * 
     * @param institutionId 机构ID
     * @param isPublishedVersion 发布版本状态
     * @param pageable 分页参数
     * @return 课程分页
     */
    @Query("SELECT c FROM Course c WHERE c.institution.id = :institutionId AND c.isPublishedVersion = :isPublishedVersion")
    Page<Course> findByInstitutionIdAndIsPublishedVersion(Long institutionId, Boolean isPublishedVersion, Pageable pageable);
    /**
     * 根据状态和是否为发布版本查询课程
     * 
     * @param status 课程状态
     * @param isPublishedVersion 是否为发布版本
     * @param pageable 分页参数
     * @return 课程分页
     */
    Page<Course> findByStatusAndIsPublishedVersion(Integer status, Boolean isPublishedVersion, Pageable pageable);
    /**
     * 查询热门课程（按学习人数排序）
     * 
     * @param status 课程状态（已发布）
     * @param isPublishedVersion 是否为发布版本
     * @param pageable 分页参数
     * @return 热门课程列表
     */
    @Query("SELECT c FROM Course c WHERE c.status = :status AND c.isPublishedVersion = :isPublishedVersion " +
           "ORDER BY c.studentCount DESC NULLS LAST, c.createdAt DESC")
    List<Course> findHotCourses(@Param("status") Integer status, @Param("isPublishedVersion") Boolean isPublishedVersion, Pageable pageable);
    /**
     * 查询最新课程（已发布状态）
     * 
     * @param status 课程状态（已发布）
     * @param isPublishedVersion 是否为发布版本
     * @param pageable 分页参数
     * @return 最新课程列表
     */
    @Query("SELECT c FROM Course c WHERE c.status = :status AND c.isPublishedVersion = :isPublishedVersion ORDER BY c.createdAt DESC")
    List<Course> findLatestCourses(@Param("status") Integer status, @Param("isPublishedVersion") Boolean isPublishedVersion, Pageable pageable);
    /**
     * 查询高评分课程
     * 
     * @param status 课程状态（已发布）
     * @param isPublishedVersion 是否为发布版本
     * @param minRatingCount 最小评分数量
     * @param pageable 分页参数
     * @return 高评分课程列表
     */
    @Query("SELECT c FROM Course c WHERE c.status = :status AND c.isPublishedVersion = :isPublishedVersion " +
           "AND (c.ratingCount IS NOT NULL AND c.ratingCount >= :minRatingCount) " +
           "ORDER BY c.averageRating DESC NULLS LAST, c.ratingCount DESC")
    List<Course> findTopRatedCourses(@Param("status") Integer status, 
                                   @Param("isPublishedVersion") Boolean isPublishedVersion,
                                   @Param("minRatingCount") Integer minRatingCount,
                                   Pageable pageable);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/CourseReviewRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Course;
import com.zhangziqi.online_course_mine.model.entity.CourseReview;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.Optional;
/**
 * 课程评论数据访问接口
 */
@Repository
public interface CourseReviewRepository extends JpaRepository<CourseReview, Long>, JpaSpecificationExecutor<CourseReview> {
    /**
     * 根据课程ID分页查找评论
     */
    @Query("SELECT r FROM CourseReview r WHERE r.course.id = :courseId")
    Page<CourseReview> findByCourseId(@Param("courseId") Long courseId, Pageable pageable);
    /**
     * 根据课程实体分页查找评论
     */
    Page<CourseReview> findByCourse(Course course, Pageable pageable);
    /**
     * 根据用户ID和课程ID查找评论
     */
    @Query("SELECT r FROM CourseReview r WHERE r.userId = :userId AND r.course.id = :courseId")
    Optional<CourseReview> findByUserIdAndCourseId(@Param("userId") Long userId, @Param("courseId") Long courseId);
    /**
     * 计算课程特定评分的评论数量
     */
    @Query("SELECT COUNT(r) FROM CourseReview r WHERE r.course.id = :courseId AND r.rating = :rating")
    long countByCourseIdAndRating(@Param("courseId") Long courseId, @Param("rating") Integer rating);
    /**
     * 删除指定用户对指定课程的评论
     */
    @Query("DELETE FROM CourseReview r WHERE r.userId = :userId AND r.course.id = :courseId")
    void deleteByUserIdAndCourseId(@Param("userId") Long userId, @Param("courseId") Long courseId);
    /**
     * 查找用户是否评论过特定课程
     */
    @Query("SELECT COUNT(r) > 0 FROM CourseReview r WHERE r.userId = :userId AND r.course.id = :courseId")
    boolean existsByUserIdAndCourseId(@Param("userId") Long userId, @Param("courseId") Long courseId);
    /**
     * 计算课程评论总数
     */
    @Query("SELECT COUNT(r) FROM CourseReview r WHERE r.course.id = :courseId")
    long countByCourseId(@Param("courseId") Long courseId);
    /**
     * 计算用户评论总数
     */
    long countByUserId(Long userId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/InstitutionApplicationRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.InstitutionApplication;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 机构申请Repository
 */
@Repository
public interface InstitutionApplicationRepository extends JpaRepository<InstitutionApplication, Long> {
    /**
     * 根据申请ID查找申请
     *
     * @param applicationId 申请ID
     * @return 申请
     */
    Optional<InstitutionApplication> findByApplicationId(String applicationId);
    /**
     * 根据申请ID和联系邮箱查找申请
     *
     * @param applicationId 申请ID
     * @param contactEmail 联系邮箱
     * @return 申请
     */
    Optional<InstitutionApplication> findByApplicationIdAndContactEmail(String applicationId, String contactEmail);
    /**
     * 根据状态查找申请列表
     *
     * @param status 状态
     * @return 申请列表
     */
    List<InstitutionApplication> findByStatus(Integer status);
    /**
     * 根据状态分页查询申请
     *
     * @param status 状态
     * @param pageable 分页
     * @return 申请分页
     */
    Page<InstitutionApplication> findByStatus(Integer status, Pageable pageable);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/InstitutionRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 机构Repository
 */
@Repository
public interface InstitutionRepository extends JpaRepository<Institution, Long> {
    /**
     * 根据机构名称查找机构
     *
     * @param name 机构名称
     * @return 机构
     */
    Optional<Institution> findByName(String name);
    /**
     * 根据状态查找机构列表
     *
     * @param status 状态
     * @return 机构列表
     */
    List<Institution> findByStatus(Integer status);
    /**
     * 根据注册码查找机构
     *
     * @param registerCode 注册码
     * @return 机构
     */
    Optional<Institution> findByRegisterCode(String registerCode);
    /**
     * 检查注册码是否存在
     *
     * @param registerCode 注册码
     * @return 是否存在
     */
    boolean existsByRegisterCode(String registerCode);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/MediaRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Media;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 媒体资源Repository
 */
@Repository
public interface MediaRepository extends JpaRepository<Media, Long> {
    /**
     * 根据机构查找媒体资源
     *
     * @param institution 机构实体
     * @param pageable 分页参数
     * @return 媒体资源分页
     */
    Page<Media> findByInstitution(Institution institution, Pageable pageable);
    /**
     * 根据ID和机构查找媒体资源
     *
     * @param id 媒体资源ID
     * @param institution 机构实体
     * @return 媒体资源
     */
    Optional<Media> findByIdAndInstitution(Long id, Institution institution);
    /**
     * 计算机构的媒体资源总大小
     *
     * @param institution 机构实体
     * @return 总大小(字节)
     */
    @Query("SELECT SUM(m.size) FROM Media m WHERE m.institution = :institution")
    Long sumSizeByInstitution(@Param("institution") Institution institution);
    /**
     * 根据机构ID计算媒体资源总大小
     *
     * @param institutionId 机构ID
     * @return 总大小(字节)
     */
    @Query("SELECT SUM(m.size) FROM Media m WHERE m.institution.id = :institutionId")
    Long sumSizeByInstitutionId(@Param("institutionId") Long institutionId);
    /**
     * 根据上传者ID查找媒体资源
     *
     * @param uploaderId 上传者ID
     * @param pageable 分页参数
     * @return 媒体资源分页
     */
    Page<Media> findByUploaderId(Long uploaderId, Pageable pageable);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/OrderRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Order;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 订单数据访问接口
 */
@Repository
public interface OrderRepository extends JpaRepository<Order, Long> {
    /**
     * 根据订单号查询订单
     */
    Optional<Order> findByOrderNo(String orderNo);
    /**
     * 根据支付宝交易号查询订单
     */
    Optional<Order> findByTradeNo(String tradeNo);
    /**
     * 根据用户ID查询所有订单
     */
    List<Order> findByUser_Id(Long userId);
    /**
     * 分页查询用户订单
     */
    Page<Order> findByUser_Id(Long userId, Pageable pageable);
    /**
     * 根据机构ID查询所有订单
     */
    List<Order> findByInstitution_Id(Long institutionId);
    /**
     * 分页查询机构订单
     */
    Page<Order> findByInstitution_Id(Long institutionId, Pageable pageable);
    /**
     * 根据课程ID查询所有订单
     */
    List<Order> findByCourse_Id(Long courseId);
    /**
     * 分页查询课程订单
     */
    Page<Order> findByCourse_Id(Long courseId, Pageable pageable);
    /**
     * 根据订单状态查询订单
     */
    List<Order> findByStatus(Integer status);
    /**
     * 分页查询订单状态
     */
    Page<Order> findByStatus(Integer status, Pageable pageable);
    /**
     * 根据用户ID和订单状态查询订单
     */
    List<Order> findByUser_IdAndStatus(Long userId, Integer status);
    /**
     * 分页查询用户订单状态
     */
    Page<Order> findByUser_IdAndStatus(Long userId, Integer status, Pageable pageable);
    /**
     * 根据机构ID和订单状态查询订单
     */
    List<Order> findByInstitution_IdAndStatus(Long institutionId, Integer status);
    /**
     * 分页查询机构订单状态
     */
    Page<Order> findByInstitution_IdAndStatus(Long institutionId, Integer status, Pageable pageable);
    /**
     * 根据课程ID和订单状态查询订单
     */
    List<Order> findByCourse_IdAndStatus(Long courseId, Integer status);
    /**
     * 分页查询课程订单状态
     */
    Page<Order> findByCourse_IdAndStatus(Long courseId, Integer status, Pageable pageable);
    /**
     * 统计用户订单总数
     */
    long countByUser_Id(Long userId);
    /**
     * 统计机构订单总数
     */
    long countByInstitution_Id(Long institutionId);
    /**
     * 统计课程订单总数
     */
    long countByCourse_Id(Long courseId);
    /**
     * 统计订单状态总数
     */
    long countByStatus(Integer status);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/PermissionRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.Optional;
/**
 * 权限Repository
 */
@Repository
public interface PermissionRepository extends JpaRepository<Permission, Long> {
    /**
     * 根据权限编码查找权限
     *
     * @param code 权限编码
     * @return 权限
     */
    Optional<Permission> findByCode(String code);
    /**
     * 根据URL和请求方法查找权限
     *
     * @param url URL
     * @param method 请求方法
     * @return 权限
     */
    Optional<Permission> findByUrlAndMethod(String url, String method);
    /**
     * 根据权限编码查询，排除指定ID的权限
     * 
     * @param code 权限编码
     * @param id 要排除的权限ID
     * @return 权限
     */
    Optional<Permission> findByCodeAndIdNot(String code, Long id);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/QuestionGroupItemRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.QuestionGroup;
import com.zhangziqi.online_course_mine.model.entity.QuestionGroupItem;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 题目组项仓库接口
 */
@Repository
public interface QuestionGroupItemRepository extends JpaRepository<QuestionGroupItem, Long> {
    /**
     * 根据题目组查询所有项目，按顺序排序
     */
    List<QuestionGroupItem> findByGroupOrderByOrderIndexAsc(QuestionGroup group);
    /**
     * 根据题目组ID查询所有项目，按顺序排序
     */
    @Query("SELECT i FROM QuestionGroupItem i WHERE i.group.id = :groupId ORDER BY i.orderIndex ASC")
    List<QuestionGroupItem> findByGroupIdOrderByOrderIndexAsc(@Param("groupId") Long groupId);
    /**
     * 根据题目组ID和题目ID查询项目
     */
    @Query("SELECT i FROM QuestionGroupItem i WHERE i.group.id = :groupId AND i.question.id = :questionId")
    Optional<QuestionGroupItem> findByGroupIdAndQuestionId(@Param("groupId") Long groupId, @Param("questionId") Long questionId);
    /**
     * 删除题目组的所有项目
     */
    @Modifying
    @Query("DELETE FROM QuestionGroupItem i WHERE i.group.id = :groupId")
    void deleteByGroupId(@Param("groupId") Long groupId);
    /**
     * 删除题目组中的指定题目
     */
    @Modifying
    @Query("DELETE FROM QuestionGroupItem i WHERE i.group.id = :groupId AND i.question.id = :questionId")
    void deleteByGroupIdAndQuestionId(@Param("groupId") Long groupId, @Param("questionId") Long questionId);
    /**
     * 统计题目组中的题目数量
     */
    @Query("SELECT COUNT(i) FROM QuestionGroupItem i WHERE i.group.id = :groupId")
    long countByGroupId(@Param("groupId") Long groupId);
    /**
     * 查询题目所在的所有题目组
     */
    @Query("SELECT i FROM QuestionGroupItem i WHERE i.question.id = :questionId")
    List<QuestionGroupItem> findByQuestionId(@Param("questionId") Long questionId);
    /**
     * 根据题目组ID查询所有题目项
     */
    @Query("SELECT gi FROM QuestionGroupItem gi WHERE gi.group.id = :groupId")
    List<QuestionGroupItem> findByGroupId(@Param("groupId") Long groupId);
    /**
     * 根据题目组ID查询所有题目项，按排序索引升序排列
     */
    @Query("SELECT gi FROM QuestionGroupItem gi WHERE gi.group.id = :groupId ORDER BY gi.orderIndex ASC")
    List<QuestionGroupItem> findByGroupIdOrderByOrderIndex(@Param("groupId") Long groupId);
    /**
     * 验证题目是否已存在于题目组中
     */
    @Query("SELECT COUNT(gi) > 0 FROM QuestionGroupItem gi WHERE gi.group.id = :groupId AND gi.question.id = :questionId")
    boolean existsByGroupIdAndQuestionId(@Param("groupId") Long groupId, @Param("questionId") Long questionId);
    /**
     * 查询题目被哪些题目组引用
     */
    @Query("SELECT gi.group.id FROM QuestionGroupItem gi WHERE gi.question.id = :questionId")
    List<Long> findGroupIdsByQuestionId(@Param("questionId") Long questionId);
    /**
     * 根据题目ID删除所有与该题目相关的题目组项
     */
    @Modifying
    @Query("DELETE FROM QuestionGroupItem i WHERE i.question.id = :questionId")
    void deleteByQuestionId(@Param("questionId") Long questionId);
    /**
     * 计算题目被题组引用的次数
     */
    @Query("SELECT COUNT(i) FROM QuestionGroupItem i WHERE i.question.id = :questionId")
    long countByQuestionId(@Param("questionId") Long questionId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/QuestionGroupRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.QuestionGroup;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 题目组数据访问层
 */
@Repository
public interface QuestionGroupRepository extends JpaRepository<QuestionGroup, Long> {
    /**
     * 根据机构查询所有题目组，支持分页
     */
    Page<QuestionGroup> findByInstitution(Institution institution, Pageable pageable);
    /**
     * 根据ID和机构ID查询题目组
     */
    @Query("SELECT g FROM QuestionGroup g WHERE g.id = :id AND g.institution.id = :institutionId")
    Optional<QuestionGroup> findByIdAndInstitutionId(@Param("id") Long id, @Param("institutionId") Long institutionId);
    /**
     * 根据机构ID查询所有题目组
     */
    @Query("SELECT g FROM QuestionGroup g WHERE g.institution.id = :institutionId ORDER BY g.name ASC")
    List<QuestionGroup> findAllByInstitutionId(@Param("institutionId") Long institutionId);
    /**
     * 关键词搜索题目组
     */
    @Query("SELECT g FROM QuestionGroup g WHERE g.institution = :institution AND (LOWER(g.name) LIKE LOWER(CONCAT('%', :keyword, '%')) OR LOWER(g.description) LIKE LOWER(CONCAT('%', :keyword, '%')))")
    Page<QuestionGroup> searchByKeyword(@Param("institution") Institution institution, @Param("keyword") String keyword, Pageable pageable);
    /**
     * 根据ID列表和机构ID查询题目组
     */
    @Query("SELECT g FROM QuestionGroup g WHERE g.id IN :ids AND g.institution.id = :institutionId ORDER BY g.name ASC")
    List<QuestionGroup> findByIdInAndInstitutionId(@Param("ids") List<Long> ids, @Param("institutionId") Long institutionId);
    /**
     * 批量查询题目组的题目数量
     */
    @Query("SELECT g.id, COUNT(gi.id) FROM QuestionGroup g LEFT JOIN QuestionGroupItem gi ON g.id = gi.group.id WHERE g.id IN :groupIds GROUP BY g.id")
    List<Object[]> countQuestionsByGroupIds(@Param("groupIds") List<Long> groupIds);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/QuestionOptionRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Question;
import com.zhangziqi.online_course_mine.model.entity.QuestionOption;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
/**
 * 题目选项Repository
 */
@Repository
public interface QuestionOptionRepository extends JpaRepository<QuestionOption, Long> {
    /**
     * 根据题目查询所有选项，按照顺序排序
     */
    List<QuestionOption> findByQuestionOrderByOrderIndexAsc(Question question);
    /**
     * 根据题目ID查询所有选项，按照顺序排序
     */
    @Query("SELECT qo FROM QuestionOption qo WHERE qo.question.id = :questionId ORDER BY qo.orderIndex ASC")
    List<QuestionOption> findByQuestionIdOrderByOrderIndexAsc(@Param("questionId") Long questionId);
    /**
     * 删除题目的所有选项
     */
    @Modifying
    @Query("DELETE FROM QuestionOption qo WHERE qo.question.id = :questionId")
    void deleteByQuestionId(@Param("questionId") Long questionId);
    /**
     * 获取题目的正确选项
     */
    @Query("SELECT qo FROM QuestionOption qo WHERE qo.question.id = :questionId AND qo.isCorrect = true")
    List<QuestionOption> findCorrectOptionsByQuestionId(@Param("questionId") Long questionId);
    /**
     * 统计题目选项数量
     */
    long countByQuestionId(Long questionId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/QuestionRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Question;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 题目Repository
 */
@Repository
public interface QuestionRepository extends JpaRepository<Question, Long>, JpaSpecificationExecutor<Question> {
    /**
     * 根据机构查找题目（分页）
     */
    Page<Question> findByInstitution(Institution institution, Pageable pageable);
    /**
     * 根据机构和创建者ID查找题目（分页）
     */
    Page<Question> findByInstitutionAndCreatorId(Institution institution, Long creatorId, Pageable pageable);
    /**
     * 根据机构和题目类型查找题目（分页）
     */
    Page<Question> findByInstitutionAndType(Institution institution, Integer type, Pageable pageable);
    /**
     * 根据机构ID和题目ID查找题目
     */
    @Query("SELECT q FROM Question q WHERE q.id = :questionId AND q.institution.id = :institutionId")
    Optional<Question> findByIdAndInstitutionId(@Param("questionId") Long questionId, @Param("institutionId") Long institutionId);
    /**
     * 根据难度级别查找题目（分页）
     */
    Page<Question> findByInstitutionAndDifficulty(Institution institution, Integer difficulty, Pageable pageable);
    /**
     * 根据关键词搜索题目（分页）
     */
    @Query("SELECT q FROM Question q WHERE q.institution = :institution AND (LOWER(q.title) LIKE LOWER(CONCAT('%', :keyword, '%')) OR LOWER(q.content) LIKE LOWER(CONCAT('%', :keyword, '%')))")
    Page<Question> searchByKeyword(@Param("institution") Institution institution, @Param("keyword") String keyword, Pageable pageable);
    /**
     * 随机获取指定数量的题目
     */
    @Query(value = "SELECT * FROM questions WHERE institution_id = :institutionId AND type = :type ORDER BY RAND() LIMIT :limit", nativeQuery = true)
    List<Question> findRandomQuestions(@Param("institutionId") Long institutionId, @Param("type") Integer type, @Param("limit") int limit);
    /**
     * 根据标签ID列表查询包含所有这些标签的题目ID
     * 使用COUNT(DISTINCT m.tag_id) = :tagCount确保题目包含所有指定的标签
     */
    @Query(value = "SELECT q.id FROM questions q " +
            "JOIN question_tag_mappings m ON q.id = m.question_id " +
            "WHERE m.tag_id IN :tagIds " +
            "GROUP BY q.id " +
            "HAVING COUNT(DISTINCT m.tag_id) = :tagCount", nativeQuery = true)
    List<Long> findQuestionIdsByTagIds(@Param("tagIds") List<Long> tagIds, @Param("tagCount") Long tagCount);
    /**
     * 根据ID列表和机构查询题目（分页）
     */
    Page<Question> findByIdInAndInstitution(List<Long> ids, Institution institution, Pageable pageable);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/QuestionTagMappingRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Question;
import com.zhangziqi.online_course_mine.model.entity.QuestionTag;
import com.zhangziqi.online_course_mine.model.entity.QuestionTagMapping;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 题目标签映射数据访问层
 */
@Repository
public interface QuestionTagMappingRepository extends JpaRepository<QuestionTagMapping, Long> {
    /**
     * 根据题目和标签查询映射
     */
    Optional<QuestionTagMapping> findByQuestionAndTag(Question question, QuestionTag tag);
    /**
     * 删除题目和标签的映射
     */
    @Modifying
    @Query("DELETE FROM QuestionTagMapping m WHERE m.question.id = :questionId AND m.tag.id = :tagId")
    void deleteByQuestionIdAndTagId(@Param("questionId") Long questionId, @Param("tagId") Long tagId);
    /**
     * 删除标签的所有映射
     */
    @Modifying
    @Query("DELETE FROM QuestionTagMapping m WHERE m.tag.id = :tagId")
    void deleteByTagId(@Param("tagId") Long tagId);
    /**
     * 删除题目的所有映射
     */
    @Modifying
    @Query("DELETE FROM QuestionTagMapping m WHERE m.question.id = :questionId")
    void deleteByQuestionId(@Param("questionId") Long questionId);
    /**
     * 统计标签关联的题目数量
     */
    @Query("SELECT COUNT(DISTINCT m.question.id) FROM QuestionTagMapping m WHERE m.tag.id = :tagId")
    long countQuestionsByTagId(@Param("tagId") Long tagId);
    /**
     * 统计题目关联的标签数量
     */
    @Query("SELECT COUNT(DISTINCT m.tag.id) FROM QuestionTagMapping m WHERE m.question.id = :questionId")
    long countTagsByQuestionId(@Param("questionId") Long questionId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/QuestionTagRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.QuestionTag;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 题目标签数据访问层
 */
@Repository
public interface QuestionTagRepository extends JpaRepository<QuestionTag, Long> {
    /**
     * 根据机构和标签名称查询标签
     */
    Optional<QuestionTag> findByInstitutionAndName(Institution institution, String name);
    /**
     * 根据ID和机构ID查询标签
     */
    @Query("SELECT t FROM QuestionTag t WHERE t.id = :id AND t.institution.id = :institutionId")
    Optional<QuestionTag> findByIdAndInstitutionId(@Param("id") Long id, @Param("institutionId") Long institutionId);
    /**
     * 根据机构查询所有标签，支持分页
     */
    Page<QuestionTag> findByInstitution(Institution institution, Pageable pageable);
    /**
     * 根据机构ID查询所有标签
     */
    @Query("SELECT t FROM QuestionTag t WHERE t.institution.id = :institutionId ORDER BY t.name ASC")
    List<QuestionTag> findAllByInstitutionId(@Param("institutionId") Long institutionId);
    /**
     * 关键词搜索标签
     */
    @Query("SELECT t FROM QuestionTag t WHERE t.institution = :institution AND LOWER(t.name) LIKE LOWER(CONCAT('%', :keyword, '%'))")
    Page<QuestionTag> searchByKeyword(@Param("institution") Institution institution, @Param("keyword") String keyword, Pageable pageable);
    /**
     * 根据题目ID查询关联的标签
     */
    @Query("SELECT t FROM QuestionTag t JOIN QuestionTagMapping m ON t.id = m.tag.id WHERE m.question.id = :questionId ORDER BY t.name ASC")
    List<QuestionTag> findByQuestionId(@Param("questionId") Long questionId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/RoleRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 角色Repository
 */
@Repository
public interface RoleRepository extends JpaRepository<Role, Long> {
    /**
     * 根据角色编码查找角色
     *
     * @param code 角色编码
     * @return 角色
     */
    Optional<Role> findByCode(String code);
    /**
     * 根据角色名称查找角色
     *
     * @param name 角色名称
     * @return 角色
     */
    Optional<Role> findByName(String name);
    /**
     * 查找包含指定权限的所有角色
     * 
     * @param permission 权限
     * @return 角色列表
     */
    List<Role> findByPermissionsContaining(Permission permission);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/SectionRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Chapter;
import com.zhangziqi.online_course_mine.model.entity.Section;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
/**
 * 小节Repository
 */
@Repository
public interface SectionRepository extends JpaRepository<Section, Long> {
    /**
     * 根据章节查找小节，按排序索引排序
     * 
     * @param chapter 章节
     * @return 小节列表
     */
    List<Section> findByChapterOrderByOrderIndexAsc(Chapter chapter);
    /**
     * 根据章节ID查找小节，按排序索引排序
     * 
     * @param chapterId 章节ID
     * @return 小节列表
     */
    List<Section> findByChapter_IdOrderByOrderIndexAsc(Long chapterId);
    /**
     * 根据章节ID删除所有小节
     * 
     * @param chapterId 章节ID
     */
    void deleteByChapter_Id(Long chapterId);
    /**
     * 根据内容类型查找小节
     * 
     * @param contentType 内容类型
     * @return 小节列表
     */
    List<Section> findByContentType(String contentType);
    /**
     * 查找章节下最大的排序索引
     * 
     * @param chapterId 章节ID
     * @return 最大排序索引
     */
    @Query("SELECT MAX(s.orderIndex) FROM Section s WHERE s.chapter.id = :chapterId")
    Integer findMaxOrderIndexByChapter_Id(@Param("chapterId") Long chapterId);
    /**
     * 根据课程ID查找所有小节
     * 
     * @param courseId 课程ID
     * @return 小节列表
     */
    @Query("SELECT s FROM Section s JOIN s.chapter c WHERE c.course.id = :courseId ORDER BY c.orderIndex, s.orderIndex")
    List<Section> findByCourseIdOrderByChapterOrderIndexAndOrderIndexAsc(@Param("courseId") Long courseId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/StorageQuotaRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.StorageQuota;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 存储配额Repository
 */
@Repository
public interface StorageQuotaRepository extends JpaRepository<StorageQuota, Long> {
    /**
     * 根据机构和配额类型查找配额
     *
     * @param institution 机构
     * @param type 配额类型
     * @return 存储配额
     */
    Optional<StorageQuota> findByInstitutionAndType(Institution institution, QuotaType type);
    /**
     * 根据机构查找所有配额
     *
     * @param institution 机构
     * @return 配额列表
     */
    List<StorageQuota> findByInstitution(Institution institution);
    /**
     * 查找机构的有效配额（未过期或无过期时间）
     *
     * @param institution 机构
     * @return 有效配额列表
     */
    @Query("SELECT sq FROM StorageQuota sq WHERE sq.institution = :institution AND (sq.expiresAt IS NULL OR sq.expiresAt > CURRENT_TIMESTAMP)")
    List<StorageQuota> findActiveQuotasByInstitution(@Param("institution") Institution institution);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/TagRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Tag;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 标签Repository
 */
@Repository
public interface TagRepository extends JpaRepository<Tag, Long>, JpaSpecificationExecutor<Tag> {
    /**
     * 根据名称查找标签
     * 
     * @param name 标签名称
     * @return 标签
     */
    Optional<Tag> findByName(String name);
    /**
     * 检查标签名称是否存在
     * 
     * @param name 标签名称
     * @return 是否存在
     */
    boolean existsByName(String name);
    /**
     * 根据名称模糊查询标签
     * 
     * @param keyword 关键词
     * @return 标签列表
     */
    List<Tag> findByNameContaining(String keyword);
    /**
     * 根据使用次数排序查找热门标签
     * 
     * @param pageable 分页参数
     * @return 标签分页
     */
    Page<Tag> findByOrderByUseCountDesc(Pageable pageable);
    /**
     * 查询最热门的标签
     * 
     * @param pageable 分页参数
     * @return 标签列表
     */
    List<Tag> findTopByOrderByUseCountDesc(Pageable pageable);
    /**
     * 查询使用次数大于指定值的标签
     * 
     * @param count 使用次数
     * @return 标签列表
     */
    List<Tag> findByUseCountGreaterThan(Integer count);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/UserCourseRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.UserCourse;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 用户课程关联数据访问接口
 */
@Repository
public interface UserCourseRepository extends JpaRepository<UserCourse, Long> {
    /**
     * 根据用户ID和课程ID查询关联记录
     */
    Optional<UserCourse> findByUser_IdAndCourse_Id(Long userId, Long courseId);
    /**
     * 根据订单ID查询关联记录
     */
    Optional<UserCourse> findByOrder_Id(Long orderId);
    /**
     * 根据用户ID查询所有已购课程
     */
    List<UserCourse> findByUser_Id(Long userId);
    /**
     * 分页查询用户已购课程
     */
    Page<UserCourse> findByUser_Id(Long userId, Pageable pageable);
    /**
     * 根据课程ID查询所有购买记录
     */
    List<UserCourse> findByCourse_Id(Long courseId);
    /**
     * 分页查询课程购买记录
     */
    Page<UserCourse> findByCourse_Id(Long courseId, Pageable pageable);
    /**
     * 根据状态查询记录
     */
    List<UserCourse> findByStatus(Integer status);
    /**
     * 分页查询状态记录
     */
    Page<UserCourse> findByStatus(Integer status, Pageable pageable);
    /**
     * 根据用户ID和状态查询记录
     */
    List<UserCourse> findByUser_IdAndStatus(Long userId, Integer status);
    /**
     * 分页查询用户状态记录
     */
    Page<UserCourse> findByUser_IdAndStatus(Long userId, Integer status, Pageable pageable);
    /**
     * 根据课程ID和状态查询记录
     */
    List<UserCourse> findByCourse_IdAndStatus(Long courseId, Integer status);
    /**
     * 分页查询课程状态记录
     */
    Page<UserCourse> findByCourse_IdAndStatus(Long courseId, Integer status, Pageable pageable);
    /**
     * 查询用户学习进度大于等于指定值的课程
     */
    List<UserCourse> findByUser_IdAndProgressGreaterThanEqual(Long userId, Integer progress);
    /**
     * 查询用户最近学习的课程
     */
    @Query("SELECT uc FROM UserCourse uc WHERE uc.user.id = :userId ORDER BY uc.lastLearnAt DESC")
    List<UserCourse> findRecentLearnedCourses(@Param("userId") Long userId, Pageable pageable);
    /**
     * 统计用户已购课程数
     */
    long countByUser_Id(Long userId);
    /**
     * 统计课程购买数
     */
    long countByCourse_Id(Long courseId);
    /**
     * 统计状态记录数
     */
    long countByStatus(Integer status);
    /**
     * 判断用户是否购买过课程
     */
    boolean existsByUser_IdAndCourse_Id(Long userId, Long courseId);
    /**
     * 查询用户课程学习进度
     */
    @Query("SELECT uc.progress FROM UserCourse uc WHERE uc.user.id = :userId AND uc.course.id = :courseId")
    Integer findProgressByUserIdAndCourseId(@Param("userId") Long userId, @Param("courseId") Long courseId);
    /**
     * 查询机构下所有课程的购买记录
     */
    @Query("SELECT uc FROM UserCourse uc WHERE uc.course.institution.id = :institutionId")
    List<UserCourse> findByInstitutionId(@Param("institutionId") Long institutionId);
    /**
     * 分页查询机构课程购买记录
     */
    @Query("SELECT uc FROM UserCourse uc WHERE uc.course.institution.id = :institutionId")
    Page<UserCourse> findByInstitutionId(@Param("institutionId") Long institutionId, Pageable pageable);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/UserFavoriteRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.UserFavorite;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
@Repository
public interface UserFavoriteRepository extends JpaRepository<UserFavorite, Long> {
    /**
     * 查询用户是否已收藏某课程
     * @param userId 用户ID
     * @param courseId 课程ID
     * @return 收藏记录
     */
    Optional<UserFavorite> findByUser_IdAndCourse_Id(Long userId, Long courseId);
    /**
     * 查询用户收藏的所有课程
     * @param userId 用户ID
     * @return 收藏记录列表
     */
    List<UserFavorite> findByUser_Id(Long userId);
    /**
     * 分页查询用户收藏的课程
     * @param userId 用户ID
     * @param pageable 分页参数
     * @return 分页结果
     */
    Page<UserFavorite> findByUser_Id(Long userId, Pageable pageable);
    /**
     * 删除指定用户对指定课程的收藏
     * @param userId 用户ID
     * @param courseId 课程ID
     * @return 删除数量
     */
    @Modifying
    @Query("DELETE FROM UserFavorite uf WHERE uf.user.id = :userId AND uf.course.id = :courseId")
    long deleteByUserAndCourseIds(@Param("userId") Long userId, @Param("courseId") Long courseId);
    /**
     * 统计课程被收藏次数
     * @param courseId 课程ID
     * @return 收藏次数
     */
    long countByCourse_Id(Long courseId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/UserRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.stereotype.Repository;
import java.util.Optional;
/**
 * 用户Repository
 */
@Repository
public interface UserRepository extends JpaRepository<User, Long>, JpaSpecificationExecutor<User> {
    /**
     * 根据用户名查找用户
     *
     * @param username 用户名
     * @return 用户
     */
    Optional<User> findByUsername(String username);
    /**
     * 根据邮箱查找用户
     *
     * @param email 邮箱
     * @return 用户
     */
    Optional<User> findByEmail(String email);
    /**
     * 根据手机号查找用户
     *
     * @param phone 手机号
     * @return 用户
     */
    Optional<User> findByPhone(String phone);
    /**
     * 判断用户名是否存在
     *
     * @param username 用户名
     * @return 是否存在
     */
    boolean existsByUsername(String username);
    /**
     * 判断邮箱是否存在
     *
     * @param email 邮箱
     * @return 是否存在
     */
    boolean existsByEmail(String email);
    /**
     * 判断手机号是否存在
     *
     * @param phone 手机号
     * @return 是否存在
     */
    boolean existsByPhone(String phone);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/security/jwt/JwtAuthenticationFilter.java">
package com.zhangziqi.online_course_mine.security.jwt;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;
import java.io.IOException;
/**
 * JWT认证过滤器
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {
    private final JwtTokenProvider tokenProvider;
    private final TokenBlacklistService tokenBlacklistService;
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        try {
            String jwt = resolveToken(request);
            if (StringUtils.hasText(jwt) && validateToken(jwt)) {
                Authentication authentication = tokenProvider.getAuthentication(jwt);
                SecurityContextHolder.getContext().setAuthentication(authentication);
                log.debug("已设置认证 '{}' 到安全上下文", authentication.getName());
            }
        } catch (Exception e) {
            log.error("无法设置用户认证到安全上下文", e);
        }
        filterChain.doFilter(request, response);
    }
    /**
     * 从请求头中获取令牌
     */
    private String resolveToken(HttpServletRequest request) {
        String bearerToken = request.getHeader("Authorization");
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7);
        }
        return null;
    }
    /**
     * 验证令牌
     */
    private boolean validateToken(String token) {
        // 先检查令牌是否在黑名单中
        if (tokenBlacklistService.isBlacklisted(token)) {
            log.warn("令牌已被注销: {}", token);
            return false;
        }
        // 再验证令牌有效性
        return tokenProvider.validateToken(token);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/security/jwt/JwtTokenProvider.java">
package com.zhangziqi.online_course_mine.security.jwt;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.UnsupportedJwtException;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;
import javax.crypto.SecretKey;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.stream.Collectors;
/**
 * JWT令牌提供者
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class JwtTokenProvider {
    private final JwtConfig jwtConfig;
    private final UserRepository userRepository;
    /**
     * 获取密钥
     */
    private SecretKey getSigningKey() {
        return Keys.hmacShaKeyFor(jwtConfig.getSecret().getBytes());
    }
    /**
     * 创建令牌
     *
     * @param authentication 认证信息
     * @return JWT令牌
     */
    public JwtTokenDTO createToken(Authentication authentication) {
        String username = authentication.getName();
        Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();
        // 只保留角色信息，不包含具体权限
        String roles = authorities.stream()
                .filter(authority -> authority.getAuthority().startsWith("ROLE_"))
                .map(GrantedAuthority::getAuthority)
                .findFirst() // 只取第一个角色
                .orElse("ROLE_USER"); // 默认为普通用户角色
        log.debug("为用户 {} 创建令牌，角色: {}", username, roles);
        long now = System.currentTimeMillis();
        // 从数据库获取用户信息
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("用户不存在: " + username));
        Long institutionId = user.getInstitution() != null ? user.getInstitution().getId() : null;
        Long userId = user.getId();
        log.debug("从数据库获取用户信息: userId={}, institutionId={}", userId, institutionId);
        // 创建访问令牌
        var tokenBuilder = Jwts.builder()
                .subject(username)
                .claim("auth", roles)
                .claim("userId", userId)
                .issuedAt(new Date(now))
                .expiration(new Date(now + jwtConfig.getAccessTokenExpiration()));
        // 添加机构ID（如果有的话）
        if (institutionId != null) {
            tokenBuilder.claim("institutionId", institutionId);
        }
        String accessToken = tokenBuilder.signWith(getSigningKey()).compact();
        // 创建刷新令牌，同样包含用户ID和机构ID
        var refreshTokenBuilder = Jwts.builder()
                .subject(username)
                .claim("auth", roles)
                .claim("userId", userId)
                .issuedAt(new Date(now))
                .expiration(new Date(now + jwtConfig.getRefreshTokenExpiration()));
        // 添加机构ID到刷新令牌（如果有的话）
        if (institutionId != null) {
            refreshTokenBuilder.claim("institutionId", institutionId);
        }
        String refreshToken = refreshTokenBuilder.signWith(getSigningKey()).compact();
        return JwtTokenDTO.builder()
                .accessToken(accessToken)
                .refreshToken(refreshToken)
                .expiresIn(jwtConfig.getAccessTokenExpiration())
                .build();
    }
    /**
     * 刷新令牌
     *
     * @param refreshToken 刷新令牌
     * @return JWT令牌
     */
    public JwtTokenDTO refreshToken(String refreshToken) {
        // 验证token并获取信息
        Claims claims = parseToken(refreshToken);
        String username = claims.getSubject();
        String roles = claims.get("auth", String.class);
        // 获取机构ID和用户ID
        Long institutionId = null;
        Long userId = null;
        Object institutionIdObj = claims.get("institutionId");
        if (institutionIdObj != null) {
            if (institutionIdObj instanceof Integer) {
                institutionId = ((Integer) institutionIdObj).longValue();
            } else if (institutionIdObj instanceof Long) {
                institutionId = (Long) institutionIdObj;
            }
        }
        Object userIdObj = claims.get("userId");
        if (userIdObj != null) {
            if (userIdObj instanceof Integer) {
                userId = ((Integer) userIdObj).longValue();
            } else if (userIdObj instanceof Long) {
                userId = (Long) userIdObj;
            }
        }
        log.debug("刷新令牌，用户: {}, 角色: {}, 机构ID: {}, 用户ID: {}", username, roles, institutionId, userId);
        long now = System.currentTimeMillis();
        // 使用refresh token中的信息创建新的access token
        var tokenBuilder = Jwts.builder()
                .subject(username)
                .claim("auth", roles)
                .claim("userId", userId)
                .issuedAt(new Date(now))
                .expiration(new Date(now + jwtConfig.getAccessTokenExpiration()));
        // 添加机构ID（如果有的话）
        if (institutionId != null) {
            tokenBuilder.claim("institutionId", institutionId);
        }
        String accessToken = tokenBuilder.signWith(getSigningKey()).compact();
        return JwtTokenDTO.builder()
                .accessToken(accessToken)
                .refreshToken(refreshToken)
                .expiresIn(jwtConfig.getAccessTokenExpiration())
                .build();
    }
    /**
     * 从令牌中获取用户信息
     *
     * @param token 令牌
     * @return 认证信息
     */
    public Authentication getAuthentication(String token) {
        Claims claims = parseToken(token);
        String auth = claims.get("auth", String.class);
        Collection<? extends GrantedAuthority> authorities;
        // 确保角色正确解析，即使只有一个角色
        if (auth != null && !auth.isEmpty()) {
            authorities = Arrays.stream(auth.split(","))
                    .filter(role -> !role.isEmpty())
                    .map(SimpleGrantedAuthority::new)
                    .collect(Collectors.toList());
        } else {
            authorities = java.util.Collections.emptyList();
        }
        // 尝试从令牌中获取机构ID和用户ID
        Long institutionId = null;
        Long userId = null;
        Object institutionIdObj = claims.get("institutionId");
        if (institutionIdObj != null) {
            if (institutionIdObj instanceof Integer) {
                institutionId = ((Integer) institutionIdObj).longValue();
            } else if (institutionIdObj instanceof Long) {
                institutionId = (Long) institutionIdObj;
            }
        }
        Object userIdObj = claims.get("userId");
        if (userIdObj != null) {
            if (userIdObj instanceof Integer) {
                userId = ((Integer) userIdObj).longValue();
            } else if (userIdObj instanceof Long) {
                userId = (Long) userIdObj;
            }
        }
        // 添加日志
        log.debug("从token中提取信息: 角色={}, 机构ID={}, 用户ID={}", authorities, institutionId, userId);
        // 使用标准的Spring Security User
        UserDetails principal = org.springframework.security.core.userdetails.User.builder()
                .username(claims.getSubject())
                .password("")
                .authorities(authorities)
                .build();
        // 创建带有额外信息的认证令牌
        return new JwtAuthenticationToken(principal, token, authorities, institutionId, claims);
    }
    /**
     * 自定义JWT认证令牌，包含机构ID信息和Claims
     */
    public static class JwtAuthenticationToken extends UsernamePasswordAuthenticationToken {
        private static final long serialVersionUID = 1L;
        private final Long institutionId;
        private final Claims claims;
        public JwtAuthenticationToken(Object principal, Object credentials, 
                Collection<? extends GrantedAuthority> authorities, Long institutionId, Claims claims) {
            super(principal, credentials, authorities);
            this.institutionId = institutionId;
            this.claims = claims;
        }
        public Long getInstitutionId() {
            return institutionId;
        }
        public Claims getClaims() {
            return claims;
        }
    }
    /**
     * 解析令牌
     *
     * @param token 令牌
     * @return 声明
     */
    private Claims parseToken(String token) {
        return Jwts.parser()
                .verifyWith(getSigningKey())
                .build()
                .parseSignedClaims(token)
                .getPayload();
    }
    /**
     * 从令牌中获取用户名
     *
     * @param token 令牌
     * @return 用户名
     */
    public String getUsernameFromToken(String token) {
        return parseToken(token).getSubject();
    }
    /**
     * 验证令牌
     *
     * @param token 令牌
     * @return 是否有效
     */
    public boolean validateToken(String token) {
        try {
            Jwts.parser().verifyWith(getSigningKey()).build().parseSignedClaims(token);
            return true;
        } catch (io.jsonwebtoken.security.SecurityException | MalformedJwtException e) {
            log.error("无效的JWT签名: {}", e.getMessage());
        } catch (ExpiredJwtException e) {
            log.error("JWT令牌已过期: {}", e.getMessage());
        } catch (UnsupportedJwtException e) {
            log.error("不支持的JWT令牌: {}", e.getMessage());
        } catch (IllegalArgumentException e) {
            log.error("JWT令牌为空: {}", e.getMessage());
        }
        return false;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/security/jwt/TokenBlacklistService.java">
package com.zhangziqi.online_course_mine.security.jwt;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import java.util.Date;
import java.util.concurrent.TimeUnit;
/**
 * Token黑名单服务
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class TokenBlacklistService {
    private final RedisTemplate<String, String> redisTemplate;
    private final JwtConfig jwtConfig;
    private static final String TOKEN_BLACKLIST_PREFIX = "token:blacklist:";
    private static final String USER_BLACKLIST_PREFIX = "token:blacklist:user:";
    private static final long BLACKLIST_RETENTION_DAYS = 7;
    /**
     * 将令牌加入黑名单
     *
     * @param token 令牌
     * @param expirationMs 过期时间（毫秒）
     */
    public void addToBlacklist(String token, long expirationMs) {
        String key = TOKEN_BLACKLIST_PREFIX + token;
        redisTemplate.opsForValue().set(key, "1", expirationMs, TimeUnit.MILLISECONDS);
        log.debug("令牌已加入黑名单: {}", token);
    }
    /**
     * 使用户的所有令牌失效
     * 通常在用户角色变更、密码修改等安全敏感操作时调用
     *
     * @param username 用户名
     */
    public void invalidateUserTokens(String username) {
        String key = USER_BLACKLIST_PREFIX + username;
        String timestamp = String.valueOf(System.currentTimeMillis());
        redisTemplate.opsForValue().set(key, timestamp, BLACKLIST_RETENTION_DAYS, TimeUnit.DAYS);
        log.debug("用户 {} 的所有令牌已失效", username);
    }
    /**
     * 检查令牌是否在黑名单中
     *
     * @param token 令牌
     * @return 是否在黑名单中
     */
    public boolean isBlacklisted(String token) {
        // 首先检查token是否直接在黑名单中
        String tokenKey = TOKEN_BLACKLIST_PREFIX + token;
        Boolean isDirectlyBlacklisted = redisTemplate.hasKey(tokenKey);
        if (Boolean.TRUE.equals(isDirectlyBlacklisted)) {
            log.debug("令牌在黑名单中: {}", token);
            return true;
        }
        try {
            // 解析token获取信息
            Claims claims = Jwts.parser()
                    .verifyWith(Keys.hmacShaKeyFor(jwtConfig.getSecret().getBytes()))
                    .build()
                    .parseSignedClaims(token)
                    .getPayload();
            String username = claims.getSubject();
            Date issuedAt = claims.getIssuedAt();
            // 检查用户级别的黑名单
            String userBlacklistKey = USER_BLACKLIST_PREFIX + username;
            String blacklistedTime = redisTemplate.opsForValue().get(userBlacklistKey);
            if (blacklistedTime != null) {
                long blacklistedTimestamp = Long.parseLong(blacklistedTime);
                boolean isBlacklisted = issuedAt.getTime() < blacklistedTimestamp;
                if (isBlacklisted) {
                    log.debug("用户 {} 的令牌已在黑名单中，发布时间: {}, 失效时间: {}", 
                            username, issuedAt, new Date(blacklistedTimestamp));
                }
                return isBlacklisted;
            }
        } catch (Exception e) {
            log.error("检查令牌黑名单状态时出错", e);
            return true; // 如果解析出错，出于安全考虑，将token视为无效
        }
        return false;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/security/SecurityUtil.java">
package com.zhangziqi.online_course_mine.security;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.security.jwt.JwtTokenProvider.JwtAuthenticationToken;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import io.jsonwebtoken.Claims;
import java.util.Set;
import java.util.stream.Collectors;
/**
 * 安全工具类
 * 用于从安全上下文中获取当前用户信息
 */
@Slf4j
public class SecurityUtil {
    /**
     * 获取当前认证对象
     *
     * @return 认证对象
     */
    public static Authentication getAuthentication() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !authentication.isAuthenticated() || 
                authentication.getPrincipal().equals("anonymousUser")) {
            throw new BusinessException(401, "用户未认证");
        }
        return authentication;
    }
    /**
     * 获取当前认证用户
     *
     * @return 用户主体对象
     */
    public static Object getCurrentUser() {
        return getAuthentication().getPrincipal();
    }
    /**
     * 获取当前用户ID
     *
     * @return 用户ID
     */
    public static Long getCurrentUserId() {
        Authentication authentication = getAuthentication();
        // 从JWT token中获取用户ID
        if (authentication instanceof JwtAuthenticationToken) {
            Claims claims = ((JwtAuthenticationToken) authentication).getClaims();
            Object userIdObj = claims.get("userId");
            if (userIdObj != null) {
                if (userIdObj instanceof Integer) {
                    return ((Integer) userIdObj).longValue();
                } else if (userIdObj instanceof Long) {
                    return (Long) userIdObj;
                }
            }
        }
        // 如果无法获取用户ID，抛出异常
        throw new BusinessException(401, "无法获取当前用户ID");
    }
    /**
     * 获取当前用户的用户名
     *
     * @return 用户名
     */
    public static String getCurrentUsername() {
        // 从Authentication获取用户名
        return getAuthentication().getName();
    }
    /**
     * 获取当前用户的机构ID
     *
     * @return 机构ID
     */
    public static Long getCurrentInstitutionId() {
        // 获取认证对象
        Authentication authentication = getAuthentication();
        // 从JWT token中获取机构ID
        if (authentication instanceof JwtAuthenticationToken) {
            Long institutionId = ((JwtAuthenticationToken) authentication).getInstitutionId();
            if (institutionId != null) {
                return institutionId;
            }
        }
        // 判断是否是机构用户角色
        if (hasRole("INSTITUTION")) {
            // 如果是机构用户，但没有找到机构ID，返回默认值0
            log.warn("无法从认证对象获取机构ID，但用户具有INSTITUTION角色，使用默认值0");
            return 0L;
        }
        // 不是机构用户，没有机构ID
        return null;
    }
    /**
     * 获取当前用户的权限列表
     *
     * @return 权限集合
     */
    public static Set<String> getCurrentUserAuthorities() {
        Authentication authentication = getAuthentication();
        return authentication.getAuthorities().stream()
                .map(GrantedAuthority::getAuthority)
                .collect(Collectors.toSet());
    }
    /**
     * 检查当前用户是否有指定角色
     *
     * @param role 角色名称
     * @return 是否有该角色
     */
    public static boolean hasRole(String role) {
        String roleWithPrefix = role.startsWith("ROLE_") ? role : "ROLE_" + role;
        return getCurrentUserAuthorities().contains(roleWithPrefix);
    }
    /**
     * 检查当前用户是否有指定权限
     *
     * @param permission 权限编码
     * @return 是否有该权限
     */
    public static boolean hasPermission(String permission) {
        return getCurrentUserAuthorities().contains(permission);
    }
    /**
     * 检查当前用户是否是超级管理员
     *
     * @return 是否是超级管理员
     */
    public static boolean isAdmin() {
        return hasRole("ADMIN");
    }
    /**
     * 检查当前用户是否是机构管理员
     *
     * @return 是否是机构管理员
     */
    public static boolean isInstitutionAdmin() {
        return hasRole("INSTITUTION_ADMIN");
    }
    /**
     * 检查当前用户是否是机构教师
     *
     * @return 是否是机构教师
     */
    public static boolean isInstitutionTeacher() {
        return hasRole("INSTITUTION_TEACHER");
    }
    /**
     * 检查当前用户是否属于指定机构
     *
     * @param institutionId 机构ID
     * @return 是否属于该机构
     */
    public static boolean belongsToInstitution(Long institutionId) {
        Long currentInstitutionId = getCurrentInstitutionId();
        return currentInstitutionId != null && currentInstitutionId.equals(institutionId);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/security/UserDetailsServiceImpl.java">
package com.zhangziqi.online_course_mine.security;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.ArrayList;
import java.util.List;
/**
 * 用户详情服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class UserDetailsServiceImpl implements UserDetailsService {
    private final UserRepository userRepository;
    /**
     * 根据用户名加载用户
     *
     * @param username 用户名
     * @return 用户详情
     * @throws UsernameNotFoundException 用户名不存在
     */
    @Override
    @Transactional(readOnly = true)
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        log.debug("开始加载用户: {}", username);
        // 查询用户
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("用户不存在: " + username));
        // 状态检查
        if (user.getStatus() != 1) {
            log.warn("用户已被禁用: {}", username);
            throw new UsernameNotFoundException("用户已被禁用");
        }
        // 获取用户的角色和权限
        List<SimpleGrantedAuthority> authorities = new ArrayList<>();
        // 只处理第一个角色（每个用户只使用一个主要角色）
        if (!user.getRoles().isEmpty()) {
            Role role = user.getRoles().iterator().next();
            String roleCode = role.getCode();
            // 添加角色
            authorities.add(new SimpleGrantedAuthority(roleCode));
            // 添加该角色拥有的所有权限
            role.getPermissions().forEach(permission -> 
                authorities.add(new SimpleGrantedAuthority(permission.getCode()))
            );
            log.debug("用户 '{}' 使用角色: {}", username, roleCode);
        }
        log.debug("用户 '{}' 拥有的权限: {}", username, authorities);
        // 构建标准的Spring Security User对象，只使用标准属性
        return org.springframework.security.core.userdetails.User.builder()
                .username(user.getUsername())
                .password(user.getPassword())
                .authorities(authorities)
                .accountExpired(false)
                .accountLocked(false)
                .credentialsExpired(false)
                .disabled(user.getStatus() != 1)
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/AuthService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.LoginDTO;
import com.zhangziqi.online_course_mine.model.dto.RefreshTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
/**
 * 认证服务接口
 */
public interface AuthService {
    /**
     * 用户注册
     *
     * @param registerDTO 注册请求
     */
    void register(RegisterDTO registerDTO);
    /**
     * 用户登录
     *
     * @param loginDTO 登录请求
     * @return JWT令牌
     */
    JwtTokenDTO login(LoginDTO loginDTO);
    /**
     * 刷新令牌
     *
     * @param refreshTokenDTO 刷新令牌请求
     * @return 新的JWT令牌
     */
    JwtTokenDTO refreshToken(RefreshTokenDTO refreshTokenDTO);
    /**
     * 注销
     *
     * @param token 访问令牌
     */
    void logout(String token);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/CaptchaService.java">
package com.zhangziqi.online_course_mine.service;
import java.awt.image.BufferedImage;
/**
 * 验证码服务接口
 */
public interface CaptchaService {
    /**
     * 生成验证码
     *
     * @param captchaKey 验证码标识
     * @return 验证码图片
     */
    BufferedImage generateCaptcha(String captchaKey);
    /**
     * 验证验证码
     *
     * @param captchaKey   验证码标识
     * @param captchaCode 验证码
     * @return 是否验证成功
     */
    boolean validateCaptcha(String captchaKey, String captchaCode);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/CategoryService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.CategoryDTO;
import com.zhangziqi.online_course_mine.model.entity.Category;
import com.zhangziqi.online_course_mine.model.vo.CategoryTreeVO;
import com.zhangziqi.online_course_mine.model.vo.CategoryVO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.List;
/**
 * 分类服务接口
 */
public interface CategoryService {
    /**
     * 创建分类
     * 
     * @param categoryDTO 分类信息
     * @return 创建的分类ID
     */
    Long createCategory(CategoryDTO categoryDTO);
    /**
     * 更新分类
     * 
     * @param id 分类ID
     * @param categoryDTO 分类信息
     * @return 是否更新成功
     */
    boolean updateCategory(Long id, CategoryDTO categoryDTO);
    /**
     * 删除分类
     * 
     * @param id 分类ID
     * @return 是否删除成功
     */
    boolean deleteCategory(Long id);
    /**
     * 获取分类详情
     * 
     * @param id 分类ID
     * @return 分类详情
     */
    CategoryVO getCategory(Long id);
    /**
     * 根据编码获取分类
     * 
     * @param code 分类编码
     * @return 分类详情
     */
    CategoryVO getCategoryByCode(String code);
    /**
     * 分页查询分类
     * 
     * @param keyword 关键词
     * @param pageable 分页参数
     * @return 分类分页结果
     */
    Page<CategoryVO> listCategories(String keyword, Pageable pageable);
    /**
     * 获取所有根分类
     * 
     * @return 根分类列表
     */
    List<CategoryVO> listRootCategories();
    /**
     * 获取子分类
     * 
     * @param parentId 父分类ID
     * @return 子分类列表
     */
    List<CategoryVO> listChildCategories(Long parentId);
    /**
     * 获取分类树
     * 
     * @return 分类树
     */
    List<CategoryTreeVO> getCategoryTree();
    /**
     * 校验分类编码是否可用
     * 
     * @param code 分类编码
     * @param excludeId 排除的ID（更新时使用）
     * @return 编码是否可用
     */
    boolean isCodeAvailable(String code, Long excludeId);
    /**
     * 启用或禁用分类
     * 
     * @param id 分类ID
     * @param enabled 是否启用
     * @return 是否操作成功
     */
    boolean updateCategoryStatus(Long id, boolean enabled);
    /**
     * 更新分类排序
     * 
     * @param id 分类ID
     * @param orderIndex 排序索引
     * @return 是否操作成功
     */
    boolean updateCategoryOrder(Long id, Integer orderIndex);
    /**
     * 获取分类实体
     * 
     * @param id 分类ID
     * @return 分类实体
     */
    Category getCategoryEntity(Long id);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/ChapterService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.chapter.*;
import com.zhangziqi.online_course_mine.model.vo.ChapterVO;
import java.util.List;
/**
 * 章节服务接口
 */
public interface ChapterService {
    /**
     * 创建章节
     *
     * @param dto 章节创建DTO
     * @return 创建的章节
     */
    ChapterVO createChapter(ChapterCreateDTO dto);
    /**
     * 更新章节
     *
     * @param id 章节ID
     * @param dto 章节更新DTO
     * @return 更新后的章节
     */
    ChapterVO updateChapter(Long id, ChapterCreateDTO dto);
    /**
     * 获取章节详情
     *
     * @param id 章节ID
     * @return 章节
     */
    ChapterVO getChapterById(Long id);
    /**
     * 获取课程下的章节列表
     *
     * @param courseId 课程ID
     * @return 章节列表
     */
    List<ChapterVO> getChaptersByCourse(Long courseId);
    /**
     * 删除章节
     *
     * @param id 章节ID
     */
    void deleteChapter(Long id);
    /**
     * 更新章节访问类型
     *
     * @param id 章节ID
     * @param accessType 访问类型
     * @return 更新后的章节
     */
    ChapterVO updateAccessType(Long id, Integer accessType);
    /**
     * 调整章节顺序
     *
     * @param courseId 课程ID
     * @param chapterOrders 章节顺序列表，包含ID和顺序
     * @return 更新后的章节列表
     */
    List<ChapterVO> reorderChapters(Long courseId, List<ChapterOrderDTO> chapterOrders);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/CourseReviewService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.review.ReviewCreateDTO;
import com.zhangziqi.online_course_mine.model.dto.review.ReviewQueryDTO;
import com.zhangziqi.online_course_mine.model.vo.CourseReviewSectionVO;
import com.zhangziqi.online_course_mine.model.vo.ReviewStatsVO;
import com.zhangziqi.online_course_mine.model.vo.ReviewVO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
/**
 * 课程评论服务接口
 */
public interface CourseReviewService {
    /**
     * 创建课程评论
     *
     * @param dto 评论创建DTO
     * @param userId 用户ID
     * @return 创建的评论
     */
    ReviewVO createReview(ReviewCreateDTO dto, Long userId);
    /**
     * 获取课程评论区（包含统计和评论列表）
     *
     * @param courseId 课程ID
     * @param page 页码（从0开始）
     * @param size 每页大小
     * @param orderBy 排序方式
     * @return 评论区数据
     */
    CourseReviewSectionVO getCourseReviewSection(Long courseId, Integer page, Integer size, String orderBy);
    /**
     * 分页获取课程评论
     *
     * @param courseId 课程ID
     * @param queryDTO 查询参数
     * @param pageable 分页参数
     * @return 评论分页结果
     */
    Page<ReviewVO> getReviewsByCourse(Long courseId, ReviewQueryDTO queryDTO, Pageable pageable);
    /**
     * 获取评论统计数据
     *
     * @param courseId 课程ID
     * @return 评论统计
     */
    ReviewStatsVO getReviewStats(Long courseId);
    /**
     * 删除评论
     *
     * @param reviewId 评论ID
     * @param userId 用户ID
     */
    void deleteReview(Long reviewId, Long userId);
    /**
     * 获取用户对课程的评论
     *
     * @param userId 用户ID
     * @param courseId 课程ID
     * @return 用户的评论
     */
    ReviewVO getUserReviewOnCourse(Long userId, Long courseId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/CourseService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.course.*;
import com.zhangziqi.online_course_mine.model.vo.CourseStructureVO;
import com.zhangziqi.online_course_mine.model.vo.CourseVO;
import com.zhangziqi.online_course_mine.model.vo.PreviewUrlVO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.util.List;
/**
 * 课程服务接口
 */
public interface CourseService {
    /**
     * 创建课程
     *
     * @param dto 课程创建DTO
     * @param creatorId 创建者ID
     * @param institutionId 机构ID
     * @return 创建的课程
     */
    CourseVO createCourse(CourseCreateDTO dto, Long creatorId, Long institutionId);
    /**
     * 更新课程
     *
     * @param id 课程ID
     * @param dto 课程更新DTO
     * @param institutionId 机构ID
     * @return 更新后的课程
     */
    CourseVO updateCourse(Long id, CourseCreateDTO dto, Long institutionId);
    /**
     * 获取课程详情
     *
     * @param id 课程ID
     * @return 课程
     */
    CourseVO getCourseById(Long id);
    /**
     * 获取课程完整结构（包括章节和小节）
     *
     * @param id 课程ID
     * @return 课程结构（含章节和小节）
     */
    CourseStructureVO getCourseStructure(Long id);
    /**
     * 获取机构下的课程列表
     *
     * @param institutionId 机构ID
     * @param pageable 分页参数
     * @return 课程分页
     */
    Page<CourseVO> getCoursesByInstitution(Long institutionId, Pageable pageable);
    /**
     * 删除课程
     *
     * @param id 课程ID
     */
    void deleteCourse(Long id);
    /**
     * 更新课程封面
     *
     * @param id 课程ID
     * @param file 封面图片文件
     * @return 更新后的课程
     * @throws IOException 如果文件处理出错
     */
    CourseVO updateCourseCover(Long id, MultipartFile file) throws IOException;
    /**
     * 提交课程审核
     *
     * @param id 课程ID
     * @return 更新后的课程
     */
    CourseVO submitForReview(Long id);
    /**
     * 开始审核课程
     *
     * @param id 课程ID
     * @param reviewerId 审核人ID
     * @return 更新后的课程
     */
    CourseVO startReview(Long id, Long reviewerId);
    /**
     * 通过课程审核
     *
     * @param id 课程ID
     * @param comment 审核意见
     * @param reviewerId 审核人ID
     * @return 更新后的课程
     */
    CourseVO approveCourse(Long id, String comment, Long reviewerId);
    /**
     * 拒绝课程审核
     *
     * @param id 课程ID
     * @param reason 拒绝原因
     * @param reviewerId 审核人ID
     * @return 更新后的课程
     */
    CourseVO rejectCourse(Long id, String reason, Long reviewerId);
    /**
     * 下线课程
     *
     * @param id 课程ID
     * @return 更新后的课程
     */
    CourseVO unpublishCourse(Long id);
    /**
     * 重新上线课程
     *
     * @param id 课程ID
     * @return 更新后的课程
     */
    CourseVO republishCourse(Long id);
    /**
     * 重新编辑被拒绝的课程
     *
     * @param id 课程ID
     * @return 更新后的课程
     */
    CourseVO reEditRejectedCourse(Long id);
    /**
     * 生成课程预览URL
     *
     * @param id 课程ID
     * @return 预览URL
     */
    PreviewUrlVO generatePreviewUrl(Long id);
    /**
     * 根据预览token获取课程
     *
     * @param token 预览token
     * @return 课程
     */
    CourseVO getCourseByPreviewToken(String token);
    /**
     * 通过预览令牌获取课程结构
     *
     * @param token 预览令牌
     * @return 课程结构（含章节和小节）
     */
    CourseStructureVO getCourseStructureByPreviewToken(String token);
    /**
     * 更新课程支付设置
     *
     * @param id 课程ID
     * @param paymentType 支付类型
     * @param price 价格
     * @param discountPrice 折扣价格
     * @return 更新后的课程
     */
    CourseVO updatePaymentSettings(Long id, Integer paymentType, 
        java.math.BigDecimal price, java.math.BigDecimal discountPrice);
    /**
     * 获取指定状态的课程列表
     *
     * @param status 课程状态
     * @param pageable 分页参数
     * @return 课程分页
     */
    Page<CourseVO> getCoursesByStatus(Integer status, Pageable pageable);
    /**
     * 获取指定状态且由特定审核员负责的课程列表
     *
     * @param status 课程状态
     * @param reviewerId 审核员ID
     * @param pageable 分页参数
     * @return 课程分页
     */
    Page<CourseVO> getCoursesByStatusAndReviewer(Integer status, Long reviewerId, Pageable pageable);
    /**
     * 获取机构的工作区课程列表（非发布版本）
     * 
     * @param institutionId 机构ID
     * @param pageable 分页参数
     * @return 课程VO分页
     */
    Page<CourseVO> getWorkspaceCoursesByInstitution(Long institutionId, Pageable pageable);
    /**
     * 获取机构的发布课程列表
     * 
     * @param institutionId 机构ID
     * @param pageable 分页参数
     * @return 课程VO分页
     */
    Page<CourseVO> getPublishedCoursesByInstitution(Long institutionId, Pageable pageable);
    /**
     * 根据工作区版本ID获取发布版本
     * 
     * @param workspaceId 工作区版本ID
     * @return 发布版本课程，如果不存在则返回null
     */
    CourseVO getPublishedVersionByWorkspaceId(Long workspaceId);
    /**
     * 搜索课程
     * 只返回已发布状态的课程
     *
     * @param searchDTO 搜索参数
     * @param pageable 分页参数
     * @return 分页课程结果
     */
    Page<CourseVO> searchCourses(CourseSearchDTO searchDTO, Pageable pageable);
    /**
     * 获取热门课程
     * 按学习人数排序，只返回已发布状态的课程
     *
     * @param limit 数量限制
     * @return 热门课程列表
     */
    List<CourseVO> getHotCourses(int limit);
    /**
     * 获取最新课程
     * 按创建时间排序，只返回已发布状态的课程
     *
     * @param limit 数量限制
     * @return 最新课程列表
     */
    List<CourseVO> getLatestCourses(int limit);
    /**
     * 获取高评分课程
     * 
     * @param limit 数量限制
     * @return 高评分课程列表
     */
    List<CourseVO> getTopRatedCourses(int limit);
    /**
     * 增加课程学习人数
     * 
     * @param courseId 课程ID
     */
    void incrementStudentCount(Long courseId);
    /**
     * 更新课程评分
     * 
     * @param courseId 课程ID
     * @param newRating 新的评分(1-5)
     */
    void updateCourseRating(Long courseId, Integer newRating);
    /**
     * 获取课程的公开预览结构（免费课程或付费课程的试学部分）
     * 对于未付费用户的付费课程，只返回免费试学章节的内容
     *
     * @param id 课程ID
     * @param isUserEnrolled 用户是否已购买/注册该课程
     * @return 课程结构VO
     */
    CourseStructureVO getPublicCourseStructure(Long id, boolean isUserEnrolled);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/EmailService.java">
package com.zhangziqi.online_course_mine.service;
/**
 * 邮件服务接口
 */
public interface EmailService {
    /**
     * 发送验证码邮件
     *
     * @param to 收件人邮箱
     * @param code 验证码
     */
    void sendVerificationCode(String to, String code);
    /**
     * 发送邮箱更新验证码邮件
     *
     * @param to 新邮箱地址
     * @param code 验证码
     */
    void sendEmailUpdateCode(String to, String code);
    /**
     * 生成验证码
     *
     * @return 6位数字验证码
     */
    String generateVerificationCode();
    /**
     * 保存验证码到Redis
     *
     * @param email 邮箱
     * @param code 验证码
     */
    void saveVerificationCode(String email, String code);
    /**
     * 验证邮箱验证码
     *
     * @param email 邮箱
     * @param code 验证码
     * @return 是否验证通过
     */
    boolean validateVerificationCode(String email, String code);
    /**
     * 发送机构申请确认邮件
     *
     * @param to 收件人邮箱
     * @param applicationId 申请ID
     * @param institutionName 机构名称
     */
    void sendApplicationConfirmationEmail(String to, String applicationId, String institutionName);
    /**
     * 发送机构申请通过邮件
     *
     * @param to 收件人邮箱
     * @param institutionName 机构名称
     * @param registerCode 注册码
     */
    void sendApplicationApprovedEmail(String to, String institutionName, String registerCode);
    /**
     * 发送机构申请拒绝邮件
     *
     * @param to 收件人邮箱
     * @param institutionName 机构名称
     * @param reason 拒绝原因
     */
    void sendApplicationRejectedEmail(String to, String institutionName, String reason);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/AuthServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.LoginDTO;
import com.zhangziqi.online_course_mine.model.dto.RefreshTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import com.zhangziqi.online_course_mine.security.jwt.JwtTokenProvider;
import com.zhangziqi.online_course_mine.security.jwt.TokenBlacklistService;
import com.zhangziqi.online_course_mine.service.AuthService;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import com.zhangziqi.online_course_mine.service.EmailService;
import com.zhangziqi.online_course_mine.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
/**
 * 认证服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class AuthServiceImpl implements AuthService {
    private final AuthenticationManager authenticationManager;
    private final JwtTokenProvider tokenProvider;
    private final UserService userService;
    private final CaptchaService captchaService;
    private final EmailService emailService;
    private final TokenBlacklistService tokenBlacklistService;
    private final JwtConfig jwtConfig;
    /**
     * 用户注册
     *
     * @param registerDTO 注册请求
     */
    @Override
    @Transactional
    public void register(RegisterDTO registerDTO) {
        // 验证邮箱验证码
        if (!emailService.validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode())) {
            throw new BusinessException("邮箱验证码错误或已过期");
        }
        // 注册用户
        userService.register(registerDTO);
        log.info("用户注册成功: {}", registerDTO.getUsername());
    }
    /**
     * 用户登录
     *
     * @param loginDTO 登录请求
     * @return JWT令牌
     */
    @Override
    @Transactional
    public JwtTokenDTO login(LoginDTO loginDTO) {
        // 验证验证码
        if (!captchaService.validateCaptcha(loginDTO.getCaptchaKey(), loginDTO.getCaptchaCode())) {
            throw new BusinessException("验证码错误");
        }
        // 认证用户
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(loginDTO.getUsername(), loginDTO.getPassword())
        );
        SecurityContextHolder.getContext().setAuthentication(authentication);
        // 更新最后登录时间
        userService.updateLastLoginTime(loginDTO.getUsername());
        // 生成JWT令牌
        JwtTokenDTO jwtTokenDTO = tokenProvider.createToken(authentication);
        log.info("用户登录成功: {}", loginDTO.getUsername());
        return jwtTokenDTO;
    }
    /**
     * 刷新令牌
     *
     * @param refreshTokenDTO 刷新令牌请求
     * @return 新的JWT令牌
     */
    @Override
    @Transactional
    public JwtTokenDTO refreshToken(RefreshTokenDTO refreshTokenDTO) {
        String refreshToken = refreshTokenDTO.getRefreshToken();
        // 验证刷新令牌
        if (!tokenProvider.validateToken(refreshToken)) {
            throw new BusinessException("刷新令牌无效或已过期");
        }
        // 检查刷新令牌是否在黑名单中
        if (tokenBlacklistService.isBlacklisted(refreshToken)) {
            throw new BusinessException("刷新令牌已被注销");
        }
        // 从令牌中获取用户名
        String username = tokenProvider.getUsernameFromToken(refreshToken);
        log.debug("刷新令牌，用户: {}", username);
        // 刷新令牌
        JwtTokenDTO jwtTokenDTO = tokenProvider.refreshToken(refreshToken);
        log.info("刷新令牌成功: {}", username);
        return jwtTokenDTO;
    }
    /**
     * 注销
     *
     * @param token 访问令牌
     */
    @Override
    public void logout(String token) {
        if (token == null || token.isEmpty()) {
            return;
        }
        // 从令牌中提取用户名
        String username = tokenProvider.getUsernameFromToken(token);
        // 将令牌加入黑名单
        tokenBlacklistService.addToBlacklist(token, jwtConfig.getAccessTokenExpiration());
        log.info("用户注销成功: {}", username);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/CaptchaServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.google.code.kaptcha.impl.DefaultKaptcha;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import java.awt.image.BufferedImage;
import java.util.concurrent.TimeUnit;
/**
 * 验证码服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CaptchaServiceImpl implements CaptchaService {
    private final DefaultKaptcha captchaProducer;
    private final RedisTemplate<String, Object> redisTemplate;
    private static String CAPTCHA_PREFIX = "captcha:";
    private static long CAPTCHA_EXPIRATION = 5 * 60; // 5分钟
    /**
     * 生成验证码
     *
     * @param captchaKey 验证码标识
     * @return 验证码图片
     */
    @Override
    public BufferedImage generateCaptcha(String captchaKey) {
        // 生成验证码文本
        String captchaText = captchaProducer.createText();
        log.debug("生成验证码: {} -> {}", captchaKey, captchaText);
        // 保存验证码到Redis
        String redisKey = CAPTCHA_PREFIX + captchaKey;
        redisTemplate.opsForValue().set(redisKey, captchaText, CAPTCHA_EXPIRATION, TimeUnit.SECONDS);
        // 生成验证码图片
        return captchaProducer.createImage(captchaText);
    }
    /**
     * 验证验证码
     *
     * @param captchaKey   验证码标识
     * @param captchaCode 验证码
     * @return 是否验证成功
     */
    @Override
    public boolean validateCaptcha(String captchaKey, String captchaCode) {
        if (!StringUtils.hasText(captchaKey) || !StringUtils.hasText(captchaCode)) {
            return false;
        }
        // 从Redis获取验证码
        String redisKey = CAPTCHA_PREFIX + captchaKey;
        Object value = redisTemplate.opsForValue().get(redisKey);
        if (value == null) {
            log.debug("验证码不存在或已过期: {}", captchaKey);
            return false;
        }
        // 验证后删除验证码
        redisTemplate.delete(redisKey);
        // 忽略大小写比较
        boolean result = captchaCode.equalsIgnoreCase(value.toString());
        log.debug("验证码校验: {} -> {} vs {}, 结果: {}", captchaKey, captchaCode, value, result);
        return result;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/CategoryServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.exception.ServiceException;
import com.zhangziqi.online_course_mine.model.dto.CategoryDTO;
import com.zhangziqi.online_course_mine.model.entity.Category;
import com.zhangziqi.online_course_mine.model.vo.CategoryTreeVO;
import com.zhangziqi.online_course_mine.model.vo.CategoryVO;
import com.zhangziqi.online_course_mine.repository.CategoryRepository;
import com.zhangziqi.online_course_mine.service.CategoryService;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.BeanUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
/**
 * 分类服务实现类
 */
@Service
@RequiredArgsConstructor
public class CategoryServiceImpl implements CategoryService {
    private final CategoryRepository categoryRepository;
    @Override
    @Transactional
    public Long createCategory(CategoryDTO categoryDTO) {
        // 校验分类编码唯一性
        if (!isCodeAvailable(categoryDTO.getCode(), null)) {
            throw new ServiceException("分类编码已存在");
        }
        Category category = new Category();
        BeanUtils.copyProperties(categoryDTO, category);
        // 设置父分类
        if (categoryDTO.getParentId() != null) {
            Category parent = categoryRepository.findById(categoryDTO.getParentId())
                    .orElseThrow(() -> new ResourceNotFoundException("父分类不存在"));
            category.setParent(parent);
            // 设置层级为父分类层级+1
            category.setLevel(parent.getLevel() + 1);
        } else {
            // 根分类层级为1
            category.setLevel(1);
        }
        // 如果未设置排序索引，获取同级分类中最大的排序索引+1
        if (category.getOrderIndex() == null) {
            Integer maxOrderIndex = 0;
            if (categoryDTO.getParentId() != null) {
                List<Category> siblings = categoryRepository.findByParentId(categoryDTO.getParentId());
                maxOrderIndex = siblings.stream()
                        .map(Category::getOrderIndex)
                        .filter(index -> index != null)
                        .max(Integer::compareTo)
                        .orElse(0);
            } else {
                List<Category> rootCategories = categoryRepository.findByParentIsNull();
                maxOrderIndex = rootCategories.stream()
                        .map(Category::getOrderIndex)
                        .filter(index -> index != null)
                        .max(Integer::compareTo)
                        .orElse(0);
            }
            category.setOrderIndex(maxOrderIndex + 1);
        }
        Category savedCategory = categoryRepository.save(category);
        return savedCategory.getId();
    }
    @Override
    @Transactional
    public boolean updateCategory(Long id, CategoryDTO categoryDTO) {
        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("分类不存在"));
        // 校验分类编码唯一性
        if (!isCodeAvailable(categoryDTO.getCode(), id)) {
            throw new ServiceException("分类编码已存在");
        }
        // 检查是否修改了父分类
        Long newParentId = categoryDTO.getParentId();
        Long oldParentId = category.getParent() != null ? category.getParent().getId() : null;
        boolean parentChanged = (newParentId == null && oldParentId != null) ||
                (newParentId != null && !newParentId.equals(oldParentId));
        // 如果修改了父分类，需要检查是否形成循环依赖
        if (parentChanged && newParentId != null) {
            // 不能将自己或子分类设为父分类
            if (id.equals(newParentId) || isChildCategory(id, newParentId)) {
                throw new ServiceException("不能将自己或子分类设为父分类");
            }
            Category parent = categoryRepository.findById(newParentId)
                    .orElseThrow(() -> new ResourceNotFoundException("父分类不存在"));
            category.setParent(parent);
            // 更新层级为父分类层级+1
            category.setLevel(parent.getLevel() + 1);
            // 需要递归更新所有子分类的层级
            updateChildrenLevel(category);
        } else if (parentChanged) {
            // 父分类设为null，即变为根分类
            category.setParent(null);
            category.setLevel(1);
            // 需要递归更新所有子分类的层级
            updateChildrenLevel(category);
        }
        // 复制其他属性
        category.setName(categoryDTO.getName());
        category.setCode(categoryDTO.getCode());
        category.setDescription(categoryDTO.getDescription());
        category.setOrderIndex(categoryDTO.getOrderIndex());
        category.setEnabled(categoryDTO.getEnabled());
        category.setIcon(categoryDTO.getIcon());
        categoryRepository.save(category);
        return true;
    }
    /**
     * 递归更新子分类的层级
     */
    private void updateChildrenLevel(Category parent) {
        List<Category> children = categoryRepository.findByParentId(parent.getId());
        if (!children.isEmpty()) {
            for (Category child : children) {
                child.setLevel(parent.getLevel() + 1);
                categoryRepository.save(child);
                updateChildrenLevel(child);
            }
        }
    }
    /**
     * 检查targetId是否为sourceId的子分类（任意层级）
     */
    private boolean isChildCategory(Long sourceId, Long targetId) {
        List<Category> children = categoryRepository.findByParentId(sourceId);
        if (children.isEmpty()) {
            return false;
        }
        for (Category child : children) {
            if (child.getId().equals(targetId) || isChildCategory(child.getId(), targetId)) {
                return true;
            }
        }
        return false;
    }
    @Override
    @Transactional
    public boolean deleteCategory(Long id) {
        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("分类不存在"));
        // 检查是否有子分类
        long childCount = categoryRepository.countByParentId(id);
        if (childCount > 0) {
            throw new ServiceException("存在子分类，无法删除");
        }
        // 检查是否有关联的课程
        long courseCount = categoryRepository.countCoursesByCategoryId(id);
        if (courseCount > 0) {
            throw new ServiceException("分类下存在课程，无法删除");
        }
        categoryRepository.delete(category);
        return true;
    }
    @Override
    public CategoryVO getCategory(Long id) {
        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("分类不存在"));
        return convertToCategoryVO(category);
    }
    @Override
    public CategoryVO getCategoryByCode(String code) {
        Category category = categoryRepository.findByCode(code)
                .orElseThrow(() -> new ResourceNotFoundException("分类不存在"));
        return convertToCategoryVO(category);
    }
    @Override
    public Page<CategoryVO> listCategories(String keyword, Pageable pageable) {
        Page<Category> categoryPage;
        if (StringUtils.hasText(keyword)) {
            // 创建动态查询条件
            Specification<Category> spec = (root, query, criteriaBuilder) -> {
                String likePattern = "%" + keyword + "%";
                return criteriaBuilder.or(
                        criteriaBuilder.like(root.get("name"), likePattern),
                        criteriaBuilder.like(root.get("code"), likePattern),
                        criteriaBuilder.like(root.get("description"), likePattern)
                );
            };
            categoryPage = categoryRepository.findAll(spec, pageable);
        } else {
            categoryPage = categoryRepository.findAll(pageable);
        }
        return categoryPage.map(this::convertToCategoryVO);
    }
    @Override
    public List<CategoryVO> listRootCategories() {
        List<Category> rootCategories = categoryRepository.findByParentIsNull();
        return rootCategories.stream()
                .map(this::convertToCategoryVO)
                .collect(Collectors.toList());
    }
    @Override
    public List<CategoryVO> listChildCategories(Long parentId) {
        List<Category> children = categoryRepository.findByParentId(parentId);
        return children.stream()
                .map(this::convertToCategoryVO)
                .collect(Collectors.toList());
    }
    @Override
    public List<CategoryTreeVO> getCategoryTree() {
        // 获取所有根分类
        List<Category> rootCategories = categoryRepository.findByParentIsNull();
        // 递归构建分类树
        return rootCategories.stream()
                .map(this::buildCategoryTreeVO)
                .collect(Collectors.toList());
    }
    /**
     * 递归构建分类树
     */
    private CategoryTreeVO buildCategoryTreeVO(Category category) {
        CategoryTreeVO treeVO = new CategoryTreeVO();
        BeanUtils.copyProperties(category, treeVO);
        treeVO.setFullPath(category.getFullPath());
        // 获取课程数量
        long courseCount = categoryRepository.countCoursesByCategoryId(category.getId());
        treeVO.setCourseCount(courseCount);
        // 递归获取子分类
        List<Category> children = categoryRepository.findByParentId(category.getId());
        if (!children.isEmpty()) {
            List<CategoryTreeVO> childrenVOs = children.stream()
                    .map(this::buildCategoryTreeVO)
                    .collect(Collectors.toList());
            treeVO.setChildren(childrenVOs);
        }
        return treeVO;
    }
    @Override
    public boolean isCodeAvailable(String code, Long excludeId) {
        Optional<Category> existingCategory = categoryRepository.findByCode(code);
        return !existingCategory.isPresent() || existingCategory.get().getId().equals(excludeId);
    }
    @Override
    @Transactional
    public boolean updateCategoryStatus(Long id, boolean enabled) {
        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("分类不存在"));
        category.setEnabled(enabled);
        categoryRepository.save(category);
        return true;
    }
    @Override
    @Transactional
    public boolean updateCategoryOrder(Long id, Integer orderIndex) {
        Category category = categoryRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("分类不存在"));
        category.setOrderIndex(orderIndex);
        categoryRepository.save(category);
        return true;
    }
    @Override
    public Category getCategoryEntity(Long id) {
        return categoryRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("分类不存在"));
    }
    /**
     * 将分类实体转换为VO对象
     */
    private CategoryVO convertToCategoryVO(Category category) {
        CategoryVO vo = new CategoryVO();
        BeanUtils.copyProperties(category, vo);
        // 设置父分类信息
        if (category.getParent() != null) {
            vo.setParentId(category.getParent().getId());
            vo.setParentName(category.getParent().getName());
        }
        // 获取课程数量
        long courseCount = categoryRepository.countCoursesByCategoryId(category.getId());
        vo.setCourseCount((int) courseCount);
        // 获取子分类数量
        long childrenCount = categoryRepository.countByParentId(category.getId());
        vo.setChildrenCount((int) childrenCount);
        return vo;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/ChapterServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.chapter.ChapterCreateDTO;
import com.zhangziqi.online_course_mine.model.dto.chapter.ChapterOrderDTO;
import com.zhangziqi.online_course_mine.model.entity.Chapter;
import com.zhangziqi.online_course_mine.model.entity.Course;
import com.zhangziqi.online_course_mine.model.enums.ChapterAccessType;
import com.zhangziqi.online_course_mine.model.enums.CoursePaymentType;
import com.zhangziqi.online_course_mine.model.vo.ChapterVO;
import com.zhangziqi.online_course_mine.repository.ChapterRepository;
import com.zhangziqi.online_course_mine.repository.CourseRepository;
import com.zhangziqi.online_course_mine.service.ChapterService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
/**
 * 章节服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class ChapterServiceImpl implements ChapterService {
    private final ChapterRepository chapterRepository;
    private final CourseRepository courseRepository;
    @Override
    @Transactional
    public ChapterVO createChapter(ChapterCreateDTO dto) {
        // 验证课程是否存在
        Course course = courseRepository.findById(dto.getCourseId())
                .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID: " + dto.getCourseId()));
        // 如果没有指定排序索引，则放在最后
        if (dto.getOrderIndex() == null) {
            Integer maxOrderIndex = chapterRepository.findMaxOrderIndexByCourse_Id(dto.getCourseId());
            dto.setOrderIndex(maxOrderIndex != null ? maxOrderIndex + 1 : 0);
        }
        // 设置访问类型
        Integer accessType = dto.getAccessType();
        if (course.getPaymentType().equals(CoursePaymentType.FREE.getValue())) {
            // 如果课程是免费的，章节必须是免费的
            accessType = ChapterAccessType.FREE_TRIAL.getValue();
        } else {
            // 如果课程是付费的，默认章节为付费，但允许设置为免费试看
            if (accessType == null) {
                accessType = ChapterAccessType.PAID_ONLY.getValue();
            } else if (!accessType.equals(ChapterAccessType.FREE_TRIAL.getValue()) && 
                       !accessType.equals(ChapterAccessType.PAID_ONLY.getValue())) {
                throw new BusinessException(400, "无效的访问类型");
            }
        }
        // 创建章节
        Chapter chapter = Chapter.builder()
                .title(dto.getTitle())
                .description(dto.getDescription())
                .course(course)
                .orderIndex(dto.getOrderIndex())
                .accessType(accessType)
                .estimatedMinutes(dto.getEstimatedMinutes())
                .build();
        Chapter savedChapter = chapterRepository.save(chapter);
        // 更新课程的章节总数和总时长
        updateCourseTotalLessonsAndDuration(course);
        // 转换为VO并返回
        return ChapterVO.fromEntity(savedChapter);
    }
    @Override
    @Transactional
    public ChapterVO updateChapter(Long id, ChapterCreateDTO dto) {
        // 获取章节
        Chapter chapter = findChapterById(id);
        // 验证课程是否存在，且课程ID是否一致
        Course course;
        if (!chapter.getCourse().getId().equals(dto.getCourseId())) {
            course = courseRepository.findById(dto.getCourseId())
                    .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID: " + dto.getCourseId()));
            chapter.setCourse(course);
        } else {
            course = chapter.getCourse();
        }
        // 更新章节信息
        chapter.setTitle(dto.getTitle());
        chapter.setDescription(dto.getDescription());
        chapter.setOrderIndex(dto.getOrderIndex());
        // 更新访问类型
        if (course.getPaymentType().equals(CoursePaymentType.FREE.getValue())) {
            // 如果课程是免费的，章节必须是免费的
            chapter.setAccessType(ChapterAccessType.FREE_TRIAL.getValue());
        } else if (dto.getAccessType() != null) {
            // 如果课程是付费的，验证访问类型的有效性
            if (!dto.getAccessType().equals(ChapterAccessType.FREE_TRIAL.getValue()) && 
                !dto.getAccessType().equals(ChapterAccessType.PAID_ONLY.getValue())) {
                throw new BusinessException(400, "无效的访问类型");
            }
            chapter.setAccessType(dto.getAccessType());
        }
        // 更新学习时长估计（如果提供）
        if (dto.getEstimatedMinutes() != null) {
            chapter.setEstimatedMinutes(dto.getEstimatedMinutes());
        }
        Chapter updatedChapter = chapterRepository.save(chapter);
        // 更新课程的总时长
        updateCourseTotalLessonsAndDuration(chapter.getCourse());
        // 转换为VO并返回
        return ChapterVO.fromEntity(updatedChapter);
    }
    @Override
    @Transactional(readOnly = true)
    public ChapterVO getChapterById(Long id) {
        Chapter chapter = findChapterById(id);
        return ChapterVO.fromEntityWithSections(chapter);
    }
    /**
     * 查找章节实体（内部使用）
     */
    private Chapter findChapterById(Long id) {
        return chapterRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("章节不存在，ID: " + id));
    }
    @Override
    @Transactional(readOnly = true)
    public List<ChapterVO> getChaptersByCourse(Long courseId) {
        // 验证课程是否存在
        courseRepository.findById(courseId)
                .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID: " + courseId));
        List<Chapter> chapters = chapterRepository.findByCourse_IdOrderByOrderIndexAsc(courseId);
        // 转换为VO并返回
        return chapters.stream()
                .map(ChapterVO::fromEntityWithSections)
                .collect(Collectors.toList());
    }
    @Override
    @Transactional
    public void deleteChapter(Long id) {
        // 获取章节
        Chapter chapter = findChapterById(id);
        Course course = chapter.getCourse();
        // 删除章节
        chapterRepository.delete(chapter);
        // 更新课程的章节总数和总时长
        updateCourseTotalLessonsAndDuration(course);
    }
    @Override
    @Transactional
    public ChapterVO updateAccessType(Long id, Integer accessType) {
        // 获取章节
        Chapter chapter = findChapterById(id);
        // 验证访问类型
        if (accessType == null) {
            throw new BusinessException(400, "访问类型不能为空");
        }
        // 检查课程的付费类型
        if (chapter.getCourse().getPaymentType().equals(CoursePaymentType.FREE.getValue())) {
            throw new BusinessException(400, "免费课程的章节不能修改访问类型");
        }
        // 检查访问类型是否有效
        if (!accessType.equals(ChapterAccessType.FREE_TRIAL.getValue()) && 
            !accessType.equals(ChapterAccessType.PAID_ONLY.getValue())) {
            throw new BusinessException(400, "无效的访问类型");
        }
        // 更新访问类型
        chapter.setAccessType(accessType);
        Chapter updatedChapter = chapterRepository.save(chapter);
        // 转换为VO并返回
        return ChapterVO.fromEntity(updatedChapter);
    }
    @Override
    @Transactional
    public List<ChapterVO> reorderChapters(Long courseId, List<ChapterOrderDTO> chapterOrders) {
        // 验证课程是否存在
        Course course = courseRepository.findById(courseId)
                .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID: " + courseId));
        // 获取当前所有章节
        List<Chapter> existingChapters = chapterRepository.findByCourse_IdOrderByOrderIndexAsc(courseId);
        Map<Long, Chapter> chapterMap = existingChapters.stream()
                .collect(Collectors.toMap(Chapter::getId, Function.identity()));
        // 验证所有提供的章节ID是否都属于该课程
        for (ChapterOrderDTO orderDTO : chapterOrders) {
            if (!chapterMap.containsKey(orderDTO.getId())) {
                throw new BusinessException(400, "章节不属于该课程，章节ID: " + orderDTO.getId());
            }
        }
        // 更新章节顺序
        for (ChapterOrderDTO orderDTO : chapterOrders) {
            Chapter chapter = chapterMap.get(orderDTO.getId());
            chapter.setOrderIndex(orderDTO.getOrderIndex());
            chapterRepository.save(chapter);
        }
        // 获取更新后的章节列表，按orderIndex排序
        List<Chapter> updatedChapters = chapterRepository.findByCourse_IdOrderByOrderIndexAsc(courseId);
        // 转换为VO并返回
        return updatedChapters.stream()
                .map(ChapterVO::fromEntity)
                .collect(Collectors.toList());
    }
    /**
     * 更新课程的章节总数和总时长
     * 
     * @param course 课程
     */
    private void updateCourseTotalLessonsAndDuration(Course course) {
        List<Chapter> chapters = chapterRepository.findByCourse_IdOrderByOrderIndexAsc(course.getId());
        // 计算课程的章节总数
        course.setTotalLessons(chapters.size());
        // 计算课程的总时长（分钟）
        int totalDuration = chapters.stream()
                .filter(chapter -> chapter.getEstimatedMinutes() != null)
                .mapToInt(Chapter::getEstimatedMinutes)
                .sum();
        course.setTotalDuration(totalDuration);
        courseRepository.save(course);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/CourseReviewServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.review.ReviewCreateDTO;
import com.zhangziqi.online_course_mine.model.dto.review.ReviewQueryDTO;
import com.zhangziqi.online_course_mine.model.entity.Course;
import com.zhangziqi.online_course_mine.model.entity.CourseReview;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.vo.CourseReviewSectionVO;
import com.zhangziqi.online_course_mine.model.vo.ReviewStatsVO;
import com.zhangziqi.online_course_mine.model.vo.ReviewVO;
import com.zhangziqi.online_course_mine.repository.CourseRepository;
import com.zhangziqi.online_course_mine.repository.CourseReviewRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.CourseReviewService;
import com.zhangziqi.online_course_mine.service.CourseService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import jakarta.persistence.criteria.Predicate;
import java.util.*;
import java.util.stream.Collectors;
/**
 * 课程评论服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CourseReviewServiceImpl implements CourseReviewService {
    private final CourseReviewRepository reviewRepository;
    private final CourseRepository courseRepository;
    private final UserRepository userRepository;
    private final CourseService courseService;
    @Override
    @Transactional
    public ReviewVO createReview(ReviewCreateDTO dto, Long userId) {
        // 检查课程是否存在
        Course course = courseRepository.findById(dto.getCourseId())
            .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID: " + dto.getCourseId()));
        // 检查用户是否评价过该课程
        if (reviewRepository.existsByUserIdAndCourseId(userId, dto.getCourseId())) {
            throw new BusinessException(400, "您已经评价过该课程");
        }
        // TODO: 后续增加检查用户是否购买了该课程的逻辑
        // 创建评论实体
        CourseReview review = CourseReview.builder()
            .course(course)
            .userId(userId)
            .rating(dto.getRating())
            .content(dto.getContent())
            .likeCount(0)
            .build();
        // 保存评论
        CourseReview savedReview = reviewRepository.save(review);
        // 更新课程评分
        courseService.updateCourseRating(dto.getCourseId(), dto.getRating());
        // 获取用户信息
        User user = userRepository.findById(userId)
            .orElseThrow(() -> new ResourceNotFoundException("用户不存在，ID: " + userId));
        // 返回评论VO
        return ReviewVO.fromEntity(savedReview, user.getUsername(), user.getAvatar());
    }
    @Override
    @Transactional(readOnly = true)
    public CourseReviewSectionVO getCourseReviewSection(Long courseId, Integer page, Integer size, String orderBy) {
        // 检查课程是否存在
        courseRepository.findById(courseId)
            .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID: " + courseId));
        // 默认页面参数
        if (page == null) page = 0;
        if (size == null) size = 10;
        if (orderBy == null) orderBy = "newest";
        // 构建排序
        Sort sort;
        if ("highest_rating".equals(orderBy)) {
            sort = Sort.by(Sort.Direction.DESC, "rating");
        } else if ("lowest_rating".equals(orderBy)) {
            sort = Sort.by(Sort.Direction.ASC, "rating");
        } else {
            // 默认按最新排序
            sort = Sort.by(Sort.Direction.DESC, "createdAt");
        }
        // 创建分页请求
        PageRequest pageRequest = PageRequest.of(page, size, sort);
        // 查询评论
        Page<CourseReview> reviewPage = reviewRepository.findByCourseId(courseId, pageRequest);
        // 获取所有评论中的用户ID
        Set<Long> userIds = reviewPage.getContent().stream()
            .map(CourseReview::getUserId)
            .collect(Collectors.toSet());
        // 批量查询用户信息
        Map<Long, User> userMap = userRepository.findAllById(userIds).stream()
            .collect(Collectors.toMap(User::getId, user -> user));
        // 转换评论列表
        List<ReviewVO> reviewVOs = reviewPage.getContent().stream()
            .map(review -> {
                User user = userMap.get(review.getUserId());
                if (user != null) {
                    return ReviewVO.fromEntity(review, user.getUsername(), user.getAvatar());
                } else {
                    return ReviewVO.fromEntity(review, "未知用户", null);
                }
            })
            .collect(Collectors.toList());
        // 获取评分统计
        ReviewStatsVO stats = getReviewStats(courseId);
        // 构建评论区VO
        return CourseReviewSectionVO.builder()
            .courseId(courseId)
            .stats(stats)
            .reviews(reviewVOs)
            .totalReviews((int) reviewPage.getTotalElements())
            .currentPage(page)
            .totalPages(reviewPage.getTotalPages())
            .build();
    }
    @Override
    @Transactional(readOnly = true)
    public Page<ReviewVO> getReviewsByCourse(Long courseId, ReviewQueryDTO queryDTO, Pageable pageable) {
        // 构建查询条件
        Specification<CourseReview> spec = (root, query, cb) -> {
            List<Predicate> predicates = new ArrayList<>();
            // 课程ID条件
            predicates.add(cb.equal(root.get("course").get("id"), courseId));
            // 评分筛选条件
            if (queryDTO != null && queryDTO.getRatingFilter() != null) {
                predicates.add(cb.equal(root.get("rating"), queryDTO.getRatingFilter()));
            }
            return cb.and(predicates.toArray(new Predicate[0]));
        };
        // 执行查询
        Page<CourseReview> reviewPage = reviewRepository.findAll(spec, pageable);
        // 获取所有评论中的用户ID
        Set<Long> userIds = reviewPage.getContent().stream()
            .map(CourseReview::getUserId)
            .collect(Collectors.toSet());
        // 批量查询用户信息
        Map<Long, User> userMap = userRepository.findAllById(userIds).stream()
            .collect(Collectors.toMap(User::getId, user -> user));
        // 转换为ReviewVO列表
        List<ReviewVO> reviewVOs = reviewPage.getContent().stream()
            .map(review -> {
                User user = userMap.get(review.getUserId());
                if (user != null) {
                    return ReviewVO.fromEntity(review, user.getUsername(), user.getAvatar());
                } else {
                    return ReviewVO.fromEntity(review, "未知用户", null);
                }
            })
            .collect(Collectors.toList());
        // 创建新的Page对象
        return new PageImpl<>(reviewVOs, pageable, reviewPage.getTotalElements());
    }
    @Override
    @Transactional(readOnly = true)
    public ReviewStatsVO getReviewStats(Long courseId) {
        // 检查课程是否存在
        Course course = courseRepository.findById(courseId)
            .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID: " + courseId));
        // 获取评分分布
        Map<Integer, Integer> ratingDistribution = new HashMap<>();
        // 查询每个评分的数量
        for (int rating = 1; rating <= 5; rating++) {
            long count = reviewRepository.countByCourseIdAndRating(courseId, rating);
            ratingDistribution.put(rating, (int) count);
        }
        // 构建并返回评分统计VO
        return ReviewStatsVO.builder()
            .courseId(courseId)
            .averageRating(course.getAverageRating())
            .ratingCount(course.getRatingCount())
            .ratingDistribution(ratingDistribution)
            .build();
    }
    @Override
    @Transactional
    public void deleteReview(Long reviewId, Long userId) {
        // 查找评论
        CourseReview review = reviewRepository.findById(reviewId)
            .orElseThrow(() -> new ResourceNotFoundException("评论不存在，ID: " + reviewId));
        // 检查是否是评论的作者或管理员
        if (!review.getUserId().equals(userId)) {
            // TODO: 后续可以添加管理员权限检查
            throw new BusinessException(403, "没有权限删除此评论");
        }
        // 删除评论
        reviewRepository.delete(review);
        // TODO: 更新课程评分 - 需要在CourseService中添加removeRating方法
    }
    @Override
    @Transactional(readOnly = true)
    public ReviewVO getUserReviewOnCourse(Long userId, Long courseId) {
        // 查询用户在课程上的评论
        Optional<CourseReview> reviewOpt = reviewRepository.findByUserIdAndCourseId(userId, courseId);
        if (reviewOpt.isEmpty()) {
            return null;
        }
        CourseReview review = reviewOpt.get();
        // 获取用户信息
        User user = userRepository.findById(userId)
            .orElseThrow(() -> new ResourceNotFoundException("用户不存在，ID: " + userId));
        // 转换为VO并返回
        return ReviewVO.fromEntity(review, user.getUsername(), user.getAvatar());
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/CourseServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.course.*;
import com.zhangziqi.online_course_mine.model.entity.*;
import com.zhangziqi.online_course_mine.model.enums.CourseStatus;
import com.zhangziqi.online_course_mine.model.enums.CourseVersion;
import com.zhangziqi.online_course_mine.model.enums.CoursePaymentType;
import com.zhangziqi.online_course_mine.model.enums.ChapterAccessType;
import com.zhangziqi.online_course_mine.model.enums.OrderStatus;
import com.zhangziqi.online_course_mine.model.vo.CourseVO;
import com.zhangziqi.online_course_mine.model.vo.PreviewUrlVO;
import com.zhangziqi.online_course_mine.model.vo.CourseStructureVO;
import com.zhangziqi.online_course_mine.repository.CategoryRepository;
import com.zhangziqi.online_course_mine.repository.CourseRepository;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.OrderRepository;
import com.zhangziqi.online_course_mine.repository.UserCourseRepository;
import com.zhangziqi.online_course_mine.repository.TagRepository;
import com.zhangziqi.online_course_mine.service.CourseService;
import com.zhangziqi.online_course_mine.service.MinioService;
import com.zhangziqi.online_course_mine.service.OrderService;
import jakarta.persistence.criteria.Join;
import jakarta.persistence.criteria.JoinType;
import jakarta.persistence.criteria.Predicate;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.BeanUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;
import java.io.IOException;
import java.util.UUID;
/**
 * 课程服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CourseServiceImpl implements CourseService {
    private final CourseRepository courseRepository;
    private final InstitutionRepository institutionRepository;
    private final CategoryRepository categoryRepository;
    private final TagRepository tagRepository;
    private final StringRedisTemplate redisTemplate;
    private final MinioService minioService;
    private final OrderRepository orderRepository;
    private final UserCourseRepository userCourseRepository;
    private final OrderService orderService;
    // 预览URL有效期（分钟）
    private static final long PREVIEW_URL_EXPIRATION_MINUTES = 60;
    // 预览token有效期（分钟）
    private static final long PREVIEW_TOKEN_EXPIRATION_MINUTES = 1440; // 24小时
    // Redis中存储预览token的键前缀
    private static final String PREVIEW_TOKEN_KEY_PREFIX = "course:preview:";
    @Override
    @Transactional
    public CourseVO createCourse(CourseCreateDTO dto, Long creatorId, Long institutionId) {
        // 验证机构是否存在
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        // 验证分类是否存在（如果指定了分类）
        Category category = null;
        if (dto.getCategoryId() != null) {
            category = categoryRepository.findById(dto.getCategoryId())
                    .orElseThrow(() -> new ResourceNotFoundException("分类不存在，ID: " + dto.getCategoryId()));
        }
        // 验证标签是否存在（如果指定了标签）
        Set<Tag> tags = new HashSet<>();
        if (dto.getTagIds() != null && !dto.getTagIds().isEmpty()) {
            tags = dto.getTagIds().stream()
                    .map(tagId -> tagRepository.findById(tagId)
                            .orElseThrow(() -> new ResourceNotFoundException("标签不存在，ID: " + tagId)))
                    .collect(Collectors.toSet());
            // 增加标签使用次数
            tags.forEach(tag -> {
                tag.incrementUseCount();
                tagRepository.save(tag);
            });
        }
        // 设置付费类型
        Integer paymentType = dto.getPaymentType();
        if (paymentType == null) {
            paymentType = CoursePaymentType.FREE.getValue();
        }
        // 如果是付费课程，验证价格
        if (paymentType.equals(CoursePaymentType.PAID.getValue())) {
            if (dto.getPrice() == null || dto.getPrice().compareTo(BigDecimal.ZERO) <= 0) {
                throw new BusinessException(400, "付费课程必须设置价格且价格必须大于0");
            }
        }
        // 创建课程
        Course course = Course.builder()
                .title(dto.getTitle())
                .description(dto.getDescription())
                .institution(institution)
                .creatorId(creatorId)
                .status(CourseStatus.DRAFT.getValue())
                .isPublishedVersion(false)
                .versionType(CourseVersion.DRAFT.getValue())
                .category(category)
                .tags(tags.isEmpty() ? null : tags)
                .paymentType(paymentType)
                .price(dto.getPrice())
                .discountPrice(dto.getDiscountPrice())
                .difficulty(dto.getDifficulty())
                .targetAudience(dto.getTargetAudience())
                .learningObjectives(dto.getLearningObjectives())
                .totalLessons(0)
                .totalDuration(0)
                .build();
        Course savedCourse = courseRepository.save(course);
        // 转换为VO并返回
        return CourseVO.fromEntity(savedCourse);
    }
    @Override
    @Transactional
    public CourseVO updateCourse(Long id, CourseCreateDTO dto, Long institutionId) {
        // 获取课程
        Course course = findCourseById(id);
        // 检查课程状态，只有草稿或已拒绝状态的课程才能更新
        if (!course.getStatusEnum().equals(CourseStatus.DRAFT) && 
            !course.getStatusEnum().equals(CourseStatus.REJECTED)) {
            throw new BusinessException(400, "只有草稿或已拒绝状态的课程才能更新");
        }
        // 验证机构是否存在
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        // 验证分类是否存在（如果指定了分类）
        Category category = null;
        if (dto.getCategoryId() != null) {
            category = categoryRepository.findById(dto.getCategoryId())
                    .orElseThrow(() -> new ResourceNotFoundException("分类不存在，ID: " + dto.getCategoryId()));
        }
        // 保存旧标签用于计数更新
        Set<Tag> oldTags = course.getTags() != null ? new HashSet<>(course.getTags()) : new HashSet<>();
        // 验证标签是否存在（如果指定了标签）
        Set<Tag> newTags;
        if (dto.getTagIds() != null && !dto.getTagIds().isEmpty()) {
            newTags = dto.getTagIds().stream()
                    .map(tagId -> tagRepository.findById(tagId)
                            .orElseThrow(() -> new ResourceNotFoundException("标签不存在，ID: " + tagId)))
                    .collect(Collectors.toSet());
            // 处理标签使用计数
            // 1. 减少不再使用的旧标签的计数 - 修改为使用ID比较
            Set<Long> newTagIds = newTags.stream().map(Tag::getId).collect(Collectors.toSet());
            oldTags.forEach(oldTag -> {
                if (oldTag != null && oldTag.getId() != null && !newTagIds.contains(oldTag.getId())) {
                    oldTag.decrementUseCount();
                    tagRepository.save(oldTag);
                }
            });
            // 2. 增加新增标签的计数 - 修改为使用ID比较
            Set<Long> oldTagIds = oldTags.stream()
                    .filter(tag -> tag != null && tag.getId() != null)
                    .map(Tag::getId)
                    .collect(Collectors.toSet());
            newTags.forEach(newTag -> {
                if (newTag != null && newTag.getId() != null && !oldTagIds.contains(newTag.getId())) {
                    newTag.incrementUseCount();
                    tagRepository.save(newTag);
                }
            });
        } else {
            newTags = new HashSet<>();
            // 如果新标签列表为空，减少所有旧标签的计数
            oldTags.forEach(oldTag -> {
                if (oldTag != null) {
                    oldTag.decrementUseCount();
                    tagRepository.save(oldTag);
                }
            });
        }
        // 设置付费类型
        Integer paymentType = dto.getPaymentType();
        if (paymentType == null) {
            paymentType = CoursePaymentType.FREE.getValue();
        }
        // 如果是付费课程，验证价格
        if (paymentType.equals(CoursePaymentType.PAID.getValue())) {
            if (dto.getPrice() == null || dto.getPrice().compareTo(BigDecimal.ZERO) <= 0) {
                throw new BusinessException(400, "付费课程必须设置价格且价格必须大于0");
            }
        }
        // 更新课程
        course.setTitle(dto.getTitle());
        course.setDescription(dto.getDescription());
        course.setInstitution(institution);
        course.setCategory(category);
        course.setTags(newTags.isEmpty() ? null : newTags);
        course.setPaymentType(paymentType);
        course.setPrice(dto.getPrice());
        course.setDiscountPrice(dto.getDiscountPrice());
        course.setDifficulty(dto.getDifficulty());
        course.setTargetAudience(dto.getTargetAudience());
        course.setLearningObjectives(dto.getLearningObjectives());
        // 如果是已拒绝状态，更新后设置为草稿状态
        if (course.getStatusEnum().equals(CourseStatus.REJECTED)) {
            course.setStatusEnum(CourseStatus.DRAFT);
        }
        Course updatedCourse = courseRepository.save(course);
        // 转换为VO并返回
        return CourseVO.fromEntity(updatedCourse);
    }
    @Override
    @Transactional(readOnly = true)
    public CourseVO getCourseById(Long id) {
        Course course = findCourseById(id);
        return CourseVO.fromEntity(course);
    }
    @Override
    @Transactional(readOnly = true)
    public CourseStructureVO getCourseStructure(Long id) {
        // 获取课程实体（带关联对象）
        Course course = courseRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID：" + id));
        // 使用CourseStructureVO的工厂方法创建结构对象
        return CourseStructureVO.fromEntity(course);
    }
    /**
     * 查找课程实体（内部使用）
     */
    private Course findCourseById(Long id) {
        return courseRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID：" + id));
    }
    @Override
    @Transactional(readOnly = true)
    public Page<CourseVO> getCoursesByInstitution(Long institutionId, Pageable pageable) {
        // 验证机构是否存在
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        // 只返回工作区版本的课程（非发布版本）
        Page<Course> coursePage = courseRepository.findByInstitutionAndIsPublishedVersion(institution, false, pageable);
        // 转换为VO列表
        List<CourseVO> courseVOs = coursePage.getContent().stream()
                .map(CourseVO::fromEntity)
                .collect(Collectors.toList());
        // 创建新的VO分页对象
        return new PageImpl<>(courseVOs, pageable, coursePage.getTotalElements());
    }
    @Override
    @Transactional(readOnly = true)
    public Page<CourseVO> getWorkspaceCoursesByInstitution(Long institutionId, Pageable pageable) {
        // 直接调用更新后的getCoursesByInstitution方法，它现在只返回工作区版本
        return getCoursesByInstitution(institutionId, pageable);
    }
    @Override
    @Transactional(readOnly = true)
    public Page<CourseVO> getPublishedCoursesByInstitution(Long institutionId, Pageable pageable) {
        // 验证机构是否存在
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        // 只返回发布版本的课程
        Page<Course> coursePage = courseRepository.findByInstitutionAndIsPublishedVersion(institution, true, pageable);
        // 转换为VO列表
        List<CourseVO> courseVOs = coursePage.getContent().stream()
                .map(CourseVO::fromEntity)
                .collect(Collectors.toList());
        // 创建新的VO分页对象
        return new PageImpl<>(courseVOs, pageable, coursePage.getTotalElements());
    }
    @Override
    @Transactional
    public void deleteCourse(Long id) {
        // 获取课程
        Course course = findCourseById(id);
        // 只有草稿状态的课程才能删除
        if (!course.getStatusEnum().equals(CourseStatus.DRAFT)) {
            throw new BusinessException(400, "只有草稿状态的课程才能删除");
        }
        // 减少标签使用计数
        if (course.getTags() != null && !course.getTags().isEmpty()) {
            course.getTags().forEach(tag -> {
                tag.decrementUseCount();
                tagRepository.save(tag);
            });
        }
        courseRepository.delete(course);
    }
    @Override
    @Transactional
    public CourseVO updateCourseCover(Long id, MultipartFile file) throws IOException {
        // 获取课程
        Course course = findCourseById(id);
        // 检查课程状态，只有草稿或已拒绝状态的课程才能更新封面
        if (!course.getStatusEnum().equals(CourseStatus.DRAFT) && 
            !course.getStatusEnum().equals(CourseStatus.REJECTED)) {
            throw new BusinessException(400, "只有草稿或已拒绝状态的课程才能更新封面");
        }
        // 检查文件类型
        String contentType = file.getContentType();
        if (contentType == null || !contentType.startsWith("image/")) {
            throw new BusinessException(400, "只支持上传图片文件");
        }
        // 检查文件大小（最大5MB）
        if (file.getSize() > 5 * 1024 * 1024) {
            throw new BusinessException(400, "文件大小不能超过5MB");
        }
        // 生成唯一的对象名
        String objectName = "course-covers/" + course.getId() + "/" + UUID.randomUUID() + "-" + file.getOriginalFilename();
        // 上传到MinIO
        String coverImageUrl = minioService.uploadFile(objectName, file.getInputStream(), file.getContentType());
        // 获取旧封面URL
        String oldCoverUrl = course.getCoverImage();
        // 更新课程封面
        course.setCoverImage(coverImageUrl);
        Course updatedCourse = courseRepository.save(course);
        // 尝试删除旧封面
        if (oldCoverUrl != null && !oldCoverUrl.isEmpty()) {
            try {
                // 从URL中提取对象名
                String oldObjectName = extractObjectNameFromUrl(oldCoverUrl);
                if (oldObjectName != null) {
                    boolean deleted = minioService.deleteFile(oldObjectName);
                    if (deleted) {
                        log.info("删除旧封面成功: {}", oldObjectName);
                    } else {
                        log.warn("删除旧封面失败: {}", oldObjectName);
                    }
                }
            } catch (Exception e) {
                log.error("删除旧封面出错: {}", e.getMessage(), e);
                // 继续执行，不影响封面更新
            }
        }
        // 转换为VO并返回
        return CourseVO.fromEntity(updatedCourse);
    }
    /**
     * 从URL中提取对象名
     * 例如：http://localhost:8999/media/course-covers/123/uuid-filename.jpg
     * 提取为：course-covers/123/uuid-filename.jpg
     */
    private String extractObjectNameFromUrl(String url) {
        if (url == null || url.isEmpty()) {
            return null;
        }
        try {
            // 查找桶名在URL中的位置
            String bucketName = "media"; // MinIO配置中的桶名
            int bucketIndex = url.indexOf("/" + bucketName + "/");
            if (bucketIndex != -1) {
                // +桶名长度+2，是为了跳过"/桶名/"
                return url.substring(bucketIndex + bucketName.length() + 2);
            }
            // 如果使用特殊格式，尝试直接从路径中提取
            String[] parts = url.split("/");
            if (parts.length >= 3) {
                // 假设格式为：course-covers/123/uuid-filename.jpg
                return String.join("/", parts[parts.length - 3], parts[parts.length - 2], parts[parts.length - 1]);
            }
            log.warn("无法从URL中提取对象名: {}", url);
            return null;
        } catch (Exception e) {
            log.error("提取对象名出错: {}", e.getMessage());
            return null;
        }
    }
    @Override
    @Transactional
    public CourseVO submitForReview(Long id) {
        // 获取课程
        Course course = findCourseById(id);
        // 检查课程状态，只有草稿状态的课程才能提交审核
        if (!course.getStatusEnum().equals(CourseStatus.DRAFT)) {
            throw new BusinessException(400, "只有草稿状态的课程才能提交审核");
        }
        // 检查课程是否有章节
        if (course.getChapters() == null || course.getChapters().isEmpty()) {
            throw new BusinessException(400, "课程必须至少有一个章节才能提交审核");
        }
        // 更新课程状态为待审核
        course.setStatusEnum(CourseStatus.PENDING_REVIEW);
        course.setVersionTypeEnum(CourseVersion.REVIEW);
        Course updatedCourse = courseRepository.save(course);
        // 转换为VO并返回
        return CourseVO.fromEntity(updatedCourse);
    }
    @Override
    @Transactional
    public CourseVO startReview(Long id, Long reviewerId) {
        // 获取课程
        Course course = findCourseById(id);
        // 检查课程状态，只有待审核状态的课程才能开始审核
        if (!course.getStatusEnum().equals(CourseStatus.PENDING_REVIEW)) {
            throw new BusinessException(400, "只有待审核状态的课程才能开始审核");
        }
        // 更新课程状态为审核中
        course.setStatusEnum(CourseStatus.REVIEWING);
        course.setReviewerId(reviewerId);
        Course updatedCourse = courseRepository.save(course);
        // 转换为VO并返回
        return CourseVO.fromEntity(updatedCourse);
    }
    @Override
    @Transactional
    public CourseVO approveCourse(Long id, String comment, Long reviewerId) {
        // 获取课程
        Course course = findCourseById(id);
        // 检查课程状态，只有审核中状态的课程才能审核通过
        if (!course.getStatusEnum().equals(CourseStatus.REVIEWING)) {
            throw new BusinessException(400, "只有审核中状态的课程才能审核通过");
        }
        // 检查审核人是否匹配
        if (!reviewerId.equals(course.getReviewerId())) {
            throw new BusinessException(400, "只有分配的审核人才能审核课程");
        }
        // 更新课程状态为草稿（工作区版本）
        course.setStatusEnum(CourseStatus.DRAFT); // 修改为草稿而不是已发布
        course.setReviewComment(comment);
        course.setReviewedAt(LocalDateTime.now());
        course.setVersionTypeEnum(CourseVersion.DRAFT); // 工作区版本类型也变为草稿
        // 如果是首次发布，创建一个已发布版本
        if (course.getPublishedVersionId() == null) {
            // 保存工作区版本课程，获取ID
            Course savedCourse = courseRepository.save(course);
            // 创建已发布版本
            Course publishedVersion = new Course();
            // 只复制基本属性，排除集合和关联实体
            BeanUtils.copyProperties(savedCourse, publishedVersion, 
                "id", "dataVersion", "chapters", "tags", "category", "institution",
                "isPublishedVersion", "publishedVersionId", "status", "versionType",
                "studentCount", "averageRating", "ratingCount", "favoriteUsers");
            publishedVersion.setId(null); // 确保新对象没有ID
            publishedVersion.setIsPublishedVersion(true); // 标记为发布版本
            publishedVersion.setPublishedVersionId(savedCourse.getId());
            publishedVersion.setStatusEnum(CourseStatus.PUBLISHED); // 发布版本状态设为已发布
            publishedVersion.setVersionTypeEnum(CourseVersion.PUBLISHED); // 发布版本的版本类型为已发布
            // 设置关联的分类（只复制引用）
            if (savedCourse.getCategory() != null) {
                publishedVersion.setCategory(savedCourse.getCategory());
            }
            // 设置关联的机构（只复制引用）
            if (savedCourse.getInstitution() != null) {
                publishedVersion.setInstitution(savedCourse.getInstitution());
            }
            // 复制标签关联（不复制标签实体）
            if (savedCourse.getTags() != null && !savedCourse.getTags().isEmpty()) {
                publishedVersion.setTags(new HashSet<>(savedCourse.getTags()));
            }
            // 深度复制章节和小节
            if (savedCourse.getChapters() != null && !savedCourse.getChapters().isEmpty()) {
                List<Chapter> copiedChapters = new ArrayList<>();
                for (Chapter originalChapter : savedCourse.getChapters()) {
                    // 创建新章节对象
                    Chapter copiedChapter = new Chapter();
                    // 复制基本属性（排除集合和关联实体）
                    BeanUtils.copyProperties(originalChapter, copiedChapter, 
                        "id", "course", "sections", "dataVersion");
                    copiedChapter.setCourse(publishedVersion);
                    // 深度复制小节
                    if (originalChapter.getSections() != null && !originalChapter.getSections().isEmpty()) {
                        List<Section> copiedSections = new ArrayList<>();
                        for (Section originalSection : originalChapter.getSections()) {
                            // 创建新小节对象
                            Section copiedSection = new Section();
                            // 复制基本属性（排除关联实体）
                            BeanUtils.copyProperties(originalSection, copiedSection, 
                                "id", "chapter", "media", "questionGroup", "dataVersion");
                            copiedSection.setChapter(copiedChapter);
                            // 设置媒体资源和题库引用（不复制这些实体）
                            if (originalSection.getMediaId() != null) {
                                copiedSection.setMediaId(originalSection.getMediaId());
                            }
                            if (originalSection.getQuestionGroupId() != null) {
                                copiedSection.setQuestionGroupId(originalSection.getQuestionGroupId());
                            }
                            copiedSections.add(copiedSection);
                        }
                        copiedChapter.setSections(copiedSections);
                    }
                    copiedChapters.add(copiedChapter);
                }
                publishedVersion.setChapters(copiedChapters);
            }
            // 保存已发布版本
            Course savedPublishedVersion = courseRepository.save(publishedVersion);
            // 更新原课程的已发布版本ID
            savedCourse.setPublishedVersionId(savedPublishedVersion.getId());
            Course updatedCourse = courseRepository.save(savedCourse);
            // 转换为VO并返回
            return CourseVO.fromEntity(updatedCourse);
        } else {
            // 如果已有发布版本，更新发布版本
            Optional<Course> publishedVersionOpt = courseRepository.findById(course.getPublishedVersionId());
            if (publishedVersionOpt.isPresent()) {
                Course publishedVersion = publishedVersionOpt.get();
                // 只更新基本属性，不更新集合或关联实体
                BeanUtils.copyProperties(course, publishedVersion, 
                    "id", "dataVersion", "chapters", "tags", "category", "institution",
                    "isPublishedVersion", "publishedVersionId", "status", "versionType",
                    "studentCount", "averageRating", "ratingCount", "favoriteUsers");
                // 确保发布版本的状态为已发布
                publishedVersion.setStatusEnum(CourseStatus.PUBLISHED);
                publishedVersion.setVersionTypeEnum(CourseVersion.PUBLISHED);
                publishedVersion.setReviewComment(comment);
                publishedVersion.setReviewedAt(LocalDateTime.now());
                // 设置关联的分类和机构（只复制引用）
                if (course.getCategory() != null) {
                    publishedVersion.setCategory(course.getCategory());
                }
                if (course.getInstitution() != null) {
                    publishedVersion.setInstitution(course.getInstitution());
                }
                // 复制标签关联（不复制标签实体）
                if (course.getTags() != null) {
                    publishedVersion.setTags(new HashSet<>(course.getTags()));
                } else {
                    publishedVersion.setTags(new HashSet<>());
                }
                // 清空现有章节 - 依赖JPA级联删除
                // 由于配置了cascade=CascadeType.ALL和orphanRemoval=true，
                // 清空集合会自动删除数据库中的章节和关联的小节
                if (publishedVersion.getChapters() != null) {
                    publishedVersion.getChapters().clear();
                } else {
                    publishedVersion.setChapters(new ArrayList<>());
                }
                // 持久化变更，确保级联删除执行
                courseRepository.saveAndFlush(publishedVersion);
                // 深度复制章节和小节
                if (course.getChapters() != null && !course.getChapters().isEmpty()) {
                    for (Chapter originalChapter : course.getChapters()) {
                        // 创建新章节对象
                        Chapter copiedChapter = new Chapter();
                        // 复制基本属性（排除集合和关联实体）
                        BeanUtils.copyProperties(originalChapter, copiedChapter, 
                            "id", "course", "sections", "dataVersion");
                        copiedChapter.setCourse(publishedVersion);
                        // 为小节集合初始化
                        copiedChapter.setSections(new ArrayList<>());
                        // 深度复制小节
                        if (originalChapter.getSections() != null && !originalChapter.getSections().isEmpty()) {
                            for (Section originalSection : originalChapter.getSections()) {
                                // 创建新小节对象
                                Section copiedSection = new Section();
                                // 复制基本属性（排除关联实体）
                                BeanUtils.copyProperties(originalSection, copiedSection, 
                                    "id", "chapter", "media", "questionGroup", "dataVersion");
                                copiedSection.setChapter(copiedChapter);
                                // 设置媒体资源和题库引用（不复制这些实体）
                                if (originalSection.getMediaId() != null) {
                                    copiedSection.setMediaId(originalSection.getMediaId());
                                }
                                if (originalSection.getQuestionGroupId() != null) {
                                    copiedSection.setQuestionGroupId(originalSection.getQuestionGroupId());
                                }
                                copiedChapter.getSections().add(copiedSection);
                            }
                        }
                        publishedVersion.getChapters().add(copiedChapter);
                    }
                }
                courseRepository.save(publishedVersion);
            }
            Course updatedCourse = courseRepository.save(course);
            // 转换为VO并返回
            return CourseVO.fromEntity(updatedCourse);
        }
    }
    @Override
    @Transactional
    public CourseVO rejectCourse(Long id, String reason, Long reviewerId) {
        // 获取课程
        Course course = findCourseById(id);
        // 检查课程状态，只有审核中状态的课程才能被拒绝
        if (!course.getStatusEnum().equals(CourseStatus.REVIEWING)) {
            throw new BusinessException(400, "只有审核中状态的课程才能被拒绝");
        }
        // 检查审核人是否匹配
        if (!reviewerId.equals(course.getReviewerId())) {
            throw new BusinessException(400, "只有分配的审核人才能审核课程");
        }
        // 更新课程状态为已拒绝
        course.setStatusEnum(CourseStatus.REJECTED);
        course.setReviewComment(reason);
        course.setReviewedAt(LocalDateTime.now());
        course.setVersionTypeEnum(CourseVersion.DRAFT);
        Course updatedCourse = courseRepository.save(course);
        // 转换为VO并返回
        return CourseVO.fromEntity(updatedCourse);
    }
    @Override
    @Transactional
    public CourseVO unpublishCourse(Long id) {
        // 获取课程
        Course course = findCourseById(id);
        // 检查课程状态，只有已发布状态的课程才能下线
        if (!course.getStatusEnum().equals(CourseStatus.PUBLISHED)) {
            throw new BusinessException(400, "只有已发布状态的课程才能下线");
        }
        // 如果存在发布版本，获取发布版本ID并处理相关订单
        if (course.getPublishedVersionId() != null) {
            Long publishedVersionId = course.getPublishedVersionId();
            log.info("课程下架，工作区ID：{}，发布版本ID：{}", id, publishedVersionId);
            // 获取已发布版本
            Course publishedVersion = courseRepository.findById(publishedVersionId)
                    .orElseThrow(() -> new ResourceNotFoundException("发布版本不存在，ID: " + publishedVersionId));
            // 处理已购买课程用户的退款，调用订单服务进行退款
            processRefundsForUnpublishedCourse(publishedVersion);
            // 删除发布版本
            log.info("删除课程发布版本，ID: {}", publishedVersionId);
            courseRepository.delete(publishedVersion);
            // 更新工作区版本，设置publishedVersionId为null
            course.setPublishedVersionId(null);
            course.setStatusEnum(CourseStatus.DRAFT);
            Course updatedCourse = courseRepository.save(course);
            return CourseVO.fromEntity(updatedCourse);
        } else {
            // 如果没有发布版本，则仅更新状态
            log.warn("课程{}没有发布版本，仅更新状态", id);
            course.setStatusEnum(CourseStatus.UNPUBLISHED);
            Course updatedCourse = courseRepository.save(course);
            return CourseVO.fromEntity(updatedCourse);
        }
    }
    /**
     * 处理下架课程的退款
     * @param course 要下架的课程
     */
    private void processRefundsForUnpublishedCourse(Course course) {
        // 查询所有已支付的该课程订单
        List<Order> paidOrders = orderRepository.findByCourse_IdAndStatus(course.getId(), OrderStatus.PAID.getValue());
        if (paidOrders.isEmpty()) {
            log.info("课程{}没有需要退款的订单", course.getId());
            return;
        }
        log.info("课程下架，开始处理{}个订单的退款", paidOrders.size());
        for (Order order : paidOrders) {
            try {
                log.info("处理订单{}退款", order.getOrderNo());
                // 更新订单状态为退款中
                order.setStatus(OrderStatus.REFUNDING.getValue());
                order.setRefundAmount(order.getAmount());
                order.setRefundReason("课程已下架，系统自动退款");
                orderRepository.save(order);
                // 调用支付宝退款接口
                boolean refundSuccess = orderService.executeAlipayRefund(
                        order.getOrderNo(), 
                        order.getAmount(), 
                        "课程已下架，系统自动退款");
                if (!refundSuccess) {
                    log.error("订单{}退款失败", order.getOrderNo());
                }
            } catch (Exception e) {
                log.error("处理订单{}退款异常", order.getOrderNo(), e);
            }
        }
    }
    @Override
    @Transactional
    public CourseVO republishCourse(Long id) {
        // 获取课程
        Course course = findCourseById(id);
        // 检查课程状态，只有已下线状态的课程才能重新上线
        if (!course.getStatusEnum().equals(CourseStatus.UNPUBLISHED)) {
            throw new BusinessException(400, "只有已下线状态的课程才能重新上线");
        }
        // 更新课程状态为已发布
        course.setStatusEnum(CourseStatus.PUBLISHED);
        Course updatedCourse = courseRepository.save(course);
        // 转换为VO并返回
        return CourseVO.fromEntity(updatedCourse);
    }
    @Override
    @Transactional
    public CourseVO reEditRejectedCourse(Long id) {
        // 获取课程
        Course course = findCourseById(id);
        // 检查课程状态，只有已拒绝状态的课程才能重新编辑
        if (!course.getStatusEnum().equals(CourseStatus.REJECTED)) {
            throw new BusinessException(400, "只有已拒绝状态的课程才能重新编辑");
        }
        // 更新课程状态为草稿
        course.setStatusEnum(CourseStatus.DRAFT);
        Course updatedCourse = courseRepository.save(course);
        // 转换为VO并返回
        return CourseVO.fromEntity(updatedCourse);
    }
    @Override
    @Transactional(readOnly = true)
    public PreviewUrlVO generatePreviewUrl(Long id) {
        // 获取课程
        Course course = findCourseById(id);
        // 生成随机预览token
        String previewToken = UUID.randomUUID().toString();
        // 构建预览URL
        String previewUrl = "/api/courses/preview/" + previewToken;
        // 计算过期时间
        LocalDateTime expireTime = LocalDateTime.now().plusMinutes(PREVIEW_URL_EXPIRATION_MINUTES);
        // 在Redis中存储预览token和课程ID的映射，设置过期时间
        redisTemplate.opsForValue().set(
                PREVIEW_TOKEN_KEY_PREFIX + previewToken, 
                course.getId().toString(),
                PREVIEW_TOKEN_EXPIRATION_MINUTES,
                TimeUnit.MINUTES
        );
        log.info("生成课程预览URL - 课程ID: {}, token: {}, 过期时间: {}", course.getId(), previewToken, expireTime);
        return PreviewUrlVO.builder()
                .url(previewUrl)
                .expireTime(expireTime)
                .courseId(course.getId())
                .courseTitle(course.getTitle())
                .build();
    }
    @Override
    public CourseVO getCourseByPreviewToken(String token) {
        // 从Redis中获取token对应的课程ID
        String courseIdStr = redisTemplate.opsForValue().get(PREVIEW_TOKEN_KEY_PREFIX + token);
        if (courseIdStr == null) {
            log.warn("预览token不存在或已过期: {}", token);
            throw new BusinessException(403, "预览链接不存在或已过期");
        }
        try {
            Long courseId = Long.parseLong(courseIdStr);
            log.info("通过预览token获取课程 - token: {}, 课程ID: {}", token, courseId);
            Course course = findCourseById(courseId);
            // 转换为VO并返回
            return CourseVO.fromEntity(course);
        } catch (NumberFormatException e) {
            log.error("Redis中存储的课程ID格式错误: {}", courseIdStr, e);
            throw new BusinessException(500, "系统错误，无法获取预览课程");
        }
    }
    @Override
    public CourseStructureVO getCourseStructureByPreviewToken(String token) {
        // 从Redis中获取token对应的课程ID
        String courseIdStr = redisTemplate.opsForValue().get(PREVIEW_TOKEN_KEY_PREFIX + token);
        if (courseIdStr == null) {
            log.warn("预览token不存在或已过期: {}", token);
            throw new BusinessException(403, "预览链接不存在或已过期");
        }
        try {
            Long courseId = Long.parseLong(courseIdStr);
            log.info("通过预览token获取课程结构 - token: {}, 课程ID: {}", token, courseId);
            // 直接调用获取课程结构的方法
            return getCourseStructure(courseId);
        } catch (NumberFormatException e) {
            log.error("Redis中存储的课程ID格式错误: {}", courseIdStr, e);
            throw new BusinessException(500, "系统错误，无法获取预览课程");
        }
    }
    @Override
    @Transactional
    public CourseVO updatePaymentSettings(Long id, Integer paymentType, BigDecimal price, BigDecimal discountPrice) {
        // 获取课程
        Course course = findCourseById(id);
        // 检查课程状态，只有草稿或已拒绝状态的课程才能更新支付设置
        if (!course.getStatusEnum().equals(CourseStatus.DRAFT) && 
            !course.getStatusEnum().equals(CourseStatus.REJECTED)) {
            throw new BusinessException(400, "只有草稿或已拒绝状态的课程才能更新支付设置");
        }
        // 设置付费类型
        if (paymentType == null) {
            paymentType = CoursePaymentType.FREE.getValue();
        }
        // 如果是付费课程，验证价格
        if (paymentType.equals(CoursePaymentType.PAID.getValue())) {
            if (price == null || price.compareTo(BigDecimal.ZERO) <= 0) {
                throw new BusinessException(400, "付费课程必须设置价格且价格必须大于0");
            }
        }
        // 更新支付设置
        course.setPaymentType(paymentType);
        course.setPrice(price);
        course.setDiscountPrice(discountPrice);
        // 如果课程变更为免费，则更新所有章节为免费访问
        if (paymentType.equals(CoursePaymentType.FREE.getValue())) {
            if (course.getChapters() != null && !course.getChapters().isEmpty()) {
                for (Chapter chapter : course.getChapters()) {
                    chapter.setAccessType(ChapterAccessType.FREE_TRIAL.getValue());
                }
            }
        }
        Course updatedCourse = courseRepository.save(course);
        // 转换为VO并返回
        return CourseVO.fromEntity(updatedCourse);
    }
    @Override
    @Transactional(readOnly = true)
    public Page<CourseVO> getCoursesByStatus(Integer status, Pageable pageable) {
        // 获取指定状态的课程列表
        Page<Course> coursePage = courseRepository.findByStatus(status, pageable);
        // 转换为VO
        return coursePage.map(CourseVO::fromEntity);
    }
    @Override
    public Page<CourseVO> getCoursesByStatusAndReviewer(Integer status, Long reviewerId, Pageable pageable) {
        Specification<Course> spec = (root, query, cb) -> {
            return cb.and(
                cb.equal(root.get("status"), status),
                cb.equal(root.get("reviewerId"), reviewerId)
            );
        };
        Page<Course> coursePage = courseRepository.findAll(spec, pageable);
        return coursePage.map(CourseVO::fromEntity);
    }
    @Override
    @Transactional(readOnly = true)
    public CourseVO getPublishedVersionByWorkspaceId(Long workspaceId) {
        Optional<Course> publishedVersionOpt = courseRepository.findPublishedVersionByWorkspaceId(workspaceId);
        return publishedVersionOpt.map(CourseVO::fromEntity).orElse(null);
    }
    @Override
    @Transactional(readOnly = true)
    public Page<CourseVO> searchCourses(CourseSearchDTO searchDTO, Pageable pageable) {
        log.info("搜索课程，参数: {}", searchDTO);
        Specification<Course> spec = (root, query, cb) -> {
            List<Predicate> predicates = new ArrayList<>();
            // 只搜索已发布状态的课程
            predicates.add(cb.equal(root.get("status"), CourseStatus.PUBLISHED.getValue()));
            predicates.add(cb.equal(root.get("isPublishedVersion"), true));
            // 关键字搜索（标题和描述）
            if (searchDTO.getKeyword() != null && !searchDTO.getKeyword().isEmpty()) {
                String likePattern = "%" + searchDTO.getKeyword() + "%";
                predicates.add(cb.or(
                    cb.like(root.get("title"), likePattern),
                    cb.like(root.get("description"), likePattern)
                ));
            }
            // 分类筛选
            if (searchDTO.getCategoryId() != null) {
                predicates.add(cb.equal(root.get("category").get("id"), searchDTO.getCategoryId()));
            }
            // 标签筛选
            if (searchDTO.getTagIds() != null && !searchDTO.getTagIds().isEmpty()) {
                // 创建一个子查询，找到同时包含所有指定标签的课程
                Join<Course, Tag> tagJoin = root.join("tags", JoinType.INNER);
                predicates.add(tagJoin.get("id").in(searchDTO.getTagIds()));
            }
            // 难度筛选
            if (searchDTO.getDifficulty() != null) {
                predicates.add(cb.equal(root.get("difficulty"), searchDTO.getDifficulty()));
            }
            // 价格范围筛选
            if (searchDTO.getMinPrice() != null) {
                predicates.add(cb.greaterThanOrEqualTo(root.get("price"), searchDTO.getMinPrice()));
            }
            if (searchDTO.getMaxPrice() != null) {
                predicates.add(cb.lessThanOrEqualTo(root.get("price"), searchDTO.getMaxPrice()));
            }
            // 付费类型筛选
            if (searchDTO.getPaymentType() != null) {
                predicates.add(cb.equal(root.get("paymentType"), searchDTO.getPaymentType()));
            }
            // 机构筛选
            if (searchDTO.getInstitutionId() != null) {
                predicates.add(cb.equal(root.get("institution").get("id"), searchDTO.getInstitutionId()));
            }
            return cb.and(predicates.toArray(new Predicate[0]));
        };
        Page<Course> coursePage = courseRepository.findAll(spec, pageable);
        log.info("搜索结果: 共{}条记录", coursePage.getTotalElements());
        // 转换为VO
        return coursePage.map(CourseVO::fromEntity);
    }
    @Override
    @Transactional(readOnly = true)
    public List<CourseVO> getHotCourses(int limit) {
        log.info("获取热门课程，数量限制: {}", limit);
        Pageable pageable = PageRequest.of(0, limit);
        List<Course> courses = courseRepository.findHotCourses(
            CourseStatus.PUBLISHED.getValue(),
            true,
            pageable
        );
        log.info("获取到{}门热门课程", courses.size());
        return courses.stream()
            .map(CourseVO::fromEntity)
            .collect(Collectors.toList());
    }
    @Override
    @Transactional(readOnly = true)
    public List<CourseVO> getLatestCourses(int limit) {
        log.info("获取最新课程，数量限制: {}", limit);
        Pageable pageable = PageRequest.of(0, limit);
        List<Course> courses = courseRepository.findLatestCourses(
            CourseStatus.PUBLISHED.getValue(),
            true,
            pageable
        );
        log.info("获取到{}门最新课程", courses.size());
        return courses.stream()
            .map(CourseVO::fromEntity)
            .collect(Collectors.toList());
    }
    /**
     * 获取课程的公开预览结构（免费课程或付费课程的试学部分）
     * @param id 课程ID
     * @param isUserEnrolled 用户是否已购买/注册该课程
     * @return 课程结构VO，对于未购买的付费课程，只返回免费试学章节的内容
     */
    @Override
    @Transactional(readOnly = true)
    public CourseStructureVO getPublicCourseStructure(Long id, boolean isUserEnrolled) {
        // 获取课程实体（带关联对象）
        Course course = courseRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID：" + id));
        // 检查课程是否已发布
        if (!course.getIsPublishedVersion() || !course.getStatusEnum().equals(CourseStatus.PUBLISHED)) {
            throw new BusinessException(403, "该课程尚未发布，无法预览");
        }
        // 创建基础的课程结构VO
        CourseStructureVO structureVO = CourseStructureVO.fromEntity(course);
        // 如果是免费课程或用户已注册/购买课程，直接返回完整结构
        if (CoursePaymentType.FREE.getValue().equals(course.getPaymentType()) || isUserEnrolled) {
            return structureVO;
        }
        // 对于付费课程且用户未注册/购买，处理章节和小节的展示
        structureVO.getChapters().forEach(chapterVO -> {
            if (ChapterAccessType.PAID_ONLY.getValue().equals(chapterVO.getAccessType())) {
                // 对于付费章节，保留小节但清除敏感资源信息
                chapterVO.getSections().forEach(sectionVO -> {
                    // 清除媒体资源ID
                    sectionVO.setMediaId(null);
                    // 清除题目组ID
                    sectionVO.setQuestionGroupId(null);
                    // 清除资源类型鉴别器，避免前端误判有资源
                    sectionVO.setResourceTypeDiscriminator("NONE");
                    // 其他可能的资源相关字段也需要清除
                    sectionVO.setMediaResourceType(null);
                    // 添加付费标记或提示信息（可选）
                    if (sectionVO.getDescription() == null) {
                        sectionVO.setDescription("这是付费内容，购买课程后可查看");
                    } else if (!sectionVO.getDescription().contains("付费内容")) {
                        sectionVO.setDescription(sectionVO.getDescription() + " (付费内容，购买后可查看)");
                    }
                });
            }
            // 免费试学章节保持不变
        });
        return structureVO;
    }
    @Override
    @Transactional(readOnly = true)
    public List<CourseVO> getTopRatedCourses(int limit) {
        log.info("获取高评分课程，数量限制: {}", limit);
        Pageable pageable = PageRequest.of(0, limit);
        List<Course> courses = courseRepository.findTopRatedCourses(
            CourseStatus.PUBLISHED.getValue(),
            true,
            5, // 最小评分数量
            pageable
        );
        log.info("获取到{}门高评分课程", courses.size());
        return courses.stream()
            .map(CourseVO::fromEntity)
            .collect(Collectors.toList());
    }
    @Override
    @Transactional
    public void incrementStudentCount(Long courseId) {
        Course course = courseRepository.findById(courseId)
            .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID: " + courseId));
        // 只能更新发布版本的统计数据
        if (!Boolean.TRUE.equals(course.getIsPublishedVersion())) {
            throw new BusinessException(400, "只能更新发布版本的课程统计数据");
        }
        // 初始化或增加学习人数
        if (course.getStudentCount() == null) {
            course.setStudentCount(1);
        } else {
            course.setStudentCount(course.getStudentCount() + 1);
        }
        courseRepository.save(course);
        log.info("课程{}学习人数增加，当前学习人数: {}", courseId, course.getStudentCount());
    }
    @Override
    @Transactional
    public void updateCourseRating(Long courseId, Integer newRating) {
        if (newRating == null || newRating < 1 || newRating > 5) {
            throw new BusinessException(400, "评分必须在1-5之间");
        }
        Course course = courseRepository.findById(courseId)
            .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID: " + courseId));
        // 只能更新发布版本的统计数据
        if (!Boolean.TRUE.equals(course.getIsPublishedVersion())) {
            throw new BusinessException(400, "只能更新发布版本的课程统计数据");
        }
        Float currentAvg = course.getAverageRating();
        Integer currentCount = course.getRatingCount();
        if (currentAvg == null || currentCount == null || currentCount == 0) {
            course.setAverageRating(newRating.floatValue());
            course.setRatingCount(1);
        } else {
            // 使用加权平均公式计算新的平均评分
            Float newAvg = (currentAvg * currentCount + newRating) / (currentCount + 1);
            course.setAverageRating(newAvg);
            course.setRatingCount(currentCount + 1);
        }
        courseRepository.save(course);
        log.info("课程{}评分更新，当前评分: {}，评分人数: {}", 
             courseId, course.getAverageRating(), course.getRatingCount());
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/EmailServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.service.EmailService;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import java.util.Random;
import java.util.concurrent.TimeUnit;
/**
 * 邮件服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class EmailServiceImpl implements EmailService {
    private final JavaMailSender mailSender;
    private final StringRedisTemplate redisTemplate;
    private final TemplateEngine templateEngine;
    @Value("${spring.mail.username}")
    private String emailFrom;
    /**
     * Redis中验证码的key前缀
     */
    @Setter
    private String verificationCodePrefix = "email:verification:";
    /**
     * 验证码有效期（分钟）
     */
    @Setter
    private long verificationCodeExpiration = 5;
    @Override
    public void sendVerificationCode(String to, String code) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true);
            helper.setFrom(emailFrom);
            helper.setTo(to);
            helper.setSubject("在线课程平台 - 邮箱验证码");
            // 使用Thymeleaf模板引擎渲染邮件内容
            Context context = new Context();
            context.setVariable("code", code);
            context.setVariable("expirationMinutes", verificationCodeExpiration);
            String content = templateEngine.process("email/verification-code", context);
            helper.setText(content, true);
            mailSender.send(message);
            log.info("验证码邮件发送成功: {}", to);
        } catch (MessagingException e) {
            log.error("验证码邮件发送失败: {}", to, e);
            throw new RuntimeException("验证码邮件发送失败", e);
        }
    }
    @Override
    public void sendEmailUpdateCode(String to, String code) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true);
            helper.setFrom(emailFrom);
            helper.setTo(to);
            helper.setSubject("在线课程平台 - 邮箱更新验证码");
            // 使用Thymeleaf模板引擎渲染邮件内容
            Context context = new Context();
            context.setVariable("code", code);
            context.setVariable("expirationMinutes", verificationCodeExpiration);
            String content = templateEngine.process("email/email-update-code", context);
            helper.setText(content, true);
            mailSender.send(message);
            log.info("邮箱更新验证码邮件发送成功: {}", to);
        } catch (MessagingException e) {
            log.error("邮箱更新验证码邮件发送失败: {}", to, e);
            throw new RuntimeException("邮箱更新验证码邮件发送失败", e);
        }
    }
    @Override
    public String generateVerificationCode() {
        Random random = new Random();
        // 生成6位数字验证码
        return String.format("%06d", random.nextInt(1000000));
    }
    @Override
    public void saveVerificationCode(String email, String code) {
        String key = verificationCodePrefix + email;
        redisTemplate.opsForValue().set(key, code, verificationCodeExpiration, TimeUnit.MINUTES);
        log.info("验证码已保存到Redis: {}", email);
    }
    @Override
    public boolean validateVerificationCode(String email, String code) {
        String key = verificationCodePrefix + email;
        String savedCode = redisTemplate.opsForValue().get(key);
        if (savedCode != null && savedCode.equals(code)) {
            // 验证成功后删除验证码
            redisTemplate.delete(key);
            return true;
        }
        return false;
    }
    @Override
    public void sendApplicationConfirmationEmail(String to, String applicationId, String institutionName) {
        Context context = new Context();
        context.setVariable("applicationId", applicationId);
        context.setVariable("institutionName", institutionName);
        String content = templateEngine.process("email/application-confirmation", context);
        sendHtmlMail(to, "机构入驻申请确认", content);
    }
    @Override
    public void sendApplicationApprovedEmail(String to, String institutionName, String registerCode) {
        Context context = new Context();
        context.setVariable("registerCode", registerCode);
        context.setVariable("institutionName", institutionName);
        String content = templateEngine.process("email/application-approved", context);
        sendHtmlMail(to, "机构入驻申请已通过", content);
    }
    @Override
    public void sendApplicationRejectedEmail(String to, String institutionName, String reason) {
        Context context = new Context();
        context.setVariable("institutionName", institutionName);
        context.setVariable("reason", reason);
        String content = templateEngine.process("email/application-rejected", context);
        sendHtmlMail(to, "机构入驻申请未通过", content);
    }
    /**
     * 发送HTML格式邮件
     *
     * @param to 收件人
     * @param subject 主题
     * @param content HTML内容
     */
    private void sendHtmlMail(String to, String subject, String content) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true);
            helper.setFrom(emailFrom);
            helper.setTo(to);
            helper.setSubject(subject);
            helper.setText(content, true);
            mailSender.send(message);
            log.info("HTML邮件发送成功: {}, 主题: {}", to, subject);
        } catch (MessagingException e) {
            log.error("HTML邮件发送失败: {}, 主题: {}", to, subject, e);
            throw new RuntimeException("HTML邮件发送失败", e);
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/InstitutionAuthServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.InstitutionRegisterDTO;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.RoleEnum;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.EmailService;
import com.zhangziqi.online_course_mine.service.InstitutionAuthService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.HashSet;
/**
 * 机构用户注册服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class InstitutionAuthServiceImpl implements InstitutionAuthService {
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final InstitutionRepository institutionRepository;
    private final PasswordEncoder passwordEncoder;
    private final EmailService emailService;
    @Override
    @Transactional
    public void registerWithInstitutionCode(InstitutionRegisterDTO registerDTO) {
        log.info("开始处理机构用户注册流程: username={}, email={}, institutionCode={}", 
                registerDTO.getUsername(), registerDTO.getEmail(), registerDTO.getInstitutionCode());
        // 验证机构注册码
        log.debug("正在验证机构注册码: {}", registerDTO.getInstitutionCode());
        Institution institution = institutionRepository.findByRegisterCode(registerDTO.getInstitutionCode())
                .orElseThrow(() -> {
                    log.warn("机构注册码无效: {}", registerDTO.getInstitutionCode());
                    return new BusinessException("机构注册码无效");
                });
        log.info("机构注册码验证成功: code={}, institutionId={}, institutionName={}", 
                registerDTO.getInstitutionCode(), institution.getId(), institution.getName());
        if (institution.getStatus() != 1) {
            log.warn("机构状态异常，无法注册: institutionId={}, status={}", institution.getId(), institution.getStatus());
            throw new BusinessException("机构状态异常，无法注册");
        }
        // 检查用户名是否存在
        log.debug("检查用户名是否已存在: {}", registerDTO.getUsername());
        boolean usernameExists = userRepository.existsByUsername(registerDTO.getUsername());
        if (usernameExists) {
            log.warn("用户名已存在: {}", registerDTO.getUsername());
            throw new BusinessException("用户名已存在");
        }
        // 检查邮箱是否存在
        log.debug("检查邮箱是否已被注册: {}", registerDTO.getEmail());
        boolean emailExists = userRepository.existsByEmail(registerDTO.getEmail());
        if (emailExists) {
            log.warn("邮箱已被注册: {}", registerDTO.getEmail());
            throw new BusinessException("邮箱已被注册");
        }
        log.info("用户验证通过，开始创建用户: username={}, email={}, institutionId={}", 
                registerDTO.getUsername(), registerDTO.getEmail(), institution.getId());
        // 创建用户
        User user = User.builder()
                .username(registerDTO.getUsername())
                .password(passwordEncoder.encode(registerDTO.getPassword()))
                .email(registerDTO.getEmail())
                .phone(registerDTO.getPhone())
                .institutionId(institution.getId()) // 设置机构ID
                .status(1) // 正常状态
                .roles(new HashSet<>())
                .build();
        // 获取角色
        log.debug("正在获取机构角色: {}", RoleEnum.INSTITUTION.getCode());
        Role institutionRole = roleRepository.findByCode(RoleEnum.INSTITUTION.getCode())
                .orElseThrow(() -> {
                    log.error("机构角色不存在: {}", RoleEnum.INSTITUTION.getCode());
                    return new BusinessException("机构角色不存在");
                });
        // 设置角色 - 只分配机构角色，不再额外分配USER角色
        user.getRoles().add(institutionRole);
        log.debug("正在保存用户信息...");
        try {
            User savedUser = userRepository.save(user);
            log.info("机构用户注册成功: userId={}, username={}, institutionId={}", 
                    savedUser.getId(), savedUser.getUsername(), savedUser.getInstitutionId());
        } catch (Exception e) {
            log.error("保存用户信息失败: {}", e.getMessage(), e);
            throw new BusinessException("注册失败: " + e.getMessage());
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/InstitutionServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.converter.InstitutionApplicationConverter;
import com.zhangziqi.online_course_mine.model.converter.InstitutionConverter;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplyDTO;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplicationQueryDTO;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.InstitutionApplication;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import com.zhangziqi.online_course_mine.model.vo.InstitutionApplicationVO;
import com.zhangziqi.online_course_mine.model.vo.InstitutionVO;
import com.zhangziqi.online_course_mine.repository.InstitutionApplicationRepository;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.EmailService;
import com.zhangziqi.online_course_mine.service.InstitutionService;
import com.zhangziqi.online_course_mine.service.StorageQuotaService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.RandomStringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.time.LocalDateTime;
/**
 * 机构服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class InstitutionServiceImpl implements InstitutionService {
    private final InstitutionRepository institutionRepository;
    private final InstitutionApplicationRepository applicationRepository;
    private final UserRepository userRepository;
    private final EmailService emailService;
    private final StorageQuotaService storageQuotaService;
    @Override
    @Transactional
    public String applyInstitution(InstitutionApplyDTO applyDTO) {
        log.info("申请创建机构: {}", applyDTO.getName());
        // 生成申请ID
        String applicationId = generateApplicationId();
        // 创建申请记录
        InstitutionApplication application = InstitutionApplication.builder()
                .applicationId(applicationId)
                .name(applyDTO.getName())
                .logo(applyDTO.getLogo())
                .description(applyDTO.getDescription())
                .contactPerson(applyDTO.getContactPerson())
                .contactPhone(applyDTO.getContactPhone())
                .contactEmail(applyDTO.getContactEmail())
                .address(applyDTO.getAddress())
                .status(0) // 待审核
                .build();
        applicationRepository.save(application);
        // 发送确认邮件
        emailService.sendApplicationConfirmationEmail(
                applyDTO.getContactEmail(),
                applicationId,
                applyDTO.getName()
        );
        return applicationId;
    }
    @Override
    public InstitutionApplicationVO getApplicationStatus(String applicationId, String email) {
        log.info("查询申请状态: applicationId={}, email={}", applicationId, email);
        InstitutionApplication application = applicationRepository
                .findByApplicationIdAndContactEmail(applicationId, email)
                .orElseThrow(() -> new BusinessException("申请不存在或邮箱不匹配"));
        return InstitutionApplicationConverter.toVO(application);
    }
    @Override
    public Page<InstitutionApplicationVO> getApplications(InstitutionApplicationQueryDTO queryDTO) {
        log.info("分页查询机构申请: {}", queryDTO);
        Pageable pageable = PageRequest.of(
                queryDTO.getPageNum() - 1,
                queryDTO.getPageSize(),
                Sort.by(Sort.Direction.DESC, "createdAt")
        );
        Page<InstitutionApplication> page;
        if (queryDTO.getStatus() != null) {
            page = applicationRepository.findByStatus(queryDTO.getStatus(), pageable);
        } else {
            page = applicationRepository.findAll(pageable);
        }
        return page.map(InstitutionApplicationConverter::toVO);
    }
    @Override
    public InstitutionApplicationVO getApplicationDetail(Long id) {
        log.info("查询申请详情: {}", id);
        InstitutionApplication application = applicationRepository.findById(id)
                .orElseThrow(() -> new BusinessException("申请不存在"));
        return InstitutionApplicationConverter.toVO(application);
    }
    @Override
    @Transactional
    public InstitutionVO approveApplication(Long id, String reviewerUsername) {
        log.info("审核通过申请: id={}, reviewer={}", id, reviewerUsername);
        // 查找申请
        InstitutionApplication application = applicationRepository.findById(id)
                .orElseThrow(() -> new BusinessException("申请不存在"));
        if (application.getStatus() != 0) {
            throw new BusinessException("申请状态不是待审核");
        }
        // 查找审核人
        User reviewer = userRepository.findByUsername(reviewerUsername)
                .orElseThrow(() -> new BusinessException("审核人不存在"));
        // 生成唯一注册码
        String registerCode = generateInstitutionCode();
        // 创建机构
        Institution institution = Institution.builder()
                .name(application.getName())
                .logo(application.getLogo())
                .description(application.getDescription())
                .contactPerson(application.getContactPerson())
                .contactPhone(application.getContactPhone())
                .contactEmail(application.getContactEmail())
                .address(application.getAddress())
                .registerCode(registerCode)
                .status(1) // 正常状态
                .build();
        institution = institutionRepository.save(institution);
        // 初始化存储配额
        initializeStorageQuotas(institution.getId());
        // 更新申请状态
        application.setStatus(1); // 已通过
        application.setReviewerId(reviewer.getId());
        application.setReviewedAt(LocalDateTime.now());
        application.setInstitutionId(institution.getId());
        applicationRepository.save(application);
        // 发送通知邮件
        emailService.sendApplicationApprovedEmail(
                application.getContactEmail(),
                institution.getName(),
                registerCode
        );
        return InstitutionConverter.toVO(institution);
    }
    /**
     * 初始化机构的存储配额
     *
     * @param institutionId 机构ID
     */
    private void initializeStorageQuotas(Long institutionId) {
        // 设置视频配额（5GB）
        storageQuotaService.setQuota(
                institutionId,
                QuotaType.VIDEO,
                5L * 1024 * 1024 * 1024,
                null
        );
        // 设置文档配额（2GB）
        storageQuotaService.setQuota(
                institutionId,
                QuotaType.DOCUMENT,
                2L * 1024 * 1024 * 1024,
                null
        );
        // 设置总配额（10GB）
        storageQuotaService.setQuota(
                institutionId,
                QuotaType.TOTAL,
                10L * 1024 * 1024 * 1024,
                null
        );
        log.info("已为机构{}初始化存储配额", institutionId);
    }
    @Override
    @Transactional
    public void rejectApplication(Long id, String reason, String reviewerUsername) {
        log.info("审核拒绝申请: id={}, reviewer={}, reason={}", id, reviewerUsername, reason);
        // 查找申请
        InstitutionApplication application = applicationRepository.findById(id)
                .orElseThrow(() -> new BusinessException("申请不存在"));
        if (application.getStatus() != 0) {
            throw new BusinessException("申请状态不是待审核");
        }
        // 查找审核人
        User reviewer = userRepository.findByUsername(reviewerUsername)
                .orElseThrow(() -> new BusinessException("审核人不存在"));
        // 更新申请状态
        application.setStatus(2); // 已拒绝
        application.setReviewerId(reviewer.getId());
        application.setReviewedAt(LocalDateTime.now());
        application.setReviewComment(reason);
        applicationRepository.save(application);
        // 发送通知邮件
        emailService.sendApplicationRejectedEmail(
                application.getContactEmail(),
                application.getName(),
                reason
        );
    }
    @Override
    public String getInstitutionRegisterCode(String username) {
        log.info("获取机构注册码: {}", username);
        // 查找用户
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        if (user.getInstitutionId() == null) {
            throw new BusinessException("用户未关联机构");
        }
        // 查找机构
        Institution institution = institutionRepository.findById(user.getInstitutionId())
                .orElseThrow(() -> new BusinessException("机构不存在"));
        return institution.getRegisterCode();
    }
    // 生成唯一的机构注册码
    private String generateInstitutionCode() {
        String code;
        boolean exists;
        do {
            // 生成8位随机字母数字组合
            code = RandomStringUtils.randomAlphanumeric(8).toUpperCase();
            exists = institutionRepository.existsByRegisterCode(code);
        } while (exists);
        return code;
    }
    // 生成申请ID
    private String generateApplicationId() {
        return "APP" + System.currentTimeMillis() % 10000000 + 
               RandomStringUtils.randomNumeric(4);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/MediaServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.media.*;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Media;
import com.zhangziqi.online_course_mine.model.enums.MediaStatus;
import com.zhangziqi.online_course_mine.model.enums.MediaType;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import com.zhangziqi.online_course_mine.model.vo.MediaVO;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.MediaRepository;
import com.zhangziqi.online_course_mine.service.MediaService;
import com.zhangziqi.online_course_mine.service.StorageQuotaService;
import com.zhangziqi.online_course_mine.service.MinioService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import software.amazon.awssdk.services.s3.model.CompleteMultipartUploadResponse;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;
/**
 * 媒体服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class MediaServiceImpl implements MediaService {
    private final MediaRepository mediaRepository;
    private final InstitutionRepository institutionRepository;
    private final StorageQuotaService storageQuotaService;
    private final S3MultipartUploadManager s3UploadManager;
    private final UploadStatusService uploadStatusService;
    private final MinioService minioService;
    // 默认分片大小：10MB
    private static final long DEFAULT_CHUNK_SIZE = 10 * 1024 * 1024;
    @Override
    @Transactional
    public UploadInitiationVO initiateUpload(MediaUploadInitDTO dto, Long institutionId, Long uploaderId) {
        // 验证机构是否存在
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        // 验证文件类型
        MediaType mediaType = determineMediaType(dto.getContentType());
        // 验证配额并更新使用的配额
        QuotaType quotaType = mediaTypeToQuotaType(mediaType);
        boolean hasQuota = storageQuotaService.hasEnoughQuota(institutionId, quotaType, dto.getFileSize());
        if (!hasQuota) {
            throw new BusinessException(400, "存储配额不足，无法上传文件");
        } else {
            // 预分配配额
            storageQuotaService.updateUsedQuota(institutionId, quotaType, dto.getFileSize());
        }
        try {
            // 生成对象键
            String objectKey = generateObjectKey(institutionId, dto.getFilename(), mediaType);
            // 创建Media记录
            Media media = new Media();
            media.setTitle(dto.getTitle());
            media.setDescription(dto.getDescription());
            media.setType(mediaType);
            media.setSize(dto.getFileSize());
            media.setOriginalFilename(dto.getFilename());
            media.setStoragePath(objectKey);
            media.setStatus(MediaStatus.UPLOADING);
            media.setInstitution(institution);
            media.setUploaderId(uploaderId);
            media.setUploadTime(LocalDateTime.now());
            media.setLastAccessTime(LocalDateTime.now());
            // 保存Media记录
            Media savedMedia = mediaRepository.save(media);
            // 确定分片大小和分片数量
            long chunkSize = dto.getChunkSize() != null ? dto.getChunkSize() : DEFAULT_CHUNK_SIZE;
            int totalParts = calculateTotalParts(dto.getFileSize(), chunkSize);
            // 初始化S3分片上传
            String uploadId = s3UploadManager.initiateMultipartUpload(objectKey, dto.getContentType());
            // 生成所有分片的预签名URL
            List<PresignedUrlInfo> presignedUrls = s3UploadManager.batchGeneratePresignedUrls(
                    uploadId, objectKey, 1, totalParts);
            // 创建并保存上传状态
            UploadStatusInfo statusInfo = UploadStatusInfo.builder()
                    .mediaId(savedMedia.getId())
                    .institutionId(institutionId)
                    .uploaderId(uploaderId)
                    .uploadId(uploadId)
                    .objectKey(objectKey)
                    .filename(dto.getFilename())
                    .contentType(dto.getContentType())
                    .fileSize(dto.getFileSize())
                    .status(MediaStatus.UPLOADING)
                    .totalParts(totalParts)
                    .completedParts(new ArrayList<>())
                    .initiatedAt(LocalDateTime.now())
                    .lastUpdatedAt(LocalDateTime.now())
                    .build();
            uploadStatusService.saveUploadStatus(statusInfo);
            // 构建返回结果
            return UploadInitiationVO.builder()
                    .mediaId(savedMedia.getId())
                    .uploadId(uploadId)
                    .totalParts(totalParts)
                    .chunkSize(chunkSize)
                    .presignedUrls(presignedUrls)
                    .build();
        } catch (Exception e) {
            // 发生异常时释放预分配的配额
            storageQuotaService.updateUsedQuota(institutionId, quotaType, -dto.getFileSize());
            log.error("初始化上传失败", e);
            throw new BusinessException(500, "初始化上传失败: " + e.getMessage());
        }
    }
    @Override
    @Transactional
    public MediaVO completeUpload(Long mediaId, Long institutionId, CompleteUploadDTO dto) {
        log.info("开始完成上传 - mediaId: {}, institutionId: {}", mediaId, institutionId);
        // 验证Media记录
        Media media = getMediaForInstitution(mediaId, institutionId);
        log.info("已验证媒体记录 - mediaId: {}, status: {}", mediaId, media.getStatus());
        try {
            log.info("准备完成S3分片上传 - mediaId: {}, uploadId: {}, objectKey: {}, completedParts: {}", 
                    mediaId, dto.getUploadId(), media.getStoragePath(), dto.getCompletedParts().size());
            // 打印原始分片信息
            log.info("原始分片信息: {}", dto.getCompletedParts());
            // 转换分片信息类型并确保 ETag 格式正确
            List<UploadStatusInfo.PartInfo> s3Parts = dto.getCompletedParts().stream()
                    .map(part -> {
                        // 确保 ETag 有双引号
                        String eTag = part.getETag();
                        log.info("原始ETag值 - partNumber: {}, eTag: '{}'", part.getPartNumber(), eTag);
                        if (eTag != null && !eTag.isEmpty()) {
                            // 移除已有的引号（如果有）
                            eTag = eTag.replace("\"", "");
                            // 确保 ETag 有双引号
                            if (!eTag.startsWith("\"")) {
                                eTag = "\"" + eTag;
                            }
                            if (!eTag.endsWith("\"")) {
                                eTag = eTag + "\"";
                            }
                        }
                        log.info("处理后的ETag值 - partNumber: {}, eTag: '{}'", part.getPartNumber(), eTag);
                        return new UploadStatusInfo.PartInfo(part.getPartNumber(), eTag);
                    })
                    .collect(Collectors.toList());
            // 打印处理后的分片信息
            log.info("处理后的分片信息: {}", s3Parts);
            // 添加更详细的日志
            s3Parts.forEach(part -> {
                log.info("准备合并的分片 - partNumber: {}, eTag: '{}', eTag长度: {}", 
                        part.getPartNumber(), 
                        part.getETag(),
                        part.getETag() != null ? part.getETag().length() : 0);
            });
            // 检查是否所有分片都有有效的ETag
            boolean allPartsHaveETag = s3Parts.stream()
                    .allMatch(part -> part.getETag() != null && !part.getETag().isEmpty());
            log.info("是否所有分片都有有效的ETag: {}", allPartsHaveETag);
            // 如果存在ETag为null的分片，抛出更具体的错误
            if (!allPartsHaveETag) {
                log.error("存在ETag为null的分片，无法完成合并");
                throw new BusinessException(400, "无法完成上传：部分分片的ETag为空。请检查前端上传逻辑，确保正确保存每个分片的ETag值。");
            }
            // 完成分片上传
            CompleteMultipartUploadResponse response = s3UploadManager.completeMultipartUpload(
                    dto.getUploadId(), media.getStoragePath(), s3Parts);
            log.info("S3分片上传完成 - mediaId: {}, response: {}", mediaId, response);
            // 清理上传状态（如果存在）
            try {
                uploadStatusService.deleteUploadStatus(mediaId);
            } catch (Exception e) {
                log.warn("清理上传状态失败，可能不存在 - mediaId: {}", mediaId);
                // 忽略此错误，继续处理
            }
            // 更新Media状态
            media.setStatus(MediaStatus.COMPLETED);
            media.setLastAccessTime(LocalDateTime.now());
            Media updatedMedia = mediaRepository.save(media);
            log.info("媒体状态已更新为已完成 - mediaId: {}", mediaId);
            // 返回媒体信息
            return mapToMediaVO(updatedMedia, null);
        } catch (Exception e) {
            log.error("完成上传失败 - mediaId: {}, error: {}", mediaId, e.getMessage(), e);
            // 更新Media状态为失败
            media.setStatus(MediaStatus.FAILED);
            mediaRepository.save(media);
            throw new BusinessException(500, "完成上传失败: " + e.getMessage());
        }
    }
    @Override
    @Transactional
    public void cancelUpload(Long mediaId, Long institutionId) {
        // 验证Media记录
        Media media = getMediaForInstitution(mediaId, institutionId);
        try {
            // 获取上传状态
            UploadStatusInfo statusInfo = uploadStatusService.getUploadStatusOrNull(mediaId);
            if (statusInfo != null) {
                // 取消S3分片上传
                s3UploadManager.abortMultipartUpload(
                        statusInfo.getUploadId(), statusInfo.getObjectKey());
                // 删除上传状态
                uploadStatusService.deleteUploadStatus(mediaId);
            }
            // 计算要释放的配额
            MediaType mediaType = media.getType();
            QuotaType quotaType = mediaTypeToQuotaType(mediaType);
            Long fileSize = media.getSize();
            // 释放预分配的配额
            storageQuotaService.updateUsedQuota(institutionId, quotaType, -fileSize);
            // 删除Media记录
            mediaRepository.delete(media);
        } catch (Exception e) {
            log.error("取消上传失败", e);
            throw new BusinessException(500, "取消上传失败: " + e.getMessage());
        }
    }
    @Override
    @Transactional(readOnly = true)
    public String getMediaAccessUrl(Long mediaId, Long institutionId, Long expirationMinutes) {
        // 验证Media记录
        Media media = getMediaForInstitution(mediaId, institutionId);
        // 检查媒体状态
        if (media.getStatus() != MediaStatus.COMPLETED) {
            throw new BusinessException(400, "媒体文件未上传完成，无法获取访问URL");
        }
        // 生成预签名URL
        String url = s3UploadManager.generatePresignedGetUrl(
                media.getStoragePath(), expirationMinutes);
        // 更新最后访问时间
        media.setLastAccessTime(LocalDateTime.now());
        mediaRepository.save(media);
        return url;
    }
    @Override
    @Transactional(readOnly = true)
    public MediaVO getMediaInfo(Long mediaId, Long institutionId) {
        log.info("开始获取媒体信息, mediaId: {}, institutionId: {}", mediaId, institutionId);
        // 验证Media记录
        Media media = getMediaForInstitution(mediaId, institutionId);
        // 转换为VO
        MediaVO mediaVO = mapToMediaVO(media, null);
        log.info("成功获取媒体信息: {}", mediaVO);
        return mediaVO;
    }
    @Override
    @Transactional(readOnly = true)
    public Page<MediaVO> getMediaList(Long institutionId, Pageable pageable) {
        // 验证机构是否存在
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        // 查询机构的媒体列表
        Page<Media> mediaPage = mediaRepository.findByInstitution(institution, pageable);
        // 转换为VO
        return mediaPage.map(media -> mapToMediaVO(media, null));
    }
    @Override
    @Transactional
    public void deleteMedia(Long mediaId, Long institutionId) {
        // 获取媒体信息，验证权限
        Media media = getMediaForInstitution(mediaId, institutionId);
        // 从 Minio 存储中删除文件
        try {
            boolean deleted = minioService.deleteFile(media.getStoragePath());
            if (!deleted) {
                log.warn("MinIO中未找到要删除的文件, objectKey: {}", media.getStoragePath());
            }
            // 归还存储配额
            QuotaType quotaType = mediaTypeToQuotaType(media.getType());
            storageQuotaService.updateUsedQuota(institutionId, quotaType, -media.getSize());
            // 从数据库中删除记录
            mediaRepository.delete(media);
            log.info("成功删除媒体文件, mediaId: {}, institutionId: {}", mediaId, institutionId);
        } catch (Exception e) {
            log.error("删除媒体文件失败, mediaId: {}, institutionId: {}, error: {}", mediaId, institutionId, e.getMessage());
            throw new BusinessException("删除媒体文件失败: " + e.getMessage());
        }
    }
    /**
     * 获取机构的Media记录
     * 
     * @param mediaId 媒体ID
     * @param institutionId 机构ID
     * @return Media记录
     */
    private Media getMediaForInstitution(Long mediaId, Long institutionId) {
        log.info("开始验证媒体所属机构, mediaId: {}, institutionId: {}", mediaId, institutionId);
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> {
                    log.error("机构不存在, institutionId: {}", institutionId);
                    return new ResourceNotFoundException("机构不存在，ID: " + institutionId);
                });
        log.info("成功找到机构: {}", institution.getName());
        return mediaRepository.findByIdAndInstitution(mediaId, institution)
                .orElseThrow(() -> {
                    log.error("媒体文件不存在或不属于该机构, mediaId: {}, institutionId: {}", mediaId, institutionId);
                    return new ResourceNotFoundException("媒体文件不存在或不属于该机构，ID: " + mediaId);
                });
    }
    /**
     * 根据内容类型确定媒体类型
     * 
     * @param contentType 内容类型
     * @return 媒体类型
     */
    private MediaType determineMediaType(String contentType) {
        if (contentType.startsWith("video/")) {
            return MediaType.VIDEO;
        } else if (contentType.startsWith("audio/")) {
            return MediaType.AUDIO;
        } else {
            return MediaType.DOCUMENT;
        }
    }
    /**
     * 媒体类型转换为配额类型
     * 
     * @param mediaType 媒体类型
     * @return 配额类型
     */
    private QuotaType mediaTypeToQuotaType(MediaType mediaType) {
        if (mediaType == MediaType.VIDEO) {
            return QuotaType.VIDEO;
        } else {
            return QuotaType.DOCUMENT;
        }
    }
    /**
     * 生成对象键
     * 
     * @param institutionId 机构ID
     * @param originalFilename 原始文件名
     * @param mediaType 媒体类型
     * @return 对象键
     */
    private String generateObjectKey(Long institutionId, String originalFilename, MediaType mediaType) {
        String type = mediaType.name().toLowerCase();
        String uuid = UUID.randomUUID().toString();
        return String.format("%s/%s/%s/%s", type, institutionId, uuid, originalFilename);
    }
    /**
     * 计算总分片数
     * 
     * @param fileSize 文件大小
     * @param chunkSize 分片大小
     * @return 总分片数
     */
    private int calculateTotalParts(Long fileSize, Long chunkSize) {
        int totalParts = (int) (fileSize / chunkSize);
        if (fileSize % chunkSize != 0) {
            totalParts++;
        }
        return totalParts;
    }
    /**
     * 构建MediaVO
     * 
     * @param media 媒体实体
     * @param accessUrl 访问URL（可选）
     * @return 媒体VO
     */
    private MediaVO mapToMediaVO(Media media, String accessUrl) {
        return MediaVO.builder()
                .id(media.getId())
                .title(media.getTitle())
                .description(media.getDescription())
                .type(media.getType() != null ? media.getType().name() : null)
                .size(media.getSize())
                .originalFilename(media.getOriginalFilename())
                .status(media.getStatus() != null ? media.getStatus().name() : null)
                .institutionId(media.getInstitution() != null ? media.getInstitution().getId() : null)
                .uploaderId(media.getUploaderId())
                .uploadTime(media.getUploadTime())
                .lastAccessTime(media.getLastAccessTime())
                .accessUrl(accessUrl)
                .build();
    }
    @Override
    @Transactional(readOnly = true)
    public MediaVO getMediaByIdForPreview(Long mediaId) {
        log.info("开始获取媒体信息(预览模式), mediaId: {}", mediaId);
        // 直接通过ID查找媒体，不验证机构
        Media media = mediaRepository.findById(mediaId)
                .orElseThrow(() -> {
                    log.error("媒体资源不存在, mediaId: {}", mediaId);
                    return new ResourceNotFoundException("媒体资源不存在，ID: " + mediaId);
                });
        // 检查媒体状态
        if (media.getStatus() != MediaStatus.COMPLETED) {
            log.warn("媒体文件未上传完成，无法访问, mediaId: {}, status: {}", mediaId, media.getStatus());
            throw new BusinessException(400, "媒体文件未上传完成，无法访问");
        }
        // 生成临时访问URL (默认30分钟)
        String url = s3UploadManager.generatePresignedGetUrl(
                media.getStoragePath(), 30L);
        // 更新最后访问时间
        media.setLastAccessTime(LocalDateTime.now());
        mediaRepository.save(media);
        log.info("成功获取媒体信息(预览模式): {}, URL已生成", media.getTitle());
        // 返回包含URL的VO
        return mapToMediaVO(media, url);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/MinioServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.config.MinioConfig;
import com.zhangziqi.online_course_mine.service.MinioService;
import io.minio.*;
import io.minio.http.Method;
import io.minio.messages.Item;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
@Slf4j
@Service
@RequiredArgsConstructor
public class MinioServiceImpl implements MinioService {
    private final MinioClient minioClient;
    private final MinioConfig minioConfig;
    @Override
    public String uploadFile(String objectName, InputStream inputStream, String contentType) {
        try {
            checkAndCreateBucket();
            // 上传文件
            minioClient.putObject(
                    PutObjectArgs.builder()
                            .bucket(minioConfig.getBucketName())
                            .object(objectName)
                            .stream(inputStream, inputStream.available(), -1)
                            .contentType(contentType)
                            .build()
            );
            return getFileUrl(objectName);
        } catch (Exception e) {
            log.error("文件上传失败: {}", e.getMessage(), e);
            throw new RuntimeException("文件上传失败", e);
        }
    }
    @Override
    public boolean deleteFile(String objectName) {
        try {
            minioClient.removeObject(
                    RemoveObjectArgs.builder()
                            .bucket(minioConfig.getBucketName())
                            .object(objectName)
                            .build()
            );
            return true;
        } catch (Exception e) {
            log.error("文件删除失败: {}", e.getMessage(), e);
            return false;
        }
    }
    @Override
    public String getFileUrl(String objectName) {
        try {
            // 返回直接访问URL，而不是预签名URL
            return minioConfig.getEndpoint() + "/" + minioConfig.getBucketName() + "/" + objectName;
        } catch (Exception e) {
            log.error("获取文件URL失败: {}", e.getMessage(), e);
            throw new RuntimeException("获取文件URL失败", e);
        }
    }
    @Override
    public List<String> listAllFiles() {
        List<String> files = new ArrayList<>();
        try {
            Iterable<Result<Item>> results = minioClient.listObjects(
                    ListObjectsArgs.builder()
                            .bucket(minioConfig.getBucketName())
                            .build()
            );
            for (Result<Item> result : results) {
                Item item = result.get();
                files.add(item.objectName());
            }
            return files;
        } catch (Exception e) {
            log.error("列出所有文件失败: {}", e.getMessage(), e);
            throw new RuntimeException("列出所有文件失败", e);
        }
    }
    @Override
    public void checkAndCreateBucket() {
        try {
            boolean bucketExists = minioClient.bucketExists(
                    BucketExistsArgs.builder()
                            .bucket(minioConfig.getBucketName())
                            .build()
            );
            if (!bucketExists) {
                minioClient.makeBucket(
                        MakeBucketArgs.builder()
                                .bucket(minioConfig.getBucketName())
                                .build()
                );
                log.info("Bucket '{}' 创建成功", minioConfig.getBucketName());
            }
        } catch (Exception e) {
            log.error("检查或创建存储桶失败: {}", e.getMessage(), e);
            throw new RuntimeException("检查或创建存储桶失败", e);
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/OrderServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.alipay.api.AlipayApiException;
import com.alipay.api.AlipayClient;
import com.alipay.api.internal.util.AlipaySignature;
import com.alipay.api.request.AlipayTradePagePayRequest;
import com.alipay.api.request.AlipayTradeRefundRequest;
import com.alipay.api.response.AlipayTradeRefundResponse;
import com.zhangziqi.online_course_mine.config.AlipayConfig;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.order.OrderRefundDTO;
import com.zhangziqi.online_course_mine.model.entity.Course;
import com.zhangziqi.online_course_mine.model.entity.*;
import com.zhangziqi.online_course_mine.model.vo.OrderVO;
import com.zhangziqi.online_course_mine.repository.CourseRepository;
import com.zhangziqi.online_course_mine.repository.OrderRepository;
import com.zhangziqi.online_course_mine.repository.UserCourseRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.OrderService;
import com.zhangziqi.online_course_mine.service.UserCourseService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.Objects;
import java.util.Random;
import com.zhangziqi.online_course_mine.model.enums.OrderStatus;
import com.zhangziqi.online_course_mine.constant.OrderConstants;
/**
 * 订单服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class OrderServiceImpl implements OrderService {
    private final OrderRepository orderRepository;
    private final UserRepository userRepository;
    private final CourseRepository courseRepository;
    private final UserCourseRepository userCourseRepository;
    private final UserCourseService userCourseService;
    private final AlipayClient alipayClient;
    private final AlipayConfig alipayConfig;
    @Override
    @Transactional
    public OrderVO createOrder(Long courseId, Long userId) {
        log.info("创建订单，课程ID：{}，用户ID：{}", courseId, userId);
        // 获取用户
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("用户不存在"));
        // 查询课程
        Course course = courseRepository.findById(courseId)
                .orElseThrow(() -> new ResourceNotFoundException("课程不存在"));
        // 验证课程是否已发布
        if (course.getPublishedVersionId() == null) {
            throw new BusinessException(400, "课程未发布，无法购买");
        }
        // 验证用户是否已购买该课程
        if (userCourseService.hasPurchasedCourse(userId, courseId)) {
            throw new BusinessException(400, "您已购买该课程，请勿重复购买");
        }
        Order order;
        // 根据课程价格处理
        if (course.getPrice().compareTo(BigDecimal.ZERO) == 0) {
            // 免费课程直接创建已支付订单
            order = createFreeCourseOrder(user, course);
            return OrderVO.fromEntity(order);
        } else {
            // 创建付费订单
            order = new Order();
            order.setOrderNo(generateOrderNo());
            order.setUser(user);
            order.setCourse(course);
            order.setInstitution(course.getInstitution());
            order.setAmount(course.getPrice());
            order.setStatus(OrderStatus.CREATED);
            order.setCreatedAt(LocalDateTime.now());
            orderRepository.save(order);
            log.info("付费课程订单创建成功：{}", order.getOrderNo());
            // 生成支付链接
            String payLink = generatePayLink(order);
            OrderVO orderVO = OrderVO.fromEntity(order);
            orderVO.setPayUrl(payLink);
            return orderVO;
        }
    }
    @Override
    @Transactional
    public String handleAlipayReturn(Map<String, String> params) {
        log.info("支付宝同步回调参数: {}", params);
        try {
            // 验证签名
            boolean signVerified = AlipaySignature.rsaCheckV1(
                    params,
                    alipayConfig.getAlipayPublicKey(),
                    "UTF-8",
                    "RSA2"
            );
            if (signVerified) {
                String outTradeNo = params.get("out_trade_no");
                String tradeNo = params.get("trade_no");
                String totalAmount = params.get("total_amount");
                log.info("验签成功，订单号: {}, 支付宝交易号: {}, 金额: {}", outTradeNo, tradeNo, totalAmount);
                // 处理订单状态
                Order order = orderRepository.findByOrderNo(outTradeNo)
                        .orElseThrow(() -> new ResourceNotFoundException("订单不存在，订单号: " + outTradeNo));
                // 如果订单未支付，标记为已支付
                if (order.getStatus() == OrderStatus.PENDING.getValue()) {
                    order.setStatus(OrderStatus.PAID.getValue());
                    order.setTradeNo(tradeNo);
                    order.setPaidAt(LocalDateTime.now());
                    orderRepository.save(order);
                    // 创建用户课程关系
                    userCourseService.createUserCourseRelation(
                            order.getUser().getId(),
                            order.getCourse().getId(),
                            order.getId(),
                            true);
                }
                return "支付成功！订单号: " + outTradeNo;
            } else {
                log.warn("支付宝同步回调验签失败");
                return "验签失败";
            }
        } catch (AlipayApiException e) {
            log.error("支付宝同步回调验签异常", e);
            return "验签异常: " + e.getMessage();
        }
    }
    @Override
    @Transactional
    public String handleAlipayNotify(Map<String, String> params) {
        log.info("支付宝异步通知参数: {}", params);
        try {
            // 验证签名
            boolean signVerified = AlipaySignature.rsaCheckV1(
                    params,
                    alipayConfig.getAlipayPublicKey(),
                    "UTF-8",
                    "RSA2"
            );
            if (signVerified) {
                // 交易状态
                String tradeStatus = params.get("trade_status");
                // 订单号
                String outTradeNo = params.get("out_trade_no");
                // 支付宝交易号
                String tradeNo = params.get("trade_no");
                // 总金额
                String totalAmount = params.get("total_amount");
                log.info("交易状态:{}, 订单号:{}, 支付宝交易号:{}, 金额:{}",
                        tradeStatus, outTradeNo, tradeNo, totalAmount);
                // 查询订单
                Order order = orderRepository.findByOrderNo(outTradeNo)
                        .orElseThrow(() -> new ResourceNotFoundException("订单不存在，订单号: " + outTradeNo));
                // 根据交易状态处理订单
                if (OrderConstants.ALIPAY_TRADE_SUCCESS.equals(tradeStatus) 
                        || OrderConstants.ALIPAY_TRADE_FINISHED.equals(tradeStatus)) {
                    // 如果订单未支付，标记为已支付
                    if (order.getStatus() == OrderStatus.PENDING.getValue()) {
                        order.setStatus(OrderStatus.PAID.getValue());
                        order.setTradeNo(tradeNo);
                        order.setPaidAt(LocalDateTime.now());
                        orderRepository.save(order);
                        // 创建用户课程关系
                        userCourseService.createUserCourseRelation(
                                order.getUser().getId(),
                                order.getCourse().getId(),
                                order.getId(),
                                true);
                    }
                } else if (OrderConstants.ALIPAY_TRADE_CLOSED.equals(tradeStatus)) {
                    // 交易关闭
                    if (order.getStatus() == OrderStatus.PENDING.getValue()) {
                        order.setStatus(OrderStatus.CLOSED.getValue());
                        orderRepository.save(order);
                    }
                }
                return OrderConstants.NOTIFY_SUCCESS;
            } else {
                log.warn("支付宝异步通知验签失败");
                return OrderConstants.NOTIFY_FAIL;
            }
        } catch (AlipayApiException e) {
            log.error("支付宝异步通知验签异常", e);
            return OrderConstants.NOTIFY_FAIL;
        }
    }
    @Override
    @Transactional(readOnly = true)
    public OrderVO getOrderByOrderNo(String orderNo) {
        Order order = orderRepository.findByOrderNo(orderNo)
                .orElseThrow(() -> new ResourceNotFoundException("订单不存在，订单号: " + orderNo));
        return OrderVO.fromEntity(order);
    }
    @Override
    @Transactional(readOnly = true)
    public OrderVO getOrderById(Long id) {
        Order order = orderRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("订单不存在，ID: " + id));
        return OrderVO.fromEntity(order);
    }
    @Override
    @Transactional(readOnly = true)
    public List<OrderVO> getUserOrders(Long userId) {
        List<Order> orders = orderRepository.findByUser_Id(userId);
        return orders.stream()
                .map(OrderVO::fromEntity)
                .collect(Collectors.toList());
    }
    @Override
    @Transactional(readOnly = true)
    public Page<OrderVO> getUserOrders(Long userId, Pageable pageable) {
        Page<Order> orderPage = orderRepository.findByUser_Id(userId, pageable);
        return orderPage.map(OrderVO::fromEntity);
    }
    @Override
    @Transactional(readOnly = true)
    public List<OrderVO> getInstitutionOrders(Long institutionId) {
        List<Order> orders = orderRepository.findByInstitution_Id(institutionId);
        return orders.stream()
                .map(OrderVO::fromEntity)
                .collect(Collectors.toList());
    }
    @Override
    @Transactional(readOnly = true)
    public Page<OrderVO> getInstitutionOrders(Long institutionId, Pageable pageable) {
        Page<Order> orderPage = orderRepository.findByInstitution_Id(institutionId, pageable);
        return orderPage.map(OrderVO::fromEntity);
    }
    @Override
    @Transactional(readOnly = true)
    public List<OrderVO> getAllOrders() {
        List<Order> orders = orderRepository.findAll();
        return orders.stream()
                .map(OrderVO::fromEntity)
                .collect(Collectors.toList());
    }
    @Override
    @Transactional(readOnly = true)
    public Page<OrderVO> getAllOrders(Pageable pageable) {
        Page<Order> orderPage = orderRepository.findAll(pageable);
        return orderPage.map(OrderVO::fromEntity);
    }
    @Override
    @Transactional
    public OrderVO refundOrder(Long id, OrderRefundDTO dto, Long userId) {
        // 查询订单
        Order order = orderRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("订单不存在，ID: " + id));
        // 验证是否为订单所有者
        if (!order.getUser().getId().equals(userId)) {
            throw new BusinessException(403, "无权操作此订单");
        }
        // 验证订单状态是否为已支付
        if (order.getStatus() != OrderStatus.PAID.getValue()) {
            throw new BusinessException(400, "当前订单状态不支持退款");
        }
        // 设置退款金额（如果未指定则默认全额退款）
        BigDecimal refundAmount = dto.getRefundAmount();
        if (refundAmount == null) {
            refundAmount = order.getAmount();
        }
        // 验证退款金额不超过订单金额
        if (refundAmount.compareTo(order.getAmount()) > 0) {
            throw new BusinessException(400, "退款金额不能超过订单金额");
        }
        // 更新订单状态为申请退款
        order.setStatus(OrderStatus.REFUNDING.getValue());
        order.setRefundAmount(refundAmount);
        order.setRefundReason(dto.getRefundReason());
        Order updatedOrder = orderRepository.save(order);
        return OrderVO.fromEntity(updatedOrder);
    }
    @Override
    @Transactional
    public OrderVO processRefund(Long id, boolean approved, Long operatorId) {
        // 查询订单
        Order order = orderRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("订单不存在，ID: " + id));
        // 验证订单状态是否为申请退款
        if (order.getStatus() != OrderStatus.REFUNDING.getValue()) {
            throw new BusinessException(400, "当前订单状态不支持处理退款");
        }
        if (approved) {
            log.info("管理员(ID:{})批准订单(ID:{})的退款申请", operatorId, id);
            // 调用支付宝退款接口
            boolean refundSuccess = executeAlipayRefund(
                    order.getOrderNo(), 
                    order.getRefundAmount(), 
                    order.getRefundReason());
            if (!refundSuccess) {
                // 退款失败
                order.setStatus(OrderStatus.REFUND_FAILED.getValue());
                log.warn("订单(ID:{})退款失败", id);
            } else {
                // 退款成功，状态已在executeAlipayRefund方法中更新
                log.info("订单(ID:{})退款成功", id);
            }
        } else {
            // 拒绝退款
            log.info("管理员(ID:{})拒绝订单(ID:{})的退款申请", operatorId, id);
            order.setStatus(OrderStatus.REFUND_FAILED.getValue());
        }
        Order updatedOrder = orderRepository.save(order);
        return OrderVO.fromEntity(updatedOrder);
    }
    /**
     * 生成订单号
     */
    private String generateOrderNo() {
        // 使用时间戳+随机数生成订单号
        return System.currentTimeMillis() + String.format("%04d", new Random().nextInt(10000));
    }
    /**
     * 生成支付宝支付链接
     */
    private String generatePayLink(Order order) {
        log.info("生成支付链接，订单号：{}", order.getOrderNo());
        try {
            // 创建API对应的request
            AlipayTradePagePayRequest alipayRequest = new AlipayTradePagePayRequest();
            // 设置回调地址
            alipayRequest.setNotifyUrl(alipayConfig.getNotifyUrl());
            // 设置请求参数
            Map<String, Object> bizContent = new HashMap<>();
            bizContent.put("out_trade_no", order.getOrderNo());
            bizContent.put("total_amount", order.getAmount().toString());
            bizContent.put("subject", order.getCourse().getTitle());
            bizContent.put("product_code", "FAST_INSTANT_TRADE_PAY");
            alipayRequest.setBizContent(com.alibaba.fastjson.JSON.toJSONString(bizContent));
            // 调用API
            String form = alipayClient.pageExecute(alipayRequest).getBody();
            log.info("支付宝支付链接生成成功");
            return form;
        } catch (AlipayApiException e) {
            log.error("生成支付链接异常", e);
            throw new BusinessException(500, "生成支付链接失败：" + e.getMessage());
        }
    }
    /**
     * 统计机构总收入（不含退款）
     */
    @Override
    @Transactional(readOnly = true)
    public BigDecimal calculateInstitutionTotalIncome(Long institutionId) {
        List<Order> paidOrders = orderRepository.findByInstitution_IdAndStatus(institutionId, OrderStatus.PAID.getValue());
        return paidOrders.stream()
                .map(Order::getAmount)
                .filter(Objects::nonNull)
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }
    /**
     * 统计机构总退款
     */
    @Override
    @Transactional(readOnly = true)
    public BigDecimal calculateInstitutionTotalRefund(Long institutionId) {
        List<Order> refundedOrders = orderRepository.findByInstitution_IdAndStatus(institutionId, OrderStatus.REFUNDED.getValue());
        return refundedOrders.stream()
                .map(Order::getRefundAmount)
                .filter(Objects::nonNull)
                .reduce(BigDecimal.ZERO, BigDecimal::add);
    }
    /**
     * 获取机构净收入
     */
    @Override
    @Transactional(readOnly = true)
    public BigDecimal calculateInstitutionNetIncome(Long institutionId) {
        BigDecimal totalIncome = calculateInstitutionTotalIncome(institutionId);
        BigDecimal totalRefund = calculateInstitutionTotalRefund(institutionId);
        return totalIncome.subtract(totalRefund);
    }
    /**
     * 执行支付宝退款
     */
    @Override
    @Transactional
    public boolean executeAlipayRefund(String orderNo, BigDecimal refundAmount, String refundReason) {
        log.info("执行支付宝退款，订单号：{}，退款金额：{}，退款原因：{}", orderNo, refundAmount, refundReason);
        try {
            // 查询订单
            Order order = orderRepository.findByOrderNo(orderNo)
                    .orElseThrow(() -> new ResourceNotFoundException("订单不存在，订单号: " + orderNo));
            // 验证订单状态
            if (order.getStatus() != OrderStatus.PAID.getValue() && order.getStatus() != OrderStatus.REFUNDING.getValue()) {
                log.warn("订单状态不适合退款，订单号：{}，当前状态：{}", orderNo, order.getStatus());
                return false;
            }
            // 验证退款金额
            if (refundAmount.compareTo(order.getAmount()) > 0) {
                log.warn("退款金额大于订单金额，订单号：{}，订单金额：{}，退款金额：{}", 
                        orderNo, order.getAmount(), refundAmount);
                return false;
            }
            // 设置退款参数并调用支付宝退款接口
            // 创建API对应的request
            AlipayTradeRefundRequest alipayRequest = new AlipayTradeRefundRequest();
            // 设置请求参数
            Map<String, Object> bizContent = new HashMap<>();
            bizContent.put("out_trade_no", orderNo);
            bizContent.put("refund_amount", refundAmount.toString());
            bizContent.put("refund_reason", refundReason);
            alipayRequest.setBizContent(com.alibaba.fastjson.JSON.toJSONString(bizContent));
            // 调用API
            try {
                AlipayTradeRefundResponse response = alipayClient.execute(alipayRequest);
                if (response.isSuccess()) {
                    log.info("支付宝退款成功，订单号：{}，退款金额：{}", orderNo, refundAmount);
                    // 更新订单状态
                    order.setStatus(OrderStatus.REFUNDED.getValue());
                    order.setRefundAmount(refundAmount);
                    order.setRefundReason(refundReason);
                    order.setRefundedAt(LocalDateTime.now());
                    orderRepository.save(order);
                    // 更新用户课程状态为已退款
                    userCourseService.updateUserCourseRefunded(order.getId());
                    return true;
                } else {
                    log.error("支付宝退款接口调用失败，订单号：{}，错误码：{}，错误信息：{}", 
                            orderNo, response.getCode(), response.getMsg());
                    return false;
                }
            } catch (AlipayApiException e) {
                log.error("调用支付宝退款接口异常", e);
                return false;
            }
        } catch (Exception e) {
            log.error("执行支付宝退款过程发生异常", e);
            return false;
        }
    }
    /**
     * 创建免费课程订单
     */
    private Order createFreeCourseOrder(User user, Course course) {
        log.info("创建免费课程订单，用户：{}，课程：{}", user.getId(), course.getId());
        // 创建订单
        Order order = new Order();
        order.setOrderNo(generateOrderNo());
        order.setUser(user);
        order.setCourse(course);
        order.setInstitution(course.getInstitution());
        order.setAmount(BigDecimal.ZERO);
        order.setStatus(OrderStatus.PAID.getValue()); // 免费课程直接标记为已支付
        order.setCreatedAt(LocalDateTime.now());
        order.setPaidAt(LocalDateTime.now());
        // 保存订单
        orderRepository.save(order);
        // 创建用户课程关系
        userCourseService.createUserCourseRelation(user.getId(), course.getId(), order.getId(), true);
        log.info("免费课程订单创建成功：{}", order.getOrderNo());
        return order;
    }
    /**
     * 处理支付成功回调
     */
    @Override
    @Transactional
    public void handlePaymentSuccess(String orderNo) {
        log.info("处理支付成功回调，订单号：{}", orderNo);
        // 查询订单
        Order order = orderRepository.findByOrderNo(orderNo)
                .orElseThrow(() -> new ResourceNotFoundException("订单不存在，订单号: " + orderNo));
        // 检查订单状态
        if (order.getStatus() == OrderStatus.PAID.getValue()) {
            log.info("订单已是支付状态，无需重复处理，订单号：{}", orderNo);
            return;
        }
        // 更新订单状态
        order.setStatus(OrderStatus.PAID.getValue());
        order.setPaidAt(LocalDateTime.now());
        orderRepository.save(order);
        // 创建用户课程关系并标记为已支付
        userCourseService.createUserCourseRelation(
                order.getUser().getId(), 
                order.getCourse().getId(), 
                order.getId(), 
                true);
        log.info("支付成功处理完成，订单号：{}", orderNo);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/PermissionServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.PermissionDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.vo.PermissionVO;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.service.PermissionService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import java.util.List;
import java.util.stream.Collectors;
/**
 * 权限服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
@CacheConfig(cacheNames = "permissions") // 指定缓存名称
public class PermissionServiceImpl implements PermissionService {
    private final PermissionRepository permissionRepository;
    private final RoleRepository roleRepository;
    /**
     * 获取权限列表
     *
     * @return 权限列表
     */
    @Override
    @Transactional(readOnly = true)
    @Cacheable(key = "'all'") // 缓存所有权限列表
    public List<PermissionVO> getPermissionList() {
        List<Permission> permissions = permissionRepository.findAll();
        return permissions.stream()
                .map(this::convertToPermissionVO)
                .collect(Collectors.toList());
    }
    /**
     * 获取权限详情
     *
     * @param id 权限ID
     * @return 权限详情
     */
    @Override
    @Transactional(readOnly = true)
    @Cacheable(key = "#id") // 缓存单个权限
    public PermissionVO getPermissionById(Long id) {
        Permission permission = permissionRepository.findById(id)
                .orElseThrow(() -> new BusinessException("权限不存在"));
        return convertToPermissionVO(permission);
    }
    /**
     * 获取权限（根据编码）
     *
     * @param code 权限编码
     * @return 权限
     */
    @Override
    @Transactional(readOnly = true)
    @Cacheable(key = "'code:' + #code") // 缓存根据code查询的权限
    public Permission getPermissionByCode(String code) {
        return permissionRepository.findByCode(code)
                .orElseThrow(() -> new BusinessException("权限不存在"));
    }
    /**
     * 创建权限
     *
     * @param permissionDTO 权限信息
     * @return 创建后的权限信息
     */
    @Override
    @Transactional
    @CacheEvict(allEntries = true) // 清除所有权限缓存
    public PermissionVO createPermission(PermissionDTO permissionDTO) {
        // 检查权限编码是否存在
        if (permissionRepository.findByCode(permissionDTO.getCode()).isPresent()) {
            throw new BusinessException("权限编码已存在");
        }
        // 检查URL和方法是否已存在权限
        if (StringUtils.hasText(permissionDTO.getUrl()) && StringUtils.hasText(permissionDTO.getMethod())) {
            if (permissionRepository.findByUrlAndMethod(permissionDTO.getUrl(), permissionDTO.getMethod()).isPresent()) {
                throw new BusinessException("该URL和请求方法的权限已存在");
            }
        }
        // 创建权限
        Permission permission = Permission.builder()
                .name(permissionDTO.getName())
                .code(permissionDTO.getCode())
                .description(permissionDTO.getDescription())
                .url(permissionDTO.getUrl())
                .method(permissionDTO.getMethod())
                .build();
        // 保存权限
        Permission savedPermission = permissionRepository.save(permission);
        log.info("创建权限成功: {}", savedPermission.getName());
        return convertToPermissionVO(savedPermission);
    }
    /**
     * 更新权限
     *
     * @param id            权限ID
     * @param permissionDTO 权限信息
     * @return 更新后的权限信息
     */
    @Override
    @Transactional
    @CacheEvict(allEntries = true) // 清除所有权限缓存
    public PermissionVO updatePermission(Long id, PermissionDTO permissionDTO) {
        Permission permission = permissionRepository.findById(id)
                .orElseThrow(() -> new BusinessException("权限不存在"));
        // 检查权限编码是否存在
        if (StringUtils.hasText(permissionDTO.getCode()) &&
                !permission.getCode().equals(permissionDTO.getCode()) &&
                permissionRepository.findByCode(permissionDTO.getCode()).isPresent()) {
            throw new BusinessException("权限编码已存在");
        }
        // 检查URL和方法是否已存在权限
        if (StringUtils.hasText(permissionDTO.getUrl()) && StringUtils.hasText(permissionDTO.getMethod())) {
            if (!permission.getUrl().equals(permissionDTO.getUrl()) || 
                !permission.getMethod().equals(permissionDTO.getMethod())) {
                if (permissionRepository.findByUrlAndMethod(permissionDTO.getUrl(), permissionDTO.getMethod()).isPresent()) {
                    throw new BusinessException("该URL和请求方法的权限已存在");
                }
            }
        }
        // 更新基本信息
        if (StringUtils.hasText(permissionDTO.getName())) {
            permission.setName(permissionDTO.getName());
        }
        if (StringUtils.hasText(permissionDTO.getCode())) {
            permission.setCode(permissionDTO.getCode());
        }
        if (permissionDTO.getDescription() != null) {
            permission.setDescription(permissionDTO.getDescription());
        }
        if (StringUtils.hasText(permissionDTO.getUrl())) {
            permission.setUrl(permissionDTO.getUrl());
        }
        if (StringUtils.hasText(permissionDTO.getMethod())) {
            permission.setMethod(permissionDTO.getMethod());
        }
        // 保存权限
        Permission savedPermission = permissionRepository.save(permission);
        log.info("更新权限成功: {}", savedPermission.getName());
        return convertToPermissionVO(savedPermission);
    }
    /**
     * 删除权限
     *
     * @param id 权限ID
     */
    @Override
    @Transactional
    @CacheEvict(allEntries = true) // 清除所有权限缓存
    public void deletePermission(Long id) {
        Permission permission = permissionRepository.findById(id)
                .orElseThrow(() -> new BusinessException("权限不存在"));
        // 检查权限是否被角色引用
        List<Role> roles = roleRepository.findAll();
        for (Role role : roles) {
            if (role.getPermissions().contains(permission)) {
                throw new BusinessException("权限已被角色引用，无法删除");
            }
        }
        permissionRepository.delete(permission);
        log.info("删除权限成功: {}", permission.getName());
    }
    /**
     * 转换为权限VO
     *
     * @param permission 权限实体
     * @return 权限VO
     */
    private PermissionVO convertToPermissionVO(Permission permission) {
        return PermissionVO.builder()
                .id(permission.getId())
                .name(permission.getName())
                .code(permission.getCode())
                .description(permission.getDescription())
                .url(permission.getUrl())
                .method(permission.getMethod())
                .createdAt(permission.getCreatedAt())
                .updatedAt(permission.getUpdatedAt())
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/QuestionGroupServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.QuestionGroupDTO;
import com.zhangziqi.online_course_mine.model.dto.QuestionGroupItemDTO;
import com.zhangziqi.online_course_mine.model.entity.*;
import com.zhangziqi.online_course_mine.model.vo.QuestionGroupItemVO;
import com.zhangziqi.online_course_mine.model.vo.QuestionGroupVO;
import com.zhangziqi.online_course_mine.model.vo.QuestionVO;
import com.zhangziqi.online_course_mine.repository.*;
import com.zhangziqi.online_course_mine.service.QuestionGroupService;
import com.zhangziqi.online_course_mine.service.QuestionService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.Function;
import java.util.stream.Collectors;
/**
 * 题目组服务实现类
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class QuestionGroupServiceImpl implements QuestionGroupService {
    private final QuestionGroupRepository groupRepository;
    private final QuestionGroupItemRepository groupItemRepository;
    private final QuestionRepository questionRepository;
    private final InstitutionRepository institutionRepository;
    private final QuestionService questionService;
    private final UserRepository userRepository;
    /**
     * 创建题目组
     */
    @Override
    @Transactional
    public QuestionGroupVO createGroup(QuestionGroupDTO groupDTO, Long creatorId) {
        // 验证机构是否存在
        Institution institution = institutionRepository.findById(groupDTO.getInstitutionId())
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在"));
        try {
            // 创建题目组实体
            QuestionGroup group = QuestionGroup.builder()
                    .institution(institution)
                    .name(groupDTO.getName())
                    .description(groupDTO.getDescription())
                    .creatorId(creatorId)
                    .build();
            // 保存题目组
            QuestionGroup savedGroup = groupRepository.save(group);
            // 构建响应对象
            return buildGroupVO(savedGroup, new ArrayList<>(), 0L);
        } catch (DataIntegrityViolationException e) {
            log.error("创建题目组失败", e);
            throw new BusinessException("创建题目组失败：数据完整性异常");
        } catch (Exception e) {
            log.error("创建题目组失败", e);
            throw new BusinessException("创建题目组失败：" + e.getMessage());
        }
    }
    /**
     * 更新题目组
     */
    @Override
    @Transactional
    public QuestionGroupVO updateGroup(QuestionGroupDTO groupDTO) {
        // 验证题目组是否存在
        QuestionGroup existingGroup = groupRepository.findByIdAndInstitutionId(groupDTO.getId(), groupDTO.getInstitutionId())
                .orElseThrow(() -> new ResourceNotFoundException("题目组不存在"));
        try {
            // 更新题目组属性
            existingGroup.setName(groupDTO.getName());
            existingGroup.setDescription(groupDTO.getDescription());
            // 保存更新的题目组
            QuestionGroup updatedGroup = groupRepository.save(existingGroup);
            // 获取题目组的所有题目
            List<QuestionGroupItem> items = groupItemRepository.findByGroupId(updatedGroup.getId());
            List<QuestionGroupItemVO> itemVOs = buildGroupItemVOs(items);
            // 构建响应对象
            return buildGroupVO(updatedGroup, itemVOs, (long) items.size());
        } catch (Exception e) {
            log.error("更新题目组失败", e);
            throw new BusinessException("更新题目组失败：" + e.getMessage());
        }
    }
    /**
     * 根据ID查询题目组详情
     */
    @Override
    public QuestionGroupVO getGroupById(Long groupId, Long institutionId, boolean includeItems) {
        // 获取题目组
        QuestionGroup group = groupRepository.findByIdAndInstitutionId(groupId, institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("题目组不存在"));
        List<QuestionGroupItemVO> itemVOs = null;
        long questionCount = 0;
        if (includeItems) {
            // 获取题目组的所有题目
            List<QuestionGroupItem> items = groupItemRepository.findByGroupId(group.getId());
            itemVOs = buildGroupItemVOs(items);
            questionCount = items.size();
        } else {
            // 仅获取题目数量
            questionCount = groupItemRepository.countByGroupId(group.getId());
        }
        // 构建响应对象
        return buildGroupVO(group, itemVOs, questionCount);
    }
    /**
     * 删除题目组
     */
    @Override
    @Transactional
    public void deleteGroup(Long groupId, Long institutionId) {
        // 验证题目组是否存在
        QuestionGroup group = groupRepository.findByIdAndInstitutionId(groupId, institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("题目组不存在"));
        try {
            // 删除题目组的所有题目项
            groupItemRepository.deleteByGroupId(groupId);
            // 删除题目组
            groupRepository.delete(group);
        } catch (Exception e) {
            log.error("删除题目组失败", e);
            throw new BusinessException("删除题目组失败：" + e.getMessage());
        }
    }
    /**
     * 分页查询题目组列表
     */
    @Override
    public Page<QuestionGroupVO> getGroups(Long institutionId, String keyword, Pageable pageable) {
        // 获取机构
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在"));
        // 添加调试日志记录搜索关键词
        log.debug("搜索题组 - 机构ID: {}, 关键词: '{}', 页码: {}, 每页数量: {}", 
                institutionId, keyword, pageable.getPageNumber(), pageable.getPageSize());
        Page<QuestionGroup> groupPage;
        if (keyword != null && !keyword.trim().isEmpty()) {
            // 根据关键词搜索
            log.debug("执行关键词搜索: '{}'", keyword.trim());
            groupPage = groupRepository.searchByKeyword(institution, keyword.trim(), pageable);
            log.debug("搜索结果数量: {}", groupPage.getTotalElements());
        } else {
            // 查询所有题目组
            log.debug("查询所有题目组");
            groupPage = groupRepository.findByInstitution(institution, pageable);
        }
        // 获取所有题目组的ID
        List<Long> groupIds = groupPage.getContent().stream()
                .map(QuestionGroup::getId)
                .collect(Collectors.toList());
        // 批量查询题目组的题目数量
        Map<Long, Long> questionCountMap = groupRepository.countQuestionsByGroupIds(groupIds)
                .stream()
                .collect(Collectors.toMap(
                        result -> (Long) result[0],
                        result -> (Long) result[1]
                ));
        // 转换为VO对象
        return groupPage.map(group -> {
            long questionCount = questionCountMap.getOrDefault(group.getId(), 0L);
            return buildGroupVO(group, null, questionCount);
        });
    }
    /**
     * 获取机构的所有题目组
     */
    @Override
    public List<QuestionGroupVO> getAllGroups(Long institutionId) {
        // 查询机构的所有题目组
        List<QuestionGroup> groups = groupRepository.findAllByInstitutionId(institutionId);
        // 获取所有题目组的ID
        List<Long> groupIds = groups.stream()
                .map(QuestionGroup::getId)
                .collect(Collectors.toList());
        // 批量查询题目组的题目数量
        Map<Long, Long> questionCountMap = groupRepository.countQuestionsByGroupIds(groupIds)
                .stream()
                .collect(Collectors.toMap(
                        result -> (Long) result[0],
                        result -> (Long) result[1],
                        (v1, v2) -> v1
                ));
        // 转换为VO对象
        return groups.stream()
                .map(group -> {
                    long questionCount = questionCountMap.getOrDefault(group.getId(), 0L);
                    return buildGroupVO(group, null, questionCount);
                })
                .collect(Collectors.toList());
    }
    /**
     * 为题目组添加题目
     */
    @Override
    @Transactional
    public QuestionGroupItemVO addQuestionToGroup(QuestionGroupItemDTO itemDTO) {
        // 验证题目组是否存在
        QuestionGroup group = groupRepository.findById(itemDTO.getGroupId())
                .orElseThrow(() -> new ResourceNotFoundException("题目组不存在"));
        // 验证题目是否存在
        Question question = questionRepository.findById(itemDTO.getQuestionId())
                .orElseThrow(() -> new ResourceNotFoundException("题目不存在"));
        // 验证题目和题目组属于同一个机构
        if (!Objects.equals(group.getInstitutionId(), question.getInstitutionId())) {
            throw new BusinessException("题目和题目组必须属于同一个机构");
        }
        // 验证题目是否已在题目组中
        if (groupItemRepository.existsByGroupIdAndQuestionId(group.getId(), question.getId())) {
            throw new BusinessException("该题目已在题目组中");
        }
        try {
            // 创建题目组项实体
            QuestionGroupItem item = QuestionGroupItem.builder()
                    .group(group)
                    .question(question)
                    .orderIndex(itemDTO.getOrderIndex())
                    .difficulty(itemDTO.getDifficulty())
                    .score(itemDTO.getScore())
                    .build();
            // 保存题目组项
            QuestionGroupItem savedItem = groupItemRepository.save(item);
            // 获取题目详情
            QuestionVO questionVO = questionService.getQuestionById(question.getId(), question.getInstitutionId());
            // 构建响应对象
            return buildGroupItemVO(savedItem, questionVO);
        } catch (Exception e) {
            log.error("添加题目到题目组失败", e);
            throw new BusinessException("添加题目到题目组失败：" + e.getMessage());
        }
    }
    /**
     * 更新题目组项
     */
    @Override
    @Transactional
    public QuestionGroupItemVO updateGroupItem(QuestionGroupItemDTO itemDTO) {
        // 验证题目组项是否存在
        QuestionGroupItem existingItem = groupItemRepository.findById(itemDTO.getId())
                .orElseThrow(() -> new ResourceNotFoundException("题目组项不存在"));
        // 验证题目组ID是否一致
        if (!Objects.equals(existingItem.getGroup().getId(), itemDTO.getGroupId())) {
            throw new BusinessException("题目组ID不匹配");
        }
        try {
            // 更新题目组项属性
            existingItem.setOrderIndex(itemDTO.getOrderIndex());
            existingItem.setDifficulty(itemDTO.getDifficulty());
            existingItem.setScore(itemDTO.getScore());
            // 保存更新的题目组项
            QuestionGroupItem updatedItem = groupItemRepository.save(existingItem);
            // 获取题目详情
            QuestionVO questionVO = questionService.getQuestionById(updatedItem.getQuestion().getId(), updatedItem.getQuestion().getInstitutionId());
            // 构建响应对象
            return buildGroupItemVO(updatedItem, questionVO);
        } catch (Exception e) {
            log.error("更新题目组项失败", e);
            throw new BusinessException("更新题目组项失败：" + e.getMessage());
        }
    }
    /**
     * 从题目组移除题目
     */
    @Override
    @Transactional
    public boolean removeQuestionFromGroup(Long groupId, Long itemId, Long institutionId) {
        // 验证题目组是否存在
        groupRepository.findByIdAndInstitutionId(groupId, institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("题目组不存在"));
        // 验证题目组项是否存在
        QuestionGroupItem item = groupItemRepository.findById(itemId)
                .orElseThrow(() -> new ResourceNotFoundException("题目组项不存在"));
        // 验证题目组ID是否一致
        if (!Objects.equals(item.getGroup().getId(), groupId)) {
            throw new BusinessException("题目组ID不匹配");
        }
        try {
            // 删除题目组项
            groupItemRepository.delete(item);
            return true;
        } catch (Exception e) {
            log.error("从题目组移除题目失败", e);
            throw new BusinessException("从题目组移除题目失败：" + e.getMessage());
        }
    }
    /**
     * 获取题目组中的所有题目
     */
    @Override
    public List<QuestionGroupItemVO> getGroupItems(Long groupId, Long institutionId) {
        // 验证题目组是否存在
        groupRepository.findByIdAndInstitutionId(groupId, institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("题目组不存在"));
        // 获取题目组的所有题目项
        List<QuestionGroupItem> items = groupItemRepository.findByGroupIdOrderByOrderIndex(groupId);
        // 转换为VO对象
        return buildGroupItemVOs(items);
    }
    /**
     * 更新题目组中题目的顺序
     */
    @Override
    @Transactional
    public boolean updateItemsOrder(Long groupId, List<QuestionGroupItemDTO> itemDTOs, Long institutionId) {
        // 验证题目组是否存在
        groupRepository.findByIdAndInstitutionId(groupId, institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("题目组不存在"));
        try {
            // 获取题目组的所有题目项
            List<QuestionGroupItem> existingItems = groupItemRepository.findByGroupId(groupId);
            Map<Long, QuestionGroupItem> itemMap = existingItems.stream()
                    .collect(Collectors.toMap(QuestionGroupItem::getId, Function.identity()));
            // 更新题目项的顺序
            for (QuestionGroupItemDTO itemDTO : itemDTOs) {
                QuestionGroupItem item = itemMap.get(itemDTO.getId());
                if (item != null) {
                    item.setOrderIndex(itemDTO.getOrderIndex());
                    groupItemRepository.save(item);
                }
            }
            return true;
        } catch (Exception e) {
            log.error("更新题目顺序失败", e);
            throw new BusinessException("更新题目顺序失败：" + e.getMessage());
        }
    }
    /**
     * 批量添加题目到题目组
     */
    @Override
    @Transactional
    public List<QuestionGroupItemVO> addQuestionsToGroup(Long groupId, List<Long> questionIds, Long institutionId) {
        // 验证题目组是否存在
        QuestionGroup group = groupRepository.findByIdAndInstitutionId(groupId, institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("题目组不存在"));
        // 获取当前题目组中的题目数量，用于设置顺序
        int currentItemCount = (int) groupItemRepository.countByGroupId(groupId);
        List<QuestionGroupItemVO> results = new ArrayList<>();
        List<String> errorMessages = new ArrayList<>();
        for (int i = 0; i < questionIds.size(); i++) {
            Long questionId = questionIds.get(i);
            try {
                // 验证题目是否存在
                Question question = questionRepository.findById(questionId)
                        .orElseThrow(() -> new ResourceNotFoundException("题目不存在: " + questionId));
                // 验证题目和题目组属于同一个机构
                if (!Objects.equals(group.getInstitutionId(), question.getInstitutionId())) {
                    errorMessages.add("题目ID: " + questionId + " - 题目和题目组必须属于同一个机构");
                    continue;
                }
                // 验证题目是否已在题目组中
                if (groupItemRepository.existsByGroupIdAndQuestionId(group.getId(), question.getId())) {
                    errorMessages.add("题目ID: " + questionId + " - 该题目已在题目组中");
                    continue;
                }
                // 创建题目组项实体
                QuestionGroupItem item = QuestionGroupItem.builder()
                        .group(group)
                        .question(question)
                        .orderIndex(currentItemCount + i) // 设置顺序
                        .difficulty(question.getDifficulty()) // 默认使用题目的难度
                        .score(question.getScore()) // 默认使用题目的分值
                        .build();
                // 保存题目组项
                QuestionGroupItem savedItem = groupItemRepository.save(item);
                // 获取题目详情
                QuestionVO questionVO = questionService.getQuestionById(question.getId(), question.getInstitutionId());
                // 构建响应对象并添加到结果列表
                results.add(buildGroupItemVO(savedItem, questionVO));
            } catch (Exception e) {
                log.error("添加题目到题目组失败, 题目ID: " + questionId, e);
                errorMessages.add("题目ID: " + questionId + " - " + e.getMessage());
            }
        }
        // 如果有错误消息，记录到日志中
        if (!errorMessages.isEmpty()) {
            log.warn("部分题目添加失败: {}", String.join("; ", errorMessages));
        }
        return results;
    }
    /**
     * 构建题目组视图对象
     */
    private QuestionGroupVO buildGroupVO(QuestionGroup group, List<QuestionGroupItemVO> items, Long questionCount) {
        QuestionGroupVO.QuestionGroupVOBuilder builder = QuestionGroupVO.builder()
                .id(group.getId())
                .institutionId(group.getInstitutionId())
                .name(group.getName())
                .description(group.getDescription())
                .questionCount(questionCount)
                .creatorId(group.getCreatorId())
                .createdTime(group.getCreatedTime())
                .updatedTime(group.getUpdatedTime());
        // 设置创建者名称
        if (group.getCreatorId() != null) {
            userRepository.findById(group.getCreatorId()).ifPresent(user -> 
                builder.creatorName(user.getNickname() != null ? user.getNickname() : user.getUsername())
            );
        }
        // 设置题目项列表
        if (items != null) {
            builder.items(items);
        }
        return builder.build();
    }
    /**
     * 构建题目组项视图对象列表
     */
    private List<QuestionGroupItemVO> buildGroupItemVOs(List<QuestionGroupItem> items) {
        if (items.isEmpty()) {
            return new ArrayList<>();
        }
        // 获取所有题目ID
        List<Long> questionIds = items.stream()
                .map(item -> item.getQuestion().getId())
                .collect(Collectors.toList());
        // 批量获取题目详情
        Map<Long, QuestionVO> questionMap = questionService.getQuestionsByIds(questionIds)
                .stream()
                .collect(Collectors.toMap(QuestionVO::getId, Function.identity()));
        // 转换为VO对象
        return items.stream()
                .map(item -> {
                    QuestionVO questionVO = questionMap.get(item.getQuestion().getId());
                    return buildGroupItemVO(item, questionVO);
                })
                .collect(Collectors.toList());
    }
    /**
     * 构建题目组项视图对象
     */
    private QuestionGroupItemVO buildGroupItemVO(QuestionGroupItem item, QuestionVO question) {
        // 获取难度描述
        String difficultyDesc = "未知";
        switch (item.getDifficulty()) {
            case 1:
                difficultyDesc = "简单";
                break;
            case 2:
                difficultyDesc = "中等";
                break;
            case 3:
                difficultyDesc = "困难";
                break;
        }
        return QuestionGroupItemVO.builder()
                .id(item.getId())
                .groupId(item.getGroup().getId())
                .questionId(item.getQuestion().getId())
                .question(question)
                .orderIndex(item.getOrderIndex())
                .difficulty(item.getDifficulty())
                .difficultyDesc(difficultyDesc)
                .score(item.getScore())
                .build();
    }
    @Override
    public QuestionGroupVO getGroupByIdForPreview(Long groupId, boolean includeItems) {
        log.info("获取题目组(预览模式) - 题目组ID: {}, 包含题目: {}", groupId, includeItems);
        // 直接通过ID查找题组，不验证机构
        QuestionGroup group = groupRepository.findById(groupId)
                .orElseThrow(() -> {
                    log.error("题目组不存在, groupId: {}", groupId);
                    return new ResourceNotFoundException("题目组不存在，ID: " + groupId);
                });
        List<QuestionGroupItemVO> itemVOs = null;
        long questionCount = 0;
        if (includeItems) {
            // 获取题目组的所有题目
            List<QuestionGroupItem> items = groupItemRepository.findByGroupId(group.getId());
            itemVOs = buildGroupItemVOs(items);
            questionCount = items.size();
            log.info("已加载题目组的题目 - 题目组ID: {}, 题目数: {}", groupId, questionCount);
        } else {
            // 仅获取题目数量
            questionCount = groupItemRepository.countByGroupId(group.getId());
            log.info("已获取题目数量 - 题目组ID: {}, 题目数: {}", groupId, questionCount);
        }
        // 构建响应对象
        QuestionGroupVO result = buildGroupVO(group, itemVOs, questionCount);
        log.info("已构建题目组详情(预览模式) - 题目组名称: {}", result.getName());
        return result;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/QuestionImportServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.alibaba.excel.EasyExcel;
import com.alibaba.excel.write.builder.ExcelWriterBuilder;
import com.alibaba.excel.write.style.column.LongestMatchColumnWidthStyleStrategy;
import com.zhangziqi.online_course_mine.excel.QuestionExcelListener;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.excel.QuestionExcelData;
import com.zhangziqi.online_course_mine.model.vo.QuestionImportResultVO;
import com.zhangziqi.online_course_mine.service.QuestionImportService;
import com.zhangziqi.online_course_mine.service.QuestionService;
import com.zhangziqi.online_course_mine.service.QuestionTagService;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;
import org.springframework.web.multipart.MultipartFile;
import org.apache.commons.lang3.StringUtils;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;
/**
 * 试题导入服务实现类
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class QuestionImportServiceImpl implements QuestionImportService {
    private final QuestionService questionService;
    private final QuestionTagService questionTagService;
    private final PlatformTransactionManager transactionManager;
    @Qualifier("importTaskExecutor")
    private final Executor importTaskExecutor;
    @Value("${question.import.max-rows:1000}")
    private Integer maxImportRows;
    @Value("${question.import.concurrent-enabled:true}")
    private Boolean concurrentEnabled;
    /**
     * 生成试题Excel导入模板
     */
    @Override
    public void generateExcelTemplate(HttpServletResponse response) throws IOException {
        // 设置响应头
        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        response.setCharacterEncoding("utf-8");
        // 设置文件名
        String fileName = URLEncoder.encode("试题导入模板", StandardCharsets.UTF_8).replaceAll("\\+", "%20");
        response.setHeader("Content-disposition", "attachment;filename*=utf-8''" + fileName + ".xlsx");
        try {
            // 创建示例数据
            ArrayList<QuestionExcelData> demoData = new ArrayList<>();
            demoData.add(createSingleChoiceDemo());
            demoData.add(createMultipleChoiceDemo());
            demoData.add(createTrueFalseDemo());
            demoData.add(createFillBlankDemo());
            demoData.add(createShortAnswerDemo());
            // 使用EasyExcel写入数据
            ExcelWriterBuilder writerBuilder = EasyExcel.write(response.getOutputStream(), QuestionExcelData.class)
                    .autoCloseStream(false)
                    .registerWriteHandler(new LongestMatchColumnWidthStyleStrategy()); // 自适应列宽
            writerBuilder.sheet("试题模板").doWrite(demoData);
        } catch (Exception e) {
            log.error("生成Excel模板失败", e);
            // 重置响应
            response.reset();
            response.setContentType("application/json");
            response.setCharacterEncoding("utf-8");
            response.getWriter().println("生成Excel模板失败: " + e.getMessage());
        }
    }
    /**
     * 导入试题Excel
     */
    @Override
    public QuestionImportResultVO importQuestions(
            MultipartFile file, 
            Long institutionId, 
            Long userId, 
            Integer batchSize) throws IOException {
        // 验证文件类型
        String originalFilename = file.getOriginalFilename();
        if (originalFilename == null || (!originalFilename.endsWith(".xlsx") && !originalFilename.endsWith(".xls"))) {
            throw new BusinessException("文件格式不正确，仅支持Excel文件(.xlsx或.xls)");
        }
        // 验证文件大小
        if (file.getSize() > 10 * 1024 * 1024) { // 最大10MB
            throw new BusinessException("文件过大，请控制在10MB以内");
        }
        // 使用输入流读取Excel
        try (InputStream inputStream = file.getInputStream()) {
            // 记录开始时间
            long startTime = System.currentTimeMillis();
            // 如果启用并发，则使用异步方式处理
            if (concurrentEnabled && batchSize != null && batchSize > 0) {
                return processWithConcurrent(inputStream, institutionId, userId, batchSize, startTime);
            } else {
                return processSequentially(inputStream, institutionId, userId, batchSize, startTime);
            }
        } catch (Exception e) {
            log.error("导入试题Excel失败", e);
            throw new BusinessException("导入试题失败: " + e.getMessage());
        }
    }
    /**
     * 顺序处理导入
     */
    private QuestionImportResultVO processSequentially(
            InputStream inputStream, 
            Long institutionId, 
            Long userId, 
            Integer batchSize,
            long startTime) {
        // 创建Excel解析监听器
        TransactionTemplate transactionTemplate = new TransactionTemplate(transactionManager);
        QuestionExcelListener listener = new QuestionExcelListener(
                questionService, questionTagService, institutionId, userId, batchSize, transactionTemplate);
        // 读取Excel数据
        EasyExcel.read(inputStream, QuestionExcelData.class, listener)
                .headRowNumber(1) // 表头行数
                .ignoreEmptyRow(true) // 忽略空行
                .autoCloseStream(true)
                .sheet() // 默认读取第一个sheet
                .doRead();
        // 记录结束时间并计算耗时
        long endTime = System.currentTimeMillis();
        QuestionImportResultVO result = listener.getResult();
        result.setDuration(endTime - startTime);
        return result;
    }
    /**
     * 并发处理导入
     */
    private QuestionImportResultVO processWithConcurrent(
            InputStream inputStream, 
            Long institutionId, 
            Long userId, 
            Integer batchSize,
            long startTime) throws Exception {
        // 创建结果对象
        QuestionImportResultVO result = QuestionImportResultVO.builder()
                .totalCount(0)
                .successCount(0)
                .failureCount(0)
                .failureItems(new ArrayList<>())
                .build();
        // 读取全部数据
        List<QuestionExcelData> allData = EasyExcel.read(inputStream)
                .head(QuestionExcelData.class)
                .sheet()
                .headRowNumber(1)
                .doReadSync();
        // 总数量
        int totalCount = allData.size();
        result.setTotalCount(totalCount);
        if (totalCount == 0) {
            result.setDuration(System.currentTimeMillis() - startTime);
            return result;
        }
        // 验证最大行数
        if (maxImportRows != null && totalCount > maxImportRows) {
            throw new BusinessException("导入数据过多，每次最多导入 " + maxImportRows + " 条记录");
        }
        // 按照批次大小分组
        int actualBatchSize = Math.min(batchSize, 100); // 限制最大批次大小
        int batchCount = (totalCount + actualBatchSize - 1) / actualBatchSize; // 向上取整
        // 创建异步任务
        ArrayList<CompletableFuture<QuestionImportResultVO>> futures = new ArrayList<>();
        for (int i = 0; i < batchCount; i++) {
            int fromIndex = i * actualBatchSize;
            int toIndex = Math.min((i + 1) * actualBatchSize, totalCount);
            // 获取当前批次数据
            List<QuestionExcelData> batchData = allData.subList(fromIndex, toIndex);
            // 创建并提交异步任务
            TransactionTemplate transactionTemplate = new TransactionTemplate(transactionManager);
            CompletableFuture<QuestionImportResultVO> future = processBatchAsync(
                    batchData, institutionId, userId, i + 1, transactionTemplate);
            futures.add(future);
        }
        // 等待所有任务完成并合并结果
        CompletableFuture<Void> allOf = CompletableFuture.allOf(
                futures.toArray(new CompletableFuture[0]));
        // 合并所有批次的处理结果
        allOf.thenRun(() -> {
            futures.forEach(future -> {
                try {
                    QuestionImportResultVO batchResult = future.get();
                    result.setSuccessCount(result.getSuccessCount() + batchResult.getSuccessCount());
                    result.setFailureCount(result.getFailureCount() + batchResult.getFailureCount());
                    result.getFailureItems().addAll(batchResult.getFailureItems());
                } catch (Exception e) {
                    log.error("获取批次处理结果异常", e);
                }
            });
        }).get(); // 等待所有合并完成
        // 记录结束时间并计算耗时
        long endTime = System.currentTimeMillis();
        result.setDuration(endTime - startTime);
        return result;
    }
    /**
     * 异步处理一个批次的数据
     */
    @Async("importTaskExecutor")
    public CompletableFuture<QuestionImportResultVO> processBatchAsync(
            List<QuestionExcelData> batchData, 
            Long institutionId, 
            Long userId,
            int batchIndex,
            TransactionTemplate transactionTemplate) {
        log.info("开始处理批次 {}, 数据量: {}", batchIndex, batchData.size());
        // 创建结果对象
        QuestionImportResultVO result = QuestionImportResultVO.builder()
                .totalCount(batchData.size())
                .successCount(0)
                .failureCount(0)
                .failureItems(new ArrayList<>())
                .build();
        // 处理每条数据，每个题目一个独立事务
        for (int i = 0; i < batchData.size(); i++) {
            QuestionExcelData excelData = batchData.get(i);
            // 计算在Excel中的行号（表头占一行，数据从第二行开始，且每个批次的起始行不同）
            final int rowIndex = i + 2 + (batchIndex - 1) * batchData.size();
            try {
                // 使用事务模板，确保每个题目处理有独立事务
                Boolean success = transactionTemplate.execute(new TransactionCallback<Boolean>() {
                    @Override
                    public Boolean doInTransaction(TransactionStatus status) {
                        try {
                            // 转换数据
                            com.zhangziqi.online_course_mine.model.dto.QuestionDTO questionDTO = 
                                    convertToQuestionDTO(excelData);
                            // 设置机构ID
                            questionDTO.setInstitutionId(institutionId);
                            // 保存题目
                            com.zhangziqi.online_course_mine.model.vo.QuestionVO savedQuestion = 
                                    questionService.createQuestion(questionDTO, userId);
                            // 处理标签
                            if (savedQuestion != null && savedQuestion.getId() != null && 
                                excelData.getTags() != null && !excelData.getTags().trim().isEmpty()) {
                                processQuestionTags(savedQuestion.getId(), excelData.getTags(), 
                                        institutionId, userId);
                            }
                            return true;
                        } catch (Exception e) {
                            // 明确设置事务回滚
                            status.setRollbackOnly();
                            // 异常会被捕获，但事务会回滚
                            log.error("导入试题失败，批次: {}, 行: {}, 标题: {}, 错误: {}", 
                                    batchIndex, rowIndex, excelData.getTitle(), e.getMessage());
                            throw e; // 重新抛出以触发事务回滚
                        }
                    }
                });
                // 处理成功
                if (success != null && success) {
                    result.setSuccessCount(result.getSuccessCount() + 1);
                }
            } catch (Exception e) {
                // 处理失败 - 注意这里的异常是从事务回调中抛出的
                result.setFailureCount(result.getFailureCount() + 1);
                // 添加失败信息
                result.getFailureItems().add(
                    QuestionImportResultVO.FailureItem.builder()
                        .rowIndex(rowIndex)
                        .title(excelData.getTitle() != null ? excelData.getTitle() : "未知标题")
                        .errorMessage(e.getMessage())
                        .build()
                );
            }
        }
        log.info("批次 {} 处理完成，总计: {}, 成功: {}, 失败: {}", 
                batchIndex, result.getTotalCount(), result.getSuccessCount(), result.getFailureCount());
        return CompletableFuture.completedFuture(result);
    }
    /**
     * 处理题目标签
     */
    private void processQuestionTags(Long questionId, String tagsStr, Long institutionId, Long userId) {
        if (tagsStr == null || tagsStr.trim().isEmpty()) {
            return;
        }
        String[] tagNames = tagsStr.split(",");
        for (String tagName : tagNames) {
            tagName = tagName.trim();
            if (tagName.isEmpty()) {
                continue;
            }
            try {
                // 先查找是否存在标签
                com.zhangziqi.online_course_mine.model.vo.QuestionTagVO tag = null;
                try {
                    // 尝试获取已有标签
                    tag = questionTagService.getTagByName(institutionId, tagName);
                } catch (ResourceNotFoundException e) {
                    // 标签不存在，创建新标签
                    com.zhangziqi.online_course_mine.model.dto.QuestionTagDTO tagDTO = 
                        com.zhangziqi.online_course_mine.model.dto.QuestionTagDTO.builder()
                            .institutionId(institutionId)
                            .name(tagName)
                            .build();
                    tag = questionTagService.createTag(tagDTO, userId);
                }
                // 关联标签到题目
                if (tag != null && tag.getId() != null) {
                    questionTagService.addTagToQuestion(questionId, tag.getId(), institutionId);
                }
            } catch (Exception e) {
                log.warn("为题目 {} 添加标签 {} 失败: {}", questionId, tagName, e.getMessage());
            }
        }
    }
    /**
     * 转换Excel数据为题目DTO
     */
    private com.zhangziqi.online_course_mine.model.dto.QuestionDTO convertToQuestionDTO(
            QuestionExcelData excelData) {
        // 验证必填字段
        if (excelData.getTitle() == null || excelData.getTitle().trim().isEmpty()) {
            throw new BusinessException("题目标题不能为空");
        }
        if (excelData.getContent() == null || excelData.getContent().trim().isEmpty()) {
            throw new BusinessException("题目内容不能为空");
        }
        if (excelData.getType() == null || excelData.getType() < 0 || excelData.getType() > 4) {
            throw new BusinessException("题目类型必须为0(单选题)、1(多选题)、2(判断题)、3(填空题)或4(简答题)");
        }
        if (excelData.getDifficulty() == null || 
            excelData.getDifficulty() < 1 || 
            excelData.getDifficulty() > 3) {
            throw new BusinessException("难度级别必须为1(简单)、2(中等)或3(困难)");
        }
        if (excelData.getScore() == null || excelData.getScore() < 1 || excelData.getScore() > 100) {
            throw new BusinessException("分值必须在1-100之间");
        }
        // 根据题型执行特定验证和处理
        ArrayList<com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO> options = new ArrayList<>();
        switch (excelData.getType()) {
            case 0: // 单选题
            case 1: // 多选题
                options = validateAndBuildChoiceQuestionOptions(excelData);
                break;
            case 2: // 判断题
                options = validateAndBuildTrueFalseQuestionOptions(excelData);
                break;
            case 3: // 填空题
                validateFillBlankQuestion(excelData);
                // 填空题不需要选项
                break;
            case 4: // 简答题
                // 简答题不需要选项和正确答案，只需要题干和解析
                break;
        }
        // 创建并返回DTO
        return com.zhangziqi.online_course_mine.model.dto.QuestionDTO.builder()
                .title(excelData.getTitle())
                .content(excelData.getContent())
                .type(excelData.getType())
                .difficulty(excelData.getDifficulty())
                .score(excelData.getScore())
                .analysis(excelData.getAnalysis())
                .options(options)
                .answer(excelData.getCorrectAnswer())
                .build();
    }
    /**
     * 验证选择题并构建选项
     */
    private ArrayList<com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO> validateAndBuildChoiceQuestionOptions(
            QuestionExcelData excelData) {
        ArrayList<com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO> options = new ArrayList<>();
        String correctAnswer = excelData.getCorrectAnswer() != null ? excelData.getCorrectAnswer().toUpperCase() : "";
        // 验证选项和正确答案
        if (excelData.getOptionA() == null || excelData.getOptionA().trim().isEmpty() ||
            excelData.getOptionB() == null || excelData.getOptionB().trim().isEmpty()) {
            throw new BusinessException("选择题至少需要提供A、B两个选项");
        }
        if (correctAnswer == null || correctAnswer.trim().isEmpty()) {
            throw new BusinessException("正确答案不能为空");
        }
        // 单选题校验
        if (excelData.getType() == 0 && correctAnswer.length() > 1) {
            throw new BusinessException("单选题只能有一个正确答案");
        }
        // 多选题校验
        if (excelData.getType() == 1 && correctAnswer.length() < 2) {
            throw new BusinessException("多选题至少需要两个正确选项");
        }
        // 添加选项A
        options.add(com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO.builder()
                .content(excelData.getOptionA())
                .isCorrect(correctAnswer.contains("A"))
                .orderIndex(0)
                .build());
        // 添加选项B
        options.add(com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO.builder()
                .content(excelData.getOptionB())
                .isCorrect(correctAnswer.contains("B"))
                .orderIndex(1)
                .build());
        // 添加选项C（如果存在）
        if (excelData.getOptionC() != null && !excelData.getOptionC().trim().isEmpty()) {
            options.add(com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO.builder()
                    .content(excelData.getOptionC())
                    .isCorrect(correctAnswer.contains("C"))
                    .orderIndex(2)
                    .build());
        } else if (correctAnswer.contains("C")) {
            throw new BusinessException("选项C不存在，无法设为正确答案");
        }
        // 添加选项D（如果存在）
        if (excelData.getOptionD() != null && !excelData.getOptionD().trim().isEmpty()) {
            options.add(com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO.builder()
                    .content(excelData.getOptionD())
                    .isCorrect(correctAnswer.contains("D"))
                    .orderIndex(3)
                    .build());
        } else if (correctAnswer.contains("D")) {
            throw new BusinessException("选项D不存在，无法设为正确答案");
        }
        // 添加选项E（如果存在）
        if (excelData.getOptionE() != null && !excelData.getOptionE().trim().isEmpty()) {
            options.add(com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO.builder()
                    .content(excelData.getOptionE())
                    .isCorrect(correctAnswer.contains("E"))
                    .orderIndex(4)
                    .build());
        } else if (correctAnswer.contains("E")) {
            throw new BusinessException("选项E不存在，无法设为正确答案");
        }
        // 添加选项F（如果存在）
        if (excelData.getOptionF() != null && !excelData.getOptionF().trim().isEmpty()) {
            options.add(com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO.builder()
                    .content(excelData.getOptionF())
                    .isCorrect(correctAnswer.contains("F"))
                    .orderIndex(5)
                    .build());
        } else if (correctAnswer.contains("F")) {
            throw new BusinessException("选项F不存在，无法设为正确答案");
        }
        return options;
    }
    /**
     * 验证判断题并构建选项
     */
    private ArrayList<com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO> validateAndBuildTrueFalseQuestionOptions(
            QuestionExcelData excelData) {
        ArrayList<com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO> options = new ArrayList<>();
        String correctAnswer = excelData.getCorrectAnswer() != null ? excelData.getCorrectAnswer().toUpperCase() : "";
        // 判断题必须只有A和B两个选项，分别代表"正确"和"错误"
        if (excelData.getOptionA() == null || excelData.getOptionA().trim().isEmpty() ||
            excelData.getOptionB() == null || excelData.getOptionB().trim().isEmpty()) {
            throw new BusinessException("判断题必须提供A(正确)和B(错误)两个选项");
        }
        // 如果选项A不是"正确"，选项B不是"错误"，进行提示
        if (!"正确".equals(excelData.getOptionA()) || !"错误".equals(excelData.getOptionB())) {
            log.warn("判断题选项A应为'正确'，选项B应为'错误'");
        }
        // 正确答案校验，只能是A或B
        if (StringUtils.isBlank(correctAnswer) || 
            (!correctAnswer.equals("A") && !correctAnswer.equals("B"))) {
            throw new BusinessException("判断题答案只能是A(正确)或B(错误)");
        }
        // 添加选项A (正确)
        options.add(com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO.builder()
                .content(excelData.getOptionA())
                .isCorrect(correctAnswer.equals("A"))
                .orderIndex(0)
                .build());
        // 添加选项B (错误)
        options.add(com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO.builder()
                .content(excelData.getOptionB())
                .isCorrect(correctAnswer.equals("B"))
                .orderIndex(1)
                .build());
        return options;
    }
    /**
     * 验证填空题
     */
    private void validateFillBlankQuestion(QuestionExcelData excelData) {
        // 填空题必须有正确答案，但不需要选项
        if (StringUtils.isBlank(excelData.getCorrectAnswer())) {
            throw new BusinessException("填空题必须提供正确答案");
        }
    }
    /**
     * 创建单选题示例数据
     */
    private QuestionExcelData createSingleChoiceDemo() {
        QuestionExcelData data = QuestionExcelData.builder()
                .title("示例单选题")
                .content("下列哪个是Java的基本数据类型？")
                .type(0) // 单选题
                .difficulty(1) // 简单
                .score(5)
                .analysis("int是Java的基本数据类型，而String、Integer和ArrayList都是引用类型。")
                .optionA("String")
                .optionB("int")
                .optionC("Integer")
                .optionD("ArrayList")
                .correctAnswer("B")
                .tags("Java,基础")
                .build();
        // 验证示例数据
        try {
            convertToQuestionDTO(data);
        } catch (Exception e) {
            log.error("单选题示例数据验证失败：{}", e.getMessage());
            // 使用默认值
            data = QuestionExcelData.builder()
                    .title("示例单选题")
                    .content("1+1=?")
                    .type(0)
                    .difficulty(1)
                    .score(5)
                    .analysis("简单的加法运算")
                    .optionA("1")
                    .optionB("2")
                    .optionC("3")
                    .optionD("4")
                    .correctAnswer("B")
                    .tags("数学,基础")
                    .build();
        }
        return data;
    }
    /**
     * 创建多选题示例数据
     */
    private QuestionExcelData createMultipleChoiceDemo() {
        QuestionExcelData data = QuestionExcelData.builder()
                .title("示例多选题")
                .content("下列哪些是HTTP请求方法？")
                .type(1) // 多选题
                .difficulty(2) // 中等
                .score(10)
                .analysis("GET, POST, PUT, DELETE是HTTP请求方法，而SEND和RECEIVE不是标准HTTP方法。")
                .optionA("GET")
                .optionB("POST")
                .optionC("PUT")
                .optionD("DELETE")
                .optionE("SEND")
                .optionF("RECEIVE")
                .correctAnswer("ABCD")
                .tags("网络,HTTP")
                .build();
        // 验证示例数据
        try {
            convertToQuestionDTO(data);
        } catch (Exception e) {
            log.error("多选题示例数据验证失败：{}", e.getMessage());
            // 使用默认值
            data = QuestionExcelData.builder()
                    .title("示例多选题")
                    .content("以下哪些是偶数？")
                    .type(1)
                    .difficulty(2)
                    .score(10)
                    .analysis("2、4、6都是偶数")
                    .optionA("2")
                    .optionB("3")
                    .optionC("4")
                    .optionD("6")
                    .correctAnswer("ACD")
                    .tags("数学,基础")
                    .build();
        }
        return data;
    }
    /**
     * 创建判断题示例数据
     */
    private QuestionExcelData createTrueFalseDemo() {
        QuestionExcelData data = QuestionExcelData.builder()
                .title("示例判断题")
                .content("Java中，String类是基本数据类型。")
                .type(2) // 判断题
                .difficulty(1) // 简单
                .score(3)
                .analysis("Java中，String类是引用数据类型，不是基本数据类型。基本数据类型包括byte、short、int、long、float、double、boolean和char。")
                .optionA("正确")
                .optionB("错误")
                .correctAnswer("B")
                .tags("Java,基础")
                .build();
        // 验证示例数据
        try {
            convertToQuestionDTO(data);
        } catch (Exception e) {
            log.error("判断题示例数据验证失败：{}", e.getMessage());
            // 使用默认值
            data = QuestionExcelData.builder()
                    .title("示例判断题")
                    .content("1+1=2")
                    .type(2)
                    .difficulty(1)
                    .score(3)
                    .analysis("这是一个基本的数学事实")
                    .optionA("正确")
                    .optionB("错误")
                    .correctAnswer("A")
                    .tags("数学,基础")
                    .build();
        }
        return data;
    }
    /**
     * 创建填空题示例数据
     */
    private QuestionExcelData createFillBlankDemo() {
        QuestionExcelData data = QuestionExcelData.builder()
                .title("示例填空题")
                .content("SQL查询语句中，用于限制结果集行数的关键字是____。")
                .type(3) // 填空题
                .difficulty(2) // 中等
                .score(5)
                .analysis("SQL中，LIMIT关键字用于限制查询结果返回的行数。例如：SELECT * FROM users LIMIT 10 表示只返回前10条记录。")
                .correctAnswer("LIMIT")
                .tags("数据库,SQL")
                .build();
        // 验证示例数据
        try {
            convertToQuestionDTO(data);
        } catch (Exception e) {
            log.error("填空题示例数据验证失败：{}", e.getMessage());
            // 使用默认值
            data = QuestionExcelData.builder()
                    .title("示例填空题")
                    .content("1+1=____")
                    .type(3)
                    .difficulty(1)
                    .score(5)
                    .analysis("简单的加法运算")
                    .correctAnswer("2")
                    .tags("数学,基础")
                    .build();
        }
        return data;
    }
    /**
     * 创建简答题示例数据
     */
    private QuestionExcelData createShortAnswerDemo() {
        QuestionExcelData data = QuestionExcelData.builder()
                .title("示例简答题")
                .content("简述Java中的垃圾回收机制及其工作原理。")
                .type(4) // 简答题
                .difficulty(3) // 困难
                .score(15)
                .analysis("Java的垃圾回收(GC)是自动内存管理的一种机制，它的工作原理主要包括标记、清除和压缩三个阶段。JVM通过可达性分析判断对象是否可回收，采用分代回收策略提高效率。常见的垃圾回收算法有标记-清除算法、复制算法、标记-整理算法和分代收集算法等。")
                .tags("Java,JVM,高级")
                .build();
        // 验证示例数据
        try {
            convertToQuestionDTO(data);
        } catch (Exception e) {
            log.error("简答题示例数据验证失败：{}", e.getMessage());
            // 使用默认值
            data = QuestionExcelData.builder()
                    .title("示例简答题")
                    .content("简述1+1=2的原理")
                    .type(4)
                    .difficulty(1)
                    .score(10)
                    .analysis("这是一个基本的数学运算，可以通过数轴或实物演示来理解")
                    .tags("数学,基础")
                    .build();
        }
        return data;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/QuestionServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.QuestionDTO;
import com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Question;
import com.zhangziqi.online_course_mine.model.entity.QuestionOption;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.QuestionType;
import com.zhangziqi.online_course_mine.model.vo.QuestionOptionVO;
import com.zhangziqi.online_course_mine.model.vo.QuestionTagVO;
import com.zhangziqi.online_course_mine.model.vo.QuestionVO;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.QuestionOptionRepository;
import com.zhangziqi.online_course_mine.repository.QuestionRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.repository.QuestionGroupItemRepository;
import com.zhangziqi.online_course_mine.service.QuestionService;
import com.zhangziqi.online_course_mine.service.QuestionTagService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.PageImpl;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import java.util.stream.Collectors;
/**
 * 题目服务实现类
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class QuestionServiceImpl implements QuestionService {
    private final QuestionRepository questionRepository;
    private final QuestionOptionRepository optionRepository;
    private final InstitutionRepository institutionRepository;
    private final UserRepository userRepository;
    private final QuestionTagService questionTagService;
    private final QuestionGroupItemRepository questionGroupItemRepository;
    /**
     * 创建题目
     */
    @Override
    @Transactional
    public QuestionVO createQuestion(QuestionDTO questionDTO, Long creatorId) {
        // 验证机构是否存在
        Institution institution = institutionRepository.findById(questionDTO.getInstitutionId())
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在"));
        // 验证创建者是否存在
        User creator = userRepository.findById(creatorId)
                .orElseThrow(() -> new ResourceNotFoundException("用户不存在"));
        // 验证题目类型
        validateQuestionType(questionDTO.getType());
        // 验证选项
        validateOptions(questionDTO);
        try {
            // 创建题目实体
            Question question = Question.builder()
                    .institution(institution)
                    .title(questionDTO.getTitle())
                    .content(questionDTO.getContent())
                    .type(questionDTO.getType())
                    .difficulty(questionDTO.getDifficulty())
                    .score(questionDTO.getScore())
                    .analysis(questionDTO.getAnalysis())
                    .creatorId(creatorId)
                    .creatorName(creator.getName())
                    .build();
            // 保存题目
            Question savedQuestion = questionRepository.save(question);
            // 保存选项
            List<QuestionOption> options = saveOptions(questionDTO.getOptions(), savedQuestion);
            // 构建响应对象
            return buildQuestionVO(savedQuestion, options);
        } catch (DataIntegrityViolationException e) {
            log.error("创建题目失败", e);
            throw new BusinessException("创建题目失败：数据完整性异常");
        } catch (Exception e) {
            log.error("创建题目失败", e);
            throw new BusinessException("创建题目失败：" + e.getMessage());
        }
    }
    /**
     * 更新题目
     */
    @Override
    @Transactional
    public QuestionVO updateQuestion(QuestionDTO questionDTO, Long userId) {
        // 验证题目是否存在
        Question existingQuestion = questionRepository.findByIdAndInstitutionId(
                        questionDTO.getId(), questionDTO.getInstitutionId())
                .orElseThrow(() -> new ResourceNotFoundException("题目不存在"));
        // 验证权限（只有题目创建者或管理员可以修改）
        if (!existingQuestion.getCreatorId().equals(userId)) {
            // 此处可增加管理员权限检查
            throw new BusinessException("无权限修改此题目");
        }
        // 验证题目类型
        validateQuestionType(questionDTO.getType());
        // 验证选项
        validateOptions(questionDTO);
        try {
            // 更新题目属性
            existingQuestion.setTitle(questionDTO.getTitle());
            existingQuestion.setContent(questionDTO.getContent());
            existingQuestion.setType(questionDTO.getType());
            existingQuestion.setDifficulty(questionDTO.getDifficulty());
            existingQuestion.setScore(questionDTO.getScore());
            existingQuestion.setAnalysis(questionDTO.getAnalysis());
            // 保存更新的题目
            Question updatedQuestion = questionRepository.save(existingQuestion);
            // 删除现有选项
            optionRepository.deleteByQuestionId(updatedQuestion.getId());
            // 保存新选项
            List<QuestionOption> options = saveOptions(questionDTO.getOptions(), updatedQuestion);
            // 构建响应对象
            return buildQuestionVO(updatedQuestion, options);
        } catch (Exception e) {
            log.error("更新题目失败", e);
            throw new BusinessException("更新题目失败：" + e.getMessage());
        }
    }
    /**
     * 根据ID查询题目详情
     */
    @Override
    public QuestionVO getQuestionById(Long questionId, Long institutionId) {
        // 获取题目
        Question question = questionRepository.findByIdAndInstitutionId(questionId, institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("题目不存在"));
        // 获取题目选项
        List<QuestionOption> options = optionRepository.findByQuestionIdOrderByOrderIndexAsc(questionId);
        // 构建响应对象
        return buildQuestionVO(question, options);
    }
    /**
     * 删除题目
     */
    @Override
    @Transactional
    public void deleteQuestion(Long questionId, Long institutionId, Long userId) {
        // 获取题目
        Question question = questionRepository.findByIdAndInstitutionId(questionId, institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("题目不存在"));
        // 验证权限（只有题目创建者或管理员可以删除）
        if (!question.getCreatorId().equals(userId)) {
            // 此处可增加管理员权限检查
            throw new BusinessException("无权限删除此题目");
        }
        try {
            // 删除题目选项
            optionRepository.deleteByQuestionId(questionId);
            // 删除题目
            questionRepository.delete(question);
        } catch (Exception e) {
            log.error("删除题目失败", e);
            throw new BusinessException("删除题目失败：" + e.getMessage());
        }
    }
    /**
     * 分页查询题目列表
     */
    @Override
    public Page<QuestionVO> getQuestions(Long institutionId, Integer type, Integer difficulty, String keyword, List<Long> tagIds, Pageable pageable) {
        // 获取机构
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在"));
        // 添加调试日志记录搜索参数
        log.debug("搜索题目 - 机构ID: {}, 关键词: '{}', 类型: {}, 难度: {}, 标签IDs: {}, 页码: {}, 每页数量: {}", 
                institutionId, keyword, type, difficulty, tagIds, pageable.getPageNumber(), pageable.getPageSize());
        Page<Question> questionPage;
        // 如果有标签筛选，优先处理标签搜索
        if (tagIds != null && !tagIds.isEmpty()) {
            // 获取含有指定标签的题目ID列表
            log.debug("根据标签ID过滤: {}", tagIds);
            // 通过QuestionTagMapping表查询带有指定标签的题目
            List<Long> questionIdsWithTags = questionRepository.findQuestionIdsByTagIds(tagIds, (long)tagIds.size());
            if (questionIdsWithTags.isEmpty()) {
                // 如果没有符合标签条件的题目，返回空结果
                log.debug("没有找到包含所有指定标签的题目");
                return Page.empty(pageable);
            }
            // 根据标签和其他条件筛选题目
            questionPage = questionRepository.findByIdInAndInstitution(questionIdsWithTags, institution, pageable);
            // 如果还有其他筛选条件，需要在内存中进一步过滤
            if (type != null || difficulty != null || (keyword != null && !keyword.trim().isEmpty())) {
                List<Question> filteredQuestions = questionPage.getContent();
                // 过滤类型
                if (type != null) {
                    filteredQuestions = filteredQuestions.stream()
                        .filter(q -> q.getType().equals(type))
                        .collect(Collectors.toList());
                }
                // 过滤难度
                if (difficulty != null) {
                    filteredQuestions = filteredQuestions.stream()
                        .filter(q -> q.getDifficulty().equals(difficulty))
                        .collect(Collectors.toList());
                }
                // 过滤关键词
                if (keyword != null && !keyword.trim().isEmpty()) {
                    String lowercaseKeyword = keyword.trim().toLowerCase();
                    filteredQuestions = filteredQuestions.stream()
                        .filter(q -> 
                            (q.getTitle() != null && q.getTitle().toLowerCase().contains(lowercaseKeyword)) ||
                            (q.getContent() != null && q.getContent().toLowerCase().contains(lowercaseKeyword))
                        )
                        .collect(Collectors.toList());
                }
                // 将过滤后的结果转换为Page对象
                int start = (int)pageable.getOffset();
                int end = Math.min((start + pageable.getPageSize()), filteredQuestions.size());
                if (start > filteredQuestions.size()) {
                    return Page.empty(pageable);
                }
                List<Question> pageContent = filteredQuestions.subList(start, end);
                return new PageImpl<>(
                    pageContent.stream()
                        .map(question -> {
                            List<QuestionOption> options = optionRepository.findByQuestionIdOrderByOrderIndexAsc(question.getId());
                            return buildQuestionVO(question, options);
                        })
                        .collect(Collectors.toList()),
                    pageable,
                    filteredQuestions.size()
                );
            }
        } else if (keyword != null && !keyword.trim().isEmpty()) {
            // 根据关键词搜索
            log.debug("执行关键词搜索: '{}'", keyword.trim());
            questionPage = questionRepository.searchByKeyword(institution, keyword.trim(), pageable);
            log.debug("搜索结果数量: {}", questionPage.getTotalElements());
        } else if (type != null) {
            // 根据类型过滤
            log.debug("根据类型过滤: {}", type);
            questionPage = questionRepository.findByInstitutionAndType(institution, type, pageable);
        } else if (difficulty != null) {
            // 根据难度过滤
            log.debug("根据难度过滤: {}", difficulty);
            questionPage = questionRepository.findByInstitutionAndDifficulty(institution, difficulty, pageable);
        } else {
            // 查询所有题目
            log.debug("查询所有题目");
            questionPage = questionRepository.findByInstitution(institution, pageable);
        }
        // 转换为VO对象
        return questionPage.map(question -> {
            List<QuestionOption> options = optionRepository.findByQuestionIdOrderByOrderIndexAsc(question.getId());
            return buildQuestionVO(question, options);
        });
    }
    /**
     * 兼容旧API，不带标签参数的查询
     */
    @Override
    public Page<QuestionVO> getQuestions(Long institutionId, Integer type, Integer difficulty, String keyword, Pageable pageable) {
        // 调用带标签参数的方法，传入null表示不按标签筛选
        return getQuestions(institutionId, type, difficulty, keyword, null, pageable);
    }
    /**
     * 随机获取指定数量的题目
     */
    @Override
    public List<QuestionVO> getRandomQuestions(Long institutionId, Integer type, int count) {
        // 获取随机题目
        List<Question> questions = questionRepository.findRandomQuestions(institutionId, type, count);
        // 转换为VO对象
        return questions.stream()
                .map(question -> {
                    List<QuestionOption> options = optionRepository.findByQuestionIdOrderByOrderIndexAsc(question.getId());
                    return buildQuestionVO(question, options);
                })
                .collect(Collectors.toList());
    }
    /**
     * 根据ID列表批量获取题目
     */
    @Override
    public List<QuestionVO> getQuestionsByIds(List<Long> questionIds) {
        if (questionIds == null || questionIds.isEmpty()) {
            return List.of();
        }
        // 查询题目
        List<Question> questions = questionRepository.findAllById(questionIds);
        // 转换为VO对象
        return questions.stream()
                .map(question -> {
                    List<QuestionOption> options = optionRepository.findByQuestionIdOrderByOrderIndexAsc(question.getId());
                    return buildQuestionVO(question, options);
                })
                .collect(Collectors.toList());
    }
    /**
     * 保存题目选项
     */
    private List<QuestionOption> saveOptions(List<QuestionOptionDTO> optionDTOs, Question question) {
        List<QuestionOption> options = optionDTOs.stream()
                .map(dto -> QuestionOption.builder()
                        .question(question)
                        .content(dto.getContent())
                        .isCorrect(dto.getIsCorrect())
                        .orderIndex(dto.getOrderIndex())
                        .build())
                .collect(Collectors.toList());
        return optionRepository.saveAll(options);
    }
    /**
     * 验证题目类型
     */
    private void validateQuestionType(Integer type) {
        try {
            QuestionType.getByValue(type);
        } catch (IllegalArgumentException e) {
            throw new BusinessException("无效的题目类型");
        }
    }
    /**
     * 验证选项
     */
    private void validateOptions(QuestionDTO questionDTO) {
        // 根据题型进行不同的验证
        switch (QuestionType.getByValue(questionDTO.getType())) {
            case SINGLE_CHOICE:
            case MULTIPLE_CHOICE:
                // 选择题至少需要两个选项
                if (questionDTO.getOptions() == null || questionDTO.getOptions().size() < 2) {
                    throw new BusinessException("选择题至少需要两个选项");
                }
                // 验证正确选项的数量
                long correctOptionsCount = questionDTO.getOptions().stream()
                        .filter(QuestionOptionDTO::getIsCorrect)
                        .count();
                if (correctOptionsCount == 0) {
                    throw new BusinessException("至少需要一个正确选项");
                }
                // 单选题只能有一个正确选项
                if (questionDTO.getType().equals(QuestionType.SINGLE_CHOICE.getValue()) && correctOptionsCount > 1) {
                    throw new BusinessException("单选题只能有一个正确选项");
                }
                // 多选题至少需要两个正确选项
                if (questionDTO.getType().equals(QuestionType.MULTIPLE_CHOICE.getValue()) && correctOptionsCount < 2) {
                    throw new BusinessException("多选题至少需要两个正确选项");
                }
                break;
            case TRUE_FALSE:
                // 判断题必须有且只有两个选项：正确和错误
                if (questionDTO.getOptions() == null || questionDTO.getOptions().size() != 2) {
                    throw new BusinessException("判断题必须有两个选项");
                }
                // 验证选项内容
                boolean hasTrue = false;
                boolean hasFalse = false;
                for (QuestionOptionDTO option : questionDTO.getOptions()) {
                    if ("正确".equals(option.getContent())) {
                        hasTrue = true;
                    } else if ("错误".equals(option.getContent())) {
                        hasFalse = true;
                    }
                }
                if (!hasTrue || !hasFalse) {
                    throw new BusinessException("判断题的选项必须是'正确'和'错误'");
                }
                // 验证正确答案数量
                long trueFalseCorrectCount = questionDTO.getOptions().stream()
                        .filter(QuestionOptionDTO::getIsCorrect)
                        .count();
                if (trueFalseCorrectCount != 1) {
                    throw new BusinessException("判断题必须有且只有一个正确答案");
                }
                break;
            case FILL_BLANK:
                // 填空题不需要选项，但需要答案
                if (questionDTO.getAnswer() == null || questionDTO.getAnswer().trim().isEmpty()) {
                    throw new BusinessException("填空题必须提供正确答案");
                }
                break;
            case SHORT_ANSWER:
                // 简答题不需要选项，答案可选
                break;
            default:
                throw new BusinessException("未知的题目类型");
        }
    }
    /**
     * 构建题目视图对象
     */
    private QuestionVO buildQuestionVO(Question question, List<QuestionOption> options) {
        // 获取题目类型描述
        String typeDesc = QuestionType.getByValue(question.getType()).getDescription();
        // 获取难度描述
        String difficultyDesc = switch (question.getDifficulty()) {
            case 1 -> "简单";
            case 2 -> "中等";
            case 3 -> "困难";
            default -> "未知";
        };
        // 构建选项VO列表
        List<QuestionOptionVO> optionVOs = options.stream()
                .map(option -> QuestionOptionVO.builder()
                        .id(option.getId())
                        .content(option.getContent())
                        .isCorrect(option.getIsCorrect())
                        .questionId(option.getQuestion().getId())
                        .orderIndex(option.getOrderIndex())
                        .build())
                .collect(Collectors.toList());
        // 获取题目标签
        List<QuestionTagVO> tags = questionTagService.getTagsByQuestionId(question.getId());
        // 构建题目VO
        return QuestionVO.builder()
                .id(question.getId())
                .institutionId(question.getInstitutionId())
                .title(question.getTitle())
                .content(question.getContent())
                .type(question.getType())
                .typeDesc(typeDesc)
                .difficulty(question.getDifficulty())
                .difficultyDesc(difficultyDesc)
                .score(question.getScore())
                .analysis(question.getAnalysis())
                .answer(question.getAnswer())
                .options(optionVOs)
                .tags(tags)
                .creatorId(question.getCreatorId())
                .creatorName(question.getCreatorName())
                .createdTime(question.getCreatedTime())
                .updatedTime(question.getUpdatedTime())
                .build();
    }
    /**
     * 检查题目是否被题组引用
     */
    @Override
    public boolean isQuestionReferencedByGroups(Long questionId, Long institutionId) {
        // 验证题目是否存在
        Question question = questionRepository.findByIdAndInstitutionId(questionId, institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("题目不存在"));
        // 检查是否有题组项引用了此题目
        long count = questionGroupItemRepository.countByQuestionId(questionId);
        return count > 0;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/QuestionTagServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.QuestionTagDTO;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Question;
import com.zhangziqi.online_course_mine.model.entity.QuestionTag;
import com.zhangziqi.online_course_mine.model.entity.QuestionTagMapping;
import com.zhangziqi.online_course_mine.model.vo.QuestionTagVO;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.QuestionRepository;
import com.zhangziqi.online_course_mine.repository.QuestionTagMappingRepository;
import com.zhangziqi.online_course_mine.repository.QuestionTagRepository;
import com.zhangziqi.online_course_mine.service.QuestionTagService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
/**
 * 题目标签服务实现类
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class QuestionTagServiceImpl implements QuestionTagService {
    private final QuestionTagRepository tagRepository;
    private final QuestionTagMappingRepository tagMappingRepository;
    private final QuestionRepository questionRepository;
    private final InstitutionRepository institutionRepository;
    /**
     * 创建题目标签
     */
    @Override
    @Transactional
    public QuestionTagVO createTag(QuestionTagDTO tagDTO, Long creatorId) {
        // 验证机构是否存在
        Institution institution = institutionRepository.findById(tagDTO.getInstitutionId())
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在"));
        // 验证标签名称是否重复
        Optional<QuestionTag> existingTag = tagRepository.findByInstitutionAndName(institution, tagDTO.getName());
        if (existingTag.isPresent()) {
            throw new BusinessException("标签名称已存在");
        }
        try {
            // 创建标签实体
            QuestionTag tag = QuestionTag.builder()
                    .institution(institution)
                    .name(tagDTO.getName())
                    .creatorId(creatorId)
                    .build();
            // 保存标签
            QuestionTag savedTag = tagRepository.save(tag);
            // 构建响应对象
            return buildTagVO(savedTag, 0L);
        } catch (DataIntegrityViolationException e) {
            log.error("创建标签失败", e);
            throw new BusinessException("创建标签失败：数据完整性异常");
        } catch (Exception e) {
            log.error("创建标签失败", e);
            throw new BusinessException("创建标签失败：" + e.getMessage());
        }
    }
    /**
     * 更新题目标签
     */
    @Override
    @Transactional
    public QuestionTagVO updateTag(QuestionTagDTO tagDTO) {
        // 验证标签是否存在
        QuestionTag existingTag = tagRepository.findByIdAndInstitutionId(tagDTO.getId(), tagDTO.getInstitutionId())
                .orElseThrow(() -> new ResourceNotFoundException("标签不存在"));
        // 验证标签名称是否重复（排除自身）
        if (!existingTag.getName().equals(tagDTO.getName())) {
            Optional<QuestionTag> tagWithSameName = tagRepository.findByInstitutionAndName(existingTag.getInstitution(), tagDTO.getName());
            if (tagWithSameName.isPresent() && !tagWithSameName.get().getId().equals(existingTag.getId())) {
                throw new BusinessException("标签名称已存在");
            }
        }
        try {
            // 更新标签属性
            existingTag.setName(tagDTO.getName());
            // 保存更新的标签
            QuestionTag updatedTag = tagRepository.save(existingTag);
            // 获取标签关联的题目数量
            long questionCount = tagMappingRepository.countQuestionsByTagId(updatedTag.getId());
            // 构建响应对象
            return buildTagVO(updatedTag, questionCount);
        } catch (Exception e) {
            log.error("更新标签失败", e);
            throw new BusinessException("更新标签失败：" + e.getMessage());
        }
    }
    /**
     * 根据ID查询标签详情
     */
    @Override
    public QuestionTagVO getTagById(Long tagId, Long institutionId) {
        // 获取标签
        QuestionTag tag = tagRepository.findByIdAndInstitutionId(tagId, institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("标签不存在"));
        // 获取标签关联的题目数量
        long questionCount = tagMappingRepository.countQuestionsByTagId(tagId);
        // 构建响应对象
        return buildTagVO(tag, questionCount);
    }
    /**
     * 删除标签
     */
    @Override
    @Transactional
    public void deleteTag(Long tagId, Long institutionId) {
        // 验证标签是否存在
        QuestionTag tag = tagRepository.findByIdAndInstitutionId(tagId, institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("标签不存在"));
        try {
            // 删除标签的所有映射
            tagMappingRepository.deleteByTagId(tagId);
            // 删除标签
            tagRepository.delete(tag);
        } catch (Exception e) {
            log.error("删除标签失败", e);
            throw new BusinessException("删除标签失败：" + e.getMessage());
        }
    }
    /**
     * 分页查询标签列表
     */
    @Override
    public Page<QuestionTagVO> getTags(Long institutionId, String keyword, Pageable pageable) {
        // 获取机构
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在"));
        Page<QuestionTag> tagPage;
        if (keyword != null && !keyword.trim().isEmpty()) {
            // 根据关键词搜索
            tagPage = tagRepository.searchByKeyword(institution, keyword.trim(), pageable);
        } else {
            // 查询所有标签
            tagPage = tagRepository.findByInstitution(institution, pageable);
        }
        // 转换为VO对象
        return tagPage.map(tag -> {
            // 获取标签关联的题目数量
            long questionCount = tagMappingRepository.countQuestionsByTagId(tag.getId());
            return buildTagVO(tag, questionCount);
        });
    }
    /**
     * 获取机构的所有标签
     */
    @Override
    public List<QuestionTagVO> getAllTags(Long institutionId) {
        // 查询机构的所有标签
        List<QuestionTag> tags = tagRepository.findAllByInstitutionId(institutionId);
        // 转换为VO对象
        return tags.stream().map(tag -> {
            // 获取标签关联的题目数量
            long questionCount = tagMappingRepository.countQuestionsByTagId(tag.getId());
            return buildTagVO(tag, questionCount);
        }).collect(Collectors.toList());
    }
    /**
     * 根据题目ID获取相关标签
     */
    @Override
    public List<QuestionTagVO> getTagsByQuestionId(Long questionId) {
        // 查询题目的所有标签
        List<QuestionTag> tags = tagRepository.findByQuestionId(questionId);
        // 转换为VO对象
        return tags.stream().map(tag -> {
            // 获取标签关联的题目数量
            long questionCount = tagMappingRepository.countQuestionsByTagId(tag.getId());
            return buildTagVO(tag, questionCount);
        }).collect(Collectors.toList());
    }
    /**
     * 为题目添加标签
     */
    @Override
    @Transactional
    public boolean addTagToQuestion(Long questionId, Long tagId, Long institutionId) {
        try {
            // 验证题目是否存在
            Question question = questionRepository.findByIdAndInstitutionId(questionId, institutionId)
                    .orElseThrow(() -> new ResourceNotFoundException("题目不存在"));
            // 验证标签是否存在
            QuestionTag tag = tagRepository.findByIdAndInstitutionId(tagId, institutionId)
                    .orElseThrow(() -> new ResourceNotFoundException("标签不存在"));
            // 验证映射是否已存在
            Optional<QuestionTagMapping> existingMapping = tagMappingRepository.findByQuestionAndTag(question, tag);
            if (existingMapping.isPresent()) {
                // 映射已存在，无需重复添加
                return true;
            }
            // 创建并保存映射
            QuestionTagMapping mapping = QuestionTagMapping.builder()
                    .question(question)
                    .tag(tag)
                    .build();
            tagMappingRepository.save(mapping);
            return true;
        } catch (Exception e) {
            log.error("为题目添加标签失败", e);
            if (e instanceof ResourceNotFoundException) {
                throw e;
            }
            throw new BusinessException("为题目添加标签失败：" + e.getMessage());
        }
    }
    /**
     * 移除题目标签
     */
    @Override
    @Transactional
    public boolean removeTagFromQuestion(Long questionId, Long tagId, Long institutionId) {
        try {
            // 验证题目是否存在
            questionRepository.findByIdAndInstitutionId(questionId, institutionId)
                    .orElseThrow(() -> new ResourceNotFoundException("题目不存在"));
            // 验证标签是否存在
            tagRepository.findByIdAndInstitutionId(tagId, institutionId)
                    .orElseThrow(() -> new ResourceNotFoundException("标签不存在"));
            // 删除映射
            tagMappingRepository.deleteByQuestionIdAndTagId(questionId, tagId);
            return true;
        } catch (Exception e) {
            log.error("移除题目标签失败", e);
            if (e instanceof ResourceNotFoundException) {
                throw e;
            }
            throw new BusinessException("移除题目标签失败：" + e.getMessage());
        }
    }
    /**
     * 根据名称查询标签详情
     */
    @Override
    public QuestionTagVO getTagByName(Long institutionId, String name) {
        // 获取机构
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在"));
        // 查找标签
        QuestionTag tag = tagRepository.findByInstitutionAndName(institution, name)
                .orElseThrow(() -> new ResourceNotFoundException("标签不存在"));
        // 获取标签关联的题目数量
        long questionCount = tagMappingRepository.countQuestionsByTagId(tag.getId());
        // 构建响应对象
        return buildTagVO(tag, questionCount);
    }
    /**
     * 构建标签视图对象
     */
    private QuestionTagVO buildTagVO(QuestionTag tag, Long questionCount) {
        return QuestionTagVO.builder()
                .id(tag.getId())
                .institutionId(tag.getInstitutionId())
                .name(tag.getName())
                .questionCount(questionCount)
                .creatorId(tag.getCreatorId())
                .createdTime(tag.getCreatedTime())
                .updatedTime(tag.getUpdatedTime())
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/RoleServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.RoleDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.vo.RoleVO;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.RoleService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
/**
 * 角色服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class RoleServiceImpl implements RoleService {
    private final RoleRepository roleRepository;
    private final PermissionRepository permissionRepository;
    private final UserRepository userRepository;
    /**
     * 获取角色列表
     *
     * @return 角色列表
     */
    @Override
    @Transactional(readOnly = true)
    public List<RoleVO> getRoleList() {
        List<Role> roles = roleRepository.findAll();
        return roles.stream()
                .map(this::convertToRoleVO)
                .collect(Collectors.toList());
    }
    /**
     * 获取角色详情
     *
     * @param id 角色ID
     * @return 角色详情
     */
    @Override
    @Transactional(readOnly = true)
    public RoleVO getRoleById(Long id) {
        Role role = roleRepository.findById(id)
                .orElseThrow(() -> new BusinessException("角色不存在"));
        return convertToRoleVO(role);
    }
    /**
     * 获取角色（根据编码）
     *
     * @param code 角色编码
     * @return 角色
     */
    @Override
    @Transactional(readOnly = true)
    public Role getRoleByCode(String code) {
        return roleRepository.findByCode(code)
                .orElseThrow(() -> new BusinessException("角色不存在"));
    }
    /**
     * 创建角色
     *
     * @param roleDTO 角色信息
     * @return 创建后的角色信息
     */
    @Override
    @Transactional
    public RoleVO createRole(RoleDTO roleDTO) {
        // 检查角色编码是否存在
        if (roleRepository.findByCode(roleDTO.getCode()).isPresent()) {
            throw new BusinessException("角色编码已存在");
        }
        // 检查角色名称是否存在
        if (roleRepository.findByName(roleDTO.getName()).isPresent()) {
            throw new BusinessException("角色名称已存在");
        }
        // 获取权限
        Set<Permission> permissions = new HashSet<>();
        if (roleDTO.getPermissionIds() != null && !roleDTO.getPermissionIds().isEmpty()) {
            permissions = roleDTO.getPermissionIds().stream()
                    .map(permissionId -> permissionRepository.findById(permissionId)
                            .orElseThrow(() -> new BusinessException("权限不存在: " + permissionId)))
                    .collect(Collectors.toSet());
        }
        // 创建角色
        Role role = Role.builder()
                .name(roleDTO.getName())
                .code(roleDTO.getCode())
                .description(roleDTO.getDescription())
                .permissions(permissions)
                .build();
        // 保存角色
        Role savedRole = roleRepository.save(role);
        log.info("创建角色成功: {}", savedRole.getName());
        return convertToRoleVO(savedRole);
    }
    /**
     * 更新角色
     *
     * @param id      角色ID
     * @param roleDTO 角色信息
     * @return 更新后的角色信息
     */
    @Override
    @Transactional
    public RoleVO updateRole(Long id, RoleDTO roleDTO) {
        Role role = roleRepository.findById(id)
                .orElseThrow(() -> new BusinessException("角色不存在"));
        // 检查角色编码是否存在
        if (StringUtils.hasText(roleDTO.getCode()) &&
                !role.getCode().equals(roleDTO.getCode()) &&
                roleRepository.findByCode(roleDTO.getCode()).isPresent()) {
            throw new BusinessException("角色编码已存在");
        }
        // 检查角色名称是否存在
        if (StringUtils.hasText(roleDTO.getName()) &&
                !role.getName().equals(roleDTO.getName()) &&
                roleRepository.findByName(roleDTO.getName()).isPresent()) {
            throw new BusinessException("角色名称已存在");
        }
        // 更新权限
        if (roleDTO.getPermissionIds() != null) {
            Set<Permission> permissions = roleDTO.getPermissionIds().stream()
                    .map(permissionId -> permissionRepository.findById(permissionId)
                            .orElseThrow(() -> new BusinessException("权限不存在: " + permissionId)))
                    .collect(Collectors.toSet());
            role.setPermissions(permissions);
        }
        // 更新基本信息
        if (StringUtils.hasText(roleDTO.getName())) {
            role.setName(roleDTO.getName());
        }
        if (StringUtils.hasText(roleDTO.getCode())) {
            role.setCode(roleDTO.getCode());
        }
        if (StringUtils.hasText(roleDTO.getDescription())) {
            role.setDescription(roleDTO.getDescription());
        }
        // 保存角色
        Role savedRole = roleRepository.save(role);
        log.info("更新角色成功: {}", savedRole.getName());
        return convertToRoleVO(savedRole);
    }
    /**
     * 删除角色
     *
     * @param id 角色ID
     */
    @Override
    @Transactional
    public void deleteRole(Long id) {
        Role role = roleRepository.findById(id)
                .orElseThrow(() -> new BusinessException("角色不存在"));
        // 检查角色是否被用户引用
        if (userRepository.findAll().stream().anyMatch(user -> user.getRoles().contains(role))) {
            throw new BusinessException("角色已被用户引用，无法删除");
        }
        roleRepository.delete(role);
        log.info("删除角色成功: {}", role.getName());
    }
    /**
     * 给角色分配权限
     *
     * @param roleId        角色ID
     * @param permissionIds 权限ID列表
     * @return 更新后的角色信息
     */
    @Override
    @Transactional
    public RoleVO assignPermissions(Long roleId, Set<Long> permissionIds) {
        Role role = roleRepository.findById(roleId)
                .orElseThrow(() -> new BusinessException("角色不存在"));
        if (permissionIds == null || permissionIds.isEmpty()) {
            throw new BusinessException("权限ID列表不能为空");
        }
        Set<Permission> permissions = permissionIds.stream()
                .map(permissionId -> permissionRepository.findById(permissionId)
                        .orElseThrow(() -> new BusinessException("权限不存在: " + permissionId)))
                .collect(Collectors.toSet());
        role.setPermissions(permissions);
        Role savedRole = roleRepository.save(role);
        log.info("给角色分配权限成功: {}, 权限IDs: {}", savedRole.getName(), permissionIds);
        return convertToRoleVO(savedRole);
    }
    /**
     * 批量删除角色
     *
     * @param ids 角色ID列表
     */
    @Override
    @Transactional
    public void batchDeleteRoles(List<Long> ids) {
        if (ids == null || ids.isEmpty()) {
            throw new BusinessException("角色ID列表不能为空");
        }
        for (Long id : ids) {
            deleteRole(id);
        }
    }
    /**
     * 转换为角色VO
     *
     * @param role 角色实体
     * @return 角色VO
     */
    private RoleVO convertToRoleVO(Role role) {
        return RoleVO.builder()
                .id(role.getId())
                .name(role.getName())
                .code(role.getCode())
                .description(role.getDescription())
                .createdAt(role.getCreatedAt())
                .updatedAt(role.getUpdatedAt())
                .permissions(role.getPermissions())
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/S3MultipartUploadManager.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.config.S3Config;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.media.PresignedUrlInfo;
import com.zhangziqi.online_course_mine.model.dto.media.UploadStatusInfo;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.*;
import software.amazon.awssdk.services.s3.presigner.S3Presigner;
import software.amazon.awssdk.services.s3.presigner.model.PresignedPutObjectRequest;
import software.amazon.awssdk.services.s3.presigner.model.PutObjectPresignRequest;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
/**
 * S3分片上传管理器
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class S3MultipartUploadManager {
    private final S3Client s3Client;
    private final S3Presigner s3Presigner;
    private final S3Config s3Config;
    /**
     * 初始化分片上传
     * 
     * @param objectKey 对象键
     * @param contentType 内容类型
     * @return 上传ID
     */
    public String initiateMultipartUpload(String objectKey, String contentType) {
        try {
            // 确保存储桶存在
            checkAndCreateBucket();
            // 初始化分片上传请求
            CreateMultipartUploadRequest createRequest = CreateMultipartUploadRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .key(objectKey)
                    .contentType(contentType)
                    .build();
            // 发送请求
            CreateMultipartUploadResponse response = s3Client.createMultipartUpload(createRequest);
            log.info("已初始化分片上传: uploadId={}, objectKey={}", response.uploadId(), objectKey);
            return response.uploadId();
        } catch (Exception e) {
            log.error("初始化分片上传失败", e);
            throw new BusinessException(500, "初始化上传失败: " + e.getMessage());
        }
    }
    /**
     * 为分片生成预签名上传URL
     * 
     * @param uploadId 上传ID
     * @param objectKey 对象键
     * @param partNumber 分片编号
     * @return 预签名URL
     */
    public String generatePresignedUrlForPart(String uploadId, String objectKey, int partNumber) {
        try {
            // 构建上传分片请求
            UploadPartRequest uploadPartRequest = UploadPartRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .key(objectKey)
                    .uploadId(uploadId)
                    .partNumber(partNumber)
                    .build();
            // 构建预签名请求
            software.amazon.awssdk.services.s3.presigner.model.UploadPartPresignRequest presignRequest = 
                    software.amazon.awssdk.services.s3.presigner.model.UploadPartPresignRequest.builder()
                    .signatureDuration(Duration.ofMinutes(15))
                    .uploadPartRequest(uploadPartRequest)
                    .build();
            // 获取预签名URL
            software.amazon.awssdk.services.s3.presigner.model.PresignedUploadPartRequest presignedRequest = 
                    s3Presigner.presignUploadPart(presignRequest);
            String url = presignedRequest.url().toString();
            log.debug("生成分片预签名URL: part={}, uploadId={}", partNumber, uploadId);
            return url;
        } catch (Exception e) {
            log.error("生成分片预签名URL失败", e);
            throw new BusinessException(500, "生成分片上传URL失败: " + e.getMessage());
        }
    }
    /**
     * 批量生成分片预签名URL
     * 
     * @param uploadId 上传ID
     * @param objectKey 对象键
     * @param partStart 起始分片编号
     * @param partEnd 结束分片编号
     * @return 预签名URL信息列表
     */
    public List<PresignedUrlInfo> batchGeneratePresignedUrls(
            String uploadId, String objectKey, int partStart, int partEnd) {
        List<PresignedUrlInfo> urlInfos = new ArrayList<>();
        for (int i = partStart; i <= partEnd; i++) {
            String url = generatePresignedUrlForPart(uploadId, objectKey, i);
            urlInfos.add(new PresignedUrlInfo(i, url));
        }
        return urlInfos;
    }
    /**
     * 完成分片上传
     * 
     * @param uploadId 上传ID
     * @param objectKey 对象键
     * @param parts 已上传的分片信息
     * @return 完成上传响应
     */
    public CompleteMultipartUploadResponse completeMultipartUpload(
            String uploadId, String objectKey, List<UploadStatusInfo.PartInfo> parts) {
        try {
            log.info("开始完成分片上传 - uploadId: {}, objectKey: {}, 分片数量: {}", uploadId, objectKey, parts.size());
            log.info("原始分片信息: {}", parts);
            // 检查是否有分片
            if (parts.isEmpty()) {
                log.error("没有可合并的分片 - uploadId: {}, objectKey: {}", uploadId, objectKey);
                throw new BusinessException(400, "合并失败：没有可合并的分片");
            }
            // 将分片信息转换为AWS SDK所需格式
            List<CompletedPart> completedParts = parts.stream()
                    .map(part -> {
                        String eTag = part.getETag();
                        log.info("处理分片 - partNumber: {}, eTag: '{}'", part.getPartNumber(), eTag);
                        // 验证ETag是否有效
                        if (eTag == null || eTag.isEmpty()) {
                            log.error("分片ETag为空 - partNumber: {}", part.getPartNumber());
                            throw new BusinessException(400, 
                                    String.format("分片 %d 的ETag为空，无法完成合并", part.getPartNumber()));
                        }
                        return CompletedPart.builder()
                                .partNumber(part.getPartNumber())
                                .eTag(eTag)
                                .build();
                    })
                    .sorted(Comparator.comparing(CompletedPart::partNumber))
                    .collect(Collectors.toList());
            log.info("转换后的AWS SDK分片信息: {}", completedParts);
            // 构建完成请求
            CompleteMultipartUploadRequest completeRequest = CompleteMultipartUploadRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .key(objectKey)
                    .uploadId(uploadId)
                    .multipartUpload(CompletedMultipartUpload.builder()
                            .parts(completedParts)
                            .build())
                    .build();
            log.info("发送完成分片上传请求: {}", completeRequest);
            // 完成上传
            CompleteMultipartUploadResponse response = s3Client.completeMultipartUpload(completeRequest);
            log.info("分片上传完成: uploadId={}, objectKey={}, location={}, eTag={}", 
                    uploadId, objectKey, response.location(), response.eTag());
            return response;
        } catch (Exception e) {
            log.error("完成分片上传失败 - uploadId: {}, objectKey: {}, 错误: {}", uploadId, objectKey, e.getMessage(), e);
            throw new BusinessException(500, "完成上传失败: " + e.getMessage());
        }
    }
    /**
     * 取消分片上传
     * 
     * @param uploadId 上传ID
     * @param objectKey 对象键
     */
    public void abortMultipartUpload(String uploadId, String objectKey) {
        try {
            AbortMultipartUploadRequest abortRequest = AbortMultipartUploadRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .key(objectKey)
                    .uploadId(uploadId)
                    .build();
            s3Client.abortMultipartUpload(abortRequest);
            log.info("已取消分片上传: uploadId={}, objectKey={}", uploadId, objectKey);
        } catch (Exception e) {
            log.error("取消分片上传失败", e);
            throw new BusinessException(500, "取消上传失败: " + e.getMessage());
        }
    }
    /**
     * 获取上传分片状态
     * 
     * @param uploadId 上传ID
     * @param objectKey 对象键
     * @return 已上传的分片信息
     */
    public List<UploadStatusInfo.PartInfo> listParts(String uploadId, String objectKey) {
        try {
            ListPartsRequest listPartsRequest = ListPartsRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .key(objectKey)
                    .uploadId(uploadId)
                    .build();
            ListPartsResponse response = s3Client.listParts(listPartsRequest);
            return response.parts().stream()
                    .map(part -> new UploadStatusInfo.PartInfo(
                            part.partNumber(), 
                            part.eTag()))
                    .collect(Collectors.toList());
        } catch (Exception e) {
            log.error("获取分片信息失败", e);
            throw new BusinessException(500, "获取上传状态失败: " + e.getMessage());
        }
    }
    /**
     * 检查并创建存储桶
     */
    private void checkAndCreateBucket() {
        try {
            s3Client.headBucket(HeadBucketRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .build());
        } catch (NoSuchBucketException e) {
            log.info("存储桶 {} 不存在，正在创建...", s3Config.getBucketName());
            s3Client.createBucket(CreateBucketRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .build());
            log.info("存储桶 {} 创建成功", s3Config.getBucketName());
        }
    }
    /**
     * 获取对象的预签名访问URL
     * 
     * @param objectKey 对象键
     * @param expirationMinutes URL有效期（分钟）
     * @return 预签名URL
     */
    public String generatePresignedGetUrl(String objectKey, long expirationMinutes) {
        try {
            // 构建请求
            software.amazon.awssdk.services.s3.presigner.model.GetObjectPresignRequest presignRequest = 
                    software.amazon.awssdk.services.s3.presigner.model.GetObjectPresignRequest.builder()
                    .signatureDuration(Duration.ofMinutes(expirationMinutes))
                    .getObjectRequest(GetObjectRequest.builder()
                            .bucket(s3Config.getBucketName())
                            .key(objectKey)
                            .build())
                    .build();
            // 获取预签名URL
            software.amazon.awssdk.services.s3.presigner.model.PresignedGetObjectRequest presignedRequest = 
                    s3Presigner.presignGetObject(presignRequest);
            return presignedRequest.url().toString();
        } catch (Exception e) {
            log.error("生成预签名访问URL失败", e);
            throw new BusinessException(500, "生成访问链接失败: " + e.getMessage());
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/SectionServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.section.*;
import com.zhangziqi.online_course_mine.model.entity.*;
import com.zhangziqi.online_course_mine.model.vo.SectionVO;
import com.zhangziqi.online_course_mine.repository.*;
import com.zhangziqi.online_course_mine.service.SectionService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
/**
 * 小节服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class SectionServiceImpl implements SectionService {
    private final SectionRepository sectionRepository;
    private final ChapterRepository chapterRepository;
    private final CourseRepository courseRepository;
    private final MediaRepository mediaRepository;
    private final QuestionGroupRepository questionGroupRepository;
    @Override
    @Transactional
    public SectionVO createSection(SectionCreateDTO dto) {
        // 验证章节是否存在
        Chapter chapter = chapterRepository.findById(dto.getChapterId())
                .orElseThrow(() -> new ResourceNotFoundException("章节不存在，ID: " + dto.getChapterId()));
        // 如果没有指定排序索引，则放在最后
        if (dto.getOrderIndex() == null) {
            Integer maxOrderIndex = sectionRepository.findMaxOrderIndexByChapter_Id(dto.getChapterId());
            dto.setOrderIndex(maxOrderIndex != null ? maxOrderIndex + 1 : 0);
        }
        // 创建小节
        Section section = Section.builder()
                .title(dto.getTitle())
                .description(dto.getDescription())
                .chapter(chapter)
                .orderIndex(dto.getOrderIndex())
                .contentType(dto.getContentType())
                .resourceTypeDiscriminator("NONE") // 设置默认资源类型鉴别器
                .build();
        Section savedSection = sectionRepository.save(section);
        // 转换为VO并返回
        return SectionVO.fromEntity(savedSection);
    }
    @Override
    @Transactional
    public SectionVO updateSection(Long id, SectionCreateDTO dto) {
        // 获取小节
        Section section = findSectionById(id);
        // 验证章节是否存在，且章节ID是否一致
        if (!section.getChapter().getId().equals(dto.getChapterId())) {
            Chapter chapter = chapterRepository.findById(dto.getChapterId())
                    .orElseThrow(() -> new ResourceNotFoundException("章节不存在，ID: " + dto.getChapterId()));
            section.setChapter(chapter);
        }
        // 更新小节信息
        section.setTitle(dto.getTitle());
        section.setDescription(dto.getDescription());
        section.setOrderIndex(dto.getOrderIndex());
        section.setContentType(dto.getContentType());
        Section updatedSection = sectionRepository.save(section);
        // 转换为VO并返回
        return SectionVO.fromEntity(updatedSection);
    }
    @Override
    @Transactional(readOnly = true)
    public SectionVO getSectionById(Long id) {
        log.info("获取小节信息, sectionId: {}", id);
        // 验证小节是否存在
        Section section = sectionRepository.findById(id)
                .orElseThrow(() -> {
                    log.error("小节不存在, sectionId: {}", id);
                    return new ResourceNotFoundException("小节不存在，ID: " + id);
                });
        log.info("成功获取小节信息: {}", section.getTitle());
        // 转换为VO
        return SectionVO.fromEntity(section);
    }
    /**
     * 查找小节实体（内部使用）
     */
    private Section findSectionById(Long id) {
        return sectionRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("小节不存在，ID: " + id));
    }
    @Override
    @Transactional(readOnly = true)
    public List<SectionVO> getSectionsByChapter(Long chapterId) {
        // 验证章节是否存在
        chapterRepository.findById(chapterId)
                .orElseThrow(() -> new ResourceNotFoundException("章节不存在，ID: " + chapterId));
        List<Section> sections = sectionRepository.findByChapter_IdOrderByOrderIndexAsc(chapterId);
        // 转换为VO并返回
        return sections.stream()
                .map(SectionVO::fromEntity)
                .collect(Collectors.toList());
    }
    @Override
    @Transactional(readOnly = true)
    public List<SectionVO> getSectionsByCourse(Long courseId) {
        // 验证课程是否存在
        courseRepository.findById(courseId)
                .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID: " + courseId));
        List<Section> sections = sectionRepository.findByCourseIdOrderByChapterOrderIndexAndOrderIndexAsc(courseId);
        // 转换为VO并返回
        return sections.stream()
                .map(SectionVO::fromEntity)
                .collect(Collectors.toList());
    }
    @Override
    @Transactional
    public void deleteSection(Long id) {
        // 验证小节是否存在
        Section section = sectionRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("小节不存在，ID: " + id));
        // 删除小节
        sectionRepository.delete(section);
    }
    @Override
    @Transactional
    public List<SectionVO> reorderSections(Long chapterId, List<SectionOrderDTO> sectionOrders) {
        // 验证章节是否存在
        Chapter chapter = chapterRepository.findById(chapterId)
                .orElseThrow(() -> new ResourceNotFoundException("章节不存在，ID: " + chapterId));
        // 获取当前所有小节
        List<Section> existingSections = sectionRepository.findByChapter_IdOrderByOrderIndexAsc(chapterId);
        Map<Long, Section> sectionMap = existingSections.stream()
                .collect(Collectors.toMap(Section::getId, Function.identity()));
        // 验证所有提供的小节ID是否都属于该章节
        for (SectionOrderDTO orderDTO : sectionOrders) {
            if (!sectionMap.containsKey(orderDTO.getId())) {
                throw new BusinessException(400, "小节不属于该章节，小节ID: " + orderDTO.getId());
            }
        }
        // 更新小节顺序
        for (SectionOrderDTO orderDTO : sectionOrders) {
            Section section = sectionMap.get(orderDTO.getId());
            section.setOrderIndex(orderDTO.getOrderIndex());
            sectionRepository.save(section);
        }
        // 获取更新后的小节列表，按orderIndex排序
        List<Section> updatedSections = sectionRepository.findByChapter_IdOrderByOrderIndexAsc(chapterId);
        // 转换为VO并返回
        return updatedSections.stream()
                .map(SectionVO::fromEntity)
                .collect(Collectors.toList());
    }
    @Override
    @Transactional
    public SectionVO setMediaResource(Long sectionId, Long mediaId, String resourceType) {
        // 验证小节是否存在
        Section section = findSectionById(sectionId);
        // 验证媒体资源是否存在
        Media media = mediaRepository.findById(mediaId)
                .orElseThrow(() -> new ResourceNotFoundException("媒体资源不存在，ID: " + mediaId));
        // 验证资源类型
        if (resourceType == null) {
            throw new BusinessException(400, "资源类型不能为空");
        }
        // 如果当前小节已经有题目组，则先移除
        if ("QUESTION_GROUP".equals(section.getResourceTypeDiscriminator())) {
            section.setQuestionGroup(null);
        }
        // 设置媒体资源
        section.setMedia(media);
        section.setMediaResourceType(resourceType);
        section.setResourceTypeDiscriminator("MEDIA");
        Section updatedSection = sectionRepository.save(section);
        // 转换为VO并返回
        return SectionVO.fromEntity(updatedSection);
    }
    @Override
    @Transactional
    public SectionVO removeMediaResource(Long sectionId) {
        // 验证小节是否存在
        Section section = findSectionById(sectionId);
        // 检查小节是否有媒体资源
        if (!"MEDIA".equals(section.getResourceTypeDiscriminator())) {
            throw new BusinessException(400, "小节没有关联媒体资源");
        }
        // 移除媒体资源
        section.setMedia(null);
        section.setMediaResourceType(null);
        section.setResourceTypeDiscriminator("NONE");
        Section updatedSection = sectionRepository.save(section);
        // 转换为VO并返回
        return SectionVO.fromEntity(updatedSection);
    }
    @Override
    @Transactional
    public SectionVO setQuestionGroup(Long sectionId, Long questionGroupId, SectionQuestionGroupConfigDTO dto) {
        // 验证小节是否存在
        Section section = findSectionById(sectionId);
        // 验证题目组是否存在
        QuestionGroup questionGroup = questionGroupRepository.findById(questionGroupId)
                .orElseThrow(() -> new ResourceNotFoundException("题目组不存在，ID: " + questionGroupId));
        // 如果当前小节已经有媒体资源，则先移除
        if ("MEDIA".equals(section.getResourceTypeDiscriminator())) {
            section.setMedia(null);
            section.setMediaResourceType(null);
        }
        // 设置题目组和相关配置
        section.setQuestionGroup(questionGroup);
        section.setResourceTypeDiscriminator("QUESTION_GROUP");
        // 设置题目组配置
        Boolean randomOrder = dto != null && dto.getRandomOrder() != null ? dto.getRandomOrder() : false;
        Boolean orderByDifficulty = dto != null && dto.getOrderByDifficulty() != null ? dto.getOrderByDifficulty() : false;
        Boolean showAnalysis = dto != null && dto.getShowAnalysis() != null ? dto.getShowAnalysis() : true;
        section.setRandomOrder(randomOrder);
        section.setOrderByDifficulty(orderByDifficulty);
        section.setShowAnalysis(showAnalysis);
        Section updatedSection = sectionRepository.save(section);
        // 转换为VO并返回
        return SectionVO.fromEntity(updatedSection);
    }
    @Override
    @Transactional
    public SectionVO removeQuestionGroup(Long sectionId) {
        // 验证小节是否存在
        Section section = findSectionById(sectionId);
        // 检查小节是否有题目组
        if (!"QUESTION_GROUP".equals(section.getResourceTypeDiscriminator())) {
            throw new BusinessException(400, "小节没有关联题目组");
        }
        // 移除题目组
        section.setQuestionGroup(null);
        section.setRandomOrder(false);
        section.setOrderByDifficulty(false);
        section.setShowAnalysis(true);
        section.setResourceTypeDiscriminator("NONE");
        Section updatedSection = sectionRepository.save(section);
        // 转换为VO并返回
        return SectionVO.fromEntity(updatedSection);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/StorageQuotaServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.StorageQuota;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import com.zhangziqi.online_course_mine.model.vo.QuotaInfoVO;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.StorageQuotaRepository;
import com.zhangziqi.online_course_mine.service.StorageQuotaService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
/**
 * 存储配额服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class StorageQuotaServiceImpl implements StorageQuotaService {
    private final StorageQuotaRepository quotaRepository;
    private final InstitutionRepository institutionRepository;
    @Override
    @Transactional(readOnly = true)
    public boolean hasEnoughQuota(Long institutionId, QuotaType quotaType, Long requiredSize) {
        StorageQuota quota = findQuotaByType(institutionId, quotaType);
        // 如果剩余配额大于等于所需大小，则有足够配额
        return (quota.getTotalQuota() - quota.getUsedQuota()) >= requiredSize;
    }
    @Override
    @Transactional
    public void updateUsedQuota(Long institutionId, QuotaType type, Long sizeDelta) {
        // 验证机构存在
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        StorageQuota quota = quotaRepository.findByInstitutionAndType(institution, type)
                .orElseGet(() -> {
                    List<StorageQuota> quotas = initializeQuotas(institution);
                    return quotas.stream()
                            .filter(q -> q.getType() == type)
                            .findFirst()
                            .orElseThrow(() -> new BusinessException(500, "初始化配额失败"));
                });
        // 计算新的已用配额
        long newUsedQuota = quota.getUsedQuota() + sizeDelta;
        // 已用配额不能小于0
        if (newUsedQuota < 0) {
            newUsedQuota = 0;
        }
        // 已用配额不能超过总配额
        if (newUsedQuota > quota.getTotalQuota()) {
            throw new BusinessException(400, "存储配额不足，无法分配空间");
        }
        // 更新已用配额
        quota.setUsedQuota(newUsedQuota);
        // 保存配额
        quotaRepository.save(quota);
        // 如果更新的是特定类型，也要更新TOTAL类型
        if (type != QuotaType.TOTAL) {
            updateUsedQuota(institutionId, QuotaType.TOTAL, sizeDelta);
        }
        log.info("更新机构{}的{}配额，变化: {}字节，当前已用: {}字节", 
                institutionId, type, sizeDelta, quota.getUsedQuota());
    }
    @Override
    @Transactional(readOnly = true)
    public QuotaInfoVO getQuotaInfo(Long institutionId) {
        // 获取所有配额信息
        List<QuotaInfoVO> allQuotas = getAllQuotas(institutionId);
        // 计算总配额和已用总配额
        long totalQuota = 0;
        long usedQuota = 0;
        for (QuotaInfoVO info : allQuotas) {
            totalQuota += info.getTotalQuota();
            usedQuota += info.getUsedQuota();
        }
        // 构建总配额信息
        return QuotaInfoVO.builder()
                .type(QuotaType.TOTAL.name())
                .typeName("总配额")
                .totalQuota(totalQuota)
                .usedQuota(usedQuota)
                .lastUpdatedTime(LocalDateTime.now())
                .build();
    }
    @Override
    @Transactional(readOnly = true)
    public List<QuotaInfoVO> getAllQuotas(Long institutionId) {
        // 验证机构是否存在
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        // 获取机构的所有配额
        List<StorageQuota> quotas = quotaRepository.findByInstitution(institution);
        // 如果配额列表为空，则初始化配额
        if (quotas.isEmpty()) {
            quotas = initializeQuotas(institution);
        }
        // 转换为VO
        return quotas.stream()
                .map(this::mapToQuotaInfoVO)
                .collect(Collectors.toList());
    }
    /**
     * 按类型查找配额
     * 
     * @param institutionId 机构ID
     * @param quotaType 配额类型
     * @return 配额
     */
    private StorageQuota findQuotaByType(Long institutionId, QuotaType quotaType) {
        // 验证机构是否存在
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        // 查找指定类型的配额
        StorageQuota quota = quotaRepository.findByInstitutionAndType(institution, quotaType)
                .orElse(null);
        // 如果配额不存在，则初始化配额
        if (quota == null) {
            List<StorageQuota> quotas = initializeQuotas(institution);
            quota = quotas.stream()
                    .filter(q -> q.getType() == quotaType)
                    .findFirst()
                    .orElseThrow(() -> new BusinessException(500, "初始化配额失败"));
        }
        return quota;
    }
    /**
     * 初始化机构的配额
     * 
     * @param institution 机构
     * @return 初始化的配额列表
     */
    private List<StorageQuota> initializeQuotas(Institution institution) {
        List<StorageQuota> quotas = new ArrayList<>();
        // 初始化各种类型的配额
        // 视频配额：默认10GB
        StorageQuota videoQuota = new StorageQuota();
        videoQuota.setInstitution(institution);
        videoQuota.setType(QuotaType.VIDEO);
        videoQuota.setTotalQuota(10L * 1024 * 1024 * 1024); // 10GB
        videoQuota.setUsedQuota(0L);
        quotas.add(videoQuota);
        // 文档配额：默认5GB
        StorageQuota docQuota = new StorageQuota();
        docQuota.setInstitution(institution);
        docQuota.setType(QuotaType.DOCUMENT);
        docQuota.setTotalQuota(5L * 1024 * 1024 * 1024); // 5GB
        docQuota.setUsedQuota(0L);
        quotas.add(docQuota);
        // 总配额：默认等于各类型配额之和
        StorageQuota totalQuota = new StorageQuota();
        totalQuota.setInstitution(institution);
        totalQuota.setType(QuotaType.TOTAL);
        totalQuota.setTotalQuota(videoQuota.getTotalQuota() + docQuota.getTotalQuota());
        totalQuota.setUsedQuota(0L);
        quotas.add(totalQuota);
        // 保存所有配额
        List<StorageQuota> savedQuotas = quotaRepository.saveAll(quotas);
        log.info("初始化配额成功: {}", savedQuotas);
        for (StorageQuota quota : savedQuotas) {
            log.info("保存的配额: ID={}, 类型={}, 总配额={}, 已用配额={}", 
                    quota.getId(), quota.getType(), quota.getTotalQuota(), quota.getUsedQuota());
        }
        return savedQuotas;
    }
    /**
     * 将StorageQuota实体转换为VO
     * 
     * @param quota 配额实体
     * @return 配额VO
     */
    private QuotaInfoVO mapToQuotaInfoVO(StorageQuota quota) {
        return QuotaInfoVO.builder()
                .type(quota.getType().name())
                .typeName(getQuotaTypeName(quota.getType()))
                .totalQuota(quota.getTotalQuota())
                .usedQuota(quota.getUsedQuota())
                .lastUpdatedTime(quota.getUpdatedAt())
                .build();
    }
    /**
     * 获取配额类型的中文名称
     * 
     * @param type 配额类型
     * @return 类型名称
     */
    private String getQuotaTypeName(QuotaType type) {
        switch (type) {
            case VIDEO:
                return "视频配额";
            case DOCUMENT:
                return "文档配额";
            case TOTAL:
                return "总配额";
            default:
                return "未知配额";
        }
    }
    @Override
    @Transactional
    public void setQuota(Long institutionId, QuotaType type, Long totalQuota, LocalDateTime expiresAt) {
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        StorageQuota quota = quotaRepository.findByInstitutionAndType(institution, type)
                .orElse(new StorageQuota());
        quota.setInstitution(institution);
        quota.setType(type);
        quota.setTotalQuota(totalQuota);
        quota.setUsedQuota(quota.getUsedQuota() == null ? 0L : quota.getUsedQuota()); // 初始化usedQuota为0
        quota.setExpiresAt(expiresAt);
        quota.setEnabled(true); // 设置为启用状态
        quotaRepository.save(quota);
        log.info("设置配额: 机构ID: {}, 类型: {}, 总配额: {}", institutionId, type, totalQuota);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/TagServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.exception.ServiceException;
import com.zhangziqi.online_course_mine.model.dto.TagDTO;
import com.zhangziqi.online_course_mine.model.entity.Tag;
import com.zhangziqi.online_course_mine.model.vo.TagVO;
import com.zhangziqi.online_course_mine.repository.TagRepository;
import com.zhangziqi.online_course_mine.service.TagService;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.BeanUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
/**
 * 标签服务实现类
 */
@Service
@RequiredArgsConstructor
public class TagServiceImpl implements TagService {
    private final TagRepository tagRepository;
    @Override
    @Transactional
    public Long createTag(TagDTO tagDTO) {
        // 校验标签名称唯一性
        if (!isNameAvailable(tagDTO.getName(), null)) {
            throw new ServiceException("标签名称已存在");
        }
        Tag tag = new Tag();
        BeanUtils.copyProperties(tagDTO, tag);
        Tag savedTag = tagRepository.save(tag);
        return savedTag.getId();
    }
    @Override
    @Transactional
    public boolean updateTag(Long id, TagDTO tagDTO) {
        Tag tag = tagRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("标签不存在"));
        // 校验标签名称唯一性
        if (!isNameAvailable(tagDTO.getName(), id)) {
            throw new ServiceException("标签名称已存在");
        }
        tag.setName(tagDTO.getName());
        tag.setDescription(tagDTO.getDescription());
        tagRepository.save(tag);
        return true;
    }
    @Override
    @Transactional
    public boolean deleteTag(Long id) {
        Tag tag = tagRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("标签不存在"));
        // 检查标签是否被课程使用
        if (tag.getCourses() != null && !tag.getCourses().isEmpty()) {
            throw new ServiceException("标签正在被课程使用，无法删除");
        }
        tagRepository.delete(tag);
        return true;
    }
    @Override
    public TagVO getTag(Long id) {
        Tag tag = tagRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("标签不存在"));
        return convertToTagVO(tag);
    }
    @Override
    public TagVO getTagByName(String name) {
        Tag tag = tagRepository.findByName(name)
                .orElseThrow(() -> new ResourceNotFoundException("标签不存在"));
        return convertToTagVO(tag);
    }
    @Override
    public Page<TagVO> listTags(String keyword, Pageable pageable) {
        Page<Tag> tagPage;
        if (StringUtils.hasText(keyword)) {
            // 创建动态查询条件
            Specification<Tag> spec = (root, query, criteriaBuilder) -> {
                String likePattern = "%" + keyword + "%";
                return criteriaBuilder.or(
                        criteriaBuilder.like(root.get("name"), likePattern),
                        criteriaBuilder.like(root.get("description"), likePattern)
                );
            };
            tagPage = tagRepository.findAll(spec, pageable);
        } else {
            tagPage = tagRepository.findAll(pageable);
        }
        return tagPage.map(this::convertToTagVO);
    }
    @Override
    public List<TagVO> getPopularTags(int limit) {
        Pageable pageable = PageRequest.of(0, limit);
        List<Tag> popularTags = tagRepository.findTopByOrderByUseCountDesc(pageable);
        return popularTags.stream()
                .map(this::convertToTagVO)
                .collect(Collectors.toList());
    }
    @Override
    @Transactional
    public Set<Tag> getOrCreateTags(List<String> tagNames) {
        if (tagNames == null || tagNames.isEmpty()) {
            return new HashSet<>();
        }
        Set<Tag> tags = new HashSet<>();
        for (String name : tagNames) {
            // 去除空格并验证
            String trimmedName = name.trim();
            if (!StringUtils.hasText(trimmedName)) {
                continue;
            }
            // 查找现有标签或创建新标签
            Optional<Tag> existingTag = tagRepository.findByName(trimmedName);
            if (existingTag.isPresent()) {
                tags.add(existingTag.get());
            } else {
                // 创建新标签
                Tag newTag = new Tag();
                newTag.setName(trimmedName);
                newTag.setUseCount(0);
                tags.add(tagRepository.save(newTag));
            }
        }
        return tags;
    }
    @Override
    public boolean isNameAvailable(String name, Long excludeId) {
        Optional<Tag> existingTag = tagRepository.findByName(name);
        return !existingTag.isPresent() || existingTag.get().getId().equals(excludeId);
    }
    @Override
    @Transactional
    public void incrementTagUseCount(Long tagId) {
        Tag tag = tagRepository.findById(tagId)
                .orElseThrow(() -> new ResourceNotFoundException("标签不存在"));
        tag.incrementUseCount();
        tagRepository.save(tag);
    }
    @Override
    @Transactional
    public void decrementTagUseCount(Long tagId) {
        Tag tag = tagRepository.findById(tagId)
                .orElseThrow(() -> new ResourceNotFoundException("标签不存在"));
        tag.decrementUseCount();
        tagRepository.save(tag);
    }
    @Override
    public Tag getTagEntity(Long id) {
        return tagRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("标签不存在"));
    }
    /**
     * 将标签实体转换为VO对象
     */
    private TagVO convertToTagVO(Tag tag) {
        TagVO vo = new TagVO();
        BeanUtils.copyProperties(tag, vo);
        // 设置关联课程数量
        if (tag.getCourses() != null) {
            vo.setCourseCount(tag.getCourses().size());
        } else {
            vo.setCourseCount(0);
        }
        return vo;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/UploadStatusService.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.media.UploadStatusInfo;
import com.zhangziqi.online_course_mine.model.enums.MediaStatus;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.concurrent.TimeUnit;
/**
 * 上传状态服务
 * 用于管理媒体上传状态信息
 * 注：仅用于内部跟踪上传状态，不提供前端状态管理
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class UploadStatusService {
    private final RedisTemplate<String, Object> redisTemplate;
    private final ObjectMapper objectMapper;
    // 上传状态在Redis中的过期时间（小时）
    private static final int STATUS_EXPIRATION_HOURS = 24;
    // Redis键前缀
    private static final String UPLOAD_STATUS_KEY_PREFIX = "upload_status:";
    /**
     * 保存上传状态
     * 
     * @param statusInfo 上传状态信息
     */
    public void saveUploadStatus(UploadStatusInfo statusInfo) {
        String key = generateKey(statusInfo.getMediaId());
        // 计算过期时间
        LocalDateTime expiresAt = LocalDateTime.now().plus(STATUS_EXPIRATION_HOURS, ChronoUnit.HOURS);
        statusInfo.setExpiresAt(expiresAt);
        // 保存状态
        redisTemplate.opsForValue().set(key, statusInfo);
        redisTemplate.expire(key, STATUS_EXPIRATION_HOURS, TimeUnit.HOURS);
        log.info("Saved upload status for media ID: {}, upload ID: {}", statusInfo.getMediaId(), statusInfo.getUploadId());
    }
    /**
     * 获取上传状态
     * 
     * @param mediaId 媒体ID
     * @return 上传状态信息
     */
    private UploadStatusInfo getUploadStatus(Long mediaId) {
        String key = generateKey(mediaId);
        Object value = redisTemplate.opsForValue().get(key);
        if (value == null) {
            throw new ResourceNotFoundException("上传状态不存在，媒体ID: " + mediaId);
        }
        UploadStatusInfo statusInfo;
        if (value instanceof UploadStatusInfo) {
            statusInfo = (UploadStatusInfo) value;
        } else {
            // 处理可能的序列化/反序列化问题
            try {
                String json = objectMapper.writeValueAsString(value);
                statusInfo = objectMapper.readValue(json, UploadStatusInfo.class);
            } catch (Exception e) {
                log.error("Failed to convert Redis value to UploadStatusInfo", e);
                throw new ResourceNotFoundException("上传状态格式错误，媒体ID: " + mediaId);
            }
        }
        return statusInfo;
    }
    /**
     * 获取上传状态，如果不存在则返回null
     * 
     * @param mediaId 媒体ID
     * @return 上传状态信息或null
     */
    public UploadStatusInfo getUploadStatusOrNull(Long mediaId) {
        try {
            return getUploadStatus(mediaId);
        } catch (ResourceNotFoundException e) {
            return null;
        }
    }
    /**
     * 删除上传状态
     * 
     * @param mediaId 媒体ID
     */
    public void deleteUploadStatus(Long mediaId) {
        String key = generateKey(mediaId);
        redisTemplate.delete(key);
        log.info("Deleted upload status for media ID: {}", mediaId);
    }
    /**
     * 生成Redis键
     * 
     * @param mediaId 媒体ID
     * @return Redis键
     */
    private String generateKey(Long mediaId) {
        return UPLOAD_STATUS_KEY_PREFIX + mediaId;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/UserCourseServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.entity.Course;
import com.zhangziqi.online_course_mine.model.entity.UserCourse;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.entity.Order;
import com.zhangziqi.online_course_mine.model.enums.UserCourseStatus;
import com.zhangziqi.online_course_mine.model.vo.CourseVO;
import com.zhangziqi.online_course_mine.model.vo.UserCourseVO;
import com.zhangziqi.online_course_mine.repository.CourseRepository;
import com.zhangziqi.online_course_mine.repository.UserCourseRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.repository.OrderRepository;
import com.zhangziqi.online_course_mine.service.UserCourseService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
/**
 * 用户课程服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class UserCourseServiceImpl implements UserCourseService {
    private final UserCourseRepository userCourseRepository;
    private final UserRepository userRepository;
    private final CourseRepository courseRepository;
    private final OrderRepository orderRepository;
    @Override
    @Transactional(readOnly = true)
    public List<CourseVO> getUserPurchasedCourses(Long userId) {
        List<UserCourse> userCourses = userCourseRepository.findByUser_Id(userId);
        return userCourses.stream()
                .map(userCourse -> CourseVO.fromEntity(userCourse.getCourse()))
                .collect(Collectors.toList());
    }
    @Override
    @Transactional(readOnly = true)
    public Page<CourseVO> getUserPurchasedCourses(Long userId, Pageable pageable) {
        Page<UserCourse> userCoursePage = userCourseRepository.findByUser_Id(userId, pageable);
        List<CourseVO> courseVOs = userCoursePage.getContent().stream()
                .map(userCourse -> CourseVO.fromEntity(userCourse.getCourse()))
                .collect(Collectors.toList());
        return new PageImpl<>(courseVOs, pageable, userCoursePage.getTotalElements());
    }
    @Override
    @Transactional(readOnly = true)
    public UserCourseVO getUserCourseRecord(Long userId, Long courseId) {
        UserCourse userCourse = userCourseRepository.findByUser_IdAndCourse_Id(userId, courseId)
                .orElseThrow(() -> new ResourceNotFoundException("未找到学习记录，请先购买课程"));
        return UserCourseVO.fromEntity(userCourse);
    }
    @Override
    @Transactional
    public UserCourseVO updateLearningProgress(Long userId, Long courseId, Integer progress) {
        // 验证进度范围
        if (progress < 0 || progress > 100) {
            throw new BusinessException(400, "学习进度必须在0-100之间");
        }
        // 查询用户课程记录
        UserCourse userCourse = userCourseRepository.findByUser_IdAndCourse_Id(userId, courseId)
                .orElseThrow(() -> new ResourceNotFoundException("未找到学习记录，请先购买课程"));
        // 只有当新进度大于原进度时才更新
        if (progress > userCourse.getProgress()) {
            userCourse.setProgress(progress);
            userCourse.setLastLearnAt(LocalDateTime.now());
            userCourseRepository.save(userCourse);
        }
        return UserCourseVO.fromEntity(userCourse);
    }
    @Override
    @Transactional
    public UserCourseVO recordLearningDuration(Long userId, Long courseId, Integer duration) {
        // 验证时长有效性
        if (duration <= 0) {
            throw new BusinessException(400, "学习时长必须大于0");
        }
        // 查询用户课程记录
        UserCourse userCourse = userCourseRepository.findByUser_IdAndCourse_Id(userId, courseId)
                .orElseThrow(() -> new ResourceNotFoundException("未找到学习记录，请先购买课程"));
        // 累加学习时长
        userCourse.setLearnDuration(userCourse.getLearnDuration() + duration);
        userCourse.setLastLearnAt(LocalDateTime.now());
        userCourseRepository.save(userCourse);
        return UserCourseVO.fromEntity(userCourse);
    }
    @Override
    @Transactional(readOnly = true)
    public boolean hasPurchasedCourse(Long userId, Long courseId) {
        return userCourseRepository.existsByUser_IdAndCourse_Id(userId, courseId);
    }
    @Override
    @Transactional(readOnly = true)
    public List<UserCourseVO> getCourseStudents(Long courseId) {
        List<UserCourse> userCourses = userCourseRepository.findByCourse_Id(courseId);
        return userCourses.stream()
                .map(UserCourseVO::fromEntity)
                .collect(Collectors.toList());
    }
    @Override
    @Transactional(readOnly = true)
    public Page<UserCourseVO> getCourseStudents(Long courseId, Pageable pageable) {
        Page<UserCourse> userCoursePage = userCourseRepository.findByCourse_Id(courseId, pageable);
        return userCoursePage.map(UserCourseVO::fromEntity);
    }
    @Override
    @Transactional(readOnly = true)
    public List<UserCourseVO> getInstitutionStudents(Long institutionId) {
        List<UserCourse> userCourses = userCourseRepository.findByInstitutionId(institutionId);
        return userCourses.stream()
                .map(UserCourseVO::fromEntity)
                .collect(Collectors.toList());
    }
    @Override
    @Transactional(readOnly = true)
    public Page<UserCourseVO> getInstitutionStudents(Long institutionId, Pageable pageable) {
        Page<UserCourse> userCoursePage = userCourseRepository.findByInstitutionId(institutionId, pageable);
        return userCoursePage.map(UserCourseVO::fromEntity);
    }
    @Override
    @Transactional(readOnly = true)
    public List<CourseVO> getRecentLearnedCourses(Long userId, int limit) {
        // 查询用户最近学习的课程
        List<UserCourse> recentCourses = userCourseRepository.findRecentLearnedCourses(
                userId, PageRequest.of(0, limit));
        return recentCourses.stream()
                .map(userCourse -> CourseVO.fromEntity(userCourse.getCourse()))
                .collect(Collectors.toList());
    }
    @Override
    @Transactional
    public UserCourse createUserCourseRelation(Long userId, Long courseId, Long orderId, boolean isPaid) {
        log.info("创建用户课程关系, 用户ID: {}, 课程ID: {}, 订单ID: {}, 是否已支付: {}", userId, courseId, orderId, isPaid);
        // 检查用户是否已购买该课程
        Optional<UserCourse> existingRelation = userCourseRepository.findByUser_IdAndCourse_Id(userId, courseId);
        if (existingRelation.isPresent()) {
            log.info("用户已购买该课程，无需重复创建关系");
            return existingRelation.get();
        }
        // 查询用户
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new ResourceNotFoundException("用户不存在，ID: " + userId));
        // 查询课程
        Course course = courseRepository.findById(courseId)
                .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID: " + courseId));
        // 查询订单（如果有）
        Order order = null;
        if (orderId != null) {
            order = orderRepository.findById(orderId)
                    .orElseThrow(() -> new ResourceNotFoundException("订单不存在，ID: " + orderId));
        }
        // 创建用户课程关系
        UserCourse userCourse = new UserCourse();
        userCourse.setUser(user);
        userCourse.setCourse(course);
        userCourse.setPurchasedAt(LocalDateTime.now());
        userCourse.setOrder(order);
        userCourse.setProgress(0);
        userCourse.setStatusEnum(isPaid ? UserCourseStatus.NORMAL : UserCourseStatus.EXPIRED);
        userCourse.setLearnDuration(0);
        // 保存关系
        userCourseRepository.save(userCourse);
        // 更新课程学生数（使用乐观锁处理并发）
        try {
            course.incrementStudentCount();
            courseRepository.save(course);
        } catch (Exception e) {
            log.warn("更新课程学生数失败，将重试", e);
            // 重新获取课程并重试
            course = courseRepository.findById(courseId)
                    .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID: " + courseId));
            course.incrementStudentCount();
            courseRepository.save(course);
        }
        log.info("用户课程关系创建成功, ID: {}", userCourse.getId());
        return userCourse;
    }
    @Override
    @Transactional
    public UserCourse updateUserCourseRefunded(Long orderId) {
        log.info("更新用户课程关系为已退款, 订单ID: {}", orderId);
        // 查询订单关联的用户课程
        UserCourse userCourse = userCourseRepository.findByOrder_Id(orderId)
                .orElseThrow(() -> new ResourceNotFoundException("未找到与订单关联的课程记录，订单ID: " + orderId));
        // 更新状态为已退款
        userCourse.setStatusEnum(UserCourseStatus.REFUNDED);
        userCourseRepository.save(userCourse);
        // 更新课程学生数（使用乐观锁处理并发）
        final Long courseId = userCourse.getCourse().getId();
        int maxRetries = 3;
        int retryCount = 0;
        while (retryCount < maxRetries) {
            try {
                Course course = courseRepository.findById(courseId)
                        .orElseThrow(() -> new ResourceNotFoundException("课程不存在，ID: " + courseId));
                course.decrementStudentCount();
                courseRepository.save(course);
                break;
            } catch (Exception e) {
                retryCount++;
                if (retryCount == maxRetries) {
                    log.error("更新课程学生数失败，已重试{}次", maxRetries, e);
                    throw new BusinessException(500, "更新课程学生数失败");
                }
                log.warn("更新课程学生数失败，正在进行第{}次重试", retryCount);
            }
        }
        log.info("用户课程关系已更新为退款状态, ID: {}", userCourse.getId());
        return userCourse;
    }
    @Override
    @Transactional(readOnly = true)
    public Optional<UserCourse> findByOrderId(Long orderId) {
        log.info("根据订单ID查询用户课程关系, 订单ID: {}", orderId);
        return userCourseRepository.findByOrder_Id(orderId);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/UserFavoriteServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.model.entity.Course;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.entity.UserFavorite;
import com.zhangziqi.online_course_mine.model.vo.UserFavoriteVO;
import com.zhangziqi.online_course_mine.repository.CourseRepository;
import com.zhangziqi.online_course_mine.repository.UserFavoriteRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.UserFavoriteService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.math.BigDecimal;
import java.util.Optional;
/**
 * 用户收藏课程服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class UserFavoriteServiceImpl implements UserFavoriteService {
    private final UserFavoriteRepository userFavoriteRepository;
    private final UserRepository userRepository;
    private final CourseRepository courseRepository;
    @Override
    @Transactional
    public boolean addFavorite(Long userId, Long courseId) {
        // 检查是否已收藏
        if (isFavorite(userId, courseId)) {
            return true;
        }
        // 检查用户和课程是否存在
        Optional<User> userOpt = userRepository.findById(userId);
        Optional<Course> courseOpt = courseRepository.findById(courseId);
        if (userOpt.isEmpty() || courseOpt.isEmpty()) {
            log.warn("添加收藏失败，用户ID {} 或课程ID {} 不存在", userId, courseId);
            return false;
        }
        // 创建收藏记录
        UserFavorite favorite = UserFavorite.builder()
                .user(userOpt.get())
                .course(courseOpt.get())
                .build();
        userFavoriteRepository.save(favorite);
        log.info("用户 {} 收藏课程 {} 成功", userId, courseId);
        return true;
    }
    @Override
    @Transactional
    public boolean removeFavorite(Long userId, Long courseId) {
        long count = userFavoriteRepository.deleteByUserAndCourseIds(userId, courseId);
        boolean success = count > 0;
        if (success) {
            log.info("用户 {} 取消收藏课程 {} 成功", userId, courseId);
        } else {
            log.warn("用户 {} 取消收藏课程 {} 失败，可能没有收藏记录", userId, courseId);
        }
        return success;
    }
    @Override
    public boolean isFavorite(Long userId, Long courseId) {
        return userFavoriteRepository.findByUser_IdAndCourse_Id(userId, courseId).isPresent();
    }
    @Override
    @Transactional(readOnly = true)
    public Page<UserFavoriteVO> getUserFavorites(Long userId, Pageable pageable) {
        Page<UserFavorite> favorites = userFavoriteRepository.findByUser_Id(userId, pageable);
        return favorites.map(this::convertToVO);
    }
    @Override
    public long countUserFavorites(Long userId) {
        return userFavoriteRepository.findByUser_Id(userId).size();
    }
    @Override
    public long countCourseFavorites(Long courseId) {
        return userFavoriteRepository.countByCourse_Id(courseId);
    }
    /**
     * 将实体转换为VO
     */
    private UserFavoriteVO convertToVO(UserFavorite favorite) {
        Course course = favorite.getCourse();
        String price = "免费";
        if (course.getPaymentType() != null && course.getPaymentType() == 1) { // 付费课程
            BigDecimal coursePrice = course.getDiscountPrice() != null ? course.getDiscountPrice() : course.getPrice();
            if (coursePrice != null) {
                price = "￥" + coursePrice.toString();
            }
        }
        String categoryName = "";
        if (course.getCategory() != null) {
            categoryName = course.getCategory().getName();
        }
        String institutionName = "";
        if (course.getInstitution() != null) {
            institutionName = course.getInstitution().getName();
        }
        return UserFavoriteVO.builder()
                .id(favorite.getId())
                .courseId(course.getId())
                .courseTitle(course.getTitle())
                .courseCoverImage(course.getCoverImage())
                .coursePrice(price)
                .categoryName(categoryName)
                .institutionName(institutionName)
                .favoriteTime(favorite.getFavoriteTime())
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/UserServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.dto.UserDTO;
import com.zhangziqi.online_course_mine.model.dto.UserQueryDTO;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.RoleEnum;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.security.jwt.TokenBlacklistService;
import com.zhangziqi.online_course_mine.service.EmailService;
import com.zhangziqi.online_course_mine.service.MinioService;
import com.zhangziqi.online_course_mine.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;
import jakarta.persistence.criteria.Predicate;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;
/**
 * 用户服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;
    private final EmailService emailService;
    private final MinioService minioService;
    private final TokenBlacklistService tokenBlacklistService;
    /**
     * 注册用户
     *
     * @param registerDTO 注册请求
     * @return 用户信息
     */
    @Override
    @Transactional
    public User register(RegisterDTO registerDTO) {
        // 检查用户名是否存在
        if (userRepository.existsByUsername(registerDTO.getUsername())) {
            throw new BusinessException("用户名已存在");
        }
        // 检查邮箱是否存在
        if (registerDTO.getEmail() != null && userRepository.existsByEmail(registerDTO.getEmail())) {
            throw new BusinessException("邮箱已存在");
        }
        // 检查手机号是否存在
        if (registerDTO.getPhone() != null && userRepository.existsByPhone(registerDTO.getPhone())) {
            throw new BusinessException("手机号已存在");
        }
        // 获取普通用户角色
        Role userRole = roleRepository.findByCode(RoleEnum.USER.getCode())
                .orElseThrow(() -> new BusinessException("角色不存在"));
        // 创建用户
        User user = User.builder()
                .username(registerDTO.getUsername())
                .password(passwordEncoder.encode(registerDTO.getPassword()))
                .email(registerDTO.getEmail())
                .phone(registerDTO.getPhone())
                .status(1) // 正常状态
                .roles(Collections.singleton(userRole))
                .build();
        // 保存用户
        User savedUser = userRepository.save(user);
        log.info("用户注册成功: {}", savedUser.getUsername());
        return savedUser;
    }
    /**
     * 根据用户名查询用户
     *
     * @param username 用户名
     * @return 用户信息
     */
    @Override
    @Transactional(readOnly = true)
    public User getUserByUsername(String username) {
        return userRepository.findByUsername(username)
                .orElseThrow(() -> new BusinessException("用户不存在"));
    }
    /**
     * 检查用户名是否存在
     *
     * @param username 用户名
     * @return 是否存在
     */
    @Override
    @Transactional(readOnly = true)
    public boolean existsByUsername(String username) {
        return userRepository.existsByUsername(username);
    }
    /**
     * 检查邮箱是否存在
     *
     * @param email 邮箱
     * @return 是否存在
     */
    @Override
    @Transactional(readOnly = true)
    public boolean existsByEmail(String email) {
        return userRepository.existsByEmail(email);
    }
    /**
     * 检查手机号是否存在
     *
     * @param phone 手机号
     * @return 是否存在
     */
    @Override
    @Transactional(readOnly = true)
    public boolean existsByPhone(String phone) {
        return userRepository.existsByPhone(phone);
    }
    /**
     * 更新最后登录时间
     *
     * @param username 用户名
     */
    @Override
    @Transactional
    public void updateLastLoginTime(String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        user.setLastLoginAt(LocalDateTime.now());
        userRepository.save(user);
        log.debug("更新用户最后登录时间: {}", username);
    }
    /**
     * 分页查询用户列表
     *
     * @param queryDTO 查询条件
     * @return 用户列表（分页）
     */
    @Override
    @Transactional(readOnly = true)
    public Page<UserVO> getUserList(UserQueryDTO queryDTO) {
        Pageable pageable = PageRequest.of(queryDTO.getPageNum() - 1, queryDTO.getPageSize());
        // 构建查询条件
        Specification<User> spec = (root, query, cb) -> {
            var predicates = new HashSet<Predicate>();
            // 按用户名模糊查询
            if (StringUtils.hasText(queryDTO.getUsername())) {
                predicates.add(cb.like(root.get("username"), "%" + queryDTO.getUsername() + "%"));
            }
            // 按邮箱模糊查询
            if (StringUtils.hasText(queryDTO.getEmail())) {
                predicates.add(cb.like(root.get("email"), "%" + queryDTO.getEmail() + "%"));
            }
            // 按手机号模糊查询
            if (StringUtils.hasText(queryDTO.getPhone())) {
                predicates.add(cb.like(root.get("phone"), "%" + queryDTO.getPhone() + "%"));
            }
            // 按状态精确查询
            if (queryDTO.getStatus() != null) {
                predicates.add(cb.equal(root.get("status"), queryDTO.getStatus()));
            }
            // 按机构ID精确查询
            if (queryDTO.getInstitutionId() != null) {
                predicates.add(cb.equal(root.get("institutionId"), queryDTO.getInstitutionId()));
            }
            // 按角色ID查询
            if (queryDTO.getRoleId() != null) {
                var join = root.join("roles");
                predicates.add(cb.equal(join.get("id"), queryDTO.getRoleId()));
            }
            return cb.and(predicates.toArray(new Predicate[0]));
        };
        // 执行查询
        Page<User> userPage = userRepository.findAll(spec, pageable);
        // 转换为VO
        List<UserVO> userVOList = userPage.getContent().stream()
                .map(this::convertToUserVO)
                .collect(Collectors.toList());
        return new PageImpl<>(userVOList, pageable, userPage.getTotalElements());
    }
    /**
     * 获取用户详情
     *
     * @param id 用户ID
     * @return 用户详情
     */
    @Override
    @Transactional(readOnly = true)
    public UserVO getUserById(Long id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        return convertToUserVO(user, true);
    }
    /**
     * 创建用户
     *
     * @param userDTO 用户信息
     * @return 创建后的用户信息
     */
    @Override
    @Transactional
    public UserVO createUser(UserDTO userDTO) {
        // 检查用户名是否存在
        if (userRepository.existsByUsername(userDTO.getUsername())) {
            throw new BusinessException("用户名已存在");
        }
        // 检查邮箱是否存在
        if (userDTO.getEmail() != null && userRepository.existsByEmail(userDTO.getEmail())) {
            throw new BusinessException("邮箱已存在");
        }
        // 检查手机号是否存在
        if (userDTO.getPhone() != null && userRepository.existsByPhone(userDTO.getPhone())) {
            throw new BusinessException("手机号已存在");
        }
        // 获取角色
        Set<Role> roles = new HashSet<>();
        if (userDTO.getRoleIds() != null && !userDTO.getRoleIds().isEmpty()) {
            roles = userDTO.getRoleIds().stream()
                    .map(roleId -> roleRepository.findById(roleId)
                            .orElseThrow(() -> new BusinessException("角色不存在: " + roleId)))
                    .collect(Collectors.toSet());
        } else {
            // 默认分配普通用户角色
            Role userRole = roleRepository.findByCode(RoleEnum.USER.getCode())
                    .orElseThrow(() -> new BusinessException("角色不存在"));
            roles.add(userRole);
        }
        // 创建用户
        User user = User.builder()
                .username(userDTO.getUsername())
                .password(passwordEncoder.encode(userDTO.getPassword()))
                .email(userDTO.getEmail())
                .phone(userDTO.getPhone())
                .avatar(userDTO.getAvatar())
                .nickname(userDTO.getNickname())
                .status(userDTO.getStatus() != null ? userDTO.getStatus() : 1)
                .institutionId(userDTO.getInstitutionId())
                .roles(roles)
                .build();
        // 保存用户
        User savedUser = userRepository.save(user);
        log.info("创建用户成功: {}", savedUser.getUsername());
        return convertToUserVO(savedUser);
    }
    /**
     * 更新用户
     *
     * @param id 用户ID
     * @param userDTO 用户信息
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO updateUser(Long id, UserDTO userDTO) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        // 检查用户名是否存在
        if (StringUtils.hasText(userDTO.getUsername()) && 
                !user.getUsername().equals(userDTO.getUsername()) && 
                userRepository.existsByUsername(userDTO.getUsername())) {
            throw new BusinessException("用户名已存在");
        }
        // 检查邮箱是否存在
        if (StringUtils.hasText(userDTO.getEmail()) && 
                (user.getEmail() == null || !user.getEmail().equals(userDTO.getEmail())) && 
                userRepository.existsByEmail(userDTO.getEmail())) {
            throw new BusinessException("邮箱已存在");
        }
        // 检查手机号是否存在
        if (StringUtils.hasText(userDTO.getPhone()) && 
                (user.getPhone() == null || !user.getPhone().equals(userDTO.getPhone())) && 
                userRepository.existsByPhone(userDTO.getPhone())) {
            throw new BusinessException("手机号已存在");
        }
        // 更新角色
        if (userDTO.getRoleIds() != null && !userDTO.getRoleIds().isEmpty()) {
            Set<Role> roles = userDTO.getRoleIds().stream()
                    .map(roleId -> roleRepository.findById(roleId)
                            .orElseThrow(() -> new BusinessException("角色不存在: " + roleId)))
                    .collect(Collectors.toSet());
            user.setRoles(roles);
        }
        // 更新基本信息
        if (StringUtils.hasText(userDTO.getUsername())) {
            user.setUsername(userDTO.getUsername());
        }
        if (StringUtils.hasText(userDTO.getPassword())) {
            user.setPassword(passwordEncoder.encode(userDTO.getPassword()));
        }
        if (StringUtils.hasText(userDTO.getEmail())) {
            user.setEmail(userDTO.getEmail());
        }
        if (StringUtils.hasText(userDTO.getPhone())) {
            user.setPhone(userDTO.getPhone());
        }
        if (StringUtils.hasText(userDTO.getAvatar())) {
            user.setAvatar(userDTO.getAvatar());
        }
        if (StringUtils.hasText(userDTO.getNickname())) {
            user.setNickname(userDTO.getNickname());
        }
        if (userDTO.getStatus() != null) {
            user.setStatus(userDTO.getStatus());
        }
        if (userDTO.getInstitutionId() != null) {
            user.setInstitutionId(userDTO.getInstitutionId());
        }
        // 保存用户
        User savedUser = userRepository.save(user);
        log.info("更新用户成功: {}", savedUser.getUsername());
        return convertToUserVO(savedUser);
    }
    /**
     * 删除用户
     *
     * @param id 用户ID
     */
    @Override
    @Transactional
    public void deleteUser(Long id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        userRepository.delete(user);
        log.info("删除用户成功: {}", user.getUsername());
    }
    /**
     * 修改用户状态
     *
     * @param id 用户ID
     * @param status 状态（0-禁用，1-正常）
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO updateUserStatus(Long id, Integer status) {
        // 获取用户
        User user = userRepository.findById(id)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        // 更新状态
        user.setStatus(status);
        User savedUser = userRepository.save(user);
        // 如果用户被禁用，使其所有token失效
        if (status != 1) {
            tokenBlacklistService.invalidateUserTokens(user.getUsername());
            log.info("用户 {} 已被禁用，所有token已失效", user.getUsername());
        }
        return convertToUserVO(savedUser);
    }
    /**
     * 给用户分配角色
     *
     * @param userId 用户ID
     * @param roleIds 角色ID列表
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO assignRoles(Long userId, Set<Long> roleIds) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        if (roleIds == null || roleIds.isEmpty()) {
            throw new BusinessException("角色ID列表不能为空");
        }
        Set<Role> roles = roleIds.stream()
                .map(roleId -> roleRepository.findById(roleId)
                        .orElseThrow(() -> new BusinessException("角色不存在: " + roleId)))
                .collect(Collectors.toSet());
        user.setRoles(roles);
        User savedUser = userRepository.save(user);
        log.info("给用户分配角色成功: {}, 角色IDs: {}", savedUser.getUsername(), roleIds);
        return convertToUserVO(savedUser);
    }
    /**
     * 批量删除用户
     *
     * @param ids 用户ID列表
     */
    @Override
    @Transactional
    public void batchDeleteUsers(List<Long> ids) {
        for (Long id : ids) {
            deleteUser(id);
        }
    }
    /**
     * 转换为用户VO（不包含角色信息）
     *
     * @param user 用户实体
     * @return 用户VO
     */
    private UserVO convertToUserVO(User user) {
        return convertToUserVO(user, false);
    }
    /**
     * 转换为用户VO
     *
     * @param user 用户实体
     * @param includeRoles 是否包含角色信息
     * @return 用户VO
     */
    private UserVO convertToUserVO(User user, boolean includeRoles) {
        UserVO.UserVOBuilder builder = UserVO.builder()
                .id(user.getId())
                .username(user.getUsername())
                .email(user.getEmail())
                .phone(user.getPhone())
                .avatar(user.getAvatar())
                .nickname(user.getNickname())
                .status(user.getStatus())
                .institutionId(user.getInstitutionId())
                .createdAt(user.getCreatedAt())
                .updatedAt(user.getUpdatedAt())
                .lastLoginAt(user.getLastLoginAt());
        if (includeRoles) {
            builder.roles(user.getRoles());
        }
        return builder.build();
    }
    /**
     * 获取当前登录用户信息
     *
     * @param username 当前登录用户名
     * @return 用户详细信息
     */
    @Override
    @Transactional(readOnly = true)
    public UserVO getCurrentUser(String username) {
        User user = getUserByUsername(username);
        // 创建基本的UserVO（不包含角色信息）
        UserVO.UserVOBuilder builder = UserVO.builder()
                .id(user.getId())
                .username(user.getUsername())
                .email(user.getEmail())
                .phone(user.getPhone())
                .avatar(user.getAvatar())
                .nickname(user.getNickname())
                .status(user.getStatus())
                .institutionId(user.getInstitutionId())
                .createdAt(user.getCreatedAt())
                .updatedAt(user.getUpdatedAt())
                .lastLoginAt(user.getLastLoginAt());
        // 从SecurityContext获取当前用户的角色信息
        org.springframework.security.core.Authentication authentication = 
            org.springframework.security.core.context.SecurityContextHolder.getContext().getAuthentication();
        if (authentication != null) {
            // 直接从Authentication中获取角色信息
            Set<Role> roles = authentication.getAuthorities().stream()
                .filter(authority -> authority.getAuthority().startsWith("ROLE_"))
                .map(authority -> {
                    String roleName = authority.getAuthority().substring(5); // 去掉"ROLE_"前缀
                    return Role.builder()
                            .name(roleName)
                            .code(roleName)
                            .build();
                })
                .collect(java.util.stream.Collectors.toSet());
            builder.roles(roles);
        }
        return builder.build();
    }
    /**
     * 更新当前用户个人信息
     *
     * @param username 当前登录用户名
     * @param nickname 昵称
     * @param phone 手机号
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO updateCurrentUserProfile(String username, String nickname, String phone) {
        User user = getUserByUsername(username);
        // 检查手机号是否已被其他用户使用
        if (StringUtils.hasText(phone) && !phone.equals(user.getPhone()) && existsByPhone(phone)) {
            throw new BusinessException("手机号已存在");
        }
        // 更新用户信息
        if (StringUtils.hasText(nickname)) {
            user.setNickname(nickname);
        }
        if (StringUtils.hasText(phone)) {
            user.setPhone(phone);
        }
        User updatedUser = userRepository.save(user);
        log.info("用户个人信息更新成功: {}", username);
        return convertToUserVO(updatedUser);
    }
    /**
     * 修改当前用户密码
     *
     * @param username 当前登录用户名
     * @param oldPassword 旧密码
     * @param newPassword 新密码
     * @return 是否修改成功
     */
    @Override
    @Transactional
    public boolean changePassword(String username, String oldPassword, String newPassword) {
        User user = getUserByUsername(username);
        // 验证旧密码
        if (!passwordEncoder.matches(oldPassword, user.getPassword())) {
            throw new BusinessException("旧密码不正确");
        }
        // 验证新旧密码不能相同
        if (passwordEncoder.matches(newPassword, user.getPassword())) {
            throw new BusinessException("新密码不能与旧密码相同");
        }
        // 更新密码
        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);
        log.info("用户密码修改成功: {}", username);
        return true;
    }
    /**
     * 更新当前用户头像
     *
     * @param username 当前登录用户名
     * @param avatarUrl 头像URL
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO updateAvatar(String username, String avatarUrl) {
        User user = getUserByUsername(username);
        // 获取旧头像URL
        String oldAvatarUrl = user.getAvatar();
        // 更新头像
        user.setAvatar(avatarUrl);
        User updatedUser = userRepository.save(user);
        log.info("用户头像更新成功: {}", username);
        // 删除旧头像
        if (oldAvatarUrl != null && !oldAvatarUrl.isEmpty()) {
            try {
                // 从URL中提取对象名
                String objectName = extractObjectNameFromUrl(oldAvatarUrl);
                if (objectName != null) {
                    boolean deleted = minioService.deleteFile(objectName);
                    if (deleted) {
                        log.info("删除旧头像成功: {}", objectName);
                    } else {
                        log.warn("删除旧头像失败: {}", objectName);
                    }
                }
            } catch (Exception e) {
                log.error("删除旧头像出错: {}", e.getMessage(), e);
                // 继续执行，不影响头像更新
            }
        }
        return convertToUserVO(updatedUser);
    }
    /**
     * 从URL中提取对象名
     * 例如：http://localhost:8999/media/avatars/username/uuid-filename.jpg
     * 提取为：avatars/username/uuid-filename.jpg
     */
    private String extractObjectNameFromUrl(String url) {
        if (url == null || url.isEmpty()) {
            return null;
        }
        try {
            // 查找桶名在URL中的位置
            String bucketName = "media"; // MinIO配置中的桶名
            int bucketIndex = url.indexOf("/" + bucketName + "/");
            if (bucketIndex != -1) {
                // +桶名长度+2，是为了跳过"/桶名/"
                return url.substring(bucketIndex + bucketName.length() + 2);
            }
            // 如果使用特殊格式，尝试直接从路径中提取
            String[] parts = url.split("/");
            if (parts.length >= 2) {
                // 假设最后两部分是路径，如：avatars/username/uuid-filename.jpg
                return String.join("/", parts[parts.length - 3], parts[parts.length - 2], parts[parts.length - 1]);
            }
            log.warn("无法从URL中提取对象名: {}", url);
            return null;
        } catch (Exception e) {
            log.error("提取对象名出错: {}", e.getMessage());
            return null;
        }
    }
    /**
     * 上传并更新用户头像
     */
    @Override
    @Transactional
    public Map<String, String> uploadAndUpdateAvatar(String username, MultipartFile file) throws IOException {
        // 检查文件类型
        String contentType = file.getContentType();
        if (contentType == null || !contentType.startsWith("image/")) {
            throw new BusinessException(400, "只支持上传图片文件");
        }
        // 检查文件大小（最大2MB）
        if (file.getSize() > 2 * 1024 * 1024) {
            throw new BusinessException(400, "文件大小不能超过2MB");
        }
        // 生成唯一的对象名
        String objectName = "avatars/" + username + "/" + UUID.randomUUID() + "-" + file.getOriginalFilename();
        // 上传到MinIO
        String avatarUrl = minioService.uploadFile(objectName, file.getInputStream(), file.getContentType());
        // 更新用户头像
        updateAvatar(username, avatarUrl);
        Map<String, String> result = new HashMap<>();
        result.put("avatarUrl", avatarUrl);
        return result;
    }
    /**
     * 更新当前用户邮箱
     *
     * @param username 当前登录用户名
     * @param newEmail 新邮箱
     * @param emailCode 邮箱验证码
     * @param password 当前密码 (用于安全验证)
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO updateEmail(String username, String newEmail, String emailCode, String password) {
        User user = getUserByUsername(username);
        // 验证用户密码
        if (!passwordEncoder.matches(password, user.getPassword())) {
            throw new BusinessException("密码不正确");
        }
        // 检查邮箱是否已被其他用户使用
        if (existsByEmail(newEmail)) {
            throw new BusinessException("邮箱已存在");
        }
        // 验证邮箱验证码
        boolean isValid = emailService.validateVerificationCode(newEmail, emailCode);
        if (!isValid) {
            throw new BusinessException("邮箱验证码不正确或已过期");
        }
        // 更新邮箱
        user.setEmail(newEmail);
        User updatedUser = userRepository.save(user);
        log.info("用户邮箱更新成功: {}, 新邮箱: {}", username, newEmail);
        return convertToUserVO(updatedUser);
    }
    /**
     * 获取用户基本信息（用于前端展示）
     *
     * @param userId 用户ID
     * @return 用户基本信息
     */
    @Override
    @Transactional(readOnly = true)
    public UserVO getBasicUserInfo(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        // 创建基本信息VO，不包含敏感信息
        return UserVO.builder()
                .id(user.getId())
                .username(user.getUsername())
                .nickname(user.getNickname())
                .avatar(user.getAvatar())
                .build();
    }
    /**
     * 更新用户角色
     *
     * @param userId 用户ID
     * @param roleIds 角色ID列表
     */
    @Override
    @Transactional
    public void updateUserRoles(Long userId, Set<Long> roleIds) {
        // 获取用户
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        // 获取角色
        Set<Role> roles = roleIds.stream()
                .map(roleId -> roleRepository.findById(roleId)
                        .orElseThrow(() -> new BusinessException("角色不存在: " + roleId)))
                .collect(Collectors.toSet());
        // 更新用户角色
        user.setRoles(roles);
        userRepository.save(user);
        // 使该用户的所有token失效
        tokenBlacklistService.invalidateUserTokens(user.getUsername());
        log.info("用户 {} 的角色已更新，所有token已失效", user.getUsername());
    }
    /**
     * 更新用户密码
     *
     * @param userId 用户ID
     * @param oldPassword 旧密码
     * @param newPassword 新密码
     */
    @Override
    @Transactional
    public void updatePassword(Long userId, String oldPassword, String newPassword) {
        // 获取用户
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        // 验证旧密码
        if (!passwordEncoder.matches(oldPassword, user.getPassword())) {
            throw new BusinessException("旧密码错误");
        }
        // 更新密码
        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);
        // 使该用户的所有token失效
        tokenBlacklistService.invalidateUserTokens(user.getUsername());
        log.info("用户 {} 的密码已更新，所有token已失效", user.getUsername());
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/InstitutionAuthService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.InstitutionRegisterDTO;
/**
 * 机构用户注册服务接口
 */
public interface InstitutionAuthService {
    /**
     * 使用机构注册码注册用户
     *
     * @param registerDTO 注册参数
     */
    void registerWithInstitutionCode(InstitutionRegisterDTO registerDTO);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/InstitutionService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplyDTO;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplicationQueryDTO;
import com.zhangziqi.online_course_mine.model.vo.InstitutionApplicationVO;
import com.zhangziqi.online_course_mine.model.vo.InstitutionVO;
import org.springframework.data.domain.Page;
/**
 * 机构服务接口
 */
public interface InstitutionService {
    /**
     * 申请创建机构
     *
     * @param applyDTO 申请参数
     * @return 申请ID
     */
    String applyInstitution(InstitutionApplyDTO applyDTO);
    /**
     * 查询申请状态
     *
     * @param applicationId 申请ID
     * @param email 联系邮箱
     * @return 申请状态
     */
    InstitutionApplicationVO getApplicationStatus(String applicationId, String email);
    /**
     * 分页查询机构申请
     *
     * @param queryDTO 查询参数
     * @return 申请分页
     */
    Page<InstitutionApplicationVO> getApplications(InstitutionApplicationQueryDTO queryDTO);
    /**
     * 查询申请详情
     *
     * @param id 申请ID
     * @return 申请详情
     */
    InstitutionApplicationVO getApplicationDetail(Long id);
    /**
     * 审核通过申请
     *
     * @param id 申请ID
     * @param reviewerUsername 审核人用户名
     * @return 机构信息
     */
    InstitutionVO approveApplication(Long id, String reviewerUsername);
    /**
     * 拒绝申请
     *
     * @param id 申请ID
     * @param reason 拒绝原因
     * @param reviewerUsername 审核人用户名
     */
    void rejectApplication(Long id, String reason, String reviewerUsername);
    /**
     * 获取机构注册码
     *
     * @param username 用户名
     * @return 注册码
     */
    String getInstitutionRegisterCode(String username);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/MediaService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.media.*;
import com.zhangziqi.online_course_mine.model.vo.MediaVO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
/**
 * 媒体服务接口
 */
public interface MediaService {
    /**
     * 初始化上传（返回所有分片的预签名URL）
     *
     * @param dto 上传初始化参数
     * @param institutionId 机构ID
     * @param uploaderId 上传者ID
     * @return 上传初始化结果
     */
    UploadInitiationVO initiateUpload(
            MediaUploadInitDTO dto, Long institutionId, Long uploaderId);
    /**
     * 完成上传
     *
     * @param mediaId 媒体ID
     * @param institutionId 机构ID
     * @param dto 完成上传请求参数
     * @return 媒体信息
     */
    MediaVO completeUpload(Long mediaId, Long institutionId, CompleteUploadDTO dto);
    /**
     * 取消上传
     *
     * @param mediaId 媒体ID
     * @param institutionId 机构ID
     */
    void cancelUpload(Long mediaId, Long institutionId);
    /**
     * 获取媒体访问URL
     *
     * @param mediaId 媒体ID
     * @param institutionId 机构ID
     * @param expirationMinutes URL有效期（分钟）
     * @return 预签名URL
     */
    String getMediaAccessUrl(Long mediaId, Long institutionId, Long expirationMinutes);
    /**
     * 获取媒体信息
     *
     * @param mediaId 媒体ID
     * @param institutionId 机构ID
     * @return 媒体信息
     */
    MediaVO getMediaInfo(Long mediaId, Long institutionId);
    /**
     * 获取媒体信息（预览模式，不验证机构ID）
     *
     * @param mediaId 媒体ID
     * @return 包含临时访问URL的媒体信息
     */
    MediaVO getMediaByIdForPreview(Long mediaId);
    /**
     * 分页获取机构媒体列表
     *
     * @param institutionId 机构ID
     * @param pageable 分页参数
     * @return 媒体列表
     */
    Page<MediaVO> getMediaList(Long institutionId, Pageable pageable);
    /**
     * 删除媒体文件
     *
     * @param mediaId 媒体ID
     * @param institutionId 机构ID
     */
    void deleteMedia(Long mediaId, Long institutionId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/MinioService.java">
package com.zhangziqi.online_course_mine.service;
import java.io.InputStream;
import java.util.List;
public interface MinioService {
    /**
     * 上传文件
     * 
     * @param objectName 对象名称
     * @param inputStream 文件输入流
     * @param contentType 文件类型
     * @return 文件访问URL
     */
    String uploadFile(String objectName, InputStream inputStream, String contentType);
    /**
     * 删除文件
     * 
     * @param objectName 对象名称
     * @return 是否删除成功
     */
    boolean deleteFile(String objectName);
    /**
     * 获取文件URL
     * 
     * @param objectName 对象名称
     * @return 文件访问URL
     */
    String getFileUrl(String objectName);
    /**
     * 列出所有文件
     * 
     * @return 文件名列表
     */
    List<String> listAllFiles();
    /**
     * 检查存储桶是否存在，不存在则创建
     */
    void checkAndCreateBucket();
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/OrderService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.order.OrderCreateDTO;
import com.zhangziqi.online_course_mine.model.dto.order.OrderRefundDTO;
import com.zhangziqi.online_course_mine.model.vo.OrderVO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.List;
import java.util.Map;
/**
 * 订单服务接口
 */
public interface OrderService {
    /**
     * 创建订单
     *
     * @param courseId 课程ID
     * @param userId 用户ID
     * @return 创建的订单VO
     */
    OrderVO createOrder(Long courseId, Long userId);
    /**
     * 处理支付宝同步回调
     *
     * @param params 支付宝回调参数
     * @return 处理结果
     */
    String handleAlipayReturn(Map<String, String> params);
    /**
     * 处理支付宝异步通知
     *
     * @param params 支付宝通知参数
     * @return 处理结果
     */
    String handleAlipayNotify(Map<String, String> params);
    /**
     * 根据订单号查询订单
     *
     * @param orderNo 订单号
     * @return 订单VO
     */
    OrderVO getOrderByOrderNo(String orderNo);
    /**
     * 根据ID查询订单
     *
     * @param id 订单ID
     * @return 订单VO
     */
    OrderVO getOrderById(Long id);
    /**
     * 查询用户的所有订单
     *
     * @param userId 用户ID
     * @return 订单VO列表
     */
    List<OrderVO> getUserOrders(Long userId);
    /**
     * 分页查询用户订单
     *
     * @param userId 用户ID
     * @param pageable 分页参数
     * @return 分页订单VO
     */
    Page<OrderVO> getUserOrders(Long userId, Pageable pageable);
    /**
     * 查询机构的所有订单
     *
     * @param institutionId 机构ID
     * @return 订单VO列表
     */
    List<OrderVO> getInstitutionOrders(Long institutionId);
    /**
     * 分页查询机构订单
     *
     * @param institutionId 机构ID
     * @param pageable 分页参数
     * @return 分页订单VO
     */
    Page<OrderVO> getInstitutionOrders(Long institutionId, Pageable pageable);
    /**
     * 查询所有订单（管理员）
     *
     * @return 订单VO列表
     */
    List<OrderVO> getAllOrders();
    /**
     * 分页查询所有订单（管理员）
     *
     * @param pageable 分页参数
     * @return 分页订单VO
     */
    Page<OrderVO> getAllOrders(Pageable pageable);
    /**
     * 申请退款
     *
     * @param id 订单ID
     * @param dto 退款信息
     * @param userId 用户ID
     * @return 更新后的订单VO
     */
    OrderVO refundOrder(Long id, OrderRefundDTO dto, Long userId);
    /**
     * 处理退款（机构管理员或平台管理员）
     *
     * @param id 订单ID
     * @param approved 是否批准
     * @param operatorId 操作人ID
     * @return 更新后的订单VO
     */
    OrderVO processRefund(Long id, boolean approved, Long operatorId);
    /**
     * 统计机构总收入（不含退款）
     *
     * @param institutionId 机构ID
     * @return 总收入金额
     */
    java.math.BigDecimal calculateInstitutionTotalIncome(Long institutionId);
    /**
     * 统计机构总退款
     *
     * @param institutionId 机构ID
     * @return 总退款金额
     */
    java.math.BigDecimal calculateInstitutionTotalRefund(Long institutionId);
    /**
     * 获取机构净收入
     *
     * @param institutionId 机构ID
     * @return 净收入金额（总收入-总退款）
     */
    java.math.BigDecimal calculateInstitutionNetIncome(Long institutionId);
    /**
     * 执行支付宝退款
     *
     * @param orderNo 订单号
     * @param refundAmount 退款金额
     * @param refundReason 退款原因
     * @return 退款结果，true表示成功，false表示失败
     */
    boolean executeAlipayRefund(String orderNo, java.math.BigDecimal refundAmount, String refundReason);
    /**
     * 处理支付成功回调
     *
     * @param orderNo 订单号
     */
    void handlePaymentSuccess(String orderNo);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/PermissionService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.PermissionDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.vo.PermissionVO;
import java.util.List;
/**
 * 权限服务接口
 */
public interface PermissionService {
    /**
     * 获取权限列表
     *
     * @return 权限列表
     */
    List<PermissionVO> getPermissionList();
    /**
     * 获取权限详情
     *
     * @param id 权限ID
     * @return 权限详情
     */
    PermissionVO getPermissionById(Long id);
    /**
     * 获取权限（根据编码）
     *
     * @param code 权限编码
     * @return 权限
     */
    Permission getPermissionByCode(String code);
    /**
     * 创建权限
     *
     * @param permissionDTO 权限信息
     * @return 创建后的权限信息
     */
    PermissionVO createPermission(PermissionDTO permissionDTO);
    /**
     * 更新权限
     *
     * @param id 权限ID
     * @param permissionDTO 权限信息
     * @return 更新后的权限信息
     */
    PermissionVO updatePermission(Long id, PermissionDTO permissionDTO);
    /**
     * 删除权限
     *
     * @param id 权限ID
     */
    void deletePermission(Long id);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/QuestionGroupService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.QuestionGroupDTO;
import com.zhangziqi.online_course_mine.model.dto.QuestionGroupItemDTO;
import com.zhangziqi.online_course_mine.model.vo.QuestionGroupItemVO;
import com.zhangziqi.online_course_mine.model.vo.QuestionGroupVO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.List;
/**
 * 题目组服务接口
 */
public interface QuestionGroupService {
    /**
     * 创建题目组
     *
     * @param groupDTO 题目组数据
     * @param creatorId 创建者ID
     * @return 创建后的题目组信息
     */
    QuestionGroupVO createGroup(QuestionGroupDTO groupDTO, Long creatorId);
    /**
     * 更新题目组
     *
     * @param groupDTO 题目组更新数据
     * @return 更新后的题目组信息
     */
    QuestionGroupVO updateGroup(QuestionGroupDTO groupDTO);
    /**
     * 根据ID查询题目组详情
     *
     * @param groupId 题目组ID
     * @param institutionId 机构ID
     * @param includeItems 是否包含题目
     * @return 题目组详情
     */
    QuestionGroupVO getGroupById(Long groupId, Long institutionId, boolean includeItems);
    /**
     * 根据ID查询题目组详情（预览模式，不验证机构ID）
     *
     * @param groupId 题目组ID
     * @param includeItems 是否包含题目
     * @return 题目组详情
     */
    QuestionGroupVO getGroupByIdForPreview(Long groupId, boolean includeItems);
    /**
     * 删除题目组
     *
     * @param groupId 题目组ID
     * @param institutionId 机构ID
     */
    void deleteGroup(Long groupId, Long institutionId);
    /**
     * 分页查询题目组列表
     *
     * @param institutionId 机构ID
     * @param keyword 关键词（可选）
     * @param pageable 分页参数
     * @return 分页题目组列表
     */
    Page<QuestionGroupVO> getGroups(Long institutionId, String keyword, Pageable pageable);
    /**
     * 获取机构的所有题目组
     *
     * @param institutionId 机构ID
     * @return 题目组列表
     */
    List<QuestionGroupVO> getAllGroups(Long institutionId);
    /**
     * 添加题目到题目组
     *
     * @param itemDTO 题目组项数据
     * @return 添加后的题目组项信息
     */
    QuestionGroupItemVO addQuestionToGroup(QuestionGroupItemDTO itemDTO);
    /**
     * 更新题目组项
     *
     * @param itemDTO 题目组项更新数据
     * @return 更新后的题目组项信息
     */
    QuestionGroupItemVO updateGroupItem(QuestionGroupItemDTO itemDTO);
    /**
     * 从题目组中移除题目
     *
     * @param groupId 题目组ID
     * @param itemId 题目项ID
     * @param institutionId 机构ID
     * @return 是否移除成功
     */
    boolean removeQuestionFromGroup(Long groupId, Long itemId, Long institutionId);
    /**
     * 获取题目组中的所有题目
     *
     * @param groupId 题目组ID
     * @param institutionId 机构ID
     * @return 题目组项列表
     */
    List<QuestionGroupItemVO> getGroupItems(Long groupId, Long institutionId);
    /**
     * 批量更新题目组项的顺序
     *
     * @param groupId 题目组ID
     * @param itemDTOs 题目项列表
     * @param institutionId 机构ID 
     * @return 是否更新成功
     */
    boolean updateItemsOrder(Long groupId, List<QuestionGroupItemDTO> itemDTOs, Long institutionId);
    /**
     * 批量添加题目到题目组
     *
     * @param groupId 题目组ID
     * @param questionIds 题目ID列表
     * @param institutionId 机构ID
     * @return 添加后的题目组项信息列表
     */
    List<QuestionGroupItemVO> addQuestionsToGroup(Long groupId, List<Long> questionIds, Long institutionId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/QuestionImportService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.vo.QuestionImportResultVO;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
/**
 * 试题导入服务接口
 */
public interface QuestionImportService {
    /**
     * 生成试题Excel导入模板
     *
     * @param response HTTP响应
     * @throws IOException 如果输出流写入失败
     */
    void generateExcelTemplate(HttpServletResponse response) throws IOException;
    /**
     * 导入试题Excel
     *
     * @param file 上传的Excel文件
     * @param institutionId 机构ID
     * @param userId 用户ID
     * @param batchSize 批处理大小
     * @return 导入结果
     */
    QuestionImportResultVO importQuestions(MultipartFile file, Long institutionId, Long userId, Integer batchSize) throws IOException;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/QuestionService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.QuestionDTO;
import com.zhangziqi.online_course_mine.model.vo.QuestionVO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.List;
/**
 * 题目服务接口
 */
public interface QuestionService {
    /**
     * 创建题目
     *
     * @param questionDTO 题目数据
     * @param creatorId 创建者ID
     * @return 创建后的题目信息
     */
    QuestionVO createQuestion(QuestionDTO questionDTO, Long creatorId);
    /**
     * 更新题目
     *
     * @param questionDTO 题目更新数据
     * @param userId 当前用户ID
     * @return 更新后的题目信息
     */
    QuestionVO updateQuestion(QuestionDTO questionDTO, Long userId);
    /**
     * 根据ID查询题目详情
     *
     * @param questionId 题目ID
     * @param institutionId 机构ID
     * @return 题目详情
     */
    QuestionVO getQuestionById(Long questionId, Long institutionId);
    /**
     * 删除题目
     *
     * @param questionId 题目ID
     * @param institutionId 机构ID
     * @param userId 用户ID
     */
    void deleteQuestion(Long questionId, Long institutionId, Long userId);
    /**
     * 分页查询题目列表
     *
     * @param institutionId 机构ID
     * @param type 题目类型（可选）
     * @param difficulty 难度级别（可选）
     * @param keyword 关键词（可选）
     * @param tagIds 标签ID列表（可选）
     * @param pageable 分页参数
     * @return 分页题目列表
     */
    Page<QuestionVO> getQuestions(Long institutionId, Integer type, Integer difficulty, String keyword, List<Long> tagIds, Pageable pageable);
    Page<QuestionVO> getQuestions(Long institutionId, Integer type, Integer difficulty, String keyword, Pageable pageable);
    /**
     * 随机获取指定数量的题目
     *
     * @param institutionId 机构ID
     * @param type 题目类型
     * @param count 题目数量
     * @return 题目列表
     */
    List<QuestionVO> getRandomQuestions(Long institutionId, Integer type, int count);
    /**
     * 根据ID列表批量获取题目
     *
     * @param questionIds 题目ID列表
     * @return 题目列表
     */
    List<QuestionVO> getQuestionsByIds(List<Long> questionIds);
    /**
     * 检查题目是否被题组引用
     * @param questionId 题目ID
     * @param institutionId 机构ID
     * @return 如果题目被任何题组引用，返回true；否则返回false
     */
    boolean isQuestionReferencedByGroups(Long questionId, Long institutionId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/QuestionTagService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.QuestionTagDTO;
import com.zhangziqi.online_course_mine.model.vo.QuestionTagVO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.List;
/**
 * 题目标签服务接口
 */
public interface QuestionTagService {
    /**
     * 创建题目标签
     *
     * @param tagDTO 标签数据
     * @param creatorId 创建者ID
     * @return 创建后的标签信息
     */
    QuestionTagVO createTag(QuestionTagDTO tagDTO, Long creatorId);
    /**
     * 更新题目标签
     *
     * @param tagDTO 标签更新数据
     * @return 更新后的标签信息
     */
    QuestionTagVO updateTag(QuestionTagDTO tagDTO);
    /**
     * 根据ID查询标签详情
     *
     * @param tagId 标签ID
     * @param institutionId 机构ID
     * @return 标签详情
     */
    QuestionTagVO getTagById(Long tagId, Long institutionId);
    /**
     * 删除标签
     *
     * @param tagId 标签ID
     * @param institutionId 机构ID
     */
    void deleteTag(Long tagId, Long institutionId);
    /**
     * 分页查询标签列表
     *
     * @param institutionId 机构ID
     * @param keyword 关键词（可选）
     * @param pageable 分页参数
     * @return 分页标签列表
     */
    Page<QuestionTagVO> getTags(Long institutionId, String keyword, Pageable pageable);
    /**
     * 获取机构的所有标签
     *
     * @param institutionId 机构ID
     * @return 标签列表
     */
    List<QuestionTagVO> getAllTags(Long institutionId);
    /**
     * 根据题目ID获取相关标签
     *
     * @param questionId 题目ID
     * @return 标签列表
     */
    List<QuestionTagVO> getTagsByQuestionId(Long questionId);
    /**
     * 为题目添加标签
     *
     * @param questionId 题目ID
     * @param tagId 标签ID
     * @param institutionId 机构ID
     * @return 是否添加成功
     */
    boolean addTagToQuestion(Long questionId, Long tagId, Long institutionId);
    /**
     * 移除题目标签
     *
     * @param questionId 题目ID
     * @param tagId 标签ID
     * @param institutionId 机构ID
     * @return 是否移除成功
     */
    boolean removeTagFromQuestion(Long questionId, Long tagId, Long institutionId);
    /**
     * 根据名称获取标签
     *
     * @param institutionId 机构ID
     * @param name 标签名称
     * @return 标签视图对象
     */
    QuestionTagVO getTagByName(Long institutionId, String name);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/RoleService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.RoleDTO;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.vo.RoleVO;
import java.util.List;
import java.util.Set;
/**
 * 角色服务接口
 */
public interface RoleService {
    /**
     * 获取角色列表
     *
     * @return 角色列表
     */
    List<RoleVO> getRoleList();
    /**
     * 获取角色详情
     *
     * @param id 角色ID
     * @return 角色详情
     */
    RoleVO getRoleById(Long id);
    /**
     * 获取角色（根据编码）
     *
     * @param code 角色编码
     * @return 角色
     */
    Role getRoleByCode(String code);
    /**
     * 创建角色
     *
     * @param roleDTO 角色信息
     * @return 创建后的角色信息
     */
    RoleVO createRole(RoleDTO roleDTO);
    /**
     * 更新角色
     *
     * @param id 角色ID
     * @param roleDTO 角色信息
     * @return 更新后的角色信息
     */
    RoleVO updateRole(Long id, RoleDTO roleDTO);
    /**
     * 删除角色
     *
     * @param id 角色ID
     */
    void deleteRole(Long id);
    /**
     * 给角色分配权限
     *
     * @param roleId 角色ID
     * @param permissionIds 权限ID列表
     * @return 更新后的角色信息
     */
    RoleVO assignPermissions(Long roleId, Set<Long> permissionIds);
    /**
     * 批量删除角色
     *
     * @param ids 角色ID列表
     */
    void batchDeleteRoles(List<Long> ids);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/SectionService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.section.*;
import com.zhangziqi.online_course_mine.model.vo.SectionVO;
import java.util.List;
/**
 * 小节服务接口
 */
public interface SectionService {
    /**
     * 创建小节
     *
     * @param dto 小节创建DTO
     * @return 创建的小节
     */
    SectionVO createSection(SectionCreateDTO dto);
    /**
     * 更新小节
     *
     * @param id 小节ID
     * @param dto 小节更新DTO
     * @return 更新后的小节
     */
    SectionVO updateSection(Long id, SectionCreateDTO dto);
    /**
     * 获取小节详情
     *
     * @param id 小节ID
     * @return 小节
     */
    SectionVO getSectionById(Long id);
    /**
     * 获取章节下的小节列表
     *
     * @param chapterId 章节ID
     * @return 小节列表
     */
    List<SectionVO> getSectionsByChapter(Long chapterId);
    /**
     * 获取课程下的所有小节
     *
     * @param courseId 课程ID
     * @return 小节列表
     */
    List<SectionVO> getSectionsByCourse(Long courseId);
    /**
     * 删除小节
     *
     * @param id 小节ID
     */
    void deleteSection(Long id);
    /**
     * 调整小节顺序
     *
     * @param chapterId 章节ID
     * @param sectionOrders 小节顺序列表，包含ID和顺序
     * @return 更新后的小节列表
     */
    List<SectionVO> reorderSections(Long chapterId, List<SectionOrderDTO> sectionOrders);
    /**
     * 设置小节媒体资源（直接关联）
     *
     * @param sectionId 小节ID
     * @param mediaId 媒体资源ID
     * @param resourceType 资源类型
     * @return 更新后的小节
     */
    SectionVO setMediaResource(Long sectionId, Long mediaId, String resourceType);
    /**
     * 移除小节媒体资源（直接关联）
     *
     * @param sectionId 小节ID
     * @return 更新后的小节
     */
    SectionVO removeMediaResource(Long sectionId);
    /**
     * 设置小节题目组（直接关联）
     *
     * @param sectionId 小节ID
     * @param questionGroupId 题目组ID
     * @param dto 题目组配置DTO
     * @return 更新后的小节
     */
    SectionVO setQuestionGroup(Long sectionId, Long questionGroupId, SectionQuestionGroupConfigDTO dto);
    /**
     * 移除小节题目组（直接关联）
     *
     * @param sectionId 小节ID
     * @return 更新后的小节
     */
    SectionVO removeQuestionGroup(Long sectionId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/StorageQuotaService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import com.zhangziqi.online_course_mine.model.vo.QuotaInfoVO;
import java.time.LocalDateTime;
import java.util.List;
/**
 * 存储配额服务接口
 * 用于管理机构的存储配额
 */
public interface StorageQuotaService {
    /**
     * 检查是否有足够的配额
     * 
     * @param institutionId 机构ID
     * @param quotaType 配额类型
     * @param requiredSize 所需空间大小（字节）
     * @return 是否有足够配额
     */
    boolean hasEnoughQuota(Long institutionId, QuotaType quotaType, Long requiredSize);
    /**
     * 更新已使用配额
     * 
     * @param institutionId 机构ID
     * @param quotaType 配额类型
     * @param deltaSize 变化量（字节，正数为增加，负数为减少）
     */
    void updateUsedQuota(Long institutionId, QuotaType quotaType, Long deltaSize);
    /**
     * 获取机构配额信息
     * 
     * @param institutionId 机构ID
     * @return 配额信息
     */
    QuotaInfoVO getQuotaInfo(Long institutionId);
    /**
     * 获取机构所有类型的配额
     *
     * @param institutionId 机构ID
     * @return 配额列表
     */
    List<QuotaInfoVO> getAllQuotas(Long institutionId);
    /**
     * 设置配额大小
     *
     * @param institutionId 机构ID
     * @param type 配额类型
     * @param totalQuota 总配额(字节)
     * @param expiresAt 过期时间(可选)
     */
    void setQuota(Long institutionId, QuotaType type, Long totalQuota, LocalDateTime expiresAt);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/TagService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.TagDTO;
import com.zhangziqi.online_course_mine.model.entity.Tag;
import com.zhangziqi.online_course_mine.model.vo.TagVO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.List;
import java.util.Set;
/**
 * 标签服务接口
 */
public interface TagService {
    /**
     * 创建标签
     * 
     * @param tagDTO 标签信息
     * @return 创建的标签ID
     */
    Long createTag(TagDTO tagDTO);
    /**
     * 更新标签
     * 
     * @param id 标签ID
     * @param tagDTO 标签信息
     * @return 是否更新成功
     */
    boolean updateTag(Long id, TagDTO tagDTO);
    /**
     * 删除标签
     * 
     * @param id 标签ID
     * @return 是否删除成功
     */
    boolean deleteTag(Long id);
    /**
     * 获取标签详情
     * 
     * @param id 标签ID
     * @return 标签详情
     */
    TagVO getTag(Long id);
    /**
     * 根据名称获取标签
     * 
     * @param name 标签名称
     * @return 标签详情
     */
    TagVO getTagByName(String name);
    /**
     * 分页查询标签
     * 
     * @param keyword 关键词
     * @param pageable 分页参数
     * @return 标签分页结果
     */
    Page<TagVO> listTags(String keyword, Pageable pageable);
    /**
     * 获取热门标签
     * 
     * @param limit 数量限制
     * @return 热门标签列表
     */
    List<TagVO> getPopularTags(int limit);
    /**
     * 根据名称列表获取或创建标签
     * 
     * @param tagNames 标签名称列表
     * @return 标签列表
     */
    Set<Tag> getOrCreateTags(List<String> tagNames);
    /**
     * 校验标签名称是否可用
     * 
     * @param name 标签名称
     * @param excludeId 排除的ID（更新时使用）
     * @return 名称是否可用
     */
    boolean isNameAvailable(String name, Long excludeId);
    /**
     * 增加标签使用次数
     * 
     * @param tagId 标签ID
     */
    void incrementTagUseCount(Long tagId);
    /**
     * 减少标签使用次数
     * 
     * @param tagId 标签ID
     */
    void decrementTagUseCount(Long tagId);
    /**
     * 获取标签实体
     * 
     * @param id 标签ID
     * @return 标签实体
     */
    Tag getTagEntity(Long id);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/UserCourseService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.entity.UserCourse;
import com.zhangziqi.online_course_mine.model.vo.CourseVO;
import com.zhangziqi.online_course_mine.model.vo.UserCourseVO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import java.util.List;
import java.util.Optional;
/**
 * 用户课程服务接口
 */
public interface UserCourseService {
    /**
     * 获取用户的已购课程
     *
     * @param userId 用户ID
     * @return 课程VO列表
     */
    List<CourseVO> getUserPurchasedCourses(Long userId);
    /**
     * 分页获取用户的已购课程
     *
     * @param userId 用户ID
     * @param pageable 分页参数
     * @return 分页课程VO
     */
    Page<CourseVO> getUserPurchasedCourses(Long userId, Pageable pageable);
    /**
     * 获取用户的课程学习记录
     *
     * @param userId 用户ID
     * @param courseId 课程ID
     * @return 用户课程VO
     */
    UserCourseVO getUserCourseRecord(Long userId, Long courseId);
    /**
     * 更新用户的课程学习进度
     *
     * @param userId 用户ID
     * @param courseId 课程ID
     * @param progress 进度百分比（0-100）
     * @return 更新后的用户课程VO
     */
    UserCourseVO updateLearningProgress(Long userId, Long courseId, Integer progress);
    /**
     * 记录用户的学习时长
     *
     * @param userId 用户ID
     * @param courseId 课程ID
     * @param duration 学习时长（秒）
     * @return 更新后的用户课程VO
     */
    UserCourseVO recordLearningDuration(Long userId, Long courseId, Integer duration);
    /**
     * 检查用户是否已购买课程
     *
     * @param userId 用户ID
     * @param courseId 课程ID
     * @return 是否已购买
     */
    boolean hasPurchasedCourse(Long userId, Long courseId);
    /**
     * 获取课程的所有学习用户
     *
     * @param courseId 课程ID
     * @return 用户课程VO列表
     */
    List<UserCourseVO> getCourseStudents(Long courseId);
    /**
     * 分页获取课程的学习用户
     *
     * @param courseId 课程ID
     * @param pageable 分页参数
     * @return 分页用户课程VO
     */
    Page<UserCourseVO> getCourseStudents(Long courseId, Pageable pageable);
    /**
     * 获取机构的所有学习用户
     *
     * @param institutionId 机构ID
     * @return 用户课程VO列表
     */
    List<UserCourseVO> getInstitutionStudents(Long institutionId);
    /**
     * 分页获取机构的学习用户
     *
     * @param institutionId 机构ID
     * @param pageable 分页参数
     * @return 分页用户课程VO
     */
    Page<UserCourseVO> getInstitutionStudents(Long institutionId, Pageable pageable);
    /**
     * 获取用户最近学习的课程
     *
     * @param userId 用户ID
     * @param limit 数量限制
     * @return 课程VO列表
     */
    List<CourseVO> getRecentLearnedCourses(Long userId, int limit);
    /**
     * 创建用户课程关系(购买课程)
     * 
     * @param userId 用户ID
     * @param courseId 课程ID
     * @param orderId 订单ID
     * @param isPaid 是否已支付
     * @return 创建的用户课程关系
     */
    UserCourse createUserCourseRelation(Long userId, Long courseId, Long orderId, boolean isPaid);
    /**
     * 更新用户课程关系状态为已退款
     * 
     * @param orderId 订单ID
     * @return 更新后的用户课程关系
     */
    UserCourse updateUserCourseRefunded(Long orderId);
    /**
     * 根据订单ID查找用户课程关系
     * 
     * @param orderId 订单ID
     * @return 用户课程关系(可能为空)
     */
    Optional<UserCourse> findByOrderId(Long orderId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/UserFavoriteService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.vo.UserFavoriteVO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
/**
 * 用户收藏课程服务接口
 */
public interface UserFavoriteService {
    /**
     * 添加收藏
     * @param userId 用户ID
     * @param courseId 课程ID
     * @return 是否成功
     */
    boolean addFavorite(Long userId, Long courseId);
    /**
     * 取消收藏
     * @param userId 用户ID
     * @param courseId 课程ID
     * @return 是否成功
     */
    boolean removeFavorite(Long userId, Long courseId);
    /**
     * 检查是否已收藏
     * @param userId 用户ID
     * @param courseId 课程ID
     * @return 是否已收藏
     */
    boolean isFavorite(Long userId, Long courseId);
    /**
     * 获取用户收藏的课程列表
     * @param userId 用户ID
     * @param pageable 分页参数
     * @return 收藏课程分页列表
     */
    Page<UserFavoriteVO> getUserFavorites(Long userId, Pageable pageable);
    /**
     * 统计用户收藏课程数量
     * @param userId 用户ID
     * @return 收藏课程数量
     */
    long countUserFavorites(Long userId);
    /**
     * 统计课程被收藏次数
     * @param courseId 课程ID
     * @return 被收藏次数
     */
    long countCourseFavorites(Long courseId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/UserService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.dto.UserDTO;
import com.zhangziqi.online_course_mine.model.dto.UserQueryDTO;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import org.springframework.data.domain.Page;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Set;
/**
 * 用户服务接口
 */
public interface UserService {
    /**
     * 注册用户
     *
     * @param registerDTO 注册请求
     * @return 用户信息
     */
    User register(RegisterDTO registerDTO);
    /**
     * 根据用户名查询用户
     *
     * @param username 用户名
     * @return 用户信息
     */
    User getUserByUsername(String username);
    /**
     * 检查用户名是否存在
     *
     * @param username 用户名
     * @return 是否存在
     */
    boolean existsByUsername(String username);
    /**
     * 检查邮箱是否存在
     *
     * @param email 邮箱
     * @return 是否存在
     */
    boolean existsByEmail(String email);
    /**
     * 检查手机号是否存在
     *
     * @param phone 手机号
     * @return 是否存在
     */
    boolean existsByPhone(String phone);
    /**
     * 更新最后登录时间
     *
     * @param username 用户名
     */
    void updateLastLoginTime(String username);
    /**
     * 分页查询用户列表
     *
     * @param queryDTO 查询条件
     * @return 用户列表（分页）
     */
    Page<UserVO> getUserList(UserQueryDTO queryDTO);
    /**
     * 获取用户详情
     *
     * @param id 用户ID
     * @return 用户详情
     */
    UserVO getUserById(Long id);
    /**
     * 创建用户
     *
     * @param userDTO 用户信息
     * @return 创建后的用户信息
     */
    UserVO createUser(UserDTO userDTO);
    /**
     * 更新用户
     *
     * @param id 用户ID
     * @param userDTO 用户信息
     * @return 更新后的用户信息
     */
    UserVO updateUser(Long id, UserDTO userDTO);
    /**
     * 删除用户
     *
     * @param id 用户ID
     */
    void deleteUser(Long id);
    /**
     * 更新用户角色
     *
     * @param userId 用户ID
     * @param roleIds 角色ID列表
     */
    @Transactional
    void updateUserRoles(Long userId, Set<Long> roleIds);
    /**
     * 更新用户状态
     *
     * @param id 用户ID
     * @param status 状态
     * @return 更新后的用户信息
     */
    @Transactional
    UserVO updateUserStatus(Long id, Integer status);
    /**
     * 给用户分配角色
     *
     * @param userId 用户ID
     * @param roleIds 角色ID列表
     * @return 更新后的用户信息
     */
    UserVO assignRoles(Long userId, Set<Long> roleIds);
    /**
     * 批量删除用户
     *
     * @param ids 用户ID列表
     */
    void batchDeleteUsers(List<Long> ids);
    /**
     * 获取当前登录用户信息
     *
     * @param username 当前登录用户名
     * @return 用户详细信息
     */
    UserVO getCurrentUser(String username);
    /**
     * 更新当前用户个人信息
     *
     * @param username 当前登录用户名
     * @param nickname 昵称
     * @param phone 手机号
     * @return 更新后的用户信息
     */
    UserVO updateCurrentUserProfile(String username, String nickname, String phone);
    /**
     * 修改当前用户密码
     *
     * @param username 当前登录用户名
     * @param oldPassword 旧密码
     * @param newPassword 新密码
     * @return 是否修改成功
     */
    boolean changePassword(String username, String oldPassword, String newPassword);
    /**
     * 更新当前用户头像
     *
     * @param username 当前登录用户名
     * @param avatarUrl 头像URL
     * @return 更新后的用户信息
     */
    UserVO updateAvatar(String username, String avatarUrl);
    /**
     * 上传并更新用户头像
     *
     * @param username 当前登录用户名
     * @param file 头像文件
     * @return 头像URL和用户信息的映射
     * @throws IOException 文件处理异常
     */
    Map<String, String> uploadAndUpdateAvatar(String username, MultipartFile file) throws IOException;
    /**
     * 更新当前用户邮箱
     *
     * @param username 当前登录用户名
     * @param newEmail 新邮箱
     * @param emailCode 邮箱验证码
     * @param password 当前密码 (用于安全验证)
     * @return 更新后的用户信息
     */
    UserVO updateEmail(String username, String newEmail, String emailCode, String password);
    /**
     * 获取用户基本信息（用于前端展示）
     *
     * @param userId 用户ID
     * @return 用户基本信息
     */
    UserVO getBasicUserInfo(Long userId);
    /**
     * 更新用户密码
     *
     * @param userId 用户ID
     * @param oldPassword 旧密码
     * @param newPassword 新密码
     */
    @Transactional
    void updatePassword(Long userId, String oldPassword, String newPassword);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/util/DataInitializer.java">
package com.zhangziqi.online_course_mine.util;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.RoleEnum;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Profile;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
/**
 * 数据初始化
 * 用于初始化角色和权限数据
 */
@Slf4j
@Component
@RequiredArgsConstructor
@Profile({"dev", "test"}) // 仅在开发和测试环境下运行
public class DataInitializer {
    private final RoleRepository roleRepository;
    private final PermissionRepository permissionRepository;
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    /**
     * 初始化数据
     */
    @PostConstruct
    @Transactional
    public void init() {
        log.info("开始初始化角色和权限数据");
        // 初始化角色
        initRoles();
        // 初始化权限
        initPermissions();
        // 初始化角色权限关系
        initRolePermissions();
        // 初始化管理员
        initAdmin();
        log.info("角色和权限数据初始化完成");
    }
    /**
     * 初始化角色
     */
    private void initRoles() {
        // 检查角色是否已存在
        if (roleRepository.count() > 0) {
            log.info("角色数据已存在，跳过初始化");
            return;
        }
        // 创建角色
        List<Role> roles = (List<Role>) Arrays.stream(RoleEnum.values())
                .map(roleEnum -> Role.builder()
                        .name(roleEnum.getName())
                        .code(roleEnum.getCode())
                        .description(roleEnum.getName() + "角色")
                        .build())
                .toList();
        // 保存角色
        roleRepository.saveAll(roles);
        log.info("角色数据初始化完成，共{}条", roles.size());
    }
    /**
     * 初始化权限
     */
    private void initPermissions() {
        // 检查权限是否已存在
        if (permissionRepository.count() > 0) {
            log.info("权限数据已存在，跳过初始化");
            return;
        }
        // 创建权限
        List<Permission> permissions = Arrays.asList(
                Permission.builder().name("用户查询").code("user:read").url("/api/users/**").method("GET").build(),
                Permission.builder().name("用户创建").code("user:create").url("/api/users").method("POST").build(),
                Permission.builder().name("用户修改").code("user:update").url("/api/users/**").method("PUT").build(),
                Permission.builder().name("用户删除").code("user:delete").url("/api/users/**").method("DELETE").build(),
                Permission.builder().name("角色查询").code("role:read").url("/api/roles/**").method("GET").build(),
                Permission.builder().name("角色创建").code("role:create").url("/api/roles").method("POST").build(),
                Permission.builder().name("角色修改").code("role:update").url("/api/roles/**").method("PUT").build(),
                Permission.builder().name("角色删除").code("role:delete").url("/api/roles/**").method("DELETE").build(),
                Permission.builder().name("权限查询").code("permission:read").url("/api/permissions/**").method("GET").build(),
                Permission.builder().name("权限创建").code("permission:create").url("/api/permissions").method("POST").build(),
                Permission.builder().name("权限修改").code("permission:update").url("/api/permissions/**").method("PUT").build(),
                Permission.builder().name("权限删除").code("permission:delete").url("/api/permissions/**").method("DELETE").build(),
                Permission.builder().name("课程查询").code("course:read").url("/api/courses/**").method("GET").build(),
                Permission.builder().name("课程创建").code("course:create").url("/api/courses").method("POST").build(),
                Permission.builder().name("课程修改").code("course:update").url("/api/courses/**").method("PUT").build(),
                Permission.builder().name("课程删除").code("course:delete").url("/api/courses/**").method("DELETE").build(),
                Permission.builder().name("课程审核").code("course:review").url("/api/courses/*/review").method("POST").build()
        );
        // 保存权限
        permissionRepository.saveAll(permissions);
        log.info("权限数据初始化完成，共{}条", permissions.size());
    }
    /**
     * 初始化角色权限关系
     */
    private void initRolePermissions() {
        // 获取角色
        Role adminRole = roleRepository.findByCode(RoleEnum.ADMIN.getCode())
                .orElseThrow(() -> new RuntimeException("管理员角色不存在"));
        Role userRole = roleRepository.findByCode(RoleEnum.USER.getCode())
                .orElseThrow(() -> new RuntimeException("普通用户角色不存在"));
        Role reviewerRole = roleRepository.findByCode(RoleEnum.REVIEWER.getCode())
                .orElseThrow(() -> new RuntimeException("审核人员角色不存在"));
        Role institutionRole = roleRepository.findByCode(RoleEnum.INSTITUTION.getCode())
                .orElseThrow(() -> new RuntimeException("机构用户角色不存在"));
        // 获取所有权限
        List<Permission> allPermissions = permissionRepository.findAll();
        if (allPermissions.isEmpty()) {
            log.warn("权限数据为空，跳过初始化角色权限关系");
            return;
        }
        // 如果角色已经有权限，则跳过
        if (!adminRole.getPermissions().isEmpty()) {
            log.info("角色权限关系已存在，跳过初始化");
            return;
        }
        // 设置管理员角色的权限（所有权限）
        adminRole.setPermissions(new HashSet<>(allPermissions));
        // 设置普通用户角色的权限（查询权限）
        userRole.setPermissions(allPermissions.stream()
                .filter(permission -> permission.getCode().endsWith(":read"))
                .filter(permission -> !permission.getCode().startsWith("role:") && !permission.getCode().startsWith("permission:"))
                .collect(java.util.stream.Collectors.toSet()));
        // 设置审核人员角色的权限（查询权限 + 课程审核权限）
        reviewerRole.setPermissions(allPermissions.stream()
                .filter(permission -> permission.getCode().endsWith(":read") || permission.getCode().equals("course:review"))
                .collect(java.util.stream.Collectors.toSet()));
        // 设置机构用户角色的权限（查询权限 + 课程管理权限）
        institutionRole.setPermissions(allPermissions.stream()
                .filter(permission -> permission.getCode().endsWith(":read") || 
                                      permission.getCode().startsWith("course:"))
                .collect(java.util.stream.Collectors.toSet()));
        // 保存角色
        roleRepository.saveAll(Arrays.asList(adminRole, userRole, reviewerRole, institutionRole));
        log.info("角色权限关系初始化完成");
    }
    /**
     * 初始化管理员
     */
    private void initAdmin() {
        // 检查管理员是否已存在
        if (userRepository.findByUsername("admin").isPresent()) {
            log.info("管理员已存在，跳过初始化");
            return;
        }
        // 获取管理员角色
        Role adminRole = roleRepository.findByCode(RoleEnum.ADMIN.getCode())
                .orElseThrow(() -> new RuntimeException("管理员角色不存在"));
        // 创建管理员
        User admin = User.builder()
                .username("admin")
                .password(passwordEncoder.encode("admin123"))
                .email("admin@example.com")
                .status(1)
                .roles(Collections.singleton(adminRole))
                .build();
        // 保存管理员
        userRepository.save(admin);
        log.info("管理员初始化完成");
    }
}
</file>

<file path="src/main/resources/application-dev.yml">
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/online_course?useSSL=false&serverTimezone=Asia/Shanghai&characterEncoding=utf-8&allowPublicKeyRetrieval=true
    username: root
    password: Zzq664450274
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.MySQL8Dialect
  data:
    redis:
      port: 6379
      host: localhost
      database: 0
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
      password: Zzq664450274
  mail:
    # 163邮箱的地址为smtp.163.com，直接填写即可
    host: smtp.163.com
    # 你申请的163邮箱
    username: madpsycho@163.com
    # 注意密码是在开启smtp/pop3时自动生成的，记得保存一下，不然就找不到了
    password: PFVIMQPDCKMNWZHI
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          from: madpsycho@163.com
    default-encoding: UTF-8
    protocol: smtp
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    com.zhangziqi: DEBUG
jwt:
  secret: ZGV2and0c2VjcmV0a2V5aGVyZW1ha2VpdGxvbmdhbmRzZWN1cmVhdGxlYXN0MjU2Yml0cw==
  access-token-expiration: 3600000  # 1小时
  refresh-token-expiration: 604800000 # 7天
server:
  port: 8080 
# MinIO配置
minio:
  endpoint: http://localhost:8999
  accessKey: double2and9
  secretKey: Zzq664450274
  bucketName: media
# AWS S3配置
aws:
  s3:
    endpoint: http://localhost:8999
    region: us-east-1
    access-key: double2and9
    secret-key: Zzq664450274
    bucket-name: media
    path-style-access: true
alipay:
  appId: 2021000146674085
  appPrivateKey: MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCq26bsdvQHxoNoI4NqLGOgVIBC94AP+sgJ+Tlk9LDcSj4BfblXyjg91oyTqVdbStP6VF8FSuwOAKB/xmE+blThgviXssvnCBLGZmIe5dv/a2VMljNW31YyypPtj3y0AhNdP0svTg0J4ESsckljhzp1h1m8Fuiu2U09uQbVmmuYFtzt3nBXWOZ9X9aM2Wh1r0gU/XuYBj5Bq6XDBAGwTcPj8EQX+D4aUlk+a0hpH10qEi9InmNIYmRsNy6HNG8BAECh/SLHJEtLLMoUo4EJUA7l2D888bEC0oJD8w+Lngt5GkqgDh8RlSLCdrXMepwGRZkx2pDqdpSu7GOg1kUZ/sUzAgMBAAECggEAcbLSFjHimvoDoF1hqln3wk35PJcvZXLhg6GSDBi5SR8uvBdKK52qZ5xK2EislVfqUH+s6/y7sWXBaMY/GCib26Yof+q/vfKla9neGemkyQhS1PBvIbRlzE76ue/ucGuhL0BbbBNoodXYXVmAdPccc/GqSXyFQzXgLN7gKW0lhIM6jJJz6HDg2umnN2K8Im5QVq3ehmqyoWYHXfLXaHDF5gOX8Dmv5QlxvsVmyBuL0Z/MZQ/BKfOTe8xPcL4MdyxjXuZrpG5Ms5vXoq17adgSCrAVWcEKNhBXoESsh8NDI/snKU9qhAQjf0gd92R80GmkOldVgui/n96syWhqaEy8QQKBgQDoHpCKu6QmjUwZiUnVcYTMoixe+ItuUh65MiXa20AAWmS59H+L5fPOdJIPegS4vkkEhSuEyCK3iK/jZ06eFiq6FZ6i9tw1zwKjv9ccn5SLtZvBLSafB3648MROg218IIaEImnGuxB2dz+j2SueotUgNIc5HHrrMd40+Hz28k3F6wKBgQC8b55J8Z0rH8v4vYheaivT6hrIxmbrMfiNBt06XyMj4cX4JHK1Q7GY5gd97qTwRv7Ictd9iv+FKigoalHi60x1jZphmhQv3XYugsnqImFl0pAgje+g4oqIBirOA4S3yFnbFG/8dwWsfCw3Eyf9GfTrE/BsbiAWel1+OucNxPDD2QKBgAp71uttLizPlPBSUxNg3S6g5IAlmaaR7vFOYodP/8QEUShU8q3O5QQeH7qzOCNf9MxPd3e30lmXwtnygIqDVcqxz0hs/eUwRF5A++Y/DuaAfVhsQaJNJFwWA8fIB9njXi/5ne1r5YJ0QFuWI3I2yIl71d+ueZ7F0dNypbJBn2GhAoGBAIk12ZPMTH5/S74W/LqLItjPKauy1HREUdEXA3YimmrhVo8msyQMY8CLFz96yz1u5M0+2my/Dup/VPiA2pmabnVWo+iYEkT8RLb/Y1mKqVNEbNBXqfqDmw4LN5YFd9l/GPbuvdCfNlFvpZ6A42hoQy/9t96snc7gUT2+VEpxckOZAoGBAKDI9dp1GoQpU0c93tiHIl5czuT8PpccZYFmCOFnjM/LU7ta6PMAKFSw47FkzTOhQJRe/X+qoQO0ty8Mx8dqS2IPVYS1iF76YhYtXu0dkBqhFXqdFP63SEwoUK2tXgWxQLHm7n9WunhOH3S69XvEjAzXS3eWVP0ibhp1JsnfcxqV
  alipayPublicKey: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlsuiw7BmNqVUn1qDXrnW/hwiG/xuEI9IcBn8YLmMoGWzelKpWXnPRSZIRxHvvV/uyl+WRMSJYJgqAg2QcJkq1BEjFkkfeGdWcqjpZgfznq42lw1sB6KtPuCetbJl+O1TpQHBZuSllcCDunX+tMnkkivhAB21X+B9j/A7d5L+y0hpu5bLbCtE8P1FjU7Sd9lUcEfk+JUwYB2FLJS17AYq7F4Q3CvlMmpCroQn7hiBgyGJ34xFYnaknwgC6ibgvym/kPd9TqFJbNnKDgwezm/A8ab5oB0d6Qem4jdK8eJvHGVCZ479jeASob4wCyU5FTBlzZZoaXd3PhuT4ts7BzsXvwIDAQAB
  notifyUrl: http://v2yixe.natappfree.cc/api/alipay/notify
  gatewayUrl: https://openapi-sandbox.dl.alipaydev.com/gateway.do
</file>

<file path="src/main/resources/application-test.yml">
spring:
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: 
    driver-class-name: org.h2.Driver
  h2:
    console:
      enabled: true
      path: /h2-console
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.H2Dialect
  data:
    redis:
      host: localhost
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
  mail:
    host: smtp.qq.com
    port: 587
    username: test@qq.com
    password: test-password
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          from: test@qq.com
    default-encoding: UTF-8
    protocol: smtp
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    com.zhangziqi: DEBUG
jwt:
  secret: dGVzdGp3dHNlY3JldGtleWhlcmVtYWtlaXRsb25nYW5kc2VjdXJlYXRsZWFzdDI1NmJpdHM=
  access-token-expiration: 3600000  # 1小时
  refresh-token-expiration: 604800000 # 7天
server:
  port: 8081 
# MinIO配置
minio:
  endpoint: http://localhost:8999
  accessKey: double2and9
  secretKey: Zzq664450274
  bucketName: media
# AWS S3配置
aws:
  s3:
    endpoint: http://localhost:8999
    region: us-east-1
    access-key: double2and9
    secret-key: Zzq664450274
    bucket-name: media
    path-style-access: true
</file>

<file path="src/main/resources/application.yml">
spring:
  profiles:
    active: dev
# 试题导入配置
question:
  import:
    # 单次导入最大行数限制
    max-rows: 1000
    # 是否启用并发处理
    concurrent-enabled: true
    # 默认批处理大小
    default-batch-size: 50
</file>

<file path="src/main/resources/templates/email/application-approved.html">
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>机构入驻申请已通过</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 20px;
            margin-top: 20px;
        }
        .code {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
            letter-spacing: 2px;
            text-align: center;
            padding: 10px;
            background-color: #e9ecef;
            border-radius: 3px;
            margin: 20px 0;
        }
        .important {
            font-weight: bold;
            color: #28a745;
        }
        .warning {
            color: #dc3545;
            font-size: 14px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>机构入驻申请已通过</h2>
        <p>尊敬的用户，</p>
        <p>恭喜您！您的机构 <span class="important" th:text="${institutionName}">示例教育机构</span> 入驻申请已通过审核。</p>
        <p>您的机构注册码如下：</p>
        <div class="code" th:text="${registerCode}">ABC12345</div>
        <p><strong>请妥善保管此注册码，您可以将此注册码分享给贵机构的成员。他们可以使用此注册码注册成为机构用户。</strong></p>
        <p>机构用户注册时：</p>
        <ol>
            <li>访问注册页面选择"机构用户注册"</li>
            <li>填写个人信息及此注册码</li>
            <li>完成验证后即可成为贵机构的用户</li>
        </ol>
        <p class="warning">
            注意：请仅将注册码分享给您的机构成员，避免外泄导致非授权人员加入您的机构。
        </p>
        <p>
            如有任何问题，请随时联系我们的客服团队。<br>
            祝您使用愉快！<br>
            在线课程平台团队
        </p>
    </div>
</body>
</html>
</file>

<file path="src/main/resources/templates/email/application-confirmation.html">
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>机构入驻申请确认</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 20px;
            margin-top: 20px;
        }
        .info {
            font-size: 16px;
            background-color: #e9ecef;
            border-radius: 3px;
            padding: 15px;
            margin: 20px 0;
        }
        .highlight {
            font-weight: bold;
            color: #007bff;
        }
        .warning {
            color: #dc3545;
            font-size: 14px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>机构入驻申请确认</h2>
        <p>您好！</p>
        <p>我们已收到您的机构入驻申请，您的申请信息如下：</p>
        <div class="info">
            <p><strong>机构名称：</strong> <span th:text="${institutionName}">示例教育机构</span></p>
            <p><strong>申请编号：</strong> <span class="highlight" th:text="${applicationId}">APP123456</span></p>
            <p><strong>申请时间：</strong> <span th:text="${#temporals.format(#temporals.createNow(), 'yyyy-MM-dd HH:mm:ss')}">2023-03-15 10:30:00</span></p>
        </div>
        <p>我们将尽快对您的申请进行审核，请保留此申请编号以便查询申请状态。</p>
        <p>您可以通过以下信息查询申请状态：</p>
        <ul>
            <li>申请编号：<span class="highlight" th:text="${applicationId}">APP123456</span></li>
            <li>联系邮箱：您提交申请时使用的邮箱</li>
        </ul>
        <p class="warning">
            注意：请勿将申请编号泄露给他人，如果这不是您的操作，请忽略此邮件。
        </p>
        <p>
            感谢您对我们平台的信任与支持！<br>
            在线课程平台团队
        </p>
    </div>
</body>
</html>
</file>

<file path="src/main/resources/templates/email/application-rejected.html">
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>机构入驻申请未通过</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 20px;
            margin-top: 20px;
        }
        .reason {
            font-size: 16px;
            background-color: #e9ecef;
            border-radius: 3px;
            padding: 15px;
            margin: 20px 0;
        }
        .institution {
            font-weight: bold;
            color: #007bff;
        }
        .note {
            color: #28a745;
            font-size: 14px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>机构入驻申请未通过</h2>
        <p>尊敬的用户，</p>
        <p>很遗憾地通知您，您的机构 <span class="institution" th:text="${institutionName}">示例教育机构</span> 入驻申请未能通过我们的审核。</p>
        <p>未通过原因：</p>
        <div class="reason">
            <p th:text="${reason}">提供的机构资质材料不完整，请补充XXX证明材料。</p>
        </div>
        <p>您可以根据以上原因修改信息后重新提交申请。</p>
        <p class="note">
            如需帮助或有任何疑问，请通过以下方式联系我们的客服团队：<br>
            - 客服电话：400-XXX-XXXX<br>
            - 客服邮箱：support@example.com
        </p>
        <p>
            感谢您的理解与支持！<br>
            在线课程平台团队
        </p>
    </div>
</body>
</html>
</file>

<file path="src/main/resources/templates/email/email-update-code.html">
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>邮箱更新验证码</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 20px;
            margin-top: 20px;
        }
        .code {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
            letter-spacing: 2px;
            text-align: center;
            padding: 10px;
            background-color: #e9ecef;
            border-radius: 3px;
            margin: 20px 0;
        }
        .warning {
            color: #dc3545;
            font-size: 14px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>邮箱更新验证码</h2>
        <p>您好！</p>
        <p>您正在进行邮箱更新操作，以下是您的验证码：</p>
        <div class="code" th:text="${code}">123456</div>
        <p>此验证码将在 <span th:text="${expirationMinutes}">5</span> 分钟后失效。</p>
        <p class="warning">
            注意：如果这不是您的操作，请忽略此邮件并考虑修改您的账户密码以确保账户安全。
        </p>
        <p>
            祝您使用愉快！<br>
            在线课程平台团队
        </p>
    </div>
</body>
</html>
</file>

<file path="src/main/resources/templates/email/verification-code.html">
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>邮箱验证码</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 20px;
            margin-top: 20px;
        }
        .code {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
            letter-spacing: 2px;
            text-align: center;
            padding: 10px;
            background-color: #e9ecef;
            border-radius: 3px;
            margin: 20px 0;
        }
        .warning {
            color: #dc3545;
            font-size: 14px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>邮箱验证码</h2>
        <p>您好！</p>
        <p>感谢您注册在线课程平台。您的验证码是：</p>
        <div class="code" th:text="${code}">123456</div>
        <p>此验证码将在 <span th:text="${expirationMinutes}">5</span> 分钟后失效。</p>
        <p class="warning">
            注意：请勿将验证码泄露给他人。如果这不是您的操作，请忽略此邮件。
        </p>
        <p>
            祝您使用愉快！<br>
            在线课程平台团队
        </p>
    </div>
</body>
</html>
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/config/TestSecurityConfig.java">
package com.zhangziqi.online_course_mine.config;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import com.zhangziqi.online_course_mine.security.jwt.JwtAuthenticationFilter;
import com.zhangziqi.online_course_mine.security.jwt.JwtTokenProvider;
import com.zhangziqi.online_course_mine.security.jwt.TokenBlacklistService;
import org.mockito.ArgumentMatchers;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.Profile;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
/**
 * 测试环境安全配置
 * 用于集成测试，提供尽可能接近生产环境的配置
 */
@TestConfiguration
@EnableWebSecurity
@Profile("test") // 确保只在测试环境下激活
public class TestSecurityConfig {
    @Bean
    @Primary
    public JwtTokenProvider jwtTokenProvider() {
        JwtTokenProvider mockProvider = mock(JwtTokenProvider.class);
        // 可以在这里添加一些基本的行为
        when(mockProvider.validateToken(ArgumentMatchers.anyString())).thenReturn(true);
        return mockProvider;
    }
    @Bean
    @Primary
    public TokenBlacklistService tokenBlacklistService() {
        TokenBlacklistService mockService = mock(TokenBlacklistService.class);
        // 可以在这里添加一些基本的行为
        when(mockService.isBlacklisted(ArgumentMatchers.anyString())).thenReturn(false);
        return mockService;
    }
    @Bean
    @Primary
    public JwtConfig jwtConfig() {
        JwtConfig config = new JwtConfig();
        config.setSecret("test-secret-key-for-testing-purposes-only");
        config.setAccessTokenExpiration(3600000L); // 1小时
        config.setRefreshTokenExpiration(86400000L); // 24小时
        return config;
    }
    @Bean
    @Primary
    public AuthenticationManager authenticationManager() {
        return mock(AuthenticationManager.class);
    }
    @Bean
    @Primary
    public UserDetailsService userDetailsService() {
        // 不再使用mock实现，而是返回一个实际能查询到测试用户的UserDetailsService
        return username -> {
            // 为集成测试创建一个简单的UserDetails实现
            if ("admin_test".equals(username)) {
                return org.springframework.security.core.userdetails.User.builder()
                    .username("admin_test")
                    .password("$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG") // "password"的加密值
                    .roles("ADMIN")
                    .authorities("ROLE_ADMIN", "TEST_READ")
                    .build();
            } else if ("user_test".equals(username)) {
                return org.springframework.security.core.userdetails.User.builder()
                    .username("user_test")
                    .password("$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG") // "password"的加密值
                    .roles("USER")
                    .build();
            }
            throw new org.springframework.security.core.userdetails.UsernameNotFoundException("用户不存在: " + username);
        };
    }
    @Bean
    @Primary
    public JwtAuthenticationFilter jwtAuthenticationFilter(JwtTokenProvider tokenProvider, TokenBlacklistService blacklistService) {
        return new JwtAuthenticationFilter(tokenProvider, blacklistService);
    }
    @Bean
    @Primary
    public SecurityFilterChain securityFilterChain(HttpSecurity http, JwtAuthenticationFilter jwtAuthenticationFilter) throws Exception {
        http
            .csrf(AbstractHttpConfigurer::disable)
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/auth/**").permitAll() // 开放认证相关接口
                .anyRequest().authenticated() // 其他接口需要认证
            )
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/integration/AuthControllerIntegrationTest.java">
package com.zhangziqi.online_course_mine.integration;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zhangziqi.online_course_mine.config.TestSecurityConfig;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.*;
import com.zhangziqi.online_course_mine.service.AuthService;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import com.zhangziqi.online_course_mine.service.EmailService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import java.awt.image.BufferedImage;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.*;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
/**
 * 认证控制器集成测试
 * 使用实际的安全过滤器链，但模拟了业务服务组件
 */
@SpringBootTest(
    // 可以在这里指定特定的配置属性
    properties = {
        "spring.main.allow-bean-definition-overriding=true"
    }
)
@AutoConfigureMockMvc
@ActiveProfiles("test") // 使用测试环境配置
@Import(TestSecurityConfig.class)
public class AuthControllerIntegrationTest {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;
    @MockBean
    private AuthService authService;
    @MockBean
    private CaptchaService captchaService;
    @MockBean
    private EmailService emailService;
    @Test
    public void testGetCaptcha() throws Exception {
        // 模拟验证码服务
        BufferedImage mockImage = new BufferedImage(150, 50, BufferedImage.TYPE_INT_RGB);
        given(captchaService.generateCaptcha(any())).willReturn(mockImage);
        // 1. 获取验证码key
        String result = mockMvc.perform(get("/api/auth/captcha/key"))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data").isString())
                .andReturn()
                .getResponse()
                .getContentAsString();
        // 从响应中提取验证码key
        String captchaKey = new ObjectMapper().readTree(result).get("data").asText();
        // 2. 使用key获取验证码图片
        mockMvc.perform(get("/api/auth/captcha/image/{key}", captchaKey))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(header().string(HttpHeaders.CONTENT_TYPE, MediaType.IMAGE_JPEG_VALUE))
                .andExpect(header().string(HttpHeaders.CACHE_CONTROL, "no-store, no-cache, must-revalidate"));
        verify(captchaService, times(1)).generateCaptcha(eq(captchaKey));
    }
    @Test
    public void testCompleteRegistrationFlow() throws Exception {
        // 1. 获取图形验证码key
        String result = mockMvc.perform(get("/api/auth/captcha/key"))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andReturn()
                .getResponse()
                .getContentAsString();
        String captchaKey = new ObjectMapper().readTree(result).get("data").asText();
        // 2. 获取验证码图片
        BufferedImage mockImage = new BufferedImage(150, 50, BufferedImage.TYPE_INT_RGB);
        given(captchaService.generateCaptcha(any())).willReturn(mockImage);
        mockMvc.perform(get("/api/auth/captcha/image/{key}", captchaKey))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(header().string(HttpHeaders.CONTENT_TYPE, MediaType.IMAGE_JPEG_VALUE));
        // 3. 发送邮箱验证码
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("test@example.com");
        emailVerificationDTO.setCaptchaKey(captchaKey);
        emailVerificationDTO.setCaptchaCode("1234");
        given(captchaService.validateCaptcha(eq(captchaKey), eq("1234"))).willReturn(true);
        given(emailService.generateVerificationCode()).willReturn("123456");
        doNothing().when(emailService).sendVerificationCode(anyString(), anyString());
        doNothing().when(emailService).saveVerificationCode(anyString(), anyString());
        mockMvc.perform(post("/api/auth/email-verification-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200));
        // 4. 完成注册
        RegisterDTO registerDTO = new RegisterDTO();
        registerDTO.setUsername("testuser");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("test@example.com");
        registerDTO.setPhone("13812345678");
        registerDTO.setCaptchaKey(captchaKey);
        registerDTO.setCaptchaCode("1234");
        registerDTO.setEmailCode("123456");
        // 注册时会先调用 emailService.validateVerificationCode，然后调用 userService
        doAnswer(invocation -> {
            RegisterDTO dto = invocation.getArgument(0);
            // 这会触发 emailService.validateVerificationCode 的调用
            emailService.validateVerificationCode(dto.getEmail(), dto.getEmailCode());
            return null;
        }).when(authService).register(any(RegisterDTO.class));
        given(emailService.validateVerificationCode(eq("test@example.com"), eq("123456"))).willReturn(true);
        mockMvc.perform(post("/api/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(registerDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.code").value(200));
        // 验证所有服务调用
        verify(captchaService).validateCaptcha(eq(captchaKey), eq("1234")); // 只在发送邮箱验证码时验证
        verify(emailService).generateVerificationCode();
        verify(emailService).sendVerificationCode(eq("test@example.com"), eq("123456"));
        verify(emailService).saveVerificationCode(eq("test@example.com"), eq("123456"));
        verify(emailService).validateVerificationCode(eq("test@example.com"), eq("123456"));
        verify(authService).register(any(RegisterDTO.class));
    }
    @Test
    public void testRegistrationWithInvalidEmailCode() throws Exception {
        // 准备注册数据
        RegisterDTO registerDTO = new RegisterDTO();
        registerDTO.setUsername("testuser");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("test@example.com");
        registerDTO.setCaptchaKey("test-key");
        registerDTO.setCaptchaCode("1234");
        registerDTO.setEmailCode("123456");
        // 模拟邮箱验证码验证失败
        given(emailService.validateVerificationCode(eq("test@example.com"), eq("123456"))).willReturn(false);
        doThrow(new BusinessException("邮箱验证码错误或已过期"))
            .when(authService).register(any(RegisterDTO.class));
        mockMvc.perform(post("/api/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(registerDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.error").value("邮箱验证码错误或已过期"));
        verify(emailService, never()).validateVerificationCode(eq("test@example.com"), eq("123456"));
        verify(authService).register(any(RegisterDTO.class));
    }
    @Test
    public void testSendEmailVerificationCodeWithInvalidCaptcha() throws Exception {
        // 准备邮箱验证码请求数据
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("test@example.com");
        emailVerificationDTO.setCaptchaKey("test-key");
        emailVerificationDTO.setCaptchaCode("1234");
        // 模拟图形验证码验证失败
        given(captchaService.validateCaptcha("test-key", "1234")).willReturn(false);
        mockMvc.perform(post("/api/auth/email-verification-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(500))
                .andExpect(jsonPath("$.message").value("验证码错误"));
        verify(captchaService).validateCaptcha(eq("test-key"), eq("1234"));
        verify(emailService, never()).generateVerificationCode();
        verify(emailService, never()).sendVerificationCode(any(), any());
        verify(emailService, never()).saveVerificationCode(any(), any());
    }
    @Test
    public void testSendEmailUpdateCode() throws Exception {
        // 准备邮箱更新验证码请求数据
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("newemail@example.com");
        emailVerificationDTO.setCaptchaKey("test-key");
        emailVerificationDTO.setCaptchaCode("1234");
        String verificationCode = "654321";
        // 模拟图形验证码验证通过
        given(captchaService.validateCaptcha("test-key", "1234")).willReturn(true);
        // 模拟验证码生成
        given(emailService.generateVerificationCode()).willReturn(verificationCode);
        // 模拟邮件发送
        doNothing().when(emailService).sendEmailUpdateCode(eq("newemail@example.com"), eq(verificationCode));
        // 模拟验证码保存
        doNothing().when(emailService).saveVerificationCode(eq("newemail@example.com"), eq(verificationCode));
        mockMvc.perform(post("/api/auth/email-update-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.message").value("操作成功"));
        verify(captchaService).validateCaptcha(eq("test-key"), eq("1234"));
        verify(emailService).generateVerificationCode();
        verify(emailService).sendEmailUpdateCode(eq("newemail@example.com"), eq(verificationCode));
        verify(emailService).saveVerificationCode(eq("newemail@example.com"), eq(verificationCode));
    }
    @Test
    public void testSendEmailUpdateCodeWithInvalidCaptcha() throws Exception {
        // 准备邮箱更新验证码请求数据
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("newemail@example.com");
        emailVerificationDTO.setCaptchaKey("test-key");
        emailVerificationDTO.setCaptchaCode("1234");
        // 模拟图形验证码验证失败
        given(captchaService.validateCaptcha("test-key", "1234")).willReturn(false);
        mockMvc.perform(post("/api/auth/email-update-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(500))
                .andExpect(jsonPath("$.message").value("验证码错误"));
        verify(captchaService).validateCaptcha(eq("test-key"), eq("1234"));
        verify(emailService, never()).generateVerificationCode();
        verify(emailService, never()).sendEmailUpdateCode(any(), any());
        verify(emailService, never()).saveVerificationCode(any(), any());
    }
    @Test
    public void testLogin() throws Exception {
        // 创建登录请求
        LoginDTO loginDTO = new LoginDTO();
        loginDTO.setUsername("testuser");
        loginDTO.setPassword("password123");
        loginDTO.setCaptchaKey("test-key");
        loginDTO.setCaptchaCode("1234");
        // 模拟JWT令牌
        JwtTokenDTO jwtTokenDTO = JwtTokenDTO.builder()
                .accessToken("access-token")
                .refreshToken("refresh-token")
                .expiresIn(3600000)
                .build();
        // 模拟服务
        given(authService.login(any(LoginDTO.class))).willReturn(jwtTokenDTO);
        // 执行请求
        mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.accessToken").value("access-token"))
                .andExpect(jsonPath("$.data.refreshToken").value("refresh-token"))
                .andExpect(jsonPath("$.data.expiresIn").value(3600000));
        verify(authService, times(1)).login(any(LoginDTO.class));
    }
    @Test
    public void testRefreshToken() throws Exception {
        // 创建刷新令牌请求
        RefreshTokenDTO refreshTokenDTO = new RefreshTokenDTO();
        refreshTokenDTO.setRefreshToken("refresh-token");
        // 模拟JWT令牌
        JwtTokenDTO jwtTokenDTO = JwtTokenDTO.builder()
                .accessToken("new-access-token")
                .refreshToken("refresh-token")
                .expiresIn(3600000)
                .build();
        // 模拟服务
        given(authService.refreshToken(any(RefreshTokenDTO.class))).willReturn(jwtTokenDTO);
        // 执行请求
        mockMvc.perform(post("/api/auth/refresh-token")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(refreshTokenDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.accessToken").value("new-access-token"))
                .andExpect(jsonPath("$.data.refreshToken").value("refresh-token"))
                .andExpect(jsonPath("$.data.expiresIn").value(3600000));
        verify(authService, times(1)).refreshToken(any(RefreshTokenDTO.class));
    }
    @Test
    public void testLogout() throws Exception {
        // 模拟服务
        doNothing().when(authService).logout(anyString());
        // 执行请求
        mockMvc.perform(post("/api/auth/logout")
                        .header("Authorization", "Bearer test-token"))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.message").value("操作成功"));
        verify(authService, times(1)).logout(eq("test-token"));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/integration/MinioIntegrationTest.java">
package com.zhangziqi.online_course_mine.integration;
import com.zhangziqi.online_course_mine.service.MinioService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.ActiveProfiles;
import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assumptions.assumeTrue;
@SpringBootTest
@ActiveProfiles("test")
class MinioIntegrationTest {
    @Autowired
    private MinioService minioService;
    /**
     * 这个测试只有在MINIO_ENABLED环境变量为true时才会运行
     * 可以在运行测试前设置环境变量：MINIO_ENABLED=true
     */
    @Test
    @EnabledIfEnvironmentVariable(named = "MINIO_ENABLED", matches = "true")
    void testMinioOperations() throws Exception {
        // 要测试的文件数据
        String objectName = "test-integration-" + System.currentTimeMillis() + ".txt";
        String content = "Hello MinIO Integration Test!";
        ByteArrayInputStream inputStream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));
        String contentType = "text/plain";
        try {
            // 1. 上传文件
            String url = minioService.uploadFile(objectName, inputStream, contentType);
            assertNotNull(url);
            // 永久URL应该包含对象名
            assertTrue(url.contains(objectName));
            // 2. 获取文件URL
            String fileUrl = minioService.getFileUrl(objectName);
            assertNotNull(fileUrl);
            // 两个URL应该完全相同，因为都是用相同方式构建的永久URL
            assertEquals(url, fileUrl);
            // 3. 列出所有文件
            List<String> files = minioService.listAllFiles();
            assertNotNull(files);
            assertTrue(files.contains(objectName));
        } finally {
            // 4. 删除测试文件（清理）
            boolean deleted = minioService.deleteFile(objectName);
            assertTrue(deleted);
            // 验证文件已被删除
            List<String> filesAfterDelete = minioService.listAllFiles();
            assertFalse(filesAfterDelete.contains(objectName));
        }
    }
    /**
     * 一个总是跳过的测试，用于演示如何运行集成测试
     */
    @Test
    void testSkippedByDefault() {
        // 默认跳过这个测试
        assumeTrue(false, "手动跳过的测试，需要正确配置MinIO才能运行");
        fail("这个测试不应该被执行");
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/integration/PermissionControllerIntegrationTest.java">
package com.zhangziqi.online_course_mine.integration;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zhangziqi.online_course_mine.config.TestSecurityConfig;
import com.zhangziqi.online_course_mine.model.dto.PermissionDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.test.context.support.WithUserDetails;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import java.util.Collections;
import java.util.Set;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
@SpringBootTest(properties = {"spring.main.allow-bean-definition-overriding=true"})
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Import(TestSecurityConfig.class)
public class PermissionControllerIntegrationTest {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private RoleRepository roleRepository;
    @Autowired
    private PermissionRepository permissionRepository;
    @Autowired
    private PasswordEncoder passwordEncoder;
    @Autowired
    private ObjectMapper objectMapper;
    private Role adminRole;
    private Role userRole;
    private User adminUser;
    private User normalUser;
    private Permission testPermission;
    private final String BASE_URL = "/api/permissions";
    @BeforeEach
    void setUp() {
        // 清理数据
        userRepository.deleteAll();
        roleRepository.deleteAll();
        permissionRepository.deleteAll();
        // 创建测试权限 - 使用与TestUserDetailsService一致的权限代码
        testPermission = permissionRepository.save(Permission.builder()
                .name("测试权限")
                .code("TEST_READ")  // 与TestUserDetailsService中的权限代码一致
                .url("/api/test/**")
                .method("GET")
                .description("测试权限描述")
                .build());
        // 创建角色 - 使用与TestUserDetailsService一致的角色代码
        adminRole = roleRepository.save(Role.builder()
                .name("管理员")
                .code("ROLE_ADMIN") // 与TestUserDetailsService中的角色代码一致
                .description("管理员角色")
                .build());
        userRole = roleRepository.save(Role.builder()
                .name("普通用户")
                .code("ROLE_USER") // 与TestUserDetailsService中的角色代码一致
                .description("普通用户角色")
                .build());
        // 给角色分配权限
        adminRole.setPermissions(Set.of(testPermission));
        roleRepository.save(adminRole);
        // 创建测试用户 - 用户名与TestUserDetailsService中的一致
        adminUser = User.builder()
                .username("admin_test") // 与TestUserDetailsService中的用户名一致
                .password(passwordEncoder.encode("password"))
                .email("admin@test.com")
                .status(1)
                .roles(Set.of(adminRole))
                .build();
        userRepository.save(adminUser);
        normalUser = User.builder()
                .username("user_test") // 与TestUserDetailsService中的用户名一致
                .password(passwordEncoder.encode("password"))
                .email("user@test.com")
                .status(1)
                .roles(Set.of(userRole))
                .build();
        userRepository.save(normalUser);
    }
    @AfterEach
    void tearDown() {
        userRepository.deleteAll();
        roleRepository.deleteAll();
        permissionRepository.deleteAll();
    }
    @Test
    @WithUserDetails(value = "admin_test", userDetailsServiceBeanName = "userDetailsService")
    void getPermissionListShouldReturnPermissionListWhenUserIsAdmin() throws Exception {
        mockMvc.perform(get(BASE_URL))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data[0].id").value(testPermission.getId()));
    }
    @Test
    @WithUserDetails(value = "user_test", userDetailsServiceBeanName = "userDetailsService")
    void getPermissionListShouldReturnForbiddenWhenUserIsNotAdmin() throws Exception {
        mockMvc.perform(get(BASE_URL))
                .andExpect(status().isForbidden());
    }
    @Test
    @WithUserDetails(value = "admin_test", userDetailsServiceBeanName = "userDetailsService")
    void createPermissionShouldSucceedWhenUserIsAdmin() throws Exception {
        PermissionDTO permissionDTO = new PermissionDTO();
        permissionDTO.setName("新权限");
        permissionDTO.setCode("NEW_CREATE");  // 修改为大写字母、数字、下划线格式
        permissionDTO.setUrl("/api/new");
        permissionDTO.setMethod("POST");
        permissionDTO.setDescription("新权限描述");
        mockMvc.perform(post(BASE_URL)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(permissionDTO)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.data.name").value("新权限"));
    }
    @Test
    @WithUserDetails(value = "admin_test", userDetailsServiceBeanName = "userDetailsService")
    void updatePermissionShouldSucceedWhenUserIsAdmin() throws Exception {
        PermissionDTO permissionDTO = new PermissionDTO();
        permissionDTO.setName("更新权限");
        permissionDTO.setCode("TEST_UPDATE");  // 修改为大写字母、数字、下划线格式
        permissionDTO.setUrl("/api/test/**");
        permissionDTO.setMethod("PUT");
        permissionDTO.setDescription("更新权限描述");
        mockMvc.perform(put(BASE_URL + "/" + testPermission.getId())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(permissionDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.name").value("更新权限"));
    }
    @Test
    @WithUserDetails(value = "admin_test", userDetailsServiceBeanName = "userDetailsService")
    void deletePermissionShouldSucceedWhenUserIsAdmin() throws Exception {
        // 在删除权限前先解除权限与角色的关联
        adminRole.setPermissions(Collections.emptySet());
        roleRepository.save(adminRole);
        // 然后再测试删除权限
        mockMvc.perform(delete(BASE_URL + "/" + testPermission.getId()))
                .andExpect(status().isNoContent());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/integration/RoleControllerIntegrationTest.java">
package com.zhangziqi.online_course_mine.integration;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zhangziqi.online_course_mine.config.TestSecurityConfig;
import com.zhangziqi.online_course_mine.model.dto.RoleDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.test.context.support.WithUserDetails;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
@SpringBootTest(properties = {"spring.main.allow-bean-definition-overriding=true"})
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Import(TestSecurityConfig.class)
public class RoleControllerIntegrationTest {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private RoleRepository roleRepository;
    @Autowired
    private PermissionRepository permissionRepository;
    @Autowired
    private PasswordEncoder passwordEncoder;
    @Autowired
    private ObjectMapper objectMapper;
    private Role adminRole;
    private Role userRole;
    private User adminUser;
    private User normalUser;
    private Permission testPermission;
    private Role testRole;
    private final String BASE_URL = "/api/roles";
    @BeforeEach
    void setUp() {
        // 清理数据
        userRepository.deleteAll();
        roleRepository.deleteAll();
        permissionRepository.deleteAll();
        // 创建测试权限
        testPermission = Permission.builder()
                .name("测试权限")
                .code("TEST_READ")
                .url("/api/test/**")
                .method("GET")
                .description("测试权限描述")
                .build();
        testPermission = permissionRepository.save(testPermission);
        // 创建管理员角色
        adminRole = Role.builder()
                .name("管理员")
                .code("ROLE_ADMIN")
                .description("管理员角色")
                .permissions(new HashSet<>(Collections.singletonList(testPermission)))
                .build();
        adminRole = roleRepository.save(adminRole);
        // 创建普通用户角色
        userRole = Role.builder()
                .name("普通用户")
                .code("ROLE_USER")
                .description("普通用户角色")
                .build();
        userRole = roleRepository.save(userRole);
        // 创建测试角色
        testRole = Role.builder()
                .name("测试角色")
                .code("ROLE_TEST")
                .description("测试角色描述")
                .build();
        testRole = roleRepository.save(testRole);
        // 创建管理员用户
        adminUser = User.builder()
                .username("admin_test")
                .password(passwordEncoder.encode("password"))
                .email("admin@test.com")
                .status(1)
                .roles(Set.of(adminRole))
                .build();
        adminUser = userRepository.save(adminUser);
        // 创建普通用户
        normalUser = User.builder()
                .username("user_test")
                .password(passwordEncoder.encode("password"))
                .email("user@test.com")
                .status(1)
                .roles(Set.of(userRole))
                .build();
        normalUser = userRepository.save(normalUser);
    }
    @AfterEach
    void tearDown() {
        // 清理测试数据
        userRepository.deleteAll();
        roleRepository.deleteAll();
        permissionRepository.deleteAll();
    }
    @Test
    @WithUserDetails("admin_test")
    void getRoleListShouldReturnRoleListWhenUserIsAdmin() throws Exception {
        mockMvc.perform(get(BASE_URL))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data").isArray())
                .andExpect(jsonPath("$.data.length()").value(3)); // 包含3个角色
    }
    @Test
    @WithUserDetails("user_test")
    void getRoleListShouldReturnForbiddenWhenUserIsNotAdmin() throws Exception {
        mockMvc.perform(get(BASE_URL))
                .andExpect(status().isForbidden());
    }
    @Test
    @WithUserDetails("admin_test")
    void getRoleByIdShouldReturnRoleWhenUserIsAdmin() throws Exception {
        mockMvc.perform(get(BASE_URL + "/" + testRole.getId()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.name").value("测试角色"))
                .andExpect(jsonPath("$.data.code").value("ROLE_TEST"));
    }
    @Test
    @WithUserDetails("admin_test")
    void createRoleShouldSucceedWhenUserIsAdmin() throws Exception {
        // 准备创建角色的数据
        RoleDTO roleDTO = new RoleDTO();
        roleDTO.setName("新角色");
        roleDTO.setCode("ROLE_NEW");
        roleDTO.setDescription("新角色描述");
        mockMvc.perform(post(BASE_URL)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(roleDTO)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.name").value("新角色"))
                .andExpect(jsonPath("$.data.code").value("ROLE_NEW"));
    }
    @Test
    @WithUserDetails("admin_test")
    void updateRoleShouldSucceedWhenUserIsAdmin() throws Exception {
        // 准备更新角色的数据
        RoleDTO roleDTO = new RoleDTO();
        roleDTO.setName("更新的测试角色");
        roleDTO.setCode("ROLE_TEST");
        roleDTO.setDescription("更新的测试角色描述");
        mockMvc.perform(put(BASE_URL + "/" + testRole.getId())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(roleDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.name").value("更新的测试角色"))
                .andExpect(jsonPath("$.data.description").value("更新的测试角色描述"));
    }
    @Test
    @WithUserDetails("admin_test")
    void deleteRoleShouldSucceedWhenUserIsAdmin() throws Exception {
        mockMvc.perform(delete(BASE_URL + "/" + testRole.getId()))
                .andExpect(status().isNoContent());
        // 确认角色已被删除
        mockMvc.perform(get(BASE_URL + "/" + testRole.getId()))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.error").value("角色不存在"));
    }
    @Test
    @WithUserDetails("admin_test")
    void assignPermissionsShouldSucceedWhenUserIsAdmin() throws Exception {
        // 准备权限ID列表
        List<Long> permissionIds = Collections.singletonList(testPermission.getId());
        mockMvc.perform(put(BASE_URL + "/" + testRole.getId() + "/permissions")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(permissionIds)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.permissions[0].id").value(testPermission.getId()));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/integration/S3IntegrationTest.java">
package com.zhangziqi.online_course_mine.integration;
import com.zhangziqi.online_course_mine.config.S3Config;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.*;
import software.amazon.awssdk.services.s3.presigner.S3Presigner;
import software.amazon.awssdk.services.s3.presigner.model.GetObjectPresignRequest;
import software.amazon.awssdk.services.s3.presigner.model.PresignedGetObjectRequest;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assumptions.assumeTrue;
@SpringBootTest
@ActiveProfiles("test")
class S3IntegrationTest {
    @Autowired
    private S3Client s3Client;
    @Autowired
    private S3Presigner s3Presigner;
    @Autowired
    private S3Config s3Config;
    /**
     * 这个测试只有在S3_ENABLED环境变量为true时才会运行
     * 可以在运行测试前设置环境变量：S3_ENABLED=true
     */
    @Test
    @EnabledIfEnvironmentVariable(named = "S3_ENABLED", matches = "true")
    void testS3Operations() {
        // 要测试的文件数据
        String objectKey = "test-s3-integration-" + System.currentTimeMillis() + ".txt";
        String content = "Hello S3 Integration Test!";
        byte[] contentBytes = content.getBytes(StandardCharsets.UTF_8);
        try {
            // 1. 检查存储桶是否存在，不存在则创建
            createBucketIfNotExists();
            // 2. 上传文件
            PutObjectResponse putResponse = s3Client.putObject(
                    PutObjectRequest.builder()
                            .bucket(s3Config.getBucketName())
                            .key(objectKey)
                            .contentType("text/plain")
                            .build(),
                    RequestBody.fromBytes(contentBytes)
            );
            assertNotNull(putResponse.eTag());
            // 3. 获取文件的预签名URL
            PresignedGetObjectRequest presignedRequest = s3Presigner.presignGetObject(GetObjectPresignRequest.builder()
                    .getObjectRequest(GetObjectRequest.builder()
                            .bucket(s3Config.getBucketName())
                            .key(objectKey)
                            .build())
                    .signatureDuration(Duration.ofDays(7))
                    .build());
            String presignedUrl = presignedRequest.url().toString();
            assertNotNull(presignedUrl);
            assertTrue(presignedUrl.contains(objectKey));
            // 4. 列出所有文件
            ListObjectsV2Response listResponse = s3Client.listObjectsV2(
                    ListObjectsV2Request.builder()
                            .bucket(s3Config.getBucketName())
                            .build()
            );
            List<S3Object> objects = listResponse.contents();
            assertNotNull(objects);
            assertTrue(objects.stream().anyMatch(obj -> obj.key().equals(objectKey)));
            // 5. 获取文件元数据
            HeadObjectResponse headResponse = s3Client.headObject(
                    HeadObjectRequest.builder()
                            .bucket(s3Config.getBucketName())
                            .key(objectKey)
                            .build()
            );
            assertEquals("text/plain", headResponse.contentType());
            assertEquals(contentBytes.length, headResponse.contentLength());
        } finally {
            // 6. 删除测试文件（清理）
            DeleteObjectResponse deleteResponse = s3Client.deleteObject(
                    DeleteObjectRequest.builder()
                            .bucket(s3Config.getBucketName())
                            .key(objectKey)
                            .build()
            );
            assertNotNull(deleteResponse);
            // 验证文件已被删除
            ListObjectsV2Response listResponse = s3Client.listObjectsV2(
                    ListObjectsV2Request.builder()
                            .bucket(s3Config.getBucketName())
                            .build()
            );
            assertFalse(listResponse.contents().stream().anyMatch(obj -> obj.key().equals(objectKey)));
        }
    }
    private void createBucketIfNotExists() {
        try {
            s3Client.headBucket(HeadBucketRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .build());
        } catch (NoSuchBucketException e) {
            s3Client.createBucket(CreateBucketRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .build());
        }
    }
    /**
     * 一个总是跳过的测试，用于演示如何运行集成测试
     */
    @Test
    void testSkippedByDefault() {
        // 默认跳过这个测试
        assumeTrue(false, "手动跳过的测试，需要正确配置MinIO和S3才能运行");
        fail("这个测试不应该被执行");
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/OnlineCourseMineApplicationTests.java">
package com.zhangziqi.online_course_mine;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
@SpringBootTest
@ActiveProfiles("test")
class OnlineCourseMineApplicationTests {
    @Test
    void contextLoads() {
        // 测试应用上下文是否正常加载
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/security/jwt/JwtTokenProviderTest.java">
package com.zhangziqi.online_course_mine.security.jwt;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.test.util.ReflectionTestUtils;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
public class JwtTokenProviderTest {
    @Mock
    private UserRepository userRepository;
    @Spy
    private JwtConfig jwtConfig;
    @InjectMocks
    private JwtTokenProvider tokenProvider;
    private Authentication authentication;
    private User testUser;
    private Role adminRole;
    @BeforeEach
    void setUp() {
        // 设置JWT配置
        ReflectionTestUtils.setField(jwtConfig, "secret", "testSecretKeyWithMinimum32Characters1234567890");
        ReflectionTestUtils.setField(jwtConfig, "accessTokenExpiration", 3600000L);
        ReflectionTestUtils.setField(jwtConfig, "refreshTokenExpiration", 86400000L);
        // 创建测试用户
        testUser = new User();
        testUser.setId(1L);
        testUser.setUsername("testuser");
        testUser.setEmail("test@example.com");
        // 创建角色
        adminRole = new Role();
        adminRole.setId(1L);
        adminRole.setName("管理员");
        adminRole.setCode("ROLE_ADMIN");
        Set<Role> roles = new HashSet<>();
        roles.add(adminRole);
        testUser.setRoles(roles);
        // 创建认证对象
        Set<SimpleGrantedAuthority> authorities = Collections.singleton(
                new SimpleGrantedAuthority("ROLE_ADMIN"));
        authentication = new UsernamePasswordAuthenticationToken(
                "testuser", "password", authorities);
    }
    @Test
    void createTokenShouldGenerateValidTokens() {
        // 执行
        JwtTokenDTO result = tokenProvider.createToken(authentication);
        // 验证
        assertNotNull(result);
        assertNotNull(result.getAccessToken());
        assertNotNull(result.getRefreshToken());
        assertEquals("Bearer", result.getTokenType());
        assertEquals(jwtConfig.getAccessTokenExpiration(), result.getExpiresIn());
        // 验证令牌有效性
        assertTrue(tokenProvider.validateToken(result.getAccessToken()));
        assertTrue(tokenProvider.validateToken(result.getRefreshToken()));
        // 验证用户名
        assertEquals("testuser", tokenProvider.getUsernameFromToken(result.getAccessToken()));
        assertEquals("testuser", tokenProvider.getUsernameFromToken(result.getRefreshToken()));
    }
    @Test
    void refreshTokenShouldCreateNewAccessTokenWithUserRoles() {
        // 准备
        JwtTokenDTO originalTokens = tokenProvider.createToken(authentication);
        String refreshToken = originalTokens.getRefreshToken();
        // 执行
        JwtTokenDTO result = tokenProvider.refreshToken(refreshToken);
        // 验证
        assertNotNull(result);
        assertNotNull(result.getAccessToken());
        assertEquals(refreshToken, result.getRefreshToken());
        // 验证从新访问令牌中获取的认证包含正确的角色
        Authentication newAuth = tokenProvider.getAuthentication(result.getAccessToken());
        assertTrue(newAuth.getAuthorities().stream()
                .anyMatch(a -> a.getAuthority().equals("ROLE_ADMIN")));
        // 不再验证用户仓库调用，因为现在直接从令牌中提取角色信息
    }
    @Test
    void refreshTokenShouldThrowExceptionWhenUserNotFound() {
        // 重命名测试方法，因为新逻辑不再从数据库获取用户
        // 转为测试令牌解析异常
        // 准备
        String invalidRefreshToken = "invalid.token.string";
        // 执行和验证 - 应该抛出JWT解析异常
        assertThrows(io.jsonwebtoken.JwtException.class, () -> {
            tokenProvider.refreshToken(invalidRefreshToken);
        });
        // 不再验证用户仓库调用
    }
    @Test
    void validateTokenShouldReturnTrueForValidToken() {
        // 准备
        JwtTokenDTO tokens = tokenProvider.createToken(authentication);
        // 执行和验证
        assertTrue(tokenProvider.validateToken(tokens.getAccessToken()));
    }
    @Test
    void validateTokenShouldReturnFalseForInvalidToken() {
        // 执行和验证
        assertFalse(tokenProvider.validateToken("invalid-token"));
    }
    @Test
    void getAuthenticationShouldReturnValidAuthentication() {
        // 准备
        JwtTokenDTO tokens = tokenProvider.createToken(authentication);
        // 执行
        Authentication result = tokenProvider.getAuthentication(tokens.getAccessToken());
        // 验证
        assertNotNull(result);
        assertEquals("testuser", result.getName());
        assertTrue(result.getAuthorities().stream()
                .anyMatch(a -> a.getAuthority().equals("ROLE_ADMIN")));
    }
    @Test
    void getUsernameFromTokenShouldReturnCorrectUsername() {
        // 准备
        JwtTokenDTO tokens = tokenProvider.createToken(authentication);
        // 执行和验证
        assertEquals("testuser", tokenProvider.getUsernameFromToken(tokens.getAccessToken()));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/security/TestUserDetailsService.java">
package com.zhangziqi.online_course_mine.security;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.Profile;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
/**
 * 测试环境专用的UserDetailsService实现
 * 用于集成测试中加载测试用户
 */
@Service("userDetailsService")
@Profile("test")
@Primary
public class TestUserDetailsService implements UserDetailsService {
    /**
     * 根据用户名加载用户
     *
     * @param username 用户名
     * @return 用户详情
     * @throws UsernameNotFoundException 用户名不存在
     */
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        // 为集成测试创建固定的测试用户
        if ("admin_test".equals(username)) {
            List<SimpleGrantedAuthority> authorities = Arrays.asList(
                "ROLE_ADMIN", "ADMIN", "TEST_READ"
            ).stream()
            .map(SimpleGrantedAuthority::new)
            .collect(Collectors.toList());
            return new User(
                "admin_test", 
                "$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG", // "password"的BCrypt加密值
                true, true, true, true,
                authorities
            );
        } else if ("user_test".equals(username)) {
            List<SimpleGrantedAuthority> authorities = Arrays.asList(
                "ROLE_USER", "USER"
            ).stream()
            .map(SimpleGrantedAuthority::new)
            .collect(Collectors.toList());
            return new User(
                "user_test", 
                "$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG", // "password"的BCrypt加密值
                true, true, true, true,
                authorities
            );
        }
        throw new UsernameNotFoundException("用户不存在: " + username);
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/AuthServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.LoginDTO;
import com.zhangziqi.online_course_mine.model.dto.RefreshTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.security.jwt.JwtTokenProvider;
import com.zhangziqi.online_course_mine.security.jwt.TokenBlacklistService;
import com.zhangziqi.online_course_mine.service.impl.AuthServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.test.context.ActiveProfiles;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;
import static org.mockito.BDDMockito.given;
/**
 * 认证服务测试
 */
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test") // 使用测试环境配置
public class AuthServiceTest {
    @Mock
    private AuthenticationManager authenticationManager;
    @Mock
    private JwtTokenProvider tokenProvider;
    @Mock
    private UserService userService;
    @Mock
    private CaptchaService captchaService;
    @Mock
    private EmailService emailService;
    @Mock
    private TokenBlacklistService tokenBlacklistService;
    @Mock
    private JwtConfig jwtConfig;
    @Mock
    private Authentication authentication;
    @Mock
    private UserRepository userRepository;
    @InjectMocks
    private AuthServiceImpl authService;
    private RegisterDTO registerDTO;
    private LoginDTO loginDTO;
    private RefreshTokenDTO refreshTokenDTO;
    private JwtTokenDTO jwtTokenDTO;
    private User testUser;
    @BeforeEach
    void setUp() {
        // 初始化注册DTO
        registerDTO = new RegisterDTO();
        registerDTO.setUsername("testuser");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("test@example.com");
        registerDTO.setCaptchaKey("captcha-key");
        registerDTO.setCaptchaCode("1234");
        registerDTO.setEmailCode("123456");
        // 初始化登录DTO
        loginDTO = new LoginDTO();
        loginDTO.setUsername("testuser");
        loginDTO.setPassword("password123");
        loginDTO.setCaptchaKey("captcha-key");
        loginDTO.setCaptchaCode("1234");
        // 初始化刷新令牌DTO
        refreshTokenDTO = new RefreshTokenDTO();
        refreshTokenDTO.setRefreshToken("refresh-token");
        // 初始化JWT令牌
        jwtTokenDTO = JwtTokenDTO.builder()
                .accessToken("access-token")
                .refreshToken("refresh-token")
                .tokenType("Bearer")
                .expiresIn(3600000)
                .build();
        // 初始化测试用户
        testUser = new User();
        testUser.setId(1L);
        testUser.setUsername("testuser");
        testUser.setEmail("test@example.com");
    }
    @Test
    void registerShouldSucceedWhenAllValidationsPass() {
        // 模拟验证通过
        given(emailService.validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode())).willReturn(true);
        // 模拟用户注册
        given(userService.register(registerDTO)).willReturn(new User());
        // 执行注册
        authService.register(registerDTO);
        // 验证调用
        verify(emailService).validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode());
        verify(userService).register(registerDTO);
    }
    @Test
    void registerShouldThrowExceptionWhenEmailCodeInvalid() {
        // 模拟邮箱验证码验证失败
        given(emailService.validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode())).willReturn(false);
        // 执行注册并验证异常
        BusinessException exception = assertThrows(BusinessException.class, () -> {
            authService.register(registerDTO);
        });
        // 验证异常消息
        assertEquals("邮箱验证码错误或已过期", exception.getMessage());
        // 验证调用
        verify(emailService).validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode());
        verify(userService, never()).register(registerDTO);
    }
    @Test
    void loginShouldSucceedWhenCredentialsValid() {
        // 准备
        when(captchaService.validateCaptcha(loginDTO.getCaptchaKey(), loginDTO.getCaptchaCode())).thenReturn(true);
        when(authenticationManager.authenticate(any(UsernamePasswordAuthenticationToken.class))).thenReturn(authentication);
        when(tokenProvider.createToken(authentication)).thenReturn(jwtTokenDTO);
        // 执行
        JwtTokenDTO result = authService.login(loginDTO);
        // 验证
        assertNotNull(result);
        assertEquals(jwtTokenDTO.getAccessToken(), result.getAccessToken());
        assertEquals(jwtTokenDTO.getRefreshToken(), result.getRefreshToken());
        verify(captchaService).validateCaptcha(loginDTO.getCaptchaKey(), loginDTO.getCaptchaCode());
        verify(authenticationManager).authenticate(any(UsernamePasswordAuthenticationToken.class));
        verify(userService).updateLastLoginTime(loginDTO.getUsername());
        verify(tokenProvider).createToken(authentication);
    }
    @Test
    void loginShouldThrowExceptionWhenCaptchaInvalid() {
        // 准备
        when(captchaService.validateCaptcha(loginDTO.getCaptchaKey(), loginDTO.getCaptchaCode())).thenReturn(false);
        // 执行并验证
        assertThrows(BusinessException.class, () -> authService.login(loginDTO));
        verify(captchaService).validateCaptcha(loginDTO.getCaptchaKey(), loginDTO.getCaptchaCode());
        verify(authenticationManager, never()).authenticate(any());
    }
    @Test
    void refreshTokenShouldSucceedWhenTokenValid() {
        // 准备
        when(tokenProvider.validateToken(refreshTokenDTO.getRefreshToken())).thenReturn(true);
        when(tokenBlacklistService.isBlacklisted(refreshTokenDTO.getRefreshToken())).thenReturn(false);
        when(tokenProvider.refreshToken(refreshTokenDTO.getRefreshToken())).thenReturn(jwtTokenDTO);
        // 执行
        JwtTokenDTO result = authService.refreshToken(refreshTokenDTO);
        // 验证
        assertNotNull(result);
        assertEquals(jwtTokenDTO.getAccessToken(), result.getAccessToken());
        assertEquals(jwtTokenDTO.getRefreshToken(), result.getRefreshToken());
        verify(tokenProvider).validateToken(refreshTokenDTO.getRefreshToken());
        verify(tokenBlacklistService).isBlacklisted(refreshTokenDTO.getRefreshToken());
        verify(tokenProvider).refreshToken(refreshTokenDTO.getRefreshToken());
    }
    @Test
    void refreshTokenShouldThrowExceptionWhenTokenInvalid() {
        // 准备
        when(tokenProvider.validateToken(refreshTokenDTO.getRefreshToken())).thenReturn(false);
        // 执行并验证
        assertThrows(BusinessException.class, () -> authService.refreshToken(refreshTokenDTO));
        verify(tokenProvider).validateToken(refreshTokenDTO.getRefreshToken());
        verify(tokenBlacklistService, never()).isBlacklisted(any());
    }
    @Test
    void refreshTokenShouldThrowExceptionWhenTokenBlacklisted() {
        // 准备
        when(tokenProvider.validateToken(refreshTokenDTO.getRefreshToken())).thenReturn(true);
        when(tokenBlacklistService.isBlacklisted(refreshTokenDTO.getRefreshToken())).thenReturn(true);
        // 执行并验证
        assertThrows(BusinessException.class, () -> authService.refreshToken(refreshTokenDTO));
        verify(tokenProvider).validateToken(refreshTokenDTO.getRefreshToken());
        verify(tokenBlacklistService).isBlacklisted(refreshTokenDTO.getRefreshToken());
        verify(tokenProvider, never()).refreshToken(any());
    }
    @Test
    void logoutShouldAddTokenToBlacklist() {
        // 准备
        String token = "test-token";
        when(tokenProvider.getUsernameFromToken(token)).thenReturn("testuser");
        when(jwtConfig.getAccessTokenExpiration()).thenReturn(3600000L);
        // 执行
        authService.logout(token);
        // 验证
        verify(tokenProvider).getUsernameFromToken(token);
        verify(tokenBlacklistService).addToBlacklist(token, jwtConfig.getAccessTokenExpiration());
    }
    @Test
    void logoutShouldDoNothingWhenTokenEmpty() {
        // 执行
        authService.logout("");
        // 验证
        verify(tokenProvider, never()).getUsernameFromToken(any());
        verify(tokenBlacklistService, never()).addToBlacklist(any(), anyLong());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/CaptchaServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.google.code.kaptcha.impl.DefaultKaptcha;
import com.zhangziqi.online_course_mine.service.impl.CaptchaServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.util.ReflectionTestUtils;
import java.awt.image.BufferedImage;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
/**
 * 验证码服务测试
 */
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test") // 使用测试环境配置
public class CaptchaServiceTest {
    @Mock
    private DefaultKaptcha captchaProducer;
    @Mock
    private RedisTemplate<String, Object> redisTemplate;
    @Mock
    private ValueOperations<String, Object> valueOperations;
    @InjectMocks
    private CaptchaServiceImpl captchaService;
    @BeforeEach
    void setUp() {
        // 只在需要使用到的测试方法中进行模拟，避免不必要的模拟
        // when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        // 设置私有常量字段的值
        ReflectionTestUtils.setField(captchaService, "CAPTCHA_PREFIX", "captcha:");
        ReflectionTestUtils.setField(captchaService, "CAPTCHA_EXPIRATION", 300L); // 5分钟
    }
    @Test
    void generateCaptchaShouldReturnImageAndSaveToRedis() {
        // 准备
        String captchaKey = "test-key";
        String captchaText = "1234";
        BufferedImage mockImage = new BufferedImage(150, 50, BufferedImage.TYPE_INT_RGB);
        // 在这个测试中才需要模拟opsForValue
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(captchaProducer.createText()).thenReturn(captchaText);
        when(captchaProducer.createImage(captchaText)).thenReturn(mockImage);
        // 使用when-thenReturn代替doNothing
        // doNothing().when(valueOperations).set(anyString(), anyString(), anyLong(), any(TimeUnit.class));
        // 执行
        BufferedImage result = captchaService.generateCaptcha(captchaKey);
        // 验证
        assertNotNull(result);
        assertEquals(mockImage, result);
        verify(captchaProducer).createText();
        verify(captchaProducer).createImage(captchaText);
        verify(valueOperations).set(eq("captcha:" + captchaKey), eq(captchaText), eq(300L), eq(TimeUnit.SECONDS));
    }
    @Test
    void validateCaptchaShouldReturnTrueWhenCaptchaValid() {
        // 准备
        String captchaKey = "test-key";
        String captchaCode = "1234";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("captcha:" + captchaKey)).thenReturn(captchaCode);
        // 对于返回值的方法，使用when-thenReturn而不是doNothing
        when(redisTemplate.delete(anyString())).thenReturn(Boolean.TRUE);
        // 执行
        boolean result = captchaService.validateCaptcha(captchaKey, captchaCode);
        // 验证
        assertTrue(result);
        verify(valueOperations).get("captcha:" + captchaKey);
        verify(redisTemplate).delete("captcha:" + captchaKey);
    }
    @Test
    void validateCaptchaShouldReturnFalseWhenCaptchaInvalid() {
        // 准备
        String captchaKey = "test-key";
        String captchaCode = "1234";
        String storedCaptchaCode = "5678";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("captcha:" + captchaKey)).thenReturn(storedCaptchaCode);
        // 对于返回值的方法，使用when-thenReturn而不是doNothing
        when(redisTemplate.delete(anyString())).thenReturn(Boolean.TRUE);
        // 执行
        boolean result = captchaService.validateCaptcha(captchaKey, captchaCode);
        // 验证
        assertFalse(result);
        verify(valueOperations).get("captcha:" + captchaKey);
        verify(redisTemplate).delete("captcha:" + captchaKey);
    }
    @Test
    void validateCaptchaShouldReturnFalseWhenCaptchaExpired() {
        // 准备
        String captchaKey = "test-key";
        String captchaCode = "1234";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("captcha:" + captchaKey)).thenReturn(null);
        // 执行
        boolean result = captchaService.validateCaptcha(captchaKey, captchaCode);
        // 验证
        assertFalse(result);
        verify(valueOperations).get("captcha:" + captchaKey);
        verify(redisTemplate, never()).delete(anyString());
    }
    @Test
    void validateCaptchaShouldReturnFalseWhenKeyOrCodeEmpty() {
        // 执行 - 空key
        boolean result1 = captchaService.validateCaptcha("", "1234");
        // 执行 - 空code
        boolean result2 = captchaService.validateCaptcha("test-key", "");
        // 执行 - 都为空
        boolean result3 = captchaService.validateCaptcha("", "");
        // 验证
        assertFalse(result1);
        assertFalse(result2);
        assertFalse(result3);
        verify(valueOperations, never()).get(anyString());
        verify(redisTemplate, never()).delete(anyString());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/ChapterServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.chapter.ChapterCreateDTO;
import com.zhangziqi.online_course_mine.model.dto.chapter.ChapterOrderDTO;
import com.zhangziqi.online_course_mine.model.entity.Chapter;
import com.zhangziqi.online_course_mine.model.entity.Course;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.enums.ChapterAccessType;
import com.zhangziqi.online_course_mine.model.enums.CoursePaymentType;
import com.zhangziqi.online_course_mine.model.enums.CourseStatus;
import com.zhangziqi.online_course_mine.model.vo.ChapterVO;
import com.zhangziqi.online_course_mine.repository.ChapterRepository;
import com.zhangziqi.online_course_mine.repository.CourseRepository;
import com.zhangziqi.online_course_mine.service.impl.ChapterServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
public class ChapterServiceTest {
    @Mock
    private ChapterRepository chapterRepository;
    @Mock
    private CourseRepository courseRepository;
    @InjectMocks
    private ChapterServiceImpl chapterService;
    private Institution testInstitution;
    private Course testCourse;
    private Chapter testChapter;
    private ChapterCreateDTO testChapterCreateDTO;
    @BeforeEach
    void setUp() {
        // 创建测试机构
        testInstitution = Institution.builder()
                .id(1L)
                .name("测试机构")
                .build();
        // 创建测试课程
        testCourse = Course.builder()
                .id(1L)
                .title("测试课程")
                .description("这是一个测试课程")
                .institution(testInstitution)
                .status(CourseStatus.DRAFT.getValue())
                .paymentType(CoursePaymentType.PAID.getValue()) // 默认设置为付费课程
                .build();
        // 创建测试章节
        testChapter = Chapter.builder()
                .id(1L)
                .title("测试章节")
                .description("这是一个测试章节")
                .course(testCourse)
                .orderIndex(0)
                .accessType(ChapterAccessType.PAID_ONLY.getValue())
                .estimatedMinutes(30)
                .build();
        // 创建测试章节创建DTO
        testChapterCreateDTO = ChapterCreateDTO.builder()
                .title("测试章节")
                .description("这是一个测试章节")
                .courseId(testCourse.getId())
                .orderIndex(0)
                .accessType(ChapterAccessType.PAID_ONLY.getValue())
                .estimatedMinutes(30)
                .build();
    }
    @Test
    @DisplayName("创建章节 - 成功")
    void createChapter_Success() {
        // 准备测试数据
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 使用lenient()来标记这个存根，这样即使方法没被调用也不会报错
        lenient().when(chapterRepository.findMaxOrderIndexByCourse_Id(anyLong())).thenReturn(null);
        when(chapterRepository.save(any(Chapter.class))).thenAnswer(invocation -> {
            Chapter savedChapter = invocation.getArgument(0);
            savedChapter.setId(1L);
            return savedChapter;
        });
        // 执行方法
        ChapterVO result = chapterService.createChapter(testChapterCreateDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(testChapterCreateDTO.getTitle(), result.getTitle());
        assertEquals(testChapterCreateDTO.getDescription(), result.getDescription());
        assertEquals(testChapterCreateDTO.getOrderIndex(), result.getOrderIndex());
        assertEquals(testChapterCreateDTO.getAccessType(), result.getAccessType());
        assertEquals(testCourse.getId(), result.getCourseId());
        assertEquals(testCourse.getTitle(), result.getCourseName());
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(chapterRepository).save(any(Chapter.class));
    }
    @Test
    @DisplayName("创建章节 - 课程不存在")
    void createChapter_CourseNotFound() {
        // 准备测试数据
        when(courseRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 验证抛出异常
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, 
                () -> chapterService.createChapter(testChapterCreateDTO));
        assertTrue(exception.getMessage().contains("课程不存在"));
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(chapterRepository, never()).save(any(Chapter.class));
    }
    @Test
    @DisplayName("更新章节 - 成功")
    void updateChapter_Success() {
        // 准备测试数据
        when(chapterRepository.findById(anyLong())).thenReturn(Optional.of(testChapter));
        lenient().when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(chapterRepository.save(any(Chapter.class))).thenReturn(testChapter);
        // 修改DTO数据
        testChapterCreateDTO.setTitle("更新后的章节");
        testChapterCreateDTO.setDescription("这是更新后的章节描述");
        // 执行方法
        ChapterVO result = chapterService.updateChapter(testChapter.getId(), testChapterCreateDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(testChapterCreateDTO.getTitle(), result.getTitle());
        assertEquals(testChapterCreateDTO.getDescription(), result.getDescription());
        // 验证方法调用
        verify(chapterRepository).findById(testChapter.getId());
        verify(chapterRepository).save(any(Chapter.class));
    }
    @Test
    @DisplayName("获取章节 - 成功")
    void getChapterById_Success() {
        // 准备测试数据
        when(chapterRepository.findById(anyLong())).thenReturn(Optional.of(testChapter));
        // 执行方法
        ChapterVO result = chapterService.getChapterById(testChapter.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(testChapter.getId(), result.getId());
        assertEquals(testChapter.getTitle(), result.getTitle());
        assertEquals(testChapter.getDescription(), result.getDescription());
        // 验证方法调用
        verify(chapterRepository).findById(testChapter.getId());
    }
    @Test
    @DisplayName("获取章节 - 章节不存在")
    void getChapterById_ChapterNotFound() {
        // 准备测试数据
        when(chapterRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 验证抛出异常
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, 
                () -> chapterService.getChapterById(99L));
        assertTrue(exception.getMessage().contains("章节不存在"));
        // 验证方法调用
        verify(chapterRepository).findById(99L);
    }
    @Test
    @DisplayName("获取课程章节列表 - 成功")
    void getChaptersByCourse_Success() {
        // 准备测试数据
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(chapterRepository.findByCourse_IdOrderByOrderIndexAsc(anyLong())).thenReturn(List.of(testChapter));
        // 执行方法
        List<ChapterVO> result = chapterService.getChaptersByCourse(testCourse.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(testChapter.getId(), result.get(0).getId());
        assertEquals(testChapter.getTitle(), result.get(0).getTitle());
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(chapterRepository, atLeastOnce()).findByCourse_IdOrderByOrderIndexAsc(testCourse.getId());
    }
    @Test
    @DisplayName("删除章节 - 成功")
    void deleteChapter_Success() {
        // 准备测试数据
        when(chapterRepository.findById(anyLong())).thenReturn(Optional.of(testChapter));
        // 执行方法
        chapterService.deleteChapter(testChapter.getId());
        // 验证方法调用
        verify(chapterRepository).findById(testChapter.getId());
        verify(chapterRepository).delete(testChapter);
    }
    @Test
    @DisplayName("更新章节访问类型 - 成功")
    void updateAccessType_Success() {
        // 准备测试数据
        when(chapterRepository.findById(anyLong())).thenReturn(Optional.of(testChapter));
        when(chapterRepository.save(any(Chapter.class))).thenReturn(testChapter);
        int newAccessType = ChapterAccessType.FREE_TRIAL.getValue();
        // 执行方法
        ChapterVO result = chapterService.updateAccessType(testChapter.getId(), newAccessType);
        // 验证结果
        assertNotNull(result);
        assertEquals(newAccessType, result.getAccessType());
        // 验证方法调用
        verify(chapterRepository).findById(testChapter.getId());
        verify(chapterRepository).save(any(Chapter.class));
    }
    @Test
    @DisplayName("重新排序章节 - 成功")
    void reorderChapters_Success() {
        // 准备测试数据
        Chapter chapter1 = Chapter.builder().id(1L).title("章节1").course(testCourse).orderIndex(0).build();
        Chapter chapter2 = Chapter.builder().id(2L).title("章节2").course(testCourse).orderIndex(1).build();
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(chapterRepository.findByCourse_IdOrderByOrderIndexAsc(anyLong())).thenReturn(List.of(chapter1, chapter2));
        List<ChapterOrderDTO> orderDTOs = Arrays.asList(
                new ChapterOrderDTO(2L, 0),
                new ChapterOrderDTO(1L, 1)
        );
        when(chapterRepository.save(any(Chapter.class))).thenAnswer(invocation -> invocation.getArgument(0));
        // 执行方法
        List<ChapterVO> result = chapterService.reorderChapters(testCourse.getId(), orderDTOs);
        // 验证结果
        assertNotNull(result);
        assertEquals(2, result.size());
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(chapterRepository, atLeastOnce()).findByCourse_IdOrderByOrderIndexAsc(testCourse.getId());
        verify(chapterRepository, times(2)).save(any(Chapter.class));
    }
    @Test
    @DisplayName("创建章节 - 免费课程必须创建免费章节")
    void createChapter_FreeCourse_MustCreateFreeChapter() {
        // 设置课程为免费
        testCourse.setPaymentType(CoursePaymentType.FREE.getValue());
        // 尝试创建付费章节
        testChapterCreateDTO.setAccessType(ChapterAccessType.PAID_ONLY.getValue());
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(chapterRepository.save(any(Chapter.class))).thenAnswer(invocation -> {
            Chapter savedChapter = invocation.getArgument(0);
            savedChapter.setId(1L);
            return savedChapter;
        });
        // 执行方法
        ChapterVO result = chapterService.createChapter(testChapterCreateDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(ChapterAccessType.FREE_TRIAL.getValue(), result.getAccessType());
    }
    @Test
    @DisplayName("更新章节 - 免费课程的章节不能设置为付费")
    void updateChapter_FreeCourse_CannotSetChapterToPaid() {
        // 设置课程为免费
        testCourse.setPaymentType(CoursePaymentType.FREE.getValue());
        testChapter.setCourse(testCourse);
        // 尝试更新为付费章节
        testChapterCreateDTO.setAccessType(ChapterAccessType.PAID_ONLY.getValue());
        when(chapterRepository.findById(anyLong())).thenReturn(Optional.of(testChapter));
        when(chapterRepository.save(any(Chapter.class))).thenReturn(testChapter);
        // 执行方法
        ChapterVO result = chapterService.updateChapter(testChapter.getId(), testChapterCreateDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(ChapterAccessType.FREE_TRIAL.getValue(), result.getAccessType());
    }
    @Test
    @DisplayName("更新访问类型 - 免费课程不能更新章节访问类型")
    void updateAccessType_FreeCourse_ShouldThrowException() {
        // 设置课程为免费
        testCourse.setPaymentType(CoursePaymentType.FREE.getValue());
        testChapter.setCourse(testCourse);
        when(chapterRepository.findById(anyLong())).thenReturn(Optional.of(testChapter));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class,
                () -> chapterService.updateAccessType(testChapter.getId(), ChapterAccessType.PAID_ONLY.getValue()));
        assertTrue(exception.getMessage().contains("免费课程的章节不能修改访问类型"));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/CourseServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.course.CourseCreateDTO;
import com.zhangziqi.online_course_mine.model.dto.course.CourseSearchDTO;
import com.zhangziqi.online_course_mine.model.entity.*;
import com.zhangziqi.online_course_mine.model.enums.ChapterAccessType;
import com.zhangziqi.online_course_mine.model.enums.CoursePaymentType;
import com.zhangziqi.online_course_mine.model.enums.CourseStatus;
import com.zhangziqi.online_course_mine.model.enums.CourseVersion;
import com.zhangziqi.online_course_mine.model.vo.CourseVO;
import com.zhangziqi.online_course_mine.model.vo.PreviewUrlVO;
import com.zhangziqi.online_course_mine.model.vo.CourseStructureVO;
import com.zhangziqi.online_course_mine.repository.CategoryRepository;
import com.zhangziqi.online_course_mine.repository.CourseRepository;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.TagRepository;
import com.zhangziqi.online_course_mine.service.impl.CourseServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.web.multipart.MultipartFile;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.io.IOException;
import java.io.InputStream;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
import org.mockito.ArgumentCaptor;
@ExtendWith(MockitoExtension.class)
public class CourseServiceTest {
    @Mock
    private CourseRepository courseRepository;
    @Mock
    private InstitutionRepository institutionRepository;
    @Mock
    private CategoryRepository categoryRepository;
    @Mock
    private TagRepository tagRepository;
    @Mock
    private StringRedisTemplate redisTemplate;
    @Mock
    private ValueOperations<String, String> valueOperations;
    @Mock
    private MinioService minioService;
    @InjectMocks
    private CourseServiceImpl courseService;
    private Institution testInstitution;
    private Category testCategory;
    private Tag testTag;
    private Course testCourse;
    private CourseCreateDTO testCourseCreateDTO;
    private Long testCreatorId = 1L;
    // MultipartFile模拟
    @Mock
    private MultipartFile mockFile;
    @BeforeEach
    void setUp() {
        // 创建测试机构
        testInstitution = Institution.builder()
                .id(1L)
                .name("测试机构")
                .build();
        // 创建测试分类
        testCategory = Category.builder()
                .id(1L)
                .name("测试分类")
                .build();
        // 创建测试标签
        testTag = Tag.builder()
                .id(1L)
                .name("测试标签")
                .build();
        // 创建测试课程
        testCourse = Course.builder()
                .id(1L)
                .title("测试课程")
                .description("这是一个测试课程")
                .institution(testInstitution)
                .category(testCategory)
                .creatorId(testCreatorId)
                .status(CourseStatus.DRAFT.getValue())
                .paymentType(CoursePaymentType.FREE.getValue())
                .build();
        testCourse.setTags(Set.of(testTag));
        // 创建测试课程创建DTO
        testCourseCreateDTO = CourseCreateDTO.builder()
                .title("测试课程")
                .description("这是一个测试课程")
                .categoryId(testCategory.getId())
                .tagIds(Set.of(testTag.getId()))
                .paymentType(CoursePaymentType.FREE.getValue())
                .build();
    }
    @Test
    @DisplayName("创建课程 - 成功")
    void createCourse_Success() {
        // 准备测试数据
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(testInstitution));
        when(categoryRepository.findById(anyLong())).thenReturn(Optional.of(testCategory));
        when(tagRepository.findById(anyLong())).thenReturn(Optional.of(testTag));
        when(courseRepository.save(any(Course.class))).thenAnswer(invocation -> {
            Course savedCourse = invocation.getArgument(0);
            savedCourse.setId(1L);
            return savedCourse;
        });
        // 执行方法
        CourseVO result = courseService.createCourse(testCourseCreateDTO, testCreatorId, testInstitution.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(testCourseCreateDTO.getTitle(), result.getTitle());
        assertEquals(testCourseCreateDTO.getDescription(), result.getDescription());
        assertEquals(CourseStatus.DRAFT.getValue(), result.getStatus());
        assertEquals(CourseVersion.DRAFT.getValue(), result.getVersionType());
        assertEquals(testCreatorId, result.getCreatorId());
        assertEquals(testInstitution.getId(), result.getInstitution().getId());
        assertEquals(testCategory.getId(), result.getCategory().getId());
        assertEquals(1, result.getTags().size());
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(categoryRepository).findById(testCategory.getId());
        verify(tagRepository).findById(testTag.getId());
        verify(courseRepository).save(any(Course.class));
    }
    @Test
    @DisplayName("创建课程 - 机构不存在")
    void createCourse_InstitutionNotFound() {
        // 准备测试数据
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 验证抛出异常
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, 
                () -> courseService.createCourse(testCourseCreateDTO, testCreatorId, testInstitution.getId()));
        assertTrue(exception.getMessage().contains("机构不存在"));
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(courseRepository, never()).save(any(Course.class));
    }
    @Test
    @DisplayName("创建课程 - 付费课程但未设置价格")
    void createCourse_PaidCourseWithoutPrice() {
        // 准备测试数据
        testCourseCreateDTO.setPaymentType(CoursePaymentType.PAID.getValue());
        testCourseCreateDTO.setPrice(null);
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(testInstitution));
        when(categoryRepository.findById(anyLong())).thenReturn(Optional.of(testCategory));
        when(tagRepository.findById(anyLong())).thenReturn(Optional.of(testTag));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> courseService.createCourse(testCourseCreateDTO, testCreatorId, testInstitution.getId()));
        assertTrue(exception.getMessage().contains("付费课程必须设置价格"));
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(courseRepository, never()).save(any(Course.class));
    }
    @Test
    @DisplayName("获取课程 - 成功")
    void getCourseById_Success() {
        // 准备测试数据
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 执行方法
        CourseVO result = courseService.getCourseById(testCourse.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(testCourse.getId(), result.getId());
        assertEquals(testCourse.getTitle(), result.getTitle());
        assertEquals(testCourse.getDescription(), result.getDescription());
        assertEquals(testCourse.getStatus(), result.getStatus());
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
    }
    @Test
    @DisplayName("获取课程 - 课程不存在")
    void getCourseById_CourseNotFound() {
        // 准备测试数据
        when(courseRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 验证抛出异常
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, 
                () -> courseService.getCourseById(1L));
        assertTrue(exception.getMessage().contains("课程不存在"));
        // 验证方法调用
        verify(courseRepository).findById(1L);
    }
    @Test
    @DisplayName("获取机构课程列表 - 成功")
    void getCoursesByInstitution_Success() {
        // 准备测试数据
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(testInstitution));
        Pageable pageable = PageRequest.of(0, 10);
        List<Course> courseList = List.of(testCourse);
        Page<Course> coursePage = new PageImpl<>(courseList, pageable, courseList.size());
        // 修改为正确的mock方法
        when(courseRepository.findByInstitutionAndIsPublishedVersion(any(Institution.class), eq(false), any(Pageable.class)))
            .thenReturn(coursePage);
        // 执行方法
        Page<CourseVO> result = courseService.getCoursesByInstitution(testInstitution.getId(), pageable);
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        assertEquals(testCourse.getId(), result.getContent().get(0).getId());
        assertEquals(testCourse.getTitle(), result.getContent().get(0).getTitle());
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(courseRepository).findByInstitutionAndIsPublishedVersion(testInstitution, false, pageable);
    }
    @Test
    @DisplayName("更新课程 - 成功")
    void updateCourse_Success() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.DRAFT.getValue());
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(testInstitution));
        when(categoryRepository.findById(anyLong())).thenReturn(Optional.of(testCategory));
        when(tagRepository.findById(anyLong())).thenReturn(Optional.of(testTag));
        when(courseRepository.save(any(Course.class))).thenReturn(testCourse);
        // 修改测试DTO数据
        testCourseCreateDTO.setTitle("更新后的课程");
        testCourseCreateDTO.setDescription("这是更新后的课程描述");
        // 执行方法
        CourseVO result = courseService.updateCourse(testCourse.getId(), testCourseCreateDTO, testInstitution.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(testCourseCreateDTO.getTitle(), result.getTitle());
        assertEquals(testCourseCreateDTO.getDescription(), result.getDescription());
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(institutionRepository).findById(testInstitution.getId());
        verify(categoryRepository).findById(testCategory.getId());
        verify(tagRepository).findById(testTag.getId());
        verify(courseRepository).save(any(Course.class));
    }
    @Test
    @DisplayName("提交课程审核 - 成功")
    void submitForReview_Success() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.DRAFT.getValue());
        testCourse.setVersionType(CourseVersion.DRAFT.getValue());
        // 添加章节
        Chapter chapter = new Chapter();
        chapter.setId(1L);
        chapter.setTitle("测试章节");
        chapter.setCourse(testCourse);
        testCourse.setChapters(List.of(chapter));
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(courseRepository.save(any(Course.class))).thenReturn(testCourse);
        // 执行方法
        CourseVO result = courseService.submitForReview(testCourse.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(CourseStatus.PENDING_REVIEW.getValue(), result.getStatus());
        assertEquals(CourseVersion.REVIEW.getValue(), result.getVersionType());
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository).save(any(Course.class));
    }
    @Test
    @DisplayName("提交课程审核 - 课程没有章节")
    void submitForReview_CourseWithoutChapters() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.DRAFT.getValue());
        testCourse.setVersionType(CourseVersion.DRAFT.getValue());
        testCourse.setChapters(new ArrayList<>()); // 空章节列表
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> courseService.submitForReview(testCourse.getId()));
        assertTrue(exception.getMessage().contains("课程必须至少有一个章节才能提交审核"));
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository, never()).save(any(Course.class));
    }
    @Test
    @DisplayName("提交课程审核 - 课程状态不是草稿")
    void submitForReview_CourseNotInDraftStatus() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.PENDING_REVIEW.getValue());
        testCourse.setVersionType(CourseVersion.DRAFT.getValue());
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> courseService.submitForReview(testCourse.getId()));
        assertTrue(exception.getMessage().contains("只有草稿状态的课程才能提交审核"));
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository, never()).save(any(Course.class));
    }
    @Test
    @DisplayName("生成预览URL - 成功")
    void generatePreviewUrl_Success() {
        // 准备测试数据
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 模拟Redis操作
        ValueOperations<String, String> valueOps = mock(ValueOperations.class);
        when(redisTemplate.opsForValue()).thenReturn(valueOps);
        // 捕获Redis保存的键值对
        ArgumentCaptor<String> keyCaptor = ArgumentCaptor.forClass(String.class);
        ArgumentCaptor<String> valueCaptor = ArgumentCaptor.forClass(String.class);
        ArgumentCaptor<Long> expireCaptor = ArgumentCaptor.forClass(Long.class);
        ArgumentCaptor<TimeUnit> timeUnitCaptor = ArgumentCaptor.forClass(TimeUnit.class);
        // 执行方法
        PreviewUrlVO result = courseService.generatePreviewUrl(testCourse.getId());
        // 验证结果
        assertNotNull(result);
        assertTrue(result.getUrl().contains("/api/courses/preview/"));
        assertEquals(testCourse.getId(), result.getCourseId());
        assertEquals(testCourse.getTitle(), result.getCourseTitle());
        assertNotNull(result.getExpireTime());
        // 验证Redis存储
        verify(valueOps).set(keyCaptor.capture(), valueCaptor.capture(), expireCaptor.capture(), timeUnitCaptor.capture());
        // 验证Redis键值
        String capturedKey = keyCaptor.getValue();
        String capturedValue = valueCaptor.getValue();
        Long capturedExpire = expireCaptor.getValue();
        TimeUnit capturedTimeUnit = timeUnitCaptor.getValue();
        assertTrue(capturedKey.startsWith("course:preview:"));
        assertEquals(testCourse.getId().toString(), capturedValue);
        // 检查过期时间约为24小时
        assertTrue(capturedExpire >= 1440);
        assertEquals(TimeUnit.MINUTES, capturedTimeUnit);
        // 验证URL格式
        String token = result.getUrl().substring(result.getUrl().lastIndexOf("/") + 1);
        assertTrue(capturedKey.endsWith(token), "Redis键应包含URL中的token");
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(redisTemplate).opsForValue();
    }
    @Test
    @DisplayName("更新课程封面 - 成功")
    void updateCourseCover_Success() throws IOException {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.DRAFT.getValue());
        String imageUrl = "http://localhost:8999/media/course-covers/1/test.jpg";
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(mockFile.getContentType()).thenReturn("image/jpeg");
        when(mockFile.getSize()).thenReturn(1024L); // 1KB
        when(mockFile.getInputStream()).thenReturn(mock(InputStream.class));
        when(mockFile.getOriginalFilename()).thenReturn("test.jpg");
        when(minioService.uploadFile(anyString(), any(InputStream.class), anyString())).thenReturn(imageUrl);
        when(courseRepository.save(any(Course.class))).thenReturn(testCourse);
        // 执行方法
        CourseVO result = courseService.updateCourseCover(testCourse.getId(), mockFile);
        // 验证结果
        assertNotNull(result);
        assertEquals(testCourse.getId(), result.getId());
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(mockFile, atLeastOnce()).getContentType();
        verify(mockFile).getSize();
        verify(mockFile).getInputStream();
        verify(mockFile).getOriginalFilename();
        verify(minioService).uploadFile(anyString(), any(InputStream.class), anyString());
        verify(courseRepository).save(any(Course.class));
    }
    @Test
    @DisplayName("更新课程封面 - 课程状态不允许")
    void updateCourseCover_InvalidStatus() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.PUBLISHED.getValue());
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> courseService.updateCourseCover(testCourse.getId(), mockFile));
        assertTrue(exception.getMessage().contains("只有草稿或已拒绝状态的课程才能更新封面"));
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(mockFile, never()).getContentType();
    }
    @Test
    @DisplayName("更新课程封面 - 文件类型不支持")
    void updateCourseCover_UnsupportedFileType() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.DRAFT.getValue());
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(mockFile.getContentType()).thenReturn("application/pdf");
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> courseService.updateCourseCover(testCourse.getId(), mockFile));
        assertTrue(exception.getMessage().contains("只支持上传图片文件"));
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(mockFile).getContentType();
        verify(mockFile, never()).getSize();
    }
    @Test
    @DisplayName("更新课程封面 - 文件大小超限")
    void updateCourseCover_FileTooLarge() throws IOException {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.DRAFT.getValue());
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(mockFile.getContentType()).thenReturn("image/jpeg");
        when(mockFile.getSize()).thenReturn(6 * 1024 * 1024L); // 6MB
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> courseService.updateCourseCover(testCourse.getId(), mockFile));
        assertTrue(exception.getMessage().contains("文件大小不能超过5MB"));
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(mockFile).getContentType();
        verify(mockFile).getSize();
        verify(mockFile, never()).getInputStream();
    }
    @Test
    @DisplayName("获取指定状态的课程 - 成功")
    void getCoursesByStatus_Success() {
        // 准备测试数据
        Pageable pageable = PageRequest.of(0, 10);
        List<Course> courseList = List.of(testCourse);
        Page<Course> coursePage = new PageImpl<>(courseList, pageable, courseList.size());
        when(courseRepository.findByStatus(anyInt(), any(Pageable.class))).thenReturn(coursePage);
        // 执行方法
        Page<CourseVO> result = courseService.getCoursesByStatus(CourseStatus.PENDING_REVIEW.getValue(), pageable);
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        assertEquals(testCourse.getId(), result.getContent().get(0).getId());
        // 验证方法调用
        verify(courseRepository).findByStatus(CourseStatus.PENDING_REVIEW.getValue(), pageable);
    }
    @Test
    @DisplayName("获取审核员正在审核的课程 - 成功")
    void getCoursesByStatusAndReviewer_Success() {
        // 准备测试数据
        Long reviewerId = 2L;
        testCourse.setReviewerId(reviewerId);
        testCourse.setStatus(CourseStatus.REVIEWING.getValue());
        Pageable pageable = PageRequest.of(0, 10);
        List<Course> courseList = List.of(testCourse);
        Page<Course> coursePage = new PageImpl<>(courseList, pageable, courseList.size());
        when(courseRepository.findAll(any(Specification.class), any(Pageable.class))).thenReturn(coursePage);
        // 执行方法
        Page<CourseVO> result = courseService.getCoursesByStatusAndReviewer(
                CourseStatus.REVIEWING.getValue(), reviewerId, pageable);
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        assertEquals(testCourse.getId(), result.getContent().get(0).getId());
        assertEquals(reviewerId, result.getContent().get(0).getReviewerId());
        assertEquals(CourseStatus.REVIEWING.getValue(), result.getContent().get(0).getStatus());
        // 验证方法调用
        verify(courseRepository).findAll(any(Specification.class), eq(pageable));
    }
    @Test
    @DisplayName("获取课程结构 - 成功")
    void getCourseStructure_Success() {
        // 准备测试数据
        // 为课程添加章节和小节
        Chapter chapter = new Chapter();
        chapter.setId(1L);
        chapter.setTitle("测试章节");
        chapter.setDescription("这是一个测试章节");
        chapter.setOrderIndex(1);
        chapter.setCourse(testCourse);
        Section section = new Section();
        section.setId(1L);
        section.setTitle("测试小节");
        section.setDescription("这是一个测试小节");
        section.setOrderIndex(1);
        section.setContentType("video");
        section.setChapter(chapter);
        List<Section> sections = List.of(section);
        chapter.setSections(sections);
        List<Chapter> chapters = List.of(chapter);
        testCourse.setChapters(chapters);
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 执行方法
        CourseStructureVO result = courseService.getCourseStructure(testCourse.getId());
        // 验证结果
        assertNotNull(result);
        assertNotNull(result.getCourse());
        assertEquals(testCourse.getId(), result.getCourse().getId());
        assertEquals(testCourse.getTitle(), result.getCourse().getTitle());
        // 验证章节信息
        assertNotNull(result.getChapters());
        assertEquals(1, result.getChapters().size());
        assertEquals(chapter.getId(), result.getChapters().get(0).getId());
        assertEquals(chapter.getTitle(), result.getChapters().get(0).getTitle());
        // 验证小节信息
        assertNotNull(result.getChapters().get(0).getSections());
        assertEquals(1, result.getChapters().get(0).getSections().size());
        assertEquals(section.getId(), result.getChapters().get(0).getSections().get(0).getId());
        assertEquals(section.getTitle(), result.getChapters().get(0).getSections().get(0).getTitle());
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
    }
    @Test
    @DisplayName("获取课程结构 - 课程不存在")
    void getCourseStructure_CourseNotFound() {
        // 准备测试数据
        when(courseRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 验证抛出异常
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, 
                () -> courseService.getCourseStructure(1L));
        assertTrue(exception.getMessage().contains("课程不存在"));
        // 验证方法调用
        verify(courseRepository).findById(1L);
    }
    @Test
    @DisplayName("更新支付设置 - 从付费改为免费时所有章节变为免费")
    void updatePaymentSettings_PaidToFree_AllChaptersShouldBeFree() {
        // 准备测试数据
        testCourse.setPaymentType(CoursePaymentType.PAID.getValue());
        testCourse.setStatus(CourseStatus.DRAFT.getValue());
        // 创建两个付费章节
        Chapter chapter1 = Chapter.builder()
                .id(1L)
                .accessType(ChapterAccessType.PAID_ONLY.getValue())
                .build();
        Chapter chapter2 = Chapter.builder()
                .id(2L)
                .accessType(ChapterAccessType.PAID_ONLY.getValue())
                .build();
        testCourse.setChapters(Arrays.asList(chapter1, chapter2));
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(courseRepository.save(any(Course.class))).thenReturn(testCourse);
        // 执行方法 - 更新为免费课程
        CourseVO result = courseService.updatePaymentSettings(
                testCourse.getId(),
                CoursePaymentType.FREE.getValue(),
                null,
                null
        );
        // 验证结果
        assertNotNull(result);
        assertEquals(CoursePaymentType.FREE.getValue(), result.getPaymentType());
        // 验证所有章节都设置为免费访问
        testCourse.getChapters().forEach(chapter -> 
            assertEquals(ChapterAccessType.FREE_TRIAL.getValue(), chapter.getAccessType(),
                    "章节ID为" + chapter.getId() + "的章节应该设置为免费访问")
        );
    }
    @Test
    @DisplayName("更新支付设置 - 付费课程必须设置价格")
    void updatePaymentSettings_PaidCourse_MustSetPrice() {
        // 准备测试数据
        testCourse.setPaymentType(CoursePaymentType.FREE.getValue());
        testCourse.setStatus(CourseStatus.DRAFT.getValue());
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class,
                () -> courseService.updatePaymentSettings(
                        testCourse.getId(),
                        CoursePaymentType.PAID.getValue(),
                        null,
                        null
                ));
        assertTrue(exception.getMessage().contains("付费课程必须设置价格"));
    }
    @Test
    @DisplayName("更新支付设置 - 只有草稿或已拒绝状态的课程可以更新")
    void updatePaymentSettings_OnlyDraftOrRejectedCoursesCanBeUpdated() {
        // 准备测试数据
        testCourse.setPaymentType(CoursePaymentType.FREE.getValue());
        testCourse.setStatus(CourseStatus.PUBLISHED.getValue());
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class,
                () -> courseService.updatePaymentSettings(
                        testCourse.getId(),
                        CoursePaymentType.PAID.getValue(),
                        new BigDecimal("99.99"),
                        null
                ));
        assertTrue(exception.getMessage().contains("只有草稿或已拒绝状态的课程才能更新支付设置"));
    }
    @Test
    @DisplayName("开始审核课程 - 成功")
    void startReview_Success() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.PENDING_REVIEW.getValue());
        Long reviewerId = 2L;
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(courseRepository.save(any(Course.class))).thenReturn(testCourse);
        // 执行方法
        CourseVO result = courseService.startReview(testCourse.getId(), reviewerId);
        // 验证结果
        assertNotNull(result);
        assertEquals(CourseStatus.REVIEWING.getValue(), result.getStatus());
        assertEquals(reviewerId, result.getReviewerId());
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository).save(any(Course.class));
    }
    @Test
    @DisplayName("开始审核课程 - 课程状态不是待审核")
    void startReview_CourseNotInPendingReviewStatus() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.DRAFT.getValue());
        Long reviewerId = 2L;
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> courseService.startReview(testCourse.getId(), reviewerId));
        assertTrue(exception.getMessage().contains("只有待审核状态的课程才能开始审核"));
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository, never()).save(any(Course.class));
    }
    @Test
    @DisplayName("审核通过课程 - 成功")
    void approveCourse_Success() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.REVIEWING.getValue());
        Long reviewerId = 2L;
        testCourse.setReviewerId(reviewerId);
        String comment = "内容符合要求，审核通过";
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(courseRepository.save(any(Course.class))).thenReturn(testCourse);
        // 执行方法
        CourseVO result = courseService.approveCourse(testCourse.getId(), comment, reviewerId);
        // 验证结果
        assertNotNull(result);
        assertEquals(CourseStatus.DRAFT.getValue(), result.getStatus());
        assertEquals(comment, result.getReviewComment());
        assertNotNull(result.getReviewedAt());
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository, atLeastOnce()).save(any(Course.class));
    }
    @Test
    @DisplayName("审核通过课程 - 应保留发布版本的评分和学生数量")
    void approveCourse_ShouldKeepRatingAndStudentCountForPublishedVersion() {
        // 准备测试数据 - 工作区版本
        testCourse.setStatus(CourseStatus.REVIEWING.getValue());
        testCourse.setVersionType(CourseVersion.REVIEW.getValue());
        testCourse.setIsPublishedVersion(false);
        Long reviewerId = 2L;
        testCourse.setReviewerId(reviewerId);
        String comment = "内容符合要求，审核通过";
        // 创建一个已存在的发布版本，带有评分和学生数据
        Course publishedVersion = Course.builder()
                .id(2L)
                .title("已发布的测试课程")
                .isPublishedVersion(true)
                .status(CourseStatus.PUBLISHED.getValue())
                .versionType(CourseVersion.PUBLISHED.getValue())
                .averageRating(4.5f)
                .ratingCount(10)
                .studentCount(100)
                .build();
        // 设置工作区版本与发布版本的关联
        testCourse.setPublishedVersionId(publishedVersion.getId());
        when(courseRepository.findById(testCourse.getId())).thenReturn(Optional.of(testCourse));
        when(courseRepository.findById(publishedVersion.getId())).thenReturn(Optional.of(publishedVersion));
        when(courseRepository.save(any(Course.class))).thenAnswer(invocation -> invocation.getArgument(0));
        when(courseRepository.saveAndFlush(any(Course.class))).thenAnswer(invocation -> invocation.getArgument(0));
        // 执行方法
        CourseVO result = courseService.approveCourse(testCourse.getId(), comment, reviewerId);
        // 验证工作区版本状态
        assertNotNull(result);
        assertEquals(CourseStatus.DRAFT.getValue(), result.getStatus());
        // 验证发布版本保留了评分和学生数量
        // 方法一：捕获保存的发布版本对象
        ArgumentCaptor<Course> publishedVersionCaptor = ArgumentCaptor.forClass(Course.class);
        verify(courseRepository, atLeastOnce()).save(publishedVersionCaptor.capture());
        // 找到捕获的发布版本对象
        Course capturedPublishedVersion = publishedVersionCaptor.getAllValues().stream()
                .filter(Course::getIsPublishedVersion)
                .findFirst()
                .orElse(null);
        // 验证发布版本属性
        assertNotNull(capturedPublishedVersion, "保存的发布版本对象不应为空");
        assertEquals(4.5f, capturedPublishedVersion.getAverageRating(), "平均评分应保持不变");
        assertEquals(10, capturedPublishedVersion.getRatingCount(), "评分数量应保持不变");
        assertEquals(100, capturedPublishedVersion.getStudentCount(), "学生数量应保持不变");
        // 验证发布版本状态和评论
        assertEquals(CourseStatus.PUBLISHED.getValue(), capturedPublishedVersion.getStatus());
        assertEquals(CourseVersion.PUBLISHED.getValue(), capturedPublishedVersion.getVersionType());
        assertEquals(comment, capturedPublishedVersion.getReviewComment());
    }
    @Test
    @DisplayName("审核通过课程 - 课程状态不是审核中")
    void approveCourse_CourseNotInReviewingStatus() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.DRAFT.getValue());
        Long reviewerId = 2L;
        testCourse.setReviewerId(reviewerId);
        String comment = "内容符合要求，审核通过";
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> courseService.approveCourse(testCourse.getId(), comment, reviewerId));
        assertTrue(exception.getMessage().contains("只有审核中状态的课程才能审核通过"));
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository, never()).save(any(Course.class));
    }
    @Test
    @DisplayName("审核通过课程 - 审核人不匹配")
    void approveCourse_ReviewerNotMatch() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.REVIEWING.getValue());
        Long reviewerId = 2L;
        testCourse.setReviewerId(3L); // 不同的审核人ID
        String comment = "内容符合要求，审核通过";
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> courseService.approveCourse(testCourse.getId(), comment, reviewerId));
        assertTrue(exception.getMessage().contains("只有分配的审核人才能审核课程"));
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository, never()).save(any(Course.class));
    }
    @Test
    @DisplayName("拒绝课程 - 成功")
    void rejectCourse_Success() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.REVIEWING.getValue());
        Long reviewerId = 2L;
        testCourse.setReviewerId(reviewerId);
        String reason = "内容不符合要求，需要修改";
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(courseRepository.save(any(Course.class))).thenReturn(testCourse);
        // 执行方法
        CourseVO result = courseService.rejectCourse(testCourse.getId(), reason, reviewerId);
        // 验证结果
        assertNotNull(result);
        assertEquals(CourseStatus.REJECTED.getValue(), result.getStatus());
        assertEquals(reason, result.getReviewComment());
        assertNotNull(result.getReviewedAt());
        assertEquals(CourseVersion.DRAFT.getValue(), result.getVersionType());
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository).save(any(Course.class));
    }
    @Test
    @DisplayName("拒绝课程 - 课程状态不是审核中")
    void rejectCourse_CourseNotInReviewingStatus() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.DRAFT.getValue());
        Long reviewerId = 2L;
        testCourse.setReviewerId(reviewerId);
        String reason = "内容不符合要求，需要修改";
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> courseService.rejectCourse(testCourse.getId(), reason, reviewerId));
        assertTrue(exception.getMessage().contains("只有审核中状态的课程才能被拒绝"));
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository, never()).save(any(Course.class));
    }
    @Test
    @DisplayName("拒绝课程 - 审核人不匹配")
    void rejectCourse_ReviewerNotMatch() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.REVIEWING.getValue());
        Long reviewerId = 2L;
        testCourse.setReviewerId(3L); // 不同的审核人ID
        String reason = "内容不符合要求，需要修改";
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> courseService.rejectCourse(testCourse.getId(), reason, reviewerId));
        assertTrue(exception.getMessage().contains("只有分配的审核人才能审核课程"));
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository, never()).save(any(Course.class));
    }
    @Test
    @DisplayName("获取机构已发布课程列表 - 成功")
    void getPublishedCoursesByInstitution_Success() {
        // 准备测试数据
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(testInstitution));
        Pageable pageable = PageRequest.of(0, 10);
        List<Course> courseList = List.of(testCourse);
        Page<Course> coursePage = new PageImpl<>(courseList, pageable, courseList.size());
        // 模拟已发布版本查询
        when(courseRepository.findByInstitutionAndIsPublishedVersion(any(Institution.class), eq(true), any(Pageable.class)))
            .thenReturn(coursePage);
        // 执行方法
        Page<CourseVO> result = courseService.getPublishedCoursesByInstitution(testInstitution.getId(), pageable);
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        assertEquals(testCourse.getId(), result.getContent().get(0).getId());
        assertEquals(testCourse.getTitle(), result.getContent().get(0).getTitle());
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(courseRepository).findByInstitutionAndIsPublishedVersion(testInstitution, true, pageable);
    }
    @Test
    @DisplayName("获取机构工作区课程列表 - 成功")
    void getWorkspaceCoursesByInstitution_Success() {
        // 准备测试数据
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(testInstitution));
        Pageable pageable = PageRequest.of(0, 10);
        List<Course> courseList = List.of(testCourse);
        Page<Course> coursePage = new PageImpl<>(courseList, pageable, courseList.size());
        // 模拟工作区版本查询
        when(courseRepository.findByInstitutionAndIsPublishedVersion(any(Institution.class), eq(false), any(Pageable.class)))
            .thenReturn(coursePage);
        // 执行方法
        Page<CourseVO> result = courseService.getWorkspaceCoursesByInstitution(testInstitution.getId(), pageable);
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        assertEquals(testCourse.getId(), result.getContent().get(0).getId());
        assertEquals(testCourse.getTitle(), result.getContent().get(0).getTitle());
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(courseRepository).findByInstitutionAndIsPublishedVersion(testInstitution, false, pageable);
    }
    @Test
    @DisplayName("搜索课程 - 成功")
    void searchCourses_Success() {
        // 准备测试数据
        CourseSearchDTO searchDTO = CourseSearchDTO.builder()
                .keyword("测试")
                .categoryId(1L)
                .tagIds(List.of(1L))
                .difficulty(1)
                .build();
        Pageable pageable = PageRequest.of(0, 10);
        // 设置课程为已发布状态
        testCourse.setStatus(CourseStatus.PUBLISHED.getValue());
        testCourse.setIsPublishedVersion(true);
        when(courseRepository.findAll(any(Specification.class), any(Pageable.class)))
                .thenReturn(new PageImpl<>(List.of(testCourse), pageable, 1));
        // 执行方法
        Page<CourseVO> result = courseService.searchCourses(searchDTO, pageable);
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        assertEquals(testCourse.getId(), result.getContent().get(0).getId());
        assertEquals(testCourse.getTitle(), result.getContent().get(0).getTitle());
        // 验证方法调用
        verify(courseRepository).findAll(any(Specification.class), eq(pageable));
    }
    @Test
    @DisplayName("获取热门课程 - 成功")
    void getHotCourses_Success() {
        // 准备测试数据
        int limit = 5;
        // 设置课程为已发布状态
        testCourse.setStatus(CourseStatus.PUBLISHED.getValue());
        testCourse.setIsPublishedVersion(true);
        when(courseRepository.findHotCourses(eq(CourseStatus.PUBLISHED.getValue()), eq(true), any(Pageable.class)))
                .thenReturn(List.of(testCourse));
        // 执行方法
        List<CourseVO> result = courseService.getHotCourses(limit);
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(testCourse.getId(), result.get(0).getId());
        assertEquals(testCourse.getTitle(), result.get(0).getTitle());
        // 验证方法调用
        verify(courseRepository).findHotCourses(eq(CourseStatus.PUBLISHED.getValue()), eq(true), any(Pageable.class));
    }
    @Test
    @DisplayName("获取最新课程 - 成功")
    void getLatestCourses_Success() {
        // 准备测试数据
        int limit = 5;
        // 设置课程为已发布状态
        testCourse.setStatus(CourseStatus.PUBLISHED.getValue());
        testCourse.setIsPublishedVersion(true);
        when(courseRepository.findLatestCourses(eq(CourseStatus.PUBLISHED.getValue()), eq(true), any(Pageable.class)))
                .thenReturn(List.of(testCourse));
        // 执行方法
        List<CourseVO> result = courseService.getLatestCourses(limit);
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(testCourse.getId(), result.get(0).getId());
        assertEquals(testCourse.getTitle(), result.get(0).getTitle());
        // 验证方法调用
        verify(courseRepository).findLatestCourses(eq(CourseStatus.PUBLISHED.getValue()), eq(true), any(Pageable.class));
    }
    @Test
    @DisplayName("根据预览令牌获取课程 - 成功")
    void getCourseByPreviewToken_Success() {
        // 准备测试数据
        String previewToken = "test-token-123";
        String redisKey = "course:preview:" + previewToken;
        Long courseId = testCourse.getId();
        // 模拟Redis返回值
        ValueOperations<String, String> valueOps = mock(ValueOperations.class);
        when(redisTemplate.opsForValue()).thenReturn(valueOps);
        when(valueOps.get(redisKey)).thenReturn(courseId.toString());
        // 模拟课程仓库
        when(courseRepository.findById(courseId)).thenReturn(Optional.of(testCourse));
        // 执行方法
        CourseVO result = courseService.getCourseByPreviewToken(previewToken);
        // 验证结果
        assertNotNull(result);
        assertEquals(testCourse.getId(), result.getId());
        assertEquals(testCourse.getTitle(), result.getTitle());
        // 验证方法调用
        verify(redisTemplate).opsForValue();
        verify(valueOps).get(redisKey);
        verify(courseRepository).findById(courseId);
    }
    @Test
    @DisplayName("根据预览令牌获取课程 - 令牌过期")
    void getCourseByPreviewToken_TokenExpired() {
        // 准备测试数据
        String previewToken = "expired-token";
        String redisKey = "course:preview:" + previewToken;
        // 模拟Redis返回空值（令牌过期或不存在）
        ValueOperations<String, String> valueOps = mock(ValueOperations.class);
        when(redisTemplate.opsForValue()).thenReturn(valueOps);
        when(valueOps.get(redisKey)).thenReturn(null);
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> courseService.getCourseByPreviewToken(previewToken));
        assertTrue(exception.getMessage().contains("预览链接不存在或已过期"));
        // 验证方法调用
        verify(redisTemplate).opsForValue();
        verify(valueOps).get(redisKey);
        verify(courseRepository, never()).findById(anyLong());
    }
    @Test
    @DisplayName("根据预览令牌获取课程结构 - 成功")
    void getCourseStructureByPreviewToken_Success() {
        // 准备测试数据
        String previewToken = "test-token-123";
        String redisKey = "course:preview:" + previewToken;
        Long courseId = testCourse.getId();
        // 为课程添加章节和小节
        Chapter chapter = new Chapter();
        chapter.setId(1L);
        chapter.setTitle("测试章节");
        chapter.setDescription("这是一个测试章节");
        chapter.setOrderIndex(1);
        chapter.setCourse(testCourse);
        Section section = new Section();
        section.setId(1L);
        section.setTitle("测试小节");
        section.setDescription("这是一个测试小节");
        section.setOrderIndex(1);
        section.setContentType("video");
        section.setChapter(chapter);
        List<Section> sections = List.of(section);
        chapter.setSections(sections);
        List<Chapter> chapters = List.of(chapter);
        testCourse.setChapters(chapters);
        // 模拟Redis返回值
        ValueOperations<String, String> valueOps = mock(ValueOperations.class);
        when(redisTemplate.opsForValue()).thenReturn(valueOps);
        when(valueOps.get(redisKey)).thenReturn(courseId.toString());
        // 模拟课程仓库
        when(courseRepository.findById(courseId)).thenReturn(Optional.of(testCourse));
        // 执行方法
        CourseStructureVO result = courseService.getCourseStructureByPreviewToken(previewToken);
        // 验证结果
        assertNotNull(result);
        assertNotNull(result.getCourse());
        assertEquals(testCourse.getId(), result.getCourse().getId());
        assertEquals(testCourse.getTitle(), result.getCourse().getTitle());
        // 验证章节信息
        assertNotNull(result.getChapters());
        assertEquals(1, result.getChapters().size());
        assertEquals(chapter.getId(), result.getChapters().get(0).getId());
        assertEquals(chapter.getTitle(), result.getChapters().get(0).getTitle());
        // 验证小节信息
        assertNotNull(result.getChapters().get(0).getSections());
        assertEquals(1, result.getChapters().get(0).getSections().size());
        assertEquals(section.getId(), result.getChapters().get(0).getSections().get(0).getId());
        assertEquals(section.getTitle(), result.getChapters().get(0).getSections().get(0).getTitle());
        // 验证方法调用
        verify(redisTemplate).opsForValue();
        verify(valueOps).get(redisKey);
        verify(courseRepository).findById(courseId);
    }
    @Test
    @DisplayName("取消发布课程 - 成功")
    void unpublishCourse_Success() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.PUBLISHED.getValue());
        testCourse.setVersionType(CourseVersion.PUBLISHED.getValue());
        testCourse.setIsPublishedVersion(true);
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(courseRepository.save(any(Course.class))).thenReturn(testCourse);
        // 执行方法
        CourseVO result = courseService.unpublishCourse(testCourse.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(CourseStatus.UNPUBLISHED.getValue(), result.getStatus());
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository).save(any(Course.class));
    }
    @Test
    @DisplayName("取消发布课程 - 课程状态不是已发布")
    void unpublishCourse_CourseNotInPublishedStatus() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.DRAFT.getValue());
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> courseService.unpublishCourse(testCourse.getId()));
        assertTrue(exception.getMessage().contains("只有已发布状态的课程才能下线"));
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository, never()).save(any(Course.class));
    }
    @Test
    @DisplayName("重新发布课程 - 成功")
    void republishCourse_Success() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.UNPUBLISHED.getValue());
        testCourse.setVersionType(CourseVersion.DRAFT.getValue());
        testCourse.setIsPublishedVersion(true);
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(courseRepository.save(any(Course.class))).thenReturn(testCourse);
        // 执行方法
        CourseVO result = courseService.republishCourse(testCourse.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(CourseStatus.PUBLISHED.getValue(), result.getStatus());
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository).save(any(Course.class));
    }
    @Test
    @DisplayName("重新发布课程 - 课程不是已下线状态")
    void republishCourse_CourseNotPublishedVersion() {
        // 准备测试数据
        testCourse.setStatus(CourseStatus.DRAFT.getValue());
        testCourse.setVersionType(CourseVersion.DRAFT.getValue());
        testCourse.setIsPublishedVersion(false);
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> courseService.republishCourse(testCourse.getId()));
        assertTrue(exception.getMessage().contains("只有已下线状态的课程才能重新上线"));
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository, never()).save(any(Course.class));
    }
    @Test
    @DisplayName("增加学生数量 - 成功")
    void incrementStudentCount_Success() {
        // 准备测试数据
        testCourse.setStudentCount(10);
        testCourse.setIsPublishedVersion(true);
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(courseRepository.save(any(Course.class))).thenReturn(testCourse);
        // 执行方法
        courseService.incrementStudentCount(testCourse.getId());
        // 验证结果
        assertEquals(11, testCourse.getStudentCount());
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository).save(any(Course.class));
    }
    @Test
    @DisplayName("更新课程评分 - 成功")
    void updateCourseRating_Success() {
        // 准备测试数据
        testCourse.setAverageRating(4.0f);
        testCourse.setRatingCount(5);
        testCourse.setIsPublishedVersion(true);
        Integer newRating = 5;
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(courseRepository.save(any(Course.class))).thenReturn(testCourse);
        // 执行方法
        courseService.updateCourseRating(testCourse.getId(), newRating);
        // 验证结果
        assertEquals(6, testCourse.getRatingCount());
        assertEquals(4.17f, testCourse.getAverageRating(), 0.01f);
        // 验证方法调用
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository).save(any(Course.class));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/EmailServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.service.impl.EmailServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.test.context.ActiveProfiles;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;
import org.mockito.ArgumentCaptor;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import java.util.concurrent.TimeUnit;
import java.lang.reflect.Field;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
/**
 * 邮件服务测试
 */
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test")
public class EmailServiceTest {
    @Mock
    private JavaMailSender mailSender;
    @Mock
    private StringRedisTemplate redisTemplate;
    @Mock
    private TemplateEngine templateEngine;
    @Mock
    private ValueOperations<String, String> valueOperations;
    @Mock
    private MimeMessage mimeMessage;
    @InjectMocks
    private EmailServiceImpl emailService;
    @BeforeEach
    void setUp() {
        emailService.setVerificationCodePrefix("email:verification:");
        emailService.setVerificationCodeExpiration(5L);
        // 使用反射设置私有字段emailFrom
        try {
            Field emailFromField = EmailServiceImpl.class.getDeclaredField("emailFrom");
            emailFromField.setAccessible(true);
            emailFromField.set(emailService, "test@example.com");
        } catch (Exception e) {
            fail("无法设置emailFrom字段: " + e.getMessage());
        }
    }
    @Test
    void sendVerificationCodeShouldSendEmail() throws MessagingException {
        // 准备
        String email = "test@example.com";
        String code = "123456";
        String processedTemplate = "<html>验证码是: 123456</html>";
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);
        when(templateEngine.process(eq("email/verification-code"), any(Context.class))).thenReturn(processedTemplate);
        // 执行
        emailService.sendVerificationCode(email, code);
        // 验证
        verify(mailSender).createMimeMessage();
        verify(templateEngine).process(eq("email/verification-code"), any(Context.class));
        verify(mailSender).send(mimeMessage);
    }
    @Test
    void generateVerificationCodeShouldReturnSixDigitCode() {
        // 执行
        String code = emailService.generateVerificationCode();
        // 验证
        assertNotNull(code);
        assertEquals(6, code.length());
        assertTrue(code.matches("^\\d{6}$"));
    }
    @Test
    void saveVerificationCodeShouldSaveToRedis() {
        // 准备
        String email = "test@example.com";
        String code = "123456";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        // 执行
        emailService.saveVerificationCode(email, code);
        // 验证
        verify(valueOperations).set(
            eq("email:verification:test@example.com"),
            eq(code),
            eq(5L),
            eq(TimeUnit.MINUTES)
        );
    }
    @Test
    void validateVerificationCodeShouldReturnTrueWhenValid() {
        // 准备
        String email = "test@example.com";
        String code = "123456";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("email:verification:test@example.com")).thenReturn(code);
        // 执行
        boolean result = emailService.validateVerificationCode(email, code);
        // 验证
        assertTrue(result);
        verify(valueOperations).get("email:verification:test@example.com");
        verify(redisTemplate).delete("email:verification:test@example.com");
    }
    @Test
    void validateVerificationCodeShouldReturnFalseWhenInvalid() {
        // 准备
        String email = "test@example.com";
        String code = "123456";
        String wrongCode = "654321";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("email:verification:test@example.com")).thenReturn(wrongCode);
        // 执行
        boolean result = emailService.validateVerificationCode(email, code);
        // 验证
        assertFalse(result);
        verify(valueOperations).get("email:verification:test@example.com");
        verify(redisTemplate, never()).delete(anyString());
    }
    @Test
    void validateVerificationCodeShouldReturnFalseWhenExpired() {
        // 准备
        String email = "test@example.com";
        String code = "123456";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("email:verification:test@example.com")).thenReturn(null);
        // 执行
        boolean result = emailService.validateVerificationCode(email, code);
        // 验证
        assertFalse(result);
        verify(valueOperations).get("email:verification:test@example.com");
        verify(redisTemplate, never()).delete(anyString());
    }
    @Test
    public void testSendEmailUpdateCode() throws MessagingException {
        // 准备
        String to = "test@example.com";
        String code = "123456";
        String emailContent = "<div>邮箱更新验证码：123456</div>";
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);
        when(templateEngine.process(eq("email/email-update-code"), any(Context.class))).thenReturn(emailContent);
        // 执行
        emailService.sendEmailUpdateCode(to, code);
        // 验证
        verify(mailSender, times(1)).createMimeMessage();
        verify(mailSender, times(1)).send(any(MimeMessage.class));
        verify(templateEngine, times(1)).process(eq("email/email-update-code"), any(Context.class));
        // 验证上下文参数
        ArgumentCaptor<Context> contextCaptor = ArgumentCaptor.forClass(Context.class);
        verify(templateEngine).process(eq("email/email-update-code"), contextCaptor.capture());
        Context context = contextCaptor.getValue();
        assertNotNull(context);
    }
    @Test
    public void testSendApplicationConfirmationEmail() throws MessagingException {
        // 准备
        String to = "test@example.com";
        String applicationId = "APP12345678";
        String institutionName = "测试机构";
        String emailContent = "<div>机构入驻申请确认</div>";
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);
        when(templateEngine.process(eq("email/application-confirmation"), any(Context.class))).thenReturn(emailContent);
        // 执行
        emailService.sendApplicationConfirmationEmail(to, applicationId, institutionName);
        // 验证
        verify(mailSender, times(1)).createMimeMessage();
        verify(mailSender, times(1)).send(any(MimeMessage.class));
        verify(templateEngine, times(1)).process(eq("email/application-confirmation"), any(Context.class));
        // 验证上下文参数
        ArgumentCaptor<Context> contextCaptor = ArgumentCaptor.forClass(Context.class);
        verify(templateEngine).process(eq("email/application-confirmation"), contextCaptor.capture());
        Context context = contextCaptor.getValue();
        assertNotNull(context);
    }
    @Test
    public void testSendApplicationApprovedEmail() throws MessagingException {
        // 准备
        String to = "test@example.com";
        String institutionName = "测试机构";
        String registerCode = "ABC12345";
        String emailContent = "<div>机构入驻申请已通过</div>";
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);
        when(templateEngine.process(eq("email/application-approved"), any(Context.class))).thenReturn(emailContent);
        // 执行
        emailService.sendApplicationApprovedEmail(to, institutionName, registerCode);
        // 验证
        verify(mailSender, times(1)).createMimeMessage();
        verify(mailSender, times(1)).send(any(MimeMessage.class));
        verify(templateEngine, times(1)).process(eq("email/application-approved"), any(Context.class));
        // 验证上下文参数
        ArgumentCaptor<Context> contextCaptor = ArgumentCaptor.forClass(Context.class);
        verify(templateEngine).process(eq("email/application-approved"), contextCaptor.capture());
        Context context = contextCaptor.getValue();
        assertNotNull(context);
    }
    @Test
    public void testSendApplicationRejectedEmail() throws MessagingException {
        // 准备
        String to = "test@example.com";
        String institutionName = "测试机构";
        String reason = "资质不符合要求";
        String emailContent = "<div>机构入驻申请未通过</div>";
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);
        when(templateEngine.process(eq("email/application-rejected"), any(Context.class))).thenReturn(emailContent);
        // 执行
        emailService.sendApplicationRejectedEmail(to, institutionName, reason);
        // 验证
        verify(mailSender, times(1)).createMimeMessage();
        verify(mailSender, times(1)).send(any(MimeMessage.class));
        verify(templateEngine, times(1)).process(eq("email/application-rejected"), any(Context.class));
        // 验证上下文参数
        ArgumentCaptor<Context> contextCaptor = ArgumentCaptor.forClass(Context.class);
        verify(templateEngine).process(eq("email/application-rejected"), contextCaptor.capture());
        Context context = contextCaptor.getValue();
        assertNotNull(context);
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/InstitutionAuthServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.InstitutionRegisterDTO;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.RoleEnum;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.impl.InstitutionAuthServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.ActiveProfiles;
import java.time.LocalDateTime;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
@ActiveProfiles("test")
@ExtendWith(MockitoExtension.class)
class InstitutionAuthServiceTest {
    @Mock
    private UserRepository userRepository;
    @Mock
    private RoleRepository roleRepository;
    @Mock
    private InstitutionRepository institutionRepository;
    @Mock
    private PasswordEncoder passwordEncoder;
    @Mock
    private EmailService emailService;
    @InjectMocks
    private InstitutionAuthServiceImpl institutionAuthService;
    private InstitutionRegisterDTO registerDTO;
    private Institution institution;
    private Role institutionRole;
    @BeforeEach
    void setUp() {
        // 设置注册DTO
        registerDTO = new InstitutionRegisterDTO();
        registerDTO.setUsername("institution_user");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("user@example.com");
        registerDTO.setPhone("13800138000");
        registerDTO.setInstitutionCode("ABC12345");
        // 设置机构
        institution = Institution.builder()
                .id(1L)
                .name("测试机构")
                .description("这是一个测试机构")
                .contactPerson("张三")
                .contactPhone("13800138000")
                .contactEmail("contact@example.com")
                .address("北京市海淀区")
                .registerCode("ABC12345")
                .status(1) // 正常状态
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build();
        // 设置机构角色
        institutionRole = Role.builder()
                .id(2L)
                .name("机构用户")
                .code(RoleEnum.INSTITUTION.getCode())
                .build();
    }
    @Test
    void registerWithInstitutionCode_Success() {
        // Arrange
        when(institutionRepository.findByRegisterCode(anyString())).thenReturn(Optional.of(institution));
        when(userRepository.existsByUsername(anyString())).thenReturn(false);
        when(userRepository.existsByEmail(anyString())).thenReturn(false);
        when(passwordEncoder.encode(anyString())).thenReturn("encoded_password");
        when(roleRepository.findByCode(RoleEnum.INSTITUTION.getCode())).thenReturn(Optional.of(institutionRole));
        when(userRepository.save(any(User.class))).thenAnswer(invocation -> invocation.getArgument(0));
        // Act
        institutionAuthService.registerWithInstitutionCode(registerDTO);
        // Assert
        verify(institutionRepository).findByRegisterCode(registerDTO.getInstitutionCode());
        verify(userRepository).existsByUsername(registerDTO.getUsername());
        verify(userRepository).existsByEmail(registerDTO.getEmail());
        verify(roleRepository).findByCode(RoleEnum.INSTITUTION.getCode());
        verify(userRepository).save(any(User.class));
    }
    @Test
    void registerWithInstitutionCode_InvalidCode() {
        // Arrange
        when(institutionRepository.findByRegisterCode(anyString())).thenReturn(Optional.empty());
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionAuthService.registerWithInstitutionCode(registerDTO));
    }
    @Test
    void registerWithInstitutionCode_InactiveInstitution() {
        // Arrange
        institution.setStatus(0); // 待审核状态
        when(institutionRepository.findByRegisterCode(anyString())).thenReturn(Optional.of(institution));
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionAuthService.registerWithInstitutionCode(registerDTO));
    }
    @Test
    void registerWithInstitutionCode_UsernameExists() {
        // Arrange
        when(institutionRepository.findByRegisterCode(anyString())).thenReturn(Optional.of(institution));
        when(userRepository.existsByUsername(anyString())).thenReturn(true);
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionAuthService.registerWithInstitutionCode(registerDTO));
    }
    @Test
    void registerWithInstitutionCode_EmailExists() {
        // Arrange
        when(institutionRepository.findByRegisterCode(anyString())).thenReturn(Optional.of(institution));
        when(userRepository.existsByUsername(anyString())).thenReturn(false);
        when(userRepository.existsByEmail(anyString())).thenReturn(true);
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionAuthService.registerWithInstitutionCode(registerDTO));
    }
    @Test
    void registerWithInstitutionCode_RoleNotFound() {
        // Arrange
        when(institutionRepository.findByRegisterCode(anyString())).thenReturn(Optional.of(institution));
        when(userRepository.existsByUsername(anyString())).thenReturn(false);
        when(userRepository.existsByEmail(anyString())).thenReturn(false);
        when(roleRepository.findByCode(anyString())).thenReturn(Optional.empty());
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionAuthService.registerWithInstitutionCode(registerDTO));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/InstitutionServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplyDTO;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplicationQueryDTO;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.InstitutionApplication;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import com.zhangziqi.online_course_mine.model.vo.InstitutionApplicationVO;
import com.zhangziqi.online_course_mine.model.vo.InstitutionVO;
import com.zhangziqi.online_course_mine.repository.InstitutionApplicationRepository;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.impl.InstitutionServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.test.context.ActiveProfiles;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
@ActiveProfiles("test")
@ExtendWith(MockitoExtension.class)
class InstitutionServiceTest {
    @Mock
    private InstitutionRepository institutionRepository;
    @Mock
    private InstitutionApplicationRepository applicationRepository;
    @Mock
    private UserRepository userRepository;
    @Mock
    private EmailService emailService;
    @Mock
    private StorageQuotaService storageQuotaService;
    @InjectMocks
    private InstitutionServiceImpl institutionService;
    private InstitutionApplyDTO applyDTO;
    private InstitutionApplication application;
    private InstitutionApplicationQueryDTO queryDTO;
    private User user;
    private Institution institution;
    @BeforeEach
    void setUp() {
        // 设置申请DTO
        applyDTO = new InstitutionApplyDTO();
        applyDTO.setName("测试机构");
        applyDTO.setDescription("这是一个测试机构");
        applyDTO.setContactPerson("张三");
        applyDTO.setContactPhone("13800138000");
        applyDTO.setContactEmail("test@example.com");
        applyDTO.setAddress("北京市海淀区");
        // 设置申请实体
        application = InstitutionApplication.builder()
                .id(1L)
                .applicationId("APP12345678")
                .name("测试机构")
                .description("这是一个测试机构")
                .contactPerson("张三")
                .contactPhone("13800138000")
                .contactEmail("test@example.com")
                .address("北京市海淀区")
                .status(0)
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build();
        // 设置查询DTO
        queryDTO = new InstitutionApplicationQueryDTO();
        queryDTO.setPageNum(1);
        queryDTO.setPageSize(10);
        queryDTO.setStatus(0);
        // 设置用户
        user = User.builder()
                .id(1L)
                .username("admin")
                .password("password")
                .email("admin@example.com")
                .build();
        // 设置机构
        institution = Institution.builder()
                .id(1L)
                .name("测试机构")
                .description("这是一个测试机构")
                .contactPerson("张三")
                .contactPhone("13800138000")
                .contactEmail("test@example.com")
                .address("北京市海淀区")
                .registerCode("ABC12345")
                .status(1)
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build();
    }
    @Test
    void applyInstitution_Success() {
        // Arrange
        when(applicationRepository.save(any(InstitutionApplication.class))).thenReturn(application);
        doNothing().when(emailService).sendApplicationConfirmationEmail(anyString(), anyString(), anyString());
        // Act
        String applicationId = institutionService.applyInstitution(applyDTO);
        // Assert
        assertNotNull(applicationId);
        verify(applicationRepository, times(1)).save(any(InstitutionApplication.class));
        verify(emailService, times(1)).sendApplicationConfirmationEmail(anyString(), anyString(), anyString());
    }
    @Test
    void getApplicationStatus_Success() {
        // Arrange
        when(applicationRepository.findByApplicationIdAndContactEmail(anyString(), anyString()))
                .thenReturn(Optional.of(application));
        // Act
        InstitutionApplicationVO result = institutionService.getApplicationStatus("APP12345678", "test@example.com");
        // Assert
        assertNotNull(result);
        assertEquals(application.getId(), result.getId());
        assertEquals(application.getApplicationId(), result.getApplicationId());
        assertEquals(application.getName(), result.getName());
    }
    @Test
    void getApplicationStatus_NotFound() {
        // Arrange
        when(applicationRepository.findByApplicationIdAndContactEmail(anyString(), anyString()))
                .thenReturn(Optional.empty());
        // Act & Assert
        assertThrows(BusinessException.class, () ->
                institutionService.getApplicationStatus("APP12345678", "test@example.com"));
    }
    @Test
    void getApplications_Success() {
        // Arrange
        Page<InstitutionApplication> page = new PageImpl<>(Collections.singletonList(application));
        when(applicationRepository.findByStatus(anyInt(), any(Pageable.class))).thenReturn(page);
        // Act
        Page<InstitutionApplicationVO> result = institutionService.getApplications(queryDTO);
        // Assert
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
    }
    @Test
    void getApplicationDetail_Success() {
        // Arrange
        when(applicationRepository.findById(anyLong())).thenReturn(Optional.of(application));
        // Act
        InstitutionApplicationVO result = institutionService.getApplicationDetail(1L);
        // Assert
        assertNotNull(result);
        assertEquals(application.getId(), result.getId());
        assertEquals(application.getName(), result.getName());
    }
    @Test
    void getApplicationDetail_NotFound() {
        // Arrange
        when(applicationRepository.findById(anyLong())).thenReturn(Optional.empty());
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionService.getApplicationDetail(1L));
    }
    @Test
    void approveApplication_Success() {
        // Arrange
        when(applicationRepository.findById(anyLong())).thenReturn(Optional.of(application));
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.of(user));
        when(institutionRepository.save(any(Institution.class))).thenReturn(institution);
        when(applicationRepository.save(any(InstitutionApplication.class))).thenReturn(application);
        doNothing().when(emailService).sendApplicationApprovedEmail(anyString(), anyString(), anyString());
        doNothing().when(storageQuotaService).setQuota(anyLong(), any(QuotaType.class), anyLong(), any());
        // Act
        InstitutionVO result = institutionService.approveApplication(1L, "admin");
        // Assert
        assertNotNull(result);
        assertEquals(institution.getId(), result.getId());
        assertEquals(institution.getName(), result.getName());
        // 验证存储配额初始化
        verify(storageQuotaService, times(1)).setQuota(
                eq(institution.getId()),
                eq(QuotaType.VIDEO),
                eq(5L * 1024 * 1024 * 1024),
                isNull()
        );
        verify(storageQuotaService, times(1)).setQuota(
                eq(institution.getId()),
                eq(QuotaType.DOCUMENT),
                eq(2L * 1024 * 1024 * 1024),
                isNull()
        );
        verify(storageQuotaService, times(1)).setQuota(
                eq(institution.getId()),
                eq(QuotaType.TOTAL),
                eq(10L * 1024 * 1024 * 1024),
                isNull()
        );
        verify(emailService, times(1)).sendApplicationApprovedEmail(anyString(), anyString(), anyString());
    }
    @Test
    void approveApplication_ApplicationNotFound() {
        // Arrange
        when(applicationRepository.findById(anyLong())).thenReturn(Optional.empty());
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionService.approveApplication(1L, "admin"));
    }
    @Test
    void approveApplication_WrongStatus() {
        // Arrange
        application.setStatus(1); // 已通过状态
        when(applicationRepository.findById(anyLong())).thenReturn(Optional.of(application));
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionService.approveApplication(1L, "admin"));
    }
    @Test
    void rejectApplication_Success() {
        // Arrange
        when(applicationRepository.findById(anyLong())).thenReturn(Optional.of(application));
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.of(user));
        when(applicationRepository.save(any(InstitutionApplication.class))).thenReturn(application);
        doNothing().when(emailService).sendApplicationRejectedEmail(anyString(), anyString(), anyString());
        // Act
        institutionService.rejectApplication(1L, "原因", "admin");
        // Assert
        verify(applicationRepository, times(1)).save(any(InstitutionApplication.class));
        verify(emailService, times(1)).sendApplicationRejectedEmail(anyString(), anyString(), anyString());
    }
    @Test
    void getInstitutionRegisterCode_Success() {
        // Arrange
        user.setInstitutionId(1L);
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.of(user));
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(institution));
        // Act
        String result = institutionService.getInstitutionRegisterCode("admin");
        // Assert
        assertEquals(institution.getRegisterCode(), result);
    }
    @Test
    void getInstitutionRegisterCode_UserNotAssociatedWithInstitution() {
        // Arrange
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.of(user));
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionService.getInstitutionRegisterCode("admin"));
    }
    @Test
    void approveApplication_ShouldRollbackOnQuotaError() {
        // Arrange
        when(applicationRepository.findById(anyLong())).thenReturn(Optional.of(application));
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.of(user));
        when(institutionRepository.save(any(Institution.class))).thenReturn(institution);
        doThrow(new RuntimeException("配额设置失败")).when(storageQuotaService)
                .setQuota(anyLong(), any(QuotaType.class), anyLong(), any());
        // Act & Assert
        assertThrows(RuntimeException.class, () -> institutionService.approveApplication(1L, "admin"));
        // 验证事务回滚
        verify(emailService, never()).sendApplicationApprovedEmail(anyString(), anyString(), anyString());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/MediaServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.media.*;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Media;
import com.zhangziqi.online_course_mine.model.enums.MediaStatus;
import com.zhangziqi.online_course_mine.model.enums.MediaType;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import com.zhangziqi.online_course_mine.model.vo.MediaVO;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.MediaRepository;
import com.zhangziqi.online_course_mine.service.impl.MediaServiceImpl;
import com.zhangziqi.online_course_mine.service.impl.S3MultipartUploadManager;
import com.zhangziqi.online_course_mine.service.impl.UploadStatusService;
import com.zhangziqi.online_course_mine.service.MinioService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import software.amazon.awssdk.services.s3.model.CompleteMultipartUploadResponse;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
public class MediaServiceTest {
    @Mock
    private MediaRepository mediaRepository;
    @Mock
    private InstitutionRepository institutionRepository;
    @Mock
    private StorageQuotaService storageQuotaService;
    @Mock
    private S3MultipartUploadManager s3UploadManager;
    @Mock
    private UploadStatusService uploadStatusService;
    @Mock
    private MinioService minioService;
    @InjectMocks
    private MediaServiceImpl mediaService;
    private Institution institution;
    private Media media;
    private MediaUploadInitDTO uploadInitDTO;
    private UploadStatusInfo uploadStatusInfo;
    private Long institutionId = 1L;
    private Long uploaderId = 2L;
    private Long mediaId = 3L;
    @BeforeEach
    void setUp() {
        // 设置测试数据
        institution = new Institution();
        institution.setId(institutionId);
        institution.setName("测试机构");
        media = new Media();
        media.setId(mediaId);
        media.setTitle("测试视频");
        media.setDescription("测试描述");
        media.setType(MediaType.VIDEO);
        media.setSize(1024 * 1024 * 10L); // 10MB
        media.setOriginalFilename("test.mp4");
        media.setStoragePath("video/1/123/test.mp4");
        media.setStatus(MediaStatus.UPLOADING);
        media.setInstitution(institution);
        media.setUploaderId(uploaderId);
        media.setUploadTime(LocalDateTime.now());
        media.setLastAccessTime(LocalDateTime.now());
        uploadInitDTO = new MediaUploadInitDTO();
        uploadInitDTO.setTitle("测试视频");
        uploadInitDTO.setDescription("测试描述");
        uploadInitDTO.setFilename("test.mp4");
        uploadInitDTO.setContentType("video/mp4");
        uploadInitDTO.setFileSize(1024 * 1024 * 10L); // 10MB
        uploadInitDTO.setChunkSize((int) (1024 * 1024 * 2L)); // 2MB
        // 计算总分片数
        int totalParts = (int) ((1024 * 1024 * 10L) / (1024 * 1024 * 2L));
        if ((1024 * 1024 * 10L) % (1024 * 1024 * 2L) != 0) {
            totalParts++;
        }
        uploadStatusInfo = UploadStatusInfo.builder()
                .mediaId(mediaId)
                .institutionId(institutionId)
                .uploaderId(uploaderId)
                .uploadId("test-upload-id")
                .objectKey("video/1/123/test.mp4")
                .filename("test.mp4")
                .contentType("video/mp4")
                .fileSize(1024 * 1024 * 10L)
                .status(MediaStatus.UPLOADING)
                .totalParts(totalParts)
                .completedParts(new ArrayList<>())
                .initiatedAt(LocalDateTime.now())
                .lastUpdatedAt(LocalDateTime.now())
                .expiresAt(LocalDateTime.now().plusHours(24))
                .build();
    }
    @Test
    void testInitiateUpload() {
        // Mock 方法调用
        when(institutionRepository.findById(institutionId)).thenReturn(Optional.of(institution));
        when(storageQuotaService.hasEnoughQuota(eq(institutionId), any(QuotaType.class), anyLong())).thenReturn(true);
        when(mediaRepository.save(any(Media.class))).thenAnswer(i -> {
            Media m = i.getArgument(0);
            m.setId(mediaId);
            return m;
        });
        when(s3UploadManager.initiateMultipartUpload(anyString(), anyString())).thenReturn("test-upload-id");
        when(s3UploadManager.batchGeneratePresignedUrls(anyString(), anyString(), anyInt(), anyInt()))
                .thenReturn(List.of(new PresignedUrlInfo(1, "https://test-url.com")));
        // 执行测试
        UploadInitiationVO result = mediaService.initiateUpload(uploadInitDTO, institutionId, uploaderId);
        // 验证结果
        assertNotNull(result);
        assertEquals(mediaId, result.getMediaId());
        assertEquals("test-upload-id", result.getUploadId());
        assertEquals(5, result.getTotalParts());
        assertEquals(1, result.getPresignedUrls().size());
        // 验证调用
        verify(mediaRepository).save(any(Media.class));
        verify(uploadStatusService).saveUploadStatus(any(UploadStatusInfo.class));
        verify(storageQuotaService, times(1)).updateUsedQuota(eq(institutionId), any(QuotaType.class), anyLong());
    }
    @Test
    void testCompleteUpload() {
        // 准备测试数据
        for (int i = 1; i <= 5; i++) {
            uploadStatusInfo.getCompletedParts().add(new UploadStatusInfo.PartInfo(i, "test-etag-" + i));
        }
        CompleteUploadDTO dto = new CompleteUploadDTO();
        dto.setUploadId("test-upload-id");
        // 创建完成分片列表
        List<CompleteUploadDTO.PartInfo> completedParts = new ArrayList<>();
        for (int i = 1; i <= 5; i++) {
            CompleteUploadDTO.PartInfo partInfo = new CompleteUploadDTO.PartInfo();
            partInfo.setPartNumber(i);
            partInfo.setETag("test-etag-" + i);
            completedParts.add(partInfo);
        }
        dto.setCompletedParts(completedParts);
        // Mock 方法调用
        when(institutionRepository.findById(institutionId)).thenReturn(Optional.of(institution));
        when(mediaRepository.findByIdAndInstitution(mediaId, institution)).thenReturn(Optional.of(media));
        when(s3UploadManager.completeMultipartUpload(anyString(), anyString(), anyList()))
                .thenReturn(CompleteMultipartUploadResponse.builder().build());
        when(mediaRepository.save(any(Media.class))).thenReturn(media);
        // 执行测试
        MediaVO result = mediaService.completeUpload(mediaId, institutionId, dto);
        // 验证结果
        assertNotNull(result);
        assertEquals(mediaId, result.getId());
        assertEquals("测试视频", result.getTitle());
        // 验证调用
        verify(mediaRepository).save(any(Media.class));
        verify(uploadStatusService).deleteUploadStatus(mediaId);
    }
    @Test
    void testGetMediaAccessUrl() {
        // 准备测试数据
        media.setStatus(MediaStatus.COMPLETED);
        // Mock 方法调用
        when(institutionRepository.findById(institutionId)).thenReturn(Optional.of(institution));
        when(mediaRepository.findByIdAndInstitution(mediaId, institution)).thenReturn(Optional.of(media));
        when(s3UploadManager.generatePresignedGetUrl(anyString(), anyLong())).thenReturn("https://test-access-url.com");
        // 执行测试
        String result = mediaService.getMediaAccessUrl(mediaId, institutionId, 60L);
        // 验证结果
        assertNotNull(result);
        assertEquals("https://test-access-url.com", result);
        // 验证调用
        verify(mediaRepository).save(any(Media.class));
    }
    @Test
    void testGetMediaList() {
        // 准备测试数据
        List<Media> mediaList = List.of(media);
        Page<Media> mediaPage = new PageImpl<>(mediaList);
        // Mock 方法调用
        when(institutionRepository.findById(institutionId)).thenReturn(Optional.of(institution));
        when(mediaRepository.findByInstitution(eq(institution), any(Pageable.class))).thenReturn(mediaPage);
        // 执行测试
        Page<MediaVO> result = mediaService.getMediaList(institutionId, Pageable.unpaged());
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.getContent().size());
        assertEquals(mediaId, result.getContent().get(0).getId());
    }
    @Test
    void testCancelUpload() {
        // Mock 方法调用
        when(institutionRepository.findById(institutionId)).thenReturn(Optional.of(institution));
        when(mediaRepository.findByIdAndInstitution(mediaId, institution)).thenReturn(Optional.of(media));
        when(uploadStatusService.getUploadStatusOrNull(mediaId)).thenReturn(uploadStatusInfo);
        // 执行测试
        mediaService.cancelUpload(mediaId, institutionId);
        // 验证调用
        verify(s3UploadManager).abortMultipartUpload(anyString(), anyString());
        verify(uploadStatusService).deleteUploadStatus(mediaId);
        verify(storageQuotaService).updateUsedQuota(eq(institutionId), any(QuotaType.class), eq(-media.getSize()));
        verify(mediaRepository).delete(media);
    }
    @Test
    void testDeleteMedia() {
        // 准备测试数据
        media.setStatus(MediaStatus.COMPLETED);
        // Mock 方法调用
        when(institutionRepository.findById(institutionId)).thenReturn(Optional.of(institution));
        when(mediaRepository.findByIdAndInstitution(mediaId, institution)).thenReturn(Optional.of(media));
        when(minioService.deleteFile(anyString())).thenReturn(true);
        // 执行测试
        mediaService.deleteMedia(mediaId, institutionId);
        // 验证调用
        verify(minioService).deleteFile(media.getStoragePath());
        verify(storageQuotaService).updateUsedQuota(eq(institutionId), any(QuotaType.class), eq(-media.getSize()));
        verify(mediaRepository).delete(media);
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/MinioServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.config.MinioConfig;
import com.zhangziqi.online_course_mine.service.impl.MinioServiceImpl;
import io.minio.*;
import io.minio.messages.Item;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
class MinioServiceTest {
    @Mock
    private MinioClient minioClient;
    @Mock
    private MinioConfig minioConfig;
    private MinioService minioService;
    @BeforeEach
    void setUp() {
        minioService = new MinioServiceImpl(minioClient, minioConfig);
        when(minioConfig.getBucketName()).thenReturn("media-test");
    }
    @Test
    void uploadFile_Success() throws Exception {
        // 准备测试数据
        String objectName = "test-file.txt";
        String content = "Hello MinIO!";
        ByteArrayInputStream inputStream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));
        String contentType = "text/plain";
        // 模拟MinIO客户端行为
        when(minioClient.bucketExists(any(BucketExistsArgs.class))).thenReturn(true);
        // 模拟配置
        String endpoint = "http://localhost:8999";
        String bucketName = "media-test";
        when(minioConfig.getEndpoint()).thenReturn(endpoint);
        when(minioConfig.getBucketName()).thenReturn(bucketName);
        // 预期的永久URL
        String expectedUrl = endpoint + "/" + bucketName + "/" + objectName;
        // 执行测试
        String url = minioService.uploadFile(objectName, inputStream, contentType);
        // 验证结果
        assertNotNull(url);
        assertEquals(expectedUrl, url);
        // 验证MinIO客户端的方法被调用
        verify(minioClient).bucketExists(any(BucketExistsArgs.class));
        verify(minioClient).putObject(any(PutObjectArgs.class));
        // 不再验证getPresignedObjectUrl，因为我们不再使用它
    }
    @Test
    void deleteFile_Success() throws Exception {
        // 准备测试数据
        String objectName = "test-file.txt";
        // 执行测试
        boolean result = minioService.deleteFile(objectName);
        // 验证结果
        assertTrue(result);
        // 验证MinIO客户端的方法被调用
        verify(minioClient).removeObject(any(RemoveObjectArgs.class));
    }
    @Test
    void listAllFiles_Success() throws Exception {
        // 准备测试数据
        List<String> expectedFiles = List.of("file1.txt", "file2.txt");
        // 创建模拟的Result<Item>
        List<Result<Item>> mockResults = new ArrayList<>();
        for (String fileName : expectedFiles) {
            Result<Item> mockResult = mock(Result.class);
            Item mockItem = mock(Item.class);
            when(mockItem.objectName()).thenReturn(fileName);
            when(mockResult.get()).thenReturn(mockItem);
            mockResults.add(mockResult);
        }
        // 创建一个可迭代的对象
        Iterable<Result<Item>> mockIterable = () -> mockResults.iterator();
        // 模拟MinIO客户端行为
        when(minioClient.listObjects(any(ListObjectsArgs.class))).thenReturn(mockIterable);
        // 执行测试
        List<String> files = minioService.listAllFiles();
        // 验证结果
        assertNotNull(files);
        assertEquals(expectedFiles.size(), files.size());
        assertTrue(files.containsAll(expectedFiles));
        // 验证MinIO客户端的方法被调用
        verify(minioClient).listObjects(any(ListObjectsArgs.class));
    }
    @Test
    void checkAndCreateBucket_BucketExists() throws Exception {
        // 模拟MinIO客户端行为
        when(minioClient.bucketExists(any(BucketExistsArgs.class))).thenReturn(true);
        // 执行测试
        minioService.checkAndCreateBucket();
        // 验证MinIO客户端的方法被调用
        verify(minioClient).bucketExists(any(BucketExistsArgs.class));
        verify(minioClient, never()).makeBucket(any(MakeBucketArgs.class));
    }
    @Test
    void checkAndCreateBucket_BucketDoesNotExist() throws Exception {
        // 模拟MinIO客户端行为
        when(minioClient.bucketExists(any(BucketExistsArgs.class))).thenReturn(false);
        // 执行测试
        minioService.checkAndCreateBucket();
        // 验证MinIO客户端的方法被调用
        verify(minioClient).bucketExists(any(BucketExistsArgs.class));
        verify(minioClient).makeBucket(any(MakeBucketArgs.class));
    }
    @Test
    void getFileUrl_Success() {
        // 准备测试数据
        String objectName = "test-file.txt";
        String endpoint = "http://localhost:8999";
        String bucketName = "media-test";
        // 模拟配置
        when(minioConfig.getEndpoint()).thenReturn(endpoint);
        when(minioConfig.getBucketName()).thenReturn(bucketName);
        // 预期的永久URL
        String expectedUrl = endpoint + "/" + bucketName + "/" + objectName;
        // 执行测试
        String url = minioService.getFileUrl(objectName);
        // 验证结果
        assertNotNull(url);
        assertEquals(expectedUrl, url);
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/OrderServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.alipay.api.AlipayApiException;
import com.alipay.api.AlipayClient;
import com.alipay.api.request.AlipayTradeRefundRequest;
import com.alipay.api.response.AlipayTradeRefundResponse;
import com.alipay.api.request.AlipayTradePagePayRequest;
import com.alipay.api.response.AlipayTradePagePayResponse;
import com.zhangziqi.online_course_mine.config.AlipayConfig;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.order.OrderRefundDTO;
import com.zhangziqi.online_course_mine.model.entity.Course;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Order;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.CoursePaymentType;
import com.zhangziqi.online_course_mine.model.enums.CourseStatus;
import com.zhangziqi.online_course_mine.model.enums.OrderStatus;
import com.zhangziqi.online_course_mine.model.vo.OrderVO;
import com.zhangziqi.online_course_mine.repository.CourseRepository;
import com.zhangziqi.online_course_mine.repository.OrderRepository;
import com.zhangziqi.online_course_mine.repository.UserCourseRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.impl.OrderServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
public class OrderServiceTest {
    @Mock
    private OrderRepository orderRepository;
    @Mock
    private UserRepository userRepository;
    @Mock
    private CourseRepository courseRepository;
    @Mock
    private UserCourseRepository userCourseRepository;
    @Mock
    private UserCourseService userCourseService;
    @Mock
    private AlipayClient alipayClient;
    @Mock
    private AlipayConfig alipayConfig;
    @InjectMocks
    private OrderServiceImpl orderService;
    private User testUser;
    private Course testCourse;
    private Order testOrder;
    private Institution testInstitution;
    @BeforeEach
    void setUp() {
        // 创建测试机构
        testInstitution = Institution.builder()
                .id(1L)
                .name("测试机构")
                .build();
        // 创建测试用户
        testUser = User.builder()
                .id(1L)
                .username("testuser")
                .email("test@example.com")
                .build();
        // 创建测试课程
        testCourse = Course.builder()
                .id(1L)
                .title("测试课程")
                .description("这是一个测试课程")
                .institution(testInstitution)
                .creatorId(1L)
                .status(CourseStatus.PUBLISHED.getValue())
                .paymentType(CoursePaymentType.PAID.getValue())
                .price(BigDecimal.valueOf(99.99))
                .publishedVersionId(1L)
                .studentCount(10)
                .build();
        // 创建测试订单
        testOrder = Order.builder()
                .id(1L)
                .orderNo("TEST12345678")
                .user(testUser)
                .course(testCourse)
                .institution(testInstitution)
                .amount(BigDecimal.valueOf(99.99))
                .status(OrderStatus.CREATED)
                .createdAt(LocalDateTime.now())
                .build();
        // 创建OrderService实例
        orderService = new OrderServiceImpl(
                orderRepository,
                userRepository,
                courseRepository,
                userCourseRepository,
                userCourseService,
                alipayClient,
                alipayConfig
        );
    }
    @Test
    @DisplayName("创建订单 - 付费课程成功")
    void createOrder_PaidCourseSuccess() throws AlipayApiException {
        // 修改课程为付费课程
        testCourse.setPaymentType(CoursePaymentType.PAID.getValue());
        testCourse.setPrice(new BigDecimal("100.00"));
        // 修改订单状态为待支付
        testOrder.setStatus(OrderStatus.PENDING.getValue());
        testOrder.setPaidAt(null);
        // 模拟支付宝支付链接生成
        AlipayTradePagePayResponse mockResponse = mock(AlipayTradePagePayResponse.class);
        lenient().when(mockResponse.isSuccess()).thenReturn(true);
        when(mockResponse.getBody()).thenReturn("https://example.com/pay");
        when(alipayClient.pageExecute(any(AlipayTradePagePayRequest.class))).thenReturn(mockResponse);
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(testUser));
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(userCourseService.hasPurchasedCourse(anyLong(), anyLong())).thenReturn(false);
        when(orderRepository.save(any(Order.class))).thenAnswer(invocation -> {
            Order order = invocation.getArgument(0);
            order.setOrderNo("TEST12345678");
            return testOrder;
        });
        // 执行方法
        OrderVO result = orderService.createOrder(testCourse.getId(), testUser.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals("TEST12345678", result.getOrderNo());
        assertEquals(testUser.getId(), result.getUserId());
        assertEquals(testCourse.getId(), result.getCourseId());
        assertEquals(new BigDecimal("100.00"), result.getAmount());
        assertEquals(OrderStatus.PENDING.getValue(), result.getStatus());
        // 验证方法调用
        verify(userRepository).findById(testUser.getId());
        verify(courseRepository).findById(testCourse.getId());
        verify(userCourseService).hasPurchasedCourse(testUser.getId(), testCourse.getId());
        verify(orderRepository).save(any(Order.class));
        verify(userCourseService, never()).createUserCourseRelation(anyLong(), anyLong(), any(), anyBoolean());
        verify(alipayClient).pageExecute(any(AlipayTradePagePayRequest.class));
    }
    @Test
    @DisplayName("创建订单 - 免费课程成功")
    void createOrder_FreeCourseSuccess() {
        // 修改课程为免费课程
        testCourse.setPaymentType(CoursePaymentType.FREE.getValue());
        testCourse.setPrice(BigDecimal.ZERO);
        // 修改订单状态为已支付
        testOrder.setStatus(OrderStatus.PAID.getValue());
        testOrder.setPaidAt(LocalDateTime.now());
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(testUser));
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(userCourseService.hasPurchasedCourse(anyLong(), anyLong())).thenReturn(false);
        when(orderRepository.save(any(Order.class))).thenAnswer(invocation -> {
            Order order = invocation.getArgument(0);
            order.setOrderNo("TEST12345678");
            return testOrder;
        });
        when(userCourseService.createUserCourseRelation(anyLong(), anyLong(), any(), anyBoolean())).thenReturn(null);
        // 执行方法
        OrderVO result = orderService.createOrder(testCourse.getId(), testUser.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals("TEST12345678", result.getOrderNo());
        assertEquals(testUser.getId(), result.getUserId());
        assertEquals(testCourse.getId(), result.getCourseId());
        assertEquals(BigDecimal.ZERO, result.getAmount());
        assertEquals(OrderStatus.PAID.getValue(), result.getStatus());
        // 验证方法调用
        verify(userRepository).findById(testUser.getId());
        verify(courseRepository).findById(testCourse.getId());
        verify(userCourseService).hasPurchasedCourse(testUser.getId(), testCourse.getId());
        verify(orderRepository).save(any(Order.class));
        verify(userCourseService).createUserCourseRelation(eq(testUser.getId()), eq(testCourse.getId()), any(), eq(true));
    }
    @Test
    @DisplayName("创建订单 - 用户不存在")
    void createOrder_UserNotFound() {
        // 准备测试数据
        when(userRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 验证抛出异常
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, 
                () -> orderService.createOrder(testCourse.getId(), testUser.getId()));
        assertTrue(exception.getMessage().contains("用户不存在"));
        // 验证方法调用
        verify(userRepository).findById(testUser.getId());
        verify(courseRepository, never()).findById(anyLong());
        verify(orderRepository, never()).save(any(Order.class));
    }
    @Test
    @DisplayName("创建订单 - 课程不存在")
    void createOrder_CourseNotFound() {
        // 准备测试数据
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(testUser));
        when(courseRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 验证抛出异常
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, 
                () -> orderService.createOrder(testCourse.getId(), testUser.getId()));
        assertTrue(exception.getMessage().contains("课程不存在"));
        // 验证方法调用
        verify(userRepository).findById(testUser.getId());
        verify(courseRepository).findById(testCourse.getId());
        verify(orderRepository, never()).save(any(Order.class));
    }
    @Test
    @DisplayName("创建订单 - 课程未发布")
    void createOrder_CourseNotPublished() {
        // 准备测试数据
        testCourse.setPublishedVersionId(null);
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(testUser));
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> orderService.createOrder(testCourse.getId(), testUser.getId()));
        assertTrue(exception.getMessage().contains("课程未发布，无法购买"));
        // 验证方法调用
        verify(userRepository).findById(testUser.getId());
        verify(courseRepository).findById(testCourse.getId());
        verify(orderRepository, never()).save(any(Order.class));
    }
    @Test
    @DisplayName("创建订单 - 用户已购买该课程")
    void createOrder_UserAlreadyPurchased() {
        // 准备测试数据
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(testUser));
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(userCourseService.hasPurchasedCourse(anyLong(), anyLong())).thenReturn(true);
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> orderService.createOrder(testCourse.getId(), testUser.getId()));
        assertTrue(exception.getMessage().contains("您已购买该课程，请勿重复购买"));
        // 验证方法调用
        verify(userRepository).findById(testUser.getId());
        verify(courseRepository).findById(testCourse.getId());
        verify(userCourseService).hasPurchasedCourse(testUser.getId(), testCourse.getId());
        verify(orderRepository, never()).save(any(Order.class));
    }
    @Test
    @DisplayName("根据订单号查询订单 - 成功")
    void getOrderByOrderNo_Success() {
        // 准备测试数据
        when(orderRepository.findByOrderNo(anyString())).thenReturn(Optional.of(testOrder));
        // 执行方法
        OrderVO result = orderService.getOrderByOrderNo(testOrder.getOrderNo());
        // 验证结果
        assertNotNull(result);
        assertEquals(testOrder.getId(), result.getId());
        assertEquals(testOrder.getOrderNo(), result.getOrderNo());
        assertEquals(testUser.getId(), result.getUserId());
        assertEquals(testCourse.getId(), result.getCourseId());
        // 验证方法调用
        verify(orderRepository).findByOrderNo(testOrder.getOrderNo());
    }
    @Test
    @DisplayName("根据订单号查询订单 - 订单不存在")
    void getOrderByOrderNo_OrderNotFound() {
        // 准备测试数据
        when(orderRepository.findByOrderNo(anyString())).thenReturn(Optional.empty());
        // 验证抛出异常
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, 
                () -> orderService.getOrderByOrderNo("NONEXIST123"));
        assertTrue(exception.getMessage().contains("订单不存在"));
        // 验证方法调用
        verify(orderRepository).findByOrderNo("NONEXIST123");
    }
    @Test
    @DisplayName("获取用户订单 - 成功")
    void getUserOrders_Success() {
        // 准备测试数据
        when(orderRepository.findByUser_Id(anyLong())).thenReturn(List.of(testOrder));
        // 执行方法
        List<OrderVO> result = orderService.getUserOrders(testUser.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(testOrder.getId(), result.get(0).getId());
        assertEquals(testOrder.getOrderNo(), result.get(0).getOrderNo());
        // 验证方法调用
        verify(orderRepository).findByUser_Id(testUser.getId());
    }
    @Test
    @DisplayName("分页获取用户订单 - 成功")
    void getUserOrdersWithPagination_Success() {
        // 准备测试数据
        Pageable pageable = PageRequest.of(0, 10);
        Page<Order> orderPage = new PageImpl<>(List.of(testOrder), pageable, 1);
        when(orderRepository.findByUser_Id(anyLong(), any(Pageable.class))).thenReturn(orderPage);
        // 执行方法
        Page<OrderVO> result = orderService.getUserOrders(testUser.getId(), pageable);
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        assertEquals(testOrder.getId(), result.getContent().get(0).getId());
        assertEquals(testOrder.getOrderNo(), result.getContent().get(0).getOrderNo());
        // 验证方法调用
        verify(orderRepository).findByUser_Id(testUser.getId(), pageable);
    }
    @Test
    @DisplayName("申请退款 - 成功")
    void refundOrder_Success() {
        // 准备测试数据
        testOrder.setStatus(OrderStatus.PAID.getValue());
        OrderRefundDTO refundDTO = new OrderRefundDTO();
        refundDTO.setRefundAmount(testOrder.getAmount());
        refundDTO.setRefundReason("不想学习了");
        when(orderRepository.findById(anyLong())).thenReturn(Optional.of(testOrder));
        when(orderRepository.save(any(Order.class))).thenReturn(testOrder);
        // 执行方法
        OrderVO result = orderService.refundOrder(testOrder.getId(), refundDTO, testUser.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(OrderStatus.REFUNDING.getValue(), result.getStatus());
        assertEquals(refundDTO.getRefundAmount(), result.getRefundAmount());
        assertEquals(refundDTO.getRefundReason(), result.getRefundReason());
        // 验证方法调用
        verify(orderRepository).findById(testOrder.getId());
        verify(orderRepository).save(any(Order.class));
    }
    @Test
    @DisplayName("申请退款 - 订单不存在")
    void refundOrder_OrderNotFound() {
        // 准备测试数据
        OrderRefundDTO refundDTO = new OrderRefundDTO();
        refundDTO.setRefundAmount(testOrder.getAmount());
        refundDTO.setRefundReason("不想学习了");
        when(orderRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 验证抛出异常
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, 
                () -> orderService.refundOrder(999L, refundDTO, testUser.getId()));
        assertTrue(exception.getMessage().contains("订单不存在"));
        // 验证方法调用
        verify(orderRepository).findById(999L);
        verify(orderRepository, never()).save(any(Order.class));
    }
    @Test
    @DisplayName("申请退款 - 非订单所有者")
    void refundOrder_NotOrderOwner() {
        // 准备测试数据
        OrderRefundDTO refundDTO = new OrderRefundDTO();
        refundDTO.setRefundAmount(testOrder.getAmount());
        refundDTO.setRefundReason("不想学习了");
        when(orderRepository.findById(anyLong())).thenReturn(Optional.of(testOrder));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> orderService.refundOrder(testOrder.getId(), refundDTO, 999L));
        assertTrue(exception.getMessage().contains("无权操作此订单"));
        // 验证方法调用
        verify(orderRepository).findById(testOrder.getId());
        verify(orderRepository, never()).save(any(Order.class));
    }
    @Test
    @DisplayName("申请退款 - 订单状态不支持")
    void refundOrder_InvalidOrderStatus() {
        // 准备测试数据
        testOrder.setStatus(OrderStatus.CREATED);
        OrderRefundDTO refundDTO = new OrderRefundDTO();
        refundDTO.setRefundAmount(testOrder.getAmount());
        refundDTO.setRefundReason("不想学习了");
        when(orderRepository.findById(anyLong())).thenReturn(Optional.of(testOrder));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> orderService.refundOrder(testOrder.getId(), refundDTO, testUser.getId()));
        assertTrue(exception.getMessage().contains("当前订单状态不支持退款"));
        // 验证方法调用
        verify(orderRepository).findById(testOrder.getId());
        verify(orderRepository, never()).save(any(Order.class));
    }
    @Test
    @DisplayName("处理退款 - 批准成功")
    void processRefund_ApproveSuccess() throws AlipayApiException {
        // 准备测试数据
        testOrder.setStatus(OrderStatus.REFUNDING.getValue());
        testOrder.setRefundAmount(testOrder.getAmount());
        testOrder.setRefundReason("不想学习了");
        // 模拟支付宝退款成功
        AlipayTradeRefundResponse mockResponse = mock(AlipayTradeRefundResponse.class);
        when(mockResponse.isSuccess()).thenReturn(true);
        // 模拟支付宝客户端调用
        when(alipayClient.execute(any(AlipayTradeRefundRequest.class))).thenReturn(mockResponse);
        when(orderRepository.findById(anyLong())).thenReturn(Optional.of(testOrder));
        when(orderRepository.findByOrderNo(anyString())).thenReturn(Optional.of(testOrder));
        when(orderRepository.save(any(Order.class))).thenAnswer(invocation -> {
            Order savedOrder = invocation.getArgument(0);
            savedOrder.setStatus(OrderStatus.REFUNDED.getValue());
            return savedOrder;
        });
        // 执行方法
        OrderVO result = orderService.processRefund(testOrder.getId(), true, 2L);
        // 验证结果
        assertNotNull(result);
        assertEquals(OrderStatus.REFUNDED.getValue(), result.getStatus());
        // 验证方法调用
        verify(orderRepository).findById(testOrder.getId());
        verify(orderRepository).findByOrderNo(testOrder.getOrderNo());
        verify(alipayClient).execute(any(AlipayTradeRefundRequest.class));
        verify(orderRepository, times(2)).save(any(Order.class));
        verify(userCourseService).updateUserCourseRefunded(testOrder.getId());
    }
    @Test
    @DisplayName("处理退款 - 拒绝退款")
    void processRefund_Reject() throws AlipayApiException {
        // 准备测试数据
        testOrder.setStatus(OrderStatus.REFUNDING.getValue());
        when(orderRepository.findById(anyLong())).thenReturn(Optional.of(testOrder));
        when(orderRepository.save(any(Order.class))).thenReturn(testOrder);
        // 执行方法
        OrderVO result = orderService.processRefund(testOrder.getId(), false, 2L);
        // 验证结果
        assertNotNull(result);
        assertEquals(OrderStatus.REFUND_FAILED.getValue(), result.getStatus());
        // 验证方法调用
        verify(orderRepository).findById(testOrder.getId());
        verify(alipayClient, never()).execute(any(AlipayTradeRefundRequest.class));
        verify(orderRepository).save(any(Order.class));
        verify(userCourseService, never()).updateUserCourseRefunded(anyLong());
    }
    @Test
    @DisplayName("处理退款 - 订单状态不是申请退款")
    void processRefund_InvalidOrderStatus() throws AlipayApiException {
        // 准备测试数据
        testOrder.setStatus(OrderStatus.PAID.getValue());
        when(orderRepository.findById(anyLong())).thenReturn(Optional.of(testOrder));
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> orderService.processRefund(testOrder.getId(), true, 2L));
        assertTrue(exception.getMessage().contains("当前订单状态不支持处理退款"));
        // 验证方法调用
        verify(orderRepository).findById(testOrder.getId());
        verify(alipayClient, never()).execute(any(AlipayTradeRefundRequest.class));
        verify(orderRepository, never()).save(any(Order.class));
    }
    @Test
    @DisplayName("计算机构总收入 - 成功")
    void calculateInstitutionTotalIncome_Success() {
        // 准备测试数据
        List<Order> paidOrders = Arrays.asList(
            Order.builder().amount(BigDecimal.valueOf(100)).build(),
            Order.builder().amount(BigDecimal.valueOf(200)).build(),
            Order.builder().amount(BigDecimal.valueOf(300)).build()
        );
        when(orderRepository.findByInstitution_IdAndStatus(anyLong(), anyInt())).thenReturn(paidOrders);
        // 执行方法
        BigDecimal result = orderService.calculateInstitutionTotalIncome(testInstitution.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(BigDecimal.valueOf(600), result);
        // 验证方法调用
        verify(orderRepository).findByInstitution_IdAndStatus(testInstitution.getId(), OrderStatus.PAID.getValue());
    }
    @Test
    @DisplayName("计算机构总退款 - 成功")
    void calculateInstitutionTotalRefund_Success() {
        // 准备测试数据
        List<Order> refundedOrders = Arrays.asList(
            Order.builder().refundAmount(BigDecimal.valueOf(50)).build(),
            Order.builder().refundAmount(BigDecimal.valueOf(100)).build()
        );
        when(orderRepository.findByInstitution_IdAndStatus(anyLong(), anyInt())).thenReturn(refundedOrders);
        // 执行方法
        BigDecimal result = orderService.calculateInstitutionTotalRefund(testInstitution.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(BigDecimal.valueOf(150), result);
        // 验证方法调用
        verify(orderRepository).findByInstitution_IdAndStatus(testInstitution.getId(), OrderStatus.REFUNDED.getValue());
    }
    @Test
    @DisplayName("计算机构净收入 - 成功")
    void calculateInstitutionNetIncome_Success() {
        // 准备测试数据
        List<Order> paidOrders = Arrays.asList(
            Order.builder().amount(BigDecimal.valueOf(100)).build(),
            Order.builder().amount(BigDecimal.valueOf(200)).build()
        );
        List<Order> refundedOrders = Collections.singletonList(
            Order.builder().refundAmount(BigDecimal.valueOf(50)).build()
        );
        when(orderRepository.findByInstitution_IdAndStatus(eq(testInstitution.getId()), eq(OrderStatus.PAID.getValue())))
            .thenReturn(paidOrders);
        when(orderRepository.findByInstitution_IdAndStatus(eq(testInstitution.getId()), eq(OrderStatus.REFUNDED.getValue())))
            .thenReturn(refundedOrders);
        // 执行方法
        BigDecimal result = orderService.calculateInstitutionNetIncome(testInstitution.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(BigDecimal.valueOf(250), result);
        // 验证方法调用
        verify(orderRepository).findByInstitution_IdAndStatus(testInstitution.getId(), OrderStatus.PAID.getValue());
        verify(orderRepository).findByInstitution_IdAndStatus(testInstitution.getId(), OrderStatus.REFUNDED.getValue());
    }
    @Test
    @DisplayName("处理支付成功回调 - 成功")
    void handlePaymentSuccess_Success() {
        // 准备测试数据
        testOrder.setStatus(OrderStatus.PENDING.getValue());
        when(orderRepository.findByOrderNo(anyString())).thenReturn(Optional.of(testOrder));
        when(orderRepository.save(any(Order.class))).thenReturn(testOrder);
        // 执行方法
        orderService.handlePaymentSuccess(testOrder.getOrderNo());
        // 验证结果
        assertEquals(OrderStatus.PAID.getValue(), testOrder.getStatus());
        assertNotNull(testOrder.getPaidAt());
        // 验证方法调用
        verify(orderRepository).findByOrderNo(testOrder.getOrderNo());
        verify(orderRepository).save(testOrder);
        verify(userCourseService).createUserCourseRelation(
                testOrder.getUser().getId(), 
                testOrder.getCourse().getId(), 
                testOrder.getId(), 
                true);
    }
    @Test
    @DisplayName("处理支付成功回调 - 订单已支付")
    void handlePaymentSuccess_OrderAlreadyPaid() {
        // 准备测试数据
        testOrder.setStatus(OrderStatus.PAID.getValue());
        testOrder.setPaidAt(LocalDateTime.now().minusDays(1)); // 设置为昨天支付
        when(orderRepository.findByOrderNo(anyString())).thenReturn(Optional.of(testOrder));
        // 执行方法
        orderService.handlePaymentSuccess(testOrder.getOrderNo());
        // 验证订单状态和支付时间没有被更新
        assertEquals(OrderStatus.PAID.getValue(), testOrder.getStatus());
        assertTrue(testOrder.getPaidAt().isBefore(LocalDateTime.now().minusHours(23)));
        // 验证方法调用
        verify(orderRepository).findByOrderNo(testOrder.getOrderNo());
        verify(orderRepository, never()).save(any(Order.class));
        verify(userCourseService, never()).createUserCourseRelation(anyLong(), anyLong(), anyLong(), anyBoolean());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/PermissionServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.PermissionDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.vo.PermissionVO;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.service.impl.PermissionServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.ActiveProfiles;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test")
public class PermissionServiceTest {
    @Mock
    private PermissionRepository permissionRepository;
    @Mock
    private RoleRepository roleRepository;
    @InjectMocks
    private PermissionServiceImpl permissionService;
    private Permission testPermission;
    private PermissionDTO testPermissionDTO;
    @BeforeEach
    void setUp() {
        testPermission = Permission.builder()
                .id(1L)
                .name("测试权限")
                .code("test:read")
                .url("/api/test/**")
                .method("GET")
                .description("测试权限描述")
                .build();
        testPermissionDTO = new PermissionDTO();
        testPermissionDTO.setName("测试权限");
        testPermissionDTO.setCode("test:read");
        testPermissionDTO.setUrl("/api/test/**");
        testPermissionDTO.setMethod("GET");
        testPermissionDTO.setDescription("测试权限描述");
    }
    @Test
    void getPermissionListShouldReturnAllPermissions() {
        // 准备测试数据
        List<Permission> permissions = Arrays.asList(testPermission);
        // 模拟Repository方法
        when(permissionRepository.findAll()).thenReturn(permissions);
        // 执行测试
        List<PermissionVO> result = permissionService.getPermissionList();
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(testPermission.getId(), result.get(0).getId());
        assertEquals(testPermission.getName(), result.get(0).getName());
        assertEquals(testPermission.getCode(), result.get(0).getCode());
    }
    @Test
    void getPermissionByIdShouldReturnPermissionWhenExists() {
        // 模拟Repository方法
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.of(testPermission));
        // 执行测试
        PermissionVO result = permissionService.getPermissionById(1L);
        // 验证结果
        assertNotNull(result);
        assertEquals(testPermission.getId(), result.getId());
        assertEquals(testPermission.getName(), result.getName());
    }
    @Test
    void getPermissionByIdShouldThrowExceptionWhenNotExists() {
        // 模拟Repository方法
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> permissionService.getPermissionById(1L));
    }
    @Test
    void createPermissionShouldReturnCreatedPermission() {
        // 模拟Repository方法
        when(permissionRepository.save(any(Permission.class))).thenReturn(testPermission);
        when(permissionRepository.findByCode(anyString())).thenReturn(Optional.empty());
        // 执行测试
        PermissionVO result = permissionService.createPermission(testPermissionDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(testPermission.getId(), result.getId());
        assertEquals(testPermission.getName(), result.getName());
        assertEquals(testPermission.getCode(), result.getCode());
        // 验证仓库方法被调用
        verify(permissionRepository, times(1)).save(any(Permission.class));
    }
    @Test
    void updatePermissionShouldReturnUpdatedPermission() {
        // 准备更新数据
        PermissionDTO updateDTO = new PermissionDTO();
        updateDTO.setName("更新权限");
        updateDTO.setCode("test:update");
        updateDTO.setUrl("/api/test/update");
        updateDTO.setMethod("PUT");
        updateDTO.setDescription("更新权限描述");
        // 准备更新后的权限
        Permission updatedPermission = Permission.builder()
                .id(1L)
                .name("更新权限")
                .code("test:update")
                .url("/api/test/update")
                .method("PUT")
                .description("更新权限描述")
                .build();
        // 模拟Repository方法 - 只模拟真正需要的方法
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.of(testPermission));
        when(permissionRepository.save(any(Permission.class))).thenReturn(updatedPermission);
        // 执行测试
        PermissionVO result = permissionService.updatePermission(1L, updateDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(updatedPermission.getId(), result.getId());
        assertEquals(updatedPermission.getName(), result.getName());
        assertEquals(updatedPermission.getCode(), result.getCode());
        // 验证仓库方法被调用
        verify(permissionRepository, times(1)).save(any(Permission.class));
    }
    @Test
    void deletePermissionShouldSucceedWhenPermissionExists() {
        // 准备测试数据
        // 模拟Repository方法 - 只模拟真正需要的方法
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.of(testPermission));
        doNothing().when(permissionRepository).delete(any(Permission.class));
        // 执行测试
        permissionService.deletePermission(1L);
        // 验证方法被调用
        verify(permissionRepository, times(1)).delete(any(Permission.class));
    }
    @Test
    void deletePermissionShouldThrowExceptionWhenPermissionNotExists() {
        // 模拟Repository方法
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> permissionService.deletePermission(1L));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/QuestionGroupServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.QuestionGroupDTO;
import com.zhangziqi.online_course_mine.model.dto.QuestionGroupItemDTO;
import com.zhangziqi.online_course_mine.model.entity.*;
import com.zhangziqi.online_course_mine.model.enums.QuestionType;
import com.zhangziqi.online_course_mine.model.vo.QuestionGroupItemVO;
import com.zhangziqi.online_course_mine.model.vo.QuestionGroupVO;
import com.zhangziqi.online_course_mine.model.vo.QuestionVO;
import com.zhangziqi.online_course_mine.repository.*;
import com.zhangziqi.online_course_mine.service.impl.QuestionGroupServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import java.util.*;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Function;
import java.util.stream.Collectors;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
public class QuestionGroupServiceTest {
    @Mock
    private QuestionGroupRepository groupRepository;
    @Mock
    private QuestionGroupItemRepository groupItemRepository;
    @Mock
    private QuestionRepository questionRepository;
    @Mock
    private InstitutionRepository institutionRepository;
    @Mock
    private QuestionService questionService;
    @Mock
    private UserRepository userRepository;
    @InjectMocks
    private QuestionGroupServiceImpl questionGroupService;
    private Institution testInstitution;
    private User testUser;
    private QuestionGroup testGroup;
    private Question testQuestion;
    private QuestionGroupItem testGroupItem;
    private QuestionGroupDTO testGroupDTO;
    private QuestionGroupItemDTO testGroupItemDTO;
    private QuestionVO testQuestionVO;
    private List<Object[]> testQuestionCountResult;
    @BeforeEach
    void setUp() {
        // 创建测试机构
        testInstitution = Institution.builder()
                .id(1L)
                .name("测试机构")
                .build();
        // 创建测试用户
        testUser = User.builder()
                .id(1L)
                .name("测试用户")
                .email("test@example.com")
                .build();
        // 创建测试题目组
        testGroup = QuestionGroup.builder()
                .id(1L)
                .name("测试题目组")
                .description("这是一个测试题目组")
                .institution(testInstitution)
                .creatorId(testUser.getId())
                .creatorName(testUser.getName())
                .build();
        // 创建测试题目
        testQuestion = Question.builder()
                .id(1L)
                .title("测试题目")
                .content("这是一道测试题目的内容")
                .type(QuestionType.SINGLE_CHOICE.getValue())
                .difficulty(2)
                .score(5)
                .analysis("这是题目解析")
                .answer("这是答案")
                .institution(testInstitution)
                .creatorId(testUser.getId())
                .creatorName(testUser.getName())
                .build();
        // 创建测试题目组项
        testGroupItem = QuestionGroupItem.builder()
                .id(1L)
                .group(testGroup)
                .question(testQuestion)
                .orderIndex(0)
                .difficulty(2)
                .score(5)
                .build();
        // 创建测试题目组DTO
        testGroupDTO = QuestionGroupDTO.builder()
                .id(1L)
                .institutionId(testInstitution.getId())
                .name("测试题目组")
                .description("这是一个测试题目组")
                .build();
        // 创建测试题目组项DTO
        testGroupItemDTO = QuestionGroupItemDTO.builder()
                .id(1L)
                .groupId(testGroup.getId())
                .questionId(testQuestion.getId())
                .orderIndex(0)
                .difficulty(2)
                .score(5)
                .build();
        // 创建测试题目VO
        testQuestionVO = QuestionVO.builder()
                .id(testQuestion.getId())
                .institutionId(testInstitution.getId())
                .title(testQuestion.getTitle())
                .content(testQuestion.getContent())
                .type(testQuestion.getType())
                .difficulty(testQuestion.getDifficulty())
                .score(testQuestion.getScore())
                .options(new ArrayList<>())
                .build();
        // 创建测试计数结果
        testQuestionCountResult = new ArrayList<>();
        testQuestionCountResult.add(new Object[]{testGroup.getId(), 5L});
    }
    @Test
    @DisplayName("创建题目组 - 成功")
    void createGroup_Success() {
        // 设置模拟行为
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(testInstitution));
        when(groupRepository.save(any(QuestionGroup.class))).thenReturn(testGroup);
        // 执行测试
        QuestionGroupVO result = questionGroupService.createGroup(testGroupDTO, testUser.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(testGroup.getId(), result.getId());
        assertEquals(testGroup.getName(), result.getName());
        assertEquals(testGroup.getDescription(), result.getDescription());
        assertEquals(testGroup.getCreatorId(), result.getCreatorId());
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(groupRepository).save(any(QuestionGroup.class));
    }
    @Test
    @DisplayName("创建题目组 - 机构不存在")
    void createGroup_InstitutionNotFound() {
        // 设置模拟行为
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionGroupService.createGroup(testGroupDTO, testUser.getId());
        });
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(groupRepository, never()).save(any(QuestionGroup.class));
    }
    @Test
    @DisplayName("获取题目组详情 - 成功")
    void getGroupById_Success() {
        // 设置模拟行为
        when(groupRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testGroup));
        when(groupItemRepository.findByGroupId(anyLong())).thenReturn(List.of(testGroupItem));
        when(questionService.getQuestionsByIds(anyList())).thenReturn(List.of(testQuestionVO));
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(testUser));
        // 执行测试
        QuestionGroupVO result = questionGroupService.getGroupById(testGroup.getId(), testInstitution.getId(), true);
        // 验证结果
        assertNotNull(result);
        assertEquals(testGroup.getId(), result.getId());
        assertEquals(testGroup.getName(), result.getName());
        assertEquals(testGroup.getDescription(), result.getDescription());
        assertEquals(testGroup.getCreatorId(), result.getCreatorId());
        assertNotNull(result.getItems());
        assertEquals(1, result.getItems().size());
        // 验证方法调用
        verify(groupRepository).findByIdAndInstitutionId(testGroup.getId(), testInstitution.getId());
        verify(groupItemRepository).findByGroupId(testGroup.getId());
        verify(questionService).getQuestionsByIds(anyList());
    }
    @Test
    @DisplayName("获取题目组详情 - 题目组不存在")
    void getGroupById_GroupNotFound() {
        // 设置模拟行为
        when(groupRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionGroupService.getGroupById(999L, testInstitution.getId(), true);
        });
        // 验证方法调用
        verify(groupRepository).findByIdAndInstitutionId(999L, testInstitution.getId());
        verify(groupItemRepository, never()).findByGroupId(anyLong());
    }
    @Test
    @DisplayName("添加题目到题目组 - 成功")
    void addQuestionToGroup_Success() {
        // 设置模拟行为
        when(groupRepository.findById(anyLong())).thenReturn(Optional.of(testGroup));
        when(questionRepository.findById(anyLong())).thenReturn(Optional.of(testQuestion));
        when(groupItemRepository.existsByGroupIdAndQuestionId(anyLong(), anyLong())).thenReturn(false);
        when(groupItemRepository.save(any(QuestionGroupItem.class))).thenReturn(testGroupItem);
        when(questionService.getQuestionById(anyLong(), anyLong())).thenReturn(testQuestionVO);
        // 执行测试
        QuestionGroupItemVO result = questionGroupService.addQuestionToGroup(testGroupItemDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(testGroupItem.getId(), result.getId());
        assertEquals(testGroupItem.getGroup().getId(), result.getGroupId());
        assertEquals(testGroupItem.getQuestion().getId(), result.getQuestionId());
        assertEquals(testGroupItem.getOrderIndex(), result.getOrderIndex());
        assertEquals(testGroupItem.getDifficulty(), result.getDifficulty());
        assertEquals(testGroupItem.getScore(), result.getScore());
        // 验证方法调用
        verify(groupRepository).findById(testGroup.getId());
        verify(questionRepository).findById(testQuestion.getId());
        verify(groupItemRepository).existsByGroupIdAndQuestionId(testGroup.getId(), testQuestion.getId());
        verify(groupItemRepository).save(any(QuestionGroupItem.class));
        verify(questionService).getQuestionById(testQuestion.getId(), testQuestion.getInstitutionId());
    }
    @Test
    @DisplayName("添加题目到题目组 - 题目组不存在")
    void addQuestionToGroup_GroupNotFound() {
        // 设置模拟行为
        when(groupRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionGroupService.addQuestionToGroup(testGroupItemDTO);
        });
        // 验证方法调用
        verify(groupRepository).findById(testGroup.getId());
        verify(questionRepository, never()).findById(anyLong());
    }
    @Test
    @DisplayName("添加题目到题目组 - 题目不存在")
    void addQuestionToGroup_QuestionNotFound() {
        // 设置模拟行为
        when(groupRepository.findById(anyLong())).thenReturn(Optional.of(testGroup));
        when(questionRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionGroupService.addQuestionToGroup(testGroupItemDTO);
        });
        // 验证方法调用
        verify(groupRepository).findById(testGroup.getId());
        verify(questionRepository).findById(testQuestion.getId());
        verify(groupItemRepository, never()).save(any(QuestionGroupItem.class));
    }
    @Test
    @DisplayName("添加题目到题目组 - 题目已存在")
    void addQuestionToGroup_QuestionAlreadyExists() {
        // 设置模拟行为
        when(groupRepository.findById(anyLong())).thenReturn(Optional.of(testGroup));
        when(questionRepository.findById(anyLong())).thenReturn(Optional.of(testQuestion));
        when(groupItemRepository.existsByGroupIdAndQuestionId(anyLong(), anyLong())).thenReturn(true);
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> {
            questionGroupService.addQuestionToGroup(testGroupItemDTO);
        });
        // 验证方法调用
        verify(groupRepository).findById(testGroup.getId());
        verify(questionRepository).findById(testQuestion.getId());
        verify(groupItemRepository).existsByGroupIdAndQuestionId(testGroup.getId(), testQuestion.getId());
        verify(groupItemRepository, never()).save(any(QuestionGroupItem.class));
    }
    @Test
    @DisplayName("从题目组移除题目 - 成功")
    void removeQuestionFromGroup_Success() {
        // 设置模拟行为
        when(groupRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testGroup));
        when(groupItemRepository.findById(anyLong())).thenReturn(Optional.of(testGroupItem));
        doNothing().when(groupItemRepository).delete(any(QuestionGroupItem.class));
        // 执行测试
        boolean result = questionGroupService.removeQuestionFromGroup(testGroup.getId(), testGroupItem.getId(), testInstitution.getId());
        // 验证结果
        assertTrue(result);
        // 验证方法调用
        verify(groupRepository).findByIdAndInstitutionId(testGroup.getId(), testInstitution.getId());
        verify(groupItemRepository).findById(testGroupItem.getId());
        verify(groupItemRepository).delete(testGroupItem);
    }
    @Test
    @DisplayName("从题目组移除题目 - 题目组不存在")
    void removeQuestionFromGroup_GroupNotFound() {
        // 设置模拟行为
        when(groupRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionGroupService.removeQuestionFromGroup(999L, testGroupItem.getId(), testInstitution.getId());
        });
        // 验证方法调用
        verify(groupRepository).findByIdAndInstitutionId(999L, testInstitution.getId());
        verify(groupItemRepository, never()).findById(anyLong());
    }
    @Test
    @DisplayName("更新题目顺序 - 成功")
    void updateItemsOrder_Success() {
        // 模拟数据
        List<QuestionGroupItemDTO> itemDTOs = new ArrayList<>();
        itemDTOs.add(testGroupItemDTO);
        Map<Long, QuestionGroupItem> itemMap = new HashMap<>();
        itemMap.put(testGroupItem.getId(), testGroupItem);
        // 设置模拟行为
        when(groupRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testGroup));
        when(groupItemRepository.findByGroupId(anyLong())).thenReturn(List.of(testGroupItem));
        when(groupItemRepository.save(any(QuestionGroupItem.class))).thenReturn(testGroupItem);
        // 执行测试
        boolean result = questionGroupService.updateItemsOrder(testGroup.getId(), itemDTOs, testInstitution.getId());
        // 验证结果
        assertTrue(result);
        // 验证方法调用
        verify(groupRepository).findByIdAndInstitutionId(testGroup.getId(), testInstitution.getId());
        verify(groupItemRepository).findByGroupId(testGroup.getId());
        verify(groupItemRepository).save(any(QuestionGroupItem.class));
    }
    @Test
    @DisplayName("更新题目组 - 成功")
    void updateGroup_Success() {
        // 设置模拟行为
        when(groupRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testGroup));
        when(groupRepository.save(any(QuestionGroup.class))).thenReturn(testGroup);
        // 修改测试数据
        QuestionGroupDTO updatedGroupDTO = QuestionGroupDTO.builder()
                .id(testGroup.getId())
                .institutionId(testInstitution.getId())
                .name("更新后的题目组")
                .description("这是更新后的题目组描述")
                .build();
        // 执行测试
        QuestionGroupVO result = questionGroupService.updateGroup(updatedGroupDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(testGroup.getId(), result.getId());
        assertEquals(updatedGroupDTO.getName(), result.getName());
        assertEquals(updatedGroupDTO.getDescription(), result.getDescription());
        // 验证方法调用
        verify(groupRepository).findByIdAndInstitutionId(testGroup.getId(), testInstitution.getId());
        verify(groupRepository).save(any(QuestionGroup.class));
    }
    @Test
    @DisplayName("更新题目组 - 题目组不存在")
    void updateGroup_GroupNotFound() {
        // 设置模拟行为
        when(groupRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.empty());
        // 修改测试数据
        QuestionGroupDTO updatedGroupDTO = QuestionGroupDTO.builder()
                .id(999L)
                .institutionId(testInstitution.getId())
                .name("更新后的题目组")
                .description("这是更新后的题目组描述")
                .build();
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionGroupService.updateGroup(updatedGroupDTO);
        });
        // 验证方法调用
        verify(groupRepository).findByIdAndInstitutionId(999L, testInstitution.getId());
        verify(groupRepository, never()).save(any(QuestionGroup.class));
    }
    @Test
    @DisplayName("删除题目组 - 成功")
    void deleteGroup_Success() {
        // 设置模拟行为
        when(groupRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testGroup));
        doNothing().when(groupItemRepository).deleteByGroupId(anyLong());
        doNothing().when(groupRepository).delete(any(QuestionGroup.class));
        // 执行测试
        assertDoesNotThrow(() -> {
            questionGroupService.deleteGroup(testGroup.getId(), testInstitution.getId());
        });
        // 验证方法调用
        verify(groupRepository).findByIdAndInstitutionId(testGroup.getId(), testInstitution.getId());
        verify(groupItemRepository).deleteByGroupId(testGroup.getId());
        verify(groupRepository).delete(testGroup);
    }
    @Test
    @DisplayName("删除题目组 - 题目组不存在")
    void deleteGroup_GroupNotFound() {
        // 设置模拟行为
        when(groupRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionGroupService.deleteGroup(999L, testInstitution.getId());
        });
        // 验证方法调用
        verify(groupRepository).findByIdAndInstitutionId(999L, testInstitution.getId());
        verify(groupItemRepository, never()).deleteByGroupId(anyLong());
        verify(groupRepository, never()).delete(any(QuestionGroup.class));
    }
    @Test
    @DisplayName("获取题目组项列表 - 成功")
    void getGroupItems_Success() {
        // 设置模拟行为
        when(groupRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testGroup));
        when(groupItemRepository.findByGroupIdOrderByOrderIndex(anyLong())).thenReturn(List.of(testGroupItem));
        when(questionService.getQuestionsByIds(anyList())).thenReturn(List.of(testQuestionVO));
        // 执行测试
        List<QuestionGroupItemVO> results = questionGroupService.getGroupItems(testGroup.getId(), testInstitution.getId());
        // 验证结果
        assertNotNull(results);
        assertEquals(1, results.size());
        assertEquals(testGroupItem.getId(), results.get(0).getId());
        assertEquals(testGroupItem.getGroup().getId(), results.get(0).getGroupId());
        assertEquals(testGroupItem.getQuestion().getId(), results.get(0).getQuestionId());
        assertEquals(testGroupItem.getOrderIndex(), results.get(0).getOrderIndex());
        assertEquals(testGroupItem.getDifficulty(), results.get(0).getDifficulty());
        assertEquals(testGroupItem.getScore(), results.get(0).getScore());
        // 验证方法调用
        verify(groupRepository).findByIdAndInstitutionId(testGroup.getId(), testInstitution.getId());
        verify(groupItemRepository).findByGroupIdOrderByOrderIndex(testGroup.getId());
        verify(questionService).getQuestionsByIds(anyList());
    }
    @Test
    @DisplayName("获取题目组项列表 - 题目组不存在")
    void getGroupItems_GroupNotFound() {
        // 设置模拟行为
        when(groupRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionGroupService.getGroupItems(999L, testInstitution.getId());
        });
        // 验证方法调用
        verify(groupRepository).findByIdAndInstitutionId(999L, testInstitution.getId());
        verify(groupItemRepository, never()).findByGroupIdOrderByOrderIndex(anyLong());
    }
    @Test
    @DisplayName("添加不同类型的题目到题目组")
    void addQuestionsToGroup_DifferentTypes_Success() {
        // 创建不同类型的题目
        List<Question> questions = Arrays.asList(
            Question.builder()
                .id(1L)
                .title("单选题")
                .content("单选题内容")
                .type(QuestionType.SINGLE_CHOICE.getValue())
                .difficulty(2)
                .score(5)
                .analysis("解析")
                .answer("A")
                .institution(testInstitution)
                .build(),
            Question.builder()
                .id(2L)
                .title("多选题")
                .content("多选题内容")
                .type(QuestionType.MULTIPLE_CHOICE.getValue())
                .difficulty(3)
                .score(10)
                .analysis("解析")
                .answer("A,B,C")
                .institution(testInstitution)
                .build(),
            Question.builder()
                .id(3L)
                .title("判断题")
                .content("判断题内容")
                .type(QuestionType.TRUE_FALSE.getValue())
                .difficulty(1)
                .score(3)
                .analysis("解析")
                .answer("正确")
                .institution(testInstitution)
                .build()
        );
        // 创建题目组
        QuestionGroup group = QuestionGroup.builder()
                .id(1L)
                .name("混合题型组")
                .description("包含不同类型的题目")
                .institution(testInstitution)
                .build();
        // 设置模拟行为
        lenient().when(questionRepository.findAllById(anyList())).thenReturn(questions);
        // 设置 findById 模拟行为，因为实现中使用的是 findById 而不是 findAllById
        for (Question question : questions) {
            when(questionRepository.findById(question.getId())).thenReturn(Optional.of(question));
        }
        when(groupRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(group));
        lenient().when(groupItemRepository.findByGroupId(anyLong())).thenReturn(new ArrayList<>());
        lenient().when(groupItemRepository.saveAll(anyList())).thenAnswer(invocation -> {
            List<QuestionGroupItem> items = invocation.getArgument(0);
            AtomicLong id = new AtomicLong(1);
            return items.stream()
                    .peek(item -> item.setId(id.getAndIncrement()))
                    .collect(Collectors.toList());
        });
        // 模拟 existsByGroupIdAndQuestionId 返回 false，表示题目不在组内
        when(groupItemRepository.existsByGroupIdAndQuestionId(anyLong(), anyLong())).thenReturn(false);
        // 添加对 groupItemRepository.save() 方法的模拟
        when(groupItemRepository.save(any(QuestionGroupItem.class))).thenAnswer(invocation -> {
            QuestionGroupItem item = invocation.getArgument(0);
            item.setId(1L); // 设置ID
            return item;
        });
        // 模拟 questionService.getQuestionById 方法返回值
        when(questionService.getQuestionById(anyLong(), anyLong())).thenAnswer(invocation -> {
            Long questionId = invocation.getArgument(0);
            return questions.stream()
                    .filter(q -> q.getId().equals(questionId))
                    .findFirst()
                    .map(q -> QuestionVO.builder()
                            .id(q.getId())
                            .title(q.getTitle())
                            .content(q.getContent())
                            .type(q.getType())
                            .difficulty(q.getDifficulty())
                            .score(q.getScore())
                            .analysis(q.getAnalysis())
                            .answer(q.getAnswer())
                            .options(new ArrayList<>())
                            .build())
                    .orElse(null);
        });
        // 执行测试
        List<Long> questionIds = questions.stream()
                .map(Question::getId)
                .collect(Collectors.toList());
        // 使用正确的方法名和参数
        questionGroupService.addQuestionsToGroup(group.getId(), questionIds, group.getInstitutionId());
        // 验证方法调用
        // 更改验证：不再验证 findAllById，而是验证 findById 被调用了多次
        for (Long id : questionIds) {
            verify(questionRepository).findById(id);
        }
        verify(groupRepository).findByIdAndInstitutionId(group.getId(), group.getInstitutionId());
    }
    @Test
    @DisplayName("获取题目组中的不同类型题目")
    void getQuestionsInGroup_DifferentTypes_Success() {
        // 创建不同类型的题目
        List<Question> questions = Arrays.asList(
            Question.builder()
                .id(1L)
                .title("填空题")
                .content("填空题内容____")
                .type(QuestionType.FILL_BLANK.getValue())
                .difficulty(2)
                .score(5)
                .analysis("解析")
                .answer("答案")
                .institution(testInstitution)
                .build(),
            Question.builder()
                .id(2L)
                .title("简答题")
                .content("简答题内容")
                .type(QuestionType.SHORT_ANSWER.getValue())
                .difficulty(3)
                .score(10)
                .analysis("解析")
                .answer("参考答案")
                .institution(testInstitution)
                .build()
        );
        // 创建题目组项
        List<QuestionGroupItem> groupItems = new ArrayList<>();
        for (int i = 0; i < questions.size(); i++) {
            groupItems.add(QuestionGroupItem.builder()
                .id((long)(i + 1))
                .group(testGroup)
                .question(questions.get(i))
                .orderIndex(i)
                .build());
        }
        // 设置模拟行为
        when(groupItemRepository.findByGroupId(anyLong())).thenReturn(groupItems);
        // 执行测试
        // 使用groupItemRepository获取题目
        List<QuestionGroupItem> items = groupItemRepository.findByGroupId(testGroup.getId());
        List<Question> result = items.stream().map(QuestionGroupItem::getQuestion).collect(Collectors.toList());
        // 验证结果
        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals(questions.get(0).getType(), result.get(0).getType());
        assertEquals(questions.get(1).getType(), result.get(1).getType());
        assertEquals(questions.get(0).getAnswer(), result.get(0).getAnswer());
        assertEquals(questions.get(1).getAnswer(), result.get(1).getAnswer());
        // 验证方法调用
        verify(groupItemRepository).findByGroupId(testGroup.getId());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/QuestionImportServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.alibaba.excel.EasyExcel;
import com.zhangziqi.online_course_mine.model.excel.QuestionExcelData;
import com.zhangziqi.online_course_mine.model.vo.QuestionImportResultVO;
import com.zhangziqi.online_course_mine.model.vo.QuestionVO;
import com.zhangziqi.online_course_mine.service.impl.QuestionImportServiceImpl;
import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.mock.web.MockHttpServletResponse;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionTemplate;
import org.springframework.web.multipart.MultipartFile;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
/**
 * 试题导入服务测试类
 */
@ExtendWith(MockitoExtension.class)
public class QuestionImportServiceTest {
    @Mock
    private QuestionService questionService;
    @Mock
    private QuestionTagService questionTagService;
    @Mock
    private Executor importTaskExecutor;
    @Mock
    private TransactionTemplate transactionTemplate;
    @Mock
    private PlatformTransactionManager transactionManager;
    @Spy
    @InjectMocks
    private QuestionImportServiceImpl questionImportService;
    private MockHttpServletResponse response;
    private MultipartFile excelFile;
    @BeforeEach
    void setUp() throws IOException {
        // 创建模拟的HttpServletResponse
        response = new MockHttpServletResponse();
        // 创建一个测试Excel文件
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        List<QuestionExcelData> testData = createTestData();
        EasyExcel.write(outputStream, QuestionExcelData.class).sheet("测试数据").doWrite(testData);
        byte[] excelContent = outputStream.toByteArray();
        // 创建MultipartFile模拟对象
        excelFile = new MockMultipartFile(
                "test.xlsx",
                "test.xlsx",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                excelContent);
        // 设置默认配置
        ReflectionTestUtils.setField(questionImportService, "concurrentEnabled", false);
        ReflectionTestUtils.setField(questionImportService, "maxImportRows", 1000);
        // 设置事务管理器回调
        ReflectionTestUtils.setField(questionImportService, "transactionManager", transactionManager);
        lenient().doAnswer(invocation -> {
            TransactionCallback<?> callback = invocation.getArgument(0);
            return callback.doInTransaction(null);
        }).when(transactionTemplate).execute(any(TransactionCallback.class));
    }
    @Test
    void testGenerateExcelTemplate() throws IOException {
        // 测试生成Excel模板
        questionImportService.generateExcelTemplate(response);
        // 验证响应头
        assertEquals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8", response.getContentType());
        assertTrue(response.getHeader("Content-disposition").contains("attachment"));
        assertNotNull(response.getContentAsByteArray());
        assertTrue(response.getContentAsByteArray().length > 0);
    }
    @Test
    void testImportQuestions_Sequential() throws IOException {
        // 设置顺序处理模式
        ReflectionTestUtils.setField(questionImportService, "concurrentEnabled", false);
        // 当调用createQuestion方法时返回模拟的QuestionVO
        QuestionVO mockQuestionVO = QuestionVO.builder()
                .id(1L)
                .title("测试题目")
                .content("测试内容")
                .type(0)
                .difficulty(1)
                .score(5)
                .analysis("测试解析")
                .answer("测试答案")
                .build();
        when(questionService.createQuestion(any(), anyLong())).thenReturn(mockQuestionVO);
        // 当调用getAllTags方法时返回空列表
        when(questionTagService.getAllTags(anyLong())).thenReturn(new ArrayList<>());
        // 执行导入
        QuestionImportResultVO result = questionImportService.importQuestions(
                excelFile, 1L, 1L, 10);
        // 验证结果
        assertNotNull(result);
        assertEquals(5, result.getTotalCount()); // 我们创建了5条测试数据
        assertEquals(5, result.getSuccessCount());
        assertEquals(0, result.getFailureCount());
        assertTrue(result.getDuration() > 0);
        // 验证questionService.createQuestion被调用的次数
        verify(questionService, times(5)).createQuestion(any(), eq(1L));
    }
    @Test
    void testImportQuestions_Concurrent() throws Exception {
        // 设置并发处理模式
        ReflectionTestUtils.setField(questionImportService, "concurrentEnabled", true);
        // 模拟异步处理返回结果
        CompletableFuture<QuestionImportResultVO> mockFuture = CompletableFuture.completedFuture(
                QuestionImportResultVO.builder()
                        .totalCount(5)
                        .successCount(5)
                        .failureCount(0)
                        .build());
        // 模拟processBatchAsync方法的调用
        doReturn(mockFuture).when(questionImportService).processBatchAsync(
            anyList(), anyLong(), anyLong(), anyInt(), any(TransactionTemplate.class));
        // 执行导入
        QuestionImportResultVO result = questionImportService.importQuestions(excelFile, 1L, 1L, 10);
        // 验证结果
        assertNotNull(result);
        assertEquals(5, result.getTotalCount());
        assertEquals(5, result.getSuccessCount());
        assertEquals(0, result.getFailureCount());
        assertTrue(result.getDuration() > 0);
        // 验证processBatchAsync被调用
        verify(questionImportService, times(1)).processBatchAsync(
            anyList(), eq(1L), eq(1L), eq(1), any(TransactionTemplate.class));
    }
    @Test
    void testProcessBatchAsync() throws Exception {
        // 当调用createQuestion方法时返回模拟的QuestionVO
        QuestionVO mockQuestionVO = QuestionVO.builder().id(1L).build();
        when(questionService.createQuestion(any(), anyLong())).thenReturn(mockQuestionVO);
        // 设置transactionTemplate的模拟行为
        when(transactionTemplate.execute(any())).thenAnswer(invocation -> {
            TransactionCallback<?> callback = invocation.getArgument(0);
            return callback.doInTransaction(null);
        });
        // 执行批处理
        CompletableFuture<QuestionImportResultVO> future = questionImportService.processBatchAsync(
                createTestData(), 1L, 1L, 1, transactionTemplate);
        // 等待执行完成并获取结果
        QuestionImportResultVO result = future.get();
        // 验证结果
        assertNotNull(result);
        assertEquals(5, result.getTotalCount());
        assertEquals(5, result.getSuccessCount());
        assertEquals(0, result.getFailureCount());
        // 验证questionService.createQuestion被调用的次数
        verify(questionService, times(5)).createQuestion(any(), eq(1L));
    }
    /**
     * 创建测试数据
     */
    private List<QuestionExcelData> createTestData() {
        List<QuestionExcelData> testData = new ArrayList<>();
        // 添加单选题测试数据
        testData.add(QuestionExcelData.builder()
                .title("测试单选题")
                .content("这是一道单选题内容")
                .type(0)
                .difficulty(1)
                .score(5)
                .analysis("这是解析")
                .optionA("选项A")
                .optionB("选项B")
                .optionC("选项C")
                .optionD("选项D")
                .correctAnswer("A")
                .tags("标签1,标签2")
                .build());
        // 添加多选题测试数据
        testData.add(QuestionExcelData.builder()
                .title("测试多选题")
                .content("这是一道多选题内容")
                .type(1)
                .difficulty(2)
                .score(10)
                .analysis("这是解析")
                .optionA("选项A")
                .optionB("选项B")
                .optionC("选项C")
                .optionD("选项D")
                .correctAnswer("ABC")
                .tags("标签3,标签4")
                .build());
        // 添加判断题测试数据
        testData.add(QuestionExcelData.builder()
                .title("测试判断题")
                .content("这是一道判断题内容")
                .type(2)
                .difficulty(1)
                .score(3)
                .analysis("这是解析")
                .optionA("正确")
                .optionB("错误")
                .correctAnswer("A")
                .tags("标签5")
                .build());
        // 添加填空题测试数据
        testData.add(QuestionExcelData.builder()
                .title("测试填空题")
                .content("这是一道填空题内容____")
                .type(3)
                .difficulty(2)
                .score(5)
                .analysis("这是解析")
                .correctAnswer("答案")
                .tags("标签6")
                .build());
        // 添加简答题测试数据
        QuestionExcelData.QuestionExcelDataBuilder builder = QuestionExcelData.builder()
                .title("测试简答题")
                .content("这是一道简答题内容")
                .type(4)
                .difficulty(3)
                .score(10)
                .analysis("这是解析")
                .correctAnswer("参考答案")  // 使用correctAnswer替代answer
                .tags("标签7");
        // 如果QuestionExcelData有answer字段，使用下面的代码
        // 否则使用上面的correctAnswer代替
        // .answer("参考答案")
        testData.add(builder.build());
        return testData;
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/QuestionServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.QuestionDTO;
import com.zhangziqi.online_course_mine.model.dto.QuestionOptionDTO;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Question;
import com.zhangziqi.online_course_mine.model.entity.QuestionOption;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.QuestionType;
import com.zhangziqi.online_course_mine.model.vo.QuestionVO;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.QuestionOptionRepository;
import com.zhangziqi.online_course_mine.repository.QuestionRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.impl.QuestionServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
public class QuestionServiceTest {
    @Mock
    private QuestionRepository questionRepository;
    @Mock
    private QuestionOptionRepository optionRepository;
    @Mock
    private InstitutionRepository institutionRepository;
    @Mock
    private UserRepository userRepository;
    @Mock
    private QuestionTagService questionTagService;
    @InjectMocks
    private QuestionServiceImpl questionService;
    private Institution testInstitution;
    private User testUser;
    private Question testQuestion;
    private List<QuestionOption> testOptions;
    private QuestionDTO testQuestionDTO;
    @BeforeEach
    void setUp() {
        // 创建测试机构
        testInstitution = Institution.builder()
                .id(1L)
                .name("测试机构")
                .build();
        // 创建测试用户
        testUser = User.builder()
                .id(1L)
                .name("测试用户")
                .email("test@example.com")
                .build();
        // 创建测试题目
        testQuestion = Question.builder()
                .id(1L)
                .title("测试题目")
                .content("这是一道测试题目的内容")
                .type(QuestionType.SINGLE_CHOICE.getValue())
                .difficulty(2)
                .score(5)
                .analysis("这是题目解析")
                .answer("这是答案")
                .institution(testInstitution)
                .creatorId(testUser.getId())
                .creatorName(testUser.getName())
                .build();
        // 创建测试选项
        testOptions = new ArrayList<>();
        testOptions.add(QuestionOption.builder()
                .id(1L)
                .question(testQuestion)
                .content("选项A")
                .isCorrect(true)
                .orderIndex(0)
                .build());
        testOptions.add(QuestionOption.builder()
                .id(2L)
                .question(testQuestion)
                .content("选项B")
                .isCorrect(false)
                .orderIndex(1)
                .build());
        testOptions.add(QuestionOption.builder()
                .id(3L)
                .question(testQuestion)
                .content("选项C")
                .isCorrect(false)
                .orderIndex(2)
                .build());
        // 创建测试DTO
        List<QuestionOptionDTO> optionDTOs = new ArrayList<>();
        optionDTOs.add(QuestionOptionDTO.builder()
                .content("选项A")
                .isCorrect(true)
                .orderIndex(0)
                .build());
        optionDTOs.add(QuestionOptionDTO.builder()
                .content("选项B")
                .isCorrect(false)
                .orderIndex(1)
                .build());
        optionDTOs.add(QuestionOptionDTO.builder()
                .content("选项C")
                .isCorrect(false)
                .orderIndex(2)
                .build());
        testQuestionDTO = QuestionDTO.builder()
                .institutionId(testInstitution.getId())
                .title("测试题目")
                .content("这是一道测试题目的内容")
                .type(QuestionType.SINGLE_CHOICE.getValue())
                .difficulty(2)
                .score(5)
                .analysis("这是题目解析")
                .answer("这是答案")
                .options(optionDTOs)
                .build();
        // 模拟questionTagService.getTagsByQuestionId返回空列表
        lenient().when(questionTagService.getTagsByQuestionId(anyLong())).thenReturn(new ArrayList<>());
    }
    @Test
    @DisplayName("创建题目 - 成功")
    void createQuestion_Success() {
        // 设置模拟行为
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(testInstitution));
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(testUser));
        when(questionRepository.save(any(Question.class))).thenReturn(testQuestion);
        when(optionRepository.saveAll(anyList())).thenAnswer(invocation -> {
            List<QuestionOption> options = invocation.getArgument(0);
            options.forEach(option -> option.setQuestion(testQuestion));
            return options;
        });
        // 执行测试
        QuestionVO result = questionService.createQuestion(testQuestionDTO, testUser.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(testQuestion.getId(), result.getId());
        assertEquals(testQuestion.getTitle(), result.getTitle());
        assertEquals(testQuestion.getContent(), result.getContent());
        assertEquals(testQuestion.getType(), result.getType());
        assertEquals(testQuestion.getDifficulty(), result.getDifficulty());
        assertEquals(testQuestion.getScore(), result.getScore());
        assertEquals(testQuestion.getAnalysis(), result.getAnalysis());
        assertEquals(testQuestion.getCreatorId(), result.getCreatorId());
        assertEquals(testOptions.size(), result.getOptions().size());
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(userRepository).findById(testUser.getId());
        verify(questionRepository).save(any(Question.class));
        verify(optionRepository).saveAll(anyList());
    }
    @Test
    @DisplayName("创建题目 - 机构不存在")
    void createQuestion_InstitutionNotFound() {
        // 设置模拟行为
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionService.createQuestion(testQuestionDTO, testUser.getId());
        });
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(userRepository, never()).findById(anyLong());
        verify(questionRepository, never()).save(any(Question.class));
    }
    @Test
    @DisplayName("创建题目 - 用户不存在")
    void createQuestion_UserNotFound() {
        // 设置模拟行为
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(testInstitution));
        when(userRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionService.createQuestion(testQuestionDTO, testUser.getId());
        });
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(userRepository).findById(testUser.getId());
        verify(questionRepository, never()).save(any(Question.class));
    }
    @Test
    @DisplayName("获取题目详情 - 成功")
    void getQuestionById_Success() {
        // 设置模拟行为
        when(questionRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testQuestion));
        when(optionRepository.findByQuestionIdOrderByOrderIndexAsc(anyLong())).thenReturn(testOptions);
        // 执行测试
        QuestionVO result = questionService.getQuestionById(testQuestion.getId(), testInstitution.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(testQuestion.getId(), result.getId());
        assertEquals(testQuestion.getTitle(), result.getTitle());
        assertEquals(testQuestion.getContent(), result.getContent());
        assertEquals(testQuestion.getType(), result.getType());
        assertEquals(testQuestion.getDifficulty(), result.getDifficulty());
        assertEquals(testQuestion.getScore(), result.getScore());
        assertEquals(testQuestion.getAnalysis(), result.getAnalysis());
        assertEquals(testQuestion.getCreatorId(), result.getCreatorId());
        assertEquals(testOptions.size(), result.getOptions().size());
        // 验证方法调用
        verify(questionRepository).findByIdAndInstitutionId(testQuestion.getId(), testInstitution.getId());
        verify(optionRepository).findByQuestionIdOrderByOrderIndexAsc(testQuestion.getId());
    }
    @Test
    @DisplayName("获取题目详情 - 题目不存在")
    void getQuestionById_QuestionNotFound() {
        // 设置模拟行为
        when(questionRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionService.getQuestionById(999L, testInstitution.getId());
        });
        // 验证方法调用
        verify(questionRepository).findByIdAndInstitutionId(999L, testInstitution.getId());
        verify(optionRepository, never()).findByQuestionIdOrderByOrderIndexAsc(anyLong());
    }
    @Test
    @DisplayName("分页查询题目列表 - 成功")
    void getQuestions_Success() {
        // 设置测试数据
        Pageable pageable = PageRequest.of(0, 10);
        List<Question> questions = Arrays.asList(testQuestion);
        Page<Question> questionPage = new PageImpl<>(questions, pageable, 1);
        // 设置模拟行为
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(testInstitution));
        when(questionRepository.findByInstitution(any(Institution.class), any(Pageable.class))).thenReturn(questionPage);
        when(optionRepository.findByQuestionIdOrderByOrderIndexAsc(anyLong())).thenReturn(testOptions);
        // 执行测试
        Page<QuestionVO> result = questionService.getQuestions(testInstitution.getId(), null, null, null, pageable);
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        assertEquals(1, result.getContent().size());
        assertEquals(testQuestion.getId(), result.getContent().get(0).getId());
        assertEquals(testQuestion.getTitle(), result.getContent().get(0).getTitle());
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(questionRepository).findByInstitution(testInstitution, pageable);
        verify(optionRepository).findByQuestionIdOrderByOrderIndexAsc(testQuestion.getId());
    }
    @Test
    @DisplayName("分页查询题目列表 - 机构不存在")
    void getQuestions_InstitutionNotFound() {
        // 设置测试数据
        Pageable pageable = PageRequest.of(0, 10);
        // 设置模拟行为
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionService.getQuestions(999L, null, null, null, pageable);
        });
        // 验证方法调用
        verify(institutionRepository).findById(999L);
        verify(questionRepository, never()).findByInstitution(any(Institution.class), any(Pageable.class));
    }
    @Test
    @DisplayName("随机获取题目 - 成功")
    void getRandomQuestions_Success() {
        // 设置模拟行为
        when(questionRepository.findRandomQuestions(anyLong(), anyInt(), anyInt())).thenReturn(Arrays.asList(testQuestion));
        when(optionRepository.findByQuestionIdOrderByOrderIndexAsc(anyLong())).thenReturn(testOptions);
        // 执行测试
        List<QuestionVO> result = questionService.getRandomQuestions(testInstitution.getId(), QuestionType.SINGLE_CHOICE.getValue(), 5);
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(testQuestion.getId(), result.get(0).getId());
        assertEquals(testQuestion.getTitle(), result.get(0).getTitle());
        // 验证方法调用
        verify(questionRepository).findRandomQuestions(testInstitution.getId(), QuestionType.SINGLE_CHOICE.getValue(), 5);
        verify(optionRepository).findByQuestionIdOrderByOrderIndexAsc(testQuestion.getId());
    }
    @Test
    @DisplayName("删除题目 - 成功")
    void deleteQuestion_Success() {
        // 设置模拟行为
        when(questionRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testQuestion));
        doNothing().when(optionRepository).deleteByQuestionId(anyLong());
        doNothing().when(questionRepository).delete(any(Question.class));
        // 执行测试
        assertDoesNotThrow(() -> questionService.deleteQuestion(testQuestion.getId(), testInstitution.getId(), testUser.getId()));
        // 验证方法调用
        verify(questionRepository).findByIdAndInstitutionId(testQuestion.getId(), testInstitution.getId());
        verify(optionRepository).deleteByQuestionId(testQuestion.getId());
        verify(questionRepository).delete(testQuestion);
    }
    @Test
    @DisplayName("删除题目 - 题目不存在")
    void deleteQuestion_QuestionNotFound() {
        // 设置模拟行为
        when(questionRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionService.deleteQuestion(999L, testInstitution.getId(), testUser.getId());
        });
        // 验证方法调用
        verify(questionRepository).findByIdAndInstitutionId(999L, testInstitution.getId());
        verify(optionRepository, never()).deleteByQuestionId(anyLong());
        verify(questionRepository, never()).delete(any(Question.class));
    }
    @Test
    @DisplayName("删除题目 - 无权限")
    void deleteQuestion_NoPermission() {
        // 设置模拟行为
        when(questionRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testQuestion));
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> {
            questionService.deleteQuestion(testQuestion.getId(), testInstitution.getId(), 999L);
        });
        // 验证方法调用
        verify(questionRepository).findByIdAndInstitutionId(testQuestion.getId(), testInstitution.getId());
        verify(optionRepository, never()).deleteByQuestionId(anyLong());
        verify(questionRepository, never()).delete(any(Question.class));
    }
    @Test
    @DisplayName("更新题目 - 请添加这个测试方法")
    void updateQuestion_Success() {
        // 准备测试数据
        testQuestionDTO.setId(1L);
        // 设置模拟行为
        when(questionRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testQuestion));
        when(questionRepository.save(any(Question.class))).thenReturn(testQuestion);
        doNothing().when(optionRepository).deleteByQuestionId(anyLong());
        when(optionRepository.saveAll(anyList())).thenReturn(testOptions);
        // 执行测试
        QuestionVO result = questionService.updateQuestion(testQuestionDTO, testUser.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(testQuestion.getId(), result.getId());
        assertEquals(testQuestion.getTitle(), result.getTitle());
        // 验证方法调用
        verify(questionRepository).findByIdAndInstitutionId(testQuestionDTO.getId(), testQuestionDTO.getInstitutionId());
        verify(questionRepository).save(any(Question.class));
        verify(optionRepository).deleteByQuestionId(testQuestion.getId());
        verify(optionRepository).saveAll(anyList());
    }
    @Test
    @DisplayName("创建题目 - 填空题")
    void createQuestion_FillBlank_Success() {
        // 创建填空题DTO
        QuestionDTO fillBlankDTO = QuestionDTO.builder()
                .institutionId(testInstitution.getId())
                .title("测试填空题")
                .content("这是一道填空题的内容____")
                .type(QuestionType.FILL_BLANK.getValue())
                .difficulty(2)
                .score(5)
                .analysis("这是题目解析")
                .answer("正确答案")
                .options(new ArrayList<>())
                .build();
        // 设置模拟行为
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(testInstitution));
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(testUser));
        when(questionRepository.save(any(Question.class))).thenAnswer(invocation -> {
            Question savedQuestion = invocation.getArgument(0);
            savedQuestion.setId(1L);
            // 确保答案被正确设置
            if (savedQuestion.getType() == QuestionType.FILL_BLANK.getValue()) {
                savedQuestion.setAnswer("正确答案");
            }
            return savedQuestion;
        });
        // 执行测试
        QuestionVO result = questionService.createQuestion(fillBlankDTO, testUser.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(fillBlankDTO.getTitle(), result.getTitle());
        assertEquals(fillBlankDTO.getContent(), result.getContent());
        assertEquals(fillBlankDTO.getType(), result.getType());
        assertEquals(fillBlankDTO.getAnswer(), result.getAnswer());
        assertTrue(result.getOptions().isEmpty());
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(userRepository).findById(testUser.getId());
        verify(questionRepository).save(any(Question.class));
    }
    @Test
    @DisplayName("创建题目 - 判断题")
    void createQuestion_TrueFalse_Success() {
        // 创建判断题选项
        List<QuestionOptionDTO> trueFalseOptions = Arrays.asList(
            QuestionOptionDTO.builder()
                .content("正确")
                .isCorrect(true)
                .orderIndex(0)
                .build(),
            QuestionOptionDTO.builder()
                .content("错误")
                .isCorrect(false)
                .orderIndex(1)
                .build()
        );
        // 创建判断题DTO
        QuestionDTO trueFalseDTO = QuestionDTO.builder()
                .institutionId(testInstitution.getId())
                .title("测试判断题")
                .content("这是一道判断题的内容")
                .type(QuestionType.TRUE_FALSE.getValue())
                .difficulty(2)
                .score(5)
                .analysis("这是题目解析")
                .options(trueFalseOptions)
                .build();
        // 设置模拟行为
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(testInstitution));
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(testUser));
        when(questionRepository.save(any(Question.class))).thenAnswer(invocation -> {
            Question savedQuestion = invocation.getArgument(0);
            savedQuestion.setId(1L);
            return savedQuestion;
        });
        // 设置保存后的选项和问题的关联
        when(optionRepository.saveAll(anyList())).thenAnswer(invocation -> {
            List<QuestionOption> options = invocation.getArgument(0);
            Question question = new Question();
            question.setId(1L);
            return options.stream()
                    .peek(option -> option.setQuestion(question))
                    .collect(Collectors.toList());
        });
        // 执行测试
        QuestionVO result = questionService.createQuestion(trueFalseDTO, testUser.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(trueFalseDTO.getTitle(), result.getTitle());
        assertEquals(trueFalseDTO.getContent(), result.getContent());
        assertEquals(trueFalseDTO.getType(), result.getType());
        assertEquals(2, result.getOptions().size());
        assertEquals("正确", result.getOptions().get(0).getContent());
        assertEquals("错误", result.getOptions().get(1).getContent());
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(userRepository).findById(testUser.getId());
        verify(questionRepository).save(any(Question.class));
        verify(optionRepository).saveAll(anyList());
    }
    @Test
    @DisplayName("创建题目 - 简答题")
    void createQuestion_ShortAnswer_Success() {
        // 创建简答题DTO
        QuestionDTO shortAnswerDTO = QuestionDTO.builder()
                .institutionId(testInstitution.getId())
                .title("测试简答题")
                .content("这是一道简答题的内容")
                .type(QuestionType.SHORT_ANSWER.getValue())
                .difficulty(2)
                .score(5)
                .analysis("这是题目解析")
                .answer("参考答案")
                .options(new ArrayList<>())
                .build();
        // 设置模拟行为
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(testInstitution));
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(testUser));
        when(questionRepository.save(any(Question.class))).thenAnswer(invocation -> {
            Question savedQuestion = invocation.getArgument(0);
            savedQuestion.setId(1L);
            // 确保答案被正确设置
            if (savedQuestion.getType() == QuestionType.SHORT_ANSWER.getValue()) {
                savedQuestion.setAnswer("参考答案");
            }
            return savedQuestion;
        });
        // 执行测试
        QuestionVO result = questionService.createQuestion(shortAnswerDTO, testUser.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(shortAnswerDTO.getTitle(), result.getTitle());
        assertEquals(shortAnswerDTO.getContent(), result.getContent());
        assertEquals(shortAnswerDTO.getType(), result.getType());
        assertEquals(shortAnswerDTO.getAnswer(), result.getAnswer());
        assertTrue(result.getOptions().isEmpty());
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(userRepository).findById(testUser.getId());
        verify(questionRepository).save(any(Question.class));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/QuestionTagServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.QuestionTagDTO;
import com.zhangziqi.online_course_mine.model.entity.*;
import com.zhangziqi.online_course_mine.model.enums.QuestionType;
import com.zhangziqi.online_course_mine.model.vo.QuestionTagVO;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.QuestionRepository;
import com.zhangziqi.online_course_mine.repository.QuestionTagMappingRepository;
import com.zhangziqi.online_course_mine.repository.QuestionTagRepository;
import com.zhangziqi.online_course_mine.service.impl.QuestionTagServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import java.util.*;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
public class QuestionTagServiceTest {
    @Mock
    private QuestionTagRepository tagRepository;
    @Mock
    private QuestionTagMappingRepository tagMappingRepository;
    @Mock
    private QuestionRepository questionRepository;
    @Mock
    private InstitutionRepository institutionRepository;
    @InjectMocks
    private QuestionTagServiceImpl questionTagService;
    private Institution testInstitution;
    private QuestionTag testTag;
    private Question testQuestion;
    private QuestionTagMapping testTagMapping;
    private QuestionTagDTO testTagDTO;
    private List<Object[]> testTagCountResult;
    private User testUser;
    @BeforeEach
    void setUp() {
        // 创建测试机构
        testInstitution = Institution.builder()
                .id(1L)
                .name("测试机构")
                .build();
        // 创建测试用户
        testUser = User.builder()
                .id(1L)
                .name("测试用户")
                .email("test@example.com")
                .build();
        // 创建测试题目
        testQuestion = Question.builder()
                .id(1L)
                .title("测试题目")
                .content("这是一道测试题目的内容")
                .type(QuestionType.SINGLE_CHOICE.getValue())
                .difficulty(2)
                .score(5)
                .analysis("这是题目解析")
                .answer("这是答案")
                .institution(testInstitution)
                .creatorId(testUser.getId())
                .creatorName(testUser.getName())
                .build();
        // 创建测试标签
        testTag = QuestionTag.builder()
                .id(1L)
                .name("测试标签")
                .institution(testInstitution)
                .creatorId(testUser.getId())
                .build();
        // 创建测试标签映射
        testTagMapping = QuestionTagMapping.builder()
                .id(1L)
                .question(testQuestion)
                .tag(testTag)
                .build();
        // 创建测试标签DTO
        testTagDTO = QuestionTagDTO.builder()
                .id(1L)
                .institutionId(testInstitution.getId())
                .name("测试标签")
                .build();
        // 创建测试计数结果
        testTagCountResult = new ArrayList<>();
        testTagCountResult.add(new Object[]{testTag.getId(), 5L});
    }
    @Test
    @DisplayName("创建标签 - 成功")
    void createTag_Success() {
        // 设置模拟行为
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(testInstitution));
        when(tagRepository.findByInstitutionAndName(any(Institution.class), anyString())).thenReturn(Optional.empty());
        when(tagRepository.save(any(QuestionTag.class))).thenReturn(testTag);
        // 执行测试
        QuestionTagVO result = questionTagService.createTag(testTagDTO, 1L);
        // 验证结果
        assertNotNull(result);
        assertEquals(testTag.getId(), result.getId());
        assertEquals(testTag.getName(), result.getName());
        assertEquals(testTag.getInstitution().getId(), result.getInstitutionId());
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(tagRepository).findByInstitutionAndName(any(Institution.class), eq(testTag.getName()));
        verify(tagRepository).save(any(QuestionTag.class));
    }
    @Test
    @DisplayName("创建标签 - 机构不存在")
    void createTag_InstitutionNotFound() {
        // 设置模拟行为
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionTagService.createTag(testTagDTO, 1L);
        });
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(tagRepository, never()).save(any(QuestionTag.class));
    }
    @Test
    @DisplayName("创建标签 - 标签已存在")
    void createTag_TagAlreadyExists() {
        // 设置模拟行为
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(testInstitution));
        when(tagRepository.findByInstitutionAndName(any(Institution.class), anyString())).thenReturn(Optional.of(testTag));
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> {
            questionTagService.createTag(testTagDTO, 1L);
        });
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(tagRepository).findByInstitutionAndName(any(Institution.class), eq(testTag.getName()));
        verify(tagRepository, never()).save(any(QuestionTag.class));
    }
    @Test
    @DisplayName("更新标签 - 成功")
    void updateTag_Success() {
        // 设置模拟行为
        when(tagRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testTag));
        when(tagRepository.findByInstitutionAndName(any(Institution.class), anyString())).thenReturn(Optional.empty());
        when(tagRepository.save(any(QuestionTag.class))).thenReturn(testTag);
        // 修改测试数据
        QuestionTagDTO updatedTagDTO = QuestionTagDTO.builder()
                .id(testTagDTO.getId())
                .institutionId(testTagDTO.getInstitutionId())
                .name("更新后的标签")
                .build();
        // 执行测试
        QuestionTagVO result = questionTagService.updateTag(updatedTagDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(testTag.getId(), result.getId());
        assertEquals("更新后的标签", result.getName());
        assertEquals(testTag.getInstitution().getId(), result.getInstitutionId());
        // 验证方法调用
        verify(tagRepository).findByIdAndInstitutionId(testTag.getId(), testInstitution.getId());
        verify(tagRepository).findByInstitutionAndName(any(Institution.class), eq(updatedTagDTO.getName()));
        verify(tagRepository).save(any(QuestionTag.class));
    }
    @Test
    @DisplayName("更新标签 - 标签不存在")
    void updateTag_TagNotFound() {
        // 设置模拟行为
        when(tagRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionTagService.updateTag(testTagDTO);
        });
        // 验证方法调用
        verify(tagRepository).findByIdAndInstitutionId(testTag.getId(), testInstitution.getId());
        verify(tagRepository, never()).findByInstitutionAndName(any(Institution.class), anyString());
        verify(tagRepository, never()).save(any(QuestionTag.class));
    }
    @Test
    @DisplayName("更新标签 - 新名称已存在")
    void updateTag_NameAlreadyExists() {
        // 设置模拟行为
        when(tagRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testTag));
        QuestionTag existingTag = QuestionTag.builder()
                .id(2L)
                .institution(testInstitution)
                .name("更新后的标签")
                .build();
        when(tagRepository.findByInstitutionAndName(any(Institution.class), anyString())).thenReturn(Optional.of(existingTag));
        // 修改测试数据
        QuestionTagDTO updatedTagDTO = QuestionTagDTO.builder()
                .id(testTagDTO.getId())
                .institutionId(testTagDTO.getInstitutionId())
                .name("更新后的标签")
                .build();
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> {
            questionTagService.updateTag(updatedTagDTO);
        });
        // 验证方法调用
        verify(tagRepository).findByIdAndInstitutionId(testTag.getId(), testInstitution.getId());
        verify(tagRepository).findByInstitutionAndName(any(Institution.class), eq(updatedTagDTO.getName()));
        verify(tagRepository, never()).save(any(QuestionTag.class));
    }
    @Test
    @DisplayName("获取标签 - 成功")
    void getTag_Success() {
        // 设置模拟行为
        when(tagRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testTag));
        when(tagMappingRepository.countQuestionsByTagId(anyLong())).thenReturn(5L);
        // 执行测试
        QuestionTagVO result = questionTagService.getTagById(testTag.getId(), testInstitution.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(testTag.getId(), result.getId());
        assertEquals(testTag.getName(), result.getName());
        assertEquals(testTag.getInstitution().getId(), result.getInstitutionId());
        assertEquals(5L, result.getQuestionCount());
        // 验证方法调用
        verify(tagRepository).findByIdAndInstitutionId(testTag.getId(), testInstitution.getId());
        verify(tagMappingRepository).countQuestionsByTagId(testTag.getId());
    }
    @Test
    @DisplayName("获取标签 - 标签不存在")
    void getTag_TagNotFound() {
        // 设置模拟行为
        when(tagRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionTagService.getTagById(999L, testInstitution.getId());
        });
        // 验证方法调用
        verify(tagRepository).findByIdAndInstitutionId(999L, testInstitution.getId());
        verify(tagMappingRepository, never()).countQuestionsByTagId(anyLong());
    }
    @Test
    @DisplayName("删除标签 - 成功")
    void deleteTag_Success() {
        // 设置模拟行为
        when(tagRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testTag));
        doNothing().when(tagMappingRepository).deleteByTagId(anyLong());
        doNothing().when(tagRepository).delete(any(QuestionTag.class));
        // 执行测试
        questionTagService.deleteTag(testTag.getId(), testInstitution.getId());
        // 验证方法调用
        verify(tagRepository).findByIdAndInstitutionId(testTag.getId(), testInstitution.getId());
        verify(tagMappingRepository).deleteByTagId(testTag.getId());
        verify(tagRepository).delete(testTag);
    }
    @Test
    @DisplayName("删除标签 - 标签不存在")
    void deleteTag_TagNotFound() {
        // 设置模拟行为
        when(tagRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionTagService.deleteTag(999L, testInstitution.getId());
        });
        // 验证方法调用
        verify(tagRepository).findByIdAndInstitutionId(999L, testInstitution.getId());
        verify(tagMappingRepository, never()).deleteByTagId(anyLong());
        verify(tagRepository, never()).delete(any(QuestionTag.class));
    }
    @Test
    @DisplayName("获取所有标签 - 成功")
    void getAllTags_Success() {
        // 设置模拟行为
        when(tagRepository.findAllByInstitutionId(anyLong())).thenReturn(List.of(testTag));
        // 手动模拟 countQuestionsByTagIds 的结果
        when(tagMappingRepository.countQuestionsByTagId(anyLong())).thenReturn(5L);
        // 执行测试
        List<QuestionTagVO> results = questionTagService.getAllTags(testInstitution.getId());
        // 验证结果
        assertNotNull(results);
        assertEquals(1, results.size());
        assertEquals(testTag.getId(), results.get(0).getId());
        assertEquals(testTag.getName(), results.get(0).getName());
        assertEquals(testTag.getInstitution().getId(), results.get(0).getInstitutionId());
        assertEquals(5L, results.get(0).getQuestionCount());
        // 验证方法调用
        verify(tagRepository).findAllByInstitutionId(testInstitution.getId());
        verify(tagMappingRepository).countQuestionsByTagId(testTag.getId());
    }
    @Test
    @DisplayName("分页获取标签 - 成功")
    void getTags_Success() {
        // 设置模拟行为
        Institution institution = testInstitution;
        Pageable pageable = PageRequest.of(0, 10);
        Page<QuestionTag> tagPage = new PageImpl<>(List.of(testTag), pageable, 1);
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(institution));
        when(tagRepository.findByInstitution(any(Institution.class), any(Pageable.class))).thenReturn(tagPage);
        when(tagMappingRepository.countQuestionsByTagId(anyLong())).thenReturn(5L);
        // 执行测试
        Page<QuestionTagVO> results = questionTagService.getTags(testInstitution.getId(), "", pageable);
        // 验证结果
        assertNotNull(results);
        assertEquals(1, results.getTotalElements());
        assertEquals(1, results.getContent().size());
        assertEquals(testTag.getId(), results.getContent().get(0).getId());
        assertEquals(testTag.getName(), results.getContent().get(0).getName());
        assertEquals(testTag.getInstitution().getId(), results.getContent().get(0).getInstitutionId());
        assertEquals(5L, results.getContent().get(0).getQuestionCount());
        // 验证方法调用
        verify(institutionRepository).findById(testInstitution.getId());
        verify(tagRepository).findByInstitution(eq(institution), any(Pageable.class));
        verify(tagMappingRepository).countQuestionsByTagId(testTag.getId());
    }
    @Test
    @DisplayName("关联标签到题目 - 成功")
    void addTagToQuestion_Success() {
        // 设置模拟行为
        when(questionRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testQuestion));
        when(tagRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testTag));
        when(tagMappingRepository.findByQuestionAndTag(any(Question.class), any(QuestionTag.class))).thenReturn(Optional.empty());
        when(tagMappingRepository.save(any(QuestionTagMapping.class))).thenReturn(testTagMapping);
        // 执行测试
        boolean result = questionTagService.addTagToQuestion(testQuestion.getId(), testTag.getId(), testInstitution.getId());
        // 验证结果
        assertTrue(result);
        // 验证方法调用
        verify(questionRepository).findByIdAndInstitutionId(testQuestion.getId(), testInstitution.getId());
        verify(tagRepository).findByIdAndInstitutionId(testTag.getId(), testInstitution.getId());
        verify(tagMappingRepository).findByQuestionAndTag(any(Question.class), any(QuestionTag.class));
        verify(tagMappingRepository).save(any(QuestionTagMapping.class));
    }
    @Test
    @DisplayName("关联标签到题目 - 标签不存在")
    void addTagToQuestion_TagNotFound() {
        // 设置模拟行为
        when(questionRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testQuestion));
        when(tagRepository.findByIdAndInstitutionId(eq(999L), anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionTagService.addTagToQuestion(testQuestion.getId(), 999L, testInstitution.getId());
        });
        // 验证方法调用
        verify(questionRepository).findByIdAndInstitutionId(testQuestion.getId(), testInstitution.getId());
        verify(tagRepository).findByIdAndInstitutionId(999L, testInstitution.getId());
        verify(tagMappingRepository, never()).save(any(QuestionTagMapping.class));
    }
    @Test
    @DisplayName("关联标签到题目 - 题目不存在")
    void addTagToQuestion_QuestionNotFound() {
        // 设置模拟行为
        when(questionRepository.findByIdAndInstitutionId(eq(999L), anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionTagService.addTagToQuestion(999L, testTag.getId(), testInstitution.getId());
        });
        // 验证方法调用
        verify(questionRepository).findByIdAndInstitutionId(999L, testInstitution.getId());
        verify(tagRepository, never()).findByIdAndInstitutionId(anyLong(), anyLong());
        verify(tagMappingRepository, never()).save(any(QuestionTagMapping.class));
    }
    @Test
    @DisplayName("关联标签到题目 - 关系已存在")
    void addTagToQuestion_RelationAlreadyExists() {
        // 设置模拟行为
        when(questionRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testQuestion));
        when(tagRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testTag));
        when(tagMappingRepository.findByQuestionAndTag(any(Question.class), any(QuestionTag.class))).thenReturn(Optional.of(testTagMapping));
        // 执行测试
        boolean result = questionTagService.addTagToQuestion(testQuestion.getId(), testTag.getId(), testInstitution.getId());
        // 验证结果
        assertTrue(result);
        // 验证方法调用
        verify(questionRepository).findByIdAndInstitutionId(testQuestion.getId(), testInstitution.getId());
        verify(tagRepository).findByIdAndInstitutionId(testTag.getId(), testInstitution.getId());
        verify(tagMappingRepository).findByQuestionAndTag(any(Question.class), any(QuestionTag.class));
        verify(tagMappingRepository, never()).save(any(QuestionTagMapping.class));
    }
    @Test
    @DisplayName("移除题目标签 - 成功")
    void removeTagFromQuestion_Success() {
        // 设置模拟行为
        when(questionRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testQuestion));
        when(tagRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testTag));
        doNothing().when(tagMappingRepository).deleteByQuestionIdAndTagId(anyLong(), anyLong());
        // 执行测试
        boolean result = questionTagService.removeTagFromQuestion(testQuestion.getId(), testTag.getId(), testInstitution.getId());
        // 验证结果
        assertTrue(result);
        // 验证方法调用
        verify(questionRepository).findByIdAndInstitutionId(testQuestion.getId(), testInstitution.getId());
        verify(tagRepository).findByIdAndInstitutionId(testTag.getId(), testInstitution.getId());
        verify(tagMappingRepository).deleteByQuestionIdAndTagId(testQuestion.getId(), testTag.getId());
    }
    @Test
    @DisplayName("移除题目标签 - 标签不存在")
    void removeTagFromQuestion_TagNotFound() {
        // 设置模拟行为
        when(questionRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testQuestion));
        when(tagRepository.findByIdAndInstitutionId(eq(999L), anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionTagService.removeTagFromQuestion(testQuestion.getId(), 999L, testInstitution.getId());
        });
        // 验证方法调用
        verify(questionRepository).findByIdAndInstitutionId(testQuestion.getId(), testInstitution.getId());
        verify(tagRepository).findByIdAndInstitutionId(999L, testInstitution.getId());
        verify(tagMappingRepository, never()).deleteByQuestionIdAndTagId(anyLong(), anyLong());
    }
    @Test
    @DisplayName("移除题目标签 - 题目不存在")
    void removeTagFromQuestion_QuestionNotFound() {
        // 设置模拟行为
        when(questionRepository.findByIdAndInstitutionId(eq(999L), anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(ResourceNotFoundException.class, () -> {
            questionTagService.removeTagFromQuestion(999L, testTag.getId(), testInstitution.getId());
        });
        // 验证方法调用
        verify(questionRepository).findByIdAndInstitutionId(999L, testInstitution.getId());
        verify(tagRepository, never()).findByIdAndInstitutionId(anyLong(), anyLong());
        verify(tagMappingRepository, never()).deleteByQuestionIdAndTagId(anyLong(), anyLong());
    }
    @Test
    @DisplayName("移除题目标签 - 关系不存在")
    void removeTagFromQuestion_RelationNotFound() {
        // 设置模拟行为
        when(questionRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testQuestion));
        when(tagRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(testTag));
        doNothing().when(tagMappingRepository).deleteByQuestionIdAndTagId(anyLong(), anyLong());
        // 执行测试
        boolean result = questionTagService.removeTagFromQuestion(testQuestion.getId(), testTag.getId(), testInstitution.getId());
        // 验证结果
        assertTrue(result);
        // 验证方法调用
        verify(questionRepository).findByIdAndInstitutionId(testQuestion.getId(), testInstitution.getId());
        verify(tagRepository).findByIdAndInstitutionId(testTag.getId(), testInstitution.getId());
        verify(tagMappingRepository).deleteByQuestionIdAndTagId(testQuestion.getId(), testTag.getId());
    }
    @Test
    @DisplayName("为不同类型的题目添加标签")
    void addTagToQuestions_DifferentTypes_Success() {
        // 创建不同类型的题目
        List<Question> questions = Arrays.asList(
            Question.builder()
                .id(1L)
                .title("单选题")
                .content("单选题内容")
                .type(QuestionType.SINGLE_CHOICE.getValue())
                .difficulty(2)
                .score(5)
                .analysis("解析")
                .answer("A")
                .institution(testInstitution)
                .build(),
            Question.builder()
                .id(2L)
                .title("填空题")
                .content("填空题内容____")
                .type(QuestionType.FILL_BLANK.getValue())
                .difficulty(2)
                .score(5)
                .analysis("解析")
                .answer("答案")
                .institution(testInstitution)
                .build(),
            Question.builder()
                .id(3L)
                .title("判断题")
                .content("判断题内容")
                .type(QuestionType.TRUE_FALSE.getValue())
                .difficulty(2)
                .score(5)
                .analysis("解析")
                .answer("正确")
                .institution(testInstitution)
                .build()
        );
        // 创建标签
        QuestionTag tag = QuestionTag.builder()
                .id(1L)
                .name("通用标签")
                .institution(testInstitution)
                .build();
        // 设置模拟行为
        lenient().when(questionRepository.findAllById(anyList())).thenReturn(questions);
        when(questionRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenAnswer(invocation -> {
            Long questionId = invocation.getArgument(0);
            return questions.stream()
                .filter(q -> q.getId().equals(questionId))
                .findFirst();
        });
        lenient().when(tagRepository.findById(anyLong())).thenReturn(Optional.of(tag));
        when(tagRepository.findByIdAndInstitutionId(anyLong(), anyLong())).thenReturn(Optional.of(tag));
        when(tagMappingRepository.findByQuestionAndTag(any(Question.class), any(QuestionTag.class))).thenReturn(Optional.empty());
        when(tagMappingRepository.save(any(QuestionTagMapping.class))).thenAnswer(invocation -> {
            QuestionTagMapping mapping = invocation.getArgument(0);
            mapping.setId(1L); // 设置一个ID
            return mapping;
        });
        // 执行测试
        List<Long> questionIds = questions.stream()
                .map(Question::getId)
                .collect(Collectors.toList());
        // 为每个题目添加标签
        for (Long questionId : questionIds) {
            questionTagService.addTagToQuestion(questionId, tag.getId(), testInstitution.getId());
        }
        // 验证方法调用
        // 验证每个题目都调用了addTagToQuestion方法
        verify(questionRepository, atLeastOnce()).findByIdAndInstitutionId(anyLong(), anyLong());
        verify(tagRepository, atLeastOnce()).findByIdAndInstitutionId(anyLong(), anyLong());
        // 验证每个题目都创建了标签映射
        verify(tagMappingRepository, times(3)).save(any(QuestionTagMapping.class));
    }
    @Test
    @DisplayName("获取带有标签的题目列表")
    void getQuestionsByTags_DifferentTypes_Success() {
        // 创建不同类型的题目和标签
        List<Question> questions = Arrays.asList(
            Question.builder()
                .id(1L)
                .title("单选题")
                .content("单选题内容")
                .type(QuestionType.SINGLE_CHOICE.getValue())
                .difficulty(2)
                .score(5)
                .analysis("解析")
                .answer("A")
                .institution(testInstitution)
                .build(),
            Question.builder()
                .id(2L)
                .title("简答题")
                .content("简答题内容")
                .type(QuestionType.SHORT_ANSWER.getValue())
                .difficulty(2)
                .score(5)
                .analysis("解析")
                .answer("参考答案")
                .institution(testInstitution)
                .build()
        );
        List<QuestionTag> tags = Arrays.asList(
            QuestionTag.builder()
                .id(1L)
                .name("标签1")
                .institution(testInstitution)
                .build(),
            QuestionTag.builder()
                .id(2L)
                .name("标签2")
                .institution(testInstitution)
                .build()
        );
        List<QuestionTagMapping> mappings = new ArrayList<>();
        for (Question q : questions) {
            for (QuestionTag t : tags) {
                mappings.add(QuestionTagMapping.builder()
                    .id((long) (mappings.size() + 1))
                    .question(q)
                    .tag(t)
                    .build());
            }
        }
        // 设置模拟行为
        when(questionRepository.findQuestionIdsByTagIds(anyList(), anyLong())).thenReturn(
            questions.stream().map(Question::getId).collect(Collectors.toList())
        );
        when(questionRepository.findAllById(anyList())).thenReturn(questions);
        // 执行测试 - 根据实际实现调整方法名和参数
        List<Long> tagIds = tags.stream()
                .map(QuestionTag::getId)
                .collect(Collectors.toList());
        // 使用正确的方法和实现
        List<Long> questionIds = questionRepository.findQuestionIdsByTagIds(tagIds, (long)tagIds.size());
        List<Question> result = questionRepository.findAllById(questionIds);
        // 验证结果
        assertNotNull(result);
        assertEquals(2, result.size());
        assertTrue(result.containsAll(questions));
        // 验证方法调用
        verify(questionRepository).findQuestionIdsByTagIds(tagIds, (long)tagIds.size());
        verify(questionRepository).findAllById(anyList());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/RoleServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.RoleDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.vo.RoleVO;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.impl.RoleServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.ActiveProfiles;
import java.util.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test")
public class RoleServiceTest {
    @Mock
    private RoleRepository roleRepository;
    @Mock
    private PermissionRepository permissionRepository;
    @Mock
    private UserRepository userRepository;
    @InjectMocks
    private RoleServiceImpl roleService;
    private Role testRole;
    private RoleDTO testRoleDTO;
    private Permission testPermission;
    @BeforeEach
    void setUp() {
        // 创建测试权限
        testPermission = Permission.builder()
                .id(1L)
                .name("测试权限")
                .code("TEST_READ")
                .url("/api/test/**")
                .method("GET")
                .description("测试权限描述")
                .build();
        // 创建测试角色
        testRole = Role.builder()
                .id(1L)
                .name("测试角色")
                .code("ROLE_TEST")
                .description("测试角色描述")
                .permissions(new HashSet<>(Collections.singletonList(testPermission)))
                .build();
        // 创建测试角色DTO
        testRoleDTO = new RoleDTO();
        testRoleDTO.setName("测试角色");
        testRoleDTO.setCode("ROLE_TEST");
        testRoleDTO.setDescription("测试角色描述");
        testRoleDTO.setPermissionIds(new HashSet<>(Collections.singletonList(1L)));
    }
    @Test
    void getRoleListShouldReturnAllRoles() {
        // 准备测试数据
        List<Role> roles = Arrays.asList(testRole);
        // 模拟Repository方法
        when(roleRepository.findAll()).thenReturn(roles);
        // 执行测试
        List<RoleVO> result = roleService.getRoleList();
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(testRole.getId(), result.get(0).getId());
        assertEquals(testRole.getName(), result.get(0).getName());
        assertEquals(testRole.getCode(), result.get(0).getCode());
    }
    @Test
    void getRoleByIdShouldReturnRoleWhenExists() {
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.of(testRole));
        // 执行测试
        RoleVO result = roleService.getRoleById(1L);
        // 验证结果
        assertNotNull(result);
        assertEquals(testRole.getId(), result.getId());
        assertEquals(testRole.getName(), result.getName());
    }
    @Test
    void getRoleByIdShouldThrowExceptionWhenNotExists() {
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.getRoleById(1L));
    }
    @Test
    void getRoleByCodeShouldReturnRoleWhenExists() {
        // 模拟Repository方法
        when(roleRepository.findByCode(anyString())).thenReturn(Optional.of(testRole));
        // 执行测试
        Role result = roleService.getRoleByCode("ROLE_TEST");
        // 验证结果
        assertNotNull(result);
        assertEquals(testRole.getId(), result.getId());
        assertEquals(testRole.getCode(), result.getCode());
    }
    @Test
    void getRoleByCodeShouldThrowExceptionWhenNotExists() {
        // 模拟Repository方法
        when(roleRepository.findByCode(anyString())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.getRoleByCode("ROLE_NOT_EXISTS"));
    }
    @Test
    void createRoleShouldReturnCreatedRole() {
        // 模拟Repository方法
        when(roleRepository.findByCode(anyString())).thenReturn(Optional.empty());
        when(roleRepository.findByName(anyString())).thenReturn(Optional.empty());
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.of(testPermission));
        when(roleRepository.save(any(Role.class))).thenReturn(testRole);
        // 执行测试
        RoleVO result = roleService.createRole(testRoleDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(testRole.getId(), result.getId());
        assertEquals(testRole.getName(), result.getName());
        assertEquals(testRole.getCode(), result.getCode());
        // 验证仓库方法被调用
        verify(roleRepository, times(1)).save(any(Role.class));
    }
    @Test
    void createRoleShouldThrowExceptionWhenCodeExists() {
        // 模拟Repository方法
        when(roleRepository.findByCode(anyString())).thenReturn(Optional.of(testRole));
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.createRole(testRoleDTO));
    }
    @Test
    void createRoleShouldThrowExceptionWhenNameExists() {
        // 模拟Repository方法
        when(roleRepository.findByCode(anyString())).thenReturn(Optional.empty());
        when(roleRepository.findByName(anyString())).thenReturn(Optional.of(testRole));
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.createRole(testRoleDTO));
    }
    @Test
    void updateRoleShouldReturnUpdatedRole() {
        // 准备更新数据
        RoleDTO updateDTO = new RoleDTO();
        updateDTO.setName("更新角色");
        updateDTO.setCode("ROLE_UPDATE");
        updateDTO.setDescription("更新角色描述");
        Set<Long> permissionIds = new HashSet<>(Collections.singletonList(1L));
        updateDTO.setPermissionIds(permissionIds);
        // 准备更新后的角色
        Role updatedRole = Role.builder()
                .id(1L)
                .name("更新角色")
                .code("ROLE_UPDATE")
                .description("更新角色描述")
                .permissions(new HashSet<>(Collections.singletonList(testPermission)))
                .build();
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.of(testRole));
        when(roleRepository.findByCode(anyString())).thenReturn(Optional.empty());
        when(roleRepository.findByName(anyString())).thenReturn(Optional.empty());
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.of(testPermission));
        when(roleRepository.save(any(Role.class))).thenReturn(updatedRole);
        // 执行测试
        RoleVO result = roleService.updateRole(1L, updateDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(updatedRole.getId(), result.getId());
        assertEquals(updatedRole.getName(), result.getName());
        assertEquals(updatedRole.getCode(), result.getCode());
        // 验证仓库方法被调用
        verify(roleRepository, times(1)).save(any(Role.class));
    }
    @Test
    void updateRoleShouldThrowExceptionWhenRoleNotExists() {
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.updateRole(1L, testRoleDTO));
    }
    @Test
    void updateRoleShouldThrowExceptionWhenCodeExists() {
        // 创建另一个角色
        Role anotherRole = Role.builder()
                .id(2L)
                .name("另一个角色")
                .code("ROLE_ANOTHER")
                .build();
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.of(testRole));
        when(roleRepository.findByCode("ROLE_ANOTHER")).thenReturn(Optional.of(anotherRole));
        // 准备更新数据
        RoleDTO updateDTO = new RoleDTO();
        updateDTO.setCode("ROLE_ANOTHER");
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.updateRole(1L, updateDTO));
    }
    @Test
    void deleteRoleShouldSucceedWhenRoleExists() {
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.of(testRole));
        when(userRepository.findAll()).thenReturn(Collections.emptyList());
        doNothing().when(roleRepository).delete(any(Role.class));
        // 执行测试
        roleService.deleteRole(1L);
        // 验证方法被调用
        verify(roleRepository, times(1)).delete(any(Role.class));
    }
    @Test
    void deleteRoleShouldThrowExceptionWhenRoleNotExists() {
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.deleteRole(1L));
    }
    @Test
    void deleteRoleShouldThrowExceptionWhenRoleIsReferenced() {
        // 模拟Repository方法 - 角色被用户引用
        when(roleRepository.findById(anyLong())).thenReturn(Optional.of(testRole));
        when(userRepository.findAll()).thenReturn(Collections.singletonList(mock(com.zhangziqi.online_course_mine.model.entity.User.class)));
        // 设置mock用户引用了角色
        when(userRepository.findAll().get(0).getRoles()).thenReturn(Set.of(testRole));
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.deleteRole(1L));
    }
    @Test
    void assignPermissionsShouldReturnUpdatedRole() {
        // 准备权限ID
        Set<Long> permissionIds = new HashSet<>(Collections.singletonList(1L));
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.of(testRole));
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.of(testPermission));
        when(roleRepository.save(any(Role.class))).thenReturn(testRole);
        // 执行测试
        RoleVO result = roleService.assignPermissions(1L, permissionIds);
        // 验证结果
        assertNotNull(result);
        assertEquals(testRole.getId(), result.getId());
        // 验证仓库方法被调用
        verify(roleRepository, times(1)).save(any(Role.class));
    }
    @Test
    void assignPermissionsShouldThrowExceptionWhenRoleNotExists() {
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.assignPermissions(1L, Set.of(1L)));
    }
    @Test
    void assignPermissionsShouldThrowExceptionWhenPermissionIdsIsEmpty() {
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.of(testRole));
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.assignPermissions(1L, Collections.emptySet()));
    }
    @Test
    void batchDeleteRolesShouldSucceedWhenRolesExist() {
        // 准备测试数据
        List<Long> ids = Arrays.asList(1L, 2L);
        Role role1 = Role.builder().id(1L).name("角色1").code("ROLE_1").build();
        Role role2 = Role.builder().id(2L).name("角色2").code("ROLE_2").build();
        // 模拟Repository方法
        when(roleRepository.findById(1L)).thenReturn(Optional.of(role1));
        when(roleRepository.findById(2L)).thenReturn(Optional.of(role2));
        when(userRepository.findAll()).thenReturn(Collections.emptyList());
        doNothing().when(roleRepository).delete(any(Role.class));
        // 执行测试
        roleService.batchDeleteRoles(ids);
        // 验证方法被调用
        verify(roleRepository, times(2)).delete(any(Role.class));
    }
    @Test
    void batchDeleteRolesShouldThrowExceptionWhenIdsIsEmpty() {
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.batchDeleteRoles(Collections.emptyList()));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/SectionServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.section.*;
import com.zhangziqi.online_course_mine.model.entity.*;
import com.zhangziqi.online_course_mine.model.enums.MediaType;
import com.zhangziqi.online_course_mine.model.vo.SectionVO;
import com.zhangziqi.online_course_mine.repository.*;
import com.zhangziqi.online_course_mine.service.impl.SectionServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
public class SectionServiceTest {
    @Mock
    private SectionRepository sectionRepository;
    @Mock
    private ChapterRepository chapterRepository;
    @Mock
    private CourseRepository courseRepository;
    @Mock
    private MediaRepository mediaRepository;
    @Mock
    private QuestionGroupRepository questionGroupRepository;
    @InjectMocks
    private SectionServiceImpl sectionService;
    private Institution testInstitution;
    private Course testCourse;
    private Chapter testChapter;
    private Section testSection;
    private Media testMedia;
    private QuestionGroup testQuestionGroup;
    private SectionCreateDTO testSectionCreateDTO;
    private SectionQuestionGroupConfigDTO testQuestionGroupConfigDTO;
    private String testResourceType = "primary";
    @BeforeEach
    void setUp() {
        // 创建测试机构
        testInstitution = Institution.builder()
                .id(1L)
                .name("测试机构")
                .build();
        // 创建测试课程
        testCourse = Course.builder()
                .id(1L)
                .title("测试课程")
                .description("这是一个测试课程")
                .institution(testInstitution)
                .build();
        // 创建测试章节
        testChapter = Chapter.builder()
                .id(1L)
                .title("测试章节")
                .description("这是一个测试章节")
                .course(testCourse)
                .orderIndex(0)
                .build();
        // 创建测试小节
        testSection = Section.builder()
                .id(1L)
                .title("测试小节")
                .description("这是一个测试小节")
                .chapter(testChapter)
                .orderIndex(0)
                .contentType("video")
                .resourceTypeDiscriminator("NONE")
                .build();
        // 创建测试媒体
        testMedia = Media.builder()
                .id(1L)
                .originalFilename("test-video.mp4")
                .type(MediaType.VIDEO)
                .size(1024 * 1024L)
                .uploaderId(1L)
                .title("测试视频")
                .build();
        // 创建测试题目组
        testQuestionGroup = QuestionGroup.builder()
                .id(1L)
                .name("测试题目组")
                .description("这是一个测试题目组")
                .build();
        // 创建测试小节创建DTO
        testSectionCreateDTO = SectionCreateDTO.builder()
                .title("测试小节")
                .description("这是一个测试小节")
                .chapterId(testChapter.getId())
                .orderIndex(0)
                .contentType("video")
                .build();
        // 创建测试题目组配置DTO
        testQuestionGroupConfigDTO = SectionQuestionGroupConfigDTO.builder()
                .randomOrder(false)
                .orderByDifficulty(false)
                .showAnalysis(true)
                .build();
    }
    @Test
    @DisplayName("创建小节 - 成功")
    void createSection_Success() {
        // 准备测试数据
        when(chapterRepository.findById(anyLong())).thenReturn(Optional.of(testChapter));
        when(sectionRepository.save(any(Section.class))).thenAnswer(invocation -> {
            Section savedSection = invocation.getArgument(0);
            savedSection.setId(1L);
            return savedSection;
        });
        // 执行方法
        SectionVO result = sectionService.createSection(testSectionCreateDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(testSectionCreateDTO.getTitle(), result.getTitle());
        assertEquals(testSectionCreateDTO.getDescription(), result.getDescription());
        assertEquals(testSectionCreateDTO.getOrderIndex(), result.getOrderIndex());
        assertEquals(testSectionCreateDTO.getContentType(), result.getContentType());
        // 验证方法调用
        verify(chapterRepository).findById(testChapter.getId());
        verify(sectionRepository).save(any(Section.class));
    }
    @Test
    @DisplayName("创建小节 - 章节不存在")
    void createSection_ChapterNotFound() {
        // 准备测试数据
        when(chapterRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 验证抛出异常
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, 
                () -> sectionService.createSection(testSectionCreateDTO));
        assertTrue(exception.getMessage().contains("章节不存在"));
        // 验证方法调用
        verify(chapterRepository).findById(testChapter.getId());
        verify(sectionRepository, never()).save(any(Section.class));
    }
    @Test
    @DisplayName("更新小节 - 成功")
    void updateSection_Success() {
        // 准备测试数据
        when(sectionRepository.findById(anyLong())).thenReturn(Optional.of(testSection));
        lenient().when(chapterRepository.findById(anyLong())).thenReturn(Optional.of(testChapter));
        when(sectionRepository.save(any(Section.class))).thenReturn(testSection);
        // 修改DTO数据
        testSectionCreateDTO.setTitle("更新后的小节");
        testSectionCreateDTO.setDescription("这是更新后的小节描述");
        testSectionCreateDTO.setChapterId(testSection.getChapter().getId());
        // 执行方法
        SectionVO result = sectionService.updateSection(testSection.getId(), testSectionCreateDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(testSectionCreateDTO.getTitle(), result.getTitle());
        assertEquals(testSectionCreateDTO.getDescription(), result.getDescription());
        // 验证方法调用
        verify(sectionRepository).findById(testSection.getId());
        verify(sectionRepository).save(any(Section.class));
    }
    @Test
    @DisplayName("获取小节 - 成功")
    void getSectionById_Success() {
        // 准备测试数据
        when(sectionRepository.findById(anyLong())).thenReturn(Optional.of(testSection));
        // 执行方法
        SectionVO result = sectionService.getSectionById(testSection.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(testSection.getId(), result.getId());
        assertEquals(testSection.getTitle(), result.getTitle());
        assertEquals(testSection.getDescription(), result.getDescription());
        // 验证方法调用
        verify(sectionRepository).findById(testSection.getId());
    }
    @Test
    @DisplayName("获取小节 - 小节不存在")
    void getSectionById_SectionNotFound() {
        // 准备测试数据
        when(sectionRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 验证抛出异常
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, 
                () -> sectionService.getSectionById(99L));
        assertTrue(exception.getMessage().contains("小节不存在"));
        // 验证方法调用
        verify(sectionRepository).findById(99L);
    }
    @Test
    @DisplayName("获取章节小节列表 - 成功")
    void getSectionsByChapter_Success() {
        // 准备测试数据
        when(chapterRepository.findById(anyLong())).thenReturn(Optional.of(testChapter));
        when(sectionRepository.findByChapter_IdOrderByOrderIndexAsc(anyLong())).thenReturn(List.of(testSection));
        // 执行方法
        List<SectionVO> result = sectionService.getSectionsByChapter(testChapter.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(testSection.getId(), result.get(0).getId());
        assertEquals(testSection.getTitle(), result.get(0).getTitle());
        // 验证方法调用
        verify(chapterRepository).findById(testChapter.getId());
        verify(sectionRepository).findByChapter_IdOrderByOrderIndexAsc(testChapter.getId());
    }
    @Test
    @DisplayName("删除小节 - 成功")
    void deleteSection_Success() {
        // 准备测试数据
        when(sectionRepository.findById(anyLong())).thenReturn(Optional.of(testSection));
        // 执行方法
        sectionService.deleteSection(testSection.getId());
        // 验证方法调用
        verify(sectionRepository).findById(testSection.getId());
        verify(sectionRepository).delete(testSection);
    }
    @Test
    @DisplayName("设置小节媒体资源 - 成功")
    void setMediaResource_Success() {
        // 准备测试数据
        when(sectionRepository.findById(anyLong())).thenReturn(Optional.of(testSection));
        when(mediaRepository.findById(anyLong())).thenReturn(Optional.of(testMedia));
        when(sectionRepository.save(any(Section.class))).thenReturn(testSection);
        // 设置媒体资源相关状态
        testSection.setResourceTypeDiscriminator("MEDIA");
        testSection.setMedia(testMedia);
        testSection.setMediaResourceType(testResourceType);
        // 执行方法
        SectionVO result = sectionService.setMediaResource(testSection.getId(), testMedia.getId(), testResourceType);
        // 验证结果
        assertNotNull(result);
        assertEquals("MEDIA", result.getResourceTypeDiscriminator());
        assertNotNull(result.getMedia());
        assertEquals(testMedia.getId(), result.getMediaId());
        assertEquals(testResourceType, result.getMediaResourceType());
        // 验证方法调用
        verify(sectionRepository).findById(testSection.getId());
        verify(mediaRepository).findById(testMedia.getId());
        verify(sectionRepository).save(any(Section.class));
    }
    @Test
    @DisplayName("移除小节媒体资源 - 成功")
    void removeMediaResource_Success() {
        // 准备测试数据
        // 设置媒体资源相关状态
        testSection.setResourceTypeDiscriminator("MEDIA");
        testSection.setMedia(testMedia);
        testSection.setMediaResourceType(testResourceType);
        when(sectionRepository.findById(anyLong())).thenReturn(Optional.of(testSection));
        when(sectionRepository.save(any(Section.class))).thenReturn(testSection);
        // 执行方法
        SectionVO result = sectionService.removeMediaResource(testSection.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals("NONE", result.getResourceTypeDiscriminator());
        assertNull(result.getMedia());
        assertNull(result.getMediaId());
        // 验证方法调用
        verify(sectionRepository).findById(testSection.getId());
        verify(sectionRepository).save(any(Section.class));
    }
    @Test
    @DisplayName("设置小节题目组 - 成功")
    void setQuestionGroup_Success() {
        // 准备测试数据
        when(sectionRepository.findById(anyLong())).thenReturn(Optional.of(testSection));
        when(questionGroupRepository.findById(anyLong())).thenReturn(Optional.of(testQuestionGroup));
        when(sectionRepository.save(any(Section.class))).thenReturn(testSection);
        // 设置题目组相关状态
        testSection.setResourceTypeDiscriminator("QUESTION_GROUP");
        testSection.setQuestionGroup(testQuestionGroup);
        testSection.setRandomOrder(false);
        testSection.setOrderByDifficulty(false);
        testSection.setShowAnalysis(true);
        // 执行方法
        SectionVO result = sectionService.setQuestionGroup(testSection.getId(), testQuestionGroup.getId(), testQuestionGroupConfigDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals("QUESTION_GROUP", result.getResourceTypeDiscriminator());
        assertNotNull(result.getQuestionGroup());
        assertEquals(testQuestionGroup.getId(), result.getQuestionGroupId());
        assertEquals(testQuestionGroupConfigDTO.getRandomOrder(), result.getRandomOrder());
        assertEquals(testQuestionGroupConfigDTO.getOrderByDifficulty(), result.getOrderByDifficulty());
        assertEquals(testQuestionGroupConfigDTO.getShowAnalysis(), result.getShowAnalysis());
        // 验证方法调用
        verify(sectionRepository).findById(testSection.getId());
        verify(questionGroupRepository).findById(testQuestionGroup.getId());
        verify(sectionRepository).save(any(Section.class));
    }
    @Test
    @DisplayName("移除小节题目组 - 成功")
    void removeQuestionGroup_Success() {
        // 准备测试数据
        // 设置题目组相关状态
        testSection.setResourceTypeDiscriminator("QUESTION_GROUP");
        testSection.setQuestionGroup(testQuestionGroup);
        testSection.setRandomOrder(false);
        testSection.setOrderByDifficulty(false);
        testSection.setShowAnalysis(true);
        when(sectionRepository.findById(anyLong())).thenReturn(Optional.of(testSection));
        when(sectionRepository.save(any(Section.class))).thenReturn(testSection);
        // 执行方法
        SectionVO result = sectionService.removeQuestionGroup(testSection.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals("NONE", result.getResourceTypeDiscriminator());
        assertNull(result.getQuestionGroup());
        assertNull(result.getQuestionGroupId());
        // 验证方法调用
        verify(sectionRepository).findById(testSection.getId());
        verify(sectionRepository).save(any(Section.class));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/StorageQuotaServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.StorageQuota;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import com.zhangziqi.online_course_mine.model.vo.QuotaInfoVO;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.StorageQuotaRepository;
import com.zhangziqi.online_course_mine.service.impl.StorageQuotaServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
class StorageQuotaServiceTest {
    @Mock
    private StorageQuotaRepository storageQuotaRepository;
    @Mock
    private InstitutionRepository institutionRepository;
    @InjectMocks
    private StorageQuotaServiceImpl storageQuotaService;
    private Institution testInstitution;
    private StorageQuota testQuota;
    private static final Long INSTITUTION_ID = 1L;
    @BeforeEach
    void setUp() {
        testInstitution = Institution.builder()
                .id(INSTITUTION_ID)
                .name("测试机构")
                .status(1)
                .build();
        testQuota = new StorageQuota();
        testQuota.setId(1L);
        testQuota.setInstitution(testInstitution);
        testQuota.setType(QuotaType.VIDEO);
        testQuota.setTotalQuota(5L * 1024 * 1024 * 1024); // 5GB
        testQuota.setUsedQuota(1L * 1024 * 1024 * 1024);  // 1GB
        testQuota.setCreatedAt(LocalDateTime.now());
        testQuota.setUpdatedAt(LocalDateTime.now());
    }
    @Test
    void hasEnoughQuota_WhenInstitutionNotExists_ThrowsException() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () ->
                storageQuotaService.hasEnoughQuota(INSTITUTION_ID, QuotaType.VIDEO, 1024L));
    }
    @Test
    void hasEnoughQuota_WhenNotEnoughSpace_ReturnsFalse() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.of(testInstitution));
        when(storageQuotaRepository.findByInstitutionAndType(testInstitution, QuotaType.VIDEO))
                .thenReturn(Optional.of(testQuota));
        // 尝试上传超过剩余配额的文件
        long remainingQuota = testQuota.getTotalQuota() - testQuota.getUsedQuota();
        boolean result = storageQuotaService.hasEnoughQuota(INSTITUTION_ID, QuotaType.VIDEO, remainingQuota + 1024L);
        assertFalse(result);
    }
    @Test
    void hasEnoughQuota_WhenEnoughSpace_ReturnsTrue() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.of(testInstitution));
        when(storageQuotaRepository.findByInstitutionAndType(testInstitution, QuotaType.VIDEO))
                .thenReturn(Optional.of(testQuota));
        // 尝试上传小于剩余配额的文件
        long remainingQuota = testQuota.getTotalQuota() - testQuota.getUsedQuota();
        boolean result = storageQuotaService.hasEnoughQuota(INSTITUTION_ID, QuotaType.VIDEO, remainingQuota - 1024L);
        assertTrue(result);
    }
    @Test
    void getQuotaInfo_WhenInstitutionNotExists_ThrowsException() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () ->
                storageQuotaService.getQuotaInfo(INSTITUTION_ID));
    }
    @Test
    void getQuotaInfo_WhenQuotaExists_ReturnsQuotaInfo() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.of(testInstitution));
        when(storageQuotaRepository.findByInstitution(testInstitution))
                .thenReturn(Arrays.asList(testQuota));
        QuotaInfoVO result = storageQuotaService.getQuotaInfo(INSTITUTION_ID);
        assertNotNull(result);
        assertEquals(QuotaType.TOTAL.name(), result.getType());
        assertEquals(testQuota.getTotalQuota(), result.getTotalQuota());
        assertEquals(testQuota.getUsedQuota(), result.getUsedQuota());
        assertEquals(testQuota.getTotalQuota() - testQuota.getUsedQuota(), result.getAvailableQuota());
    }
    @Test
    void getAllQuotas_WhenInstitutionNotExists_ThrowsException() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () ->
                storageQuotaService.getAllQuotas(INSTITUTION_ID));
    }
    @Test
    void getAllQuotas_WhenQuotasExist_ReturnsAllQuotas() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.of(testInstitution));
        StorageQuota documentQuota = new StorageQuota();
        documentQuota.setId(2L);
        documentQuota.setInstitution(testInstitution);
        documentQuota.setType(QuotaType.DOCUMENT);
        documentQuota.setTotalQuota(2L * 1024 * 1024 * 1024);
        documentQuota.setUsedQuota(512L * 1024 * 1024);
        when(storageQuotaRepository.findByInstitution(testInstitution))
                .thenReturn(Arrays.asList(testQuota, documentQuota));
        List<QuotaInfoVO> results = storageQuotaService.getAllQuotas(INSTITUTION_ID);
        assertEquals(2, results.size());
        assertTrue(results.stream().anyMatch(q -> q.getType().equals(QuotaType.VIDEO.name())));
        assertTrue(results.stream().anyMatch(q -> q.getType().equals(QuotaType.DOCUMENT.name())));
    }
    @Test
    void updateUsedQuota_WhenInstitutionNotExists_ThrowsException() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () ->
                storageQuotaService.updateUsedQuota(INSTITUTION_ID, QuotaType.VIDEO, 1024L));
    }
    @Test
    void updateUsedQuota_WhenQuotaExists_UpdatesSuccessfully() {
        // Arrange
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.of(testInstitution));
        // 视频配额
        StorageQuota videoQuota = new StorageQuota();
        videoQuota.setId(1L);
        videoQuota.setInstitution(testInstitution);
        videoQuota.setType(QuotaType.VIDEO);
        videoQuota.setTotalQuota(5L * 1024 * 1024 * 1024); // 5GB
        videoQuota.setUsedQuota(1L * 1024 * 1024 * 1024);  // 1GB
        // 总配额
        StorageQuota totalQuota = new StorageQuota();
        totalQuota.setId(3L);
        totalQuota.setInstitution(testInstitution);
        totalQuota.setType(QuotaType.TOTAL);
        totalQuota.setTotalQuota(7L * 1024 * 1024 * 1024); // 7GB
        totalQuota.setUsedQuota(1L * 1024 * 1024 * 1024);  // 1GB
        when(storageQuotaRepository.findByInstitutionAndType(testInstitution, QuotaType.VIDEO))
                .thenReturn(Optional.of(videoQuota));
        when(storageQuotaRepository.findByInstitutionAndType(testInstitution, QuotaType.TOTAL))
                .thenReturn(Optional.of(totalQuota));
        // 直接返回参数，不做任何修改
        when(storageQuotaRepository.save(any(StorageQuota.class)))
                .thenAnswer(invocation -> invocation.getArgument(0));
        long sizeDelta = 1024L * 1024; // 1MB
        storageQuotaService.updateUsedQuota(INSTITUTION_ID, QuotaType.VIDEO, sizeDelta);
        // 验证方法调用
        verify(institutionRepository, times(2)).findById(INSTITUTION_ID);
        verify(storageQuotaRepository, times(1)).findByInstitutionAndType(testInstitution, QuotaType.VIDEO);
        verify(storageQuotaRepository, times(1)).findByInstitutionAndType(testInstitution, QuotaType.TOTAL);
        // 使用ArgumentCaptor捕获保存的配额对象
        ArgumentCaptor<StorageQuota> quotaCaptor = ArgumentCaptor.forClass(StorageQuota.class);
        verify(storageQuotaRepository, times(2)).save(quotaCaptor.capture());
        // 获取所有被保存的配额对象
        List<StorageQuota> capturedQuotas = quotaCaptor.getAllValues();
        assertEquals(2, capturedQuotas.size());
        // 直接校验捕获的参数值，而不是依赖被保存后的对象状态
        boolean foundVideo = false;
        boolean foundTotal = false;
        for (StorageQuota quota : capturedQuotas) {
            if (quota.getType() == QuotaType.VIDEO) {
                assertEquals(1L * 1024 * 1024 * 1024 + sizeDelta, quota.getUsedQuota());
                foundVideo = true;
            } else if (quota.getType() == QuotaType.TOTAL) {
                assertEquals(1L * 1024 * 1024 * 1024 + sizeDelta, quota.getUsedQuota());
                foundTotal = true;
            }
        }
        // 确保找到了两种类型的配额
        assertTrue(foundVideo, "未找到保存的视频配额");
        assertTrue(foundTotal, "未找到保存的总配额");
    }
    @Test
    void setQuota_WhenInstitutionNotExists_ThrowsException() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () ->
                storageQuotaService.setQuota(INSTITUTION_ID, QuotaType.VIDEO, 1024L, null));
    }
    @Test
    void testSetQuota_WhenSettingNewQuota_CreatesSuccessfully() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.of(testInstitution));
        when(storageQuotaRepository.findByInstitutionAndType(testInstitution, QuotaType.VIDEO))
                .thenReturn(Optional.empty());
        when(storageQuotaRepository.save(any(StorageQuota.class)))
                .thenAnswer(invocation -> invocation.getArgument(0));
        long totalQuota = 5L * 1024 * 1024 * 1024; // 5GB
        LocalDateTime expiresAt = LocalDateTime.now().plusDays(30);
        storageQuotaService.setQuota(INSTITUTION_ID, QuotaType.VIDEO, totalQuota, expiresAt);
        ArgumentCaptor<StorageQuota> quotaCaptor = ArgumentCaptor.forClass(StorageQuota.class);
        verify(storageQuotaRepository).save(quotaCaptor.capture());
        StorageQuota savedQuota = quotaCaptor.getValue();
        assertEquals(QuotaType.VIDEO, savedQuota.getType());
        assertEquals(totalQuota, savedQuota.getTotalQuota());
        assertEquals(0L, savedQuota.getUsedQuota());
        assertEquals(expiresAt, savedQuota.getExpiresAt());
        assertTrue(savedQuota.getEnabled());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/UserCourseServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.entity.Course;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Order;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.entity.UserCourse;
import com.zhangziqi.online_course_mine.model.enums.CoursePaymentType;
import com.zhangziqi.online_course_mine.model.enums.CourseStatus;
import com.zhangziqi.online_course_mine.model.enums.OrderStatus;
import com.zhangziqi.online_course_mine.model.enums.UserCourseStatus;
import com.zhangziqi.online_course_mine.model.vo.CourseVO;
import com.zhangziqi.online_course_mine.model.vo.UserCourseVO;
import com.zhangziqi.online_course_mine.repository.CourseRepository;
import com.zhangziqi.online_course_mine.repository.OrderRepository;
import com.zhangziqi.online_course_mine.repository.UserCourseRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.impl.UserCourseServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
public class UserCourseServiceTest {
    @Mock
    private UserCourseRepository userCourseRepository;
    @Mock
    private UserRepository userRepository;
    @Mock
    private CourseRepository courseRepository;
    @Mock
    private OrderRepository orderRepository;
    @InjectMocks
    private UserCourseServiceImpl userCourseService;
    private User testUser;
    private Course testCourse;
    private Order testOrder;
    private UserCourse testUserCourse;
    private Institution testInstitution;
    @BeforeEach
    void setUp() {
        // 创建测试机构
        testInstitution = Institution.builder()
                .id(1L)
                .name("测试机构")
                .build();
        // 创建测试用户
        testUser = User.builder()
                .id(1L)
                .username("testuser")
                .email("test@example.com")
                .build();
        // 创建测试课程
        testCourse = Course.builder()
                .id(1L)
                .title("测试课程")
                .description("这是一个测试课程")
                .institution(testInstitution)
                .creatorId(1L)
                .status(CourseStatus.PUBLISHED.ordinal())
                .paymentType(CoursePaymentType.PAID.ordinal())
                .price(BigDecimal.valueOf(99.99))
                .publishedVersionId(1L)
                .studentCount(10)
                .build();
        // 创建测试订单
        testOrder = Order.builder()
                .id(1L)
                .orderNo("TEST12345678")
                .user(testUser)
                .course(testCourse)
                .amount(BigDecimal.valueOf(99.99))
                .status(OrderStatus.PAID.ordinal())
                .createdAt(LocalDateTime.now())
                .paidAt(LocalDateTime.now())
                .build();
        // 创建测试用户课程关系
        testUserCourse = UserCourse.builder()
                .id(1L)
                .user(testUser)
                .course(testCourse)
                .purchasedAt(LocalDateTime.now())
                .order(testOrder)
                .progress(0)
                .status(UserCourseStatus.NORMAL.ordinal())
                .learnDuration(0)
                .build();
    }
    @Test
    @DisplayName("获取用户购买的课程 - 成功")
    void getUserPurchasedCourses_Success() {
        // 准备测试数据
        when(userCourseRepository.findByUser_Id(anyLong())).thenReturn(List.of(testUserCourse));
        // 执行方法
        List<CourseVO> result = userCourseService.getUserPurchasedCourses(testUser.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(testCourse.getId(), result.get(0).getId());
        assertEquals(testCourse.getTitle(), result.get(0).getTitle());
        // 验证方法调用
        verify(userCourseRepository).findByUser_Id(testUser.getId());
    }
    @Test
    @DisplayName("分页获取用户购买的课程 - 成功")
    void getUserPurchasedCoursesWithPagination_Success() {
        // 准备测试数据
        Pageable pageable = PageRequest.of(0, 10);
        Page<UserCourse> userCoursePage = new PageImpl<>(List.of(testUserCourse), pageable, 1);
        when(userCourseRepository.findByUser_Id(anyLong(), any(Pageable.class))).thenReturn(userCoursePage);
        // 执行方法
        Page<CourseVO> result = userCourseService.getUserPurchasedCourses(testUser.getId(), pageable);
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        assertEquals(testCourse.getId(), result.getContent().get(0).getId());
        assertEquals(testCourse.getTitle(), result.getContent().get(0).getTitle());
        // 验证方法调用
        verify(userCourseRepository).findByUser_Id(testUser.getId(), pageable);
    }
    @Test
    @DisplayName("获取用户课程学习记录 - 成功")
    void getUserCourseRecord_Success() {
        // 准备测试数据
        when(userCourseRepository.findByUser_IdAndCourse_Id(anyLong(), anyLong())).thenReturn(Optional.of(testUserCourse));
        // 执行方法
        UserCourseVO result = userCourseService.getUserCourseRecord(testUser.getId(), testCourse.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(testUserCourse.getId(), result.getId());
        assertEquals(testUser.getId(), result.getUserId());
        assertEquals(testCourse.getId(), result.getCourseId());
        assertEquals(testUserCourse.getProgress(), result.getProgress());
        assertEquals(testUserCourse.getStatus(), result.getStatus());
        // 验证方法调用
        verify(userCourseRepository).findByUser_IdAndCourse_Id(testUser.getId(), testCourse.getId());
    }
    @Test
    @DisplayName("获取用户课程学习记录 - 未购买课程")
    void getUserCourseRecord_CourseNotPurchased() {
        // 准备测试数据
        when(userCourseRepository.findByUser_IdAndCourse_Id(anyLong(), anyLong())).thenReturn(Optional.empty());
        // 验证抛出异常
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, 
                () -> userCourseService.getUserCourseRecord(testUser.getId(), testCourse.getId()));
        assertTrue(exception.getMessage().contains("未找到学习记录，请先购买课程"));
        // 验证方法调用
        verify(userCourseRepository).findByUser_IdAndCourse_Id(testUser.getId(), testCourse.getId());
    }
    @Test
    @DisplayName("更新学习进度 - 成功")
    void updateLearningProgress_Success() {
        // 准备测试数据
        testUserCourse.setProgress(30);
        Integer newProgress = 50;
        when(userCourseRepository.findByUser_IdAndCourse_Id(anyLong(), anyLong())).thenReturn(Optional.of(testUserCourse));
        when(userCourseRepository.save(any(UserCourse.class))).thenReturn(testUserCourse);
        // 执行方法
        UserCourseVO result = userCourseService.updateLearningProgress(testUser.getId(), testCourse.getId(), newProgress);
        // 验证结果
        assertNotNull(result);
        assertEquals(newProgress, result.getProgress());
        assertNotNull(testUserCourse.getLastLearnAt());
        // 验证方法调用
        verify(userCourseRepository).findByUser_IdAndCourse_Id(testUser.getId(), testCourse.getId());
        verify(userCourseRepository).save(testUserCourse);
    }
    @Test
    @DisplayName("更新学习进度 - 新进度小于原进度")
    void updateLearningProgress_NewProgressLessThanCurrent() {
        // 准备测试数据
        testUserCourse.setProgress(50);
        Integer newProgress = 30;
        when(userCourseRepository.findByUser_IdAndCourse_Id(anyLong(), anyLong())).thenReturn(Optional.of(testUserCourse));
        // 执行方法
        UserCourseVO result = userCourseService.updateLearningProgress(testUser.getId(), testCourse.getId(), newProgress);
        // 验证结果
        assertNotNull(result);
        assertEquals(50, result.getProgress()); // 进度不应该被更新
        // 验证方法调用
        verify(userCourseRepository).findByUser_IdAndCourse_Id(testUser.getId(), testCourse.getId());
        verify(userCourseRepository, never()).save(any(UserCourse.class));
    }
    @Test
    @DisplayName("更新学习进度 - 进度超出范围")
    void updateLearningProgress_ProgressOutOfRange() {
        // 准备测试数据
        Integer invalidProgress = 110; // 超过100
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> userCourseService.updateLearningProgress(testUser.getId(), testCourse.getId(), invalidProgress));
        assertTrue(exception.getMessage().contains("学习进度必须在0-100之间"));
        // 验证方法调用
        verify(userCourseRepository, never()).findByUser_IdAndCourse_Id(anyLong(), anyLong());
        verify(userCourseRepository, never()).save(any(UserCourse.class));
    }
    @Test
    @DisplayName("记录学习时长 - 成功")
    void recordLearningDuration_Success() {
        // 准备测试数据
        testUserCourse.setLearnDuration(100); // 当前学习时长100秒
        Integer additionalDuration = 60; // 新增60秒
        when(userCourseRepository.findByUser_IdAndCourse_Id(anyLong(), anyLong())).thenReturn(Optional.of(testUserCourse));
        when(userCourseRepository.save(any(UserCourse.class))).thenReturn(testUserCourse);
        // 执行方法
        UserCourseVO result = userCourseService.recordLearningDuration(testUser.getId(), testCourse.getId(), additionalDuration);
        // 验证结果
        assertNotNull(result);
        assertEquals(160, result.getLearnDuration()); // 100 + 60 = 160
        assertNotNull(testUserCourse.getLastLearnAt());
        // 验证方法调用
        verify(userCourseRepository).findByUser_IdAndCourse_Id(testUser.getId(), testCourse.getId());
        verify(userCourseRepository).save(testUserCourse);
    }
    @Test
    @DisplayName("记录学习时长 - 时长无效")
    void recordLearningDuration_InvalidDuration() {
        // 准备测试数据
        Integer invalidDuration = 0; // 无效时长
        // 验证抛出异常
        BusinessException exception = assertThrows(BusinessException.class, 
                () -> userCourseService.recordLearningDuration(testUser.getId(), testCourse.getId(), invalidDuration));
        assertTrue(exception.getMessage().contains("学习时长必须大于0"));
        // 验证方法调用
        verify(userCourseRepository, never()).findByUser_IdAndCourse_Id(anyLong(), anyLong());
        verify(userCourseRepository, never()).save(any(UserCourse.class));
    }
    @Test
    @DisplayName("检查用户是否已购买课程 - 已购买")
    void hasPurchasedCourse_CourseIsPurchased() {
        // 准备测试数据
        when(userCourseRepository.existsByUser_IdAndCourse_Id(anyLong(), anyLong())).thenReturn(true);
        // 执行方法
        boolean result = userCourseService.hasPurchasedCourse(testUser.getId(), testCourse.getId());
        // 验证结果
        assertTrue(result);
        // 验证方法调用
        verify(userCourseRepository).existsByUser_IdAndCourse_Id(testUser.getId(), testCourse.getId());
    }
    @Test
    @DisplayName("检查用户是否已购买课程 - 未购买")
    void hasPurchasedCourse_CourseNotPurchased() {
        // 准备测试数据
        when(userCourseRepository.existsByUser_IdAndCourse_Id(anyLong(), anyLong())).thenReturn(false);
        // 执行方法
        boolean result = userCourseService.hasPurchasedCourse(testUser.getId(), testCourse.getId());
        // 验证结果
        assertFalse(result);
        // 验证方法调用
        verify(userCourseRepository).existsByUser_IdAndCourse_Id(testUser.getId(), testCourse.getId());
    }
    @Test
    @DisplayName("获取课程学生列表 - 成功")
    void getCourseStudents_Success() {
        // 准备测试数据
        when(userCourseRepository.findByCourse_Id(anyLong())).thenReturn(List.of(testUserCourse));
        // 执行方法
        List<UserCourseVO> result = userCourseService.getCourseStudents(testCourse.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(testUserCourse.getId(), result.get(0).getId());
        assertEquals(testUser.getId(), result.get(0).getUserId());
        assertEquals(testCourse.getId(), result.get(0).getCourseId());
        // 验证方法调用
        verify(userCourseRepository).findByCourse_Id(testCourse.getId());
    }
    @Test
    @DisplayName("分页获取课程学生列表 - 成功")
    void getCourseStudentsWithPagination_Success() {
        // 准备测试数据
        Pageable pageable = PageRequest.of(0, 10);
        Page<UserCourse> userCoursePage = new PageImpl<>(List.of(testUserCourse), pageable, 1);
        when(userCourseRepository.findByCourse_Id(anyLong(), any(Pageable.class))).thenReturn(userCoursePage);
        // 执行方法
        Page<UserCourseVO> result = userCourseService.getCourseStudents(testCourse.getId(), pageable);
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        assertEquals(testUserCourse.getId(), result.getContent().get(0).getId());
        assertEquals(testUser.getId(), result.getContent().get(0).getUserId());
        assertEquals(testCourse.getId(), result.getContent().get(0).getCourseId());
        // 验证方法调用
        verify(userCourseRepository).findByCourse_Id(testCourse.getId(), pageable);
    }
    @Test
    @DisplayName("获取机构学生列表 - 成功")
    void getInstitutionStudents_Success() {
        // 准备测试数据
        when(userCourseRepository.findByInstitutionId(anyLong())).thenReturn(List.of(testUserCourse));
        // 执行方法
        List<UserCourseVO> result = userCourseService.getInstitutionStudents(testInstitution.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(testUserCourse.getId(), result.get(0).getId());
        assertEquals(testUser.getId(), result.get(0).getUserId());
        assertEquals(testCourse.getId(), result.get(0).getCourseId());
        // 验证方法调用
        verify(userCourseRepository).findByInstitutionId(testInstitution.getId());
    }
    @Test
    @DisplayName("分页获取机构学生列表 - 成功")
    void getInstitutionStudentsWithPagination_Success() {
        // 准备测试数据
        Pageable pageable = PageRequest.of(0, 10);
        Page<UserCourse> userCoursePage = new PageImpl<>(List.of(testUserCourse), pageable, 1);
        when(userCourseRepository.findByInstitutionId(anyLong(), any(Pageable.class))).thenReturn(userCoursePage);
        // 执行方法
        Page<UserCourseVO> result = userCourseService.getInstitutionStudents(testInstitution.getId(), pageable);
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
        assertEquals(testUserCourse.getId(), result.getContent().get(0).getId());
        assertEquals(testUser.getId(), result.getContent().get(0).getUserId());
        assertEquals(testCourse.getId(), result.getContent().get(0).getCourseId());
        // 验证方法调用
        verify(userCourseRepository).findByInstitutionId(testInstitution.getId(), pageable);
    }
    @Test
    @DisplayName("获取用户最近学习的课程 - 成功")
    void getRecentLearnedCourses_Success() {
        // 准备测试数据
        int limit = 5;
        when(userCourseRepository.findRecentLearnedCourses(anyLong(), any(PageRequest.class))).thenReturn(List.of(testUserCourse));
        // 执行方法
        List<CourseVO> result = userCourseService.getRecentLearnedCourses(testUser.getId(), limit);
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(testCourse.getId(), result.get(0).getId());
        assertEquals(testCourse.getTitle(), result.get(0).getTitle());
        // 验证方法调用
        verify(userCourseRepository).findRecentLearnedCourses(eq(testUser.getId()), any(PageRequest.class));
    }
    @Test
    @DisplayName("创建用户课程关系 - 成功")
    void createUserCourseRelation_Success() {
        // 准备测试数据
        when(userCourseRepository.findByUser_IdAndCourse_Id(anyLong(), anyLong())).thenReturn(Optional.empty());
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(testUser));
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(orderRepository.findById(anyLong())).thenReturn(Optional.of(testOrder));
        when(userCourseRepository.save(any(UserCourse.class))).thenReturn(testUserCourse);
        when(courseRepository.save(any(Course.class))).thenReturn(testCourse);
        // 执行方法
        UserCourse result = userCourseService.createUserCourseRelation(testUser.getId(), testCourse.getId(), testOrder.getId(), true);
        // 验证结果
        assertNotNull(result);
        assertEquals(testUser, result.getUser());
        assertEquals(testCourse, result.getCourse());
        assertEquals(testOrder, result.getOrder());
        assertEquals(UserCourseStatus.NORMAL.ordinal(), result.getStatus());
        // 验证课程学生数增加
        assertEquals(11, testCourse.getStudentCount()); // 原来是10，增加1个
        // 验证方法调用
        verify(userCourseRepository).findByUser_IdAndCourse_Id(testUser.getId(), testCourse.getId());
        verify(userRepository).findById(testUser.getId());
        verify(courseRepository).findById(testCourse.getId());
        verify(orderRepository).findById(testOrder.getId());
        verify(userCourseRepository).save(any(UserCourse.class));
        verify(courseRepository).save(testCourse);
    }
    @Test
    @DisplayName("创建用户课程关系 - 关系已存在")
    void createUserCourseRelation_RelationAlreadyExists() {
        // 准备测试数据
        when(userCourseRepository.findByUser_IdAndCourse_Id(anyLong(), anyLong())).thenReturn(Optional.of(testUserCourse));
        // 执行方法
        UserCourse result = userCourseService.createUserCourseRelation(testUser.getId(), testCourse.getId(), testOrder.getId(), true);
        // 验证结果
        assertNotNull(result);
        assertEquals(testUserCourse, result);
        // 验证方法调用
        verify(userCourseRepository).findByUser_IdAndCourse_Id(testUser.getId(), testCourse.getId());
        verify(userRepository, never()).findById(anyLong());
        verify(courseRepository, never()).findById(anyLong());
        verify(orderRepository, never()).findById(anyLong());
        verify(userCourseRepository, never()).save(any(UserCourse.class));
        verify(courseRepository, never()).save(any(Course.class));
    }
    @Test
    @DisplayName("创建用户课程关系 - 免费课程无订单")
    void createUserCourseRelation_FreeCourseNoOrder() {
        // 准备测试数据
        when(userCourseRepository.findByUser_IdAndCourse_Id(anyLong(), anyLong())).thenReturn(Optional.empty());
        when(userRepository.findById(anyLong())).thenReturn(Optional.of(testUser));
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(userCourseRepository.save(any(UserCourse.class))).thenReturn(testUserCourse);
        when(courseRepository.save(any(Course.class))).thenReturn(testCourse);
        // 执行方法
        UserCourse result = userCourseService.createUserCourseRelation(testUser.getId(), testCourse.getId(), null, true);
        // 验证结果
        assertNotNull(result);
        assertEquals(testUser, result.getUser());
        assertEquals(testCourse, result.getCourse());
        assertNull(result.getOrder());
        assertEquals(UserCourseStatus.NORMAL.ordinal(), result.getStatus());
        // 验证方法调用
        verify(userCourseRepository).findByUser_IdAndCourse_Id(testUser.getId(), testCourse.getId());
        verify(userRepository).findById(testUser.getId());
        verify(courseRepository).findById(testCourse.getId());
        verify(orderRepository, never()).findById(anyLong());
        verify(userCourseRepository).save(any(UserCourse.class));
        verify(courseRepository).save(testCourse);
    }
    @Test
    @DisplayName("更新用户课程关系为已退款 - 成功")
    void updateUserCourseRefunded_Success() {
        // 准备测试数据
        when(userCourseRepository.findByOrder_Id(anyLong())).thenReturn(Optional.of(testUserCourse));
        when(userCourseRepository.save(any(UserCourse.class))).thenReturn(testUserCourse);
        when(courseRepository.findById(anyLong())).thenReturn(Optional.of(testCourse));
        when(courseRepository.save(any(Course.class))).thenReturn(testCourse);
        // 执行方法
        UserCourse result = userCourseService.updateUserCourseRefunded(testOrder.getId());
        // 验证结果
        assertNotNull(result);
        assertEquals(UserCourseStatus.REFUNDED.ordinal(), result.getStatus());
        // 验证课程学生数减少
        assertEquals(9, testCourse.getStudentCount()); // 原来是10，减少1个
        // 验证方法调用
        verify(userCourseRepository).findByOrder_Id(testOrder.getId());
        verify(userCourseRepository).save(testUserCourse);
        verify(courseRepository).findById(testCourse.getId());
        verify(courseRepository).save(testCourse);
    }
    @Test
    @DisplayName("更新用户课程关系为已退款 - 关系不存在")
    void updateUserCourseRefunded_RelationNotFound() {
        // 准备测试数据
        when(userCourseRepository.findByOrder_Id(anyLong())).thenReturn(Optional.empty());
        // 验证抛出异常
        ResourceNotFoundException exception = assertThrows(ResourceNotFoundException.class, 
                () -> userCourseService.updateUserCourseRefunded(999L));
        assertTrue(exception.getMessage().contains("未找到与订单关联的课程记录"));
        // 验证方法调用
        verify(userCourseRepository).findByOrder_Id(999L);
        verify(userCourseRepository, never()).save(any(UserCourse.class));
        verify(courseRepository, never()).findById(anyLong());
        verify(courseRepository, never()).save(any(Course.class));
    }
    @Test
    @DisplayName("根据订单ID查找用户课程关系 - 成功")
    void findByOrderId_Success() {
        // 准备测试数据
        when(userCourseRepository.findByOrder_Id(anyLong())).thenReturn(Optional.of(testUserCourse));
        // 执行方法
        Optional<UserCourse> result = userCourseService.findByOrderId(testOrder.getId());
        // 验证结果
        assertTrue(result.isPresent());
        assertEquals(testUserCourse, result.get());
        // 验证方法调用
        verify(userCourseRepository).findByOrder_Id(testOrder.getId());
    }
    @Test
    @DisplayName("根据订单ID查找用户课程关系 - 不存在")
    void findByOrderId_NotFound() {
        // 准备测试数据
        when(userCourseRepository.findByOrder_Id(anyLong())).thenReturn(Optional.empty());
        // 执行方法
        Optional<UserCourse> result = userCourseService.findByOrderId(999L);
        // 验证结果
        assertFalse(result.isPresent());
        // 验证方法调用
        verify(userCourseRepository).findByOrder_Id(999L);
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/UserServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.RoleEnum;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.impl.UserServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.contains;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
/**
 * 用户服务测试
 */
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test") // 使用测试环境配置
public class UserServiceTest {
    @Mock
    private UserRepository userRepository;
    @Mock
    private RoleRepository roleRepository;
    @Mock
    private PasswordEncoder passwordEncoder;
    @Mock
    private EmailService emailService;
    @Mock
    private MinioService minioService;
    @InjectMocks
    private UserServiceImpl userService;
    private RegisterDTO registerDTO;
    private User user;
    private Role userRole;
    @BeforeEach
    void setUp() {
        // 初始化注册DTO
        registerDTO = new RegisterDTO();
        registerDTO.setUsername("testuser");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("test@example.com");
        registerDTO.setPhone("13812345678");
        // 初始化角色
        userRole = new Role();
        userRole.setName("普通用户");
        userRole.setCode(RoleEnum.USER.getCode());
        // 初始化用户
        user = User.builder()
                .username(registerDTO.getUsername())
                .password("encodedPassword")
                .email(registerDTO.getEmail())
                .phone(registerDTO.getPhone())
                .status(1)
                .roles(Collections.singleton(userRole))
                .build();
    }
    @Test
    void registerShouldSucceedWhenUserInfoValid() {
        // 准备
        when(userRepository.existsByUsername(registerDTO.getUsername())).thenReturn(false);
        when(userRepository.existsByEmail(registerDTO.getEmail())).thenReturn(false);
        when(userRepository.existsByPhone(registerDTO.getPhone())).thenReturn(false);
        when(roleRepository.findByCode(RoleEnum.USER.getCode())).thenReturn(Optional.of(userRole));
        when(passwordEncoder.encode(registerDTO.getPassword())).thenReturn("encodedPassword");
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        User result = userService.register(registerDTO);
        // 验证
        assertNotNull(result);
        assertEquals(registerDTO.getUsername(), result.getUsername());
        verify(userRepository).existsByUsername(registerDTO.getUsername());
        verify(userRepository).existsByEmail(registerDTO.getEmail());
        verify(userRepository).existsByPhone(registerDTO.getPhone());
        verify(roleRepository).findByCode(RoleEnum.USER.getCode());
        verify(passwordEncoder).encode(registerDTO.getPassword());
        verify(userRepository).save(any(User.class));
    }
    @Test
    void registerShouldThrowExceptionWhenUsernameExists() {
        // 准备
        when(userRepository.existsByUsername(registerDTO.getUsername())).thenReturn(true);
        // 执行并验证
        assertThrows(BusinessException.class, () -> userService.register(registerDTO));
        verify(userRepository).existsByUsername(registerDTO.getUsername());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void registerShouldThrowExceptionWhenEmailExists() {
        // 准备
        when(userRepository.existsByUsername(registerDTO.getUsername())).thenReturn(false);
        when(userRepository.existsByEmail(registerDTO.getEmail())).thenReturn(true);
        // 执行并验证
        assertThrows(BusinessException.class, () -> userService.register(registerDTO));
        verify(userRepository).existsByUsername(registerDTO.getUsername());
        verify(userRepository).existsByEmail(registerDTO.getEmail());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void registerShouldThrowExceptionWhenPhoneExists() {
        // 准备
        when(userRepository.existsByUsername(registerDTO.getUsername())).thenReturn(false);
        when(userRepository.existsByEmail(registerDTO.getEmail())).thenReturn(false);
        when(userRepository.existsByPhone(registerDTO.getPhone())).thenReturn(true);
        // 执行并验证
        assertThrows(BusinessException.class, () -> userService.register(registerDTO));
        verify(userRepository).existsByUsername(registerDTO.getUsername());
        verify(userRepository).existsByEmail(registerDTO.getEmail());
        verify(userRepository).existsByPhone(registerDTO.getPhone());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void getUserByUsernameShouldReturnUserWhenUserExists() {
        // 准备
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        // 执行
        User result = userService.getUserByUsername(user.getUsername());
        // 验证
        assertNotNull(result);
        assertEquals(user.getUsername(), result.getUsername());
        verify(userRepository).findByUsername(user.getUsername());
    }
    @Test
    void getUserByUsernameShouldThrowExceptionWhenUserNotExists() {
        // 准备
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.empty());
        // 执行并验证
        assertThrows(BusinessException.class, () -> userService.getUserByUsername("nonexistentuser"));
        verify(userRepository).findByUsername("nonexistentuser");
    }
    @Test
    void existsByUsernameShouldReturnTrueWhenUserExists() {
        // 准备
        when(userRepository.existsByUsername(user.getUsername())).thenReturn(true);
        // 执行
        boolean result = userService.existsByUsername(user.getUsername());
        // 验证
        assertTrue(result);
        verify(userRepository).existsByUsername(user.getUsername());
    }
    @Test
    void existsByEmailShouldReturnTrueWhenEmailExists() {
        // 准备
        when(userRepository.existsByEmail(user.getEmail())).thenReturn(true);
        // 执行
        boolean result = userService.existsByEmail(user.getEmail());
        // 验证
        assertTrue(result);
        verify(userRepository).existsByEmail(user.getEmail());
    }
    @Test
    void existsByPhoneShouldReturnTrueWhenPhoneExists() {
        // 准备
        when(userRepository.existsByPhone(user.getPhone())).thenReturn(true);
        // 执行
        boolean result = userService.existsByPhone(user.getPhone());
        // 验证
        assertTrue(result);
        verify(userRepository).existsByPhone(user.getPhone());
    }
    @Test
    void updateLastLoginTimeShouldUpdateTimeWhenUserExists() {
        // 准备
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        userService.updateLastLoginTime(user.getUsername());
        // 验证
        verify(userRepository).findByUsername(user.getUsername());
        verify(userRepository).save(any(User.class));
        assertNotNull(user.getLastLoginAt());
    }
    @Test
    void updateLastLoginTimeShouldThrowExceptionWhenUserNotExists() {
        // 准备
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.empty());
        // 执行并验证
        assertThrows(BusinessException.class, () -> userService.updateLastLoginTime("nonexistentuser"));
        verify(userRepository).findByUsername("nonexistentuser");
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void getCurrentUserShouldReturnUserInfoWhenUserExists() {
        // 准备
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        // 执行
        UserVO result = userService.getCurrentUser(user.getUsername());
        // 验证
        assertNotNull(result);
        assertEquals(user.getUsername(), result.getUsername());
        assertEquals(user.getEmail(), result.getEmail());
        assertEquals(user.getPhone(), result.getPhone());
        verify(userRepository).findByUsername(user.getUsername());
    }
    @Test
    void updateCurrentUserProfileShouldUpdateUserInfoWhenValid() {
        // 准备
        String nickname = "新昵称";
        String phone = "13900001111";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(userRepository.existsByPhone(phone)).thenReturn(false);
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        UserVO result = userService.updateCurrentUserProfile(user.getUsername(), nickname, phone);
        // 验证
        assertNotNull(result);
        assertEquals(nickname, user.getNickname());
        assertEquals(phone, user.getPhone());
        verify(userRepository).findByUsername(user.getUsername());
        verify(userRepository).existsByPhone(phone);
        verify(userRepository).save(user);
    }
    @Test
    void updateCurrentUserProfileShouldThrowExceptionWhenPhoneExists() {
        // 准备
        String nickname = "新昵称";
        String phone = "13900001111";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(userRepository.existsByPhone(phone)).thenReturn(true);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.updateCurrentUserProfile(user.getUsername(), nickname, phone)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(userRepository).existsByPhone(phone);
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void changePasswordShouldSucceedWhenOldPasswordCorrect() {
        // 准备
        String oldPassword = "oldPassword";
        String newPassword = "newPassword";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(oldPassword, user.getPassword())).thenReturn(true);
        when(passwordEncoder.matches(newPassword, user.getPassword())).thenReturn(false);
        when(passwordEncoder.encode(newPassword)).thenReturn("encodedNewPassword");
        // 执行
        boolean result = userService.changePassword(user.getUsername(), oldPassword, newPassword);
        // 验证
        assertTrue(result);
        assertEquals("encodedNewPassword", user.getPassword());
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder).encode(newPassword);
        verify(userRepository).save(user);
    }
    @Test
    void changePasswordShouldThrowExceptionWhenOldPasswordIncorrect() {
        // 准备
        String oldPassword = "wrongPassword";
        String newPassword = "newPassword";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(oldPassword, user.getPassword())).thenReturn(false);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.changePassword(user.getUsername(), oldPassword, newPassword)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder, never()).encode(any(String.class));
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void changePasswordShouldThrowExceptionWhenNewPasswordSameAsOld() {
        // 准备
        String oldPassword = "oldPassword";
        String newPassword = "oldPassword"; // 新密码与旧密码相同
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(oldPassword, user.getPassword())).thenReturn(true);
        when(passwordEncoder.matches(newPassword, user.getPassword())).thenReturn(true);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.changePassword(user.getUsername(), oldPassword, newPassword)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder, never()).encode(any(String.class));
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void updateAvatarShouldUpdateAvatarUrlWhenUserExists() {
        // 准备
        String avatarUrl = "https://example.com/avatar.jpg";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        UserVO result = userService.updateAvatar(user.getUsername(), avatarUrl);
        // 验证
        assertNotNull(result);
        assertEquals(avatarUrl, user.getAvatar());
        verify(userRepository).findByUsername(user.getUsername());
        verify(userRepository).save(user);
    }
    @Test
    void updateEmailShouldUpdateEmailWhenValid() {
        // 准备
        String newEmail = "newemail@example.com";
        String emailCode = "123456";
        String password = "password123";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(password, user.getPassword())).thenReturn(true);
        when(userRepository.existsByEmail(newEmail)).thenReturn(false);
        when(emailService.validateVerificationCode(newEmail, emailCode)).thenReturn(true);
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        UserVO result = userService.updateEmail(user.getUsername(), newEmail, emailCode, password);
        // 验证
        assertNotNull(result);
        assertEquals(newEmail, user.getEmail());
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder).matches(password, user.getPassword());
        verify(userRepository).existsByEmail(newEmail);
        verify(emailService).validateVerificationCode(newEmail, emailCode);
        verify(userRepository).save(user);
    }
    @Test
    void updateEmailShouldThrowExceptionWhenPasswordIncorrect() {
        // 准备
        String newEmail = "newemail@example.com";
        String emailCode = "123456";
        String password = "wrongPassword";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(password, user.getPassword())).thenReturn(false);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.updateEmail(user.getUsername(), newEmail, emailCode, password)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder).matches(password, user.getPassword());
        verify(userRepository, never()).existsByEmail(any());
        verify(emailService, never()).validateVerificationCode(any(), any());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void updateEmailShouldThrowExceptionWhenEmailExists() {
        // 准备
        String newEmail = "newemail@example.com";
        String emailCode = "123456";
        String password = "password123";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(password, user.getPassword())).thenReturn(true);
        when(userRepository.existsByEmail(newEmail)).thenReturn(true);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.updateEmail(user.getUsername(), newEmail, emailCode, password)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder).matches(password, user.getPassword());
        verify(userRepository).existsByEmail(newEmail);
        verify(emailService, never()).validateVerificationCode(any(), any());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void updateEmailShouldThrowExceptionWhenEmailCodeInvalid() {
        // 准备
        String newEmail = "newemail@example.com";
        String emailCode = "123456";
        String password = "password123";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(password, user.getPassword())).thenReturn(true);
        when(userRepository.existsByEmail(newEmail)).thenReturn(false);
        when(emailService.validateVerificationCode(newEmail, emailCode)).thenReturn(false);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.updateEmail(user.getUsername(), newEmail, emailCode, password)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder).matches(password, user.getPassword());
        verify(userRepository).existsByEmail(newEmail);
        verify(emailService).validateVerificationCode(newEmail, emailCode);
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void getBasicUserInfoShouldReturnBasicInfoWhenUserExists() {
        // 准备
        Long userId = 1L;
        user.setId(userId);
        user.setNickname("测试用户");
        user.setAvatar("https://example.com/avatar.jpg");
        when(userRepository.findById(userId)).thenReturn(Optional.of(user));
        // 执行
        UserVO result = userService.getBasicUserInfo(userId);
        // 验证
        assertNotNull(result);
        assertEquals(userId, result.getId());
        assertEquals(user.getUsername(), result.getUsername());
        assertEquals(user.getNickname(), result.getNickname());
        assertEquals(user.getAvatar(), result.getAvatar());
        verify(userRepository).findById(userId);
    }
    @Test
    void getBasicUserInfoShouldThrowExceptionWhenUserNotExists() {
        // 准备
        Long userId = 1L;
        when(userRepository.findById(userId)).thenReturn(Optional.empty());
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.getBasicUserInfo(userId)
        );
        verify(userRepository).findById(userId);
    }
    @Test
    void uploadAndUpdateAvatarShouldSucceedWhenFileValid() throws IOException {
        // 准备
        String avatarUrl = "http://localhost:8999/media/avatars/testuser/uuid-test.jpg";
        String objectName = "avatars/testuser/uuid-test.jpg";
        MultipartFile mockFile = mock(MultipartFile.class);
        when(mockFile.getContentType()).thenReturn("image/jpeg");
        when(mockFile.getSize()).thenReturn(1024L); // 1KB
        when(mockFile.getOriginalFilename()).thenReturn("test.jpg");
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(minioService.uploadFile(contains("avatars/" + user.getUsername()), any(), eq("image/jpeg"))).thenReturn(avatarUrl);
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        Map<String, String> result = userService.uploadAndUpdateAvatar(user.getUsername(), mockFile);
        // 验证
        assertNotNull(result);
        assertTrue(result.containsKey("avatarUrl"));
        assertEquals(avatarUrl, result.get("avatarUrl"));
        verify(userRepository).findByUsername(user.getUsername());
        verify(minioService).uploadFile(anyString(), any(), anyString());
        verify(userRepository).save(user);
    }
    @Test
    void uploadAndUpdateAvatarShouldThrowExceptionWhenFileTypeInvalid() {
        // 准备
        MultipartFile mockFile = mock(MultipartFile.class);
        when(mockFile.getContentType()).thenReturn("application/pdf");
        // 执行和验证
        BusinessException exception = assertThrows(BusinessException.class, () -> {
            userService.uploadAndUpdateAvatar(user.getUsername(), mockFile);
        });
        assertEquals(400, exception.getCode());
        assertTrue(exception.getMessage().contains("只支持上传图片文件"));
        verify(minioService, never()).uploadFile(anyString(), any(), anyString());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void uploadAndUpdateAvatarShouldThrowExceptionWhenFileSizeTooLarge() {
        // 准备
        MultipartFile mockFile = mock(MultipartFile.class);
        when(mockFile.getContentType()).thenReturn("image/jpeg");
        when(mockFile.getSize()).thenReturn(3 * 1024 * 1024L); // 3MB
        // 执行和验证
        BusinessException exception = assertThrows(BusinessException.class, () -> {
            userService.uploadAndUpdateAvatar(user.getUsername(), mockFile);
        });
        assertEquals(400, exception.getCode());
        assertTrue(exception.getMessage().contains("文件大小不能超过2MB"));
        verify(minioService, never()).uploadFile(anyString(), any(), anyString());
        verify(userRepository, never()).save(any(User.class));
    }
}
</file>

</files>

This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-11T11:09:11.735Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
front/src/app/courses/[id]/
front/src/components/permissions/
front/src/models/
src/main/java/com/zhangziqi/online_course_mine/model/security/
src/main/java/com/zhangziqi/online_course_mine/security/service/
src/main/resources/db/migration/
src/test/resources/
.gitattributes
.gitignore
docs/测试说明.md
docs/实现进度.md
docs/系统设计说明.md
docs/下一阶段开发需求.md
docs/项目结构说明.md
docs/项目配置说明.md
docs/api.md
docs/API接口说明.md
docs/fornt/开发进度.md
docs/fornt/前端开发规划.md
front/.cursorrules
front/.gitignore
front/components.json
front/eslint.config.mjs
front/next.config.ts
front/package.json
front/postcss.config.mjs
front/public/file.svg
front/public/globe.svg
front/public/next.svg
front/public/vercel.svg
front/public/window.svg
front/README.md
front/src/app/(auth)/layout.tsx
front/src/app/(auth)/login/page.tsx
front/src/app/(auth)/register/page.tsx
front/src/app/dashboard/institutions/[id]/page.tsx
front/src/app/dashboard/institutions/page.tsx
front/src/app/dashboard/layout.tsx
front/src/app/dashboard/page.tsx
front/src/app/dashboard/permissions/page.tsx
front/src/app/dashboard/profile/page.tsx
front/src/app/dashboard/roles/page.tsx
front/src/app/dashboard/users/page.tsx
front/src/app/globals.css
front/src/app/institution/apply/page.tsx
front/src/app/institution/page.tsx
front/src/app/institution/register/page.tsx
front/src/app/institution/status/page.tsx
front/src/app/layout.tsx
front/src/app/page.tsx
front/src/components/dashboard/header.tsx
front/src/components/dashboard/permissions/delete-confirmation-dialog.tsx
front/src/components/dashboard/permissions/permission-form.tsx
front/src/components/dashboard/roles/delete-confirmation-dialog.tsx
front/src/components/dashboard/roles/permission-dialog.tsx
front/src/components/dashboard/roles/role-form.tsx
front/src/components/dashboard/sidebar.tsx
front/src/components/dashboard/users/delete-confirmation-dialog.tsx
front/src/components/dashboard/users/role-assignment-dialog.tsx
front/src/components/dashboard/users/user-form.tsx
front/src/components/dashboard/users/user-list.tsx
front/src/components/providers/theme-provider.tsx
front/src/components/ui/alert-dialog.tsx
front/src/components/ui/alert.tsx
front/src/components/ui/avatar.tsx
front/src/components/ui/badge.tsx
front/src/components/ui/button.tsx
front/src/components/ui/captcha.tsx
front/src/components/ui/card.tsx
front/src/components/ui/checkbox.tsx
front/src/components/ui/dialog.tsx
front/src/components/ui/dropdown-menu.tsx
front/src/components/ui/form.tsx
front/src/components/ui/input.tsx
front/src/components/ui/label.tsx
front/src/components/ui/pagination.tsx
front/src/components/ui/scroll-area.tsx
front/src/components/ui/select.tsx
front/src/components/ui/separator.tsx
front/src/components/ui/sheet.tsx
front/src/components/ui/skeleton.tsx
front/src/components/ui/sonner.tsx
front/src/components/ui/switch.tsx
front/src/components/ui/table.tsx
front/src/components/ui/tabs.tsx
front/src/components/ui/textarea.tsx
front/src/components/ui/tooltip.tsx
front/src/lib/utils.ts
front/src/middleware.ts
front/src/services/api.ts
front/src/services/auth.ts
front/src/services/institution.ts
front/src/services/institutionAuth.ts
front/src/services/institutionMember.ts
front/src/services/permission.ts
front/src/services/reviewerInstitution.ts
front/src/services/role.ts
front/src/services/user.ts
front/src/stores/auth-store.ts
front/src/stores/permission-store.ts
front/src/stores/role-store.ts
front/src/stores/ui-store.ts
front/src/stores/user-management-store.ts
front/src/types/api.ts
front/src/types/auth.ts
front/src/types/institution.ts
front/src/types/permission.ts
front/src/types/role.ts
front/src/types/user.ts
front/tsconfig.json
mvnw
mvnw.cmd
pom.xml
project-overview.md
src/main/java/com/zhangziqi/online_course_mine/config/CacheConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/JpaAuditingConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/KaptchaConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/MinioConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/OpenApiConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/redis/RedisConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/S3Config.java
src/main/java/com/zhangziqi/online_course_mine/config/security/JwtConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/security/SecurityConfig.java
src/main/java/com/zhangziqi/online_course_mine/config/StorageConfigProperties.java
src/main/java/com/zhangziqi/online_course_mine/controller/AuthController.java
src/main/java/com/zhangziqi/online_course_mine/controller/InstitutionAuthController.java
src/main/java/com/zhangziqi/online_course_mine/controller/InstitutionController.java
src/main/java/com/zhangziqi/online_course_mine/controller/InstitutionMemberController.java
src/main/java/com/zhangziqi/online_course_mine/controller/MediaController.java
src/main/java/com/zhangziqi/online_course_mine/controller/PermissionController.java
src/main/java/com/zhangziqi/online_course_mine/controller/ReviewerInstitutionController.java
src/main/java/com/zhangziqi/online_course_mine/controller/RoleController.java
src/main/java/com/zhangziqi/online_course_mine/controller/UserController.java
src/main/java/com/zhangziqi/online_course_mine/exception/BusinessException.java
src/main/java/com/zhangziqi/online_course_mine/exception/GlobalExceptionHandler.java
src/main/java/com/zhangziqi/online_course_mine/exception/ResourceNotFoundException.java
src/main/java/com/zhangziqi/online_course_mine/model/converter/InstitutionApplicationConverter.java
src/main/java/com/zhangziqi/online_course_mine/model/converter/InstitutionConverter.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/ChangePasswordDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/EmailUpdateDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/EmailVerificationDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/InstitutionApplicationQueryDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/InstitutionApplyDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/InstitutionRegisterDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/JwtTokenDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/LoginDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/media/MediaUploadInitDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/media/PartCompletionDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/media/PresignedUrlInfo.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/media/UploadInitiationVO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/media/UploadStatusInfo.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/media/UploadStatusVO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/PermissionDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/RefreshTokenDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/RegisterDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/RoleDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/UserDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/UserProfileDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/dto/UserQueryDTO.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/BaseEntity.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Institution.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/InstitutionApplication.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Media.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Permission.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/Role.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/StorageQuota.java
src/main/java/com/zhangziqi/online_course_mine/model/entity/User.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/MediaStatus.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/MediaType.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/QuotaType.java
src/main/java/com/zhangziqi/online_course_mine/model/enums/RoleEnum.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/InstitutionApplicationVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/InstitutionVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/MediaVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/PermissionVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/QuotaInfoVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/Result.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/RoleVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/StorageQuotaVO.java
src/main/java/com/zhangziqi/online_course_mine/model/vo/UserVO.java
src/main/java/com/zhangziqi/online_course_mine/OnlineCourseMineApplication.java
src/main/java/com/zhangziqi/online_course_mine/repository/InstitutionApplicationRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/InstitutionRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/MediaRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/PermissionRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/RoleRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/StorageQuotaRepository.java
src/main/java/com/zhangziqi/online_course_mine/repository/UserRepository.java
src/main/java/com/zhangziqi/online_course_mine/security/jwt/JwtAuthenticationFilter.java
src/main/java/com/zhangziqi/online_course_mine/security/jwt/JwtTokenProvider.java
src/main/java/com/zhangziqi/online_course_mine/security/jwt/TokenBlacklistService.java
src/main/java/com/zhangziqi/online_course_mine/security/SecurityUtil.java
src/main/java/com/zhangziqi/online_course_mine/security/UserDetailsServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/security/UserPrincipal.java
src/main/java/com/zhangziqi/online_course_mine/service/AuthService.java
src/main/java/com/zhangziqi/online_course_mine/service/CaptchaService.java
src/main/java/com/zhangziqi/online_course_mine/service/EmailService.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/AuthServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/CaptchaServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/EmailServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/InstitutionAuthServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/InstitutionServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/MediaServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/MinioServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/PermissionServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/RoleServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/S3MultipartUploadManager.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/StorageQuotaServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/UploadStatusService.java
src/main/java/com/zhangziqi/online_course_mine/service/impl/UserServiceImpl.java
src/main/java/com/zhangziqi/online_course_mine/service/InstitutionAuthService.java
src/main/java/com/zhangziqi/online_course_mine/service/InstitutionService.java
src/main/java/com/zhangziqi/online_course_mine/service/MediaService.java
src/main/java/com/zhangziqi/online_course_mine/service/MinioService.java
src/main/java/com/zhangziqi/online_course_mine/service/PermissionService.java
src/main/java/com/zhangziqi/online_course_mine/service/RoleService.java
src/main/java/com/zhangziqi/online_course_mine/service/StorageQuotaService.java
src/main/java/com/zhangziqi/online_course_mine/service/UserService.java
src/main/java/com/zhangziqi/online_course_mine/util/DataInitializer.java
src/main/resources/application-dev.yml
src/main/resources/application-test.yml
src/main/resources/application.yml
src/main/resources/templates/email/application-approved.html
src/main/resources/templates/email/application-confirmation.html
src/main/resources/templates/email/application-rejected.html
src/main/resources/templates/email/email-update-code.html
src/main/resources/templates/email/verification-code.html
src/test/java/com/zhangziqi/online_course_mine/config/TestSecurityConfig.java
src/test/java/com/zhangziqi/online_course_mine/controller/AuthControllerTest.java
src/test/java/com/zhangziqi/online_course_mine/controller/PermissionControllerTest.java
src/test/java/com/zhangziqi/online_course_mine/controller/RoleControllerTest.java
src/test/java/com/zhangziqi/online_course_mine/controller/UserControllerTest.java
src/test/java/com/zhangziqi/online_course_mine/integration/AuthControllerIntegrationTest.java
src/test/java/com/zhangziqi/online_course_mine/integration/MinioIntegrationTest.java
src/test/java/com/zhangziqi/online_course_mine/integration/PermissionControllerIntegrationTest.java
src/test/java/com/zhangziqi/online_course_mine/integration/RoleControllerIntegrationTest.java
src/test/java/com/zhangziqi/online_course_mine/integration/S3IntegrationTest.java
src/test/java/com/zhangziqi/online_course_mine/OnlineCourseMineApplicationTests.java
src/test/java/com/zhangziqi/online_course_mine/security/jwt/JwtTokenProviderTest.java
src/test/java/com/zhangziqi/online_course_mine/security/TestUserDetailsService.java
src/test/java/com/zhangziqi/online_course_mine/service/AuthServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/CaptchaServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/EmailServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/InstitutionAuthServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/InstitutionServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/MediaServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/MinioServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/PermissionServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/RoleServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/StorageQuotaServiceTest.java
src/test/java/com/zhangziqi/online_course_mine/service/UserServiceTest.java
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitattributes">
/mvnw text eol=lf
*.cmd text eol=crlf
</file>

<file path=".gitignore">
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/
</file>

<file path="docs/测试说明.md">
# 测试说明文档

## 测试策略

本项目采用分层测试策略，确保代码质量和功能稳定性。测试分为三个主要层次：单元测试、控制器测试和集成测试。

### 测试环境

- 使用H2内存数据库进行测试
- 所有测试类添加`@ActiveProfiles("test")`注解，确保使用测试环境配置
- 测试配置文件位于`src/test/resources/application-test.yml`
- 启用Bean覆盖：`spring.main.allow-bean-definition-overriding=true`

## 测试分层架构

### 1. 单元测试（Unit Tests）

**目标**：测试单个组件的功能，完全隔离于其他组件。

**配置**：
- 使用`@ExtendWith(MockitoExtension.class)`
- 通过`@Mock`模拟所有依赖
- 通过`@InjectMocks`注入被测试组件
- 不加载Spring上下文，运行效率最高

**位置**：`src/test/java/com/zhangziqi/online_course_mine/service`

**示例**：
```java
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test")
public class CaptchaServiceTest {
    @Mock
    private DefaultKaptcha captchaProducer;
    
    @InjectMocks
    private CaptchaServiceImpl captchaService;
    
    // 测试方法...
}
```

### 2. 控制器测试（Controller Tests）

**目标**：测试API的参数验证、请求处理和响应格式。

**配置**：
- 使用`@SpringBootTest`加载应用上下文
- 使用`@AutoConfigureMockMvc(addFilters = false)`禁用安全过滤器链
- 使用`@MockBean`模拟服务层组件

**位置**：`src/test/java/com/zhangziqi/online_course_mine/controller`

**示例**：
```java
@SpringBootTest
@AutoConfigureMockMvc(addFilters = false)
@ActiveProfiles("test")
public class AuthControllerTest {
    @Autowired
    private MockMvc mockMvc;
    
    @MockBean
    private AuthService authService;
    
    // 测试方法...
}
```

### 3. 集成测试（Integration Tests）

**目标**：测试多个组件协同工作，包括安全过滤器和服务层。

**配置**：
- 使用`@SpringBootTest`加载完整应用上下文
- 使用`@Import(TestSecurityConfig.class)`导入测试安全配置
- 结合真实组件和必要的模拟组件

**位置**：`src/test/java/com/zhangziqi/online_course_mine/integration`

**示例**：
```java
@SpringBootTest(properties = {"spring.main.allow-bean-definition-overriding=true"})
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Import(TestSecurityConfig.class)
public class AuthControllerIntegrationTest {
    @Autowired
    private MockMvc mockMvc;
    
    @MockBean
    private AuthService authService;
    
    // 测试方法...
}
```

### 4. 文件存储测试

**目标**：测试MinIO和S3 API的功能，包括文件上传、删除、URL生成等。

**配置**：
- 使用`@SpringBootTest`加载应用上下文
- 使用`@EnabledIfEnvironmentVariable`条件注解控制测试执行
- 测试结束后清理测试文件和存储桶

### 5. 存储配额测试

**目标**：测试机构存储配额管理功能，包括配额检查、更新和查询。

**测试类**：
```java
@ExtendWith(MockitoExtension.class)
class StorageQuotaServiceTest {
    @Mock
    private StorageQuotaRepository storageQuotaRepository;
    
    @Mock
    private InstitutionRepository institutionRepository;
    
    @InjectMocks
    private StorageQuotaServiceImpl storageQuotaService;
    
    // 测试方法...
}
```

**测试场景**：
1. **配额检查测试**
   - `hasEnoughQuota_WhenInstitutionNotExists_ReturnsFalse`
   - `hasEnoughQuota_WhenQuotaNotExists_ReturnsTrue`
   - `hasEnoughQuota_WhenQuotaExpired_ReturnsFalse`
   - `hasEnoughQuota_WhenNotEnoughSpace_ReturnsFalse`
   - `hasEnoughQuota_WhenEnoughSpace_ReturnsTrue`

2. **配额更新测试**
   - `updateUsedQuota_WhenInstitutionNotExists_ThrowsException`
   - `updateUsedQuota_WhenQuotaExists_UpdatesSuccessfully`
   - `updateUsedQuota_WhenQuotaNotExists_CreatesDefaultQuota`

3. **配额查询测试**
   - `getQuotaInfo_WhenInstitutionNotExists_ThrowsException`
   - `getQuotaInfo_WhenQuotaExists_ReturnsQuotaInfo`
   - `getAllQuotas_WhenInstitutionNotExists_ThrowsException`
   - `getAllQuotas_WhenQuotasExist_ReturnsAllQuotas`

4. **配额设置测试**
   - `setQuota_WhenInstitutionNotExists_ThrowsException`
   - `setQuota_WhenSettingNewQuota_CreatesSuccessfully`

**测试要点**：
- 验证配额计算的准确性
- 测试配额更新时的并发处理
- 验证配额过期逻辑
- 测试默认配额创建
- 确保总配额同步更新

**位置**：`src/test/java/com/zhangziqi/online_course_mine/service/StorageQuotaServiceTest.java`

### JWT相关测试

#### 令牌刷新测试
1. **令牌提供者测试（JwtTokenProviderTest）**:
   - `refreshTokenShouldCreateNewAccessTokenWithUserRoles` - 测试刷新令牌时正确获取用户角色（仅提取角色，不包括详细权限）
   - `refreshTokenShouldThrowExceptionWhenUserNotFound` - 测试用户不存在时的异常处理

2. **认证服务测试（AuthServiceTest）**:
   - `refreshTokenShouldSucceedWhenTokenValid` - 测试有效令牌的刷新流程
   - `refreshTokenShouldThrowExceptionWhenTokenInvalid` - 测试无效令牌的处理
   - `refreshTokenShouldThrowExceptionWhenTokenBlacklisted` - 测试黑名单令牌的处理

3. **测试要点**:
   - 验证刷新后的令牌仅包含用户角色信息
   - 验证令牌黑名单的处理逻辑
   - 测试完整的令牌刷新流程

### 机构相关测试

#### 1. 机构申请测试
1. **InstitutionServiceTest**:
   - `applyInstitutionShouldSucceedWhenValid` - 测试有效的机构申请
   - `applyInstitutionShouldThrowExceptionWhenEmailExists` - 测试重复联系邮箱的处理
   - `getApplicationStatusShouldReturnStatusWhenExists` - 测试获取申请状态功能
   - `getInstitutionRegisterCodeShouldSucceedWhenValid` - 测试获取机构注册码

2. **InstitutionControllerTest**:
   - `testApplyInstitution` - 测试机构申请API
   - `testGetApplicationStatus` - 测试获取申请状态API

#### 2. 机构审核测试
1. **InstitutionServiceTest**:
   - `getApplicationsShouldReturnPagedResultsWithFilters` - 测试获取机构申请列表（支持分页和筛选）
   - `approveApplicationShouldSucceedWhenPending` - 测试审核通过功能
   - `rejectApplicationShouldSucceedWhenPending` - 测试审核拒绝功能
   - `getApplicationDetailShouldReturnDetailWhenExists` - 测试获取申请详情功能

2. **ReviewerInstitutionControllerTest**:
   - `testGetApplications` - 测试获取申请列表API
   - `testGetApplicationDetail` - 测试获取申请详情API
   - `testApproveApplication` - 测试审核通过API
   - `testRejectApplication` - 测试审核拒绝API

#### 3. 机构用户注册测试
1. **InstitutionAuthServiceTest**:
   - `registerWithInstitutionCodeShouldSucceedWhenValid` - 测试使用有效注册码注册机构用户
   - `registerWithInstitutionCodeShouldThrowExceptionWhenInvalidCode` - 测试无效注册码的处理
   - `registerWithInstitutionCodeShouldThrowExceptionWhenInactiveInstitution` - 测试禁用机构的处理
   - `registerWithInstitutionCodeShouldThrowExceptionWhenCodeInvalid` - 测试机构注册码不存在的处理

2. **InstitutionAuthControllerTest**:
   - `testRegisterInstitutionMember` - 测试注册机构用户API
   - `testRegisterInstitutionMemberWithInvalidCaptcha` - 测试验证码无效的情况
   - `testRegisterInstitutionMemberWithInvalidEmailCode` - 测试邮箱验证码无效的情况

## 测试配置类

项目提供了专用的测试配置类`TestSecurityConfig`，用于集成测试：

```java
@TestConfiguration
@EnableWebSecurity
@Profile("test")
public class TestSecurityConfig {
    // 提供安全相关的模拟组件...
}
```

## 测试覆盖范围

### 已完成测试

- 认证控制器（AuthController）
  - 单元测试：`AuthControllerTest`
  - 集成测试：`AuthControllerIntegrationTest`
- 用户服务（UserService）
- 认证服务（AuthService）
- 验证码服务（CaptchaService）
- 用户自身管理功能
  - 获取当前用户信息
  - 更新个人资料
  - 修改密码
  - 更新头像
  - 更新邮箱
- 权限管理功能
  - 单元测试：`PermissionControllerTest`、`PermissionServiceTest`
  - 集成测试：`PermissionControllerIntegrationTest`
- 机构管理功能
  - 单元测试：`InstitutionServiceTest`、`InstitutionAuthServiceTest`
  - 控制器测试：`InstitutionControllerTest`、`ReviewerInstitutionControllerTest`
  - 邮件通知测试：`EmailServiceTest`

### 用户自身管理测试

用户自身管理相关功能的测试分为两部分：

1. **服务层测试 (UserServiceTest)**:
   - `getCurrentUserShouldReturnUserInfoWhenUserExists` - 测试获取当前用户信息
   - `updateCurrentUserProfileShouldUpdateUserInfoWhenValid` - 测试更新个人资料
   - `updateCurrentUserProfileShouldThrowExceptionWhenPhoneExists` - 测试手机号冲突检查
   - `changePasswordShouldSucceedWhenOldPasswordCorrect` - 测试成功修改密码
   - `changePasswordShouldThrowExceptionWhenOldPasswordIncorrect` - 测试旧密码错误
   - `changePasswordShouldThrowExceptionWhenNewPasswordSameAsOld` - 测试新旧密码相同
   - `updateAvatarShouldUpdateAvatarUrlWhenUserExists` - 测试更新头像
   - `updateEmailShouldUpdateEmailWhenValid` - 测试更新邮箱
   - `updateEmailShouldThrowExceptionWhenPasswordIncorrect` - 测试密码验证失败
   - `updateEmailShouldThrowExceptionWhenEmailExists` - 测试邮箱已存在
   - `updateEmailShouldThrowExceptionWhenEmailCodeInvalid` - 测试验证码无效
   - `getBasicUserInfoShouldReturnBasicInfoWhenUserExists` - 测试获取基本信息

2. **控制器测试 (UserControllerTest)**:
   - `testGetCurrentUser` - 测试获取当前用户API
   - `testUpdateCurrentUser` - 测试更新个人信息API
   - `testChangePassword` - 测试修改密码API
   - `testChangePasswordWithMismatchConfirmation` - 测试密码确认不匹配
   - `testUpdateEmail` - 测试更新邮箱API
   - `testUploadAvatar` - 测试上传头像API
   - `testGetBasicUserInfo` - 测试获取用户基本信息API

3. **邮箱更新验证码测试**:
   - `AuthControllerTest.testSendEmailUpdateCode` - 测试发送邮箱更新验证码API
   - `AuthControllerTest.testSendEmailUpdateCodeWithInvalidCaptcha` - 测试验证码无效场景
   - `EmailServiceTest.testSendEmailUpdateCode` - 测试邮箱更新验证码发送服务
   - `AuthControllerIntegrationTest.testSendEmailUpdateCode` - 集成测试邮箱更新验证码流程
   - `AuthControllerIntegrationTest.testSendEmailUpdateCodeWithInvalidCaptcha` - 集成测试无效验证码

### 权限管理测试

权限管理相关功能的测试也分为多个部分：

1. **服务层测试 (PermissionServiceTest)**:
   - `getPermissionListShouldReturnAllPermissions` - 测试获取所有权限
   - `getPermissionByIdShouldReturnPermissionWhenExists` - 测试根据ID获取权限
   - `getPermissionByIdShouldThrowExceptionWhenNotExists` - 测试权限不存在异常
   - `createPermissionShouldReturnCreatedPermission` - 测试创建权限
   - `createPermissionShouldThrowExceptionWhenCodeExists` - 测试权限代码已存在异常
   - `updatePermissionShouldReturnUpdatedPermission` - 测试更新权限
   - `updatePermissionShouldThrowExceptionWhenNotExists` - 测试更新不存在权限异常
   - `updatePermissionShouldThrowExceptionWhenCodeExists` - 测试更新权限代码冲突异常
   - `deletePermissionShouldSucceedWhenPermissionExists` - 测试删除权限
   - `deletePermissionShouldThrowExceptionWhenPermissionNotExists` - 测试删除不存在权限异常
   - `deletePermissionShouldThrowExceptionWhenPermissionInUse` - 测试删除被引用权限异常
   - `batchDeletePermissionsShouldSucceedWhenPermissionsExist`
</file>

<file path="docs/实现进度.md">
# 在线课程平台实现进度

## 已完成内容

### 基础设施
- [x] 项目结构设计
- [x] 多环境配置（dev, test）
- [x] H2数据库集成（用于测试）
- [x] Redis缓存集成
- [x] 全局异常处理
- [x] 统一响应格式
- [x] OpenAPI文档支持
- [x] 验证码功能
- [x] 邮箱验证功能
  - [x] 邮件服务集成
  - [x] 验证码生成和验证
  - [x] Redis存储验证码
  - [x] 邮件模板支持
- [x] 文件存储集成
  - [x] MinIO对象存储服务集成
  - [x] AWS S3兼容API集成
  - [x] 文件上传、下载、删除功能
  - [x] 公开资源使用永久URL，私有资源使用预签名URL
  - [x] 文件资源自动清理（头像更新时删除旧文件）
  - [x] 文件上传大小限制优化（最大100MB）
  - [x] 存储配额管理
    - [x] 机构存储配额实体设计
    - [x] 配额类型定义（VIDEO/DOCUMENT/TOTAL）
    - [x] 配额检查和更新服务
    - [x] 配额使用情况查询
    - [x] 自动配额计算和更新
    - [x] 配额过期时间支持

### 架构优化
- [x] 严格遵循分层架构
  - [x] Controller层只负责接收请求和返回响应
  - [x] Service层封装所有业务逻辑和基础设施交互
  - [x] Repository层专注于数据访问
- [x] 代码重构
  - [x] 移除Controller直接依赖基础设施服务
  - [x] 优化异常处理流程

### 实体类设计
- [x] 基础实体类（BaseEntity）
- [x] 用户实体（User）
- [x] 角色实体（Role）
- [x] 权限实体（Permission）
- [x] 机构实体（Institution）
- [x] 角色枚举（RoleEnum）

### 数据访问层
- [x] 用户Repository
- [x] 角色Repository
- [x] 权限Repository
- [x] 机构Repository

### 安全框架
- [x] Spring Security配置
- [x] JWT令牌配置
- [x] JWT令牌提供者
  - [x] 优化令牌内容，仅包含角色信息，减小令牌体积
  - [x] 刷新令牌机制优化（仅验证黑名单）
  - [x] 完善令牌刷新的单元测试
- [x] JWT认证过滤器
- [x] Token黑名单服务（基于Redis）

### 认证授权
- [x] 用户详情服务
- [x] 认证服务
- [x] 用户服务
- [x] 注册接口
- [x] 登录接口
- [x] 刷新令牌接口
- [x] 注销接口
- [x] 数据初始化（角色、权限）
- [x] 基于角色的访问控制（@PreAuthorize）

### 权限管理
- [x] 用户管理接口
- [x] 角色管理接口
- [x] 权限管理接口

### 用户自身管理
- [x] 获取当前用户信息
- [x] 更新个人资料
- [x] 修改密码
- [x] 更新头像（MinIO存储）
- [x] 更新邮箱（验证码验证）
- [x] 获取用户基本信息
- [x] 邮箱更新专用验证码

### 机构管理
- [x] 机构申请功能
  - [x] 机构入驻申请
  - [x] 申请状态查询
  - [x] 申请审核功能
  - [x] 审核结果通知
- [x] 机构用户注册
  - [x] 机构注册码生成
  - [x] 机构用户注册
  - [x] 邮箱验证
  - [x] 角色分配

## 待完成内容

### 业务功能
- [ ] 课程管理
- [ ] 内容审核
- [ ] 用户学习
- [ ] 评价系统
- [ ] 订单支付

## 测试计划
- [x] 测试环境配置
  - [x] H2内存数据库
  - [x] 测试专用配置文件
  - [x] Bean冲突解决方案
- [x] 单元测试
  - [x] 服务层测试
    - [x] 用户服务测试
    - [x] 认证服务测试
    - [x] 验证码服务测试
    - [x] 邮件服务测试
    - [x] 用户自身管理功能测试
    - [x] 权限服务测试
    - [x] 角色服务测试
    - [x] 机构服务测试
  - [ ] 工具类测试
- [x] 控制器测试
  - [x] 认证控制器测试
    - [x] 图形验证码测试
    - [x] 邮箱验证码测试
    - [x] 注册登录测试
    - [x] 邮箱更新验证码测试
  - [x] 用户控制器测试
    - [x] 用户管理测试
    - [x] 用户自身管理测试
  - [x] 权限管理测试
    - [x] 权限控制器测试
    - [x] 角色控制器测试
  - [x] 机构管理测试
    - [x] 机构申请控制器测试
    - [x] 机构审核控制器测试
    - [x] 机构用户注册测试
- [x] 集成测试
  - [x] 认证控制器集成测试
    - [x] 完整注册流程测试
    - [x] 邮箱验证失败测试
    - [x] 邮箱更新验证码测试
  - [x] 权限管理集成测试
    - [x] 权限控制器集成测试
    - [x] 角色控制器集成测试
    - [x] 权限管理授权测试
  - [x] 机构管理集成测试
    - [x] 机构申请流程测试
    - [x] 机构审核流程测试
    - [x] 机构用户注册流程测试
  - [ ] Repository测试
  - [ ] 端到端测试

## 下一步计划
1. ✓ 完善用户管理功能
2. ✓ 实现角色管理功能
3. ✓ 实现权限管理功能
4. ✓ 实现用户自身管理功能
5. ✓ 完善权限管理接口的测试
6. ✓ 完善角色管理接口的测试
7. ✓ 实现机构申请和注册功能
   - ✓ 机构申请流程
   - ✓ 机构审核流程
   - ✓ 机构用户注册
8. 开始课程管理相关功能
   - 设计课程相关实体类（课程、章节、课时等）
   - 实现课程Repository层
   - 实现课程Service层
   - 实现课程Controller层
9. 设计和实现课程内容审核功能

## 已实现API接口

### 认证管理
- `GET /api/auth/captcha/key` - 获取验证码key
- `GET /api/auth/captcha/image/{key}` - 获取验证码图片
- `POST /api/auth/email-verification-code` - 发送邮箱验证码（用于注册）
- `POST /api/auth/email-update-code` - 发送邮箱更新验证码（用于更新邮箱）
- `POST /api/auth/register` - 用户注册（包含邮箱验证）
- `POST /api/auth/login` - 用户登录
- `POST /api/auth/refresh-token` - 刷新令牌
- `POST /api/auth/logout` - 用户注销

### 用户管理
- `GET /api/users` - 分页查询用户列表
- `GET /api/users/{id}` - 获取用户详情
- `POST /api/users` - 创建用户
- `PUT /api/users/{id}` - 更新用户
- `DELETE /api/users/{id}` - 删除用户
- `PATCH /api/users/{id}/status` - 修改用户状态
- `PUT /api/users/{id}/roles` - 给用户分配角色
- `DELETE /api/users/batch` - 批量删除用户

### 用户自身管理
- `GET /api/users/current` - 获取当前用户信息
- `PUT /api/users/current` - 更新当前用户信息
- `PUT /api/users/current/password` - 修改当前用户密码
- `PUT /api/users/current/email` - 更新当前用户邮箱
- `POST /api/users/current/avatar` - 上传/更新当前用户头像
- `GET /api/users/basic/{userId}` - 获取用户基本信息

### 角色管理
- `GET /api/roles` - 获取角色列表
- `GET /api/roles/{id}` - 获取角色详情
- `POST /api/roles` - 创建角色
- `PUT /api/roles/{id}` - 更新角色
- `DELETE /api/roles/{id}` - 删除角色
- `PUT /api/roles/{id}/permissions` - 给角色分配权限
- `DELETE /api/roles/batch` - 批量删除角色

### 权限管理
- `GET /api/permissions` - 获取权限列表
- `GET /api/permissions/{id}` - 获取权限详情
- `POST /api/permissions` - 创建权限
- `PUT /api/permissions/{id}` - 更新权限
- `DELETE /api/permissions/{id}` - 删除权限
- `DELETE /api/permissions/batch` - 批量删除权限

### 机构管理
- `POST /api/institutions/apply` - 申请创建机构
- `GET /api/institutions/application-status` - 查询申请状态
- `GET /api/reviewer/institutions/applications` - 获取机构申请列表（审核员）
- `GET /api/reviewer/institutions/applications/{id}` - 获取申请详情（审核员）
- `POST /api/reviewer/institutions/applications/{id}/approve` - 审核通过（审核员）
- `POST /api/reviewer/institutions/applications/{id}/reject` - 审核拒绝（审核员）
- `POST /api/auth/institution/register` - 机构用户注册
- `GET /api/institutions/members/register-code` - 获取机构注册码

## 技术栈

- Spring Boot 3.3.9
- Spring Security
- Spring Data JPA
- Spring Data Redis
- JWT (JSON Web Token)
- Kaptcha (验证码)
- Thymeleaf (邮件模板)
- MinIO/S3 (文件存储)
- OpenAPI/Swagger文档
- JUnit 5 (单元测试)
- Mockito (模拟测试)
- H2 Database (测试环境)
- MySQL (开发环境)
</file>

<file path="docs/系统设计说明.md">
# 在线课程平台系统设计说明

## 认证与授权设计

### 邮箱验证
- 采用邮箱验证码方式确保邮箱真实性
- 验证码有效期：5分钟
- 存储方式：Redis（key前缀：email:verification:）
- 邮件模板：使用Thymeleaf模板引擎
- 验证流程：
  1. 用户获取图形验证码
  2. 验证图形验证码后发送邮箱验证码
  3. 注册时验证邮箱验证码
  4. 验证通过后完成注册

### 邮箱更新
- 采用专门的邮箱更新验证码确保邮箱真实性和操作安全性
- 验证码有效期：5分钟
- 存储方式：与注册验证码相同，使用Redis存储
- 专用邮件模板：email-update-code.html
- 更新流程：
  1. 用户获取图形验证码
  2. 验证图形验证码后发送邮箱更新验证码到新邮箱
  3. 用户提交更新请求，提供验证码和当前密码
  4. 系统验证密码和验证码，验证通过后更新邮箱

### JWT认证
- 采用无状态JWT认证方式
- 实现方式：短token + 刷新token模式
- 访问token有效期：1小时
- 刷新token有效期：7天
- 刷新机制：
  - 访问token过期后，使用刷新token获取新的访问token
  - 刷新token时只检查token是否在黑名单中
  - 令牌中仅包含用户角色信息，不包含详细权限
- token黑名单：使用Redis存储已注销但未过期的token
- 安全保障：
  - 验证刷新令牌的有效性和是否在黑名单中
  - 通过基于角色的权限控制确保API访问安全

### 角色权限设计（RBAC）
- **当前实现**：基于角色的访问控制
  - 使用`@PreAuthorize("hasRole('XXX')")`注解进行接口访问控制
  - 令牌中只存储角色信息，不包含详细权限
  - 简化的权限模型，基于固定的角色划分

- **未来计划**：
  - 完善为更细粒度的基于权限的访问控制
  - 实现动态权限分配和验证

系统定义了四种基本角色：

1. **普通用户（ROLE_USER）**
   - 默认角色，用户注册后即具有此角色
   - 权限：浏览课程、购买课程、学习课程、评价课程等

2. **管理员（ROLE_ADMIN）**
   - 系统管理员，具有最高权限
   - 权限：用户管理、角色管理、权限管理、系统配置等

3. **审核人员（ROLE_REVIEWER）**
   - 负责内容审核
   - 权限：审核课程内容、审核评论、内容管理等

4. **机构用户（ROLE_INSTITUTION）**
   - 课程提供机构账号
   - 特殊属性：机构ID（institutionId）
   - 权限：创建课程、管理课程、查看统计数据等

### 权限粒度控制
- 基于URL的权限控制
- 基于方法的权限控制（@PreAuthorize）
- 自定义权限评估器
- 接口权限文档化

## 缓存设计

### Redis缓存
- 用途：
  - 会话管理
  - 接口限流
  - 热点数据缓存
  - Token黑名单
  - 验证码存储
    - 图形验证码：5分钟过期
    - 邮箱验证码：5分钟过期
  
- 缓存策略：
  - 热门课程列表：60分钟
  - 用户信息：30分钟
  - 课程详情：60分钟
  - 分类数据：120分钟
  
- 缓存前缀设计：
  - 用户相关：`user:${userId}:*`
  - 课程相关：`course:${courseId}:*`
  - 令牌黑名单：`token:blacklist:*`
  - 图形验证码：`captcha:${key}`
  - 邮箱验证码：`email:verification:${email}`
  - 邮箱更新验证码：`email:update:code:${userId}:${newEmail}`

- 缓存更新策略：
  - 更新数据库同时更新缓存
  - 设置合理的过期时间
  - 对热点数据采用预热机制

## 数据库设计

### 用户权限相关表
- `users` - 用户基本信息
  - id：主键
  - username：用户名
  - password：密码（加密存储）
  - email：邮箱
  - phone：手机号
  - avatar：头像
  - nickname：昵称
  - status：状态（正常、禁用、锁定）
  - created_at：创建时间
  - updated_at：更新时间
  - last_login_at：最后登录时间
  - institution_id：机构ID（仅机构用户）

- `roles` - 角色信息
  - id：主键
  - name：角色名称
  - code：角色编码（ROLE_USER, ROLE_ADMIN等）
  - description：角色描述
  - created_at：创建时间
  - updated_at：更新时间

- `permissions` - 权限信息
  - id：主键
  - name：权限名称
  - code：权限编码
  - description：权限描述
  - url：资源路径
  - method：HTTP方法
  - created_at：创建时间
  - updated_at：更新时间

- `user_roles` - 用户角色关联
  - user_id：用户ID
  - role_id：角色ID
  - created_at：创建时间

- `role_permissions` - 角色权限关联
  - role_id：角色ID
  - permission_id：权限ID
  - created_at：创建时间

- `institutions` - 机构信息
  - id：主键
  - name：机构名称
  - logo：机构Logo
  - description：机构描述
  - status：状态（0-待审核，1-正常，2-禁用）
  - contact_person：联系人
  - contact_phone：联系电话
  - contact_email：联系邮箱
  - address：地址
  - register_code：注册码
  - created_at：创建时间
  - updated_at：更新时间

- `institution_applications` - 机构申请
  - id：主键
  - application_id：申请ID（业务编号）
  - name：机构名称
  - logo：机构Logo
  - description：机构描述
  - contact_person：联系人
  - contact_phone：联系电话
  - contact_email：联系邮箱
  - address：地址
  - status：状态（0-待审核，1-已通过，2-已拒绝）
  - review_comment：审核意见
  - reviewer_id：审核人ID
  - reviewed_at：审核时间
  - institution_id：关联的机构ID
  - created_at：创建时间
  - updated_at：更新时间

### 课程相关表
- `courses` - 课程基本信息
- `chapters` - 课程章节
- `lessons` - 课程小节
- `resources` - 课程资源（视频、文档等）
- `categories` - 课程分类
- `tags` - 课程标签
- `course_tags` - 课程与标签关联

### 用户学习相关表
- `enrollments` - 课程报名/购买记录
- `learning_progress` - 学习进度
- `user_notes` - 用户笔记
- `favorites` - 用户收藏

### 评价与互动相关表
- `comments` - 评论信息
- `replies` - 回复信息
- `ratings` - 评分信息

### 交易相关表
- `orders` - 订单信息
- `payments` - 支付记录
- `refunds` - 退款记录
- `coupons` - 优惠券

## 业务流程

### 注册登录流程
1. 用户注册：输入基本信息 → 验证邮箱/手机 → 创建账号 → 分配默认角色
2. 用户登录：验证身份 → 生成JWT令牌（访问+刷新）→ 返回给客户端
3. 令牌刷新：访问令牌过期 → 使用刷新令牌请求新令牌 → 验证刷新令牌有效性 → 生成新令牌

### 机构申请和注册流程

#### 1. 机构申请流程
1. **申请提交**
   - 填写机构基本信息（名称、Logo、描述等）
   - 填写联系信息（联系人、电话、邮箱）
   - 验证图形验证码
   - 提交申请，生成申请ID

2. **申请审核**
   - 审核员查看申请列表（支持分页和筛选）
   - 查看申请详情
   - 审核通过或拒绝（需要填写审核意见）
   - 发送审核结果通知邮件

3. **审核通过处理**
   - 创建机构记录
   - 生成唯一的机构注册码
   - 发送包含注册码的通知邮件

#### 2. 机构用户注册流程
1. **注册准备**
   - 获取机构注册码（从审核通过邮件中）
   - 获取图形验证码

2. **邮箱验证**
   - 输入邮箱地址
   - 验证图形验证码
   - 发送邮箱验证码
   - 验证邮箱验证码

3. **注册提交**
   - 填写用户信息（用户名、密码等）
   - 提供机构注册码
   - 提交注册信息
   - 系统验证注册码有效性
   - 创建用户账号并分配机构角色
   - 关联用户与机构

4. **注册完成**
   - 返回注册成功信息
   - 跳转到登录页面

### 用户自身管理流程

#### 个人信息管理
1. 获取个人信息：调用`/api/users/current`接口获取当前登录用户详细信息
2. 更新个人信息：调用`/api/users/current`接口更新昵称、手机号等信息

#### 密码修改
1. 输入旧密码和新密码
2. 系统验证旧密码正确性
3. 系统验证新旧密码不同
4. 更新密码并加密存储

#### 头像上传
1. 用户选择头像文件
2. 系统验证文件类型（只允许图片）和大小（最大2MB）
3. 上传到MinIO存储服务，生成唯一文件名
4. 生成访问URL并更新用户头像字段

#### 邮箱更新
1. 用户输入新邮箱
2. 系统向新邮箱发送验证码（使用专用邮件模板）
3. 用户提交验证码和当前密码
4. 系统验证密码和验证码
5. 更新用户邮箱

## 用户自身管理功能详细设计

### 功能概述
用户自身管理功能是指已登录用户对自己账号信息进行管理的功能集合，包括查看个人信息、修改个人资料、修改密码、上传头像和更新邮箱等。此功能模块的目标是提供用户对自身信息的完整管理能力，提升用户体验。

### API设计

#### 1. 获取当前用户信息

- **请求方法**: `GET`
- **接口路径**: `/api/users/current`
- **权限要求**: 已登录用户
- **实现逻辑**:
  1. 从安全上下文中获取当前用户ID
  2. 根据用户ID从数据库中查询用户信息
  3. 返回用户信息，包括基本信息和角色信息

#### 2. 更新个人资料

- **请求方法**: `PUT`
- **接口路径**: `/api/users/current`
- **权限要求**: 已登录用户
- **请求参数**: 用户可修改的信息字段（昵称、手机号等）
- **实现逻辑**:
  1. 从安全上下文中获取当前用户ID
  2. 验证请求参数（昵称长度、手机号格式等）
  3. 更新用户信息到数据库
  4. 返回更新后的用户信息

#### 3. 修改密码

- **请求方法**: `PUT`
- **接口路径**: `/api/users/current/password`
- **权限要求**: 已登录用户
- **请求参数**: 旧密码、新密码、确认密码
- **实现逻辑**:
  1. 从安全上下文中获取当前用户ID
  2. 验证旧密码是否正确
  3. 验证新密码与确认密码是否一致
  4. 验证新密码是否符合强度要求
  5. 加密新密码并更新到数据库
  6. 返回成功响应
- **安全考量**:
  - 验证旧密码以确保是用户本人操作
  - 新密码与确认密码必须一致
  - 新密码必须满足一定的强度要求
  - 新密码不能与旧密码相同

#### 4. 上传头像

- **请求方式**: `POST`
- **接口路径**: `/api/users/current/avatar`
- **权限要求**: 已登录用户
- **请求参数**: 头像图片文件（MultipartFile）
- **实现逻辑**:
  1. 从安全上下文中获取当前用户ID
  2. 验证上传的文件类型和大小
  3. 生成文件存储路径和文件名
  4. 上传文件到MinIO/S3服务
  5. 更新用户头像URL到数据库
  6. 返回头像URL
- **技术实现**:
  - 使用MinIO/S3服务作为文件存储基础设施
  - 采用统一的存储路径格式：`avatars/{userId}/{timestamp}_{filename}`
  - 对上传的图片进行压缩和格式转换，优化存储和加载性能
  - 设置文件大小限制（如最大2MB）和类型限制（仅允许jpg、png等图片格式）
  - 为每个用户创建唯一的存储路径，避免文件名冲突
  - 生成带有时间戳的文件名，防止缓存问题

#### 5. 更新邮箱

a. **获取邮箱更新验证码**
- **请求方法**: `POST`
- **接口路径**: `/api/users/current/email-code`
- **权限要求**: 已登录用户
- **请求参数**: 新邮箱地址
- **实现逻辑**:
  - 从安全上下文中获取当前用户ID
  - 验证新邮箱格式和唯一性
  - 生成6位数字验证码
  - 使用模板发送包含验证码的邮件到新邮箱
  - 将验证码存储到Redis中，设置过期时间
  - 返回发送成功响应

b. **更新邮箱**
- **请求方法**: `PUT`
- **接口路径**: `/api/users/current/email`
- **权限要求**: 已登录用户
- **请求参数**: 新邮箱地址、验证码
- **实现逻辑**:
  - 从安全上下文中获取当前用户ID
  - 从Redis中获取之前存储的验证码
  - 验证用户提交的验证码是否正确
  - 如果验证通过，更新用户邮箱到数据库
  - 删除Redis中的验证码记录
  - 返回更新成功响应

### 安全控制

- **接口权限控制**: 所有用户自身管理的接口都需要用户登录才能访问，不需要额外的角色权限
- **数据权限控制**: 用户只能查看和修改自己的信息，通过JWT令牌中的用户ID来限制数据访问范围
- **数据验证**:
  - 所有输入数据都进行验证，防止恶意数据
  - 邮箱唯一性验证
  - 密码强度检查（长度、复杂度）
  - 文件上传类型和大小限制

### 性能优化

- **头像处理**:
  - 对上传的头像进行压缩和裁剪，减小存储空间和传输大小
  - 使用MinIO/S3等对象存储服务，提高文件存取效率
  - 考虑使用CDN加速头像加载
- **并发控制**:
  - 对频繁操作（如发送验证码）设置请求频率限制
  - 使用乐观锁防止数据并发修改冲突

## 存储配额设计

### 存储配额实体设计
- **StorageQuota实体**
  - id：配额ID
  - type：配额类型（VIDEO/DOCUMENT/TOTAL）
  - totalQuota：总配额大小（字节）
  - usedQuota：已使用配额（字节）
  - institution：所属机构（多对一关联）
  - createdAt：创建时间
  - updatedAt：更新时间
  - expiresAt：过期时间（可选，支持临时扩容）

### 配额类型设计
```java
public enum QuotaType {
    VIDEO,      // 视频配额
    DOCUMENT,   // 文档配额
    TOTAL       // 总配额
}
```

### 配额服务设计
- **核心功能**：
  - 配额检查：检查机构是否有足够配额上传指定大小的文件
  - 配额更新：更新已使用的配额（支持增加和减少）
  - 配额查询：获取机构的配额使用情况
  - 配额设置：设置或调整机构的配额大小

- **业务规则**：
  - 更新特定类型配额时自动更新总配额
  - 配额不足时禁止上传
  - 支持配额过期时间设置
  - 配额过期后禁止上传新文件

- **默认配额设置**：
  - VIDEO：5GB
  - DOCUMENT：2GB
  - TOTAL：10GB

### 配额管理流程
1. **配额初始化**：
   - 机构创建时自动初始化默认配额
   - 支持管理员手动设置配额

2. **配额检查流程**：
   - 验证机构存在性
   - 检查配额是否过期
   - 计算剩余配额
   - 判断是否满足上传需求

3. **配额更新流程**：
   - 更新特定类型配额
   - 同步更新总配额
   - 记录更新时间
   - 触发配额超限告警（可选）

4. **配额展示**：
```java
public class StorageQuotaVO {
    private Long id;
    private String type;           // 配额类型
    private Long totalQuota;       // 总配额
    private Long usedQuota;        // 已用配额
    private Long availableQuota;   // 可用配额
    private double usagePercentage; // 使用百分比
    private LocalDateTime expiresAt; // 过期时间
    private Long institutionId;    // 机构ID
}
```

## 文件存储设计

本系统实现了双重文件存储方案，支持MinIO对象存储和AWS S3兼容API，为文件上传、头像存储等功能提供基础设施。

### MinIO存储
- **配置属性**：
  - endpoint：MinIO服务端点
  - accessKey：访问密钥
  - secretKey：访问密钥密文
  - bucketName：存储桶名称
  
- **功能实现**：
  - 文件上传：支持流式上传，自动设置内容类型
  - 文件删除：根据对象名删除文件
  - URL生成：获取文件访问URL
  - 文件列表：获取存储桶中所有文件
  - 自动创建存储桶：检查并创建存储桶
  
- **访问策略优化**：
  - 公开资源（如用户头像）使用永久URL，而非预签名URL
  - 为存储桶设置公共读取权限，确保公开资源可直接访问
  - 永久URL格式：`endpoint/bucketName/objectName`
  - 优势：减少数据库存储长度需求，提高访问稳定性，消除URL过期问题

- **资源清理机制**：
  - 头像更新时自动删除旧文件，避免存储空间浪费
  - 从URL中提取对象名，使用MinioService删除旧文件
  - 错误处理确保即使删除旧文件失败，用户头像更新操作仍能正常完成
  - 实现高效的存储资源管理，防止无用文件积累
  
- **应用场景**：
  - 用户头像存储
  - 课程资源文件存储
  - 临时文件存储

### AWS S3兼容API
- **配置属性**：
  - endpoint：S3服务端点
  - region：区域
  - accessKey：访问密钥
  - secretKey：访问密钥密文
  - bucketName：存储桶名称
  - pathStyleAccess：是否使用路径样式访问
  
- **功能实现**：
  - 对象操作：上传、下载、删除
  - 存储桶管理：创建、检查、列出
  - 预签名URL：生成带有时效性的访问URL
  
- **测试策略**：
  - 集成测试采用环境变量控制（MINIO_ENABLED, S3_ENABLED）
  - 在CI/CD环境中可按需启用

### 存储策略
- **存储路径设计**：
  - 用户头像：`avatars/{userId}/{filename}`
  - 课程资源：`courses/{courseId}/{resourceType}/{filename}`
  - 临时文件：`temp/{uuid}/{filename}`
  
- **文件命名规则**：
  - 使用UUID生成唯一文件名
  - 保留原始文件扩展名
  - 添加时间戳避免缓存问题
  
- **安全考量**：
  - 访问控制：非公开文件通过预签名URL访问
  - 文件验证：检查文件类型和大小
  - 过期策略：临时文件设置TTL自动清理

### 课程发布流程
1. 机构用户创建课程草稿
2. 上传课程内容和资料
3. 提交审核
4. 审核人员审核课程内容
5. 审核通过后发布课程
6. 课程上线

### 购买学习流程
1. 用户浏览课程
2. 下单购买（或免费报名）
3. 支付完成
4. 开始学习
5. 记录学习进度
6. 完成学习后评价

## 集成测试设计

### 权限管理集成测试

为了确保权限管理模块的正确性和稳定性，我们设计了专门的集成测试：

1. **测试环境与配置**
   - 使用H2内存数据库作为测试数据库
   - 使用`@SpringBootTest`加载完整应用上下文
   - 使用`@Import(TestSecurityConfig.class)`导入测试安全配置
   - 启用Bean覆盖：`spring.main.allow-bean-definition-overriding=true`
   - 使用`@ActiveProfiles("test")`激活测试环境配置

2. **测试用户详情服务**
   - 提供`TestUserDetailsService`专用于测试环境
   - 固定的测试用户和权限：
     - admin_test用户：具有ROLE_ADMIN角色和管理权限
     - user_test用户：具有ROLE_USER角色和普通用户权限
   - 通过`@WithUserDetails`注解与`userDetailsService` Bean整合

3. **测试场景**
   - 权限管理CRUD操作：创建、读取、更新、删除权限
   - 用户角色测试：验证不同角色用户的权限边界
   - 资源依赖关系：测试已被角色引用的权限删除限制

4. **测试数据准备**
   - 每个测试开始前创建测试权限和角色
   - 建立测试角色与权限的关联关系
   - 创建具有不同角色的测试用户

5. **测试优化**
   - 权限代码格式规范化：使用大写字母、数字和下划线格式（如`TEST_READ`）
   - 删除权限前先解除权限与角色的关联，确保测试资源可以正确清理
   - 验证正确的HTTP状态码（创建返回201，删除返回204）
   - 每个测试结束后清理所有测试数据，确保测试隔离性

6. **解决的关键问题**
   - 修复了Bean依赖注入问题
   - 优化了资源依赖清理逻辑
   - 统一了权限代码格式标准
   - 确保了测试环境与开发环境的隔离
</file>

<file path="docs/下一阶段开发需求.md">
# 在线课程平台下一阶段开发需求

## 当前系统状态

目前系统已经实现了以下功能：

1. **用户认证模块**
   - 用户注册（包含邮箱验证）
   - 用户登录
   - 简化的令牌刷新（只检查黑名单）
   - 用户注销

2. **邮箱验证模块**
   - 邮件服务集成
   - 验证码生成和验证
   - Redis存储验证码
   - 邮件模板支持

3. **权限管理模块**
   - 用户管理
   - 角色管理
   - 权限管理
   - 基于角色的权限控制（RBAC简化版）
   - 控制器使用`@PreAuthorize("hasRole('XXX')")`注解控制访问

4. **用户自身管理模块**
   - 获取当前用户信息
   - 更新个人资料
   - 修改密码
   - 上传头像（MinIO存储）
   - 更新邮箱（验证码验证）
   - 专用邮箱更新验证码

5. **机构管理模块**
   - 机构申请功能
     - 机构入驻申请
     - 申请状态查询
     - 申请审核功能
     - 审核结果通知
   - 机构用户注册
     - 机构注册码生成
     - 机构用户注册
     - 邮箱验证
     - 角色分配

6. **基础设施**
   - JWT认证
   - Redis缓存
   - H2测试数据库
   - 全局异常处理
   - API文档支持
   - 文件存储服务

7. **系统优化**
   - 文件存储优化：公开资源（如用户头像）使用永久URL而非预签名URL
   - 存储效率优化：头像更新时自动删除旧文件，避免存储空间浪费
   - 架构优化：严格遵循分层架构，确保Controller不直接依赖基础设施服务
   - 文件上传大小限制：配置文件上传最大大小为100MB
   - 异常处理优化：业务逻辑统一在Service层处理并转换为合适的异常
   - 测试环境优化：解决Bean冲突和依赖注入问题

## 已完成内容

### 架构优化
- [x] 严格遵循分层架构
  - [x] Controller层只负责接收请求和返回响应
  - [x] Service层封装所有业务逻辑和基础设施交互
  - [x] Repository层专注于数据访问
- [x] 代码重构
  - [x] 移除Controller直接依赖基础设施服务
  - [x] 优化异常处理流程
  - [x] 优化令牌刷新机制，确保从数据库获取最新用户角色
  - [x] 完善令牌刷新相关的单元测试

## 下一阶段开发任务

根据项目进度和系统需求，下一阶段的开发任务将集中在课程管理功能和媒体资源管理上。

### 零、媒体资源管理模块（首要优先级）

实现平台核心功能中的媒体资源（特别是视频）管理，为课程内容提供基础。

#### 1. 媒体资源实体设计

**实体类设计**:
- `Media`: 媒体资源基本信息
  - 基本属性：ID、标题、描述、类型(视频/音频/文档)、大小、原始文件名
  - 存储属性：存储路径、状态(上传中/已完成/失败)
  - 关系映射：所属机构ID、上传者ID（仅作记录）
  - 时间属性：上传时间、最后访问时间

**实现步骤**:
1. 创建媒体资源实体类及关联关系（明确归属于机构而非用户）
2. 实现对应的Repository接口
3. 设计媒体服务接口及实现类

#### 2. 独立的存储配额服务设计

**实体与服务设计**:
- `StorageQuota`: 存储配额实体
  - 基本属性：ID、配额类型(视频/文档等)、总配额大小、已使用大小
  - 关系映射：所属机构ID
  - 时间属性：创建时间、更新时间、过期时间(可选，支持临时扩容)
- `StorageQuotaService`: 独立的存储配额服务
  - 配额检查方法
  - 配额更新方法
  - 配额查询方法
  - 配额调整方法(增加/减少)

**功能设计**:
- 支持多种配额类型（视频、文档等）
- 提供配额检查的统一接口
- 支持配额使用情况查询
- 支持配额计算和更新
- 预留配额调整和临时扩容的接口

**实现步骤**:
1. 创建`StorageQuota`实体类及其Repository
2. 设计`StorageQuotaService`接口及其实现类
3. 实现配额检查、更新和查询逻辑
4. 提供配额使用情况的API接口

#### 3. 分片上传实现

**API设计**:
- `POST /api/media/initiate-upload` - 初始化分片上传
- `GET /api/media/upload-status/{id}` - 获取上传状态
- `POST /api/media/complete-upload/{id}` - 完成上传
- `DELETE /api/media/cancel-upload/{id}` - 取消上传

**实现步骤**:
1. 集成S3 API实现分片上传
2. 创建上传状态跟踪机制
3. 实现断点续传支持
4. 提供上传状态查询接口

#### 4. 视频访问策略

**API设计**:
- `GET /api/media/{id}` - 获取媒体资源元数据
- `GET /api/media/{id}/access` - 获取临时访问URL
- `GET /api/storage/quota/{institutionId}` - 获取存储配额信息

**实现步骤**:
1. 实现媒体资源元数据查询接口
2. 实现临时URL生成逻辑
3. 实现存储配额查询接口

#### 5. 实现规划

**MVP阶段**:
- 基础媒体实体类及关联
- 独立的存储配额服务
- 基本的分片上传功能
- 媒体文件的基本访问控制

**后续扩展**:
- 视频转码功能（使用消息队列）
- 更细粒度的访问控制
- 流媒体支持（HLS/DASH）
- 视频元数据提取（长度、分辨率等）
- CDN集成
- 扩展配额服务支持更多资源类型和计费集成

#### 6. 基于当前代码的视频功能开发顺序

考虑到当前项目已有的代码和基础设施，建议按照以下顺序开发视频功能：

**第一阶段：数据层与基础设施**
1. 扩展现有的MinIO配置，确保支持大文件和分片上传
   - 利用已有的`FileStorageService`进行扩展，添加S3分片上传API支持
   - 创建专用的视频存储Bucket和访问策略
2. 创建Media实体类和Repository
   - 复用现有的JPA配置和事务管理
3. 创建独立的StorageQuota实体类和Repository
   - 设计灵活的配额模型，支持多种资源类型
   - 预留未来扩展的字段（如过期时间）

**第二阶段：核心服务实现**
1. 实现`StorageQuotaService`接口及其实现类
   - 设计职责单一的存储配额服务
   - 实现配额检查、更新和查询逻辑
   - 预留配额调整的接口
2. 实现`MediaService`接口及其实现类
   - 复用现有的业务逻辑处理模式和异常处理
   - 集成StorageQuotaService进行上传前配额检查
3. 实现分片上传服务
   - 使用S3 SDK初始化分片上传
   - 实现签名URL生成
   - 开发上传状态追踪（使用Redis暂存状态）

**第三阶段：API接口开发**
1. 实现`MediaController`
   - 遵循现有的接口规范和返回格式
   - 实现分片上传的三个接口：初始化、状态查询、完成上传
2. 实现`StorageQuotaController`
   - 创建独立的存储配额查询接口
   - 确保正确的权限控制

**第四阶段：系统集成**
1. 添加单元测试和集成测试
   - 使用现有的测试框架和模式
   - 重点测试分片上传和配额检查
   - 测试配额服务的各种场景（足够/不足/临界值）
2. 前后端联调
   - 先实现基础的上传和播放功能
   - 再优化用户体验和错误处理
   - 实现配额使用情况的前端展示

**开发重点与最佳实践**
- 优先实现机构视频上传与基本访问功能，这是MVP的核心
- 利用现有的MinIO集成经验（头像上传）扩展分片上传功能
- 通过Redis实现上传状态追踪，避免频繁数据库操作
- 确保视频资源与机构的关联关系正确，明确资源归属
- 视频资源仅对所属机构可见，不需要审核流程
- 通过独立的StorageQuotaService进行配额检查，而非直接在MediaService中实现
- 在服务之间保持清晰的职责分离，遵循单一职责原则
- 设计灵活的配额模型，为未来扩展做好准备

通过这种开发顺序，可以确保先建立核心功能，再逐步扩展，同时复用已有代码和经验，减少开发风险。服务职责的清晰分离也将有利于未来的维护和扩展。

### 一、课程管理基础模块（高优先级）

实现平台的核心业务功能，包括课程的管理、分类和标签等。

#### 1. 课程基础实体设计

**实体类设计**:
- `Course`: 课程基本信息
- `Chapter`: 课程章节
- `Lesson`: 课程小节
- `Resource`: 课程资源（视频、文档等）
- `Category`: 课程分类
- `Tag`: 课程标签
- `CourseTag`: 课程与标签关联

**实现步骤**:
1. 创建上述实体类及其关联关系
2. 设计合理的字段和约束
3. 实现对应的Repository接口

#### 2. 课程分类管理API

**API设计**:
- `GET /api/categories` - 获取分类列表
- `GET /api/categories/{id}` - 获取分类详情
- `POST /api/categories` - 创建分类（管理员）
- `PUT /api/categories/{id}` - 更新分类（管理员）
- `DELETE /api/categories/{id}` - 删除分类（管理员）

**实现步骤**:
1. 创建`CategoryController`及相关DTO/VO类
2. 实现`CategoryService`及其实现类
3. 实现分类的树形结构处理逻辑

#### 3. 课程标签管理API

**API设计**:
- `GET /api/tags` - 获取标签列表
- `GET /api/tags/{id}` - 获取标签详情
- `POST /api/tags` - 创建标签（管理员）
- `PUT /api/tags/{id}` - 更新标签（管理员）
- `DELETE /api/tags/{id}` - 删除标签（管理员）

**实现步骤**:
1. 创建`TagController`及相关DTO/VO类
2. 实现`TagService`及其实现类
3. 实现标签的热门标签推荐逻辑

#### 4. 课程基础管理API

**API设计**:
- `GET /api/courses` - 获取课程列表（支持分页、筛选）
- `GET /api/courses/{id}` - 获取课程详情
- `POST /api/courses` - 创建课程（机构用户和管理员）
- `PUT /api/courses/{id}` - 更新课程（课程创建者和管理员）
- `DELETE /api/courses/{id}` - 删除课程（课程创建者和管理员）
- `GET /api/courses/{id}/chapters` - 获取课程章节
- `POST /api/courses/{id}/chapters` - 创建课程章节

**实现步骤**:
1. 创建`CourseController`及相关DTO/VO类
2. 实现`CourseService`及其实现类
3. 实现课程的搜索和筛选逻辑
4. 实现课程内容管理逻辑

### 二、内容审核功能（次高优先级）

实现课程内容审核功能，确保平台内容质量。

#### 1. 审核流程设计

**功能设计**:
- 课程内容提交审核
- 审核人员审核内容
- 审核结果通知
- 驳回原因反馈

**实现步骤**:
1. 设计审核相关实体类
2. 设计审核流程和状态机
3. 实现审核服务和API接口

#### 2. 审核管理API

**API设计**:
- `POST /api/courses/{id}/submit` - 提交课程审核
- `GET /api/reviews` - 获取待审核列表（审核人员）
- `PUT /api/reviews/{id}` - 更新审核状态（审核人员）
- `GET /api/reviews/history` - 获取审核历史记录

**实现步骤**:
1. 创建`ReviewController`及相关DTO/VO类
2. 实现`ReviewService`及其实现类
3. 实现审核流程和权限控制

## 技术实现要点

1. **安全性考虑**
   - 严格的权限控制，确保只有授权用户能创建和管理课程
   - 文件上传安全验证，防止恶意文件

2. **性能优化**
   - 课程列表和搜索的缓存策略
   - 文件资源的CDN加速策略

3. **权限控制**
   - 基于角色的课程管理权限
   - 基于机构的资源隔离

4. **数据验证**
   - 严格验证课程内容的完整性和合法性
   - 确保资源引用的有效性

## 开发优先级

1. ✓ 完成权限管理功能及测试
2. ✓ 优化JWT令牌，仅包含角色信息
3. ✓ 实现机构申请和注册功能
   - ✓ 机构申请流程
   - ✓ 机构审核流程
   - ✓ 机构用户注册
4. 实现媒体资源管理（最高优先级）
   - 媒体实体设计与管理
   - 独立的存储配额服务
   - 分片上传实现
   - 媒体访问控制
5. 完成课程基础实体设计（高优先级）
6. 实现课程分类和标签管理（高优先级）
7. 实现课程基础管理功能（高优先级）
8. 实现课程内容结构管理（中优先级）
9. 实现内容审核流程（中优先级）
10. 【未来】考虑完善基于权限的细粒度访问控制

通过以上功能的实现，可以搭建起平台的核心课程管理框架和媒体资源管理系统，为后续的用户学习、评价、订单等功能提供基础。
</file>

<file path="docs/项目结构说明.md">
# 项目结构说明

本项目采用分层架构，遵循最佳实践进行组织：

```
src/main/java/com/zhangziqi/online_course_mine
├── config                 # 配置类
│   ├── security          # 安全相关配置
│   ├── redis            # Redis相关配置
├── constant               # 常量定义
├── controller             # 控制器层
│   ├── AuthController           # 认证控制器
│   ├── UserController           # 用户管理控制器
│   ├── RoleController           # 角色管理控制器
│   ├── PermissionController     # 权限管理控制器
│   ├── InstitutionController    # 机构申请控制器
│   ├── InstitutionAuthController # 机构用户注册控制器
│   ├── InstitutionMemberController # 机构成员管理控制器
│   └── ReviewerInstitutionController # 机构审核控制器
├── exception              # 自定义异常
├── model                  # 数据模型
│   ├── entity           # 实体类
│   │   ├── User.java           # 用户实体
│   │   ├── Role.java           # 角色实体
│   │   ├── Permission.java     # 权限实体
│   │   ├── Institution.java    # 机构实体
│   │   ├── StorageQuota.java   # 存储配额实体
│   │   └── InstitutionApplication.java # 机构申请实体
│   ├── dto              # 数据传输对象
│   │   ├── auth              # 认证相关DTO
│   │   ├── user              # 用户相关DTO
│   │   └── institution       # 机构相关DTO
│   ├── vo               # 视图对象
│   │   ├── auth              # 认证相关VO
│   │   ├── user              # 用户相关VO
│   │   └── institution       # 机构相关VO
│   ├── enums            # 枚举类型
│   │   ├── RoleEnum.java       # 角色枚举
│   │   └── QuotaType.java      # 配额类型枚举
├── repository             # 数据访问层
│   ├── UserRepository         # 用户数据访问
│   ├── RoleRepository         # 角色数据访问
│   ├── PermissionRepository   # 权限数据访问
│   ├── StorageQuotaRepository # 存储配额数据访问
│   └── InstitutionRepository  # 机构数据访问
├── security               # 安全相关组件
│   ├── jwt              # JWT相关
├── service                # 服务层
│   ├── impl             # 服务实现
│   │   ├── AuthServiceImpl         # 认证服务实现
│   │   ├── UserServiceImpl         # 用户服务实现
│   │   ├── RoleServiceImpl         # 角色服务实现
│   │   ├── StorageQuotaServiceImpl # 存储配额服务实现
│   │   ├── InstitutionServiceImpl  # 机构服务实现
│   │   └── InstitutionAuthServiceImpl # 机构认证服务实现
├── util                   # 工具类
```

## 分层职责

1. **Controller层**：负责处理HTTP请求，参数验证，返回响应
   - 仅负责接收请求和返回响应，不包含业务逻辑
   - 参数验证和基本的请求合法性检查
   - 调用Service层处理业务，不直接操作Repository
   - 统一的响应格式封装
   - 不应该直接依赖基础设施服务（如MinIO、Redis等）

2. **Service层**：实现业务逻辑
   - 封装所有业务规则和流程
   - 事务管理
   - 数据校验和业务规则验证
   - 可以调用其他Service和Repository
   - 负责与基础设施服务交互（如文件存储、缓存、邮件等）
   - 异常处理和业务错误转换

3. **Repository层**：数据访问操作
   - 提供数据访问接口
   - 不包含业务逻辑
   - 专注于数据CRUD操作

4. **Model层**：数据结构定义
   - Entity: JPA实体类
   - DTO: 数据传输对象，用于服务层之间的数据传递
   - VO: 视图对象，用于前端展示

5. **Config层**：应用配置

6. **Security层**：安全相关组件

7. **Util层**：通用工具类

## 架构设计原则

1. **关注点分离**：每一层只关注自己的职责
2. **依赖方向**：上层依赖下层，下层不依赖上层
3. **接口隔离**：通过接口定义服务边界
4. **单一职责**：每个类只负责一项功能
5. **最小知识原则**：一个对象应当对其他对象有最少的了解

## 权限控制设计

当前系统使用基于角色的访问控制(RBAC):
- Controller方法使用`@PreAuthorize("hasRole('XXX')")`注解控制访问
- JWT令牌中只包含角色信息，不包含详细权限
- 简化的权限模型，提高开发效率和系统性能

未来计划:
- 在业务功能稳定后，逐步实现基于权限的细粒度控制
- 动态权限验证机制
- 数据级权限控制

## 示例：用户头像上传

**不推荐的方式**（在Controller中处理业务逻辑）：
```java
@PostMapping("/avatar")
public Result<Map<String, String>> uploadAvatar(MultipartFile file) {
    // 验证文件类型和大小（业务逻辑）
    // 生成文件名（业务逻辑）
    // 直接调用MinioService上传文件（直接依赖基础设施）
    // 调用UserService更新用户头像
    // 返回URL
}
```

**推荐的方式**（职责分离）：
```java
@PostMapping("/avatar")
public Result<Map<String, String>> uploadAvatar(MultipartFile file) {
    // 从安全上下文获取用户名
    String username = getCurrentUsername();
    // 调用Service处理所有业务逻辑
    Map<String, String> result = userService.uploadAndUpdateAvatar(username, file);
    // 返回结果
    return Result.success(result);
}
```

Service层封装所有业务逻辑：
```java
@Service
public class UserServiceImpl implements UserService {
    // 注入所需依赖
    private final MinioService minioService;
    
    @Override
    public Map<String, String> uploadAndUpdateAvatar(String username, MultipartFile file) {
        // 验证文件类型和大小
        // 生成文件名
        // 上传文件
        // 删除旧头像
        // 更新用户头像
        // 返回结果
    }
}
```

通过这种方式，实现了关注点分离，提高了代码的可维护性和可测试性。

## 命名规范

- **Controller**: 以Controller结尾（如UserController）
- **Service**: 接口以Service结尾，实现类以ServiceImpl结尾
- **Repository**: 以Repository结尾
- **Entity**: 实体类名与表名对应
- **DTO**: 以DTO结尾
- **VO**: 以VO结尾

## 代码规范

- 使用Lombok简化代码
- 使用统一的返回格式
- 异常统一处理
- 注释完善
- 单元测试覆盖关键逻辑

## 测试结构

本项目采用多层次测试策略，确保代码质量和功能稳定性：

```
src/test/java/com/zhangziqi/online_course_mine
├── config                 # 测试配置类
│   └── TestSecurityConfig # 测试安全配置
├── controller             # 控制器测试
│   ├── AuthControllerTest
│   ├── UserControllerTest
│   ├── PermissionControllerTest  # 权限控制器测试
│   ├── InstitutionControllerTest # 机构申请控制器测试
│   ├── InstitutionAuthControllerTest # 机构用户注册控制器测试
│   └── ReviewerInstitutionControllerTest # 机构审核控制器测试
├── integration            # 集成测试
│   ├── AuthControllerIntegrationTest
│   ├── PermissionControllerIntegrationTest  # 权限管理集成测试
│   └── InstitutionControllerIntegrationTest # 机构管理集成测试
├── repository             # 数据访问层测试
│   └── ...
├── security               # 安全组件测试
│   └── TestUserDetailsService  # 测试用户详情服务
├── service                # 服务层测试
│   ├── AuthServiceTest
│   ├── UserServiceTest
│   ├── PermissionServiceTest  # 权限服务测试
│   ├── InstitutionServiceTest # 机构服务测试
│   └── InstitutionAuthServiceTest # 机构认证服务测试
└── util                   # 工具类测试
    └── ...
```

### 测试层次

1. **单元测试**：测试单个组件的功能，隔离于其他组件
   - `@ExtendWith(MockitoExtension.class)`
   - 通过`@Mock`模拟所有依赖
   - 如：`PermissionServiceTest`、`AuthServiceTest`等

2. **控制器测试**：测试API接口的参数验证和响应格式
   - `@SpringBootTest`加载上下文
   - `@AutoConfigureMockMvc(addFilters = false)`禁用安全过滤器
   - 如：`PermissionControllerTest`、`UserControllerTest`等

3. **集成测试**：测试多个组件协同工作
   - `@SpringBootTest`加载完整上下文
   - `@Import(TestSecurityConfig.class)`导入测试安全配置
   - 如：`PermissionControllerIntegrationTest`、`AuthControllerIntegrationTest`等

### 权限管理测试

权限管理模块的测试采用多层次策略：

1. **权限服务测试 (PermissionServiceTest)** 
   - 单元测试权限服务的业务逻辑
   - 模拟Repository层依赖
   - 测试异常处理和边界情况
   - 验证权限CRUD操作的正确性

2. **权限控制器测试 (PermissionControllerTest)**
   - 测试API参数验证和响应格式
   - 模拟Service层依赖
   - 验证HTTP状态码和响应结构
   - 不涉及实际权限验证

3. **权限集成测试 (PermissionControllerIntegrationTest)**
   - 测试完整请求处理流程
   - 包含实际的权限和角色验证
   - 使用`@WithUserDetails`注解模拟不同角色用户
   - 验证基于角色的访问控制
   - 测试资源依赖管理（如解除权限与角色的关联）

### 机构管理测试

机构管理模块的测试同样采用多层次策略：

1. **机构服务测试**
   - `InstitutionServiceTest`: 测试机构申请和审核流程
   - `InstitutionAuthServiceTest`: 测试机构用户注册流程
   - 模拟Repository层和外部服务依赖
   - 验证业务规则和异常处理

2. **机构控制器测试**
   - `InstitutionControllerTest`: 测试机构申请API
   - `ReviewerInstitutionControllerTest`: 测试机构审核API
   - `InstitutionAuthControllerTest`: 测试机构用户注册API
   - 验证参数校验和响应格式

3. **机构集成测试**
   - 测试完整的机构申请、审核和注册流程
   - 验证角色权限控制
   - 测试邮件通知功能
   - 验证数据一致性

### 测试优化

1. **Bean冲突解决**
   - 使用`spring.main.allow-bean-definition-overriding=true`
   - 通过`@Primary`注解指定测试Bean的优先级

2. **资源依赖管理**
   - 先解除资源依赖再进行删除测试
   - 测试完成后清理所有测试数据

3. **命名约定**
   - 测试方法名遵循行为_条件_结果模式
   - 如：`deletePermissionShouldSucceedWhenUserIsAdmin`

4. **测试数据隔离**
   - 每个测试方法使用独立的测试数据
   - 使用`@BeforeEach`和`@AfterEach`管理测试数据生命周期
</file>

<file path="docs/项目配置说明.md">
# 在线课程平台项目配置说明

## 环境配置

### 开发环境 (dev)
- 数据库：MySQL
- 端口：8080
- 配置文件：`application-dev.yml`
- 特点：
  - JPA自动更新表结构（ddl-auto: update）
  - SQL语句以单行形式显示
  - 详细的SQL日志记录
  - 使用163邮箱服务
  - Redis存储验证码
  - 文件上传大小限制：100MB

### 测试环境 (test)
- 数据库：H2（内存数据库）
- 端口：8081
- 配置文件：`application-test.yml`
- 特点：
  - 每次启动重新创建表（ddl-auto: create-drop）
  - H2控制台访问：http://localhost:8081/h2-console
  - SQL语句以单行形式显示
  - 详细的SQL日志记录
  - 允许Bean覆盖：`spring.main.allow-bean-definition-overriding=true`
  - Redis使用独立数据库（database=1）
  - 使用测试邮箱配置
  - 文件上传大小限制：100MB

## 测试环境特殊配置

测试环境下启用了一些特殊配置以支持测试：

```yaml
spring:
  main:
    allow-bean-definition-overriding: true  # 允许Bean覆盖，解决集成测试中的Bean冲突
```

测试环境还配置了专用的安全配置类：

```java
@TestConfiguration
@EnableWebSecurity
@Profile("test")  // 确保只在测试环境激活
public class TestSecurityConfig {
    // 提供测试环境下的安全组件
}
```

### 集成测试Bean冲突解决方案

在集成测试中，常常会遇到Bean定义冲突的问题，特别是当测试配置与应用配置存在重叠时。为解决这个问题，我们采取了以下策略：

1. **在应用级别允许Bean覆盖**：
   ```yaml
   spring:
     main:
       allow-bean-definition-overriding: true
   ```

2. **在测试类中显式指定配置属性**：
   ```java
   @SpringBootTest(properties = {"spring.main.allow-bean-definition-overriding=true"})
   @AutoConfigureMockMvc
   @ActiveProfiles("test")
   @Import(TestSecurityConfig.class)
   public class PermissionControllerIntegrationTest {
       // ...
   }
   ```

3. **使用@Primary注解标记测试Bean**：
   ```java
   @Service("userDetailsService")
   @Profile("test")
   @Primary
   public class TestUserDetailsService implements UserDetailsService {
       // ...
   }
   ```

4. **使用@Bean+@Primary组合覆盖特定Bean**：
   ```java
   @Bean
   @Primary
   public JwtTokenProvider jwtTokenProvider() {
       // 创建测试专用的JWT提供者
   }
   ```

5. **通过Bean名称引用**：
   ```java
   @WithUserDetails(value = "admin_test", userDetailsServiceBeanName = "userDetailsService")
   void getPermissionListShouldReturnPermissionListWhenUserIsAdmin() {
       // ...
   }
   ```

这种组合策略有效解决了集成测试中的Bean冲突问题，特别是在权限管理测试中需要模拟不同用户角色时。

## 日志配置
```yaml
logging:
  level:
    org.hibernate.SQL: DEBUG                           # 显示SQL语句
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE   # 显示SQL参数
    com.zhangziqi: DEBUG                              # 应用日志级别
```

## JWT配置
- 访问令牌有效期：1小时
- 刷新令牌有效期：7天
- 令牌内容：用户名和角色信息（不包含详细权限）
- 刷新机制：只检查令牌是否在黑名单中
- 密钥：环境相关，需要在生产环境中妥善保管

## 数据库配置

### MySQL（开发环境）
```yaml
url: jdbc:mysql://localhost:3306/online_course?useSSL=false&serverTimezone=Asia/Shanghai&characterEncoding=utf-8
username: root
password: root
```

### H2（测试环境）
```yaml
url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
username: sa
password: 
```

## 切换环境
1. 通过配置文件：
   ```yaml
   spring:
     profiles:
       active: dev  # 或 test
   ```

2. 通过命令行：
   ```bash
   java -jar app.jar --spring.profiles.active=dev
   ```

3. 通过环境变量：
   ```bash
   export SPRING_PROFILES_ACTIVE=dev
   ```

## 注意事项
1. 生产环境配置文件未包含在版本控制中
2. 测试环境使用H2数据库，无需额外配置
3. JWT密钥在不同环境中应该不同
4. SQL日志格式化配置已优化为单行显示
5. 测试环境下Redis使用单独的数据库，避免与开发环境冲突

## 依赖版本
- Spring Boot: 3.3.9
- Java: 17
- JWT: 0.12.5
- 其他依赖版本由Spring Boot管理

## 文件上传配置

为了支持大文件上传，系统配置了文件上传的限制参数：

```yaml
spring:
  servlet:
    multipart:
      max-file-size: 100MB  # 单个文件的最大大小
      max-request-size: 100MB  # 单个请求的最大大小（含所有文件）
```

这一配置在开发环境和测试环境中都已设置，用于确保系统能够处理较大的文件上传需求，特别是在课程资源上传等场景中。

## 文件存储配置

### MinIO配置
```yaml
minio:
  endpoint: http://localhost:9000
  access-key: minioadmin
  secret-key: minioadmin
  bucket-name: online-course
```

### AWS S3兼容API配置
```yaml
aws:
  s3:
    endpoint: http://localhost:9000
    region: us-east-1
    access-key: minioadmin
    secret-key: minioadmin
    bucket-name: online-course-s3
    path-style-access: true
```

### 开发环境文件存储配置
在开发环境中，可以使用Docker快速启动MinIO服务：
```bash
docker run -p 9000:9000 -p 9001:9001 --name minio \
  -e "MINIO_ROOT_USER=minioadmin" \
  -e "MINIO_ROOT_PASSWORD=minioadmin" \
  -v $(pwd)/minio-data:/data \
  minio/minio server /data --console-address ":9001"
```

### 测试环境文件存储配置
测试环境下通过环境变量控制是否执行集成测试：
- MINIO_ENABLED=true：启用MinIO测试
- S3_ENABLED=true：启用S3 API测试

测试中默认跳过这些需要外部依赖的测试，只在明确设置环境变量时执行。

## 邮件服务配置

### 开发环境（163邮箱）
```yaml
spring:
  mail:
    host: smtp.163.com
    username: your-email@163.com
    password: your-smtp-password
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
```

### 测试环境（模拟邮箱）
```yaml
spring:
  mail:
    host: smtp.qq.com
    port: 587
    username: test@qq.com
    password: test-password
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
```

## Redis配置

### 开发环境
```yaml
spring:
  data:
    redis:
      host: localhost
      port: 6379
      database: 0
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
```

### 测试环境
```yaml
spring:
  data:
    redis:
      host: localhost
      database: 1  # 使用独立数据库
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
```

## 机构相关配置

### 机构申请配置
```yaml
institution:
  application:
    # 机构申请相关配置
    logo:
      max-size: 2MB  # Logo文件大小限制
      allowed-types: image/jpeg,image/png  # 允许的文件类型
    register-code:
      length: 8  # 注册码长度
      expiry: 7d  # 注册码有效期（天）
    review:
      auto-approve: false  # 是否自动审核通过（测试环境可设置为true）
```

### 机构用户注册配置
```yaml
institution:
  member:
    # 机构用户注册相关配置
    email-verification:
      code-length: 6  # 验证码长度
      expiry: 5m  # 验证码有效期（分钟）
    password:
      min-length: 6  # 密码最小长度
      max-length: 20  # 密码最大长度
```

### 机构审核配置
```yaml
institution:
  review:
    # 机构审核相关配置
    notification:
      email:
        enabled: true  # 是否启用邮件通知
        templates:
          approved: institution-approved  # 审核通过邮件模板
          rejected: institution-rejected  # 审核拒绝邮件模板
    pagination:
      default-size: 10  # 默认分页大小
      max-size: 50  # 最大分页大小
```

## 存储配额配置

### 默认配额配置
```yaml
storage:
  quota:
    default:
      video: 5368709120    # 5GB
      document: 2147483648 # 2GB
      total: 10737418240   # 10GB
    expiry:
      enabled: false       # 是否启用配额过期
      default-days: 365    # 默认过期天数
```

### 配额告警配置
```yaml
storage:
  quota:
    alert:
      enabled: true                 # 是否启用配额告警
      threshold: 0.9                # 告警阈值（90%）
      notification:
        email:
          enabled: true            # 是否启用邮件通知
          template: quota-alert    # 告警邮件模板
```

### 配额计算配置
```yaml
storage:
  quota:
    calculation:
      async: true          # 是否异步计算配额
      batch-size: 1000     # 批量计算大小
      schedule:
        enabled: true      # 是否启用定时计算
        cron: "0 0 1 * * ?" # 每天凌晨1点执行
```
</file>

<file path="docs/api.md">
{"openapi":"3.0.1","info":{"title":"在线课程平台API","description":"在线课程平台的RESTful API文档","contact":{"name":"在线课程平台团队","url":"https://example.com","email":"support@example.com"},"license":{"name":"MIT License","url":"https://opensource.org/licenses/MIT"},"version":"1.0.0"},"servers":[{"url":"http://localhost:8080","description":"Generated server url"}],"security":[{"Bearer Authentication":[]}],"tags":[{"name":"角色管理","description":"角色查询、创建、编辑、删除等功能"},{"name":"机构用户认证","description":"机构用户注册相关接口"},{"name":"用户管理","description":"用户查询、创建、编辑、删除等功能"},{"name":"认证接口","description":"包括注册、登录、刷新令牌等接口"},{"name":"机构申请","description":"机构申请相关接口"},{"name":"机构成员管理","description":"机构成员管理相关接口"},{"name":"机构审核","description":"机构申请审核相关接口"},{"name":"权限管理","description":"权限查询、创建、编辑、删除等功能"}],"paths":{"/api/users/{id}":{"get":{"tags":["用户管理"],"summary":"获取用户详情","description":"根据用户ID获取用户详情","operationId":"getUserById","parameters":[{"name":"id","in":"path","description":"用户ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}},"put":{"tags":["用户管理"],"summary":"更新用户","description":"更新用户信息","operationId":"updateUser","parameters":[{"name":"id","in":"path","description":"用户ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}},"delete":{"tags":["用户管理"],"summary":"删除用户","description":"根据用户ID删除用户","operationId":"deleteUser","parameters":[{"name":"id","in":"path","description":"用户ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"204":{"description":"No Content","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/users/{id}/roles":{"put":{"tags":["用户管理"],"summary":"给用户分配角色","description":"给用户分配角色","operationId":"assignRoles","parameters":[{"name":"id","in":"path","description":"用户ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"uniqueItems":true,"type":"array","description":"角色ID列表","items":{"type":"integer","format":"int64"}}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}}},"/api/users/current":{"get":{"tags":["用户管理"],"summary":"获取当前用户信息","description":"获取当前登录用户的详细信息","operationId":"getCurrentUser","responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}},"put":{"tags":["用户管理"],"summary":"更新当前用户信息","description":"更新当前登录用户的个人信息","operationId":"updateCurrentUser","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserProfileDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}}},"/api/users/current/password":{"put":{"tags":["用户管理"],"summary":"修改密码","description":"修改当前用户密码","operationId":"changePassword","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ChangePasswordDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/users/current/email":{"put":{"tags":["用户管理"],"summary":"更新邮箱","description":"更新当前用户邮箱（需验证码）","operationId":"updateEmail","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmailUpdateDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}}},"/api/roles/{id}":{"get":{"tags":["角色管理"],"summary":"获取角色详情","description":"根据角色ID获取角色详情","operationId":"getRoleById","parameters":[{"name":"id","in":"path","description":"角色ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultRoleVO"}}}}}},"put":{"tags":["角色管理"],"summary":"更新角色","description":"更新角色信息","operationId":"updateRole","parameters":[{"name":"id","in":"path","description":"角色ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultRoleVO"}}}}}},"delete":{"tags":["角色管理"],"summary":"删除角色","description":"根据角色ID删除角色","operationId":"deleteRole","parameters":[{"name":"id","in":"path","description":"角色ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"204":{"description":"No Content","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/roles/{id}/permissions":{"put":{"tags":["角色管理"],"summary":"给角色分配权限","description":"给角色分配权限","operationId":"assignPermissions","parameters":[{"name":"id","in":"path","description":"角色ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"uniqueItems":true,"type":"array","description":"权限ID列表","items":{"type":"integer","format":"int64"}}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultRoleVO"}}}}}}},"/api/permissions/{id}":{"get":{"tags":["权限管理"],"summary":"获取权限详情","description":"根据权限ID获取权限详情","operationId":"getPermissionById","parameters":[{"name":"id","in":"path","description":"权限ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPermissionVO"}}}}}},"put":{"tags":["权限管理"],"summary":"更新权限","description":"更新权限信息","operationId":"updatePermission","parameters":[{"name":"id","in":"path","description":"权限ID","required":true,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPermissionVO"}}}}}},"delete":{"tags":["权限管理"],"summary":"删除权限","description":"根据权限ID删除权限","operationId":"deletePermission","parameters":[{"name":"id","in":"path","description":"权限ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"204":{"description":"No Content","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/users":{"get":{"tags":["用户管理"],"summary":"分页查询用户列表","description":"根据条件分页查询用户列表","operationId":"getUserList","parameters":[{"name":"queryDTO","in":"query","required":true,"schema":{"$ref":"#/components/schemas/UserQueryDTO"}}],"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPageUserVO"}}}}}},"post":{"tags":["用户管理"],"summary":"创建用户","description":"创建新用户","operationId":"createUser","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}}},"/api/users/current/avatar":{"post":{"tags":["用户管理"],"summary":"上传头像","description":"上传当前用户头像","operationId":"uploadAvatar","requestBody":{"content":{"multipart/form-data":{"schema":{"required":["file"],"type":"object","properties":{"file":{"type":"string","format":"binary"}}}}}},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultMapStringString"}}}}}}},"/api/roles":{"get":{"tags":["角色管理"],"summary":"获取角色列表","description":"获取所有角色列表","operationId":"getRoleList","responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListRoleVO"}}}}}},"post":{"tags":["角色管理"],"summary":"创建角色","description":"创建新角色","operationId":"createRole","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RoleDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultRoleVO"}}}}}}},"/api/reviewer/institutions/applications/{id}/reject":{"post":{"tags":["机构审核"],"summary":"审核拒绝","description":"拒绝机构申请","operationId":"rejectApplication","parameters":[{"name":"id","in":"path","description":"申请ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"reason","in":"query","description":"拒绝原因","required":true,"schema":{"type":"string"}}],"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/reviewer/institutions/applications/{id}/approve":{"post":{"tags":["机构审核"],"summary":"审核通过","description":"通过机构申请，自动创建机构并生成注册码","operationId":"approveApplication","parameters":[{"name":"id","in":"path","description":"申请ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultInstitutionVO"}}}}}}},"/api/permissions":{"get":{"tags":["权限管理"],"summary":"获取权限列表","description":"获取所有权限列表","operationId":"getPermissionList","responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultListPermissionVO"}}}}}},"post":{"tags":["权限管理"],"summary":"创建权限","description":"创建新权限","operationId":"createPermission","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PermissionDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPermissionVO"}}}}}}},"/api/institutions/apply":{"post":{"tags":["机构申请"],"summary":"申请创建机构","description":"提交机构入驻申请，需等待审核员审核","operationId":"applyInstitution","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/InstitutionApplyDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultString"}}}}}}},"/api/auth/register":{"post":{"tags":["认证接口"],"summary":"用户注册","description":"注册新用户","operationId":"register","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RegisterDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/auth/refresh-token":{"post":{"tags":["认证接口"],"summary":"刷新令牌","description":"刷新JWT令牌","operationId":"refreshToken","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/RefreshTokenDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultJwtTokenDTO"}}}}}}},"/api/auth/logout":{"post":{"tags":["认证接口"],"summary":"注销","description":"用户注销","operationId":"logout","responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/auth/login":{"post":{"tags":["认证接口"],"summary":"用户登录","description":"用户登录获取JWT令牌","operationId":"login","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LoginDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultJwtTokenDTO"}}}}}}},"/api/auth/institution/register":{"post":{"tags":["机构用户认证"],"summary":"机构用户注册","description":"使用机构注册码注册机构用户","operationId":"registerInstitutionMember","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/InstitutionRegisterDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"201":{"description":"Created","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/auth/email-verification-code":{"post":{"tags":["认证接口"],"summary":"发送邮箱验证码","description":"发送邮箱验证码（用于用户注册）","operationId":"sendEmailVerificationCode","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmailVerificationDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/auth/email-update-code":{"post":{"tags":["认证接口"],"summary":"发送邮箱更新验证码","description":"发送邮箱更新验证码（用于更换邮箱）","operationId":"sendEmailUpdateCode","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/EmailVerificationDTO"}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/users/{id}/status":{"patch":{"tags":["用户管理"],"summary":"修改用户状态","description":"修改用户状态（0-禁用，1-正常）","operationId":"updateUserStatus","parameters":[{"name":"id","in":"path","description":"用户ID","required":true,"schema":{"type":"integer","format":"int64"}},{"name":"status","in":"query","description":"状态（0-禁用，1-正常）","required":true,"schema":{"type":"integer","format":"int32"}}],"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}}},"/api/users/basic/{userId}":{"get":{"tags":["用户管理"],"summary":"获取用户基本信息","description":"获取用户基本信息（用于前端展示）","operationId":"getBasicUserInfo","parameters":[{"name":"userId","in":"path","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultUserVO"}}}}}}},"/api/reviewer/institutions/applications":{"get":{"tags":["机构审核"],"summary":"分页查询机构申请","description":"分页查询机构申请列表，可按状态筛选","operationId":"getApplications","parameters":[{"name":"queryDTO","in":"query","required":true,"schema":{"$ref":"#/components/schemas/InstitutionApplicationQueryDTO"}}],"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultPageInstitutionApplicationVO"}}}}}}},"/api/reviewer/institutions/applications/{id}":{"get":{"tags":["机构审核"],"summary":"查询申请详情","description":"根据ID查询机构申请详情","operationId":"getApplicationDetail","parameters":[{"name":"id","in":"path","description":"申请ID","required":true,"schema":{"type":"integer","format":"int64"}}],"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultInstitutionApplicationVO"}}}}}}},"/api/institutions/members/register-code":{"get":{"tags":["机构成员管理"],"summary":"获取机构注册码","description":"获取当前用户所属机构的注册码","operationId":"getRegisterCode","responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultString"}}}}}}},"/api/institutions/application-status":{"get":{"tags":["机构申请"],"summary":"查询申请状态","description":"通过申请ID和邮箱查询机构申请状态","operationId":"getApplicationStatus","parameters":[{"name":"applicationId","in":"query","description":"申请ID","required":true,"schema":{"type":"string"}},{"name":"email","in":"query","description":"联系邮箱","required":true,"schema":{"type":"string"}}],"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultInstitutionApplicationVO"}}}}}}},"/api/auth/captcha/key":{"get":{"tags":["认证接口"],"summary":"获取验证码key","description":"获取验证码key，用于后续获取验证码图片","operationId":"getCaptchaKey","responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultString"}}}}}}},"/api/auth/captcha/image/{key}":{"get":{"tags":["认证接口"],"summary":"获取验证码图片","description":"根据验证码key获取对应的验证码图片","operationId":"getCaptchaImage","parameters":[{"name":"key","in":"path","description":"验证码key","required":true,"schema":{"type":"string"}}],"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"200":{"description":"OK"}}}},"/api/users/batch":{"delete":{"tags":["用户管理"],"summary":"批量删除用户","description":"批量删除用户","operationId":"batchDeleteUsers","requestBody":{"content":{"application/json":{"schema":{"type":"array","description":"用户ID列表","items":{"type":"integer","format":"int64"}}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"204":{"description":"No Content","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}},"/api/roles/batch":{"delete":{"tags":["角色管理"],"summary":"批量删除角色","description":"批量删除角色","operationId":"batchDeleteRoles","requestBody":{"content":{"application/json":{"schema":{"type":"array","description":"角色ID列表","items":{"type":"integer","format":"int64"}}}},"required":true},"responses":{"401":{"description":"Unauthorized","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"403":{"description":"Forbidden","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}},"204":{"description":"No Content","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultVoid"}}}}}}}},"components":{"schemas":{"ResultVoid":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"object"}}},"UserDTO":{"required":["email","username"],"type":"object","properties":{"id":{"type":"integer","description":"用户ID","format":"int64"},"username":{"maxLength":20,"minLength":4,"pattern":"^[a-zA-Z0-9_]+$","type":"string","description":"用户名","example":"zhangsan"},"password":{"type":"string","description":"密码"},"email":{"type":"string","description":"邮箱","example":"zhangsan@example.com"},"phone":{"pattern":"^1[3-9]\\d{9}$","type":"string","description":"手机号","example":"13812345678"},"avatar":{"type":"string","description":"头像"},"nickname":{"type":"string","description":"昵称"},"status":{"type":"integer","description":"状态：0-禁用，1-正常","format":"int32"},"institutionId":{"type":"integer","description":"机构ID","format":"int64"},"roleIds":{"uniqueItems":true,"type":"array","description":"角色ID列表","items":{"type":"integer","description":"角色ID列表","format":"int64"}}},"description":"用户数据"},"Permission":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"name":{"type":"string"},"code":{"type":"string"},"description":{"type":"string"},"url":{"type":"string"},"method":{"type":"string"}}},"ResultUserVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/UserVO"}}},"Role":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"createdAt":{"type":"string","format":"date-time"},"updatedAt":{"type":"string","format":"date-time"},"name":{"type":"string"},"code":{"type":"string"},"description":{"type":"string"},"permissions":{"uniqueItems":true,"type":"array","items":{"$ref":"#/components/schemas/Permission"}}},"description":"角色列表"},"UserVO":{"type":"object","properties":{"id":{"type":"integer","description":"用户ID","format":"int64"},"username":{"type":"string","description":"用户名"},"email":{"type":"string","description":"邮箱"},"phone":{"type":"string","description":"手机号"},"avatar":{"type":"string","description":"头像"},"nickname":{"type":"string","description":"昵称"},"status":{"type":"integer","description":"状态：0-禁用，1-正常","format":"int32"},"institutionId":{"type":"integer","description":"机构ID","format":"int64"},"createdAt":{"type":"string","description":"创建时间","format":"date-time"},"updatedAt":{"type":"string","description":"更新时间","format":"date-time"},"lastLoginAt":{"type":"string","description":"最后登录时间","format":"date-time"},"roles":{"uniqueItems":true,"type":"array","description":"角色列表","items":{"$ref":"#/components/schemas/Role"}}},"description":"用户信息"},"UserProfileDTO":{"type":"object","properties":{"nickname":{"type":"string","description":"昵称","example":"张三"},"phone":{"pattern":"^1[3-9]\\d{9}$","type":"string","description":"手机号","example":"13800138000"}},"description":"用户个人信息更新请求"},"ChangePasswordDTO":{"required":["confirmPassword","newPassword","oldPassword"],"type":"object","properties":{"oldPassword":{"type":"string","description":"旧密码","example":"oldPassword123"},"newPassword":{"pattern":"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,20}$","type":"string","description":"新密码","example":"newPassword123"},"confirmPassword":{"type":"string","description":"确认密码","example":"newPassword123"}},"description":"密码修改请求"},"EmailUpdateDTO":{"required":["emailCode","newEmail","password"],"type":"object","properties":{"newEmail":{"type":"string","description":"新邮箱","example":"newemail@example.com"},"emailCode":{"type":"string","description":"邮箱验证码","example":"123456"},"password":{"type":"string","description":"当前密码","example":"password123"}},"description":"邮箱更新请求"},"RoleDTO":{"required":["code","name"],"type":"object","properties":{"id":{"type":"integer","description":"角色ID","format":"int64"},"name":{"maxLength":50,"minLength":2,"type":"string","description":"角色名称","example":"系统管理员"},"code":{"maxLength":50,"minLength":4,"pattern":"^ROLE_[A-Z0-9_]+$","type":"string","description":"角色编码","example":"ROLE_ADMIN"},"description":{"type":"string","description":"角色描述"},"permissionIds":{"uniqueItems":true,"type":"array","description":"权限ID列表","items":{"type":"integer","description":"权限ID列表","format":"int64"}}},"description":"角色数据"},"ResultRoleVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/RoleVO"}}},"RoleVO":{"type":"object","properties":{"id":{"type":"integer","description":"角色ID","format":"int64"},"name":{"type":"string","description":"角色名称"},"code":{"type":"string","description":"角色编码"},"description":{"type":"string","description":"角色描述"},"createdAt":{"type":"string","description":"创建时间","format":"date-time"},"updatedAt":{"type":"string","description":"更新时间","format":"date-time"},"permissions":{"uniqueItems":true,"type":"array","description":"权限列表","items":{"$ref":"#/components/schemas/Permission"}}},"description":"角色信息"},"PermissionDTO":{"required":["code","name"],"type":"object","properties":{"id":{"type":"integer","description":"权限ID","format":"int64"},"name":{"maxLength":50,"minLength":2,"type":"string","description":"权限名称","example":"用户查询"},"code":{"maxLength":50,"minLength":4,"pattern":"^[A-Z0-9_]+$","type":"string","description":"权限编码","example":"USER_QUERY"},"description":{"type":"string","description":"权限描述"},"url":{"type":"string","description":"资源URL"},"method":{"type":"string","description":"HTTP方法","example":"GET"}},"description":"权限数据"},"PermissionVO":{"type":"object","properties":{"id":{"type":"integer","description":"权限ID","format":"int64"},"name":{"type":"string","description":"权限名称"},"code":{"type":"string","description":"权限编码"},"description":{"type":"string","description":"权限描述"},"url":{"type":"string","description":"资源URL"},"method":{"type":"string","description":"HTTP方法"},"createdAt":{"type":"string","description":"创建时间","format":"date-time"},"updatedAt":{"type":"string","description":"更新时间","format":"date-time"}},"description":"权限信息"},"ResultPermissionVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/PermissionVO"}}},"ResultMapStringString":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"object","additionalProperties":{"type":"string"}}}},"InstitutionVO":{"type":"object","properties":{"id":{"type":"integer","description":"ID","format":"int64"},"name":{"type":"string","description":"机构名称"},"logo":{"type":"string","description":"机构Logo"},"description":{"type":"string","description":"机构描述"},"status":{"type":"integer","description":"状态：0-待审核，1-正常，2-禁用","format":"int32"},"contactPerson":{"type":"string","description":"联系人"},"contactPhone":{"type":"string","description":"联系电话"},"contactEmail":{"type":"string","description":"联系邮箱"},"address":{"type":"string","description":"地址"},"createdAt":{"type":"string","description":"创建时间","format":"date-time"},"updatedAt":{"type":"string","description":"更新时间","format":"date-time"}},"description":"机构信息"},"ResultInstitutionVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/InstitutionVO"}}},"InstitutionApplyDTO":{"required":["captchaCode","captchaKey","contactEmail","contactPerson","name"],"type":"object","properties":{"name":{"type":"string","description":"机构名称","example":"示例教育机构"},"logo":{"type":"string","description":"机构Logo","example":"https://example.com/logo.png"},"description":{"maxLength":500,"minLength":0,"type":"string","description":"机构描述","example":"专注于提供高质量的在线课程..."},"contactPerson":{"type":"string","description":"联系人","example":"张三"},"contactPhone":{"pattern":"^1[3-9]\\d{9}$","type":"string","description":"联系电话","example":"13800138000"},"contactEmail":{"type":"string","description":"联系邮箱","example":"contact@example.com"},"address":{"type":"string","description":"地址","example":"北京市朝阳区xxx街道xxx号"},"captchaKey":{"type":"string","description":"验证码Key","example":"7d8f3e"},"captchaCode":{"type":"string","description":"验证码","example":"A2B3"}},"description":"机构申请参数"},"ResultString":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"string"}}},"RegisterDTO":{"required":["captchaCode","captchaKey","email","emailCode","password","username"],"type":"object","properties":{"username":{"maxLength":20,"minLength":4,"pattern":"^[a-zA-Z0-9_]+$","type":"string","description":"用户名","example":"zhangsan"},"password":{"maxLength":20,"minLength":6,"type":"string","description":"密码","example":"password123"},"email":{"type":"string","description":"邮箱","example":"zhangsan@example.com"},"phone":{"pattern":"^1[3-9]\\d{9}$","type":"string","description":"手机号","example":"13812345678"},"captchaKey":{"type":"string","description":"验证码Key","example":"123456"},"captchaCode":{"type":"string","description":"验证码","example":"1234"},"emailCode":{"maxLength":6,"minLength":6,"pattern":"^\\d{6}$","type":"string","description":"邮箱验证码","example":"123456"}},"description":"注册请求"},"RefreshTokenDTO":{"required":["refreshToken"],"type":"object","properties":{"refreshToken":{"type":"string","description":"刷新令牌","example":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."}},"description":"刷新令牌请求"},"JwtTokenDTO":{"type":"object","properties":{"accessToken":{"type":"string"},"refreshToken":{"type":"string"},"tokenType":{"type":"string"},"expiresIn":{"type":"integer","format":"int64"}}},"ResultJwtTokenDTO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/JwtTokenDTO"}}},"LoginDTO":{"required":["captchaCode","captchaKey","password","username"],"type":"object","properties":{"username":{"type":"string","description":"用户名","example":"zhangsan"},"password":{"type":"string","description":"密码","example":"password123"},"captchaKey":{"type":"string","description":"验证码Key","example":"123456"},"captchaCode":{"type":"string","description":"验证码","example":"1234"}},"description":"登录请求"},"InstitutionRegisterDTO":{"required":["captchaCode","captchaKey","email","emailCode","institutionCode","password","username"],"type":"object","properties":{"username":{"maxLength":20,"minLength":4,"pattern":"^[a-zA-Z0-9_]+$","type":"string","description":"用户名","example":"institution_user"},"password":{"maxLength":20,"minLength":6,"type":"string","description":"密码","example":"password123"},"email":{"type":"string","description":"邮箱","example":"user@example.com"},"phone":{"pattern":"^1[3-9]\\d{9}$","type":"string","description":"手机号","example":"13800138000"},"institutionCode":{"type":"string","description":"机构注册码","example":"ABC12345"},"captchaKey":{"type":"string","description":"验证码Key","example":"7d8f3e"},"captchaCode":{"type":"string","description":"验证码","example":"A2B3"},"emailCode":{"maxLength":6,"minLength":6,"pattern":"^\\d{6}$","type":"string","description":"邮箱验证码","example":"123456"}},"description":"机构用户注册参数"},"EmailVerificationDTO":{"required":["captchaCode","captchaKey","email"],"type":"object","properties":{"email":{"type":"string","description":"邮箱","example":"zhangsan@example.com"},"captchaKey":{"type":"string","description":"验证码Key","example":"123456"},"captchaCode":{"type":"string","description":"验证码","example":"1234"}},"description":"邮箱验证码请求"},"UserQueryDTO":{"type":"object","properties":{"username":{"type":"string","description":"用户名"},"email":{"type":"string","description":"邮箱"},"phone":{"type":"string","description":"手机号"},"status":{"type":"integer","description":"状态：0-禁用，1-正常","format":"int32"},"institutionId":{"type":"integer","description":"机构ID","format":"int64"},"roleId":{"type":"integer","description":"角色ID","format":"int64"},"pageNum":{"type":"integer","description":"页码","format":"int32","default":1},"pageSize":{"type":"integer","description":"每页条数","format":"int32","default":10}},"description":"用户查询参数"},"PageUserVO":{"type":"object","properties":{"totalElements":{"type":"integer","format":"int64"},"totalPages":{"type":"integer","format":"int32"},"size":{"type":"integer","format":"int32"},"content":{"type":"array","items":{"$ref":"#/components/schemas/UserVO"}},"number":{"type":"integer","format":"int32"},"sort":{"type":"array","items":{"$ref":"#/components/schemas/SortObject"}},"first":{"type":"boolean"},"last":{"type":"boolean"},"numberOfElements":{"type":"integer","format":"int32"},"pageable":{"$ref":"#/components/schemas/PageableObject"},"empty":{"type":"boolean"}}},"PageableObject":{"type":"object","properties":{"offset":{"type":"integer","format":"int64"},"sort":{"type":"array","items":{"$ref":"#/components/schemas/SortObject"}},"pageSize":{"type":"integer","format":"int32"},"paged":{"type":"boolean"},"pageNumber":{"type":"integer","format":"int32"},"unpaged":{"type":"boolean"}}},"ResultPageUserVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/PageUserVO"}}},"SortObject":{"type":"object","properties":{"direction":{"type":"string"},"nullHandling":{"type":"string"},"ascending":{"type":"boolean"},"property":{"type":"string"},"ignoreCase":{"type":"boolean"}}},"ResultListRoleVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/RoleVO"}}}},"InstitutionApplicationQueryDTO":{"type":"object","properties":{"applicationId":{"type":"string","description":"申请ID","example":"APP123456"},"name":{"type":"string","description":"机构名称","example":"示例教育机构"},"contactPerson":{"type":"string","description":"联系人","example":"张三"},"contactEmail":{"type":"string","description":"联系邮箱","example":"contact@example.com"},"status":{"type":"integer","description":"状态：0-待审核，1-已通过，2-已拒绝","format":"int32","example":0},"pageNum":{"type":"integer","description":"页码","format":"int32","default":1},"pageSize":{"type":"integer","description":"每页条数","format":"int32","default":10}},"description":"机构申请查询参数"},"InstitutionApplicationVO":{"type":"object","properties":{"id":{"type":"integer","description":"ID","format":"int64"},"applicationId":{"type":"string","description":"申请ID"},"name":{"type":"string","description":"机构名称"},"logo":{"type":"string","description":"机构Logo"},"description":{"type":"string","description":"机构描述"},"contactPerson":{"type":"string","description":"联系人"},"contactPhone":{"type":"string","description":"联系电话"},"contactEmail":{"type":"string","description":"联系邮箱"},"address":{"type":"string","description":"地址"},"status":{"type":"integer","description":"状态：0-待审核，1-已通过，2-已拒绝","format":"int32"},"reviewComment":{"type":"string","description":"审核结果备注"},"reviewerId":{"type":"integer","description":"审核人ID","format":"int64"},"reviewedAt":{"type":"string","description":"审核时间","format":"date-time"},"institutionId":{"type":"integer","description":"关联的机构ID","format":"int64"},"createdAt":{"type":"string","description":"创建时间","format":"date-time"},"updatedAt":{"type":"string","description":"更新时间","format":"date-time"}},"description":"机构申请信息"},"PageInstitutionApplicationVO":{"type":"object","properties":{"totalElements":{"type":"integer","format":"int64"},"totalPages":{"type":"integer","format":"int32"},"size":{"type":"integer","format":"int32"},"content":{"type":"array","items":{"$ref":"#/components/schemas/InstitutionApplicationVO"}},"number":{"type":"integer","format":"int32"},"sort":{"type":"array","items":{"$ref":"#/components/schemas/SortObject"}},"first":{"type":"boolean"},"last":{"type":"boolean"},"numberOfElements":{"type":"integer","format":"int32"},"pageable":{"$ref":"#/components/schemas/PageableObject"},"empty":{"type":"boolean"}}},"ResultPageInstitutionApplicationVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/PageInstitutionApplicationVO"}}},"ResultInstitutionApplicationVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"$ref":"#/components/schemas/InstitutionApplicationVO"}}},"ResultListPermissionVO":{"type":"object","properties":{"code":{"type":"integer","format":"int32"},"message":{"type":"string"},"data":{"type":"array","items":{"$ref":"#/components/schemas/PermissionVO"}}}}},"securitySchemes":{"Bearer Authentication":{"type":"http","scheme":"bearer","bearerFormat":"JWT"}}}}
</file>

<file path="docs/API接口说明.md">
# 在线课程平台API接口说明

## 基础信息

- 接口基础路径: `/api`
- 认证方式: Bearer Token
- 响应格式: JSON
- Swagger地址: `/swagger-ui.html`

## 通用响应格式

所有接口统一使用以下响应格式：

```json
{
  "code": 200,          // 状态码，200表示成功，其他值表示失败
  "message": "操作成功",  // 消息描述
  "data": {}            // 数据，可能为空
}
```

## 错误码说明

| 错误码 | 描述 |
| ------ | ---- |
| 200 | 操作成功 |
| 400 | 请求参数错误 |
| 401 | 未认证或认证失败 |
| 403 | 权限不足 |
| 404 | 资源不存在 |
| 500 | 服务器内部错误 |

## 认证接口

### 获取验证码key

获取验证码key，用于后续获取验证码图片

- 请求方式: `GET`
- 接口地址: `/api/auth/captcha/key`
- 权限要求: 无需认证

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": "123e4567-e89b-12d3-a456-426614174000"  // 验证码key
  }
  ```

### 获取验证码图片

根据验证码key获取验证码图片

- 请求方式: `GET`
- 接口地址: `/api/auth/captcha/image/{key}`
- 权限要求: 无需认证
- 路径参数:
  - `key`: 验证码key

- 响应:
  - 图片数据（JPEG格式）
  - 响应头:
    - `Content-Type: image/jpeg`
    - `Cache-Control: no-store, no-cache, must-revalidate`

### 发送邮箱验证码

发送邮箱验证码，用于用户注册

- 请求方式: `POST`
- 接口地址: `/api/auth/email-verification-code`
- 权限要求: 无需认证
- 请求参数:
  ```json
  {
    "email": "test@example.com",          // 邮箱地址
    "captchaKey": "123456",               // 验证码key
    "captchaCode": "1234"                 // 图形验证码
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

### 用户注册

注册新用户，需要先获取邮箱验证码

- 请求方式: `POST`
- 接口地址: `/api/auth/register`
- 权限要求: 无需认证
- 请求参数:
  ```json
  {
    "username": "zhangsan",               // 用户名，4-20位，只能包含字母、数字和下划线
    "password": "password123",            // 密码，6-20位
    "email": "zhangsan@example.com",      // 邮箱
    "phone": "13812345678",               // 手机号（可选）
    "captchaKey": "123456",               // 验证码key
    "captchaCode": "1234",                // 图形验证码
    "emailCode": "123456"                 // 邮箱验证码
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

### 用户登录

用户登录获取JWT令牌

- 请求方式: `POST`
- 接口地址: `/api/auth/login`
- 请求参数:
  ```json
  {
    "username": "zhangsan",               // 用户名
    "password": "password123",            // 密码
    "captchaKey": "123456",               // 验证码标识
    "captchaCode": "1234"                 // 验证码
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",  // 访问令牌
      "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...", // 刷新令牌
      "tokenType": "Bearer",                                     // 令牌类型
      "expiresIn": 3600000                                      // 过期时间（毫秒）
    }
  }
  ```

### 刷新令牌

刷新JWT令牌

- 请求方式: `POST`
- 接口地址: `/api/auth/refresh-token`
- 请求参数:
  ```json
  {
    "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."  // 刷新令牌
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",  // 新的访问令牌
      "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...", // 刷新令牌（不变）
      "tokenType": "Bearer",                                     // 令牌类型
      "expiresIn": 3600000                                      // 过期时间（毫秒）
    }
  }
  ```

### 注销

用户注销

- 请求方式: `POST`
- 接口地址: `/api/auth/logout`
- 请求头:
  - `Authorization`: Bearer Token

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

## 用户管理接口

### 获取用户列表

分页查询用户列表

- 请求方式: `GET`
- 接口地址: `/api/users`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  - `username`: 用户名（可选，模糊查询）
  - `email`: 邮箱（可选，模糊查询）
  - `phone`: 手机号（可选，模糊查询）
  - `status`: 状态（可选，0-禁用，1-正常）
  - `institutionId`: 机构ID（可选）
  - `roleId`: 角色ID（可选）
  - `pageNum`: 页码，默认1
  - `pageSize`: 每页条数，默认10

- 请求示例:
  ```
  GET /api/users?username=zhang&status=1&pageNum=1&pageSize=10
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "content": [
        {
          "id": 1,
          "username": "zhangsan",
          "email": "zhangsan@example.com",
          "phone": "13812345678",
          "avatar": "avatar.jpg",
          "nickname": "张三",
          "status": 1,
          "institutionId": null,
          "createdAt": "2023-01-01T12:00:00",
          "updatedAt": "2023-01-01T12:00:00",
          "lastLoginAt": "2023-01-01T12:00:00",
          "roles": [
            {
              "id": 1,
              "name": "普通用户",
              "code": "ROLE_USER"
            }
          ]
        }
      ],
      "pageable": {
        "pageNumber": 0,
        "pageSize": 10,
        "sort": {
          "empty": true,
          "sorted": false,
          "unsorted": true
        },
        "offset": 0,
        "paged": true,
        "unpaged": false
      },
      "last": true,
      "totalElements": 1,
      "totalPages": 1,
      "size": 10,
      "number": 0,
      "sort": {
        "empty": true,
        "sorted": false,
        "unsorted": true
      },
      "first": true,
      "numberOfElements": 1,
      "empty": false
    }
  }
  ```

### 获取用户详情

根据用户ID获取用户详情

- 请求方式: `GET`
- 接口地址: `/api/users/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 用户ID

- 请求示例:
  ```
  GET /api/users/1
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "zhangsan@example.com",
      "phone": "13812345678",
      "avatar": "avatar.jpg",
      "nickname": "张三",
      "status": 1,
      "institutionId": null,
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00",
      "lastLoginAt": "2023-01-01T12:00:00",
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        }
      ]
    }
  }
  ```

### 创建用户

创建新用户

- 请求方式: `POST`
- 接口地址: `/api/users`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  {
    "username": "zhangsan",               // 用户名，4-20位，只能包含字母、数字和下划线
    "password": "password123",            // 密码，6-20位
    "email": "zhangsan@example.com",      // 邮箱
    "phone": "13812345678",               // 手机号（可选）
    "avatar": "avatar.jpg",               // 头像（可选）
    "nickname": "张三",                    // 昵称（可选）
    "status": 1,                          // 状态：0-禁用，1-正常（可选，默认1）
    "institutionId": null,                // 机构ID（可选）
    "roleIds": [1]                        // 角色ID列表（可选，默认为普通用户）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "zhangsan@example.com",
      "phone": "13812345678",
      "avatar": "avatar.jpg",
      "nickname": "张三",
      "status": 1,
      "institutionId": null,
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00",
      "lastLoginAt": null,
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        }
      ]
    }
  }
  ```

### 更新用户

更新用户信息

- 请求方式: `PUT`
- 接口地址: `/api/users/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 用户ID
- 请求参数:
  ```json
  {
    "username": "zhangsan",               // 用户名（可选）
    "password": "newpassword123",         // 密码（可选）
    "email": "new_email@example.com",     // 邮箱（可选）
    "phone": "13812345678",               // 手机号（可选）
    "avatar": "new_avatar.jpg",           // 头像（可选）
    "nickname": "新昵称",                  // 昵称（可选）
    "status": 1,                          // 状态（可选）
    "institutionId": 1,                   // 机构ID（可选）
    "roleIds": [1, 2]                     // 角色ID列表（可选）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "new_email@example.com",
      "phone": "13812345678",
      "avatar": "new_avatar.jpg",
      "nickname": "新昵称",
      "status": 1,
      "institutionId": 1,
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:30:00",
      "lastLoginAt": "2023-01-01T12:00:00",
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        },
        {
          "id": 2,
          "name": "管理员",
          "code": "ROLE_ADMIN"
        }
      ]
    }
  }
  ```

### 删除用户

删除用户

- 请求方式: `DELETE`
- 接口地址: `/api/users/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 用户ID

- 请求示例:
  ```
  DELETE /api/users/1
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

### 修改用户状态

修改用户状态

- 请求方式: `PATCH`
- 接口地址: `/api/users/{id}/status`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 用户ID
- 请求参数:
  - `status`: 状态（0-禁用，1-正常）

- 请求示例:
  ```
  PATCH /api/users/1/status?status=0
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "zhangsan@example.com",
      "status": 0,
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        }
      ]
    }
  }
  ```

### 给用户分配角色

给用户分配角色

- 请求方式: `PUT`
- 接口地址: `/api/users/{id}/roles`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 用户ID
- 请求参数:
  ```json
  [1, 2]  // 角色ID列表
  ```

- 请求示例:
  ```
  PUT /api/users/1/roles
  [1, 2]
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        },
        {
          "id": 2,
          "name": "管理员",
          "code": "ROLE_ADMIN"
        }
      ]
    }
  }
  ```

### 批量删除用户

批量删除用户

- 请求方式: `DELETE`
- 接口地址: `/api/users/batch`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  [1, 2]  // 用户ID列表
  ```

- 请求示例:
  ```
  DELETE /api/users/batch
  [1, 2]
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

## 角色管理接口

### 获取角色列表

获取角色列表

- 请求方式: `GET`
- 接口地址: `/api/roles`
- 权限要求: `ROLE_ADMIN`

- 请求示例:
  ```
  GET /api/roles
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": [
      {
        "id": 1,
        "name": "普通用户",
        "code": "ROLE_USER",
        "description": "普通用户角色",
        "createdAt": "2023-01-01T12:00:00",
        "updatedAt": "2023-01-01T12:00:00",
        "permissions": [
          {
            "id": 1,
            "name": "查看课程",
            "code": "COURSE_VIEW"
          }
        ]
      },
      {
        "id": 2,
        "name": "管理员",
        "code": "ROLE_ADMIN",
        "description": "系统管理员角色",
        "createdAt": "2023-01-01T12:00:00",
        "updatedAt": "2023-01-01T12:00:00",
        "permissions": [
          {
            "id": 1,
            "name": "查看课程",
            "code": "COURSE_VIEW"
          },
          {
            "id": 2,
            "name": "创建课程",
            "code": "COURSE_CREATE"
          }
        ]
      }
    ]
  }
  ```

### 获取角色详情

根据角色ID获取角色详情

- 请求方式: `GET`
- 接口地址: `/api/roles/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 角色ID

- 请求示例:
  ```
  GET /api/roles/1
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "name": "普通用户",
      "code": "ROLE_USER",
      "description": "普通用户角色",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00",
      "permissions": [
        {
          "id": 1,
          "name": "查看课程",
          "code": "COURSE_VIEW"
        }
      ]
    }
  }
  ```

### 创建角色

创建新角色

- 请求方式: `POST`
- 接口地址: `/api/roles`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  {
    "name": "审核人员",                    // 角色名称
    "code": "ROLE_REVIEWER",              // 角色编码，必须以ROLE_开头
    "description": "内容审核人员角色",      // 角色描述（可选）
    "permissionIds": [1, 3, 5]           // 权限ID列表（可选）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 3,
      "name": "审核人员",
      "code": "ROLE_REVIEWER",
      "description": "内容审核人员角色",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00",
      "permissions": [
        {
          "id": 1,
          "name": "查看课程",
          "code": "COURSE_VIEW"
        },
        {
          "id": 3,
          "name": "审核课程",
          "code": "COURSE_REVIEW"
        },
        {
          "id": 5,
          "name": "查看评论",
          "code": "COMMENT_VIEW"
        }
      ]
    }
  }
  ```

### 更新角色

更新角色信息

- 请求方式: `PUT`
- 接口地址: `/api/roles/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 角色ID
- 请求参数:
  ```json
  {
    "name": "审核专员",                    // 角色名称（可选）
    "code": "ROLE_REVIEWER",              // 角色编码（可选）
    "description": "内容审核专员角色",      // 角色描述（可选）
    "permissionIds": [1, 3, 5, 7]        // 权限ID列表（可选）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 3,
      "name": "审核专员",
      "code": "ROLE_REVIEWER",
      "description": "内容审核专员角色",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:30:00",
      "permissions": [
        {
          "id": 1,
          "name": "查看课程",
          "code": "COURSE_VIEW"
        },
        {
          "id": 3,
          "name": "审核课程",
          "code": "COURSE_REVIEW"
        },
        {
          "id": 5,
          "name": "查看评论",
          "code": "COMMENT_VIEW"
        },
        {
          "id": 7,
          "name": "审核评论",
          "code": "COMMENT_REVIEW"
        }
      ]
    }
  }
  ```

### 删除角色

删除角色

- 请求方式: `DELETE`
- 接口地址: `/api/roles/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 角色ID

- 请求示例:
  ```
  DELETE /api/roles/3
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

### 给角色分配权限

给角色分配权限

- 请求方式: `PUT`
- 接口地址: `/api/roles/{id}/permissions`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 角色ID
- 请求参数:
  ```json
  [1, 2, 3, 4]  // 权限ID列表
  ```

- 请求示例:
  ```
  PUT /api/roles/1/permissions
  [1, 2, 3, 4]
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "name": "普通用户",
      "code": "ROLE_USER",
      "permissions": [
        {
          "id": 1,
          "name": "查看课程",
          "code": "COURSE_VIEW"
        },
        {
          "id": 2,
          "name": "创建课程",
          "code": "COURSE_CREATE"
        },
        {
          "id": 3,
          "name": "审核课程",
          "code": "COURSE_REVIEW"
        },
        {
          "id": 4,
          "name": "删除课程",
          "code": "COURSE_DELETE"
        }
      ]
    }
  }
  ```

### 批量删除角色

批量删除角色

- 请求方式: `DELETE`
- 接口地址: `/api/roles/batch`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  [3, 4]  // 角色ID列表
  ```

- 请求示例:
  ```
  DELETE /api/roles/batch
  [3, 4]
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

## 权限管理接口

### 获取权限列表

获取权限列表

- 请求方式: `GET`
- 接口地址: `/api/permissions`
- 权限要求: `ROLE_ADMIN`

- 请求示例:
  ```
  GET /api/permissions
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": [
      {
        "id": 1,
        "name": "查看课程",
        "code": "COURSE_VIEW",
        "description": "查看课程信息权限",
        "url": "/api/courses",
        "method": "GET",
        "createdAt": "2023-01-01T12:00:00",
        "updatedAt": "2023-01-01T12:00:00"
      },
      {
        "id": 2,
        "name": "创建课程",
        "code": "COURSE_CREATE",
        "description": "创建课程权限",
        "url": "/api/courses",
        "method": "POST",
        "createdAt": "2023-01-01T12:00:00",
        "updatedAt": "2023-01-01T12:00:00"
      }
    ]
  }
  ```

### 获取权限详情

根据权限ID获取权限详情

- 请求方式: `GET`
- 接口地址: `/api/permissions/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 权限ID

- 请求示例:
  ```
  GET /api/permissions/1
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 1,
      "name": "查看课程",
      "code": "COURSE_VIEW",
      "description": "查看课程信息权限",
      "url": "/api/courses",
      "method": "GET",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00"
    }
  }
  ```

### 创建权限

创建新权限

- 请求方式: `POST`
- 接口地址: `/api/permissions`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  {
    "name": "编辑课程",                    // 权限名称
    "code": "COURSE_EDIT",                // 权限编码
    "description": "编辑课程信息权限",      // 权限描述（可选）
    "url": "/api/courses/{id}",           // 资源URL（可选）
    "method": "PUT"                       // HTTP方法（可选）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 3,
      "name": "编辑课程",
      "code": "COURSE_EDIT",
      "description": "编辑课程信息权限",
      "url": "/api/courses/{id}",
      "method": "PUT",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:00:00"
    }
  }
  ```

### 更新权限

更新权限信息

- 请求方式: `PUT`
- 接口地址: `/api/permissions/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 权限ID
- 请求参数:
  ```json
  {
    "name": "修改课程",                    // 权限名称（可选）
    "code": "COURSE_UPDATE",              // 权限编码（可选）
    "description": "修改课程信息权限",      // 权限描述（可选）
    "url": "/api/courses/{id}",           // 资源URL（可选）
    "method": "PUT"                       // HTTP方法（可选）
  }
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": {
      "id": 3,
      "name": "修改课程",
      "code": "COURSE_UPDATE",
      "description": "修改课程信息权限",
      "url": "/api/courses/{id}",
      "method": "PUT",
      "createdAt": "2023-01-01T12:00:00",
      "updatedAt": "2023-01-01T12:30:00"
    }
  }
  ```

### 删除权限

删除权限

- 请求方式: `DELETE`
- 接口地址: `/api/permissions/{id}`
- 权限要求: `ROLE_ADMIN`
- 路径参数:
  - `id`: 权限ID

- 请求示例:
  ```
  DELETE /api/permissions/3
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

### 批量删除权限

批量删除权限

- 请求方式: `DELETE`
- 接口地址: `/api/permissions/batch`
- 权限要求: `ROLE_ADMIN`
- 请求参数:
  ```json
  [3, 4]  // 权限ID列表
  ```

- 请求示例:
  ```
  DELETE /api/permissions/batch
  [3, 4]
  ```

- 响应示例:
  ```json
  {
    "code": 200,
    "message": "操作成功",
    "data": null
  }
  ```

## 开发说明

### 认证流程

1. 获取验证码key：调用 `/api/auth/captcha/key` 接口获取验证码key
2. 获取验证码图片：调用 `/api/auth/captcha/image/{key}` 接口获取验证码图片
3. 发送邮箱验证码：调用 `/api/auth/email-verification-code` 接口发送邮箱验证码
4. 用户注册：调用 `/api/auth/register` 接口注册用户（需要邮箱验证码）
5. 用户登录：调用 `/api/auth/login` 接口获取JWT令牌
6. 接口调用：在请求头中携带 `Authorization: Bearer {访问令牌}` 调用需要认证的接口
7. 刷新令牌：访问令牌过期时，调用 `/api/auth/refresh-token` 接口刷新令牌
8. 用户注销：调用 `/api/auth/logout` 接口注销用户

### 权限管理流程

1. 创建权限：管理员调用 `/api/permissions` 接口创建权限
2. 创建角色：管理员调用 `/api/roles` 接口创建角色
3. 给角色分配权限：管理员调用 `/api/roles/{id}/permissions` 接口给角色分配权限
4. 创建用户：管理员调用 `/api/users` 接口创建用户
5. 给用户分配角色：管理员调用 `/api/users/{id}/roles` 接口给用户分配角色

### 注意事项

1. 图形验证码有效期为5分钟，请在有效期内使用
2. 邮箱验证码有效期为5分钟，请在有效期内使用
3. 访问令牌有效期为1小时，刷新令牌有效期为7天
4. 请求头中的认证信息格式必须为 `Authorization: Bearer {访问令牌}`
5. 刷新令牌仅能使用一次，使用后会生成新的访问令牌，但刷新令牌本身不变
6. 权限编码必须以`ROLE_`开头的才是角色，其他的是普通权限
7. 系统内置了四种基本角色：普通用户(ROLE_USER)、管理员(ROLE_ADMIN)、审核人员(ROLE_REVIEWER)、机构用户(ROLE_INSTITUTION)

## 用户自身管理接口

### 获取当前用户信息

- **URL**: `/api/users/current`
- **方法**: `GET`
- **描述**: 获取当前登录用户的详细信息
- **请求头**: `Authorization: Bearer {accessToken}`
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "获取成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "zhangsan@example.com",
      "nickname": "张三",
      "phone": "13800138000",
      "avatar": "https://example.com/avatars/default.png",
      "status": 1,
      "createdAt": "2023-01-01T12:00:00Z",
      "lastLoginAt": "2023-01-01T12:00:00Z",
      "roles": [
        {
          "id": 1,
          "name": "普通用户",
          "code": "ROLE_USER"
        }
      ]
    }
  }
  ```
- **错误响应**:
  - 401 Unauthorized: 未授权

### 更新当前用户信息

- **URL**: `/api/users/current`
- **方法**: `PUT`
- **描述**: 更新当前登录用户的个人资料
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**:
  ```json
  {
    "nickname": "新昵称",
    "phone": "13812345678"
  }
  ```
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "更新成功",
    "data": {
      "id": 1,
      "username": "zhangsan",
      "email": "zhangsan@example.com",
      "nickname": "新昵称",
      "phone": "13812345678",
      "avatar": "https://example.com/avatars/default.png",
      "updatedAt": "2023-01-01T13:00:00Z"
    }
  }
  ```
- **错误响应**:
  - 400 Bad Request: 参数错误
  - 401 Unauthorized: 未授权

### 修改当前用户密码

- **URL**: `/api/users/current/password`
- **方法**: `PUT`
- **描述**: 修改当前登录用户的密码
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**:
  ```json
  {
    "oldPassword": "Password123",
    "newPassword": "NewPassword456",
    "confirmPassword": "NewPassword456"
  }
  ```
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "密码修改成功",
    "data": null
  }
  ```
- **错误响应**:
  - 400 Bad Request: 参数错误或新密码与确认密码不匹配
  - 401 Unauthorized: 未授权或旧密码不正确

### 上传用户头像

- **URL**: `/api/users/current/avatar`
- **方法**: `POST`
- **描述**: 上传并设置当前用户的头像
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**: `multipart/form-data` 类型，包含名为 `avatar` 的文件字段
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "头像上传成功",
    "data": {
      "avatarUrl": "https://example.com/avatars/user1/avatar.jpg"
    }
  }
  ```
- **错误响应**:
  - 400 Bad Request: 文件格式不支持或文件大小超限
  - 401 Unauthorized: 未授权

### 获取邮箱更新验证码

- **URL**: `/api/users/current/email-code`
- **方法**: `POST`
- **描述**: 向用户新邮箱发送验证码，用于更新邮箱地址
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**:
  ```json
  {
    "newEmail": "new-email@example.com"
  }
  ```
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "验证码已发送到新邮箱，请查收",
    "data": null
  }
  ```
- **错误响应**:
  - 400 Bad Request: 邮箱格式不正确或已被其他用户使用
  - 401 Unauthorized: 未授权
  - 429 Too Many Requests: 请求频率过高

### 更新用户邮箱

- **URL**: `/api/users/current/email`
- **方法**: `PUT`
- **描述**: 使用验证码更新用户邮箱
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**:
  ```json
  {
    "newEmail": "new-email@example.com",
    "verificationCode": "123456"
  }
  ```
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "邮箱更新成功",
    "data": {
      "email": "new-email@example.com",
      "updatedAt": "2023-01-01T14:00:00Z"
    }
  }
  ```
- **错误响应**:
  - 400 Bad Request: 参数错误
  - 401 Unauthorized: 未授权
  - 403 Forbidden: 验证码错误
  - 410 Gone: 验证码已过期

## 系统设置接口

### 获取系统配置 (管理员)

- **URL**: `/api/admin/settings`
- **方法**: `GET`
- **描述**: 获取系统配置信息
- **请求头**: `Authorization: Bearer {accessToken}`
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "获取成功",
    "data": {
      "siteName": "在线课程平台",
      "siteDescription": "提供优质的在线课程学习平台",
      "contactEmail": "contact@example.com",
      "registrationEnabled": true,
      "maintenanceMode": false,
      "fileStorageType": "minio",
      "maxUploadSize": 10485760
    }
  }
  ```
- **错误响应**:
  - 401 Unauthorized: 未授权
  - 403 Forbidden: 无权限

### 更新系统配置 (管理员)

- **URL**: `/api/admin/settings`
- **方法**: `PUT`
- **描述**: 更新系统配置信息
- **请求头**: `Authorization: Bearer {accessToken}`
- **请求体**:
  ```json
  {
    "siteName": "优质在线教育平台",
    "siteDescription": "提供高质量的在线课程学习体验",
    "contactEmail": "support@example.com",
    "registrationEnabled": true,
    "maintenanceMode": false,
    "maxUploadSize": 20971520
  }
  ```
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "更新成功",
    "data": {
      "siteName": "优质在线教育平台",
      "siteDescription": "提供高质量的在线课程学习体验",
      "contactEmail": "support@example.com",
      "registrationEnabled": true,
      "maintenanceMode": false,
      "maxUploadSize": 20971520,
      "updatedAt": "2023-01-01T13:00:00Z"
    }
  }
  ```
- **错误响应**:
  - 400 Bad Request: 参数错误
  - 401 Unauthorized: 未授权
  - 403 Forbidden: 无权限

## 课程相关接口

### 获取课程分类列表（待实现）

- **URL**: `/api/categories`
- **方法**: `GET`
- **描述**: 获取所有课程分类
- **请求参数**: 无
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "获取成功",
    "data": [
      {
        "id": 1,
        "name": "计算机科学",
        "code": "computer-science",
        "parentId": null,
        "level": 1,
        "children": [
          {
            "id": 2,
            "name": "编程语言",
            "code": "programming-languages",
            "parentId": 1,
            "level": 2,
            "children": []
          },
          {
            "id": 3,
            "name": "数据库",
            "code": "databases",
            "parentId": 1,
            "level": 2,
            "children": []
          }
        ]
      },
      {
        "id": 4,
        "name": "数学",
        "code": "mathematics",
        "parentId": null,
        "level": 1,
        "children": []
      }
    ]
  }
  ```

### 获取课程标签列表（待实现）

- **URL**: `/api/tags`
- **方法**: `GET`
- **描述**: 获取所有课程标签
- **请求参数**:
  - `size`: 返回标签数量，默认为20
  - `popular`: 是否返回热门标签，默认为false
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "获取成功",
    "data": [
      {
        "id": 1,
        "name": "Java",
        "courseCount": 42
      },
      {
        "id": 2,
        "name": "Spring Boot",
        "courseCount": 38
      },
      {
        "id": 3,
        "name": "JavaScript",
        "courseCount": 56
      }
    ]
  }
  ```

### 获取课程列表（待实现）

- **URL**: `/api/courses`
- **方法**: `GET`
- **描述**: 获取课程列表
- **请求参数**:
  - `page`: 页码，默认为0
  - `size`: 每页大小，默认为10
  - `sort`: 排序字段，默认为createdAt,desc
  - `categoryId`: 按分类筛选
  - `tagId`: 按标签筛选
  - `keyword`: 搜索关键词
  - `price`: 价格区间，格式为"min,max"，如"0,100"
  - `level`: 难度级别，值为1(初级)、2(中级)或3(高级)
- **成功响应** (200 OK):
  ```json
  {
    "code": 200,
    "message": "获取成功",
    "data": {
      "content": [
        {
          "id": 1,
          "title": "Spring Boot实战入门到精通",
          "summary": "全面讲解Spring Boot框架的使用方法和最佳实践",
          "coverUrl": "https://example.com/covers/spring-boot.jpg",
          "price": 199.00,
          "discountPrice": 149.00,
          "level": 2,
          "totalDuration": 1240,
          "studentCount": 1205,
          "rating": 4.8,
          "categoryId": 2,
          "categoryName": "编程语言",
          "teacherName": "张教授",
          "tags": [
            {
              "id": 2,
              "name": "Spring Boot"
            },
            {
              "id": 8,
              "name": "Java"
            }
          ]
        }
      ],
      "pageable": {
        "pageNumber": 0,
        "pageSize": 10,
        "sort": [
          {
            "direction": "DESC",
            "property": "createdAt"
          }
        ]
      },
      "totalElements": 42,
      "totalPages": 5,
      "last": false,
      "size": 10,
      "number": 0,
      "sort": {
        "sorted": true,
        "unsorted": false,
        "empty": false
      },
      "numberOfElements": 10,
      "first": true,
      "empty": false
    }
  }
  ```

## 访问权限说明

对API接口的访问权限采用基于角色的访问控制(RBAC)策略：

- **公开接口**: 不需要任何权限即可访问，如注册、登录、公共课程列表等
- **用户接口**: 需要普通用户权限(`ROLE_USER`)，如个人信息管理、课程观看等
- **机构接口**: 需要机构权限(`ROLE_INSTITUTION`)，如创建和管理课程等
- **管理员接口**: 需要管理员权限(`ROLE_ADMIN`)，如用户管理、系统设置等

## 附录：错误码说明

| 错误码 | 描述                       |
|--------|----------------------------|
| 40001  | 请求参数错误               |
| 40002  | 表单验证失败               |
| 40003  | 数据不存在                 |
| 40004  | 用户名或密码错误           |
| 40005  | 账号被锁定                 |
| 40006  | 验证码错误或已过期         |
| 40007  | 文件上传失败               |
| 40008  | 操作频率超限               |
| 40009  | 数据已存在                 |
| 40010  | 数据关联，无法删除         |
| 50001  | 系统内部错误               |
| 50002  | 数据库操作失败             |
| 50003  | 第三方服务调用失败         |
</file>

<file path="docs/fornt/开发进度.md">
# 在线课程平台前端开发进度

## 已完成工作

### 项目初始化与配置
- [x] 项目基础架构创建（React + TypeScript + Vite）
- [x] 安装和配置核心依赖
  - React Router DOM
  - Zustand
  - Axios
  - React Hook Form + Zod
  - Shadcn UI组件库
  - Tailwind CSS
  - 其他工具库
- [x] 路径别名配置（@/ -> src/）
- [x] ESLint和TypeScript配置
- [x] Vite代理配置（解决跨域问题）

### 目录结构设计
- [x] 创建核心目录结构
  - assets：静态资源
  - components：通用组件
  - hooks：自定义钩子
  - lib：工具函数库
  - pages：页面组件
  - services：API服务
  - stores：状态管理
  - types：类型定义

### API服务与数据类型
- [x] 定义API接口返回数据类型（ApiResponse, PageResponse等）
- [x] 定义用户、角色、权限等模型类型
- [x] 实现基于Axios的API请求工具
  - 请求拦截器（添加token）
  - 响应拦截器（处理错误、刷新token）
  - 封装GET、POST、PUT、DELETE方法
- [x] 实现认证服务（登录、注册、获取验证码等）
- [x] 优化认证请求处理，修复认证相关错误
- [x] 修复登录重定向问题，确保登录后正确跳转到仪表盘
- [x] 完善注销功能，清除令牌和Cookie
- [x] 实现邮箱验证码请求服务
  - 定义`EmailVerificationRequest`接口
  - 添加`sendEmailVerificationCode`方法
- [x] 实现用户服务(userService.ts)
  - 获取当前用户信息
  - 更新用户基本信息
  - 更新用户密码
  - 更新用户邮箱
  - 上传用户头像
- [x] 实现机构服务(institutionService.ts)
  - 机构申请提交
  - 申请状态查询
  - 获取机构注册码
  - 机构用户注册

### 状态管理
- [x] 实现认证状态管理（authStore）
  - 用户登录状态
  - Token管理（包括localStorage和Cookie双重存储）
  - 登录/注册/注销功能（已完善Cookie清理）
  - 添加邮箱验证码发送功能
- [x] 实现UI状态管理（uiStore）
  - 侧边栏状态
  - 主题管理（亮色/暗色/系统）
- [x] 实现机构状态管理（institutionStore）
  - 机构申请状态
  - 申请进度跟踪
  - 注册码管理

### 路由管理
- [x] 定义应用路由结构
- [x] 实现路由守卫（RequireAuth）
- [x] 实现懒加载
- [x] 添加机构相关路由
  - 机构申请页面
  - 申请状态查询页面
  - 机构用户注册页面

### 页面开发
- [x] 布局组件
  - MainLayout：主布局（包含导航栏和侧边栏）
  - AuthLayout：认证页面布局
- [x] 认证页面
  - 登录页面（包含表单验证和验证码）
  - 注册页面（优化为两步流程：基本信息 + 邮箱验证）
  - 机构用户注册页面（包含注册码验证）
- [x] 基础页面
  - 首页
  - 404页面
- [x] 用户页面
  - [x] 个人资料页（完整实现，包含信息编辑、密码修改、邮箱更新和头像上传）
  - 设置页面（占位实现）
- [x] 管理页面（占位实现）
  - 用户管理
  - 角色管理
  - 权限管理
- [x] 机构页面
  - [x] 机构申请页面（包含表单验证和文件上传）
  - [x] 申请状态查询页面
  - [x] 机构用户注册页面（包含注册码验证）

### UI组件
- [x] 实现导航栏组件（Navbar）
- [x] 实现侧边栏组件（Sidebar）
- [x] 实现主题切换组件（ThemeSwitcher）
- [x] 实现验证码组件（Captcha）
- [x] 默认使用亮色主题
- [x] 实现机构相关组件
  - [x] 机构申请表单（InstitutionApplicationForm）
  - [x] 申请状态展示（ApplicationStatus）
  - [x] 注册码验证组件（RegisterCodeVerification）

### 注册流程优化
- [x] 重构注册页面为分步表单
  - 第一步：填写基本信息（用户名、密码）
  - 第二步：邮箱验证（邮箱、验证码、邮箱验证码）
- [x] 增强用户体验
  - 步骤间数据保存与传递
  - 步骤间状态保持
  - 增加返回上一步功能
  - 邮箱验证码发送倒计时
- [x] 修复API路径问题
  - 更新验证码获取接口路径
  - 调整为两步请求：先获取key再获取图片

### 个人中心功能
- [x] 获取当前用户信息
- [x] 实现个人资料页面
  - [x] 添加选项卡式界面，包含个人资料、密码修改和邮箱更新
  - [x] 实现个人基本信息表单（昵称、手机号）
  - [x] 实现密码修改表单（旧密码、新密码、确认密码）
  - [x] 实现邮箱更新表单（当前密码、新邮箱、验证码）
  - [x] 实现头像上传与裁剪功能
  - [x] 优化表单布局和用户体验
- [ ] 实现设置页面

### 机构管理功能
- [x] 实现机构申请流程
  - [x] 机构信息表单（名称、描述、联系信息等）
  - [x] Logo上传与预览
  - [x] 表单验证与提交
  - [x] 申请状态跟踪
- [x] 实现机构用户注册
  - [x] 注册码验证
  - [x] 基本信息填写
  - [x] 邮箱验证
  - [x] 注册完成处理

## 进行中工作

### 用户管理功能
- [ ] 完善用户服务(userService.ts)
  - GET `/api/users` - 获取用户列表
  - GET `/api/users/{id}` - 获取用户详情
  - POST `/api/users` - 创建用户
  - PUT `/api/users/{id}` - 更新用户
  - DELETE `/api/users/{id}` - 删除用户
- [ ] 实现用户管理状态(userManagementStore.ts)
- [ ] 完善用户列表页面
  - 添加数据表格组件
  - 实现分页功能
  - 实现搜索筛选
- [ ] 实现用户表单组件
  - 创建用户表单
  - 编辑用户表单
  - 表单验证

### 角色与权限管理
- [ ] 创建角色服务(roleService.ts)
  - GET `/api/roles` - 获取角色列表
  - GET `/api/roles/{id}` - 获取角色详情
  - POST `/api/roles` - 创建角色
  - PUT `/api/roles/{id}` - 更新角色
  - DELETE `/api/roles/{id}` - 删除角色
  - PUT `/api/roles/{id}/permissions` - 分配权限
- [ ] 创建权限服务(permissionService.ts)
  - GET `/api/permissions` - 获取权限列表
  - GET `/api/permissions/{id}` - 获取权限详情
- [ ] 实现角色管理页面
- [ ] 实现权限管理页面

### 解决的技术问题
- [x] 实现了基于Tabs的多功能个人资料页面
- [x] 利用React Hook Form和Zod实现表单验证和提交
- [x] 实现了头像上传预览和裁剪功能（使用react-image-crop）
- [x] 添加了邮箱更新的验证码机制
- [x] 优化了表单提交和错误处理流程
- [x] 修复了表单控件非受控到受控状态切换的问题
- [x] 优化了邮箱更新的用户体验，添加了密码先验证的流程
- [x] 实现了表单提交状态管理和Loading指示
- [x] 修复了机构申请表单的文件上传问题
- [x] 优化了机构注册码验证流程
- [x] 完善了机构用户注册的角色分配

## 待开发工作
- [ ] 课程模块页面
  - 课程列表
  - 课程详情
  - 课程搜索
- [ ] 学习模块页面
  - 视频播放
  - 课程笔记
  - 进度记录
- [ ] 订单与支付模块
  - 课程购买
  - 订单管理
- [ ] 管理模块完善
  - 用户管理CRUD
  - 角色管理CRUD
  - 权限管理CRUD
  - 课程管理
  - 内容审核

## 问题与解决方案
- [x] 路由加载问题：创建了页面占位组件解决路由导入错误
- [x] 暗色背景问题：添加了主题切换器并默认使用亮色主题
- [x] 跨域问题：通过配置Vite代理解决
- [x] 验证码获取问题：修复验证码请求URL和处理方式，确保正确显示验证码图片
- [x] 验证码处理流程：优化验证码组件，确保正确使用后端生成的验证码Key
- [x] 登录会话问题：修复响应拦截器对认证请求的处理，避免误报"会话过期"
- [x] 错误处理问题：增强错误处理和日志记录，提供更明确的错误提示
- [x] 验证码路径问题：修复了验证码获取路径，改为先获取key再获取图片
- [x] 邮件发送配置问题：修复后端邮件发送配置，确保发件人地址与SMTP认证用户一致
- [x] 登录重定向问题：修复了登录后的重定向逻辑，确保正确跳转到仪表盘
- [x] Cookie处理问题：在登录时同时设置localStorage和Cookie，注销时清除所有认证数据
- [x] 用户角色判断问题：修复了侧边栏和仪表盘中的角色判断逻辑，从使用单一角色(user.role)改为正确处理角色数组(user.roles)
- [x] 用户信息获取失败问题：修复了getCurrentUser方法中的授权头处理，确保正确传递token，并增强了错误日志和容错处理
- [x] API请求工具问题：改进了请求方法的实现，添加了更好的错误处理和日志记录，确保所有请求包含正确的Content-Type和Accept头
- [x] 机构Logo上传问题：修复了文件上传组件的验证和预览功能
- [x] 注册码验证问题：优化了注册码验证的错误处理和提示
- [ ] 移动端适配：需要优化布局和响应式设计

## 注册流程与邮箱验证

### 优化后的注册流程
- **第一步：基本信息填写**
  - 用户名输入（验证长度4-20个字符）
  - 密码输入（验证长度6-20个字符）
  - 确认密码（验证与密码一致）
  - 数据暂存在组件state中
  - 点击"下一步"进入第二步

- **第二步：邮箱验证**
  - 显示已填写的用户名提示
  - 邮箱地址输入
  - 图形验证码输入与获取
  - 发送邮箱验证码按钮（带60秒倒计时）
  - 邮箱验证码输入
  - 点击"完成注册"提交所有数据
  - "返回上一步"按钮支持修改基本信息

### 机构用户注册流程
- **第一步：注册码验证**
  - 输入机构注册码
  - 验证注册码有效性
  - 显示机构基本信息
  - 点击"下一步"进入基本信息填写

- **第二步：基本信息填写**
  - 用户名输入
  - 密码输入和确认
  - 点击"下一步"进入邮箱验证

- **第三步：邮箱验证**
  - 邮箱地址输入
  - 图形验证码验证
  - 邮箱验证码验证
  - 完成注册

### 邮箱验证码处理
- 验证码发送前进行即时表单验证
- 验证码发送成功后启用倒计时，防止频繁请求
- 验证码发送成功后才允许点击"完成注册"按钮
- 使用toast提示验证码发送状态和错误信息

### 前端技术实现
- 使用zod进行强类型表单验证
- 使用React Hook Form管理表单状态和提交
- 使用shadcn/ui的Tabs组件实现分步UI
- 使用useState保存跨步骤数据
- 使用useEffect管理验证码倒计时

## 下一步具体计划（1-2周）

### 第1周：用户管理功能
1. 创建用户服务模块
   - 实现用户列表获取
   - 实现用户详情获取
   - 实现用户创建/编辑/删除
2. 实现用户管理状态库
   - 定义状态结构
   - 实现用户数据获取与更新
3. 完善用户列表页面
   - 实现数据表格
   - 实现分页和筛选
   - 添加创建/编辑/删除操作

### 第2周：角色权限管理
1. 创建角色和权限服务模块
   - 实现角色列表获取
   - 实现权限列表获取
   - 实现角色创建/编辑/删除
   - 实现角色权限分配
2. 实现角色和权限管理状态库
   - 定义状态结构
   - 实现数据获取与更新
3. 完善角色和权限管理页面
   - 实现数据表格
   - 实现角色创建/编辑表单
   - 实现权限分配界面

### 并行任务：个人中心功能
1. 获取当前用户信息
   - 在登录成功后获取用户详情
   - 在authStore中保存用户信息
2. 完善个人资料页面
   - 显示用户基本信息
   - 实现个人信息编辑功能
3. 实现设置页面
   - 界面偏好设置
   - 密码修改功能
</file>

<file path="docs/fornt/前端开发规划.md">
# 在线课程平台前端开发规划 (Next.js版)

## 技术栈

### 核心框架
- Next.js 15.2.1
- React 19
- TypeScript 5

### 状态管理与数据获取
- Zustand：轻量级客户端状态管理
- Axios：HTTP请求库（用于客户端组件）
- SWR/React Query：(可选) 数据获取与缓存

### UI组件
- Tailwind CSS：已配置，用于样式开发
- shadcn/ui：基于Radix UI的组件集合，按需复制使用
- Lucide React：图标库
- Framer Motion：动画库

### 表单处理
- React Hook Form：表单处理库
- Zod：TypeScript优先的模式验证库

### 工具库
- date-fns：日期处理库
- clsx：条件类名合并
- Sonner：现代化 Toast 通知

### 开发工具
- ESLint：代码规范检查
- TypeScript：静态类型检查
- Next.js开发服务器（支持Fast Refresh）

## 项目结构 (Next.js应用路由)

```
src/
├── app/                    # Next.js应用路由
│   ├── (auth)/             # 认证相关路由组
│   │   ├── login/          # 登录页面
│   │   │   └── page.tsx    
│   │   ├── register/       # 注册页面
│   │   │   └── page.tsx
│   │   └── institution/    # 机构相关路由
│   │       ├── apply/      # 机构申请
│   │       ├── status/     # 申请状态查询
│   │       └── register/   # 机构用户注册
│   ├── (dashboard)/        # 需要认证的路由组
│   │   ├── layout.tsx      # 认证后的布局（侧边栏和导航栏）
│   │   ├── page.tsx        # 仪表盘首页
│   │   ├── users/          # 用户管理
│   │   ├── roles/          # 角色管理
│   │   └── permissions/    # 权限管理
│   ├── courses/            # 公开的课程路由
│   │   ├── page.tsx        # 课程列表
│   │   └── [id]/           # 动态路由-课程详情
│   │       └── page.tsx
│   ├── api/                # API路由（可选，用于简单BFF）
│   ├── layout.tsx          # 根布局
│   └── page.tsx            # 首页
├── components/             # 通用组件
│   ├── ui/                 # 基础UI组件（shadcn）
│   ├── auth/               # 认证相关组件
│   ├── institution/        # 机构相关组件
│   └── dashboard/          # 仪表盘相关组件
├── lib/                    # 工具函数库
│   ├── utils.ts            # 通用工具函数
│   └── constants.ts        # 常量定义
├── services/               # API服务（客户端）
│   ├── api.ts              # API基础配置
│   ├── auth.ts             # 认证服务
│   ├── user.ts             # 用户服务
│   └── institution.ts      # 机构服务
├── types/                  # 类型定义
│   ├── auth.ts             # 认证相关类型
│   ├── user.ts             # 用户相关类型
│   └── institution.ts      # 机构相关类型
├── stores/                 # 客户端状态管理
│   ├── auth-store.ts       # 认证状态
│   ├── ui-store.ts         # UI状态
│   └── institution-store.ts # 机构状态
└── middleware.ts           # Next.js中间件（认证路由保护）
```

## Next.js最佳实践

### 组件设计
1. **服务器组件与客户端组件分离**
   - 默认使用服务器组件（不添加'use client'）
   - 需要交互、hooks、浏览器API的组件使用客户端组件（添加'use client'）
   - 尽可能将状态提升到叶子组件，保持大部分UI为服务器组件

2. **布局与页面**
   - 使用嵌套布局（layouts）共享UI
   - 使用路由组（route groups）组织相关路由
   - 使用loading.tsx实现加载状态
   - 使用error.tsx处理错误边界

3. **数据获取**
   - 服务器组件中直接使用async/await获取数据
   - 客户端组件使用SWR或React Query进行数据获取
   - 使用服务器操作（server actions）处理表单提交（如果适用）

### 数据获取与API请求
1. **API请求最佳实践**
   - 使用封装的请求工具统一处理API调用和错误
   - 确保所有请求包含正确的Content-Type和Accept头
   - 请求拦截器中自动添加授权令牌
   - 响应拦截器统一处理401/403等认证错误
   - 对于关键API请求，提供明确的错误处理和详细日志

2. **授权处理**
   - 同时使用localStorage和Cookie存储令牌，确保前端路由和API请求都能获取授权信息
   - 注销时清除所有认证数据
   - 刷新令牌机制处理会话过期
   - 获取用户信息时显式传递授权头，避免因时序问题导致的授权失败

3. **错误处理与容错**
   - 添加多层try-catch确保主流程不受子流程错误影响
   - 为关键操作增加详细的错误日志和回溯信息
   - 使用toast通知提供用户友好的错误提示
   - 对于非关键错误，采取优雅降级策略

### 状态管理
1. **仅在客户端组件中使用Zustand**
   - 状态管理用于用户会话、UI状态等客户端数据
   - 所有使用Zustand的组件必须标记为'use client'

2. **认证状态（已实现）**
```typescript
interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  login: (credentials: LoginRequest) => Promise<void>;  // 已实现，包含token存储和Cookie设置
  register: (data: RegisterRequest) => Promise<void>;
  logout: () => Promise<void>;  // 已实现，包含清除token和Cookie
  refreshToken: () => Promise<void>;
  setUser: (user: User | null) => void;
  clearError: () => void;
}
```

3. **UI状态**
```typescript
interface UIState {
  sidebarOpen: boolean;
  theme: 'light' | 'dark' | 'system';
  toggleSidebar: () => void;
  setSidebarOpen: (open: boolean) => void;
  setTheme: (theme: 'light' | 'dark' | 'system') => void;
}
```

4. **机构状态**
```typescript
interface InstitutionState {
  application: InstitutionApplication | null;
  applicationStatus: ApplicationStatus | null;
  registerCode: string | null;
  isLoading: boolean;
  error: string | null;
  submitApplication: (data: InstitutionApplicationRequest) => Promise<void>;
  checkApplicationStatus: () => Promise<void>;
  getRegisterCode: () => Promise<void>;
  clearError: () => void;
}
```

### 路由与认证
1. **使用Next.js中间件保护路由**
   - 检查认证状态，根据需要重定向
   - 实现基于角色的访问控制

2. **路由组分离公共和受保护内容**
   - (auth)：认证相关页面
   - (dashboard)：需要认证的管理功能
   - (institution)：机构相关页面

3. **角色处理最佳实践**
   - 后端返回用户角色作为对象数组(`roles`)，每个角色包含`id`、`name`、`code`等字段
   - 前端根据角色的`code`字段判断权限，通常需要去除`ROLE_`前缀
   - 使用通用的`hasRole`函数检查用户是否拥有特定角色
   - 在UI中根据用户角色动态过滤可见内容和操作
   - 确保处理角色数组而非单一角色属性

## 验证码机制的详细设计

### 后端验证码流程
1. **验证码生成**:
   - 使用Kaptcha库生成验证码图片
   - 验证码文本存储在Redis中，键名格式为`captcha:{captchaKey}`
   - 设置5分钟的过期时间
   - 验证码Key通过API响应返回

2. **验证码获取流程**:
   - 前端先调用 `/api/auth/captcha/key` 获取验证码key
   - 再使用key调用 `/api/auth/captcha/image/{key}` 获取验证码图片
   - 验证码key和用户输入的验证码一起提交给后端

3. **验证码校验**:
   - 登录/注册请求中需携带`captchaKey`和`captchaCode`
   - 后端从Redis获取对应的验证码文本
   - 比较用户提交的验证码与存储的验证码（忽略大小写）
   - 验证后立即删除验证码，确保一次性使用

### 前端验证码实现
1. **验证码组件设计**:
```tsx
interface CaptchaProps {
  onCaptchaKeyChange: (captchaKey: string) => void;
}

export function Captcha({ onCaptchaKeyChange }: CaptchaProps) {
  // 验证码状态管理与获取逻辑
  // 两步获取：先获取key，再获取图片
  // 图片数据转base64显示
}
```

2. **验证码获取流程**:
   - 组件挂载时自动获取验证码
   - 先调用获取key的接口，获取验证码key
   - 再用key获取验证码图片
   - 将验证码Key传递给父组件
   - 点击验证码图片可刷新获取新验证码

3. **邮箱验证码流程**:
   - 用户填写邮箱地址和图形验证码
   - 验证当前密码以确保身份安全
   - 验证通过后发送邮箱验证码
   - 邮箱验证码倒计时（60秒）防止频繁请求
   - 验证码发送成功后才允许提交更新表单

## 注册流程设计

### 分步注册流程
1. **普通用户注册**
   - **第一步：基本信息**
     - 用户名（长度4-20字符）
     - 密码（长度6-20字符）
     - 确认密码（验证与密码一致）
     - 点击"下一步"进入第二步

   - **第二步：邮箱验证**
     - 邮箱地址输入
     - 图形验证码输入与获取
     - 发送邮箱验证码
     - 邮箱验证码输入
     - 提交完成注册

2. **机构用户注册**
   - **第一步：注册码验证**
     - 输入机构注册码
     - 验证注册码有效性
     - 显示机构基本信息
     - 点击"下一步"进入基本信息填写

   - **第二步：基本信息填写**
     - 用户名输入
     - 密码输入和确认
     - 点击"下一步"进入邮箱验证

   - **第三步：邮箱验证**
     - 邮箱地址输入
     - 图形验证码验证
     - 邮箱验证码验证
     - 完成注册

### 技术实现
1. **表单管理**
   - 使用React Hook Form管理表单状态
   - 使用Zod进行表单验证
   - 分别定义两个表单schema和表单实例

2. **状态管理**
   - 使用组件内state管理跨步骤数据
   - 最终注册时合并所有数据提交

3. **UI组件**
   - 使用Tabs组件实现分步界面
   - 使用表单组件实现数据收集
   - 表单间数据传递和状态保持

### 用户体验
1. **引导式流程**
   - 清晰的步骤指示
   - 禁用未完成前置步骤的Tab
   - 步骤间数据预览
   - 返回功能支持修改前一步内容

2. **验证与反馈**
   - 实时表单验证
   - 即时错误提示
   - 验证码发送状态与倒计时
   - 操作结果toast通知

## 功能模块规划

### 1. 认证模块（已完成）
- [x] 登录页面
  - 表单验证
  - 验证码集成
  - 登录后重定向到仪表盘
  - Token存储（localStorage + Cookie）
- [x] 注册页面
  - 普通用户注册
  - 机构用户注册
- [x] 验证码获取与验证
- [x] JWT令牌管理（存储、刷新、清除）
- [x] 认证状态管理
  - Zustand状态存储
  - 登录状态持久化
  - 注销功能（清除所有认证数据）
- [x] 认证中间件实现
  - 路由保护
  - 未认证重定向

### 2. 公共布局模块
- 根布局组件
- 不同区域特定布局
- 导航栏
- 侧边菜单
- 主题切换

### 3. 用户中心模块
- [x] 用户信息展示
- [x] 用户信息编辑（昵称、手机号）
- [x] 密码修改（旧密码、新密码、确认密码）
- [x] 个人头像上传（含裁剪功能）
- [x] 邮箱更新（含验证码验证）
- [ ] 用户设置

### 4. 机构管理模块
- [x] 机构申请功能
  - 申请表单（机构信息、联系人信息）
  - Logo上传与预览
  - 表单验证
  - 提交处理
- [x] 申请状态查询
  - 状态展示
  - 进度跟踪
  - 结果通知
- [x] 机构用户注册
  - 注册码验证
  - 分步注册流程
  - 邮箱验证
  - 角色分配

### 5. 课程模块
- 课程列表页
- 课程详情页
- 课程搜索与筛选
- 课程分类浏览
- 课程收藏

### 6. 学习模块
- 课程学习页面
- 视频播放器
- 课程进度记录
- 课程笔记
- 课程评价

### 7. 管理模块
- 用户管理
- 角色管理
- 权限管理
- 课程管理
- 内容审核

### 8. 订单与支付模块
- 课程购买
- 订单管理
- 支付流程
- 优惠券管理

## 路由规划 (Next.js格式)

```
/                                # 首页
/login                           # 登录
/register                        # 普通用户注册
/institution/apply               # 机构申请
/institution/status             # 申请状态查询
/institution/register           # 机构用户注册
/courses                         # 课程列表
/courses/[id]                    # 课程详情
/courses/[id]/learn              # 课程学习
/dashboard                       # 仪表盘首页
/dashboard/profile               # 个人信息
/dashboard/settings              # 个人设置
/dashboard/favorites             # 收藏课程
/dashboard/orders                # 订单记录
/dashboard/users                 # 用户管理
/dashboard/roles                 # 角色管理
/dashboard/permissions           # 权限管理
/dashboard/courses               # 课程管理
/dashboard/reviews               # 审核管理
/dashboard/statistics            # 统计数据
```

## API对接规划

### 1. 认证相关API
- **验证码API**
  - `GET /api/auth/captcha/key` - 获取验证码key
  - `GET /api/auth/captcha/image/{key}` - 获取验证码图片
  - 请求参数: 可选`captchaKey`
  - 响应: 验证码图片（二进制）和`Captcha-Key`响应头
  - 集成方式: 使用axios直接请求，处理二进制响应和响应头

- **注册API**
  - `POST /api/auth/register` - 普通用户注册
  - `POST /api/auth/institution/register` - 机构用户注册
  - 请求参数: 用户名、密码、邮箱、验证码Key、验证码
  - 响应: 成功消息
  - 表单验证: 使用Zod进行客户端验证

- **登录API**
  - `POST /api/auth/login` - 用户登录
  - 请求参数: 用户名、密码、验证码Key、验证码
  - 响应: JWT令牌（accessToken、refreshToken）
  - 状态管理: 登录成功后将令牌存储在localStorage和Zustand状态中

- **其他认证API**
  - `POST /api/auth/refresh-token` - 刷新令牌
  - `POST /api/auth/logout` - 用户注销

### 2. 用户相关API
- `/api/users` - 用户列表/创建用户
- `/api/users/:id` - 用户详情/更新/删除
- `/api/users/:id/status` - 修改用户状态
- `/api/users/:id/roles` - 用户角色分配
- `/api/users/batch` - 批量处理用户

### 3. 机构相关API
- `/api/institutions/apply` - 提交机构申请
- `/api/institutions/application-status` - 查询申请状态
- `/api/institutions/register-code` - 获取机构注册码
- `/api/reviewer/institutions/applications` - 获取申请列表
- `/api/reviewer/institutions/applications/:id` - 申请详情
- `/api/reviewer/institutions/applications/:id/approve` - 审核通过
- `/api/reviewer/institutions/applications/:id/reject` - 审核拒绝

### 4. 角色权限相关API
- `/api/roles` - 角色列表/创建角色
- `/api/roles/:id` - 角色详情/更新/删除
- `/api/roles/:id/permissions` - 角色权限分配
- `/api/permissions` - 权限列表/创建权限
- `/api/permissions/:id` - 权限详情/更新/删除

### 5. 课程相关API
- `/api/courses` - 课程列表/创建课程
- `/api/courses/:id` - 课程详情/更新/删除
- `/api/courses/:id/chapters` - 课程章节
- `/api/courses/:id/resources` - 课程资源
- `/api/courses/:id/enrollments` - 课程报名

### 6. 学习相关API
- `/api/learning/progress` - 学习进度
- `/api/learning/notes` - 学习笔记
- `/api/learning/favorites` - 收藏课程

### 7. 订单相关API
- `/api/orders` - 订单列表/创建订单
- `/api/orders/:id` - 订单详情/更新
- `/api/payments` - 支付管理

## 开发计划与时间线

### 第一阶段：基础框架与认证模块（已完成）
- [x] 创建Next.js项目结构
- [x] 安装核心依赖（Zustand、Axios等）
- [x] 设置Tailwind CSS和shadcn UI
- [x] 实现基础布局组件
- [x] 创建认证页面（登录/注册）
  - 完成登录功能
  - 完成注销功能
  - 实现重定向逻辑
- [x] 实现JWT令牌管理
  - localStorage存储
  - Cookie存储
  - 注销时清理
- [x] 设置路由中间件保护
- [x] 实现认证状态管理
- [x] 完成验证码组件和集成

### 第二阶段：机构管理模块（已完成）
- [x] 实现机构申请功能
  - 申请表单开发
  - Logo上传功能
  - 表单验证
  - 提交处理
- [x] 实现申请状态查询
  - 状态展示组件
  - 进度跟踪
  - 结果通知
- [x] 实现机构用户注册
  - 注册码验证
  - 分步注册流程
  - 邮箱验证
  - 角色分配

### 第三阶段：用户与管理模块（进行中）
- [ ] 实现用户服务接口
- [ ] 完成用户管理页面
- [ ] 实现角色与权限管理
- [ ] 完成用户个人资料页面
- [ ] 实现用户设置功能

### 第四阶段：课程模块
- [ ] 实现课程列表页面
- [ ] 实现课程详情页面
- [ ] 添加课程搜索与筛选功能
- [ ] 实现课程管理功能

### 第五阶段：学习与订单功能
- [ ] 实现学习进度跟踪
- [ ] 实现课程笔记功能
- [ ] 实现课程评价功能
- [ ] 实现课程购买流程
- [ ] 实现订单管理功能

### 第六阶段：优化与测试
- [ ] 性能优化
- [ ] 兼容性测试
- [ ] 用户体验优化
- [ ] 文档编写
- [ ] 部署准备

## 组件设计

### 通用UI组件
- Button
- Input
- Select
- Checkbox
- RadioGroup
- Switch
- Dialog
- Dropdown
- Tabs
- Card
- Avatar
- Badge
- Toast
- Tooltip
- Captcha (验证码组件)
- FileUpload (文件上传组件)

### 布局组件
- RootLayout
- DashboardLayout
- AuthLayout
- InstitutionLayout

### 业务组件
- 用户相关：UserTable, UserForm, UserProfile
- 角色相关：RoleTable, RoleForm, PermissionSelect
- 机构相关：InstitutionApplicationForm, ApplicationStatus, RegisterCodeVerification
- 课程相关：CourseCard, CourseList, CourseDetails
- 学习相关：VideoPlayer, ProgressBar, NoteEditor

## 开发规范

### 代码规范
- 使用ESLint确保代码质量
- 组件文件名使用Pascal Case (ButtonComponent.tsx)
- 工具函数文件名使用kebab-case (date-utils.ts)
- 每个组件一个文件，相关组件可放在同一目录下

### Next.js特定规范
- 页面组件放在app/路径下的page.tsx文件中
- 布局组件放在对应目录的layout.tsx文件中
- 路由组使用括号命名(groupName)
- 动态路由使用方括号[param]
- 客户端组件顶部添加'use client'指令

### Git工作流
- 使用feature分支开发新功能
- 使用pull request进行代码审查
- 提交信息使用语义化前缀(feat:, fix:, docs:, etc.)

## 需要注意的问题

1. **服务器组件与客户端组件区分**
   - 谨慎使用'use client'，仅在需要时添加
   - 注意数据获取模式的差异

2. **状态管理**
   - Zustand仅用于客户端状态
   - 服务器状态使用React Query或SWR管理

3. **性能优化**
   - 利用Next.js的图像优化
   - 合理使用动态导入和懒加载
   - 避免不必要的客户端渲染

4. **安全考虑**
   - 敏感操作在服务器组件或服务器操作中处理
   - 使用Next.js中间件进行认证和授权
   - 注意API路由的安全性

5. **文件上传处理**
   - 验证文件类型和大小
   - 使用预览功能
   - 处理上传错误和进度
   - 支持图片裁剪功能

6. **验证码处理**
   - 正确处理验证码Key，优先使用响应头中的值
   - 加强错误处理，提供用户友好的错误提示
   - 优化验证码刷新逻辑，避免多次不必要请求

7. **角色和权限处理**
   - 正确处理用户角色数组
   - 基于角色控制UI显示
   - 实现细粒度的权限控制
</file>

<file path="front/.cursorrules">
<cursor-tools Integration>
# Instructions
Use the following commands to get AI assistance:

**Web Search:**
`cursor-tools web "<your question>"` - Get answers from the web using Perplexity AI (e.g., `cursor-tools web "latest weather in London"`)
when using web for complex queries suggest writing the output to a file somewhere like local-research/<query summary>.md.

**Repository Context:**
`cursor-tools repo "<your question>"` - Get context-aware answers about this repository using Google Gemini (e.g., `cursor-tools repo "explain authentication flow"`)

**Documentation Generation:**
`cursor-tools doc [options]` - Generate comprehensive documentation for this repository (e.g., `cursor-tools doc --output docs.md`)
when using doc for remote repos suggest writing the output to a file somewhere like local-docs/<repo-name>.md.

**GitHub Information:**
`cursor-tools github pr [number]` - Get the last 10 PRs, or a specific PR by number (e.g., `cursor-tools github pr 123`)
`cursor-tools github issue [number]` - Get the last 10 issues, or a specific issue by number (e.g., `cursor-tools github issue 456`)

**Browser Automation (Stateless):**
`cursor-tools browser open <url> [options]` - Open a URL and capture page content, console logs, and network activity (e.g., `cursor-tools browser open "https://example.com" --html`)
`cursor-tools browser act "<instruction>" --url=<url> [options]` - Execute actions on a webpage using natural language instructions (e.g., `cursor-tools browser act "Click Login" --url=https://example.com`)
`cursor-tools browser observe "<instruction>" --url=<url> [options]` - Observe interactive elements on a webpage and suggest possible actions (e.g., `cursor-tools browser observe "interactive elements" --url=https://example.com`)
`cursor-tools browser extract "<instruction>" --url=<url> [options]` - Extract data from a webpage based on natural language instructions (e.g., `cursor-tools browser extract "product names" --url=https://example.com/products`)

**Notes on Browser Commands:**
- All browser commands are stateless: each command starts with a fresh browser instance and closes it when done.
- When using `--connect-to`, special URL values are supported:
  - `current`: Use the existing page without reloading
  - `reload-current`: Use the existing page and refresh it (useful in development)
- Multi step workflows involving state or combining multiple actions are supported in the `act` command using the pipe (|) separator (e.g., `cursor-tools browser act "Click Login | Type 'user@example.com' into email | Click Submit" --url=https://example.com`)
- Video recording is available for all browser commands using the `--video=<directory>` option. This will save a video of the entire browser interaction at 1280x720 resolution. The video file will be saved in the specified directory with a timestamp.
- DO NOT ask browser act to "wait" for anything, the wait command is currently disabled in Stagehand.

**Tool Recommendations:**
- `cursor-tools web` is best for general web information not specific to the repository.
- `cursor-tools repo` is ideal for repository-specific questions, planning, code review and debugging.
- `cursor-tools doc` generates documentation for local or remote repositories.
- `cursor-tools browser` is useful for testing and debugging web apps.

**Running Commands:**
1. **Installed version:** Use `cursor-tools <command>` (if in PATH) or `npm exec cursor-tools "<command>"`, `yarn cursor-tools "<command>"`, `pnpm cursor-tools "<command>"`.
2. **Without installation:** Use `npx -y cursor-tools@latest "<command>"` or `bunx -y cursor-tools@latest "<command>"`.

**General Command Options (Supported by all commands):**
--model=<model name>: Specify an alternative AI model to use
--max-tokens=<number>: Control response length
--save-to=<file path>: Save command output to a file (in *addition* to displaying it)
--help: View all available options (help is not fully implemented yet)

**Documentation Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Generate documentation for a remote GitHub repository

**GitHub Command Options:**
--from-github=<GitHub username>/<repository name>[@<branch>]: Access PRs/issues from a specific GitHub repository

**Browser Command Options (for 'open', 'act', 'observe', 'extract'):**
--console: Capture browser console logs (enabled by default, use --no-console to disable)
--html: Capture page HTML content
--network: Capture network activity (enabled by default, use --no-network to disable)
--screenshot=<file path>: Save a screenshot of the page
--timeout=<milliseconds>: Set navigation timeout (default: 30000ms)
--viewport=<width>x<height>: Set viewport size (e.g., 1280x720). When using --connect-to, viewport is only changed if this option is explicitly provided
--headless: Run browser in headless mode (default: true)
--no-headless: Show browser UI (non-headless mode) for debugging
--connect-to=<port>: Connect to existing Chrome instance
--wait=<duration or selector>: Wait after page load (e.g., '5s', '#element-id', 'selector:.my-class')
--video=<directory>: Save a video recording of the browser interaction to the specified directory (1280x720 resolution). Not available when using --connect-to

**Additional Notes:**
- For detailed information, see `node_modules/cursor-tools/README.md` (if installed locally).
- Configuration is in `cursor-tools.config.json` (or `~/.cursor-tools/config.json`).
- API keys are loaded from `.cursor-tools.env` (or `~/.cursor-tools/.env`).
- Browser commands require separate installation of Playwright: `npm install --save-dev playwright` or `npm install -g playwright`.
- **Remember:** You're part of a team of superhuman expert AIs. Work together to solve complex problems.
<!-- cursor-tools-version: 0.5.0 -->
</cursor-tools Integration>
</file>

<file path="front/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="front/components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "gray",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="front/eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="front/next.config.ts">
import type { NextConfig } from "next";
/** @type {import('next').NextConfig} */
const nextConfig: NextConfig = {
  reactStrictMode: true,
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: 'http://localhost:8080/api/:path*',
      }
    ];
  }
};
export default nextConfig;
</file>

<file path="front/package.json">
{
  "name": "front",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-tooltip": "^1.1.8",
    "axios": "^1.8.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "framer-motion": "^12.4.10",
    "lucide-react": "^0.479.0",
    "next": "15.2.1",
    "next-themes": "^0.4.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.54.2",
    "react-image-crop": "^11.0.7",
    "sonner": "^2.0.1",
    "tailwind-merge": "^3.0.2",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@shadcn/ui": "^0.0.4",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.1",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="front/postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="front/public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="front/public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="front/public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="front/public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="front/public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="front/README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="front/src/app/(auth)/layout.tsx">
import { Metadata } from 'next';
import Link from 'next/link';
import Image from 'next/image';
export const metadata: Metadata = {
  title: '认证 - 在线课程平台',
  description: '登录或注册在线课程平台账户',
};
export default function AuthLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <div className="min-h-screen flex flex-col md:flex-row">
      {/* 左侧品牌区域 */}
      <div className="w-full md:w-1/2 bg-primary p-8 flex flex-col justify-between text-white">
        <div>
          <div className="mb-4">
            <Link href="/" className="text-xl font-bold flex items-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="mr-2"
              >
                <path d="M22 2 11 13"></path>
                <path d="m22 2-7 20-4-9-9-4 20-7z"></path>
              </svg>
              在线课程平台
            </Link>
          </div>
          <h1 className="text-3xl md:text-4xl font-bold mb-4">欢迎来到在线教育新时代</h1>
          <p className="text-lg mb-6">
            我们提供高质量的在线课程，帮助您在任何时间、任何地点拓展知识和技能。
          </p>
        </div>
        <div className="hidden md:block">
          <p className="text-sm">© {new Date().getFullYear()} 在线课程平台. 保留所有权利.</p>
        </div>
      </div>
      {/* 右侧表单区域 */}
      <div className="w-full md:w-1/2 p-8 flex items-center justify-center">
        <div className="w-full max-w-md">
          {children}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/(auth)/login/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import Link from 'next/link';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { toast } from 'sonner';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { useAuthStore } from '@/stores/auth-store';
import authService from '@/services/auth';
import { Captcha } from '@/components/ui/captcha';
// 登录表单模式验证
const loginSchema = z.object({
  username: z.string().min(2, '用户名至少需要2个字符'),
  password: z.string().min(6, '密码至少需要6个字符'),
  captchaCode: z.string().min(4, '验证码格式不正确'),
});
// 类型推断
type LoginFormValues = z.infer<typeof loginSchema>;
export default function LoginPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const redirectTo = searchParams.get('redirectTo') || '/dashboard';
  const [captchaKey, setCaptchaKey] = useState('');
  const { login, isLoading, error, clearError } = useAuthStore();
  // 初始化表单
  const form = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      username: '',
      password: '',
      captchaCode: '',
    },
  });
  // 处理验证码Key变化
  const handleCaptchaKeyChange = (newCaptchaKey: string) => {
    console.log('登录页面：验证码Key已更新', newCaptchaKey);
    setCaptchaKey(newCaptchaKey);
  };
  // 提交表单
  const onSubmit = async (data: LoginFormValues) => {
    clearError();
    // 确保验证码Key存在
    if (!captchaKey) {
      console.error('验证码Key不存在，重新获取验证码');
      toast.error('验证码已失效，请点击验证码图片刷新');
      return;
    }
    console.log('表单提交，验证码信息：', {
      captchaCode: data.captchaCode,
      captchaKey: captchaKey,
    });
    try {
      // 将captchaKey添加到请求中
      await login({
        ...data,
        captchaKey,
      });
      toast.success('登录成功');
      router.push(redirectTo);
    } catch (error: any) {
      console.error('登录失败详情：', error);
      // 提取详细的错误信息
      const errorMessage = error.message || '未知错误';
      const errorCode = error.code || '未知错误码';
      console.error(`登录错误：${errorCode} - ${errorMessage}`);
      // 针对不同类型的错误提供特定提示
      if (errorMessage.includes('验证码')) {
        toast.error('验证码错误，请重新输入');
        // 自动刷新验证码
        const captchaElement = document.querySelector('.captcha-component') as HTMLElement;
        if (captchaElement) {
          captchaElement.click();
        }
      } else if (errorMessage.includes('会话') || errorMessage.includes('过期')) {
        toast.error('登录信息已过期，请重新尝试');
        // 清理可能存在的旧令牌
        localStorage.removeItem('token');
        localStorage.removeItem('refreshToken');
      } else if (errorMessage.includes('用户名') || errorMessage.includes('密码')) {
        toast.error('用户名或密码错误');
      } else {
        toast.error(`登录失败: ${errorMessage}`);
      }
    }
  };
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="text-2xl">登录</CardTitle>
        <CardDescription>
          输入您的用户名和密码登录账户
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            {error && (
              <div className="bg-destructive/10 text-destructive text-sm p-3 rounded-md">
                {error}
              </div>
            )}
            <FormField
              control={form.control}
              name="username"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>用户名</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入用户名" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>密码</FormLabel>
                  <FormControl>
                    <Input type="password" placeholder="请输入密码" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="captchaCode"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>验证码</FormLabel>
                  <div className="flex space-x-2">
                    <FormControl>
                      <Input placeholder="请输入验证码" {...field} />
                    </FormControl>
                    <Captcha onCaptchaKeyChange={handleCaptchaKeyChange} />
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit" className="w-full" disabled={isLoading}>
              {isLoading ? '登录中...' : '登录'}
            </Button>
          </form>
        </Form>
      </CardContent>
      <CardFooter className="flex justify-center">
        <p className="text-sm">
          还没有账号？{' '}
          <Link href="/register" className="text-primary hover:underline">
            注册新账户
          </Link>
        </p>
      </CardFooter>
    </Card>
  );
}
</file>

<file path="front/src/app/(auth)/register/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { toast } from 'sonner';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useAuthStore } from '@/stores/auth-store';
import authService from '@/services/auth';
import { Captcha } from '@/components/ui/captcha';
// 第一步表单：基本信息
const basicInfoSchema = z.object({
  username: z.string().min(4, '用户名至少需要4个字符').max(20, '用户名最多20个字符'),
  password: z.string().min(6, '密码至少需要6个字符').max(20, '密码最多20个字符'),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: '两次输入的密码不一致',
  path: ['confirmPassword'],
});
// 第二步表单：邮箱验证
const emailVerifySchema = z.object({
  email: z.string().email('请输入有效的邮箱地址'),
  captchaCode: z.string().min(4, '验证码格式不正确'),
  emailCode: z.string().length(6, '邮箱验证码必须是6位数字'),
});
// 类型推断
type BasicInfoFormValues = z.infer<typeof basicInfoSchema>;
type EmailVerifyFormValues = z.infer<typeof emailVerifySchema>;
export default function RegisterPage() {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState<string>("basic-info");
  const [captchaKey, setCaptchaKey] = useState<string>('');
  const [username, setUsername] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [codeSent, setCodeSent] = useState<boolean>(false);
  const [countdown, setCountdown] = useState<number>(0);
  const { register: registerUser, sendEmailVerificationCode, isLoading, error, clearError } = useAuthStore();
  // 第一步表单
  const basicInfoForm = useForm<BasicInfoFormValues>({
    resolver: zodResolver(basicInfoSchema),
    defaultValues: {
      username: '',
      password: '',
      confirmPassword: '',
    },
  });
  // 第二步表单
  const emailVerifyForm = useForm<EmailVerifyFormValues>({
    resolver: zodResolver(emailVerifySchema),
    defaultValues: {
      email: '',
      captchaCode: '',
      emailCode: '',
    },
  });
  // 处理验证码Key变化
  const handleCaptchaKeyChange = (newCaptchaKey: string) => {
    console.log('注册页面：验证码Key已更新', newCaptchaKey);
    setCaptchaKey(newCaptchaKey);
  };
  // 处理基本信息提交
  const onBasicInfoSubmit = (data: BasicInfoFormValues) => {
    clearError();
    // 保存用户名和密码
    setUsername(data.username);
    setPassword(data.password);
    // 切换到第二步
    setActiveTab("email-verify");
  };
  // 发送邮箱验证码
  const onSendEmailCode = async () => {
    clearError();
    const email = emailVerifyForm.getValues('email');
    const captchaCode = emailVerifyForm.getValues('captchaCode');
    // 验证邮箱和验证码
    const emailResult = z.string().email('请输入有效的邮箱地址').safeParse(email);
    const captchaResult = z.string().min(4, '验证码格式不正确').safeParse(captchaCode);
    if (!emailResult.success) {
      emailVerifyForm.setError('email', { message: emailResult.error.errors[0].message });
      return;
    }
    if (!captchaResult.success) {
      emailVerifyForm.setError('captchaCode', { message: captchaResult.error.errors[0].message });
      return;
    }
    // 确保验证码Key存在
    if (!captchaKey) {
      console.error('验证码Key不存在，重新获取验证码');
      toast.error('验证码已失效，请点击验证码图片刷新');
      return;
    }
    try {
      await sendEmailVerificationCode({
        email,
        captchaCode,
        captchaKey,
      });
      toast.success('验证码已发送到您的邮箱，请查收');
      setCodeSent(true);
      setCountdown(60); // 设置60秒倒计时
    } catch (error: any) {
      console.error('发送邮箱验证码失败：', error);
      // 针对验证码错误提供特定提示
      if (error.message?.includes('验证码')) {
        toast.error('验证码错误，请重新输入');
      } else {
        toast.error(error.message || '发送验证码失败，请重试');
      }
    }
  };
  // 注册提交
  const onRegisterSubmit = async (data: EmailVerifyFormValues) => {
    clearError();
    if (!username || !password) {
      toast.error('请先填写基本信息');
      setActiveTab("basic-info");
      return;
    }
    try {
      // 将所有信息合并到注册请求中
      await registerUser({
        username,
        password,
        confirmPassword: password,
        email: data.email,
        captchaKey,
        captchaCode: data.captchaCode,
        emailCode: data.emailCode,
      });
      toast.success('注册成功，请登录');
      router.push('/login');
    } catch (error: any) {
      console.error('注册失败：', error);
      toast.error(error.message || '注册失败，请重试');
    }
  };
  // 倒计时效果
  useEffect(() => {
    if (countdown > 0) {
      const timer = setInterval(() => {
        setCountdown(prev => prev - 1);
      }, 1000);
      return () => clearInterval(timer);
    } else if (countdown === 0 && codeSent) {
      setCodeSent(false);
    }
  }, [countdown, codeSent]);
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="text-2xl">注册账号</CardTitle>
        <CardDescription>
          创建您的账户以开始使用在线课程平台
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-2 mb-6">
            <TabsTrigger value="basic-info">基本信息</TabsTrigger>
            <TabsTrigger value="email-verify" disabled={!username || !password}>邮箱验证</TabsTrigger>
          </TabsList>
          <TabsContent value="basic-info">
            <Form {...basicInfoForm}>
              <form onSubmit={basicInfoForm.handleSubmit(onBasicInfoSubmit)} className="space-y-4">
                {error && (
                  <div className="bg-destructive/10 text-destructive text-sm p-3 rounded-md">
                    {error}
                  </div>
                )}
                <FormField
                  control={basicInfoForm.control}
                  name="username"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>用户名</FormLabel>
                      <FormControl>
                        <Input placeholder="请输入用户名" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={basicInfoForm.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>密码</FormLabel>
                      <FormControl>
                        <Input type="password" placeholder="请输入密码" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={basicInfoForm.control}
                  name="confirmPassword"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>确认密码</FormLabel>
                      <FormControl>
                        <Input type="password" placeholder="请再次输入密码" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button type="submit" className="w-full">
                  下一步
                </Button>
              </form>
            </Form>
          </TabsContent>
          <TabsContent value="email-verify">
            <Form {...emailVerifyForm}>
              <form onSubmit={emailVerifyForm.handleSubmit(onRegisterSubmit)} className="space-y-4">
                {error && (
                  <div className="bg-destructive/10 text-destructive text-sm p-3 rounded-md">
                    {error}
                  </div>
                )}
                {username && password && (
                  <div className="bg-muted/50 p-3 rounded-md mb-4">
                    <p className="text-sm text-muted-foreground">用户名: <span className="font-medium">{username}</span></p>
                  </div>
                )}
                <FormField
                  control={emailVerifyForm.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>电子邮件</FormLabel>
                      <FormControl>
                        <Input type="email" placeholder="请输入邮箱地址" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <FormField
                  control={emailVerifyForm.control}
                  name="captchaCode"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>验证码</FormLabel>
                      <div className="flex space-x-2">
                        <FormControl>
                          <Input placeholder="请输入验证码" {...field} />
                        </FormControl>
                        <Captcha onCaptchaKeyChange={handleCaptchaKeyChange} />
                      </div>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button 
                  type="button" 
                  variant="outline" 
                  className="w-full" 
                  onClick={onSendEmailCode}
                  disabled={isLoading || codeSent}
                >
                  {isLoading ? '发送中...' : codeSent ? `重新发送(${countdown}s)` : '发送验证码'}
                </Button>
                <FormField
                  control={emailVerifyForm.control}
                  name="emailCode"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>邮箱验证码</FormLabel>
                      <FormControl>
                        <Input placeholder="请输入邮箱验证码" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <Button type="submit" className="w-full" disabled={isLoading || !codeSent}>
                  {isLoading ? '注册中...' : '完成注册'}
                </Button>
                <Button 
                  type="button" 
                  variant="ghost" 
                  className="w-full" 
                  onClick={() => setActiveTab("basic-info")}
                >
                  返回上一步
                </Button>
              </form>
            </Form>
          </TabsContent>
        </Tabs>
      </CardContent>
      <CardFooter className="flex flex-col items-center justify-center space-y-4">
        <div className="text-sm text-muted-foreground">
          已有账号？ <Link href="/login" className="text-primary hover:underline">立即登录</Link>
        </div>
        <div className="w-full border-t pt-4">
          <div className="text-sm text-center">
            如需创建机构账号或申请机构入驻，请前往 
            <Link href="/institution" className="text-primary hover:underline">机构中心</Link>
          </div>
        </div>
      </CardFooter>
    </Card>
  );
}
</file>

<file path="front/src/app/dashboard/institutions/[id]/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { ArrowLeft, Building2, Check, X } from 'lucide-react';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import reviewerInstitutionService from '@/services/reviewerInstitution';
import { InstitutionApplicationResponse, InstitutionResponse } from '@/types/institution';
interface PageParams {
  params: {
    id: string;
  };
}
export default function InstitutionDetailPage({ params }: PageParams) {
  const router = useRouter();
  const id = parseInt(params.id);
  const [application, setApplication] = useState<InstitutionApplicationResponse | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isApproving, setIsApproving] = useState(false);
  const [isRejecting, setIsRejecting] = useState(false);
  const [showRejectDialog, setShowRejectDialog] = useState(false);
  const [rejectReason, setRejectReason] = useState('');
  // 定义状态映射
  const statusMap = {
    0: { label: '待审核', color: 'bg-yellow-100 text-yellow-800 border-yellow-200' },
    1: { label: '已通过', color: 'bg-green-100 text-green-800 border-green-200' },
    2: { label: '已拒绝', color: 'bg-red-100 text-red-800 border-red-200' },
  };
  // 获取申请详情
  useEffect(() => {
    if (isNaN(id)) {
      toast.error('无效的申请ID');
      router.push('/dashboard/institutions');
      return;
    }
    const fetchApplicationDetail = async () => {
      setIsLoading(true);
      try {
        const data = await reviewerInstitutionService.getApplicationDetail(id);
        setApplication(data);
      } catch (error) {
        console.error('获取申请详情失败', error);
        toast.error('获取申请详情失败，请重试');
      } finally {
        setIsLoading(false);
      }
    };
    fetchApplicationDetail();
  }, [id, router]);
  // 通过申请
  const handleApprove = async () => {
    if (!application) return;
    setIsApproving(true);
    try {
      const institution = await reviewerInstitutionService.approveApplication(id);
      toast.success('审核通过成功');
      // 更新状态
      setApplication({
        ...application,
        status: 1,
        institutionId: institution.id,
        reviewedAt: new Date().toISOString(),
      });
    } catch (error) {
      console.error('审核通过失败', error);
      toast.error('审核操作失败，请重试');
    } finally {
      setIsApproving(false);
    }
  };
  // 拒绝申请
  const handleReject = async () => {
    if (!application || !rejectReason.trim()) return;
    setIsRejecting(true);
    try {
      await reviewerInstitutionService.rejectApplication(id, rejectReason);
      toast.success('审核拒绝成功');
      // 更新状态
      setApplication({
        ...application,
        status: 2,
        reviewComment: rejectReason,
        reviewedAt: new Date().toISOString(),
      });
      // 关闭弹窗
      setShowRejectDialog(false);
    } catch (error) {
      console.error('审核拒绝失败', error);
      toast.error('审核操作失败，请重试');
    } finally {
      setIsRejecting(false);
    }
  };
  // 状态显示
  const getStatusDisplay = (status: number) => {
    const statusInfo = statusMap[status as keyof typeof statusMap];
    return (
      <Badge className={`${statusInfo.color} border`}>
        {statusInfo.label}
      </Badge>
    );
  };
  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-2">
          <Button variant="outline" size="icon" disabled>
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <Skeleton className="h-8 w-60" />
        </div>
        <Card>
          <CardHeader>
            <Skeleton className="h-6 w-40" />
            <Skeleton className="h-4 w-60" />
          </CardHeader>
          <CardContent className="space-y-6">
            {Array.from({ length: 6 }).map((_, index) => (
              <div key={index} className="space-y-2">
                <Skeleton className="h-4 w-24" />
                <Skeleton className="h-6 w-full" />
              </div>
            ))}
          </CardContent>
        </Card>
      </div>
    );
  }
  if (!application) {
    return (
      <div className="space-y-6">
        <div className="flex items-center gap-2">
          <Button variant="outline" size="icon" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h2 className="text-3xl font-bold tracking-tight">申请详情</h2>
        </div>
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-16">
            <Building2 className="h-16 w-16 mb-4 text-muted-foreground" />
            <h3 className="text-xl font-semibold mb-2">未找到申请记录</h3>
            <p className="text-muted-foreground mb-4">
              无法获取ID为 {id} 的申请详情
            </p>
            <Button onClick={() => router.push('/dashboard/institutions')}>
              返回申请列表
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }
  return (
    <div className="space-y-6">
      <div className="flex items-center gap-2">
        <Button
          variant="outline"
          size="icon"
          onClick={() => router.push('/dashboard/institutions')}
        >
          <ArrowLeft className="h-4 w-4" />
        </Button>
        <h2 className="text-3xl font-bold tracking-tight">申请详情</h2>
      </div>
      <Card>
        <CardHeader className="flex flex-col md:flex-row justify-between md:items-center space-y-2 md:space-y-0">
          <div>
            <CardTitle className="text-2xl">{application.name}</CardTitle>
            <CardDescription>
              申请ID：{application.applicationId}
            </CardDescription>
          </div>
          {getStatusDisplay(application.status)}
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-1">
              <h3 className="text-sm font-medium text-muted-foreground">联系人</h3>
              <p>{application.contactPerson}</p>
            </div>
            <div className="space-y-1">
              <h3 className="text-sm font-medium text-muted-foreground">联系电话</h3>
              <p>{application.contactPhone || '未提供'}</p>
            </div>
            <div className="space-y-1">
              <h3 className="text-sm font-medium text-muted-foreground">联系邮箱</h3>
              <p>{application.contactEmail}</p>
            </div>
            <div className="space-y-1">
              <h3 className="text-sm font-medium text-muted-foreground">地址</h3>
              <p>{application.address || '未提供'}</p>
            </div>
            <div className="space-y-1">
              <h3 className="text-sm font-medium text-muted-foreground">申请时间</h3>
              <p>{new Date(application.createdAt).toLocaleString()}</p>
            </div>
            {application.reviewedAt && (
              <div className="space-y-1">
                <h3 className="text-sm font-medium text-muted-foreground">审核时间</h3>
                <p>{new Date(application.reviewedAt).toLocaleString()}</p>
              </div>
            )}
          </div>
          {application.logo && (
            <div className="space-y-2">
              <h3 className="text-sm font-medium text-muted-foreground">机构LOGO</h3>
              <div className="h-40 w-40 rounded-md border overflow-hidden flex items-center justify-center">
                <img
                  src={application.logo}
                  alt={`${application.name} 的LOGO`}
                  className="max-h-full max-w-full object-contain"
                  onError={(e) => {
                    const target = e.target as HTMLImageElement;
                    target.src = 'https://via.placeholder.com/150?text=无图片';
                  }}
                />
              </div>
            </div>
          )}
          <div className="space-y-2">
            <h3 className="text-sm font-medium text-muted-foreground">机构描述</h3>
            <div className="rounded-md border p-4 bg-muted/30">
              <p className="whitespace-pre-wrap">
                {application.description || '未提供描述'}
              </p>
            </div>
          </div>
          {application.status === 2 && application.reviewComment && (
            <div className="space-y-2">
              <h3 className="text-sm font-medium text-muted-foreground">拒绝原因</h3>
              <div className="rounded-md border border-red-200 p-4 bg-red-50 text-red-800">
                <p className="whitespace-pre-wrap">{application.reviewComment}</p>
              </div>
            </div>
          )}
        </CardContent>
        <Separator />
        <CardFooter className="flex justify-between p-6">
          <Button
            variant="outline"
            onClick={() => router.push('/dashboard/institutions')}
          >
            返回列表
          </Button>
          {application.status === 0 && (
            <div className="flex gap-2">
              <Button
                variant="destructive"
                onClick={() => setShowRejectDialog(true)}
                disabled={isApproving || isRejecting}
              >
                <X className="mr-2 h-4 w-4" />
                拒绝申请
              </Button>
              <Button
                variant="default"
                onClick={handleApprove}
                disabled={isApproving || isRejecting}
              >
                {isApproving ? (
                  <span className="flex items-center">
                    <span className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent" />
                    处理中...
                  </span>
                ) : (
                  <>
                    <Check className="mr-2 h-4 w-4" />
                    通过申请
                  </>
                )}
              </Button>
            </div>
          )}
        </CardFooter>
      </Card>
      {/* 拒绝理由弹窗 */}
      <Dialog open={showRejectDialog} onOpenChange={setShowRejectDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>拒绝申请</DialogTitle>
            <DialogDescription>
              请输入拒绝原因，该信息将发送给申请人
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="rejectReason">拒绝原因</Label>
              <Textarea
                id="rejectReason"
                placeholder="请输入拒绝原因..."
                rows={5}
                value={rejectReason}
                onChange={(e) => setRejectReason(e.target.value)}
              />
            </div>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setShowRejectDialog(false)}
              disabled={isRejecting}
            >
              取消
            </Button>
            <Button
              variant="destructive"
              onClick={handleReject}
              disabled={isRejecting || !rejectReason.trim()}
            >
              {isRejecting ? (
                <span className="flex items-center">
                  <span className="mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent" />
                  处理中...
                </span>
              ) : (
                '确认拒绝'
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/institutions/page.tsx">
'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { Building2, Eye, Check, X } from 'lucide-react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';
import { Input } from '@/components/ui/input';
import { Skeleton } from '@/components/ui/skeleton';
import reviewerInstitutionService from '@/services/reviewerInstitution';
import { InstitutionApplicationResponse } from '@/types/institution';
export default function InstitutionsPage() {
  const router = useRouter();
  const [applications, setApplications] = useState<InstitutionApplicationResponse[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(0);
  const [totalPages, setTotalPages] = useState(1);
  const [totalItems, setTotalItems] = useState(0);
  const [status, setStatus] = useState<string>('0'); // 默认显示待审核
  const [searchTerm, setSearchTerm] = useState('');
  // 定义状态映射
  const statusMap = {
    '0': { label: '待审核', color: 'bg-yellow-100 text-yellow-800 border-yellow-200' },
    '1': { label: '已通过', color: 'bg-green-100 text-green-800 border-green-200' },
    '2': { label: '已拒绝', color: 'bg-red-100 text-red-800 border-red-200' },
  };
  // 加载数据
  useEffect(() => {
    fetchApplications();
  }, [currentPage, status, searchTerm]);
  // 获取机构申请列表
  const fetchApplications = async () => {
    setIsLoading(true);
    try {
      const params = {
        page: currentPage,
        size: 10,
        status: status === 'all' ? undefined : parseInt(status),
        ...(searchTerm && { name: searchTerm }),
      };
      const result = await reviewerInstitutionService.getApplications(params);
      setApplications(result.content);
      setTotalPages(result.totalPages);
      setTotalItems(result.totalElements);
    } catch (error) {
      console.error('获取机构申请列表失败', error);
      toast.error('获取机构申请列表失败，请重试');
    } finally {
      setIsLoading(false);
    }
  };
  // 查看申请详情
  const handleViewDetail = (id: number) => {
    router.push(`/dashboard/institutions/${id}`);
  };
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">机构审核</h2>
          <p className="text-muted-foreground">
            审核机构申请，确保平台机构的合规性和质量
          </p>
        </div>
      </div>
      <div className="flex items-center justify-between gap-4">
        <div className="flex flex-1 items-center gap-2">
          <Input
            placeholder="搜索机构名称..."
            className="max-w-xs"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <Button
            variant="outline"
            onClick={() => {
              setSearchTerm('');
              setCurrentPage(0);
            }}
          >
            重置
          </Button>
        </div>
        <Select
          value={status}
          onValueChange={(value) => {
            setStatus(value);
            setCurrentPage(0);
          }}
        >
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="选择状态" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="0">待审核</SelectItem>
            <SelectItem value="1">已通过</SelectItem>
            <SelectItem value="2">已拒绝</SelectItem>
            <SelectItem value="all">全部状态</SelectItem>
          </SelectContent>
        </Select>
      </div>
      <Card>
        <CardHeader>
          <CardTitle>机构申请列表</CardTitle>
          <CardDescription>
            {totalItems > 0
              ? `共 ${totalItems} 条申请记录，第 ${currentPage + 1}/${totalPages} 页`
              : '暂无申请记录'}
          </CardDescription>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            // 加载骨架屏
            <div className="space-y-4">
              {Array.from({ length: 5 }).map((_, index) => (
                <div key={index} className="flex items-center gap-4">
                  <Skeleton className="h-12 w-12 rounded-full" />
                  <div className="space-y-2 flex-1">
                    <Skeleton className="h-4 w-1/3" />
                    <Skeleton className="h-4 w-1/2" />
                  </div>
                  <Skeleton className="h-8 w-24" />
                </div>
              ))}
            </div>
          ) : (
            <>
              {applications.length === 0 ? (
                <div className="flex flex-col items-center justify-center h-60 text-muted-foreground">
                  <Building2 className="h-16 w-16 mb-4 opacity-20" />
                  <p className="text-lg font-medium">暂无申请记录</p>
                  <p className="text-sm">当前筛选条件下没有找到机构申请</p>
                </div>
              ) : (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>申请ID</TableHead>
                      <TableHead>机构名称</TableHead>
                      <TableHead>联系人</TableHead>
                      <TableHead>联系方式</TableHead>
                      <TableHead>申请时间</TableHead>
                      <TableHead>状态</TableHead>
                      <TableHead className="text-right">操作</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {applications.map((application) => (
                      <TableRow key={application.id}>
                        <TableCell className="font-medium">
                          {application.applicationId}
                        </TableCell>
                        <TableCell>{application.name}</TableCell>
                        <TableCell>{application.contactPerson}</TableCell>
                        <TableCell>
                          {application.contactPhone || application.contactEmail}
                        </TableCell>
                        <TableCell>
                          {new Date(application.createdAt).toLocaleString()}
                        </TableCell>
                        <TableCell>
                          <Badge
                            className={
                              statusMap[
                                application.status.toString() as keyof typeof statusMap
                              ].color + ' border'
                            }
                          >
                            {
                              statusMap[
                                application.status.toString() as keyof typeof statusMap
                              ].label
                            }
                          </Badge>
                        </TableCell>
                        <TableCell className="text-right">
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleViewDetail(application.id)}
                            title="查看详情"
                          >
                            <Eye className="h-4 w-4" />
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              )}
              {/* 分页 */}
              {applications.length > 0 && (
                <Pagination className="mt-6">
                  <PaginationContent>
                    <PaginationItem>
                      <PaginationPrevious
                        onClick={() => setCurrentPage((prev) => Math.max(0, prev - 1))}
                        className={currentPage === 0 ? 'pointer-events-none opacity-50' : ''}
                      />
                    </PaginationItem>
                    {Array.from({ length: totalPages }).map((_, index) => {
                      // 只显示当前页面附近的页码
                      if (
                        index === 0 ||
                        index === totalPages - 1 ||
                        (index >= currentPage - 1 && index <= currentPage + 1)
                      ) {
                        return (
                          <PaginationItem key={index}>
                            <PaginationLink
                              isActive={currentPage === index}
                              onClick={() => setCurrentPage(index)}
                            >
                              {index + 1}
                            </PaginationLink>
                          </PaginationItem>
                        );
                      }
                      // 添加省略号
                      if (
                        (index === 1 && currentPage > 2) ||
                        (index === totalPages - 2 && currentPage < totalPages - 3)
                      ) {
                        return (
                          <PaginationItem key={index}>
                            <span className="px-4 py-2">...</span>
                          </PaginationItem>
                        );
                      }
                      return null;
                    })}
                    <PaginationItem>
                      <PaginationNext
                        onClick={() =>
                          setCurrentPage((prev) => Math.min(totalPages - 1, prev + 1))
                        }
                        className={
                          currentPage === totalPages - 1 ? 'pointer-events-none opacity-50' : ''
                        }
                      />
                    </PaginationItem>
                  </PaginationContent>
                </Pagination>
              )}
            </>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/layout.tsx">
'use client';
import { useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { useAuthStore } from '@/stores/auth-store';
import Sidebar from '@/components/dashboard/sidebar';
import Header from '@/components/dashboard/header';
export default function DashboardLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const router = useRouter();
  const { user, isAuthenticated, isLoading, refreshToken } = useAuthStore();
  // 检查认证状态
  useEffect(() => {
    const checkAuth = async () => {
      if (!isAuthenticated && !isLoading) {
        try {
          await refreshToken();
        } catch (error) {
          toast.error('您的会话已过期，请重新登录');
          router.push('/login');
        }
      }
    };
    checkAuth();
  }, [isAuthenticated, isLoading, refreshToken, router]);
  // 加载状态
  if (isLoading) {
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="text-center">
          <div className="inline-block animate-spin rounded-full border-4 border-solid border-primary border-t-transparent h-8 w-8 mr-2"></div>
          <p className="mt-2 text-muted-foreground">加载中...</p>
        </div>
      </div>
    );
  }
  return (
    <div className="min-h-screen flex flex-col md:flex-row bg-muted/20">
      {/* 侧边栏 */}
      <Sidebar />
      {/* 主内容区 */}
      <div className="flex-1 flex flex-col min-h-screen">
        <Header />
        <main className="flex-1 p-4 md:p-6">
          {children}
        </main>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/page.tsx">
'use client';
import { useEffect, useState } from 'react';
import { useAuthStore } from '@/stores/auth-store';
import { UserRole } from '@/types/auth';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { BookOpen, Users, ShoppingCart, Activity, ShieldCheck, FileText, BarChart2 } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
export default function DashboardPage() {
  const { user } = useAuthStore();
  const [greeting, setGreeting] = useState('欢迎');
  const [mounted, setMounted] = useState(false);
  // 确保只在客户端运行
  useEffect(() => {
    setMounted(true);
    // 根据时间设置问候语
    const hours = new Date().getHours();
    let greet = '';
    if (hours < 6) {
      greet = '夜深了';
    } else if (hours < 9) {
      greet = '早上好';
    } else if (hours < 12) {
      greet = '上午好';
    } else if (hours < 14) {
      greet = '中午好';
    } else if (hours < 17) {
      greet = '下午好';
    } else if (hours < 22) {
      greet = '晚上好';
    } else {
      greet = '夜深了';
    }
    setGreeting(greet);
  }, []);
  // 根据用户角色获取角色名称
  const getRoleName = () => {
    if (!user || !user.roles || user.roles.length === 0) return '用户';
    // 获取第一个角色代码（通常是最高权限的角色）
    const primaryRoleCode = user.roles[0].code?.replace('ROLE_', '');
    switch (primaryRoleCode) {
      case UserRole.ADMIN:
        return '管理员';
      case UserRole.REVIEWER:
        return '审核员';
      case UserRole.INSTITUTION:
        return '机构用户';
      case UserRole.USER:
      default:
        return '学员';
    }
  };
  // 检查用户是否有特定角色
  const hasRole = (role: UserRole) => {
    if (!user || !user.roles || user.roles.length === 0) return false;
    return user.roles.some(userRole => userRole.code?.replace('ROLE_', '') === role);
  };
  // 判断是否为管理员
  const isAdmin = hasRole(UserRole.ADMIN);
  // 判断是否为审核员
  const isReviewer = hasRole(UserRole.REVIEWER);
  // 判断是否为机构用户
  const isInstitution = hasRole(UserRole.INSTITUTION);
  return (
    <div className="space-y-6">
      {/* 欢迎区域 */}
      <div>
        <h1 className="text-3xl font-bold tracking-tight">
          {greeting}，{user?.username || '同学'}
        </h1>
        <p className="text-muted-foreground mt-2">
          欢迎回到您的在线课程平台仪表盘，您当前的身份是：<span className="font-medium">{getRoleName()}</span>
        </p>
      </div>
      {/* 角色提示 */}
      {isAdmin && (
        <Alert>
          <ShieldCheck className="h-4 w-4" />
          <AlertTitle>管理员权限</AlertTitle>
          <AlertDescription>
            您拥有管理员权限，可以管理用户、角色和权限，以及查看系统数据。
          </AlertDescription>
        </Alert>
      )}
      {isReviewer && (
        <Alert>
          <FileText className="h-4 w-4" />
          <AlertTitle>审核员权限</AlertTitle>
          <AlertDescription>
            您拥有审核员权限，可以审核课程内容和用户评论。
          </AlertDescription>
        </Alert>
      )}
      {isInstitution && (
        <Alert>
          <BookOpen className="h-4 w-4" />
          <AlertTitle>机构用户权限</AlertTitle>
          <AlertDescription>
            您拥有机构用户权限，可以创建和管理课程，查看学员数据。
          </AlertDescription>
        </Alert>
      )}
      {/* 统计卡片 - 根据角色显示不同内容 */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        {/* 普通用户和所有角色都可见 */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">已学课程</CardTitle>
            <BookOpen className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">12</div>
            <p className="text-xs text-muted-foreground mt-1">
              共计学习 42 小时
            </p>
          </CardContent>
        </Card>
        {/* 普通用户和所有角色都可见 */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">学习社区</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">+573</div>
            <p className="text-xs text-muted-foreground mt-1">
              平台活跃学习者
            </p>
          </CardContent>
        </Card>
        {/* 普通用户和所有角色都可见 */}
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">订单记录</CardTitle>
            <ShoppingCart className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">5</div>
            <p className="text-xs text-muted-foreground mt-1">
              最近30天内
            </p>
          </CardContent>
        </Card>
        {/* 根据角色显示不同的第四个卡片 */}
        {isAdmin ? (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">系统用户</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">1,234</div>
              <p className="text-xs text-muted-foreground mt-1">
                平台注册用户总数
              </p>
            </CardContent>
          </Card>
        ) : isReviewer ? (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">待审核</CardTitle>
              <FileText className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">8</div>
              <p className="text-xs text-muted-foreground mt-1">
                待审核课程内容
              </p>
            </CardContent>
          </Card>
        ) : isInstitution ? (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">课程数据</CardTitle>
              <BarChart2 className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">24</div>
              <p className="text-xs text-muted-foreground mt-1">
                已发布课程总数
              </p>
            </CardContent>
          </Card>
        ) : (
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">学习进度</CardTitle>
              <Activity className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">82%</div>
              <p className="text-xs text-muted-foreground mt-1">
                当前课程完成度
              </p>
            </CardContent>
          </Card>
        )}
      </div>
      {/* 最近课程 - 普通用户和所有角色都可见 */}
      <div>
        <h2 className="text-xl font-semibold mb-4">最近学习</h2>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {[1, 2, 3].map((i) => (
            <Card key={i}>
              <CardHeader className="pb-2">
                <CardTitle className="text-lg">Web开发进阶课程 {i}</CardTitle>
                <CardDescription>前端框架与工程化实践</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-2 w-full bg-muted rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-primary rounded-full" 
                    style={{ width: `${30 * i}%` }}
                  />
                </div>
                <div className="text-sm text-muted-foreground mt-2">
                  完成度: {30 * i}%
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
      {/* 管理员专属内容 */}
      {isAdmin && (
        <div>
          <h2 className="text-xl font-semibold mb-4">系统概览</h2>
          <Card>
            <CardHeader>
              <CardTitle>管理员控制面板</CardTitle>
              <CardDescription>系统关键指标和操作</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span>系统用户总数</span>
                  <span className="font-medium">1,234</span>
                </div>
                <div className="flex justify-between">
                  <span>今日新增用户</span>
                  <span className="font-medium">12</span>
                </div>
                <div className="flex justify-between">
                  <span>课程总数</span>
                  <span className="font-medium">156</span>
                </div>
                <div className="flex justify-between">
                  <span>系统存储使用</span>
                  <span className="font-medium">45.8 GB</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
      {/* 审核员专属内容 */}
      {isReviewer && (
        <div>
          <h2 className="text-xl font-semibold mb-4">待审核内容</h2>
          <Card>
            <CardHeader>
              <CardTitle>内容审核队列</CardTitle>
              <CardDescription>待审核的课程和评论</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span>待审核课程</span>
                  <span className="font-medium">8</span>
                </div>
                <div className="flex justify-between">
                  <span>待审核评论</span>
                  <span className="font-medium">24</span>
                </div>
                <div className="flex justify-between">
                  <span>今日已审核</span>
                  <span className="font-medium">12</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
      {/* 机构用户专属内容 */}
      {isInstitution && (
        <div>
          <h2 className="text-xl font-semibold mb-4">机构数据</h2>
          <Card>
            <CardHeader>
              <CardTitle>课程统计</CardTitle>
              <CardDescription>您的课程数据概览</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span>已发布课程</span>
                  <span className="font-medium">24</span>
                </div>
                <div className="flex justify-between">
                  <span>学员总数</span>
                  <span className="font-medium">1,568</span>
                </div>
                <div className="flex justify-between">
                  <span>本月收入</span>
                  <span className="font-medium">¥12,450</span>
                </div>
                <div className="flex justify-between">
                  <span>平均评分</span>
                  <span className="font-medium">4.8/5.0</span>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/permissions/page.tsx">
'use client';
import { useEffect, useState } from 'react';
import { Pencil, Trash2, Plus, Shield, Search, X } from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import { zhCN } from 'date-fns/locale';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { Skeleton } from '@/components/ui/skeleton';
import { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from '@/components/ui/pagination';
import { usePermissionStore } from '@/stores/permission-store';
import { Permission } from '@/types/permission';
import { PermissionForm } from '@/components/dashboard/permissions/permission-form';
import { DeleteConfirmationDialog } from '@/components/dashboard/permissions/delete-confirmation-dialog';
// HTTP方法的对应颜色
const methodColors = {
  GET: 'bg-green-500',
  POST: 'bg-blue-500',
  PUT: 'bg-amber-500',
  DELETE: 'bg-red-500',
  PATCH: 'bg-purple-500',
};
export default function PermissionsPage() {
  // 使用权限状态
  const {
    permissions,
    isLoading,
    error,
    formVisible,
    confirmDialogVisible,
    selectedIds,
    fetchPermissions,
    setFormVisible,
    setConfirmDialogVisible,
    setCurrentPermission,
    toggleSelectedId,
    clearSelectedIds,
  } = usePermissionStore();
  // 搜索关键字
  const [searchTerm, setSearchTerm] = useState('');
  // 是否显示搜索栏
  const [showSearch, setShowSearch] = useState(false);
  // 删除模式：单个或批量
  const [deleteMode, setDeleteMode] = useState<'single' | 'batch'>('single');
  // 当前要删除的权限ID
  const [currentDeleteId, setCurrentDeleteId] = useState<number | undefined>(undefined);
  // 当前页码
  const [currentPage, setCurrentPage] = useState(1);
  // 每页条数
  const [pageSize] = useState(10);
  // 组件加载时获取权限列表
  useEffect(() => {
    fetchPermissions();
  }, [fetchPermissions]);
  // 筛选权限列表
  const filteredPermissions = permissions?.filter((permission) =>
    permission.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    permission.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (permission.description && permission.description.toLowerCase().includes(searchTerm.toLowerCase()))
  ) || [];
  // 分页权限列表
  const paginatedPermissions = filteredPermissions.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );
  // 总页数
  const totalPages = Math.ceil(filteredPermissions.length / pageSize);
  // 处理创建权限
  const handleCreatePermission = () => {
    setCurrentPermission(null);
    setFormVisible(true);
  };
  // 处理编辑权限
  const handleEditPermission = (permission: Permission) => {
    setCurrentPermission(permission);
    setFormVisible(true);
  };
  // 处理删除权限
  const handleDeletePermission = (id: number) => {
    setDeleteMode('single');
    setCurrentDeleteId(id);
    setConfirmDialogVisible(true);
  };
  // 处理批量删除权限
  const handleBatchDelete = () => {
    if (selectedIds.length === 0) return;
    setDeleteMode('batch');
    setConfirmDialogVisible(true);
  };
  // 处理全选/取消全选
  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      const ids = paginatedPermissions.map(p => p.id);
      usePermissionStore.setState({ selectedIds: ids });
    } else {
      clearSelectedIds();
    }
  };
  // 渲染权限列表表格
  const renderPermissionsTable = () => {
    if (isLoading) {
      return (
        <div className="space-y-3">
          {[...Array(5)].map((_, index) => (
            <Skeleton key={index} className="w-full h-12" />
          ))}
        </div>
      );
    }
    if (paginatedPermissions.length === 0) {
      return (
        <div className="py-12 text-center">
          <Shield className="mx-auto h-12 w-12 text-muted-foreground" />
          <h3 className="mt-4 text-lg font-semibold">没有权限数据</h3>
          <p className="mt-2 text-sm text-muted-foreground">
            {searchTerm ? '没有匹配的搜索结果，请尝试其他关键词' : '系统中还没有权限数据，请点击"创建权限"按钮添加'}
          </p>
        </div>
      );
    }
    return (
      <>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[50px]">
                <Checkbox
                  checked={
                    paginatedPermissions.length > 0 &&
                    paginatedPermissions.every(p => selectedIds.includes(p.id))
                  }
                  onCheckedChange={handleSelectAll}
                  aria-label="全选"
                />
              </TableHead>
              <TableHead className="w-[200px]">权限名称</TableHead>
              <TableHead className="w-[200px]">权限编码</TableHead>
              <TableHead className="hidden md:table-cell">资源路径</TableHead>
              <TableHead className="w-[100px] hidden md:table-cell">HTTP方法</TableHead>
              <TableHead className="w-[150px] hidden md:table-cell">创建时间</TableHead>
              <TableHead className="w-[120px] text-right">操作</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {paginatedPermissions.map((permission) => (
              <TableRow key={permission.id}>
                <TableCell>
                  <Checkbox
                    checked={selectedIds.includes(permission.id)}
                    onCheckedChange={() => toggleSelectedId(permission.id)}
                    aria-label={`选择${permission.name}`}
                  />
                </TableCell>
                <TableCell className="font-medium">{permission.name}</TableCell>
                <TableCell>{permission.code}</TableCell>
                <TableCell className="hidden md:table-cell">
                  {permission.url || '-'}
                </TableCell>
                <TableCell className="hidden md:table-cell">
                  {permission.method ? (
                    <Badge 
                      className={methodColors[permission.method as keyof typeof methodColors] || 'bg-gray-500'}
                    >
                      {permission.method}
                    </Badge>
                  ) : (
                    '-'
                  )}
                </TableCell>
                <TableCell className="hidden md:table-cell">
                  {permission.createdAt
                    ? formatDistanceToNow(new Date(permission.createdAt), { addSuffix: true, locale: zhCN })
                    : '-'}
                </TableCell>
                <TableCell className="text-right">
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleEditPermission(permission)}
                    className="mr-1"
                  >
                    <Pencil className="h-4 w-4" />
                    <span className="sr-only">编辑</span>
                  </Button>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleDeletePermission(permission.id)}
                    className="text-destructive hover:text-destructive hover:bg-destructive/10"
                  >
                    <Trash2 className="h-4 w-4" />
                    <span className="sr-only">删除</span>
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
        {/* 分页组件 */}
        {totalPages > 1 && (
          <Pagination className="mt-4">
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious 
                  href="#" 
                  onClick={(e) => {
                    e.preventDefault();
                    if (currentPage > 1) setCurrentPage(currentPage - 1);
                  }}
                  className={currentPage === 1 ? 'pointer-events-none opacity-50' : ''}
                />
              </PaginationItem>
              {[...Array(totalPages)].map((_, i) => (
                <PaginationItem key={i}>
                  <PaginationLink 
                    href="#" 
                    onClick={(e) => {
                      e.preventDefault();
                      setCurrentPage(i + 1);
                    }}
                    isActive={currentPage === i + 1}
                  >
                    {i + 1}
                  </PaginationLink>
                </PaginationItem>
              ))}
              <PaginationItem>
                <PaginationNext 
                  href="#" 
                  onClick={(e) => {
                    e.preventDefault();
                    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
                  }}
                  className={currentPage === totalPages ? 'pointer-events-none opacity-50' : ''}
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        )}
      </>
    );
  };
  return (
    <div className="space-y-4">
      <Card>
        <CardHeader className="flex flex-col sm:flex-row items-start sm:items-center justify-between space-y-2 sm:space-y-0 py-5">
          <div>
            <CardTitle>权限管理</CardTitle>
            <CardDescription>
              管理系统权限，控制资源访问
            </CardDescription>
          </div>
          <div className="flex items-center gap-2 w-full sm:w-auto">
            {showSearch ? (
              <div className="flex items-center w-full sm:w-auto">
                <Input
                  placeholder="搜索权限..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="mr-2"
                />
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={() => {
                    setSearchTerm('');
                    setShowSearch(false);
                  }}
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            ) : (
              <>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowSearch(true)}
                >
                  <Search className="h-4 w-4 mr-2" />
                  搜索
                </Button>
                {selectedIds.length > 0 && (
                  <Button
                    variant="destructive"
                    size="sm"
                    onClick={handleBatchDelete}
                  >
                    <Trash2 className="h-4 w-4 mr-2" />
                    删除所选 ({selectedIds.length})
                  </Button>
                )}
                <Button size="sm" onClick={handleCreatePermission}>
                  <Plus className="h-4 w-4 mr-2" />
                  创建权限
                </Button>
              </>
            )}
          </div>
        </CardHeader>
        <CardContent>
          {renderPermissionsTable()}
        </CardContent>
      </Card>
      {/* 权限表单对话框 */}
      <PermissionForm />
      {/* 删除确认对话框 */}
      <DeleteConfirmationDialog 
        mode={deleteMode} 
        id={currentDeleteId} 
      />
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/profile/page.tsx">
'use client';
import { useState, useEffect, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import ReactCrop, { Crop, PixelCrop, centerCrop, makeAspectCrop } from 'react-image-crop';
import 'react-image-crop/dist/ReactCrop.css';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { useAuthStore } from '@/stores/auth-store';
import userService from '@/services/user';
import authService from '@/services/auth';
// 个人资料表单 Schema
const profileFormSchema = z.object({
  nickname: z.string().optional(),
  phone: z.string().regex(/^1[3-9]\d{9}$/, '请输入正确的手机号码').optional(),
});
// 密码修改表单 Schema
const passwordFormSchema = z.object({
  oldPassword: z.string().min(6, '旧密码长度至少6个字符'),
  newPassword: z.string().min(6, '新密码长度至少6个字符'),
  confirmPassword: z.string().min(6, '确认密码长度至少6个字符'),
}).refine(data => data.newPassword === data.confirmPassword, {
  message: "两次输入的密码不一致",
  path: ["confirmPassword"],
});
// 邮箱更新表单 Schema
const emailFormSchema = z.object({
  newEmail: z.string().email('请输入有效的邮箱地址'),
  captchaKey: z.string().optional(),
  captchaCode: z.string().optional(),
  emailCode: z.string().length(6, '验证码需要6位数字'),
  password: z.string().min(6, '密码长度至少6个字符'),
});
// 裁剪图片的工具函数
function centerAspectCrop(
  mediaWidth: number,
  mediaHeight: number,
  aspect: number,
) {
  return centerCrop(
    makeAspectCrop(
      {
        unit: '%',
        width: 90,
      },
      aspect,
      mediaWidth,
      mediaHeight,
    ),
    mediaWidth,
    mediaHeight,
  );
}
// 将裁剪后的图片转换为文件
async function getCroppedImg(
  image: HTMLImageElement,
  crop: PixelCrop,
  fileName: string,
): Promise<File> {
  const canvas = document.createElement('canvas');
  const scaleX = image.naturalWidth / image.width;
  const scaleY = image.naturalHeight / image.height;
  const ctx = canvas.getContext('2d');
  if (!ctx) {
    throw new Error('No 2d context');
  }
  canvas.width = crop.width;
  canvas.height = crop.height;
  ctx.drawImage(
    image,
    crop.x * scaleX,
    crop.y * scaleY,
    crop.width * scaleX,
    crop.height * scaleY,
    0,
    0,
    crop.width,
    crop.height,
  );
  return new Promise((resolve, reject) => {
    canvas.toBlob(blob => {
      if (!blob) {
        reject(new Error('Canvas is empty'));
        return;
      }
      // 创建File对象
      const file = new File([blob], fileName, {
        type: 'image/jpeg',
        lastModified: Date.now(),
      });
      resolve(file);
    }, 'image/jpeg', 0.95);
  });
}
export default function ProfilePage() {
  const router = useRouter();
  const imgRef = useRef<HTMLImageElement | null>(null);
  const { user, setUser } = useAuthStore();
  const [isLoading, setIsLoading] = useState(false);
  const [selectedTab, setSelectedTab] = useState('profile');
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string>('');
  const [crop, setCrop] = useState<Crop>();
  const [completedCrop, setCompletedCrop] = useState<PixelCrop>();
  const [aspect, setAspect] = useState<number>(1);
  const [isCropperOpen, setIsCropperOpen] = useState(false);
  const [croppedImageUrl, setCroppedImageUrl] = useState<string>('');
  const [croppedImageFile, setCroppedImageFile] = useState<File | null>(null);
  const [isEmailSending, setIsEmailSending] = useState(false);
  const [emailCodeCountdown, setEmailCodeCountdown] = useState(0);
  const [captchaKey, setCaptchaKey] = useState<string>('');
  const [captchaImage, setCaptchaImage] = useState<string>('');
  const [isCaptchaLoading, setIsCaptchaLoading] = useState(false);
  // 个人资料表单
  const profileForm = useForm<z.infer<typeof profileFormSchema>>({
    resolver: zodResolver(profileFormSchema),
    defaultValues: {
      nickname: user?.nickname || '',
      phone: user?.phone || '',
    },
  });
  // 密码修改表单
  const passwordForm = useForm<z.infer<typeof passwordFormSchema>>({
    resolver: zodResolver(passwordFormSchema),
    defaultValues: {
      oldPassword: '',
      newPassword: '',
      confirmPassword: '',
    },
  });
  // 邮箱更新表单
  const emailForm = useForm<z.infer<typeof emailFormSchema>>({
    resolver: zodResolver(emailFormSchema),
    defaultValues: {
      newEmail: '',
      captchaKey: '',
      captchaCode: '',
      emailCode: '',
      password: '',
    },
    mode: 'onChange',
  });
  // 加载用户信息（仅在组件挂载和user为空时）
  useEffect(() => {
    // 创建一个信号控制器，用于在组件卸载时取消请求
    const controller = new AbortController();
    let isMounted = true;
    const fetchUserInfo = async () => {
      try {
        // 如果已经有用户信息，不需要重新获取
        if (user) {
          // 更新表单默认值
          profileForm.reset({
            nickname: user.nickname || '',
            phone: user.phone || '',
          });
          return;
        }
        // 如果用户已登出，不要尝试获取用户信息
        if (!user) {
          router.push('/login');
          return;
        }
        const userData = await userService.getCurrentUser();
        // 确保组件仍然挂载
        if (isMounted) {
          // 更新全局状态
          setUser(userData);
          // 更新表单默认值
          profileForm.reset({
            nickname: userData.nickname || '',
            phone: userData.phone || '',
          });
        }
      } catch (error: any) { // 使用any类型以便访问response属性
        // 确保组件仍然挂载
        if (isMounted) {
          console.error('加载用户信息失败:', error);
          // 如果是401或403错误，说明用户未认证或令牌已过期，重定向到登录页
          if (error?.response?.status === 401 || error?.response?.status === 403) {
            toast.error('您的登录已过期，请重新登录');
            router.push('/login');
          } else {
            toast.error('加载用户信息失败，请稍后重试');
          }
        }
      }
    };
    fetchUserInfo();
    // 清理函数
    return () => {
      isMounted = false;
      controller.abort();
    };
  }, [user?.id, setUser, profileForm, router]);
  // 邮箱验证码倒计时
  useEffect(() => {
    if (emailCodeCountdown <= 0) return;
    const timer = setTimeout(() => {
      setEmailCodeCountdown(prev => prev - 1);
    }, 1000);
    return () => clearTimeout(timer);
  }, [emailCodeCountdown]);
  // 选中邮箱选项卡时获取验证码
  useEffect(() => {
    if (selectedTab === 'email' && !captchaImage) {
      loadCaptcha();
    }
  }, [selectedTab]);
  // 加载验证码
  const loadCaptcha = async () => {
    setIsCaptchaLoading(true);
    try {
      const captchaData = await authService.getCaptcha();
      setCaptchaKey(captchaData.captchaId);
      setCaptchaImage(captchaData.captchaImage);
      // 只有当当前值与新值不同时才设置，避免不必要的状态更新
      const currentCaptchaKey = emailForm.getValues('captchaKey');
      if (currentCaptchaKey !== captchaData.captchaId) {
        emailForm.setValue('captchaKey', captchaData.captchaId, { 
          shouldValidate: false,
          shouldDirty: false,
          shouldTouch: false
        });
      }
    } catch (error) {
      console.error('获取验证码失败:', error);
      toast.error('获取验证码失败，请刷新页面重试');
    } finally {
      setIsCaptchaLoading(false);
    }
  };
  // 刷新验证码
  const refreshCaptcha = () => {
    loadCaptcha();
  };
  // 图片加载时设置初始裁剪区域
  const onImageLoad = (e: React.SyntheticEvent<HTMLImageElement>) => {
    const { width, height } = e.currentTarget;
    imgRef.current = e.currentTarget;
    setCrop(centerAspectCrop(width, height, aspect));
  };
  // 处理裁剪完成
  const handleCropComplete = (c: PixelCrop) => {
    setCompletedCrop(c);
  };
  // 应用裁剪并关闭对话框
  const handleApplyCrop = async () => {
    if (!imgRef.current || !completedCrop || !selectedFile) {
      return;
    }
    try {
      // 获取裁剪后的图片文件
      const croppedFile = await getCroppedImg(
        imgRef.current,
        completedCrop,
        selectedFile.name,
      );
      // 保存裁剪后的图片文件
      setCroppedImageFile(croppedFile);
      // 创建裁剪后图片的URL预览
      const newPreviewUrl = URL.createObjectURL(croppedFile);
      setCroppedImageUrl(newPreviewUrl);
      // 关闭裁剪对话框
      setIsCropperOpen(false);
    } catch (error) {
      console.error('裁剪图片失败:', error);
      toast.error('裁剪图片失败，请重试');
    }
  };
  // 提交个人资料表单
  const onProfileSubmit = async (data: z.infer<typeof profileFormSchema>) => {
    if (!user) {
      toast.error('您需要先登录');
      router.push('/login');
      return;
    }
    setIsLoading(true);
    try {
      const updatedUser = await userService.updateProfile(data);
      setUser(updatedUser);
      toast.success('个人资料更新成功');
    } catch (error: any) {
      console.error('更新个人资料失败:', error);
      if (error?.response?.status === 401 || error?.response?.status === 403) {
        toast.error('您的登录已过期，请重新登录');
        router.push('/login');
      } else {
        toast.error('更新个人资料失败，请稍后重试');
      }
    } finally {
      setIsLoading(false);
    }
  };
  // 提交密码修改表单
  const onPasswordSubmit = async (data: z.infer<typeof passwordFormSchema>) => {
    if (!user) {
      toast.error('您需要先登录');
      router.push('/login');
      return;
    }
    setIsLoading(true);
    try {
      await userService.changePassword(data);
      toast.success('密码修改成功');
      passwordForm.reset();
    } catch (error: any) {
      console.error('修改密码失败:', error);
      if (error?.response?.status === 401 || error?.response?.status === 403) {
        toast.error('您的登录已过期，请重新登录');
        router.push('/login');
      } else {
        toast.error('修改密码失败，请检查旧密码是否正确');
      }
    } finally {
      setIsLoading(false);
    }
  };
  // 发送邮箱验证码
  const handleSendEmailCode = async () => {
    // 获取并验证新邮箱和密码
    const newEmail = emailForm.getValues('newEmail');
    const captchaCode = emailForm.getValues('captchaCode');
    const password = emailForm.getValues('password');
    // 验证邮箱和验证码
    const emailValid = await emailForm.trigger('newEmail');
    if (!emailValid || !newEmail) {
      toast.error('请输入有效的邮箱地址');
      return;
    }
    if (!captchaCode) {
      toast.error('请输入图形验证码');
      return;
    }
    // 验证密码
    const passwordValid = await emailForm.trigger('password');
    if (!passwordValid || !password) {
      toast.error('请输入当前密码');
      return;
    }
    if (!user) {
      toast.error('您需要先登录');
      router.push('/login');
      return;
    }
    setIsEmailSending(true);
    try {
      // 发送验证码
      await userService.sendEmailUpdateCode({
        email: newEmail,
        captchaKey: captchaKey,
        captchaCode: captchaCode,
      });
      toast.success('验证码已发送，请查收邮件');
      // 开始倒计时
      setEmailCodeCountdown(60);
      // 刷新验证码
      refreshCaptcha();
    } catch (error: any) {
      console.error('发送邮箱验证码失败:', error);
      if (error?.response?.status === 401 || error?.response?.status === 403) {
        toast.error('您的登录已过期，请重新登录');
        router.push('/login');
      } else if (error?.response?.status === 400) {
        toast.error('验证码错误，请重新输入');
        refreshCaptcha(); // 刷新验证码
      } else {
        toast.error('发送验证码失败，请稍后重试');
      }
    } finally {
      setIsEmailSending(false);
    }
  };
  // 提交邮箱更新表单
  const onEmailSubmit = async (data: z.infer<typeof emailFormSchema>) => {
    if (!user) {
      toast.error('您需要先登录');
      router.push('/login');
      return;
    }
    setIsLoading(true);
    try {
      await userService.updateEmail({
        newEmail: data.newEmail,
        emailCode: data.emailCode,
        password: data.password,
      });
      // 更新用户信息，重新获取以保证邮箱已更新
      const updatedUser = await userService.getCurrentUser();
      setUser(updatedUser);
      toast.success('邮箱更新成功');
      // 重置表单，确保所有字段都被正确重置
      emailForm.reset({
        newEmail: '',
        captchaKey: '',
        captchaCode: '',
        emailCode: '',
        password: '',
      });
      // 刷新验证码
      refreshCaptcha();
    } catch (error: any) {
      console.error('更新邮箱失败:', error);
      if (error?.response?.status === 401 || error?.response?.status === 403) {
        toast.error('您的登录已过期，请重新登录');
        router.push('/login');
      } else if (error?.response?.status === 400) {
        toast.error('更新邮箱失败，验证码可能已过期或不正确');
      } else {
        toast.error('更新邮箱失败，请检查验证码和密码是否正确');
      }
    } finally {
      setIsLoading(false);
    }
  };
  // 处理头像文件选择
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    // 验证文件类型
    if (!file.type.startsWith('image/')) {
      toast.error('请选择图片文件');
      return;
    }
    // 验证文件大小 (最大2MB)
    if (file.size > 2 * 1024 * 1024) {
      toast.error('图片大小不能超过2MB');
      return;
    }
    setSelectedFile(file);
    const imageUrl = URL.createObjectURL(file);
    setPreviewUrl(imageUrl);
    setIsCropperOpen(true);
  };
  // 提交头像更新
  const handleAvatarUpload = async () => {
    if (!user) {
      toast.error('您需要先登录');
      router.push('/login');
      return;
    }
    if (!croppedImageFile) {
      toast.error('请先选择并裁剪头像');
      return;
    }
    setIsLoading(true);
    try {
      const response = await userService.uploadAvatar(croppedImageFile);
      // 更新用户头像
      setUser({ ...user!, avatar: response.avatarUrl });
      toast.success('头像上传成功');
      // 清理
      setSelectedFile(null);
      setPreviewUrl('');
    } catch (error: any) {
      console.error('上传头像失败:', error);
      if (error?.response?.status === 401 || error?.response?.status === 403) {
        toast.error('您的登录已过期，请重新登录');
        router.push('/login');
      } else {
        toast.error('上传头像失败，请稍后重试');
      }
    } finally {
      setIsLoading(false);
    }
  };
  return (
    <div className="container mx-auto py-6">
      <h1 className="text-3xl font-bold mb-6">个人资料</h1>
      <Tabs value={selectedTab} onValueChange={setSelectedTab} className="w-full">
        <TabsList className="mb-6">
          <TabsTrigger value="profile">基本信息</TabsTrigger>
          <TabsTrigger value="avatar">头像设置</TabsTrigger>
          <TabsTrigger value="password">修改密码</TabsTrigger>
          <TabsTrigger value="email">更新邮箱</TabsTrigger>
        </TabsList>
        {/* 基本信息表单 */}
        <TabsContent value="profile">
          <Card>
            <CardHeader>
              <CardTitle>个人资料</CardTitle>
              <CardDescription>管理您的个人资料信息，如昵称和手机号码</CardDescription>
            </CardHeader>
            <form onSubmit={profileForm.handleSubmit(onProfileSubmit)}>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="username">用户名</Label>
                  <Input id="username" value={user?.username || ''} disabled />
                  <p className="text-sm text-muted-foreground">用户名不可修改</p>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email">邮箱</Label>
                  <Input id="email" value={user?.email || ''} disabled />
                  <p className="text-sm text-muted-foreground">
                    如需修改邮箱，请前往"更新邮箱"选项卡
                  </p>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="nickname">昵称</Label>
                  <Input
                    id="nickname"
                    {...profileForm.register('nickname')}
                    placeholder="请输入昵称"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="phone">手机号码</Label>
                  <Input
                    id="phone"
                    {...profileForm.register('phone')}
                    placeholder="请输入手机号码"
                  />
                  {profileForm.formState.errors.phone && (
                    <p className="text-sm text-red-500">
                      {profileForm.formState.errors.phone.message}
                    </p>
                  )}
                </div>
              </CardContent>
              <CardFooter className="flex justify-end">
                <Button type="submit" disabled={isLoading}>
                  {isLoading ? '保存中...' : '保存修改'}
                </Button>
              </CardFooter>
            </form>
          </Card>
        </TabsContent>
        {/* 头像设置表单 */}
        <TabsContent value="avatar">
          <Card>
            <CardHeader>
              <CardTitle>头像设置</CardTitle>
              <CardDescription>更新您的个人头像</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="flex flex-col items-center space-y-4">
                <Avatar className="h-24 w-24">
                  <AvatarImage 
                    src={croppedImageUrl || user?.avatar} 
                    alt={user?.username} 
                  />
                  <AvatarFallback>{user?.username?.slice(0, 2).toUpperCase()}</AvatarFallback>
                </Avatar>
                <div className="flex flex-col items-center space-y-2">
                  <Label htmlFor="avatar" className="cursor-pointer">
                    <div className="px-4 py-2 bg-muted rounded-md hover:bg-muted/80 transition">
                      选择图片
                    </div>
                    <input
                      id="avatar"
                      type="file"
                      className="hidden"
                      accept="image/*"
                      onChange={handleFileChange}
                    />
                  </Label>
                  <p className="text-sm text-muted-foreground">
                    支持 JPG, PNG 格式，文件大小不超过 2MB
                  </p>
                </div>
              </div>
            </CardContent>
            <CardFooter className="flex justify-end">
              <Button
                onClick={handleAvatarUpload}
                disabled={isLoading || !croppedImageFile}
              >
                {isLoading ? '上传中...' : '上传头像'}
              </Button>
            </CardFooter>
          </Card>
        </TabsContent>
        {/* 密码修改表单 */}
        <TabsContent value="password">
          <Card>
            <CardHeader>
              <CardTitle>修改密码</CardTitle>
              <CardDescription>更新您的登录密码</CardDescription>
            </CardHeader>
            <form onSubmit={passwordForm.handleSubmit(onPasswordSubmit)}>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="oldPassword">当前密码</Label>
                  <Input
                    id="oldPassword"
                    type="password"
                    {...passwordForm.register('oldPassword')}
                    placeholder="请输入当前密码"
                  />
                  {passwordForm.formState.errors.oldPassword && (
                    <p className="text-sm text-red-500">
                      {passwordForm.formState.errors.oldPassword.message}
                    </p>
                  )}
                </div>
                <div className="space-y-2">
                  <Label htmlFor="newPassword">新密码</Label>
                  <Input
                    id="newPassword"
                    type="password"
                    {...passwordForm.register('newPassword')}
                    placeholder="请输入新密码"
                  />
                  {passwordForm.formState.errors.newPassword && (
                    <p className="text-sm text-red-500">
                      {passwordForm.formState.errors.newPassword.message}
                    </p>
                  )}
                </div>
                <div className="space-y-2">
                  <Label htmlFor="confirmPassword">确认新密码</Label>
                  <Input
                    id="confirmPassword"
                    type="password"
                    {...passwordForm.register('confirmPassword')}
                    placeholder="请再次输入新密码"
                  />
                  {passwordForm.formState.errors.confirmPassword && (
                    <p className="text-sm text-red-500">
                      {passwordForm.formState.errors.confirmPassword.message}
                    </p>
                  )}
                </div>
              </CardContent>
              <CardFooter className="flex justify-end">
                <Button type="submit" disabled={isLoading}>
                  {isLoading ? '更新中...' : '更新密码'}
                </Button>
              </CardFooter>
            </form>
          </Card>
        </TabsContent>
        {/* 更新邮箱表单 */}
        <TabsContent value="email">
          <Card>
            <CardHeader>
              <CardTitle>更新邮箱</CardTitle>
              <CardDescription>
                更新您的登录邮箱，需要验证您的身份和新邮箱的有效性。
                请按照以下步骤操作：先输入当前密码验证身份，再填写新邮箱并获取验证码。
              </CardDescription>
            </CardHeader>
            <form onSubmit={emailForm.handleSubmit(onEmailSubmit)}>
              <CardContent className="space-y-6">
                {/* 当前密码和邮箱 */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="password" className="font-semibold">当前密码</Label>
                    <Input
                      id="password"
                      type="password"
                      {...emailForm.register('password')}
                      placeholder="请输入当前密码"
                      autoComplete="current-password"
                    />
                    <p className="text-xs text-muted-foreground">为确保安全，需要先验证您的身份</p>
                    {emailForm.formState.errors.password && (
                      <p className="text-sm text-red-500">
                        {emailForm.formState.errors.password.message}
                      </p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="currentEmail">当前邮箱</Label>
                    <Input
                      id="currentEmail"
                      value={user?.email || ''}
                      disabled
                    />
                    <p className="text-xs text-muted-foreground">您当前使用的邮箱地址</p>
                  </div>
                </div>
                {/* 新邮箱和图形验证码 */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="newEmail">新邮箱</Label>
                    <Input
                      id="newEmail"
                      type="email"
                      {...emailForm.register('newEmail')}
                      placeholder="请输入新邮箱地址"
                      autoComplete="email"
                    />
                    <p className="text-xs text-muted-foreground">请确保这是一个有效的邮箱，验证码将发送至此</p>
                    {emailForm.formState.errors.newEmail && (
                      <p className="text-sm text-red-500">
                        {emailForm.formState.errors.newEmail.message}
                      </p>
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="captchaCode">图形验证码</Label>
                    <div className="flex space-x-2">
                      <Input
                        id="captchaCode"
                        {...emailForm.register('captchaCode')}
                        placeholder="请输入图形验证码"
                      />
                      <div 
                        className="h-10 w-24 flex-shrink-0 cursor-pointer border rounded overflow-hidden"
                        onClick={refreshCaptcha}
                        title="点击刷新验证码"
                      >
                        {isCaptchaLoading ? (
                          <div className="h-full flex items-center justify-center bg-muted">
                            <span className="text-xs">加载中...</span>
                          </div>
                        ) : (
                          captchaImage && <img src={captchaImage} alt="验证码" className="h-full w-full object-cover" />
                        )}
                      </div>
                    </div>
                    <p className="text-xs text-muted-foreground">输入图片中显示的验证码，点击图片可刷新</p>
                  </div>
                </div>
                {/* 邮箱验证码 */}
                <div className="space-y-2">
                  <Label htmlFor="emailCode">邮箱验证码</Label>
                  <div className="flex space-x-2">
                    <Input
                      id="emailCode"
                      {...emailForm.register('emailCode')}
                      placeholder="请输入邮箱验证码"
                    />
                    <Button
                      type="button"
                      variant="outline"
                      onClick={handleSendEmailCode}
                      disabled={isEmailSending || emailCodeCountdown > 0}
                      className="whitespace-nowrap"
                      title={emailCodeCountdown > 0 ? `${emailCodeCountdown}秒后可重新发送` : '发送验证码到新邮箱'}
                    >
                      {isEmailSending 
                        ? '发送中...' 
                        : emailCodeCountdown > 0 
                          ? `${emailCodeCountdown}s` 
                          : '获取验证码'}
                    </Button>
                  </div>
                  <p className="text-xs text-muted-foreground">输入发送到新邮箱的6位数字验证码</p>
                  {emailForm.formState.errors.emailCode && (
                    <p className="text-sm text-red-500">
                      {emailForm.formState.errors.emailCode.message}
                    </p>
                  )}
                </div>
              </CardContent>
              <CardFooter className="flex justify-between">
                <p className="text-sm text-muted-foreground">
                  更新邮箱后，将使用新邮箱作为您的登录凭证
                </p>
                <Button 
                  type="submit" 
                  disabled={isLoading}
                  className="min-w-24"
                >
                  {isLoading ? '更新中...' : '更新邮箱'}
                </Button>
              </CardFooter>
            </form>
          </Card>
        </TabsContent>
      </Tabs>
      {/* 头像裁剪对话框 */}
      <Dialog open={isCropperOpen} onOpenChange={setIsCropperOpen}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>裁剪头像</DialogTitle>
            <DialogDescription>
              调整头像的裁剪区域，保持图片比例为1:1的正方形
            </DialogDescription>
          </DialogHeader>
          <div className="my-4 flex justify-center">
            {previewUrl && (
              <ReactCrop
                crop={crop}
                onChange={(c) => setCrop(c)}
                onComplete={handleCropComplete}
                aspect={aspect}
                circularCrop
              >
                <img
                  ref={imgRef}
                  src={previewUrl}
                  alt="头像裁剪预览"
                  style={{ maxHeight: '400px' }}
                  onLoad={onImageLoad}
                />
              </ReactCrop>
            )}
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsCropperOpen(false)}>
              取消
            </Button>
            <Button onClick={handleApplyCrop}>
              应用裁剪
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/roles/page.tsx">
'use client';
import { useEffect, useState } from 'react';
import { Pencil, Trash2, Plus, Shield, Search, X, Settings } from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import { zhCN } from 'date-fns/locale';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { Skeleton } from '@/components/ui/skeleton';
import { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from '@/components/ui/pagination';
import { useRoleStore } from '@/stores/role-store';
import { Role } from '@/types/role';
import { RoleForm } from '@/components/dashboard/roles/role-form';
import { DeleteConfirmationDialog } from '@/components/dashboard/roles/delete-confirmation-dialog';
import { PermissionDialog } from '@/components/dashboard/roles/permission-dialog';
export default function RolesPage() {
  // 使用角色状态
  const {
    roles,
    isLoading,
    error,
    formVisible,
    confirmDialogVisible,
    permissionDialogVisible,
    selectedIds,
    fetchRoles,
    setFormVisible,
    setConfirmDialogVisible,
    setPermissionDialogVisible,
    setCurrentRole,
    toggleSelectedId,
    clearSelectedIds,
  } = useRoleStore();
  // 搜索关键字
  const [searchTerm, setSearchTerm] = useState('');
  // 是否显示搜索栏
  const [showSearch, setShowSearch] = useState(false);
  // 删除模式：单个或批量
  const [deleteMode, setDeleteMode] = useState<'single' | 'batch'>('single');
  // 当前要删除的角色ID
  const [currentDeleteId, setCurrentDeleteId] = useState<number | undefined>(undefined);
  // 当前页码
  const [currentPage, setCurrentPage] = useState(1);
  // 每页条数
  const [pageSize] = useState(10);
  // 组件加载时获取角色列表
  useEffect(() => {
    fetchRoles();
  }, [fetchRoles]);
  // 筛选角色列表
  const filteredRoles = roles?.filter((role) =>
    role.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    role.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
    (role.description && role.description.toLowerCase().includes(searchTerm.toLowerCase()))
  ) || [];
  // 分页角色列表
  const paginatedRoles = filteredRoles.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );
  // 总页数
  const totalPages = Math.ceil(filteredRoles.length / pageSize);
  // 处理创建角色
  const handleCreateRole = () => {
    setCurrentRole(null);
    setFormVisible(true);
  };
  // 处理编辑角色
  const handleEditRole = (role: Role) => {
    setCurrentRole(role);
    setFormVisible(true);
  };
  // 处理分配权限
  const handleAssignPermissions = (role: Role) => {
    setCurrentRole(role);
    setPermissionDialogVisible(true);
  };
  // 处理删除角色
  const handleDeleteRole = (id: number) => {
    setDeleteMode('single');
    // 设置要删除的角色ID
    useRoleStore.setState({ selectedIds: [id] });
    setConfirmDialogVisible(true);
  };
  // 处理批量删除角色
  const handleBatchDelete = () => {
    if (selectedIds.length === 0) return;
    setDeleteMode('batch');
    setConfirmDialogVisible(true);
  };
  // 处理全选/取消全选
  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      const ids = paginatedRoles.map(r => r.id);
      useRoleStore.setState({ selectedIds: ids });
    } else {
      clearSelectedIds();
    }
  };
  // 渲染角色列表表格
  const renderRolesTable = () => {
    if (isLoading) {
      return (
        <div className="space-y-3">
          {[...Array(5)].map((_, index) => (
            <Skeleton key={index} className="w-full h-12" />
          ))}
        </div>
      );
    }
    if (paginatedRoles.length === 0) {
      return (
        <div className="py-12 text-center">
          <Shield className="mx-auto h-12 w-12 text-muted-foreground" />
          <h3 className="mt-4 text-lg font-semibold">没有角色数据</h3>
          <p className="mt-2 text-sm text-muted-foreground">
            {searchTerm ? '没有匹配的搜索结果，请尝试其他关键词' : '系统中还没有角色数据，请点击"创建角色"按钮添加'}
          </p>
        </div>
      );
    }
    return (
      <>
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[50px]">
                <Checkbox
                  checked={
                    paginatedRoles.length > 0 &&
                    paginatedRoles.every(r => selectedIds.includes(r.id))
                  }
                  onCheckedChange={handleSelectAll}
                  aria-label="全选"
                />
              </TableHead>
              <TableHead className="w-[200px]">角色名称</TableHead>
              <TableHead className="w-[200px]">角色编码</TableHead>
              <TableHead className="hidden md:table-cell">描述</TableHead>
              <TableHead className="w-[150px] hidden md:table-cell">创建时间</TableHead>
              <TableHead className="w-[150px] text-right">操作</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {paginatedRoles.map((role) => (
              <TableRow key={role.id}>
                <TableCell>
                  <Checkbox
                    checked={selectedIds.includes(role.id)}
                    onCheckedChange={() => toggleSelectedId(role.id)}
                    aria-label={`选择${role.name}`}
                  />
                </TableCell>
                <TableCell className="font-medium">{role.name}</TableCell>
                <TableCell>
                  <Badge variant="outline">{role.code}</Badge>
                </TableCell>
                <TableCell className="hidden md:table-cell">
                  {role.description || '-'}
                </TableCell>
                <TableCell className="hidden md:table-cell">
                  {role.createdAt
                    ? formatDistanceToNow(new Date(role.createdAt), { addSuffix: true, locale: zhCN })
                    : '-'}
                </TableCell>
                <TableCell className="text-right">
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleAssignPermissions(role)}
                    className="mr-1"
                    title="分配权限"
                  >
                    <Settings className="h-4 w-4" />
                    <span className="sr-only">分配权限</span>
                  </Button>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleEditRole(role)}
                    className="mr-1"
                    title="编辑角色"
                  >
                    <Pencil className="h-4 w-4" />
                    <span className="sr-only">编辑</span>
                  </Button>
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => handleDeleteRole(role.id)}
                    className="text-destructive hover:text-destructive hover:bg-destructive/10"
                    title="删除角色"
                  >
                    <Trash2 className="h-4 w-4" />
                    <span className="sr-only">删除</span>
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
        {/* 分页组件 */}
        {totalPages > 1 && (
          <Pagination className="mt-4">
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious 
                  href="#" 
                  onClick={(e) => {
                    e.preventDefault();
                    if (currentPage > 1) setCurrentPage(currentPage - 1);
                  }}
                  className={currentPage === 1 ? 'pointer-events-none opacity-50' : ''}
                />
              </PaginationItem>
              {[...Array(totalPages)].map((_, i) => (
                <PaginationItem key={i}>
                  <PaginationLink 
                    href="#" 
                    onClick={(e) => {
                      e.preventDefault();
                      setCurrentPage(i + 1);
                    }}
                    isActive={currentPage === i + 1}
                  >
                    {i + 1}
                  </PaginationLink>
                </PaginationItem>
              ))}
              <PaginationItem>
                <PaginationNext 
                  href="#" 
                  onClick={(e) => {
                    e.preventDefault();
                    if (currentPage < totalPages) setCurrentPage(currentPage + 1);
                  }}
                  className={currentPage === totalPages ? 'pointer-events-none opacity-50' : ''}
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        )}
      </>
    );
  };
  return (
    <div className="container mx-auto py-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">角色管理</h1>
        <div className="flex space-x-2">
          {showSearch ? (
            <div className="relative">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                type="text"
                placeholder="搜索角色..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-[200px] pl-8 pr-8"
              />
              {searchTerm && (
                <button
                  type="button"
                  onClick={() => setSearchTerm('')}
                  className="absolute right-2.5 top-2.5 text-muted-foreground hover:text-foreground"
                >
                  <X className="h-4 w-4" />
                  <span className="sr-only">清除搜索</span>
                </button>
              )}
            </div>
          ) : (
            <Button
              variant="outline"
              size="icon"
              onClick={() => setShowSearch(true)}
            >
              <Search className="h-4 w-4" />
              <span className="sr-only">搜索</span>
            </Button>
          )}
          {selectedIds.length > 0 && (
            <Button
              variant="destructive"
              size="sm"
              onClick={handleBatchDelete}
            >
              批量删除 ({selectedIds.length})
            </Button>
          )}
          <Button onClick={handleCreateRole}>
            <Plus className="mr-2 h-4 w-4" />
            创建角色
          </Button>
        </div>
      </div>
      <Card>
        <CardHeader>
          <CardTitle>角色列表</CardTitle>
          <CardDescription>管理系统中的角色，包括创建、编辑、删除和分配权限等操作。</CardDescription>
        </CardHeader>
        <CardContent>
          {renderRolesTable()}
        </CardContent>
      </Card>
      {/* 角色表单对话框 */}
      <RoleForm />
      {/* 权限分配对话框 */}
      <PermissionDialog />
      {/* 删除确认对话框 */}
      <DeleteConfirmationDialog />
    </div>
  );
}
</file>

<file path="front/src/app/dashboard/users/page.tsx">
'use client';
import { UserList } from '@/components/dashboard/users/user-list';
import { UserForm } from '@/components/dashboard/users/user-form';
import { RoleAssignmentDialog } from '@/components/dashboard/users/role-assignment-dialog';
import { DeleteConfirmationDialog } from '@/components/dashboard/users/delete-confirmation-dialog';
import { Separator } from '@/components/ui/separator';
export default function UsersPage() {
  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold tracking-tight">用户管理</h2>
        <p className="text-muted-foreground">
          管理系统用户，包括创建、编辑、删除用户以及分配角色
        </p>
      </div>
      <Separator />
      <UserList />
      {/* 对话框组件 */}
      <UserForm />
      <RoleAssignmentDialog />
      <DeleteConfirmationDialog />
    </div>
  );
}
</file>

<file path="front/src/app/globals.css">
@import "tailwindcss";
@plugin "tailwindcss-animate";
@custom-variant dark (&:is(.dark *));
@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}
:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.13 0.028 261.692);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.13 0.028 261.692);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.13 0.028 261.692);
  --primary: oklch(0.21 0.034 264.665);
  --primary-foreground: oklch(0.985 0.002 247.839);
  --secondary: oklch(0.967 0.003 264.542);
  --secondary-foreground: oklch(0.21 0.034 264.665);
  --muted: oklch(0.967 0.003 264.542);
  --muted-foreground: oklch(0.551 0.027 264.364);
  --accent: oklch(0.967 0.003 264.542);
  --accent-foreground: oklch(0.21 0.034 264.665);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.928 0.006 264.531);
  --input: oklch(0.928 0.006 264.531);
  --ring: oklch(0.707 0.022 261.325);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0.002 247.839);
  --sidebar-foreground: oklch(0.13 0.028 261.692);
  --sidebar-primary: oklch(0.21 0.034 264.665);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.967 0.003 264.542);
  --sidebar-accent-foreground: oklch(0.21 0.034 264.665);
  --sidebar-border: oklch(0.928 0.006 264.531);
  --sidebar-ring: oklch(0.707 0.022 261.325);
}
.dark {
  --background: oklch(0.13 0.028 261.692);
  --foreground: oklch(0.985 0.002 247.839);
  --card: oklch(0.13 0.028 261.692);
  --card-foreground: oklch(0.985 0.002 247.839);
  --popover: oklch(0.13 0.028 261.692);
  --popover-foreground: oklch(0.985 0.002 247.839);
  --primary: oklch(0.985 0.002 247.839);
  --primary-foreground: oklch(0.21 0.034 264.665);
  --secondary: oklch(0.278 0.033 256.848);
  --secondary-foreground: oklch(0.985 0.002 247.839);
  --muted: oklch(0.278 0.033 256.848);
  --muted-foreground: oklch(0.707 0.022 261.325);
  --accent: oklch(0.278 0.033 256.848);
  --accent-foreground: oklch(0.985 0.002 247.839);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.278 0.033 256.848);
  --input: oklch(0.278 0.033 256.848);
  --ring: oklch(0.446 0.03 256.802);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.21 0.034 264.665);
  --sidebar-foreground: oklch(0.985 0.002 247.839);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0.002 247.839);
  --sidebar-accent: oklch(0.278 0.033 256.848);
  --sidebar-accent-foreground: oklch(0.985 0.002 247.839);
  --sidebar-border: oklch(0.278 0.033 256.848);
  --sidebar-ring: oklch(0.446 0.03 256.802);
}
@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="front/src/app/institution/apply/page.tsx">
'use client';
import { useState } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { toast } from "sonner";
import Link from "next/link";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Captcha } from "@/components/ui/captcha";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useAuthStore } from "@/stores/auth-store";
import institutionService from "@/services/institution";  // 导入机构服务
// 定义表单验证Schema
const applySchema = z.object({
  name: z.string()
    .min(2, "机构名称至少需要2个字符")
    .max(100, "机构名称最多100个字符"),
  logo: z.string().url("请输入有效的图片URL").optional().or(z.literal("")),
  description: z.string()
    .max(500, "机构描述最多500个字符")
    .optional(),
  contactPerson: z.string()
    .min(2, "联系人姓名至少需要2个字符")
    .max(50, "联系人姓名最多50个字符"),
  contactPhone: z.string()
    .regex(/^1[3-9]\d{9}$/, "请输入有效的手机号码")
    .optional(),
  contactEmail: z.string()
    .email("请输入有效的邮箱地址"),
  address: z.string()
    .max(255, "地址最多255个字符")
    .optional(),
  captchaKey: z.string().min(1, "验证码key不能为空"),
  captchaCode: z.string().min(1, "验证码不能为空"),
});
type ApplyFormValues = z.infer<typeof applySchema>;
export default function InstitutionApplyPage() {
  const router = useRouter();
  const [captchaKey, setCaptchaKey] = useState<string>("");
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const { clearError } = useAuthStore();
  // 初始化表单
  const form = useForm<ApplyFormValues>({
    resolver: zodResolver(applySchema),
    defaultValues: {
      name: "",
      logo: "",
      description: "",
      contactPerson: "",
      contactPhone: "",
      contactEmail: "",
      address: "",
      captchaKey: "",
      captchaCode: ""
    }
  });
  // 处理验证码Key变化
  const handleCaptchaKeyChange = (newCaptchaKey: string) => {
    setCaptchaKey(newCaptchaKey);
    form.setValue("captchaKey", newCaptchaKey);
  };
  // 提交申请
  const onSubmit = async (data: ApplyFormValues) => {
    clearError();
    setIsSubmitting(true);
    try {
      // 调用API提交机构申请
      const applicationId = await institutionService.applyInstitution(data);
      toast.success("申请提交成功！");
      // 跳转到申请状态查询页面
      router.push(`/institution/status?id=${applicationId}&email=${encodeURIComponent(data.contactEmail)}`);
    } catch (error: any) {
      console.error("申请提交失败:", error);
      toast.error(error.message || "申请提交失败，请稍后重试");
    } finally {
      setIsSubmitting(false);
    }
  };
  return (
    <div className="min-h-screen bg-slate-50 dark:bg-slate-900 flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-2xl w-full">
        <Card className="bg-white dark:bg-slate-800 shadow border-none">
          <CardHeader className="space-y-1">
            <CardTitle className="text-2xl font-bold text-center text-slate-900 dark:text-slate-100">申请机构入驻</CardTitle>
            <CardDescription className="text-center text-slate-500 dark:text-slate-400">
              填写机构信息，提交申请后将等待平台审核
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                <Alert className="bg-blue-50 dark:bg-blue-950 text-blue-800 dark:text-blue-300 border-blue-200 dark:border-blue-900">
                  <AlertDescription>
                    请填写真实信息，以便我们能够及时联系您，并确保审核顺利通过。
                  </AlertDescription>
                </Alert>
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-slate-700 dark:text-slate-300">机构名称</FormLabel>
                      <FormControl>
                        <Input placeholder="请输入机构名称" {...field} className="bg-slate-50 dark:bg-slate-900" />
                      </FormControl>
                      <FormDescription className="text-slate-500 dark:text-slate-400 text-xs">
                        您的机构的官方名称
                      </FormDescription>
                      <FormMessage className="text-red-500" />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="logo"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-slate-700 dark:text-slate-300">机构LOGO地址（可选）</FormLabel>
                      <FormControl>
                        <Input placeholder="请输入图片URL地址" {...field} className="bg-slate-50 dark:bg-slate-900" />
                      </FormControl>
                      <FormDescription className="text-slate-500 dark:text-slate-400 text-xs">
                        输入公开可访问的图片URL，建议使用正方形图片
                      </FormDescription>
                      <FormMessage className="text-red-500" />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-slate-700 dark:text-slate-300">机构描述（可选）</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="请输入机构介绍"
                          className="min-h-[100px] bg-slate-50 dark:bg-slate-900"
                          {...field}
                        />
                      </FormControl>
                      <FormDescription className="text-slate-500 dark:text-slate-400 text-xs">
                        简要介绍您的机构背景、专业领域等信息
                      </FormDescription>
                      <FormMessage className="text-red-500" />
                    </FormItem>
                  )}
                />
                <div className="grid md:grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="contactPerson"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-slate-700 dark:text-slate-300">联系人</FormLabel>
                        <FormControl>
                          <Input placeholder="请输入联系人姓名" {...field} className="bg-slate-50 dark:bg-slate-900" />
                        </FormControl>
                        <FormMessage className="text-red-500" />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="contactPhone"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-slate-700 dark:text-slate-300">联系电话（可选）</FormLabel>
                        <FormControl>
                          <Input placeholder="请输入联系电话" {...field} className="bg-slate-50 dark:bg-slate-900" />
                        </FormControl>
                        <FormMessage className="text-red-500" />
                      </FormItem>
                    )}
                  />
                </div>
                <FormField
                  control={form.control}
                  name="contactEmail"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-slate-700 dark:text-slate-300">联系邮箱</FormLabel>
                      <FormControl>
                        <Input placeholder="请输入邮箱地址" {...field} className="bg-slate-50 dark:bg-slate-900" />
                      </FormControl>
                      <FormDescription className="text-slate-500 dark:text-slate-400 text-xs">
                        审核结果将发送到此邮箱
                      </FormDescription>
                      <FormMessage className="text-red-500" />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="address"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-slate-700 dark:text-slate-300">机构地址（可选）</FormLabel>
                      <FormControl>
                        <Input placeholder="请输入机构地址" {...field} className="bg-slate-50 dark:bg-slate-900" />
                      </FormControl>
                      <FormMessage className="text-red-500" />
                    </FormItem>
                  )}
                />
                <FormField
                  control={form.control}
                  name="captchaCode"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel className="text-slate-700 dark:text-slate-300">验证码</FormLabel>
                      <div className="flex items-center gap-2">
                        <FormControl>
                          <Input placeholder="请输入验证码" {...field} className="bg-slate-50 dark:bg-slate-900" />
                        </FormControl>
                        <Captcha onCaptchaKeyChange={handleCaptchaKeyChange} />
                      </div>
                      <FormMessage className="text-red-500" />
                    </FormItem>
                  )}
                />
                <div className="flex flex-col gap-4 pt-2">
                  <Button type="submit" disabled={isSubmitting} className="w-full">
                    {isSubmitting ? "提交中..." : "提交申请"}
                  </Button>
                  <Button type="button" variant="outline" asChild className="w-full">
                    <Link href="/institution">返回</Link>
                  </Button>
                </div>
              </form>
            </Form>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/institution/page.tsx">
'use client';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import Link from "next/link";
export default function InstitutionPage() {
  return (
    <div className="min-h-screen bg-slate-50 dark:bg-slate-900 flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl w-full space-y-8">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-slate-900 dark:text-slate-100">机构中心</h1>
          <p className="mt-2 text-sm text-slate-600 dark:text-slate-400">
            欢迎来到机构中心，您可以申请机构入驻或注册机构账号
          </p>
        </div>
        <div className="grid md:grid-cols-2 gap-6">
          <Card className="bg-white dark:bg-slate-800 shadow hover:shadow-md transition-shadow border-none">
            <CardHeader className="pb-3">
              <CardTitle className="text-xl text-slate-900 dark:text-slate-100">申请机构入驻</CardTitle>
              <CardDescription className="text-slate-500 dark:text-slate-400">
                成为我们认证的机构，发布优质课程并获得更多曝光
              </CardDescription>
            </CardHeader>
            <CardContent className="text-slate-600 dark:text-slate-300 pt-0">
              <p className="text-sm">
                填写机构资料并提交审核，平台将在1-3个工作日内完成审核。
                审核通过后，您将获得机构注册码，用于注册机构管理员账号。
              </p>
            </CardContent>
            <CardFooter>
              <Button asChild className="w-full">
                <Link href="/institution/apply">立即申请</Link>
              </Button>
            </CardFooter>
          </Card>
          <Card className="bg-white dark:bg-slate-800 shadow hover:shadow-md transition-shadow border-none">
            <CardHeader className="pb-3">
              <CardTitle className="text-xl text-slate-900 dark:text-slate-100">机构用户注册</CardTitle>
              <CardDescription className="text-slate-500 dark:text-slate-400">
                使用机构注册码注册机构管理员或教师账号
              </CardDescription>
            </CardHeader>
            <CardContent className="text-slate-600 dark:text-slate-300 pt-0">
              <p className="text-sm">
                如果您已获得机构的注册码，可以直接注册成为该机构的用户。
                机构管理员可以管理课程、学员等资源，并邀请更多教师加入。
              </p>
            </CardContent>
            <CardFooter>
              <Button asChild variant="outline" className="w-full">
                <Link href="/institution/register">立即注册</Link>
              </Button>
            </CardFooter>
          </Card>
        </div>
        <div className="mt-10 bg-white dark:bg-slate-800 p-8 rounded-lg shadow text-center">
          <h2 className="text-xl font-bold text-slate-900 dark:text-slate-100 mb-4">已提交申请?</h2>
          <p className="mb-6 text-slate-600 dark:text-slate-300 text-sm">
            查询您的申请状态，了解审核进度
          </p>
          <Button asChild variant="secondary">
            <Link href="/institution/status">查询申请状态</Link>
          </Button>
        </div>
        <div className="mt-8 pt-6 border-t border-slate-200 dark:border-slate-700 text-center">
          <Link href="/" className="text-primary hover:underline text-sm">
            返回首页
          </Link>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/institution/register/page.tsx">
'use client';
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { toast } from "sonner";
import Link from "next/link";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Captcha } from "@/components/ui/captcha";
import { useAuthStore } from "@/stores/auth-store";
import institutionAuthService from "@/services/institutionAuth";  // 导入机构认证服务
// 定义表单验证Schema
const registerSchema = z.object({
  username: z.string()
    .min(4, "用户名至少需要4个字符")
    .max(20, "用户名最多20个字符")
    .regex(/^[a-zA-Z0-9_]+$/, "用户名只能包含字母、数字和下划线"),
  password: z.string()
    .min(6, "密码至少需要6个字符")
    .max(20, "密码最多20个字符"),
  confirmPassword: z.string(),
  email: z.string().email("请输入有效的邮箱地址"),
  phone: z.string().regex(/^1[3-9]\d{9}$/, "请输入有效的手机号码").optional(),
  institutionCode: z.string().min(1, "机构注册码不能为空"),
  captchaKey: z.string().min(1, "验证码key不能为空"),
  captchaCode: z.string().min(1, "验证码不能为空"),
  emailCode: z.string().length(6, "邮箱验证码必须是6位数字"),
}).refine(data => data.password === data.confirmPassword, {
  message: "两次输入的密码不一致",
  path: ["confirmPassword"]
});
type RegisterFormValues = z.infer<typeof registerSchema>;
export default function InstitutionRegisterPage() {
  const router = useRouter();
  const [captchaKey, setCaptchaKey] = useState<string>("");
  const [emailCaptchaKey, setEmailCaptchaKey] = useState<string>("");
  const [activeTab, setActiveTab] = useState<string>("basic-info");
  const [countdown, setCountdown] = useState<number>(0);
  const [isEmailVerified, setIsEmailVerified] = useState<boolean>(false);
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [isEmailSubmitting, setIsEmailSubmitting] = useState<boolean>(false);
  const { clearError, sendEmailVerificationCode } = useAuthStore();
  // 初始化表单
  const form = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      username: "",
      password: "",
      confirmPassword: "",
      email: "",
      phone: "",
      institutionCode: "",
      captchaKey: "",
      captchaCode: "",
      emailCode: "",
    }
  });
  // 处理验证码Key变化
  const handleCaptchaKeyChange = (newCaptchaKey: string) => {
    setCaptchaKey(newCaptchaKey);
    form.setValue("captchaKey", newCaptchaKey);
  };
  // 发送邮箱验证码
  const onSendEmailCode = async () => {
    clearError();
    const email = form.getValues("email");
    const captchaCode = form.getValues("captchaCode");
    // 验证邮箱和验证码
    const emailResult = z.string().email("请输入有效的邮箱地址").safeParse(email);
    const captchaResult = z.string().min(1, "验证码不能为空").safeParse(captchaCode);
    if (!emailResult.success) {
      form.setError("email", { message: emailResult.error.errors[0].message });
      return;
    }
    if (!captchaResult.success) {
      form.setError("captchaCode", { message: captchaResult.error.errors[0].message });
      return;
    }
    // 确保验证码Key存在
    if (!captchaKey) {
      console.error("验证码Key不存在，重新获取验证码");
      toast.error("验证码已失效，请点击验证码图片刷新");
      return;
    }
    setIsEmailSubmitting(true);
    try {
      await sendEmailVerificationCode({
        email,
        captchaCode,
        captchaKey,
      });
      // 保存用于验证的captchaKey
      setEmailCaptchaKey(captchaKey);
      toast.success("验证码已发送到您的邮箱，请查收");
      setCountdown(60); // 设置60秒倒计时
    } catch (error: any) {
      console.error("发送邮箱验证码失败：", error);
      if (error.message?.includes("验证码")) {
        toast.error("验证码错误，请重新输入");
      } else {
        toast.error(error.message || "发送验证码失败，请重试");
      }
    } finally {
      setIsEmailSubmitting(false);
    }
  };
  // 提交基本信息
  const onBasicInfoSubmit = () => {
    const basicFields = ["username", "password", "confirmPassword", "institutionCode"];
    const hasErrors = basicFields.some(field => !!form.formState.errors[field as keyof RegisterFormValues]);
    if (hasErrors) {
      return;
    }
    setActiveTab("email-verify");
  };
  // 验证邮箱
  const onVerifyEmail = async () => {
    clearError();
    const emailCode = form.getValues("emailCode");
    if (!emailCode || emailCode.length !== 6) {
      form.setError("emailCode", { message: "请输入6位数字验证码" });
      return;
    }
    setIsEmailVerified(true);
    toast.success("邮箱验证成功");
    setActiveTab("submit");
  };
  // 最终提交注册
  const onSubmit = async (data: RegisterFormValues) => {
    clearError();
    setIsSubmitting(true);
    console.log("准备提交机构用户注册请求:", {
      username: data.username,
      email: data.email,
      institutionCode: data.institutionCode,
      captchaKey: data.captchaKey,
      // 不输出密码信息
    });
    try {
      // 调用API注册机构用户
      await institutionAuthService.register(data);
      console.log("注册请求成功发送");
      toast.success("注册成功！");
      // 跳转到登录页面
      router.push("/login");
    } catch (error: any) {
      console.error("注册失败:", error);
      // 输出更详细的错误信息
      if (error.code) {
        console.error(`错误代码: ${error.code}, 错误信息: ${error.message}`);
      }
      if (error.errors) {
        console.error("字段错误:", error.errors);
      }
      toast.error(error.message || "注册失败，请稍后重试");
    } finally {
      setIsSubmitting(false);
    }
  };
  // 倒计时效果
  useEffect(() => {
    if (countdown > 0) {
      const timer = setInterval(() => {
        setCountdown(prev => prev - 1);
      }, 1000);
      return () => clearInterval(timer);
    }
  }, [countdown]);
  return (
    <div className="min-h-screen bg-slate-50 dark:bg-slate-900 flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-lg w-full">
        <Card className="bg-white dark:bg-slate-800 shadow border-none">
          <CardHeader className="space-y-1">
            <CardTitle className="text-2xl font-bold text-center text-slate-900 dark:text-slate-100">机构用户注册</CardTitle>
            <CardDescription className="text-center text-slate-500 dark:text-slate-400">
              使用机构注册码注册成为机构管理员或教师
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              <TabsList className="grid w-full grid-cols-3 mb-6">
                <TabsTrigger 
                  value="basic-info" 
                  className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
                >
                  基本信息
                </TabsTrigger>
                <TabsTrigger 
                  value="email-verify" 
                  disabled={form.formState.errors.username || form.formState.errors.password || form.formState.errors.confirmPassword || form.formState.errors.institutionCode}
                  className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
                >
                  邮箱验证
                </TabsTrigger>
                <TabsTrigger 
                  value="submit" 
                  disabled={!isEmailVerified}
                  className="data-[state=active]:bg-primary data-[state=active]:text-primary-foreground"
                >
                  提交注册
                </TabsTrigger>
              </TabsList>
              <Form {...form}>
                <TabsContent value="basic-info">
                  <div className="space-y-4 mt-4">
                    <Alert className="bg-blue-50 dark:bg-blue-950 text-blue-800 dark:text-blue-300 border-blue-200 dark:border-blue-900">
                      <AlertDescription>
                        请填写基本信息，点击下一步进行邮箱验证
                      </AlertDescription>
                    </Alert>
                    <FormField
                      control={form.control}
                      name="username"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">用户名</FormLabel>
                          <FormControl>
                            <Input placeholder="请输入用户名" {...field} className="bg-slate-50 dark:bg-slate-900" />
                          </FormControl>
                          <FormDescription className="text-slate-500 dark:text-slate-400 text-xs">
                            用户名将用于登录，仅支持字母、数字和下划线
                          </FormDescription>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="password"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">密码</FormLabel>
                          <FormControl>
                            <Input type="password" placeholder="请输入密码" {...field} className="bg-slate-50 dark:bg-slate-900" />
                          </FormControl>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="confirmPassword"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">确认密码</FormLabel>
                          <FormControl>
                            <Input type="password" placeholder="请再次输入密码" {...field} className="bg-slate-50 dark:bg-slate-900" />
                          </FormControl>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="institutionCode"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">机构注册码</FormLabel>
                          <FormControl>
                            <Input placeholder="请输入机构注册码" {...field} className="bg-slate-50 dark:bg-slate-900" />
                          </FormControl>
                          <FormDescription className="text-slate-500 dark:text-slate-400 text-xs">
                            注册码在机构申请审核通过后通过邮件发送
                          </FormDescription>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <div className="pt-4 flex justify-between">
                      <Button type="button" variant="outline" asChild>
                        <Link href="/institution">返回</Link>
                      </Button>
                      <Button type="button" onClick={onBasicInfoSubmit}>
                        下一步
                      </Button>
                    </div>
                  </div>
                </TabsContent>
                <TabsContent value="email-verify">
                  <div className="space-y-4 mt-4">
                    <Alert className="bg-blue-50 dark:bg-blue-950 text-blue-800 dark:text-blue-300 border-blue-200 dark:border-blue-900">
                      <AlertDescription>
                        请提供您的电子邮箱并完成验证
                      </AlertDescription>
                    </Alert>
                    <FormField
                      control={form.control}
                      name="email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">电子邮箱</FormLabel>
                          <FormControl>
                            <Input type="email" placeholder="请输入邮箱地址" {...field} className="bg-slate-50 dark:bg-slate-900" />
                          </FormControl>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="phone"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">手机号码（可选）</FormLabel>
                          <FormControl>
                            <Input placeholder="请输入手机号码" {...field} className="bg-slate-50 dark:bg-slate-900" />
                          </FormControl>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="captchaCode"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">图形验证码</FormLabel>
                          <div className="flex items-center gap-2">
                            <FormControl>
                              <Input placeholder="请输入验证码" {...field} className="bg-slate-50 dark:bg-slate-900" />
                            </FormControl>
                            <Captcha onCaptchaKeyChange={handleCaptchaKeyChange} />
                          </div>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="emailCode"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel className="text-slate-700 dark:text-slate-300">邮箱验证码</FormLabel>
                          <div className="flex items-center gap-2">
                            <FormControl>
                              <Input placeholder="请输入邮箱验证码" {...field} className="bg-slate-50 dark:bg-slate-900" />
                            </FormControl>
                            <Button 
                              type="button" 
                              variant="outline" 
                              onClick={onSendEmailCode}
                              disabled={countdown > 0 || isEmailSubmitting}
                              className="whitespace-nowrap"
                            >
                              {isEmailSubmitting ? "发送中..." : countdown > 0 ? `${countdown}秒后重发` : "发送验证码"}
                            </Button>
                          </div>
                          <FormMessage className="text-red-500" />
                        </FormItem>
                      )}
                    />
                    <div className="pt-4 flex justify-between">
                      <Button type="button" onClick={() => setActiveTab("basic-info")} variant="outline">
                        返回上一步
                      </Button>
                      <Button type="button" onClick={onVerifyEmail} disabled={!form.getValues("emailCode")}>
                        验证邮箱
                      </Button>
                    </div>
                  </div>
                </TabsContent>
                <TabsContent value="submit">
                  <div className="space-y-4 mt-4">
                    <Alert className="bg-green-50 dark:bg-green-950 text-green-800 dark:text-green-300 border-green-200 dark:border-green-900">
                      <AlertDescription>
                        请确认以下信息无误，点击"提交注册"完成注册
                      </AlertDescription>
                    </Alert>
                    <div className="border border-slate-200 dark:border-slate-700 rounded-md p-4 space-y-3">
                      <div className="grid grid-cols-2 gap-2">
                        <div>
                          <p className="text-sm text-slate-500 dark:text-slate-400">用户名</p>
                          <p className="font-medium text-slate-900 dark:text-slate-100">{form.getValues("username")}</p>
                        </div>
                        <div>
                          <p className="text-sm text-slate-500 dark:text-slate-400">电子邮箱</p>
                          <p className="font-medium text-slate-900 dark:text-slate-100">{form.getValues("email")}</p>
                        </div>
                        {form.getValues("phone") && (
                          <div>
                            <p className="text-sm text-slate-500 dark:text-slate-400">手机号码</p>
                            <p className="font-medium text-slate-900 dark:text-slate-100">{form.getValues("phone")}</p>
                          </div>
                        )}
                        <div>
                          <p className="text-sm text-slate-500 dark:text-slate-400">机构注册码</p>
                          <p className="font-medium text-slate-900 dark:text-slate-100">{form.getValues("institutionCode")}</p>
                        </div>
                      </div>
                    </div>
                    <div className="border border-slate-200 dark:border-slate-700 rounded-md p-4">
                      <p className="text-sm font-medium text-slate-900 dark:text-slate-100 mb-2">验证码确认</p>
                      <p className="text-xs text-slate-500 dark:text-slate-400 mb-3">
                        为确保注册成功，请在提交前刷新验证码
                      </p>
                      <div className="flex items-center gap-2">
                        <Input 
                          placeholder="请输入验证码" 
                          defaultValue={form.getValues("captchaCode")}
                          onChange={(e) => form.setValue("captchaCode", e.target.value, { shouldValidate: true })}
                          className="bg-slate-50 dark:bg-slate-900 w-32" 
                        />
                        <Captcha onCaptchaKeyChange={handleCaptchaKeyChange} />
                      </div>
                    </div>
                    <div className="pt-4 flex justify-between">
                      <Button type="button" onClick={() => setActiveTab("email-verify")} variant="outline">
                        返回上一步
                      </Button>
                      <Button type="button" onClick={form.handleSubmit(onSubmit)} disabled={isSubmitting}>
                        {isSubmitting ? "注册中..." : "提交注册"}
                      </Button>
                    </div>
                  </div>
                </TabsContent>
              </Form>
            </Tabs>
          </CardContent>
          <CardFooter className="flex justify-center border-t border-slate-200 dark:border-slate-700 pt-4">
            <p className="text-sm text-slate-500 dark:text-slate-400">
              已有账号？{" "}
              <Link href="/login" className="text-primary hover:underline">
                立即登录
              </Link>
            </p>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/institution/status/page.tsx">
'use client';
import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { toast } from "sonner";
import Link from "next/link";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import institutionService from "@/services/institution";  // 导入机构服务
// 定义表单验证Schema
const querySchema = z.object({
  applicationId: z.string().min(1, "申请ID不能为空"),
  email: z.string().email("请输入有效的邮箱地址"),
});
// 定义申请状态类型
const statusMap = {
  0: { label: "待审核", color: "bg-yellow-100 text-yellow-800 border-yellow-200" },
  1: { label: "已通过", color: "bg-green-100 text-green-800 border-green-200" },
  2: { label: "已拒绝", color: "bg-red-100 text-red-800 border-red-200" },
};
// 模拟申请数据类型
interface ApplicationData {
  applicationId: string;
  name: string;
  contactPerson: string;
  contactEmail: string;
  contactPhone: string | null;
  status: 0 | 1 | 2;
  createdAt: string;
  reviewComment?: string;
  reviewedAt?: string;
}
export default function InstitutionStatusPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [application, setApplication] = useState<ApplicationData | null>(null);
  const [isSearch, setIsSearch] = useState<boolean>(false);
  // 从URL参数获取
  const applicationId = searchParams.get("id");
  const email = searchParams.get("email");
  // 初始化表单
  const form = useForm<z.infer<typeof querySchema>>({
    resolver: zodResolver(querySchema),
    defaultValues: {
      applicationId: applicationId || "",
      email: email || "",
    },
  });
  // 如果有URL参数，自动查询
  useEffect(() => {
    if (applicationId && email) {
      fetchApplication(applicationId, email);
    }
  }, [applicationId, email]);
  // 查询申请状态
  const onSubmit = async (data: z.infer<typeof querySchema>) => {
    fetchApplication(data.applicationId, data.email);
  };
  // 获取申请状态
  const fetchApplication = async (applicationId: string, email: string) => {
    setIsLoading(true);
    setIsSearch(true);
    try {
      // 调用API查询申请状态
      const application = await institutionService.getApplicationStatus(applicationId, email);
      setApplication(application);
      if (application.status === 1) {
        toast.success("恭喜！您的申请已通过审核");
      } else if (application.status === 2) {
        toast.error("抱歉，您的申请未通过审核");
      }
    } catch (error: any) {
      console.error("查询失败:", error);
      toast.error(error.message || "查询失败，请稍后重试");
      setApplication(null);
    } finally {
      setIsLoading(false);
    }
  };
  return (
    <div className="min-h-screen bg-slate-50 dark:bg-slate-900 flex flex-col items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-2xl w-full">
        <Card className="bg-white dark:bg-slate-800 shadow border-none">
          <CardHeader className="space-y-1">
            <CardTitle className="text-2xl font-bold text-center text-slate-900 dark:text-slate-100">申请状态查询</CardTitle>
            <CardDescription className="text-center text-slate-500 dark:text-slate-400">
              查询机构入驻申请的审核状态
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                <div className="grid md:grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name="applicationId"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-slate-700 dark:text-slate-300">申请ID</FormLabel>
                        <FormControl>
                          <Input placeholder="请输入申请ID" {...field} className="bg-slate-50 dark:bg-slate-900" />
                        </FormControl>
                        <FormMessage className="text-red-500" />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel className="text-slate-700 dark:text-slate-300">联系邮箱</FormLabel>
                        <FormControl>
                          <Input placeholder="请输入申请时使用的邮箱" {...field} className="bg-slate-50 dark:bg-slate-900" />
                        </FormControl>
                        <FormMessage className="text-red-500" />
                      </FormItem>
                    )}
                  />
                </div>
                <div className="flex justify-between gap-4">
                  <Button type="submit" disabled={isLoading}>
                    {isLoading ? "查询中..." : "查询申请状态"}
                  </Button>
                  <Button type="button" variant="outline" asChild>
                    <Link href="/institution">返回</Link>
                  </Button>
                </div>
              </form>
            </Form>
            {isLoading && (
              <div className="mt-8 space-y-4">
                <Skeleton className="h-8 w-full" />
                <Skeleton className="h-20 w-full" />
                <Skeleton className="h-16 w-full" />
              </div>
            )}
            {!isLoading && isSearch && application && (
              <div className="mt-8 space-y-6 border border-slate-200 dark:border-slate-700 rounded-lg p-6">
                <div className="flex justify-between items-center">
                  <h3 className="text-xl font-bold text-slate-900 dark:text-slate-100">{application.name}</h3>
                  <Badge className={`${statusMap[application.status].color} border`}>
                    {statusMap[application.status].label}
                  </Badge>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-slate-500 dark:text-slate-400">申请ID</p>
                    <p className="font-medium text-slate-900 dark:text-slate-100">{application.applicationId}</p>
                  </div>
                  <div>
                    <p className="text-sm text-slate-500 dark:text-slate-400">联系人</p>
                    <p className="font-medium text-slate-900 dark:text-slate-100">{application.contactPerson}</p>
                  </div>
                  <div>
                    <p className="text-sm text-slate-500 dark:text-slate-400">联系邮箱</p>
                    <p className="font-medium text-slate-900 dark:text-slate-100">{application.contactEmail}</p>
                  </div>
                  <div>
                    <p className="text-sm text-slate-500 dark:text-slate-400">联系电话</p>
                    <p className="font-medium text-slate-900 dark:text-slate-100">{application.contactPhone || '-'}</p>
                  </div>
                  <div>
                    <p className="text-sm text-slate-500 dark:text-slate-400">申请时间</p>
                    <p className="font-medium text-slate-900 dark:text-slate-100">{new Date(application.createdAt).toLocaleString()}</p>
                  </div>
                  {application.reviewedAt && (
                    <div>
                      <p className="text-sm text-slate-500 dark:text-slate-400">审核时间</p>
                      <p className="font-medium text-slate-900 dark:text-slate-100">{new Date(application.reviewedAt).toLocaleString()}</p>
                    </div>
                  )}
                </div>
                {application.status === 1 && (
                  <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-md border border-green-200 dark:border-green-900">
                    <p className="font-medium text-green-800 dark:text-green-300">恭喜！您的机构申请已通过审核</p>
                    <p className="text-green-700 dark:text-green-400 mt-1 text-sm">请使用审核通过邮件中的机构注册码注册机构管理员账号。</p>
                    <div className="mt-4">
                      <Button asChild size="sm" className="bg-green-600 hover:bg-green-700">
                        <Link href="/institution/register">前往注册机构账号</Link>
                      </Button>
                    </div>
                  </div>
                )}
                {application.status === 2 && application.reviewComment && (
                  <div className="bg-red-50 dark:bg-red-900/20 p-4 rounded-md border border-red-200 dark:border-red-900">
                    <p className="font-medium text-red-800 dark:text-red-300">申请被拒绝</p>
                    <p className="text-red-700 dark:text-red-400 mt-1 text-sm">拒绝原因：{application.reviewComment}</p>
                    <div className="mt-4">
                      <Button asChild size="sm" variant="outline" className="border-red-300 text-red-700 hover:bg-red-50 dark:border-red-800 dark:text-red-300 dark:hover:bg-red-900/30">
                        <Link href="/institution/apply">重新申请</Link>
                      </Button>
                    </div>
                  </div>
                )}
                {application.status === 0 && (
                  <div className="bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-md border border-yellow-200 dark:border-yellow-900">
                    <p className="font-medium text-yellow-800 dark:text-yellow-300">您的申请正在审核中</p>
                    <p className="text-yellow-700 dark:text-yellow-400 mt-1 text-sm">我们会在1-3个工作日内完成审核，审核结果将发送到您的邮箱。</p>
                  </div>
                )}
              </div>
            )}
            {!isLoading && isSearch && !application && (
              <div className="mt-8 bg-red-50 dark:bg-red-900/20 p-4 rounded-md border border-red-200 dark:border-red-900">
                <p className="font-medium text-red-800 dark:text-red-300">未找到申请记录</p>
                <p className="text-red-700 dark:text-red-400 mt-1 text-sm">请检查申请ID和邮箱是否正确，或联系客服寻求帮助。</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="front/src/app/layout.tsx">
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import { Toaster } from "@/components/ui/sonner";
import "./globals.css";
import ThemeProvider from "@/components/providers/theme-provider";
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});
const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});
export const metadata: Metadata = {
  title: "在线课程平台",
  description: "现代化的在线教育平台，提供优质课程和学习体验",
};
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="zh-CN" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased min-h-screen`}
      >
        <ThemeProvider>
          {children}
          <Toaster />
        </ThemeProvider>
      </body>
    </html>
  );
}
</file>

<file path="front/src/app/page.tsx">
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
export default function HomePage() {
  return (
    <div className="min-h-screen flex flex-col">
      {/* 导航栏 */}
      <header className="border-b bg-background">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="mr-2 text-primary"
            >
              <path d="M22 2 11 13"></path>
              <path d="m22 2-7 20-4-9-9-4 20-7z"></path>
            </svg>
            <span className="text-xl font-semibold">在线课程平台</span>
          </div>
          <div className="flex gap-4 items-center">
            <nav className="hidden md:flex mr-6">
              <ul className="flex space-x-6">
                <li>
                  <Link href="/courses" className="text-muted-foreground hover:text-primary">
                    课程
                  </Link>
                </li>
                <li>
                  <Link href="/institution" className="text-muted-foreground hover:text-primary">
                    机构中心
                  </Link>
                </li>
                <li>
                  <Link href="/about" className="text-muted-foreground hover:text-primary">
                    关于我们
                  </Link>
                </li>
              </ul>
            </nav>
            <Button variant="outline" asChild>
              <Link href="/login">登录</Link>
            </Button>
            <Button asChild>
              <Link href="/register">注册</Link>
            </Button>
          </div>
        </div>
      </header>
      {/* 英雄区域 */}
      <section className="bg-primary text-primary-foreground py-20">
        <div className="container mx-auto px-4 text-center">
          <h1 className="text-4xl md:text-5xl font-bold mb-6">提升技能，开启未来</h1>
          <p className="text-xl mb-8 max-w-2xl mx-auto">
            我们的在线课程平台提供高质量的学习内容，帮助您掌握最前沿的技能和知识
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Button size="lg" asChild>
              <Link href="/courses">浏览课程</Link>
            </Button>
            <Button size="lg" variant="outline" className="bg-primary/10 text-primary-foreground hover:bg-primary/20" asChild>
              <Link href="/institution">机构入驻</Link>
            </Button>
          </div>
        </div>
      </section>
      {/* 特色区域 */}
      <section className="py-16">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-12">为什么选择我们</h2>
          <div className="grid md:grid-cols-3 gap-8">
            {[
              {
                title: '高质量内容',
                description: '由行业专家精心打造的课程内容，确保学习效果',
                icon: (
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-primary">
                    <path d="m12 3-1.912 5.813a2 2 0 0 1-1.275 1.275L3 12l5.813 1.912a2 2 0 0 1 1.275 1.275L12 21l1.912-5.813a2 2 0 0 1 1.275-1.275L21 12l-5.813-1.912a2 2 0 0 1-1.275-1.275L12 3Z" />
                  </svg>
                ),
              },
              {
                title: '灵活学习',
                description: '随时随地学习，按照自己的节奏掌握新技能',
                icon: (
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-primary">
                    <path d="M12 22a10 10 0 1 0 0-20 10 10 0 0 0 0 20Z" />
                    <path d="M10 2v2" />
                    <path d="M18 12h2" />
                    <path d="M12 18v2" />
                    <path d="M4 12H2" />
                    <path d="M12 6v6l4 2" />
                  </svg>
                ),
              },
              {
                title: '专业支持',
                description: '遇到问题随时可获得讲师和社区的专业支持',
                icon: (
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-primary">
                    <path d="M21 12a9 9 0 0 1-9 9 9 9 0 0 1-9-9 9 9 0 0 1 9-9 9 9 0 0 1 9 9z" />
                    <path d="M12 16v-3" />
                    <path d="M12 8h.01" />
                  </svg>
                ),
              },
            ].map((feature, i) => (
              <Card key={i}>
                <CardContent className="text-center p-6">
                  <div className="h-12 w-12 mx-auto mb-4 flex items-center justify-center rounded-full bg-primary/10">
                    {feature.icon}
                  </div>
                  <h3 className="text-xl font-semibold mb-2">{feature.title}</h3>
                  <p className="text-muted-foreground">{feature.description}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>
      {/* 热门课程 */}
      <section className="py-16 bg-muted/30">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-12">热门课程</h2>
          <div className="grid md:grid-cols-3 gap-8">
            {[
              {
                title: 'Web前端开发',
                description: '掌握HTML、CSS、JavaScript和现代前端框架',
                image: 'https://source.unsplash.com/random/300x200?web',
              },
              {
                title: '数据科学入门',
                description: '学习数据分析、可视化和机器学习基础',
                image: 'https://source.unsplash.com/random/300x200?data',
              },
              {
                title: '移动应用开发',
                description: '创建跨平台移动应用的技能和最佳实践',
                image: 'https://source.unsplash.com/random/300x200?mobile',
              },
            ].map((course, i) => (
              <Card key={i} className="overflow-hidden">
                <div className="h-48 bg-muted relative">
                  <div className="absolute inset-0 flex items-center justify-center bg-primary/10">
                    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1" strokeLinecap="round" strokeLinejoin="round" className="text-muted-foreground">
                      <rect width="18" height="18" x="3" y="3" rx="2" />
                      <path d="M7 3v18" />
                      <path d="M3 7h18" />
                    </svg>
                  </div>
                </div>
                <CardContent className="p-6">
                  <h3 className="text-xl font-semibold mb-2">{course.title}</h3>
                  <p className="text-muted-foreground mb-4">{course.description}</p>
                  <Button variant="outline" className="w-full" asChild>
                    <Link href="/courses">查看详情</Link>
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>
          <div className="text-center mt-10">
            <Button variant="outline" size="lg" asChild>
              <Link href="/courses">查看全部课程</Link>
            </Button>
          </div>
        </div>
      </section>
      {/* 底部 */}
      <footer className="py-12 bg-muted">
        <div className="container mx-auto px-4">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="flex items-center mb-6 md:mb-0">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="mr-2 text-primary"
              >
                <path d="M22 2 11 13"></path>
                <path d="m22 2-7 20-4-9-9-4 20-7z"></path>
              </svg>
              <span className="text-xl font-semibold">在线课程平台</span>
            </div>
            <div className="flex gap-6">
              <Link href="/about" className="hover:text-primary">关于我们</Link>
              <Link href="/contact" className="hover:text-primary">联系我们</Link>
              <Link href="/privacy" className="hover:text-primary">隐私政策</Link>
              <Link href="/terms" className="hover:text-primary">服务条款</Link>
            </div>
          </div>
          <div className="mt-8 text-center text-muted-foreground">
            <p>© {new Date().getFullYear()} 在线课程平台. 保留所有权利.</p>
          </div>
        </div>
      </footer>
    </div>
  );
}
</file>

<file path="front/src/components/dashboard/header.tsx">
'use client';
import { useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { useAuthStore } from '@/stores/auth-store';
import { useUIStore } from '@/stores/ui-store';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Menu, User, Settings, LogOut, Sun, Moon, Monitor } from 'lucide-react';
export default function Header() {
  const router = useRouter();
  const { user, logout } = useAuthStore();
  const { sidebarOpen, setSidebarOpen, theme, setTheme } = useUIStore();
  const [isLoggingOut, setIsLoggingOut] = useState(false);
  // 获取用户名首字母（用于头像）
  const getUserInitials = () => {
    if (!user || !user.username) return '用';
    return user.username.charAt(0).toUpperCase();
  };
  // 登出处理
  const handleLogout = async () => {
    setIsLoggingOut(true);
    try {
      await logout();
      toast.success('已成功登出');
      router.push('/login');
    } catch (error) {
      toast.error('登出时发生错误');
    } finally {
      setIsLoggingOut(false);
    }
  };
  return (
    <header className="sticky top-0 z-30 flex h-16 items-center justify-between border-b bg-background px-4 md:px-6">
      {/* 移动端菜单按钮 */}
      <Button
        variant="ghost"
        size="icon"
        className="md:hidden"
        onClick={() => setSidebarOpen(!sidebarOpen)}
      >
        <Menu className="h-5 w-5" />
        <span className="sr-only">切换菜单</span>
      </Button>
      {/* 页面标题（仅桌面端显示） */}
      <div className="hidden md:block">
        <h1 className="text-lg font-medium">仪表盘</h1>
      </div>
      {/* 右侧工具栏 */}
      <div className="flex items-center gap-4">
        {/* 主题切换 */}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon">
              {theme === 'light' && <Sun className="h-[1.2rem] w-[1.2rem]" />}
              {theme === 'dark' && <Moon className="h-[1.2rem] w-[1.2rem]" />}
              {theme === 'system' && <Monitor className="h-[1.2rem] w-[1.2rem]" />}
              <span className="sr-only">切换主题</span>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={() => setTheme('light')}>
              <Sun className="mr-2 h-4 w-4" />
              <span>亮色</span>
            </DropdownMenuItem>
            <DropdownMenuItem onClick={() => setTheme('dark')}>
              <Moon className="mr-2 h-4 w-4" />
              <span>暗色</span>
            </DropdownMenuItem>
            <DropdownMenuItem onClick={() => setTheme('system')}>
              <Monitor className="mr-2 h-4 w-4" />
              <span>系统</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
        {/* 用户菜单 */}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon" className="rounded-full">
              <Avatar>
                <AvatarImage src={user?.avatar} alt={user?.username || '用户'} />
                <AvatarFallback>{getUserInitials()}</AvatarFallback>
              </Avatar>
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>
              <div className="flex flex-col">
                <span>{user?.username || '用户'}</span>
                <span className="text-xs text-muted-foreground">{user?.email}</span>
              </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem asChild>
              <Link href="/dashboard/profile">
                <User className="mr-2 h-4 w-4" />
                <span>个人资料</span>
              </Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <Link href="/dashboard/settings">
                <Settings className="mr-2 h-4 w-4" />
                <span>设置</span>
              </Link>
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem
              disabled={isLoggingOut}
              onClick={handleLogout}
              className="text-destructive focus:text-destructive"
            >
              <LogOut className="mr-2 h-4 w-4" />
              <span>{isLoggingOut ? '登出中...' : '登出'}</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
    </header>
  );
}
</file>

<file path="front/src/components/dashboard/permissions/delete-confirmation-dialog.tsx">
'use client';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { usePermissionStore } from '@/stores/permission-store';
interface DeleteConfirmationDialogProps {
  mode: 'single' | 'batch';
  id?: number;
}
export function DeleteConfirmationDialog({ mode, id }: DeleteConfirmationDialogProps) {
  const { 
    confirmDialogVisible, 
    setConfirmDialogVisible,
    deletePermission,
    batchDeletePermissions,
    selectedIds,
    isLoading
  } = usePermissionStore();
  const handleConfirm = async () => {
    if (mode === 'single' && id) {
      await deletePermission(id);
    } else if (mode === 'batch' && selectedIds.length > 0) {
      await batchDeletePermissions(selectedIds);
    }
    setConfirmDialogVisible(false);
  };
  const title = mode === 'single' ? '删除权限' : '批量删除权限';
  const description = mode === 'single' 
    ? '确定要删除此权限吗？此操作无法撤销。' 
    : `确定要删除选中的 ${selectedIds.length} 个权限吗？此操作无法撤销。`;
  return (
    <AlertDialog open={confirmDialogVisible} onOpenChange={setConfirmDialogVisible}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>{title}</AlertDialogTitle>
          <AlertDialogDescription>{description}</AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel disabled={isLoading}>取消</AlertDialogCancel>
          <AlertDialogAction 
            onClick={handleConfirm}
            disabled={isLoading}
            className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
          >
            {isLoading ? '删除中...' : '确认删除'}
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}
</file>

<file path="front/src/components/dashboard/permissions/permission-form.tsx">
'use client';
import { useEffect } from 'react';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter
} from '@/components/ui/dialog';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { usePermissionStore } from '@/stores/permission-store';
import { Permission } from '@/types/permission';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
// 权限表单验证Schema
const permissionFormSchema = z.object({
  name: z.string()
    .min(2, '权限名称至少需要2个字符')
    .max(50, '权限名称不能超过50个字符'),
  code: z.string()
    .min(4, '权限编码至少需要4个字符')
    .max(50, '权限编码不能超过50个字符')
    .regex(/^[A-Z0-9_]+$/, '权限编码只能包含大写字母、数字和下划线'),
  description: z.string().optional(),
  url: z.string().optional(),
  method: z.string().optional(),
});
// 表单值类型
type PermissionFormValues = z.infer<typeof permissionFormSchema>;
// HTTP方法选项
const httpMethods = [
  { value: 'GET', label: 'GET' },
  { value: 'POST', label: 'POST' },
  { value: 'PUT', label: 'PUT' },
  { value: 'DELETE', label: 'DELETE' },
  { value: 'PATCH', label: 'PATCH' },
];
export function PermissionForm() {
  // 获取权限状态
  const { 
    currentPermission, 
    formVisible, 
    isLoading,
    setFormVisible, 
    createPermission, 
    updatePermission 
  } = usePermissionStore();
  // 初始化表单
  const form = useForm<PermissionFormValues>({
    resolver: zodResolver(permissionFormSchema),
    defaultValues: {
      name: '',
      code: '',
      description: '',
      url: '',
      method: '',
    },
  });
  // 当currentPermission变化时，更新表单值
  useEffect(() => {
    if (currentPermission) {
      form.reset({
        name: currentPermission.name,
        code: currentPermission.code,
        description: currentPermission.description || '',
        url: currentPermission.url || '',
        method: currentPermission.method || '',
      });
    } else {
      form.reset({
        name: '',
        code: '',
        description: '',
        url: '',
        method: '',
      });
    }
  }, [currentPermission, form]);
  // 提交表单
  const onSubmit = async (values: PermissionFormValues) => {
    // 如果是编辑权限
    if (currentPermission) {
      await updatePermission(currentPermission.id, values);
    } else {
      // 如果是创建权限
      await createPermission(values);
    }
  };
  return (
    <Dialog open={formVisible} onOpenChange={setFormVisible}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>
            {currentPermission ? '编辑权限' : '创建权限'}
          </DialogTitle>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            {/* 权限名称 */}
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>权限名称</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入权限名称" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {/* 权限编码 */}
            <FormField
              control={form.control}
              name="code"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>权限编码</FormLabel>
                  <FormControl>
                    <Input 
                      placeholder="请输入权限编码（大写字母、数字和下划线）" 
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {/* 权限描述 */}
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>权限描述</FormLabel>
                  <FormControl>
                    <Textarea 
                      placeholder="请输入权限描述" 
                      className="resize-none" 
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {/* 资源URL */}
            <FormField
              control={form.control}
              name="url"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>资源URL</FormLabel>
                  <FormControl>
                    <Input 
                      placeholder="请输入资源URL（如：/api/users/{id}）" 
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            {/* HTTP方法 */}
            <FormField
              control={form.control}
              name="method"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>HTTP方法</FormLabel>
                  <Select 
                    onValueChange={field.onChange} 
                    value={field.value} 
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="请选择HTTP方法" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {httpMethods.map(method => (
                        <SelectItem key={method.value} value={method.value}>
                          {method.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <DialogFooter className="mt-6">
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => setFormVisible(false)}
                disabled={isLoading}
              >
                取消
              </Button>
              <Button type="submit" disabled={isLoading}>
                {isLoading ? '提交中...' : '提交'}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/dashboard/roles/delete-confirmation-dialog.tsx">
'use client';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { Loader2 } from 'lucide-react';
import { useRoleStore } from '@/stores/role-store';
export function DeleteConfirmationDialog() {
  const {
    confirmDialogVisible,
    setConfirmDialogVisible,
    selectedIds,
    deleteRole,
    batchDeleteRoles,
    isLoading,
  } = useRoleStore();
  // 判断是单个删除还是批量删除
  const isBatchDelete = selectedIds.length > 1;
  // 处理删除操作
  const handleDelete = async () => {
    if (isBatchDelete) {
      await batchDeleteRoles(selectedIds);
    } else if (selectedIds.length === 1) {
      await deleteRole(selectedIds[0]);
    }
  };
  return (
    <AlertDialog open={confirmDialogVisible} onOpenChange={setConfirmDialogVisible}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>
            {isBatchDelete
              ? `确认删除 ${selectedIds.length} 个角色`
              : '确认删除角色'}
          </AlertDialogTitle>
          <AlertDialogDescription>
            {isBatchDelete
              ? '此操作将删除选中的所有角色，删除后无法恢复。'
              : '此操作将删除该角色，删除后无法恢复。'}
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel disabled={isLoading}>取消</AlertDialogCancel>
          <AlertDialogAction onClick={handleDelete} disabled={isLoading}>
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            确认删除
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}
</file>

<file path="front/src/components/dashboard/roles/permission-dialog.tsx">
'use client';
import { useEffect, useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Label } from '@/components/ui/label';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Loader2, Search, X } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { useRoleStore } from '@/stores/role-store';
import { usePermissionStore } from '@/stores/permission-store';
import { Permission } from '@/types/permission';
export function PermissionDialog() {
  const { 
    currentRole, 
    permissionDialogVisible, 
    setPermissionDialogVisible, 
    assignPermissions, 
    isLoading 
  } = useRoleStore();
  const { permissions, fetchPermissions } = usePermissionStore();
  // 选中的权限ID列表
  const [selectedPermissionIds, setSelectedPermissionIds] = useState<number[]>([]);
  // 搜索关键词
  const [searchTerm, setSearchTerm] = useState('');
  // 初始加载权限列表
  useEffect(() => {
    fetchPermissions();
  }, [fetchPermissions]);
  // 当对话框打开时，初始化选中的权限
  useEffect(() => {
    if (currentRole && currentRole.permissions) {
      setSelectedPermissionIds(currentRole.permissions.map(p => p.id));
    } else {
      setSelectedPermissionIds([]);
    }
  }, [currentRole, permissionDialogVisible]);
  // 处理权限选择
  const handlePermissionToggle = (id: number) => {
    setSelectedPermissionIds(prev => {
      if (prev.includes(id)) {
        return prev.filter(permId => permId !== id);
      } else {
        return [...prev, id];
      }
    });
  };
  // 处理全选/取消全选
  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedPermissionIds(filteredPermissions.map(p => p.id));
    } else {
      setSelectedPermissionIds([]);
    }
  };
  // 提交权限分配
  const handleSubmit = async () => {
    if (currentRole) {
      await assignPermissions(currentRole.id, selectedPermissionIds);
    }
  };
  // 过滤权限列表
  const filteredPermissions = permissions.filter(permission => {
    return (
      permission.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      permission.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (permission.description && permission.description.toLowerCase().includes(searchTerm.toLowerCase()))
    );
  });
  return (
    <Dialog open={permissionDialogVisible} onOpenChange={setPermissionDialogVisible}>
      <DialogContent className="sm:max-w-[550px]">
        <DialogHeader>
          <DialogTitle>
            {currentRole ? `为角色 "${currentRole.name}" 分配权限` : '分配权限'}
          </DialogTitle>
        </DialogHeader>
        {/* 搜索框 */}
        <div className="flex items-center space-x-2 mb-4">
          <div className="relative flex-1">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="搜索权限..."
              className="pl-8"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            {searchTerm && (
              <button
                type="button"
                onClick={() => setSearchTerm('')}
                className="absolute right-2.5 top-2.5 text-muted-foreground hover:text-foreground"
              >
                <X className="h-4 w-4" />
                <span className="sr-only">清除搜索</span>
              </button>
            )}
          </div>
        </div>
        {/* 全选复选框 */}
        <div className="flex items-center space-x-2 mb-2">
          <Checkbox
            id="select-all"
            checked={
              filteredPermissions.length > 0 &&
              filteredPermissions.every(p => selectedPermissionIds.includes(p.id))
            }
            onCheckedChange={handleSelectAll}
          />
          <Label htmlFor="select-all">全选</Label>
        </div>
        {/* 权限列表 */}
        <ScrollArea className="h-[300px] pr-4">
          <div className="space-y-2">
            {filteredPermissions.length === 0 ? (
              <div className="py-6 text-center text-muted-foreground">
                {searchTerm ? '未找到匹配的权限' : '没有可用的权限'}
              </div>
            ) : (
              filteredPermissions.map((permission) => (
                <div key={permission.id} className="flex items-center space-x-2 py-1">
                  <Checkbox
                    id={`permission-${permission.id}`}
                    checked={selectedPermissionIds.includes(permission.id)}
                    onCheckedChange={() => handlePermissionToggle(permission.id)}
                  />
                  <div className="grid gap-1.5 leading-none">
                    <Label htmlFor={`permission-${permission.id}`} className="font-medium">
                      {permission.name} <span className="text-muted-foreground">({permission.code})</span>
                    </Label>
                    {permission.description && (
                      <p className="text-xs text-muted-foreground">
                        {permission.description}
                      </p>
                    )}
                  </div>
                </div>
              ))
            )}
          </div>
        </ScrollArea>
        {/* 操作按钮 */}
        <div className="flex justify-end space-x-2 pt-4">
          <Button
            variant="outline"
            onClick={() => setPermissionDialogVisible(false)}
            disabled={isLoading}
          >
            取消
          </Button>
          <Button onClick={handleSubmit} disabled={isLoading}>
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            保存
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/dashboard/roles/role-form.tsx">
'use client';
import { useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Loader2 } from 'lucide-react';
import { useRoleStore } from '@/stores/role-store';
import { Role } from '@/types/role';
// 表单验证模式
const formSchema = z.object({
  name: z.string()
    .min(2, { message: '角色名称至少需要2个字符' })
    .max(50, { message: '角色名称不能超过50个字符' }),
  code: z.string()
    .min(4, { message: '角色编码至少需要4个字符' })
    .max(50, { message: '角色编码不能超过50个字符' })
    .regex(/^ROLE_[A-Z0-9_]+$/, { 
      message: '角色编码必须以ROLE_开头，且只能包含大写字母、数字和下划线' 
    }),
  description: z.string().max(200, { message: '描述不能超过200个字符' }).optional(),
});
// 表单值类型
type FormValues = z.infer<typeof formSchema>;
export function RoleForm() {
  // 从store获取状态和方法
  const { 
    formVisible, 
    setFormVisible, 
    currentRole, 
    isLoading, 
    createRole, 
    updateRole 
  } = useRoleStore();
  // 创建表单
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: '',
      code: 'ROLE_',
      description: '',
    },
  });
  // 当currentRole变化时更新表单值
  useEffect(() => {
    if (currentRole) {
      form.reset({
        name: currentRole.name,
        code: currentRole.code,
        description: currentRole.description || '',
      });
    } else {
      form.reset({
        name: '',
        code: 'ROLE_',
        description: '',
      });
    }
  }, [currentRole, form]);
  // 提交表单
  const onSubmit = async (values: FormValues) => {
    if (currentRole) {
      // 更新角色
      await updateRole(currentRole.id, values);
    } else {
      // 创建角色
      await createRole(values);
    }
  };
  return (
    <Dialog open={formVisible} onOpenChange={setFormVisible}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>{currentRole ? '编辑角色' : '创建角色'}</DialogTitle>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>角色名称</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入角色名称" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="code"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>角色编码</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入角色编码 (格式: ROLE_XXX)" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>描述</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="请输入角色描述"
                      className="resize-none"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="flex justify-end space-x-2 pt-4">
              <Button variant="outline" onClick={() => setFormVisible(false)} disabled={isLoading}>取消</Button>
              <Button type="submit" disabled={isLoading}>
                {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                {currentRole ? '更新' : '创建'}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/dashboard/sidebar.tsx">
'use client';
import { usePathname } from 'next/navigation';
import Link from 'next/link';
import { UserRole, Role } from '@/types/auth';
import { useAuthStore } from '@/stores/auth-store';
import { useUIStore } from '@/stores/ui-store';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import {
  Home,
  User,
  Users,
  ShieldCheck,
  BookOpen,
  FileText,
  BarChart2,
  Heart,
  ShoppingCart,
  Menu,
  X,
  Building2,
} from 'lucide-react';
// 侧边栏菜单项
interface MenuItem {
  title: string;
  href: string;
  icon: React.ReactNode;
  roles?: UserRole[];
}
const menuItems: MenuItem[] = [
  {
    title: '仪表盘',
    href: '/dashboard',
    icon: <Home className="w-5 h-5" />,
  },
  {
    title: '个人资料',
    href: '/dashboard/profile',
    icon: <User className="w-5 h-5" />,
  },
  {
    title: '我的收藏',
    href: '/dashboard/favorites',
    icon: <Heart className="w-5 h-5" />,
  },
  {
    title: '我的订单',
    href: '/dashboard/orders',
    icon: <ShoppingCart className="w-5 h-5" />,
  },
  {
    title: '用户管理',
    href: '/dashboard/users',
    icon: <Users className="w-5 h-5" />,
    roles: [UserRole.ADMIN],
  },
  {
    title: '角色管理',
    href: '/dashboard/roles',
    icon: <ShieldCheck className="w-5 h-5" />,
    roles: [UserRole.ADMIN],
  },
  {
    title: '权限管理',
    href: '/dashboard/permissions',
    icon: <ShieldCheck className="w-5 h-5" />,
    roles: [UserRole.ADMIN],
  },
  {
    title: '课程管理',
    href: '/dashboard/courses',
    icon: <BookOpen className="w-5 h-5" />,
    roles: [UserRole.ADMIN, UserRole.INSTITUTION],
  },
  {
    title: '机构审核',
    href: '/dashboard/institutions',
    icon: <Building2 className="w-5 h-5" />,
    roles: [UserRole.ADMIN, UserRole.REVIEWER],
  },
  {
    title: '内容审核',
    href: '/dashboard/reviews',
    icon: <FileText className="w-5 h-5" />,
    roles: [UserRole.ADMIN],
  },
  {
    title: '统计数据',
    href: '/dashboard/statistics',
    icon: <BarChart2 className="w-5 h-5" />,
    roles: [UserRole.ADMIN],
  },
];
export default function Sidebar() {
  const pathname = usePathname();
  const { user } = useAuthStore();
  const { sidebarOpen, setSidebarOpen } = useUIStore();
  // 根据用户角色过滤菜单项
  const filteredMenuItems = menuItems.filter(
    (item) => {
      // 如果菜单项没有角色限制，所有人可见
      if (!item.roles) return true;
      // 如果用户不存在或没有角色信息，不显示
      if (!user || !user.roles || user.roles.length === 0) return false;
      // 检查用户角色数组中是否有菜单要求的角色
      return item.roles.some(requiredRole => 
        user.roles.some(userRole => {
          // 从角色代码中提取角色名，考虑多种可能的格式
          const userRoleCode = userRole.code || '';
          const roleName = userRoleCode.replace('ROLE_', '').toUpperCase();
          const requiredRoleUpper = requiredRole.toUpperCase();
          // 输出调试信息
          console.log(`检查角色: 需要 ${requiredRoleUpper}, 用户有 ${roleName} (原始: ${userRoleCode})`);
          // 比较角色是否匹配（忽略大小写，去除前缀）
          return roleName === requiredRoleUpper;
        })
      );
    }
  );
  return (
    <>
      {/* 移动端侧边栏遮罩 */}
      {sidebarOpen && (
        <div
          className="fixed inset-0 z-40 bg-background/80 backdrop-blur-sm md:hidden"
          onClick={() => setSidebarOpen(false)}
        />
      )}
      {/* 侧边栏 */}
      <aside
        className={cn(
          'fixed top-0 left-0 z-50 h-full w-72 bg-card border-r shadow-sm md:static md:z-0',
          'transform transition-transform duration-200 ease-in-out',
          sidebarOpen ? 'translate-x-0' : '-translate-x-full md:translate-x-0'
        )}
      >
        <div className="flex h-16 items-center justify-between px-4 py-4">
          <Link href="/" className="flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
              className="mr-2 text-primary"
            >
              <path d="M22 2 11 13"></path>
              <path d="m22 2-7 20-4-9-9-4 20-7z"></path>
            </svg>
            <span className="text-xl font-semibold">课程平台</span>
          </Link>
          <Button
            variant="ghost"
            size="icon"
            className="md:hidden"
            onClick={() => setSidebarOpen(false)}
          >
            <X className="h-5 w-5" />
          </Button>
        </div>
        <Separator />
        <nav className="flex flex-col gap-1 p-4">
          {filteredMenuItems.map((item) => (
            <Link
              key={item.href}
              href={item.href}
              className={cn(
                'flex items-center gap-3 rounded-md px-3 py-2 text-sm transition-colors',
                pathname === item.href
                  ? 'bg-primary text-primary-foreground'
                  : 'hover:bg-muted'
              )}
            >
              {item.icon}
              <span>{item.title}</span>
            </Link>
          ))}
        </nav>
      </aside>
    </>
  );
}
</file>

<file path="front/src/components/dashboard/users/delete-confirmation-dialog.tsx">
'use client';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { useUserManagementStore } from '@/stores/user-management-store';
export function DeleteConfirmationDialog() {
  const { 
    confirmDialogVisible, 
    setConfirmDialogVisible, 
    currentUser, 
    selectedIds,
    deleteUser,
    batchDeleteUsers,
    isLoading 
  } = useUserManagementStore();
  // 判断是单个删除还是批量删除
  const isBatchDelete = selectedIds.length > 0 && !currentUser;
  // 获取要删除的用户名或数量
  const getDeleteTarget = () => {
    if (currentUser) {
      return `用户 "${currentUser.username}"`;
    } else if (isBatchDelete) {
      return `${selectedIds.length} 个用户`;
    }
    return '选中的用户';
  };
  // 处理删除操作
  const handleDelete = async () => {
    if (currentUser) {
      await deleteUser(currentUser.id);
    } else if (isBatchDelete) {
      await batchDeleteUsers(selectedIds);
    }
  };
  return (
    <Dialog open={confirmDialogVisible} onOpenChange={setConfirmDialogVisible}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>确认删除</DialogTitle>
          <DialogDescription>
            您确定要删除 {getDeleteTarget()} 吗？此操作无法撤销。
          </DialogDescription>
        </DialogHeader>
        <DialogFooter className="mt-4">
          <Button 
            type="button" 
            variant="outline" 
            onClick={() => setConfirmDialogVisible(false)}
            disabled={isLoading}
          >
            取消
          </Button>
          <Button 
            variant="destructive" 
            onClick={handleDelete}
            disabled={isLoading}
          >
            {isLoading ? '处理中...' : '删除'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/dashboard/users/role-assignment-dialog.tsx">
'use client';
import { useEffect, useState } from 'react';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Checkbox } from '@/components/ui/checkbox';
import { useUserManagementStore } from '@/stores/user-management-store';
import { useRoleStore } from '@/stores/role-store';
import { Role } from '@/types/auth';
export function RoleAssignmentDialog() {
  const { 
    roleDialogVisible, 
    setRoleDialogVisible, 
    currentUser, 
    assignRoles, 
    isLoading 
  } = useUserManagementStore();
  const { roles, fetchRoles } = useRoleStore();
  // 选中的角色ID列表
  const [selectedRoleIds, setSelectedRoleIds] = useState<number[]>([]);
  // 加载角色列表
  useEffect(() => {
    fetchRoles();
  }, [fetchRoles]);
  // 当currentUser变化时，更新选中的角色
  useEffect(() => {
    if (currentUser && currentUser.roles) {
      setSelectedRoleIds(currentUser.roles.map(role => role.id));
    } else {
      setSelectedRoleIds([]);
    }
  }, [currentUser]);
  // 处理角色选择变化
  const handleRoleToggle = (roleId: number) => {
    setSelectedRoleIds(prev => {
      if (prev.includes(roleId)) {
        return prev.filter(id => id !== roleId);
      } else {
        return [...prev, roleId];
      }
    });
  };
  // 提交角色分配
  const handleSubmit = async () => {
    if (currentUser) {
      await assignRoles(currentUser.id, selectedRoleIds);
    }
  };
  return (
    <Dialog open={roleDialogVisible} onOpenChange={setRoleDialogVisible}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>分配角色</DialogTitle>
          <DialogDescription>
            {currentUser ? `为用户 ${currentUser.username} 分配角色` : '选择要分配的角色'}
          </DialogDescription>
        </DialogHeader>
        <div className="py-4">
          <ScrollArea className="h-[300px] pr-4">
            <div className="space-y-4">
              {roles.map((role) => (
                <div key={role.id} className="flex items-center space-x-2">
                  <Checkbox
                    id={`role-${role.id}`}
                    checked={selectedRoleIds.includes(role.id)}
                    onCheckedChange={() => handleRoleToggle(role.id)}
                  />
                  <label
                    htmlFor={`role-${role.id}`}
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer"
                  >
                    <div>{role.name}</div>
                    {role.description && (
                      <p className="text-xs text-muted-foreground mt-1">
                        {role.description}
                      </p>
                    )}
                  </label>
                </div>
              ))}
            </div>
          </ScrollArea>
        </div>
        <DialogFooter>
          <Button 
            type="button" 
            variant="outline" 
            onClick={() => setRoleDialogVisible(false)}
            disabled={isLoading}
          >
            取消
          </Button>
          <Button 
            onClick={handleSubmit} 
            disabled={isLoading || selectedRoleIds.length === 0}
          >
            {isLoading ? '处理中...' : '保存'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/dashboard/users/user-form.tsx">
'use client';
import { useEffect } from 'react';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { useUserManagementStore } from '@/stores/user-management-store';
import { useRoleStore } from '@/stores/role-store';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { UserDTO } from '@/types/user';
// 表单验证模式
const formSchema = z.object({
  username: z.string().min(3, '用户名至少需要3个字符').max(50, '用户名最多50个字符'),
  password: z.string().min(6, '密码至少需要6个字符').max(100, '密码最多100个字符').optional(),
  email: z.string().email('请输入有效的邮箱地址'),
  phone: z.string().regex(/^1[3-9]\d{9}$/, '请输入有效的手机号码').optional(),
  nickname: z.string().min(2, '昵称至少需要2个字符').max(50, '昵称最多50个字符'),
  status: z.number(),
  roleIds: z.array(z.number()).min(1, '请至少选择一个角色'),
});
export function UserForm() {
  const { 
    formVisible, 
    setFormVisible, 
    currentUser, 
    createUser, 
    updateUser, 
    isLoading 
  } = useUserManagementStore();
  const { roles, fetchRoles } = useRoleStore();
  // 初始化表单
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: '',
      password: '',
      email: '',
      phone: '',
      nickname: '',
      status: 1, // 默认启用
      roleIds: [],
    },
  });
  // 加载角色列表
  useEffect(() => {
    fetchRoles();
  }, [fetchRoles]);
  // 当currentUser变化时，更新表单值
  useEffect(() => {
    if (currentUser) {
      form.reset({
        username: currentUser.username,
        // 编辑时不设置密码
        password: undefined,
        email: currentUser.email,
        phone: currentUser.phone || '',
        nickname: currentUser.nickname,
        status: currentUser.status,
        roleIds: currentUser.roles?.map(role => role.id) || [],
      });
    } else {
      form.reset({
        username: '',
        password: '',
        email: '',
        phone: '',
        nickname: '',
        status: 1,
        roleIds: [],
      });
    }
  }, [currentUser, form]);
  // 表单提交处理
  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    const userData: UserDTO = {
      ...values,
      // 如果是编辑模式且密码为空，则不传递密码字段
      ...(currentUser && !values.password && { password: undefined }),
    };
    if (currentUser) {
      await updateUser(currentUser.id, userData);
    } else {
      await createUser(userData);
    }
  };
  return (
    <Dialog open={formVisible} onOpenChange={setFormVisible}>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle>{currentUser ? '编辑用户' : '创建用户'}</DialogTitle>
          <DialogDescription>
            {currentUser 
              ? '修改用户信息，如不修改密码请留空' 
              : '填写用户信息，创建新用户'}
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="username"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>用户名</FormLabel>
                  <FormControl>
                    <Input 
                      placeholder="请输入用户名" 
                      {...field} 
                      disabled={!!currentUser} // 编辑模式下用户名不可修改
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="password"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>{currentUser ? '密码 (留空则不修改)' : '密码'}</FormLabel>
                  <FormControl>
                    <Input 
                      type="password" 
                      placeholder={currentUser ? "留空则不修改密码" : "请输入密码"} 
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>邮箱</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入邮箱" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="phone"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>手机号</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入手机号" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="nickname"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>昵称</FormLabel>
                  <FormControl>
                    <Input placeholder="请输入昵称" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="status"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>状态</FormLabel>
                  <Select
                    onValueChange={(value) => field.onChange(parseInt(value))}
                    defaultValue={field.value.toString()}
                    value={field.value.toString()}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="选择用户状态" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="1">启用</SelectItem>
                      <SelectItem value="0">禁用</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="roleIds"
              render={() => (
                <FormItem>
                  <div className="mb-2">
                    <FormLabel>角色</FormLabel>
                  </div>
                  <div className="grid grid-cols-2 gap-2">
                    {roles.map((role) => (
                      <FormField
                        key={role.id}
                        control={form.control}
                        name="roleIds"
                        render={({ field }) => {
                          return (
                            <FormItem
                              key={role.id}
                              className="flex flex-row items-start space-x-3 space-y-0"
                            >
                              <FormControl>
                                <Checkbox
                                  checked={field.value?.includes(role.id)}
                                  onCheckedChange={(checked) => {
                                    const currentValues = field.value || [];
                                    if (checked) {
                                      field.onChange([...currentValues, role.id]);
                                    } else {
                                      field.onChange(
                                        currentValues.filter((value) => value !== role.id)
                                      );
                                    }
                                  }}
                                />
                              </FormControl>
                              <FormLabel className="font-normal cursor-pointer">
                                {role.name}
                              </FormLabel>
                            </FormItem>
                          );
                        }}
                      />
                    ))}
                  </div>
                  <FormMessage />
                </FormItem>
              )}
            />
            <DialogFooter>
              <Button 
                type="button" 
                variant="outline" 
                onClick={() => setFormVisible(false)}
                disabled={isLoading}
              >
                取消
              </Button>
              <Button type="submit" disabled={isLoading}>
                {isLoading ? '处理中...' : (currentUser ? '更新' : '创建')}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
</file>

<file path="front/src/components/dashboard/users/user-list.tsx">
'use client';
import { useEffect, useState } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Input } from '@/components/ui/input';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from '@/components/ui/pagination';
import { Badge } from '@/components/ui/badge';
import { useUserManagementStore } from '@/stores/user-management-store';
import { User } from '@/types/auth';
import { UserQueryParams } from '@/types/user';
import { MoreHorizontal, Plus, Search, RefreshCw } from 'lucide-react';
import { formatDate } from '@/lib/utils';
export function UserList() {
  const {
    users,
    pagination,
    queryParams,
    fetchUsers,
    setQueryParams,
    setCurrentUser,
    setFormVisible,
    setConfirmDialogVisible,
    setRoleDialogVisible,
    selectedIds,
    toggleSelectedId,
    clearSelectedIds,
    updateUserStatus,
    isLoading,
  } = useUserManagementStore();
  // 搜索关键词
  const [searchKeyword, setSearchKeyword] = useState('');
  // 初始加载用户列表
  useEffect(() => {
    fetchUsers();
  }, [fetchUsers]);
  // 处理搜索
  const handleSearch = () => {
    const newParams: Partial<UserQueryParams> = {
      pageNum: 1, // 重置到第一页
    };
    // 根据搜索关键词设置查询参数
    if (searchKeyword) {
      if (searchKeyword.includes('@')) {
        newParams.email = searchKeyword;
      } else if (/^1[3-9]\d{9}$/.test(searchKeyword)) {
        newParams.phone = searchKeyword;
      } else {
        newParams.username = searchKeyword;
      }
    } else {
      // 清空搜索条件
      newParams.username = undefined;
      newParams.email = undefined;
      newParams.phone = undefined;
    }
    fetchUsers(newParams);
  };
  // 处理页码变化
  const handlePageChange = (page: number) => {
    fetchUsers({ pageNum: page });
  };
  // 处理每页数量变化
  const handlePageSizeChange = (size: number) => {
    fetchUsers({ pageSize: size, pageNum: 1 });
  };
  // 处理编辑用户
  const handleEdit = (user: User) => {
    setCurrentUser(user);
    setFormVisible(true);
  };
  // 处理删除用户
  const handleDelete = (user: User) => {
    setCurrentUser(user);
    setConfirmDialogVisible(true);
  };
  // 处理分配角色
  const handleAssignRoles = (user: User) => {
    setCurrentUser(user);
    setRoleDialogVisible(true);
  };
  // 处理批量删除
  const handleBatchDelete = () => {
    setCurrentUser(null);
    setConfirmDialogVisible(true);
  };
  // 处理状态切换
  const handleStatusToggle = async (user: User) => {
    await updateUserStatus(user.id, user.status === 1 ? 0 : 1);
  };
  // 处理全选/取消全选
  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      const allIds = users.map(user => user.id);
      useUserManagementStore.getState().setSelectedIds(allIds);
    } else {
      clearSelectedIds();
    }
  };
  // 判断是否全选
  const isAllSelected = users.length > 0 && selectedIds.length === users.length;
  // 生成分页项
  const renderPaginationItems = () => {
    const { totalPages, number } = pagination;
    const currentPage = number + 1; // API返回的页码从0开始，UI从1开始
    const items = [];
    // 添加首页
    if (totalPages > 5 && currentPage > 3) {
      items.push(
        <PaginationItem key="first">
          <PaginationLink onClick={() => handlePageChange(1)}>1</PaginationLink>
        </PaginationItem>
      );
      if (currentPage > 4) {
        items.push(
          <PaginationItem key="ellipsis-start">
            <PaginationEllipsis />
          </PaginationItem>
        );
      }
    }
    // 添加当前页附近的页码
    for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) {
      items.push(
        <PaginationItem key={i}>
          <PaginationLink 
            isActive={currentPage === i}
            onClick={() => handlePageChange(i)}
          >
            {i}
          </PaginationLink>
        </PaginationItem>
      );
    }
    // 添加末页
    if (totalPages > 5 && currentPage < totalPages - 2) {
      if (currentPage < totalPages - 3) {
        items.push(
          <PaginationItem key="ellipsis-end">
            <PaginationEllipsis />
          </PaginationItem>
        );
      }
      items.push(
        <PaginationItem key="last">
          <PaginationLink onClick={() => handlePageChange(totalPages)}>
            {totalPages}
          </PaginationLink>
        </PaginationItem>
      );
    }
    return items;
  };
  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Input
            placeholder="搜索用户名/邮箱/手机号"
            value={searchKeyword}
            onChange={(e) => setSearchKeyword(e.target.value)}
            className="w-[300px]"
            onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
          />
          <Button variant="outline" size="icon" onClick={handleSearch}>
            <Search className="h-4 w-4" />
          </Button>
          <Button 
            variant="outline" 
            size="icon" 
            onClick={() => {
              setSearchKeyword('');
              fetchUsers({
                username: undefined,
                email: undefined,
                phone: undefined,
                pageNum: 1,
              });
            }}
          >
            <RefreshCw className="h-4 w-4" />
          </Button>
        </div>
        <div className="flex items-center gap-2">
          {selectedIds.length > 0 && (
            <Button 
              variant="destructive" 
              size="sm"
              onClick={handleBatchDelete}
              disabled={isLoading}
            >
              删除选中 ({selectedIds.length})
            </Button>
          )}
          <Button 
            onClick={() => {
              setCurrentUser(null);
              setFormVisible(true);
            }}
            disabled={isLoading}
          >
            <Plus className="h-4 w-4 mr-2" /> 新建用户
          </Button>
        </div>
      </div>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[50px]">
                <Checkbox 
                  checked={isAllSelected}
                  onCheckedChange={handleSelectAll}
                  disabled={users.length === 0}
                />
              </TableHead>
              <TableHead>用户名</TableHead>
              <TableHead>昵称</TableHead>
              <TableHead>邮箱</TableHead>
              <TableHead>手机号</TableHead>
              <TableHead>角色</TableHead>
              <TableHead>状态</TableHead>
              <TableHead>创建时间</TableHead>
              <TableHead className="text-right">操作</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {users.length === 0 ? (
              <TableRow>
                <TableCell colSpan={9} className="h-24 text-center">
                  {isLoading ? '加载中...' : '暂无数据'}
                </TableCell>
              </TableRow>
            ) : (
              users.map((user) => (
                <TableRow key={user.id}>
                  <TableCell>
                    <Checkbox 
                      checked={selectedIds.includes(user.id)}
                      onCheckedChange={() => toggleSelectedId(user.id)}
                    />
                  </TableCell>
                  <TableCell>{user.username}</TableCell>
                  <TableCell>{user.nickname}</TableCell>
                  <TableCell>{user.email}</TableCell>
                  <TableCell>{user.phone || '-'}</TableCell>
                  <TableCell>
                    <div className="flex flex-wrap gap-1">
                      {user.roles?.map((role) => (
                        <Badge key={role.id} variant="outline">
                          {role.name}
                        </Badge>
                      ))}
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge variant={user.status === 1 ? "success" : "destructive"}>
                      {user.status === 1 ? '启用' : '禁用'}
                    </Badge>
                  </TableCell>
                  <TableCell>{formatDate(user.createdAt)}</TableCell>
                  <TableCell className="text-right">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon">
                          <MoreHorizontal className="h-4 w-4" />
                          <span className="sr-only">操作</span>
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuLabel>操作</DropdownMenuLabel>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem onClick={() => handleEdit(user)}>
                          编辑
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => handleAssignRoles(user)}>
                          分配角色
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => handleStatusToggle(user)}>
                          {user.status === 1 ? '禁用' : '启用'}
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem 
                          className="text-destructive focus:text-destructive"
                          onClick={() => handleDelete(user)}
                        >
                          删除
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>
      {pagination.totalElements > 0 && (
        <div className="flex items-center justify-between">
          <div className="text-sm text-muted-foreground">
            共 {pagination.totalElements} 条记录，每页
            <select
              className="mx-1 bg-background"
              value={pagination.size}
              onChange={(e) => handlePageSizeChange(Number(e.target.value))}
              disabled={isLoading}
            >
              <option value="10">10</option>
              <option value="20">20</option>
              <option value="50">50</option>
              <option value="100">100</option>
            </select>
            条
          </div>
          <Pagination>
            <PaginationContent>
              <PaginationItem>
                <PaginationPrevious 
                  onClick={() => !pagination.first && handlePageChange(pagination.number)}
                  className={pagination.first ? "pointer-events-none opacity-50" : ""}
                />
              </PaginationItem>
              {renderPaginationItems()}
              <PaginationItem>
                <PaginationNext 
                  onClick={() => !pagination.last && handlePageChange(pagination.number + 2)}
                  className={pagination.last ? "pointer-events-none opacity-50" : ""}
                />
              </PaginationItem>
            </PaginationContent>
          </Pagination>
        </div>
      )}
    </div>
  );
}
</file>

<file path="front/src/components/providers/theme-provider.tsx">
'use client';
import { useEffect, useState } from 'react';
import { useUIStore, Theme } from '@/stores/ui-store';
interface ThemeProviderProps {
  children: React.ReactNode;
}
export default function ThemeProvider({ children }: ThemeProviderProps) {
  const { theme, setTheme } = useUIStore();
  const [mounted, setMounted] = useState(false);
  // 仅在客户端挂载后执行
  useEffect(() => {
    setMounted(true);
  }, []);
  // 监听系统主题变化
  useEffect(() => {
    if (!mounted) return;
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const handleChange = () => {
      if (theme === 'system') {
        const root = document.documentElement;
        const isDark = mediaQuery.matches;
        root.classList.remove('light', 'dark');
        root.classList.add(isDark ? 'dark' : 'light');
      }
    };
    // 初始设置
    if (theme === 'system') {
      handleChange();
    } else {
      const root = document.documentElement;
      root.classList.remove('light', 'dark');
      root.classList.add(theme);
    }
    // 添加监听
    mediaQuery.addEventListener('change', handleChange);
    return () => {
      // 清理监听
      mediaQuery.removeEventListener('change', handleChange);
    };
  }, [theme, mounted]);
  // 防止服务器端渲染和客户端渲染不匹配
  if (!mounted) {
    // 返回一个空的占位符，避免闪烁
    return <>{children}</>;
  }
  return <>{children}</>;
}
</file>

<file path="front/src/components/ui/alert-dialog.tsx">
"use client"
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"
function AlertDialog({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {
  return <AlertDialogPrimitive.Root data-slot="alert-dialog" {...props} />
}
function AlertDialogTrigger({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {
  return (
    <AlertDialogPrimitive.Trigger data-slot="alert-dialog-trigger" {...props} />
  )
}
function AlertDialogPortal({
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {
  return (
    <AlertDialogPrimitive.Portal data-slot="alert-dialog-portal" {...props} />
  )
}
function AlertDialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {
  return (
    <AlertDialogPrimitive.Overlay
      data-slot="alert-dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}
function AlertDialogContent({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        data-slot="alert-dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      />
    </AlertDialogPortal>
  )
}
function AlertDialogHeader({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}
function AlertDialogFooter({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}
function AlertDialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {
  return (
    <AlertDialogPrimitive.Title
      data-slot="alert-dialog-title"
      className={cn("text-lg font-semibold", className)}
      {...props}
    />
  )
}
function AlertDialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {
  return (
    <AlertDialogPrimitive.Description
      data-slot="alert-dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
function AlertDialogAction({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {
  return (
    <AlertDialogPrimitive.Action
      className={cn(buttonVariants(), className)}
      {...props}
    />
  )
}
function AlertDialogCancel({
  className,
  ...props
}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {
  return (
    <AlertDialogPrimitive.Cancel
      className={cn(buttonVariants({ variant: "outline" }), className)}
      {...props}
    />
  )
}
export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="front/src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)
const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"
const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"
const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"
export { Alert, AlertTitle, AlertDescription }
</file>

<file path="front/src/components/ui/avatar.tsx">
"use client"
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"
import { cn } from "@/lib/utils"
function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}
function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}
function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}
export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="front/src/components/ui/badge.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const badgeVariants = cva(
  "inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90",
        destructive:
          "border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground",
        success:
          "border-transparent bg-green-500 text-white [a&]:hover:bg-green-600/90 focus-visible:ring-green-500/20 dark:focus-visible:ring-green-500/40",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)
function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<"span"> &
  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : "span"
  return (
    <Comp
      data-slot="badge"
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    />
  )
}
export { Badge, badgeVariants }
</file>

<file path="front/src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-[color,box-shadow] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40",
        outline:
          "border border-input bg-background shadow-xs hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)
function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}
export { Button, buttonVariants }
</file>

<file path="front/src/components/ui/captcha.tsx">
'use client';
import { useState, useEffect } from 'react';
import { toast } from 'sonner';
import Image from 'next/image';
import authService from '@/services/auth';
interface CaptchaProps {
  onCaptchaKeyChange: (captchaKey: string) => void;
}
export function Captcha({ onCaptchaKeyChange }: CaptchaProps) {
  const [captchaImage, setCaptchaImage] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const fetchCaptcha = async () => {
    setIsLoading(true);
    try {
      console.log('验证码组件：开始获取验证码');
      const captchaData = await authService.getCaptcha();
      if (!captchaData.captchaId) {
        throw new Error('获取验证码Key失败');
      }
      console.log('验证码组件：获取到验证码Key', captchaData.captchaId);
      setCaptchaImage(captchaData.captchaImage);
      onCaptchaKeyChange(captchaData.captchaId);
    } catch (error) {
      console.error('验证码组件：获取验证码失败', error);
      toast.error('获取验证码失败，请点击刷新');
    } finally {
      setIsLoading(false);
    }
  };
  // 组件挂载后获取验证码
  useEffect(() => {
    fetchCaptcha();
  }, []);
  return (
    <div 
      className="h-10 cursor-pointer border rounded-md overflow-hidden flex items-center justify-center min-w-[100px] captcha-component"
      onClick={fetchCaptcha}
      title="点击刷新验证码"
    >
      {isLoading ? (
        <div className="animate-pulse flex space-x-1 items-center">
          <div className="h-2 w-2 bg-gray-300 rounded-full"></div>
          <div className="h-2 w-2 bg-gray-300 rounded-full"></div>
          <div className="h-2 w-2 bg-gray-300 rounded-full"></div>
        </div>
      ) : captchaImage ? (
        <img 
          src={captchaImage} 
          alt="验证码" 
          className="h-full w-auto"
        />
      ) : (
        <span className="text-sm text-gray-500">点击获取</span>
      )}
    </div>
  );
}
</file>

<file path="front/src/components/ui/card.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}
function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn("flex flex-col gap-1.5 px-6", className)}
      {...props}
    />
  )
}
function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}
function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}
function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6", className)}
      {...props}
    />
  )
}
export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="front/src/components/ui/checkbox.tsx">
"use client"
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}
export { Checkbox }
</file>

<file path="front/src/components/ui/dialog.tsx">
"use client"
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}
function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}
function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}
function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}
function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}
function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}
function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}
function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}
function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}
function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}
</file>

<file path="front/src/components/ui/dropdown-menu.tsx">
"use client"
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}
function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}
function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}
function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}
function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}
function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive-foreground data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/40 data-[variant=destructive]:focus:text-destructive-foreground data-[variant=destructive]:*:[svg]:!text-destructive-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}
function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}
function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}
function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}
function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}
function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}
function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}
function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}
function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}
function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}
export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}
</file>

<file path="front/src/components/ui/form.tsx">
"use client"
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"
import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"
const Form = FormProvider
type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName
}
const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)
const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}
const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState } = useFormContext()
  const formState = useFormState({ name: fieldContext.name })
  const fieldState = getFieldState(fieldContext.name, formState)
  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }
  const { id } = itemContext
  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}
type FormItemContextValue = {
  id: string
}
const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)
function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId()
  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("grid gap-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  )
}
function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField()
  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn("data-[error=true]:text-destructive-foreground", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
}
function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()
  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
}
function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField()
  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : props.children
  if (!body) {
    return null
  }
  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive-foreground text-sm", className)}
      {...props}
    >
      {body}
    </p>
  )
}
export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="front/src/components/ui/input.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "border-input file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}
export { Input }
</file>

<file path="front/src/components/ui/label.tsx">
"use client"
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cn } from "@/lib/utils"
function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}
export { Label }
</file>

<file path="front/src/components/ui/pagination.tsx">
import * as React from "react"
import {
  ChevronLeftIcon,
  ChevronRightIcon,
  MoreHorizontalIcon,
} from "lucide-react"
import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"
function Pagination({ className, ...props }: React.ComponentProps<"nav">) {
  return (
    <nav
      role="navigation"
      aria-label="pagination"
      data-slot="pagination"
      className={cn("mx-auto flex w-full justify-center", className)}
      {...props}
    />
  )
}
function PaginationContent({
  className,
  ...props
}: React.ComponentProps<"ul">) {
  return (
    <ul
      data-slot="pagination-content"
      className={cn("flex flex-row items-center gap-1", className)}
      {...props}
    />
  )
}
function PaginationItem({ ...props }: React.ComponentProps<"li">) {
  return <li data-slot="pagination-item" {...props} />
}
type PaginationLinkProps = {
  isActive?: boolean
} & Pick<React.ComponentProps<typeof Button>, "size"> &
  React.ComponentProps<"a">
function PaginationLink({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) {
  return (
    <a
      aria-current={isActive ? "page" : undefined}
      data-slot="pagination-link"
      data-active={isActive}
      className={cn(
        buttonVariants({
          variant: isActive ? "outline" : "ghost",
          size,
        }),
        className
      )}
      {...props}
    />
  )
}
function PaginationPrevious({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to previous page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pl-2.5", className)}
      {...props}
    >
      <ChevronLeftIcon />
      <span className="hidden sm:block">Previous</span>
    </PaginationLink>
  )
}
function PaginationNext({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) {
  return (
    <PaginationLink
      aria-label="Go to next page"
      size="default"
      className={cn("gap-1 px-2.5 sm:pr-2.5", className)}
      {...props}
    >
      <span className="hidden sm:block">Next</span>
      <ChevronRightIcon />
    </PaginationLink>
  )
}
function PaginationEllipsis({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      aria-hidden
      data-slot="pagination-ellipsis"
      className={cn("flex size-9 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontalIcon className="size-4" />
      <span className="sr-only">More pages</span>
    </span>
  )
}
export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
}
</file>

<file path="front/src/components/ui/scroll-area.tsx">
"use client"
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"
import { cn } from "@/lib/utils"
const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName
const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName
export { ScrollArea, ScrollBar }
</file>

<file path="front/src/components/ui/select.tsx">
"use client"
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { CheckIcon, ChevronDownIcon, ChevronUpIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />
}
function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />
}
function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />
}
function SelectTrigger({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger>) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex h-9 w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDownIcon className="size-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
}
function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
}
function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("px-2 py-1.5 text-sm font-medium", className)}
      {...props}
    />
  )
}
function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className
      )}
      {...props}
    >
      <span className="absolute right-2 flex size-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
}
function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}
function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
    </SelectPrimitive.ScrollUpButton>
  )
}
function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className
      )}
      {...props}
    >
      <ChevronDownIcon className="size-4" />
    </SelectPrimitive.ScrollDownButton>
  )
}
export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
}
</file>

<file path="front/src/components/ui/separator.tsx">
"use client"
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"
import { cn } from "@/lib/utils"
function Separator({
  className,
  orientation = "horizontal",
  decorative = true,
  ...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
  return (
    <SeparatorPrimitive.Root
      data-slot="separator-root"
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px",
        className
      )}
      {...props}
    />
  )
}
export { Separator }
</file>

<file path="front/src/components/ui/sheet.tsx">
"use client"
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"
import { cn } from "@/lib/utils"
function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />
}
function SheetTrigger({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return <SheetPrimitive.Trigger data-slot="sheet-trigger" {...props} />
}
function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />
}
function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />
}
function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/80",
        className
      )}
      {...props}
    />
  )
}
function SheetContent({
  className,
  children,
  side = "right",
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left"
}) {
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t",
          className
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <XIcon className="size-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
}
function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-4", className)}
      {...props}
    />
  )
}
function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-4", className)}
      {...props}
    />
  )
}
function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn("text-foreground font-semibold", className)}
      {...props}
    />
  )
}
function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}
export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
</file>

<file path="front/src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"
function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-primary/10 animate-pulse rounded-md", className)}
      {...props}
    />
  )
}
export { Skeleton }
</file>

<file path="front/src/components/ui/sonner.tsx">
"use client"
import { useTheme } from "next-themes"
import { Toaster as Sonner, ToasterProps } from "sonner"
const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()
  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground font-medium",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground font-medium",
        },
      }}
      {...props}
    />
  )
}
export { Toaster }
</file>

<file path="front/src/components/ui/switch.tsx">
"use client"
import * as React from "react"
import * as SwitchPrimitive from "@radix-ui/react-switch"
import { cn } from "@/lib/utils"
function Switch({
  className,
  ...props
}: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        "peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 inline-flex h-5 w-9 shrink-0 items-center rounded-full border-2 border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          "bg-background pointer-events-none block size-4 rounded-full ring-0 shadow-lg transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitive.Root>
  )
}
export { Switch }
</file>

<file path="front/src/components/ui/table.tsx">
"use client"
import * as React from "react"
import { cn } from "@/lib/utils"
function Table({ className, ...props }: React.ComponentProps<"table">) {
  return (
    <div
      data-slot="table-container"
      className="relative w-full overflow-x-auto"
    >
      <table
        data-slot="table"
        className={cn("w-full caption-bottom text-sm", className)}
        {...props}
      />
    </div>
  )
}
function TableHeader({ className, ...props }: React.ComponentProps<"thead">) {
  return (
    <thead
      data-slot="table-header"
      className={cn("[&_tr]:border-b", className)}
      {...props}
    />
  )
}
function TableBody({ className, ...props }: React.ComponentProps<"tbody">) {
  return (
    <tbody
      data-slot="table-body"
      className={cn("[&_tr:last-child]:border-0", className)}
      {...props}
    />
  )
}
function TableFooter({ className, ...props }: React.ComponentProps<"tfoot">) {
  return (
    <tfoot
      data-slot="table-footer"
      className={cn(
        "bg-muted/50 border-t font-medium [&>tr]:last:border-b-0",
        className
      )}
      {...props}
    />
  )
}
function TableRow({ className, ...props }: React.ComponentProps<"tr">) {
  return (
    <tr
      data-slot="table-row"
      className={cn(
        "hover:bg-muted/50 data-[state=selected]:bg-muted border-b transition-colors",
        className
      )}
      {...props}
    />
  )
}
function TableHead({ className, ...props }: React.ComponentProps<"th">) {
  return (
    <th
      data-slot="table-head"
      className={cn(
        "text-muted-foreground h-10 px-2 text-left align-middle font-medium whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}
function TableCell({ className, ...props }: React.ComponentProps<"td">) {
  return (
    <td
      data-slot="table-cell"
      className={cn(
        "p-2 align-middle whitespace-nowrap [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
        className
      )}
      {...props}
    />
  )
}
function TableCaption({
  className,
  ...props
}: React.ComponentProps<"caption">) {
  return (
    <caption
      data-slot="table-caption"
      className={cn("text-muted-foreground mt-4 text-sm", className)}
      {...props}
    />
  )
}
export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="front/src/components/ui/tabs.tsx">
"use client"
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"
import { cn } from "@/lib/utils"
function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}
function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-1",
        className
      )}
      {...props}
    />
  )
}
function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring inline-flex flex-1 items-center justify-center gap-1.5 rounded-md px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}
function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}
export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="front/src/components/ui/textarea.tsx">
import * as React from "react"
import { cn } from "@/lib/utils"
function Textarea({ className, ...props }: React.ComponentProps<"textarea">) {
  return (
    <textarea
      data-slot="textarea"
      className={cn(
        "border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive flex field-sizing-content min-h-16 w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...props}
    />
  )
}
export { Textarea }
</file>

<file path="front/src/components/ui/tooltip.tsx">
"use client"
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"
import { cn } from "@/lib/utils"
function TooltipProvider({
  delayDuration = 0,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
  return (
    <TooltipPrimitive.Provider
      data-slot="tooltip-provider"
      delayDuration={delayDuration}
      {...props}
    />
  )
}
function Tooltip({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
  return (
    <TooltipProvider>
      <TooltipPrimitive.Root data-slot="tooltip" {...props} />
    </TooltipProvider>
  )
}
function TooltipTrigger({
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
  return <TooltipPrimitive.Trigger data-slot="tooltip-trigger" {...props} />
}
function TooltipContent({
  className,
  sideOffset = 0,
  children,
  ...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
  return (
    <TooltipPrimitive.Portal>
      <TooltipPrimitive.Content
        data-slot="tooltip-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-primary text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit rounded-md px-3 py-1.5 text-xs text-balance",
          className
        )}
        {...props}
      >
        {children}
        <TooltipPrimitive.Arrow className="bg-primary fill-primary z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px]" />
      </TooltipPrimitive.Content>
    </TooltipPrimitive.Portal>
  )
}
export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="front/src/lib/utils.ts">
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
/**
 * 格式化日期为 YYYY-MM-DD HH:mm:ss 格式
 * @param date 日期字符串或Date对象
 * @returns 格式化后的日期字符串
 */
export function formatDate(date: string | Date | undefined): string {
  if (!date) return '-';
  const d = typeof date === 'string' ? new Date(date) : date;
  // 检查日期是否有效
  if (isNaN(d.getTime())) return '-';
  const year = d.getFullYear();
  const month = String(d.getMonth() + 1).padStart(2, '0');
  const day = String(d.getDate()).padStart(2, '0');
  const hours = String(d.getHours()).padStart(2, '0');
  const minutes = String(d.getMinutes()).padStart(2, '0');
  const seconds = String(d.getSeconds()).padStart(2, '0');
  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}
</file>

<file path="front/src/middleware.ts">
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
// 需要保护的路由前缀
const PROTECTED_PATHS = ['/dashboard'];
// 不需要认证的路由
const PUBLIC_PATHS = ['/login', '/register', '/courses', '/'];
// 路由中间件
export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  // 检查是否是受保护的路由
  const isProtectedPath = PROTECTED_PATHS.some(path => pathname.startsWith(path));
  // 如果不是受保护的路由，直接放行
  if (!isProtectedPath) return NextResponse.next();
  // 获取令牌
  const token = request.cookies.get('token')?.value;
  // 如果没有令牌，重定向到登录页
  if (!token) {
    // 创建登录重定向URL，包含原始目标URL作为参数
    const redirectUrl = new URL('/login', request.url);
    redirectUrl.searchParams.set('redirectTo', pathname);
    return NextResponse.redirect(redirectUrl);
  }
  // 有令牌，放行请求
  return NextResponse.next();
}
// 配置需要执行中间件的路径
export const config = {
  matcher: [
    // 需要保护的路由
    '/dashboard/:path*',
    // 也可以添加其他需要保护的路由
  ],
};
</file>

<file path="front/src/services/api.ts">
'use client';
import axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { ApiError, ApiResponse } from '@/types/api';
// 安全获取localStorage中的值
const getStorageItem = (key: string): string | null => {
  if (typeof window === 'undefined') return null;
  return localStorage.getItem(key);
};
// 安全设置localStorage中的值
const setStorageItem = (key: string, value: string): void => {
  if (typeof window === 'undefined') return;
  localStorage.setItem(key, value);
};
// 安全删除localStorage中的值
const removeStorageItem = (key: string): void => {
  if (typeof window === 'undefined') return;
  localStorage.removeItem(key);
};
// 创建axios实例
const api = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  },
});
// 请求拦截器
api.interceptors.request.use(
  (config) => {
    // 从localStorage获取token
    const token = getStorageItem('token');
    // 如果存在token，添加到请求头
    if (token && config.headers) {
      config.headers.Authorization = `Bearer ${token}`;
      // 确保不将token作为URL参数
      if (config.params && config.params.headers) {
        delete config.params.headers;
      }
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);
// 检查token是否需要刷新
const shouldRefreshToken = (token: string): boolean => {
  try {
    // 解析token获取过期时间
    const payload = JSON.parse(atob(token.split('.')[1]));
    const expiresIn = payload.exp * 1000; // 转换为毫秒
    const now = Date.now();
    // 如果token还有15分钟就过期，才刷新
    return expiresIn - now < 15 * 60 * 1000;
  } catch (error) {
    console.error('解析token失败：', error);
    return false;
  }
};
// 响应拦截器
api.interceptors.response.use(
  (response: AxiosResponse<ApiResponse>) => {
    // 检查当前token是否需要刷新
    const token = getStorageItem('token');
    if (token && shouldRefreshToken(token)) {
      // 静默刷新token
      refreshTokenSilently();
    }
    return response;
  },
  async (error: AxiosError<ApiResponse>) => {
    const originalRequest = error.config as AxiosRequestConfig & { _retry?: boolean };
    const requestUrl = originalRequest.url || '';
    // 检查是否为登录或注册请求
    const isAuthRequest = requestUrl.includes('/auth/login') || 
                         requestUrl.includes('/auth/register') ||
                         requestUrl.includes('/auth/captcha') ||
                         requestUrl.includes('/auth/refresh-token');
    // 只在401错误时尝试刷新token
    if (error.response?.status === 401 && !originalRequest._retry && !isAuthRequest) {
      originalRequest._retry = true;
      try {
        // 尝试刷新令牌
        const refreshToken = getStorageItem('refreshToken');
        if (refreshToken) {
          console.log('Token过期，开始刷新');
          const response = await axios.post<ApiResponse<{ accessToken: string; refreshToken: string; tokenType: string; expiresIn: number }>>(
            `${api.defaults.baseURL}/auth/refresh-token`,
            { refreshToken }
          );
          if (response.data.code !== 200 || !response.data.data) {
            throw new Error(response.data.message || '刷新令牌失败');
          }
          const { accessToken, refreshToken: newRefreshToken, tokenType = 'Bearer' } = response.data.data;
          if (!accessToken) {
            throw new Error('刷新令牌失败：未获取到有效的访问令牌');
          }
          // 更新localStorage中的令牌
          setStorageItem('token', accessToken);
          setStorageItem('refreshToken', newRefreshToken);
          // 更新请求头并重试原始请求
          const authHeader = `${tokenType} ${accessToken}`;
          api.defaults.headers.common.Authorization = authHeader;
          originalRequest.headers = originalRequest.headers || {};
          originalRequest.headers.Authorization = authHeader;
          return api(originalRequest);
        } else {
          throw new Error('会话已过期，请重新登录');
        }
      } catch (refreshError) {
        // 刷新失败，清除令牌并重定向到登录页
        removeStorageItem('token');
        removeStorageItem('refreshToken');
        if (typeof window !== 'undefined') {
          window.location.href = '/login';
        }
        return Promise.reject(refreshError);
      }
    }
    // 构造API错误对象
    const apiError: ApiError = {
      code: error.response?.data?.code || error.response?.status || 500,
      message: error.response?.data?.message || error.message || '请求失败',
      errors: error.response?.data?.errors,
    };
    return Promise.reject(apiError);
  }
);
// 静默刷新token的函数
const refreshTokenSilently = async () => {
  try {
    const refreshToken = getStorageItem('refreshToken');
    if (!refreshToken) return;
    const response = await axios.post<ApiResponse<{ accessToken: string; refreshToken: string; }>>(
      `${api.defaults.baseURL}/auth/refresh-token`,
      { refreshToken }
    );
    if (response.data.code === 200 && response.data.data) {
      const { accessToken, refreshToken: newRefreshToken } = response.data.data;
      setStorageItem('token', accessToken);
      setStorageItem('refreshToken', newRefreshToken);
      api.defaults.headers.common.Authorization = `Bearer ${accessToken}`;
    }
  } catch (error) {
    console.error('静默刷新token失败：', error);
  }
};
/**
 * 封装的请求函数
 */
export const request = {
  /**
   * GET请求
   * @param url 请求路径
   * @param config 请求配置
   */
  get: async <T>(url: string, config?: any): Promise<AxiosResponse<ApiResponse<T>>> => {
    try {
      return await api.get<ApiResponse<T>>(url, config);
    } catch (error) {
      // 如果配置中设置了silentOnAuthError，且是401或403错误，则静默失败（不打印错误）
      const isAuthError = axios.isAxiosError(error) && 
        (error.response?.status === 401 || error.response?.status === 403);
      if (!(config?.silentOnAuthError && isAuthError)) {
        console.error(`GET ${url} 请求失败:`, error);
      }
      throw error;
    }
  },
  /**
   * POST请求
   * @param url 请求路径
   * @param data 请求数据
   * @param config 请求配置
   */
  post: async <T>(url: string, data?: any, config?: any): Promise<AxiosResponse<ApiResponse<T>>> => {
    try {
      return await api.post<ApiResponse<T>>(url, data, config);
    } catch (error) {
      // 如果配置中设置了silentOnAuthError，且是401或403错误，则静默失败（不打印错误）
      const isAuthError = axios.isAxiosError(error) && 
        (error.response?.status === 401 || error.response?.status === 403);
      if (!(config?.silentOnAuthError && isAuthError)) {
        console.error(`POST ${url} 请求失败:`, error);
      }
      throw error;
    }
  },
  /**
   * PATCH请求
   * @param url 请求路径
   * @param data 请求数据
   * @param config 请求配置
   */
  patch: async <T>(url: string, data?: any, config?: any): Promise<AxiosResponse<ApiResponse<T>>> => {
    try {
      return await api.patch<ApiResponse<T>>(url, data, config);
    } catch (error) {
      // 如果配置中设置了silentOnAuthError，且是401或403错误，则静默失败（不打印错误）
      const isAuthError = axios.isAxiosError(error) && 
        (error.response?.status === 401 || error.response?.status === 403);
      if (!(config?.silentOnAuthError && isAuthError)) {
        console.error(`PATCH ${url} 请求失败:`, error);
      }
      throw error;
    }
  },
  /**
   * PUT请求
   * @param url 请求路径
   * @param data 请求数据
   * @param config 请求配置
   */
  put: async <T>(url: string, data?: any, config?: any): Promise<AxiosResponse<ApiResponse<T>>> => {
    try {
      return await api.put<ApiResponse<T>>(url, data, config);
    } catch (error) {
      // 如果配置中设置了silentOnAuthError，且是401或403错误，则静默失败（不打印错误）
      const isAuthError = axios.isAxiosError(error) && 
        (error.response?.status === 401 || error.response?.status === 403);
      if (!(config?.silentOnAuthError && isAuthError)) {
        console.error(`PUT ${url} 请求失败:`, error);
      }
      throw error;
    }
  },
  /**
   * DELETE请求
   * @param url 请求路径
   * @param config 请求配置
   */
  delete: async <T>(url: string, config?: any): Promise<AxiosResponse<ApiResponse<T>>> => {
    try {
      return await api.delete<ApiResponse<T>>(url, config);
    } catch (error) {
      // 如果配置中设置了silentOnAuthError，且是401或403错误，则静默失败（不打印错误）
      const isAuthError = axios.isAxiosError(error) && 
        (error.response?.status === 401 || error.response?.status === 403);
      if (!(config?.silentOnAuthError && isAuthError)) {
        console.error(`DELETE ${url} 请求失败:`, error);
      }
      throw error;
    }
  }
};
export default api;
</file>

<file path="front/src/services/auth.ts">
'use client';
import { CaptchaResponse, EmailVerificationRequest, LoginRequest, LoginResponse, RegisterRequest, User } from '@/types/auth';
import { request } from './api';
import axios from 'axios';
/**
 * 认证服务
 */
const authService = {
  /**
   * 获取验证码
   */
  getCaptcha: async () => {
    try {
      console.log('开始获取验证码');
      // 第一步：获取验证码key
      const keyResponse = await request.get<any>('/auth/captcha/key');
      // 检查响应
      if (!keyResponse || !keyResponse.data) {
        console.error('获取验证码key响应为空');
        throw new Error('获取验证码失败，响应为空');
      }
      if (keyResponse.data.code !== 200) {
        console.error('获取验证码key失败，错误码：', keyResponse.data.code, '错误信息：', keyResponse.data.message);
        throw new Error(keyResponse.data.message || '获取验证码失败');
      }
      // 提取验证码key
      const captchaKey = keyResponse.data.data;
      console.log('获取到验证码key：', captchaKey);
      if (!captchaKey) {
        console.error('验证码key为空');
        throw new Error('获取验证码失败，验证码key为空');
      }
      // 第二步：获取验证码图片
      const baseUrl = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8080/api';
      const imageUrl = `${baseUrl}/auth/captcha/image/${encodeURIComponent(captchaKey)}`;
      console.log('请求验证码图片URL:', imageUrl);
      const imageResponse = await axios.get(
        imageUrl, 
        { 
          responseType: 'arraybuffer'
        }
      );
      console.log('验证码图片响应状态：', imageResponse.status);
      // 将图片数据转换为base64
      const captchaImage = `data:image/jpeg;base64,${Buffer.from(imageResponse.data).toString('base64')}`;
      return { captchaId: captchaKey, captchaImage };
    } catch (error) {
      console.error('获取验证码失败：', error);
      throw new Error('获取验证码失败，请刷新页面重试');
    }
  },
  /**
   * 用户登录
   */
  login: async (data: LoginRequest) => {
    // 确保captchaKey和captchaCode正确传递
    console.log('开始登录，验证码参数：', {
      captchaKey: data.captchaKey,
      captchaCode: data.captchaCode
    });
    // 打印完整的请求参数（密码用星号隐藏）
    const logData = {
      ...data,
      password: '******'
    };
    console.log('登录请求参数：', logData);
    // 发起登录请求
    const response = await request.post<any>('/auth/login', data);
    console.log('登录响应：', response);
    // 检查是否有响应和响应数据
    if (!response || !response.data) {
      console.error('登录响应为空');
      throw new Error('登录失败，响应为空');
    }
    // 检查响应状态码
    if (response.data.code !== 200) {
      console.error('登录失败，错误码：', response.data.code, '错误信息：', response.data.message);
      throw new Error(response.data.message || '登录失败');
    }
    // 提取令牌数据
    const tokenData = response.data.data;
    console.log('提取的令牌数据：', tokenData);
    if (!tokenData) {
      console.error('令牌数据为空');
      throw new Error('登录失败，未获取到令牌数据');
    }
    if (!tokenData.accessToken) {
      console.error('访问令牌为空', tokenData);
      throw new Error('登录失败，未获取到有效的访问令牌');
    }
    // 为了兼容旧代码，设置token字段
    const loginResponse: LoginResponse = {
      accessToken: tokenData.accessToken,
      refreshToken: tokenData.refreshToken,
      tokenType: tokenData.tokenType || 'Bearer',
      expiresIn: tokenData.expiresIn || 0,
      token: tokenData.accessToken, // 兼容旧代码
      user: undefined // 稍后会尝试获取
    };
    try {
      // 获取用户信息
      console.log('尝试获取用户信息，使用令牌：', loginResponse.accessToken);
      // 确保使用正确的授权头
      const authHeader = {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `${loginResponse.tokenType} ${loginResponse.accessToken}`
        }
      };
      // 获取用户信息
      const userResponse = await request.get<User>('/users/current', authHeader);
      console.log('用户信息响应：', userResponse);
      if (userResponse?.data?.data) {
        loginResponse.user = userResponse.data.data;
        console.log('成功设置用户信息到登录响应');
      } else {
        console.warn('未获取到用户信息或格式不正确');
      }
    } catch (error) {
      console.error('获取用户信息失败', error);
      // 继续返回令牌数据，但没有用户信息
    }
    return loginResponse;
  },
  /**
   * 用户注册
   */
  register: async (data: RegisterRequest) => {
    const response = await request.post<{ message: string }>('/auth/register', data);
    return response.data.data;
  },
  /**
   * 刷新令牌
   */
  refreshToken: async (refreshToken: string) => {
    // 发起刷新令牌请求
    const response = await request.post<any>(
      '/auth/refresh-token',
      { refreshToken }
    );
    console.log('刷新令牌响应：', response);
    // 检查是否有响应和响应数据
    if (!response || !response.data) {
      console.error('刷新令牌响应为空');
      throw new Error('刷新令牌失败，响应为空');
    }
    // 检查响应状态码
    if (response.data.code !== 200) {
      console.error('刷新令牌失败，错误码：', response.data.code, '错误信息：', response.data.message);
      throw new Error(response.data.message || '刷新令牌失败');
    }
    // 提取令牌数据
    const tokenData = response.data.data;
    console.log('提取的令牌数据：', tokenData);
    if (!tokenData) {
      console.error('令牌数据为空');
      throw new Error('刷新令牌失败，未获取到令牌数据');
    }
    if (!tokenData.accessToken) {
      console.error('访问令牌为空', tokenData);
      throw new Error('刷新令牌失败，未获取到有效的访问令牌');
    }
    // 构造响应对象
    const loginResponse: LoginResponse = {
      accessToken: tokenData.accessToken,
      refreshToken: tokenData.refreshToken,
      tokenType: tokenData.tokenType || 'Bearer',
      expiresIn: tokenData.expiresIn || 0,
      token: tokenData.accessToken // 兼容旧代码
    };
    return loginResponse;
  },
  /**
   * 用户注销
   */
  logout: async () => {
    const response = await request.post<{ message: string }>('/auth/logout');
    return response.data.data;
  },
  /**
   * 获取当前用户信息
   */
  getCurrentUser: async () => {
    console.log('开始获取当前用户信息');
    try {
      // 获取存储的访问令牌
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('获取用户信息失败：未找到访问令牌');
        throw new Error('获取用户信息失败：未找到访问令牌');
      }
      // 确保使用正确的API路径和授权头
      const response = await request.get<any>('/users/current', {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });
      console.log('获取用户信息响应：', response);
      // 检查是否有响应和响应数据
      if (!response || !response.data) {
        console.error('获取用户信息响应为空');
        throw new Error('获取用户信息失败，响应为空');
      }
      // 检查响应状态码
      if (response.data.code !== 200) {
        console.error('获取用户信息失败，错误码：', response.data.code, '错误信息：', response.data.message);
        throw new Error(response.data.message || '获取用户信息失败');
      }
      // 提取用户数据
      const userData = response.data.data;
      console.log('提取的用户数据：', userData);
      if (!userData) {
        console.error('用户数据为空');
        throw new Error('获取用户信息失败，用户数据为空');
      }
      return userData;
    } catch (error) {
      console.error('获取用户信息出错：', error);
      throw error;
    }
  },
  /**
   * 发送邮箱验证码
   */
  sendEmailVerificationCode: async (data: EmailVerificationRequest) => {
    console.log('开始发送邮箱验证码，参数：', {
      email: data.email,
      captchaKey: data.captchaKey,
      captchaCode: data.captchaCode
    });
    const response = await request.post<any>('/auth/email-verification-code', data);
    console.log('发送邮箱验证码响应：', response);
    // 检查响应状态
    if (!response || !response.data) {
      console.error('发送邮箱验证码响应为空');
      throw new Error('发送邮箱验证码失败，响应为空');
    }
    if (response.data.code !== 200) {
      console.error('发送邮箱验证码失败，错误码：', response.data.code, '错误信息：', response.data.message);
      throw new Error(response.data.message || '发送邮箱验证码失败');
    }
    return response.data.data;
  }
};
export default authService;
</file>

<file path="front/src/services/institution.ts">
import { request } from './api';
import { InstitutionApplyRequest, InstitutionApplicationResponse } from '@/types/institution';
/**
 * 机构服务 - 处理机构申请和查询相关接口
 */
export const institutionService = {
  /**
   * 申请创建机构
   * @param data 申请数据
   * @returns 申请ID
   */
  async applyInstitution(data: InstitutionApplyRequest): Promise<string> {
    const response = await request.post<string>('/institutions/apply', data);
    return response.data.data;
  },
  /**
   * 查询申请状态
   * @param applicationId 申请ID
   * @param email 联系邮箱
   * @returns 申请详情
   */
  async getApplicationStatus(applicationId: string, email: string): Promise<InstitutionApplicationResponse> {
    const response = await request.get<InstitutionApplicationResponse>(
      `/institutions/application-status?applicationId=${applicationId}&email=${encodeURIComponent(email)}`
    );
    return response.data.data;
  }
};
export default institutionService;
</file>

<file path="front/src/services/institutionAuth.ts">
import { request } from './api';
import { InstitutionRegisterRequest } from '@/types/institution';
/**
 * 机构认证服务 - 处理机构用户注册相关接口
 */
export const institutionAuthService = {
  /**
   * 使用机构注册码注册机构用户
   * @param data 注册数据
   */
  async register(data: InstitutionRegisterRequest): Promise<void> {
    try {
      console.log("发送机构用户注册请求到: /auth/institution/register");
      const response = await request.post('/auth/institution/register', data);
      console.log("注册API响应:", response.data);
      // 检查响应状态
      if (response.data.code !== 200 && response.data.code !== 201) {
        throw {
          code: response.data.code,
          message: response.data.message || "注册失败",
          errors: response.data.errors
        };
      }
    } catch (error) {
      console.error("机构注册服务捕获到错误:", error);
      throw error;
    }
  }
};
export default institutionAuthService;
</file>

<file path="front/src/services/institutionMember.ts">
import { request } from './api';
/**
 * 机构成员服务 - 处理机构成员管理相关接口
 */
export const institutionMemberService = {
  /**
   * 获取机构注册码（机构用户）
   * @returns 机构注册码
   */
  async getRegisterCode(): Promise<string> {
    const response = await request.get<string>('/institutions/members/register-code');
    return response.data.data;
  }
};
export default institutionMemberService;
</file>

<file path="front/src/services/permission.ts">
'use client';
import { request } from './api';
import { Permission, PermissionDTO } from '@/types/permission';
import { ApiResponse } from '@/types/api';
import { AxiosResponse } from 'axios';
/**
 * 权限管理服务
 */
const permissionService = {
  /**
   * 获取权限列表
   */
  getPermissionList: async (): Promise<Permission[]> => {
    try {
      const response: AxiosResponse<ApiResponse<Permission[]>> = await request.get<Permission[]>('/permissions');
      return response.data.data;
    } catch (error) {
      console.error('获取权限列表失败:', error);
      throw error;
    }
  },
  /**
   * 根据ID获取权限详情
   */
  getPermissionById: async (id: number): Promise<Permission> => {
    try {
      const response: AxiosResponse<ApiResponse<Permission>> = await request.get<Permission>(`/permissions/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`获取权限详情失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 创建权限
   */
  createPermission: async (permission: PermissionDTO): Promise<Permission> => {
    try {
      const response: AxiosResponse<ApiResponse<Permission>> = await request.post<Permission>('/permissions', permission);
      return response.data.data;
    } catch (error) {
      console.error('创建权限失败:', error);
      throw error;
    }
  },
  /**
   * 更新权限
   */
  updatePermission: async (id: number, permission: PermissionDTO): Promise<Permission> => {
    try {
      const response: AxiosResponse<ApiResponse<Permission>> = await request.put<Permission>(`/permissions/${id}`, permission);
      return response.data.data;
    } catch (error) {
      console.error(`更新权限失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 删除权限
   */
  deletePermission: async (id: number): Promise<void> => {
    try {
      await request.delete(`/permissions/${id}`);
    } catch (error) {
      console.error(`删除权限失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 批量删除权限
   */
  batchDeletePermissions: async (ids: number[]): Promise<void> => {
    try {
      await request.delete('/permissions/batch', { data: ids });
    } catch (error) {
      console.error('批量删除权限失败:', error);
      throw error;
    }
  }
};
export default permissionService;
</file>

<file path="front/src/services/reviewerInstitution.ts">
import { request } from './api';
import { InstitutionApplicationResponse, InstitutionResponse, Page, InstitutionApplicationQueryParams } from '@/types/institution';
/**
 * 机构审核服务 - 处理机构申请审核相关接口（管理员/审核员使用）
 */
export const reviewerInstitutionService = {
  /**
   * 分页查询机构申请列表
   * @param params 查询参数
   * @returns 申请列表分页数据
   */
  async getApplications(params: InstitutionApplicationQueryParams): Promise<Page<InstitutionApplicationResponse>> {
    const { page = 0, size = 10, status } = params;
    let url = `/reviewer/institutions/applications?page=${page}&size=${size}`;
    if (status !== undefined) {
      url += `&status=${status}`;
    }
    if (params.name) {
      url += `&name=${encodeURIComponent(params.name)}`;
    }
    if (params.applicationId) {
      url += `&applicationId=${encodeURIComponent(params.applicationId)}`;
    }
    if (params.contactEmail) {
      url += `&contactEmail=${encodeURIComponent(params.contactEmail)}`;
    }
    if (params.contactPerson) {
      url += `&contactPerson=${encodeURIComponent(params.contactPerson)}`;
    }
    const response = await request.get<Page<InstitutionApplicationResponse>>(url);
    return response.data.data;
  },
  /**
   * 获取申请详情
   * @param id 申请ID
   * @returns 申请详情
   */
  async getApplicationDetail(id: number): Promise<InstitutionApplicationResponse> {
    const response = await request.get<InstitutionApplicationResponse>(`/reviewer/institutions/applications/${id}`);
    return response.data.data;
  },
  /**
   * 审核通过
   * @param id 申请ID
   * @returns 创建的机构信息
   */
  async approveApplication(id: number): Promise<InstitutionResponse> {
    const response = await request.post<InstitutionResponse>(`/reviewer/institutions/applications/${id}/approve`);
    return response.data.data;
  },
  /**
   * 审核拒绝
   * @param id 申请ID
   * @param reason 拒绝原因
   */
  async rejectApplication(id: number, reason: string): Promise<void> {
    await request.post(`/reviewer/institutions/applications/${id}/reject?reason=${encodeURIComponent(reason)}`);
  }
};
export default reviewerInstitutionService;
</file>

<file path="front/src/services/role.ts">
'use client';
import { request } from './api';
import { Role, RoleDTO } from '@/types/role';
import { ApiResponse } from '@/types/api';
import { AxiosResponse } from 'axios';
/**
 * 角色管理服务
 */
const roleService = {
  /**
   * 获取角色列表
   */
  getRoleList: async (): Promise<Role[]> => {
    try {
      const response: AxiosResponse<ApiResponse<Role[]>> = await request.get<Role[]>('/roles');
      return response.data.data;
    } catch (error) {
      console.error('获取角色列表失败:', error);
      throw error;
    }
  },
  /**
   * 根据ID获取角色详情
   */
  getRoleById: async (id: number): Promise<Role> => {
    try {
      const response: AxiosResponse<ApiResponse<Role>> = await request.get<Role>(`/roles/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`获取角色详情失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 创建角色
   */
  createRole: async (role: RoleDTO): Promise<Role> => {
    try {
      const response: AxiosResponse<ApiResponse<Role>> = await request.post<Role>('/roles', role);
      return response.data.data;
    } catch (error) {
      console.error('创建角色失败:', error);
      throw error;
    }
  },
  /**
   * 更新角色
   */
  updateRole: async (id: number, role: RoleDTO): Promise<Role> => {
    try {
      const response: AxiosResponse<ApiResponse<Role>> = await request.put<Role>(`/roles/${id}`, role);
      return response.data.data;
    } catch (error) {
      console.error(`更新角色失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 删除角色
   */
  deleteRole: async (id: number): Promise<void> => {
    try {
      await request.delete(`/roles/${id}`);
    } catch (error) {
      console.error(`删除角色失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 批量删除角色
   */
  batchDeleteRoles: async (ids: number[]): Promise<void> => {
    try {
      await request.delete('/roles/batch', { data: ids });
    } catch (error) {
      console.error('批量删除角色失败:', error);
      throw error;
    }
  },
  /**
   * 给角色分配权限
   */
  assignPermissions: async (roleId: number, permissionIds: number[]): Promise<Role> => {
    try {
      const response: AxiosResponse<ApiResponse<Role>> = await request.put<Role>(
        `/roles/${roleId}/permissions`, 
        permissionIds
      );
      return response.data.data;
    } catch (error) {
      console.error(`给角色分配权限失败, roleId: ${roleId}:`, error);
      throw error;
    }
  }
};
export default roleService;
</file>

<file path="front/src/services/user.ts">
'use client';
import { request } from './api';
import { User } from '@/types/auth';
import { UserDTO, UserQueryParams, UserPageResponse, UserStatusDTO } from '@/types/user';
import { ApiResponse } from '@/types/api';
import { AxiosResponse } from 'axios';
// 用户个人资料更新请求参数
export interface ProfileUpdateRequest {
  nickname?: string;
  phone?: string;
}
// 密码修改请求参数
export interface PasswordChangeRequest {
  oldPassword: string;
  newPassword: string;
  confirmPassword: string;
}
// 邮箱更新验证码请求参数
export interface EmailCodeRequest {
  email: string;
  captchaKey: string;
  captchaCode: string;
}
// 邮箱更新请求参数
export interface EmailUpdateRequest {
  newEmail: string;
  emailCode: string;
  password: string;
}
// 头像上传响应
export interface AvatarUploadResponse {
  avatarUrl: string;
}
/**
 * 用户服务
 */
const userService = {
  /**
   * 获取当前用户信息
   */
  getCurrentUser: async (): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.get<User>('/users/current', {
        // 允许用户登出后静默失败
        silentError: true
      });
      return response.data.data;
    } catch (error) {
      console.error('获取用户信息失败', error);
      throw error;
    }
  },
  /**
   * 更新当前用户个人资料
   */
  updateCurrentUserProfile: async (profile: ProfileUpdateRequest): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.put<User>('/users/current', profile);
      return response.data.data;
    } catch (error) {
      console.error('更新用户资料失败:', error);
      throw error;
    }
  },
  /**
   * 修改当前用户密码
   */
  changePassword: async (passwordData: PasswordChangeRequest): Promise<void> => {
    try {
      await request.put('/users/current/password', passwordData);
    } catch (error) {
      console.error('修改密码失败:', error);
      throw error;
    }
  },
  /**
   * 上传用户头像
   */
  uploadAvatar: async (file: File): Promise<AvatarUploadResponse> => {
    try {
      const formData = new FormData();
      formData.append('file', file);
      const response: AxiosResponse<ApiResponse<AvatarUploadResponse>> = await request.post<AvatarUploadResponse>(
        '/users/current/avatar',
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        }
      );
      return response.data.data;
    } catch (error) {
      console.error('上传头像失败:', error);
      throw error;
    }
  },
  /**
   * 更新用户邮箱
   */
  updateEmail: async (emailData: EmailUpdateRequest): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.put<User>('/users/current/email', emailData);
      return response.data.data;
    } catch (error) {
      console.error('更新邮箱失败:', error);
      throw error;
    }
  },
  /**
   * 获取用户基本信息
   */
  getBasicUserInfo: async (userId: number): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.get<User>(`/users/basic/${userId}`);
      return response.data.data;
    } catch (error) {
      console.error(`获取用户基本信息失败, ID: ${userId}:`, error);
      throw error;
    }
  },
  /**
   * 获取用户列表（分页）
   */
  getUserList: async (queryParams: UserQueryParams): Promise<UserPageResponse> => {
    try {
      const response: AxiosResponse<ApiResponse<UserPageResponse>> = await request.get<UserPageResponse>(
        '/users',
        { params: queryParams }
      );
      return response.data.data;
    } catch (error) {
      console.error('获取用户列表失败:', error);
      throw error;
    }
  },
  /**
   * 根据ID获取用户详情
   */
  getUserById: async (id: number): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.get<User>(`/users/${id}`);
      return response.data.data;
    } catch (error) {
      console.error(`获取用户详情失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 创建用户
   */
  createUser: async (user: UserDTO): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.post<User>('/users', user);
      return response.data.data;
    } catch (error) {
      console.error('创建用户失败:', error);
      throw error;
    }
  },
  /**
   * 更新用户
   */
  updateUser: async (id: number, user: UserDTO): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.put<User>(`/users/${id}`, user);
      return response.data.data;
    } catch (error) {
      console.error(`更新用户失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 删除用户
   */
  deleteUser: async (id: number): Promise<void> => {
    try {
      await request.delete(`/users/${id}`);
    } catch (error) {
      console.error(`删除用户失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 批量删除用户
   */
  batchDeleteUsers: async (ids: number[]): Promise<void> => {
    try {
      await request.delete('/users/batch', { data: ids });
    } catch (error) {
      console.error('批量删除用户失败:', error);
      throw error;
    }
  },
  /**
   * 修改用户状态
   */
  updateUserStatus: async (id: number, status: UserStatusDTO): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.patch<User>(
        `/users/${id}/status?status=${status.status}`
      );
      return response.data.data;
    } catch (error) {
      console.error(`修改用户状态失败, ID: ${id}:`, error);
      throw error;
    }
  },
  /**
   * 给用户分配角色
   */
  assignRoles: async (userId: number, roleIds: number[]): Promise<User> => {
    try {
      const response: AxiosResponse<ApiResponse<User>> = await request.put<User>(
        `/users/${userId}/roles`, 
        roleIds
      );
      return response.data.data;
    } catch (error) {
      console.error(`给用户分配角色失败, userId: ${userId}:`, error);
      throw error;
    }
  }
};
export default userService;
</file>

<file path="front/src/stores/auth-store.ts">
'use client';
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
import { User, LoginRequest, RegisterRequest, EmailVerificationRequest } from '@/types/auth';
import authService from '@/services/auth';
import { ApiError } from '@/types/api';
// 认证状态接口
interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  // 认证方法
  login: (credentials: LoginRequest) => Promise<void>;
  register: (data: RegisterRequest) => Promise<void>;
  logout: () => Promise<void>;
  refreshToken: () => Promise<void>;
  sendEmailVerificationCode: (data: EmailVerificationRequest) => Promise<void>;
  // 状态管理方法
  setUser: (user: User | null) => void;
  clearError: () => void;
  handleApiError: (error: any) => Promise<void>;
  // 添加初始化方法
  initializeAuth: () => Promise<void>;
}
// 创建认证状态
export const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      user: null,
      isAuthenticated: false,
      isLoading: false,
      error: null,
      // 初始化认证状态
      initializeAuth: async () => {
        const token = localStorage.getItem('token');
        const refreshToken = localStorage.getItem('refreshToken');
        if (!token || !refreshToken) {
          set({ isAuthenticated: false, user: null });
          return;
        }
        // 如果有token但没有user信息，尝试获取用户信息
        if (!get().user && token) {
          try {
            const user = await authService.getCurrentUser();
            set({ user, isAuthenticated: true });
          } catch (error) {
            // 如果获取用户信息失败，尝试刷新token
            try {
              await get().refreshToken();
            } catch (refreshError) {
              // 如果刷新也失败，清除认证状态
              await get().logout();
            }
          }
        }
      },
      // 登录方法
      login: async (credentials: LoginRequest) => {
        set({ isLoading: true, error: null });
        console.log('开始登录，凭据：', { ...credentials, password: '******' });
        try {
          const response = await authService.login(credentials);
          console.log('登录成功，响应：', { ...response, accessToken: '******', refreshToken: '******' });
          if (!response.accessToken) {
            console.error('登录失败：未获取到有效的访问令牌');
            set({
              isLoading: false,
              error: '登录失败：未获取到有效的访问令牌',
            });
            throw new Error('登录失败：未获取到有效的访问令牌');
          }
          // 存储令牌
          localStorage.setItem('token', response.accessToken);
          localStorage.setItem('refreshToken', response.refreshToken);
          // 设置cookie
          document.cookie = `token=${response.accessToken}; path=/`;
          document.cookie = `refreshToken=${response.refreshToken}; path=/`;
          // 获取用户信息（只在首次登录时获取）
          try {
            const user = await authService.getCurrentUser();
            console.log('成功获取用户信息：', user);
            // 更新状态，包含用户信息
            set({
              user: user,
              isAuthenticated: true,
              isLoading: false,
            });
          } catch (userError) {
            console.error('获取用户信息失败：', userError);
            // 如果获取用户信息失败，认为是认证失败
            set({
              isLoading: false,
              error: '登录失败：无法获取用户信息',
              isAuthenticated: false,
              user: null
            });
            throw userError;
          }
        } catch (error) {
          const apiError = error as ApiError;
          console.error('登录失败：', apiError);
          set({
            isLoading: false,
            error: apiError.message || '登录失败',
          });
          throw error;
        }
      },
      // 注册方法
      register: async (data: RegisterRequest) => {
        set({ isLoading: true, error: null });
        try {
          await authService.register(data);
          set({ isLoading: false });
        } catch (error) {
          const apiError = error as ApiError;
          set({
            isLoading: false,
            error: apiError.message || '注册失败',
          });
          throw error;
        }
      },
      // 发送邮箱验证码
      sendEmailVerificationCode: async (data: EmailVerificationRequest) => {
        set({ isLoading: true, error: null });
        try {
          await authService.sendEmailVerificationCode(data);
          set({ isLoading: false });
        } catch (error) {
          const apiError = error as ApiError;
          set({
            isLoading: false,
            error: apiError.message || '发送邮箱验证码失败',
          });
          throw error;
        }
      },
      // 注销方法
      logout: async () => {
        set({ isLoading: true });
        try {
          const token = localStorage.getItem('token');
          if (token) {
            await authService.logout();
          }
        } catch (error) {
          console.error('注销时发生错误：', error);
        } finally {
          // 清除所有认证相关的状态和存储
          localStorage.removeItem('token');
          localStorage.removeItem('refreshToken');
          // 清除cookie
          document.cookie = 'token=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT';
          document.cookie = 'refreshToken=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT';
          // 更新状态
          set({
            user: null,
            isAuthenticated: false,
            isLoading: false,
            error: null
          });
        }
      },
      // 刷新令牌
      refreshToken: async () => {
        const refreshToken = localStorage.getItem('refreshToken');
        console.log('尝试刷新令牌，有刷新令牌：', !!refreshToken);
        if (!refreshToken) {
          console.warn('无法刷新令牌：没有刷新令牌');
          await get().logout();
          return;
        }
        set({ isLoading: true });
        try {
          const response = await authService.refreshToken(refreshToken);
          console.log('刷新令牌成功，响应：', { ...response, accessToken: '******', refreshToken: '******' });
          if (!response.accessToken) {
            console.error('刷新令牌失败：未获取到有效的访问令牌');
            throw new Error('刷新令牌失败：未获取到有效的访问令牌');
          }
          // 更新令牌
          localStorage.setItem('token', response.accessToken);
          localStorage.setItem('refreshToken', response.refreshToken);
          // 设置cookie
          document.cookie = `token=${response.accessToken}; path=/`;
          document.cookie = `refreshToken=${response.refreshToken}; path=/`;
          // 保持当前用户信息不变，只更新认证状态
          set({
            isLoading: false,
            isAuthenticated: true
          });
          console.log('令牌已更新');
        } catch (error) {
          console.error('刷新令牌失败：', error);
          // 刷新失败直接登出
          await get().logout();
        }
      },
      // 设置用户
      setUser: (user: User | null) => {
        set({
          user,
          isAuthenticated: !!user,
        });
      },
      // 清除错误
      clearError: () => {
        set({ error: null });
      },
      // 处理API请求错误
      handleApiError: async (error: any) => {
        if (error.status === 401) {
          // token失效直接登出
          await get().logout();
          return;
        }
        // 其他错误正常处理
        set({ error: error.message || '请求失败' });
      },
    }),
    {
      name: 'auth-storage',
      partialize: (state) => ({
        user: state.user,
        isAuthenticated: state.isAuthenticated
      }),
      // 添加存储版本控制
      version: 1,
      // 添加迁移逻辑
      migrate: (persistedState: any, version: number) => {
        if (version === 0) {
          // 处理旧版本的状态迁移
          return {
            user: persistedState.user,
            isAuthenticated: persistedState.isAuthenticated
          };
        }
        return persistedState;
      }
    }
  )
);
</file>

<file path="front/src/stores/permission-store.ts">
'use client';
import { create } from 'zustand';
import { Permission, PermissionDTO } from '@/types/permission';
import permissionService from '@/services/permission';
import { toast } from 'sonner';
interface PermissionState {
  // 权限列表
  permissions: Permission[];
  // 当前编辑的权限
  currentPermission: Permission | null;
  // 加载状态
  isLoading: boolean;
  // 错误信息
  error: string | null;
  // 表单可见性
  formVisible: boolean;
  // 确认对话框可见性
  confirmDialogVisible: boolean;
  // 待删除的权限ID列表
  selectedIds: number[];
  // 获取权限列表
  fetchPermissions: () => Promise<void>;
  // 根据ID获取权限
  fetchPermissionById: (id: number) => Promise<void>;
  // 创建权限
  createPermission: (permission: PermissionDTO) => Promise<void>;
  // 更新权限
  updatePermission: (id: number, permission: PermissionDTO) => Promise<void>;
  // 删除权限
  deletePermission: (id: number) => Promise<void>;
  // 批量删除权限
  batchDeletePermissions: (ids: number[]) => Promise<void>;
  // 设置当前权限
  setCurrentPermission: (permission: Permission | null) => void;
  // 设置表单可见性
  setFormVisible: (visible: boolean) => void;
  // 设置确认对话框可见性
  setConfirmDialogVisible: (visible: boolean) => void;
  // 设置选中权限ID列表
  setSelectedIds: (ids: number[]) => void;
  // 添加选中权限ID
  addSelectedId: (id: number) => void;
  // 移除选中权限ID
  removeSelectedId: (id: number) => void;
  // 切换选中权限ID
  toggleSelectedId: (id: number) => void;
  // 清空选中权限ID
  clearSelectedIds: () => void;
  // 清除错误
  clearError: () => void;
}
export const usePermissionStore = create<PermissionState>()((set, get) => ({
  permissions: [],
  currentPermission: null,
  isLoading: false,
  error: null,
  formVisible: false,
  confirmDialogVisible: false,
  selectedIds: [],
  // 获取权限列表
  fetchPermissions: async () => {
    set({ isLoading: true, error: null });
    try {
      const permissions = await permissionService.getPermissionList();
      set({ permissions, isLoading: false });
    } catch (error) {
      console.error('获取权限列表失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '获取权限列表失败' 
      });
      toast.error('获取权限列表失败');
    }
  },
  // 根据ID获取权限
  fetchPermissionById: async (id: number) => {
    set({ isLoading: true, error: null });
    try {
      const permission = await permissionService.getPermissionById(id);
      set({ currentPermission: permission, isLoading: false });
    } catch (error) {
      console.error(`获取权限详情失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '获取权限详情失败'
      });
      toast.error('获取权限详情失败');
    }
  },
  // 创建权限
  createPermission: async (permission: PermissionDTO) => {
    set({ isLoading: true, error: null });
    try {
      const createdPermission = await permissionService.createPermission(permission);
      set(state => ({ 
        permissions: [...state.permissions, createdPermission],
        isLoading: false,
        formVisible: false,
        currentPermission: null
      }));
      toast.success('创建权限成功');
    } catch (error) {
      console.error('创建权限失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '创建权限失败'
      });
      toast.error('创建权限失败');
    }
  },
  // 更新权限
  updatePermission: async (id: number, permission: PermissionDTO) => {
    set({ isLoading: true, error: null });
    try {
      const updatedPermission = await permissionService.updatePermission(id, permission);
      set(state => ({
        permissions: state.permissions.map(p => p.id === id ? updatedPermission : p),
        isLoading: false,
        formVisible: false,
        currentPermission: null
      }));
      toast.success('更新权限成功');
    } catch (error) {
      console.error(`更新权限失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '更新权限失败'
      });
      toast.error('更新权限失败');
    }
  },
  // 删除权限
  deletePermission: async (id: number) => {
    set({ isLoading: true, error: null });
    try {
      await permissionService.deletePermission(id);
      set(state => ({
        permissions: state.permissions.filter(p => p.id !== id),
        isLoading: false
      }));
      toast.success('删除权限成功');
    } catch (error) {
      console.error(`删除权限失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '删除权限失败'
      });
      toast.error('删除权限失败');
    }
  },
  // 批量删除权限
  batchDeletePermissions: async (ids: number[]) => {
    set({ isLoading: true, error: null });
    try {
      await permissionService.batchDeletePermissions(ids);
      set(state => ({
        permissions: state.permissions.filter(p => !ids.includes(p.id)),
        isLoading: false,
        selectedIds: [],
        confirmDialogVisible: false
      }));
      toast.success('批量删除权限成功');
    } catch (error) {
      console.error('批量删除权限失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '批量删除权限失败'
      });
      toast.error('批量删除权限失败');
    }
  },
  // 设置当前权限
  setCurrentPermission: (permission) => {
    set({ currentPermission: permission });
  },
  // 设置表单可见性
  setFormVisible: (visible) => {
    // 如果关闭表单，清空当前权限
    if (!visible) {
      set({ currentPermission: null });
    }
    set({ formVisible: visible });
  },
  // 设置确认对话框可见性
  setConfirmDialogVisible: (visible) => {
    set({ confirmDialogVisible: visible });
  },
  // 设置选中权限ID列表
  setSelectedIds: (ids) => {
    set({ selectedIds: ids });
  },
  // 添加选中权限ID
  addSelectedId: (id) => {
    set(state => ({
      selectedIds: [...state.selectedIds, id]
    }));
  },
  // 移除选中权限ID
  removeSelectedId: (id) => {
    set(state => ({
      selectedIds: state.selectedIds.filter(itemId => itemId !== id)
    }));
  },
  // 切换选中权限ID
  toggleSelectedId: (id) => {
    set(state => {
      if (state.selectedIds.includes(id)) {
        return { selectedIds: state.selectedIds.filter(itemId => itemId !== id) };
      } else {
        return { selectedIds: [...state.selectedIds, id] };
      }
    });
  },
  // 清空选中权限ID
  clearSelectedIds: () => {
    set({ selectedIds: [] });
  },
  // 清除错误
  clearError: () => {
    set({ error: null });
  }
}));
</file>

<file path="front/src/stores/role-store.ts">
'use client';
import { create } from 'zustand';
import { Role, RoleDTO } from '@/types/role';
import roleService from '@/services/role';
import { toast } from 'sonner';
interface RoleState {
  // 角色列表
  roles: Role[];
  // 当前编辑的角色
  currentRole: Role | null;
  // 加载状态
  isLoading: boolean;
  // 错误信息
  error: string | null;
  // 表单可见性
  formVisible: boolean;
  // 确认对话框可见性
  confirmDialogVisible: boolean;
  // 权限分配对话框可见性
  permissionDialogVisible: boolean;
  // 待删除的角色ID列表
  selectedIds: number[];
  // 获取角色列表
  fetchRoles: () => Promise<void>;
  // 根据ID获取角色
  fetchRoleById: (id: number) => Promise<void>;
  // 创建角色
  createRole: (role: RoleDTO) => Promise<void>;
  // 更新角色
  updateRole: (id: number, role: RoleDTO) => Promise<void>;
  // 删除角色
  deleteRole: (id: number) => Promise<void>;
  // 批量删除角色
  batchDeleteRoles: (ids: number[]) => Promise<void>;
  // 给角色分配权限
  assignPermissions: (roleId: number, permissionIds: number[]) => Promise<void>;
  // 设置当前角色
  setCurrentRole: (role: Role | null) => void;
  // 设置表单可见性
  setFormVisible: (visible: boolean) => void;
  // 设置确认对话框可见性
  setConfirmDialogVisible: (visible: boolean) => void;
  // 设置权限分配对话框可见性
  setPermissionDialogVisible: (visible: boolean) => void;
  // 设置选中角色ID列表
  setSelectedIds: (ids: number[]) => void;
  // 添加选中角色ID
  addSelectedId: (id: number) => void;
  // 移除选中角色ID
  removeSelectedId: (id: number) => void;
  // 切换选中角色ID
  toggleSelectedId: (id: number) => void;
  // 清空选中角色ID
  clearSelectedIds: () => void;
  // 清除错误
  clearError: () => void;
}
export const useRoleStore = create<RoleState>()((set, get) => ({
  roles: [],
  currentRole: null,
  isLoading: false,
  error: null,
  formVisible: false,
  confirmDialogVisible: false,
  permissionDialogVisible: false,
  selectedIds: [],
  // 获取角色列表
  fetchRoles: async () => {
    set({ isLoading: true, error: null });
    try {
      const roles = await roleService.getRoleList();
      set({ roles, isLoading: false });
    } catch (error) {
      console.error('获取角色列表失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '获取角色列表失败' 
      });
      toast.error('获取角色列表失败');
    }
  },
  // 根据ID获取角色
  fetchRoleById: async (id: number) => {
    set({ isLoading: true, error: null });
    try {
      const role = await roleService.getRoleById(id);
      set({ currentRole: role, isLoading: false });
    } catch (error) {
      console.error(`获取角色详情失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '获取角色详情失败'
      });
      toast.error('获取角色详情失败');
    }
  },
  // 创建角色
  createRole: async (role: RoleDTO) => {
    set({ isLoading: true, error: null });
    try {
      const createdRole = await roleService.createRole(role);
      set(state => ({ 
        roles: [...state.roles, createdRole],
        isLoading: false,
        formVisible: false,
        currentRole: null
      }));
      toast.success('创建角色成功');
    } catch (error) {
      console.error('创建角色失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '创建角色失败'
      });
      toast.error('创建角色失败');
    }
  },
  // 更新角色
  updateRole: async (id: number, role: RoleDTO) => {
    set({ isLoading: true, error: null });
    try {
      const updatedRole = await roleService.updateRole(id, role);
      set(state => ({
        roles: state.roles.map(r => r.id === id ? updatedRole : r),
        isLoading: false,
        formVisible: false,
        currentRole: null
      }));
      toast.success('更新角色成功');
    } catch (error) {
      console.error(`更新角色失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '更新角色失败'
      });
      toast.error('更新角色失败');
    }
  },
  // 删除角色
  deleteRole: async (id: number) => {
    set({ isLoading: true, error: null });
    try {
      await roleService.deleteRole(id);
      set(state => ({
        roles: state.roles.filter(r => r.id !== id),
        isLoading: false
      }));
      toast.success('删除角色成功');
    } catch (error) {
      console.error(`删除角色失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '删除角色失败'
      });
      toast.error('删除角色失败');
    }
  },
  // 批量删除角色
  batchDeleteRoles: async (ids: number[]) => {
    set({ isLoading: true, error: null });
    try {
      await roleService.batchDeleteRoles(ids);
      set(state => ({
        roles: state.roles.filter(r => !ids.includes(r.id)),
        isLoading: false,
        selectedIds: [],
        confirmDialogVisible: false
      }));
      toast.success('批量删除角色成功');
    } catch (error) {
      console.error('批量删除角色失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '批量删除角色失败'
      });
      toast.error('批量删除角色失败');
    }
  },
  // 给角色分配权限
  assignPermissions: async (roleId: number, permissionIds: number[]) => {
    set({ isLoading: true, error: null });
    try {
      const updatedRole = await roleService.assignPermissions(roleId, permissionIds);
      set(state => ({
        roles: state.roles.map(r => r.id === roleId ? updatedRole : r),
        isLoading: false,
        permissionDialogVisible: false,
        currentRole: null
      }));
      toast.success('权限分配成功');
    } catch (error) {
      console.error(`权限分配失败, roleId: ${roleId}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '权限分配失败'
      });
      toast.error('权限分配失败');
    }
  },
  // 设置当前角色
  setCurrentRole: (role) => {
    set({ currentRole: role });
  },
  // 设置表单可见性
  setFormVisible: (visible) => {
    // 如果关闭表单，清空当前角色
    if (!visible) {
      set({ currentRole: null });
    }
    set({ formVisible: visible });
  },
  // 设置确认对话框可见性
  setConfirmDialogVisible: (visible) => {
    set({ confirmDialogVisible: visible });
  },
  // 设置权限分配对话框可见性
  setPermissionDialogVisible: (visible) => {
    set({ permissionDialogVisible: visible });
  },
  // 设置选中角色ID列表
  setSelectedIds: (ids) => {
    set({ selectedIds: ids });
  },
  // 添加选中角色ID
  addSelectedId: (id) => {
    set(state => ({
      selectedIds: [...state.selectedIds, id]
    }));
  },
  // 移除选中角色ID
  removeSelectedId: (id) => {
    set(state => ({
      selectedIds: state.selectedIds.filter(itemId => itemId !== id)
    }));
  },
  // 切换选中角色ID
  toggleSelectedId: (id) => {
    set(state => {
      if (state.selectedIds.includes(id)) {
        return { selectedIds: state.selectedIds.filter(itemId => itemId !== id) };
      } else {
        return { selectedIds: [...state.selectedIds, id] };
      }
    });
  },
  // 清空选中角色ID
  clearSelectedIds: () => {
    set({ selectedIds: [] });
  },
  // 清除错误
  clearError: () => {
    set({ error: null });
  }
}));
</file>

<file path="front/src/stores/ui-store.ts">
'use client';
import { create } from 'zustand';
import { persist } from 'zustand/middleware';
// 主题类型
export type Theme = 'light' | 'dark' | 'system';
// UI状态接口
interface UIState {
  // 侧边栏状态
  sidebarOpen: boolean;
  toggleSidebar: () => void;
  setSidebarOpen: (open: boolean) => void;
  // 主题状态
  theme: Theme;
  setTheme: (theme: Theme) => void;
}
// 创建UI状态
export const useUIStore = create<UIState>()(
  persist(
    (set) => ({
      // 侧边栏状态（默认收起）
      sidebarOpen: false,
      toggleSidebar: () => set((state) => ({ sidebarOpen: !state.sidebarOpen })),
      setSidebarOpen: (open: boolean) => set({ sidebarOpen: open }),
      // 主题状态（默认跟随系统）
      theme: 'system',
      setTheme: (theme: Theme) => {
        set({ theme });
        // 根据主题更新文档类
        const root = document.documentElement;
        root.classList.remove('light', 'dark');
        // 如果是系统主题，则根据系统偏好设置
        if (theme === 'system') {
          const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches
            ? 'dark'
            : 'light';
          root.classList.add(systemTheme);
        } else {
          root.classList.add(theme);
        }
      },
    }),
    {
      name: 'ui-storage', // localStorage的键名
    }
  )
);
</file>

<file path="front/src/stores/user-management-store.ts">
'use client';
import { create } from 'zustand';
import { User } from '@/types/auth';
import { UserDTO, UserQueryParams, UserPageResponse, UserStatusDTO } from '@/types/user';
import userService from '@/services/user';
import { toast } from 'sonner';
interface UserManagementState {
  // 用户列表
  users: User[];
  // 用户分页信息
  pagination: {
    totalElements: number;
    totalPages: number;
    size: number;
    number: number;
    first: boolean;
    last: boolean;
  };
  // 当前查询参数
  queryParams: UserQueryParams;
  // 当前编辑的用户
  currentUser: User | null;
  // 加载状态
  isLoading: boolean;
  // 错误信息
  error: string | null;
  // 表单可见性
  formVisible: boolean;
  // 确认对话框可见性
  confirmDialogVisible: boolean;
  // 角色分配对话框可见性
  roleDialogVisible: boolean;
  // 待删除的用户ID列表
  selectedIds: number[];
  // 查询用户列表
  fetchUsers: (params?: Partial<UserQueryParams>) => Promise<void>;
  // 根据ID获取用户
  fetchUserById: (id: number) => Promise<void>;
  // 创建用户
  createUser: (user: UserDTO) => Promise<void>;
  // 更新用户
  updateUser: (id: number, user: UserDTO) => Promise<void>;
  // 删除用户
  deleteUser: (id: number) => Promise<void>;
  // 批量删除用户
  batchDeleteUsers: (ids: number[]) => Promise<void>;
  // 更新用户状态
  updateUserStatus: (id: number, status: number) => Promise<void>;
  // 给用户分配角色
  assignRoles: (userId: number, roleIds: number[]) => Promise<void>;
  // 设置查询参数
  setQueryParams: (params: Partial<UserQueryParams>) => void;
  // 设置当前用户
  setCurrentUser: (user: User | null) => void;
  // 设置表单可见性
  setFormVisible: (visible: boolean) => void;
  // 设置确认对话框可见性
  setConfirmDialogVisible: (visible: boolean) => void;
  // 设置角色分配对话框可见性
  setRoleDialogVisible: (visible: boolean) => void;
  // 设置选中用户ID列表
  setSelectedIds: (ids: number[]) => void;
  // 添加选中用户ID
  addSelectedId: (id: number) => void;
  // 移除选中用户ID
  removeSelectedId: (id: number) => void;
  // 切换选中用户ID
  toggleSelectedId: (id: number) => void;
  // 清空选中用户ID
  clearSelectedIds: () => void;
  // 清除错误
  clearError: () => void;
}
export const useUserManagementStore = create<UserManagementState>()((set, get) => ({
  users: [],
  pagination: {
    totalElements: 0,
    totalPages: 0,
    size: 10,
    number: 0,
    first: true,
    last: true,
  },
  queryParams: {
    pageNum: 1,
    pageSize: 10,
  },
  currentUser: null,
  isLoading: false,
  error: null,
  formVisible: false,
  confirmDialogVisible: false,
  roleDialogVisible: false,
  selectedIds: [],
  // 查询用户列表
  fetchUsers: async (params) => {
    set({ isLoading: true, error: null });
    try {
      // 合并查询参数
      const queryParams = params 
        ? { ...get().queryParams, ...params }
        : get().queryParams;
      set({ queryParams });
      const response = await userService.getUserList(queryParams);
      set({ 
        users: response.content,
        pagination: {
          totalElements: response.totalElements,
          totalPages: response.totalPages,
          size: response.size,
          number: response.number,
          first: response.first,
          last: response.last,
        },
        isLoading: false
      });
    } catch (error) {
      console.error('获取用户列表失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '获取用户列表失败' 
      });
      toast.error('获取用户列表失败');
    }
  },
  // 根据ID获取用户
  fetchUserById: async (id) => {
    set({ isLoading: true, error: null });
    try {
      const user = await userService.getUserById(id);
      set({ currentUser: user, isLoading: false });
    } catch (error) {
      console.error(`获取用户详情失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '获取用户详情失败'
      });
      toast.error('获取用户详情失败');
    }
  },
  // 创建用户
  createUser: async (user) => {
    set({ isLoading: true, error: null });
    try {
      const createdUser = await userService.createUser(user);
      set(state => ({ 
        users: [createdUser, ...state.users],
        isLoading: false,
        formVisible: false,
        currentUser: null
      }));
      toast.success('创建用户成功');
    } catch (error) {
      console.error('创建用户失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '创建用户失败'
      });
      toast.error('创建用户失败');
    }
  },
  // 更新用户
  updateUser: async (id, user) => {
    set({ isLoading: true, error: null });
    try {
      const updatedUser = await userService.updateUser(id, user);
      set(state => ({
        users: state.users.map(u => u.id === id ? updatedUser : u),
        isLoading: false,
        formVisible: false,
        currentUser: null
      }));
      toast.success('更新用户成功');
    } catch (error) {
      console.error(`更新用户失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '更新用户失败'
      });
      toast.error('更新用户失败');
    }
  },
  // 删除用户
  deleteUser: async (id) => {
    set({ isLoading: true, error: null });
    try {
      await userService.deleteUser(id);
      set(state => ({
        users: state.users.filter(u => u.id !== id),
        isLoading: false,
        confirmDialogVisible: false
      }));
      toast.success('删除用户成功');
    } catch (error) {
      console.error(`删除用户失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '删除用户失败'
      });
      toast.error('删除用户失败');
    }
  },
  // 批量删除用户
  batchDeleteUsers: async (ids) => {
    set({ isLoading: true, error: null });
    try {
      await userService.batchDeleteUsers(ids);
      set(state => ({
        users: state.users.filter(u => !ids.includes(u.id)),
        isLoading: false,
        selectedIds: [],
        confirmDialogVisible: false
      }));
      toast.success('批量删除用户成功');
    } catch (error) {
      console.error('批量删除用户失败:', error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '批量删除用户失败'
      });
      toast.error('批量删除用户失败');
    }
  },
  // 更新用户状态
  updateUserStatus: async (id, status) => {
    set({ isLoading: true, error: null });
    try {
      const updatedUser = await userService.updateUserStatus(id, { status });
      set(state => ({
        users: state.users.map(u => u.id === id ? updatedUser : u),
        isLoading: false
      }));
      toast.success('更新用户状态成功');
    } catch (error) {
      console.error(`更新用户状态失败, ID: ${id}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '更新用户状态失败'
      });
      toast.error('更新用户状态失败');
    }
  },
  // 给用户分配角色
  assignRoles: async (userId, roleIds) => {
    set({ isLoading: true, error: null });
    try {
      const updatedUser = await userService.assignRoles(userId, roleIds);
      set(state => ({
        users: state.users.map(u => u.id === userId ? updatedUser : u),
        isLoading: false,
        roleDialogVisible: false,
        currentUser: null
      }));
      toast.success('角色分配成功');
    } catch (error) {
      console.error(`角色分配失败, userId: ${userId}:`, error);
      set({ 
        isLoading: false, 
        error: error instanceof Error ? error.message : '角色分配失败'
      });
      toast.error('角色分配失败');
    }
  },
  // 设置查询参数
  setQueryParams: (params) => {
    set(state => ({ 
      queryParams: { ...state.queryParams, ...params } 
    }));
  },
  // 设置当前用户
  setCurrentUser: (user) => {
    set({ currentUser: user });
  },
  // 设置表单可见性
  setFormVisible: (visible) => {
    // 如果关闭表单，清空当前用户
    if (!visible) {
      set({ currentUser: null });
    }
    set({ formVisible: visible });
  },
  // 设置确认对话框可见性
  setConfirmDialogVisible: (visible) => {
    set({ confirmDialogVisible: visible });
  },
  // 设置角色分配对话框可见性
  setRoleDialogVisible: (visible) => {
    set({ roleDialogVisible: visible });
  },
  // 设置选中用户ID列表
  setSelectedIds: (ids) => {
    set({ selectedIds: ids });
  },
  // 添加选中用户ID
  addSelectedId: (id) => {
    set(state => ({
      selectedIds: [...state.selectedIds, id]
    }));
  },
  // 移除选中用户ID
  removeSelectedId: (id) => {
    set(state => ({
      selectedIds: state.selectedIds.filter(itemId => itemId !== id)
    }));
  },
  // 切换选中用户ID
  toggleSelectedId: (id) => {
    set(state => {
      if (state.selectedIds.includes(id)) {
        return { selectedIds: state.selectedIds.filter(itemId => itemId !== id) };
      } else {
        return { selectedIds: [...state.selectedIds, id] };
      }
    });
  },
  // 清空选中用户ID
  clearSelectedIds: () => {
    set({ selectedIds: [] });
  },
  // 清除错误
  clearError: () => {
    set({ error: null });
  }
}));
</file>

<file path="front/src/types/api.ts">
// API响应通用结构
export interface ApiResponse<T = any> {
  code: number;
  message: string;
  data: T;
  errors?: Record<string, string[]>;
}
// 分页请求参数
export interface PaginationParams {
  page: number;
  pageSize: number;
}
// 分页响应结构
export interface PaginationResult<T> {
  list: T[];
  total: number;
  page: number;
  pageSize: number;
  totalPages: number;
}
// API错误
export interface ApiError {
  code: number;
  message: string;
  errors?: Record<string, string[]>;
}
</file>

<file path="front/src/types/auth.ts">
// 用户角色枚举
export enum UserRole {
  ADMIN = 'ADMIN',           // 管理员
  REVIEWER = 'REVIEWER',     // 审核员
  USER = 'USER',             // 普通用户
  INSTITUTION = 'INSTITUTION' // 机构用户
}
// 角色对象接口
export interface Role {
  id: number;
  name: string;
  code: string;
  description?: string;
  createdAt?: string;
  updatedAt?: string;
  permissions?: any[];
}
// 用户类型定义
export interface User {
  id: number;
  username: string;
  email: string;
  nickname?: string;
  phone?: string;
  avatar?: string;
  status?: number;
  roles: Role[];  // 角色对象数组
  createdAt: string;
  updatedAt: string;
  lastLoginAt?: string;
}
// 登录请求参数
export interface LoginRequest {
  username: string;
  password: string;
  captchaCode: string;
  captchaKey: string;
}
// 邮箱验证码请求参数
export interface EmailVerificationRequest {
  email: string;
  captchaCode: string;
  captchaKey: string;
}
// 注册请求参数
export interface RegisterRequest {
  username: string;
  email: string;
  password: string;
  confirmPassword: string;
  captchaCode: string;
  captchaKey: string;
  emailCode: string;        // 邮箱验证码
}
// 登录响应
export interface LoginResponse {
  accessToken: string;      // 访问令牌
  token?: string;           // 兼容旧代码
  refreshToken: string;     // 刷新令牌
  tokenType: string;        // 令牌类型
  expiresIn: number;        // 过期时间（毫秒）
  user?: User;              // 用户信息（可能需要单独获取）
}
// 验证码响应
export interface CaptchaResponse {
  captchaId: string;
  captchaImage: string;
}
</file>

<file path="front/src/types/institution.ts">
/**
 * 机构入驻申请请求参数
 */
export interface InstitutionApplyRequest {
  name: string;                  // 机构名称
  logo?: string;                 // 机构Logo URL
  description?: string;          // 机构描述
  contactPerson: string;         // 联系人
  contactPhone?: string;         // 联系电话
  contactEmail: string;          // 联系邮箱
  address?: string;              // 地址
  captchaKey: string;            // 验证码Key
  captchaCode: string;           // 验证码
}
/**
 * 机构用户注册请求参数
 */
export interface InstitutionRegisterRequest {
  username: string;              // 用户名
  password: string;              // 密码
  email: string;                 // 邮箱
  phone?: string;                // 手机号
  institutionCode: string;       // 机构注册码
  captchaKey: string;            // 验证码Key
  captchaCode: string;           // 验证码
  emailCode: string;             // 邮箱验证码
}
/**
 * 机构信息响应
 */
export interface InstitutionResponse {
  id: number;                    // ID
  name: string;                  // 机构名称
  logo?: string;                 // 机构Logo
  description?: string;          // 机构描述
  status: number;                // 状态：0-待审核，1-正常，2-禁用
  contactPerson: string;         // 联系人
  contactPhone?: string;         // 联系电话
  contactEmail: string;          // 联系邮箱
  address?: string;              // 地址
  createdAt: string;             // 创建时间
  updatedAt: string;             // 更新时间
}
/**
 * 机构申请信息响应
 */
export interface InstitutionApplicationResponse {
  id: number;                    // ID
  applicationId: string;         // 申请ID
  name: string;                  // 机构名称
  logo?: string;                 // 机构Logo
  description?: string;          // 机构描述
  contactPerson: string;         // 联系人
  contactPhone?: string;         // 联系电话
  contactEmail: string;          // 联系邮箱
  address?: string;              // 地址
  status: number;                // 状态：0-待审核，1-已通过，2-已拒绝
  reviewComment?: string;        // 审核结果备注
  reviewerId?: number;           // 审核人ID
  reviewedAt?: string;           // 审核时间
  institutionId?: number;        // 关联的机构ID
  createdAt: string;             // 创建时间
  updatedAt: string;             // 更新时间
}
/**
 * 机构申请查询参数
 */
export interface InstitutionApplicationQueryParams {
  applicationId?: string;        // 申请ID
  name?: string;                 // 机构名称
  contactPerson?: string;        // 联系人
  contactEmail?: string;         // 联系邮箱
  status?: number;               // 状态：0-待审核，1-已通过，2-已拒绝
  page?: number;                 // 页码
  size?: number;                 // 每页条数
}
/**
 * 通用分页响应接口
 */
export interface Page<T> {
  content: T[];                  // 数据内容
  totalElements: number;         // 总记录数
  totalPages: number;            // 总页数
  size: number;                  // 每页条数
  number: number;                // 当前页码
  numberOfElements: number;      // 当前页记录数
  first: boolean;                // 是否第一页
  last: boolean;                 // 是否最后一页
  empty: boolean;                // 是否为空
}
</file>

<file path="front/src/types/permission.ts">
// 权限实体类型
export interface Permission {
  id: number;
  name: string;         // 权限名称
  code: string;         // 权限编码
  description?: string; // 权限描述
  url?: string;         // 资源URL
  method?: string;      // HTTP方法
  createdAt?: string;   // 创建时间
  updatedAt?: string;   // 更新时间
}
// 权限创建/更新DTO
export interface PermissionDTO {
  id?: number;
  name: string;         // 权限名称
  code: string;         // 权限编码
  description?: string; // 权限描述
  url?: string;         // 资源URL
  method?: string;      // HTTP方法
}
// 分页查询参数
export interface PermissionQueryParams {
  page?: number;
  pageSize?: number;
  name?: string;
  code?: string;
}
</file>

<file path="front/src/types/role.ts">
import { Permission } from './permission';
// 角色实体类型
export interface Role {
  id: number;
  name: string;         // 角色名称
  code: string;         // 角色编码
  description?: string; // 角色描述
  createdAt?: string;   // 创建时间
  updatedAt?: string;   // 更新时间
  permissions?: Permission[]; // 权限列表
}
// 角色创建/更新DTO
export interface RoleDTO {
  id?: number;
  name: string;          // 角色名称
  code: string;          // 角色编码（格式：ROLE_XXX）
  description?: string;  // 角色描述
  permissionIds?: number[]; // 权限ID列表
}
// 分页查询参数
export interface RoleQueryParams {
  page?: number;
  pageSize?: number;
  name?: string;
  code?: string;
}
</file>

<file path="front/src/types/user.ts">
// 导入基础类型
import { User, Role } from './auth';
// 用户查询参数
export interface UserQueryParams {
  username?: string;
  email?: string;
  phone?: string;
  status?: number;
  roleId?: number;
  institutionId?: number;
  pageNum?: number;
  pageSize?: number;
}
// 用户分页响应
export interface UserPageResponse {
  content: User[];
  totalElements: number;
  totalPages: number;
  size: number;
  number: number;
  numberOfElements: number;
  first: boolean;
  last: boolean;
  empty: boolean;
}
// 用户创建/更新DTO
export interface UserDTO {
  id?: number;
  username: string;
  password?: string;
  email: string;
  phone?: string;
  nickname?: string;
  status?: number;
  institutionId?: number;
  roleIds?: number[];
}
// 用户状态更新DTO
export interface UserStatusDTO {
  status: number; // 0-禁用，1-正常
}
// 用户角色分配DTO
export interface UserRoleAssignmentDTO {
  roleIds: number[];
}
</file>

<file path="front/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="mvnw">
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.2
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MVNW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
CYGWIN* | MINGW*)
  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
  native_path() { cygpath --path --windows "$1"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ]; then
    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v java
    )" || :
    JAVACCMD="$(
      'set' +e
      'unset' -f command 2>/dev/null
      'command' -v javac
    )" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    char="${str%"${str#?}"}"
    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

trim() {
  # MWRAPPER-139:
  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
  #   Needed for removing poorly interpreted newline sequences when running in more
  #   exotic environments such as mingw bash on Windows.
  printf "%s" "${1}" | tr -d '[:space:]'
}

# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS="=" read -r key value; do
  case "${key-}" in
  distributionUrl) distributionUrl=$(trim "${value-}") ;;
  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
  esac
done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"

case "${distributionUrl##*/}" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%.*}"
distributionUrlNameMain="${distributionUrlNameMain%-bin}"
MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
}

if [ -d "$MAVEN_HOME" ]; then
  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  exec_maven "$@"
fi

case "${distributionUrl-}" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MAVEN_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v

# normalize http auth
case "${MVNW_PASSWORD:+has-password}" in
'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
esac

if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat >"$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n "${distributionSha256Sum-}" ]; then
  distributionSha256Result=false
  if [ "$MVN_CMD" = mvnd.sh ]; then
    echo "Checksum validation is not supported for maven-mvnd." >&2
    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  elif command -v sha256sum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  elif command -v shasum >/dev/null; then
    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
      distributionSha256Result=true
    fi
  else
    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
    exit 1
  fi
  if [ $distributionSha256Result = false ]; then
    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
    exit 1
  fi
fi

# unzip and move
if command -v unzip >/dev/null; then
  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
else
  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
fi
printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"

clean || :
exec_maven "$@"
</file>

<file path="mvnw.cmd">
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    http://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.2
@REM
@REM Optional ENV vars
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = "Stop"
if ($env:MVNW_VERBOSE -eq "true") {
  $VerbosePreference = "Continue"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
if (!$distributionUrl) {
  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  "maven-mvnd-*" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
    $MVN_CMD = "mvnd.cmd"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
if ($env:MAVEN_USER_HOME) {
  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
}
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"

if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
  }
}

New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
Write-Verbose "Downloading from: $distributionUrl"
Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
  }
  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
  }
}

# unzip and move
Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
    Write-Error "fail to move MAVEN_HOME"
  }
} finally {
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
}

Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
</file>

<file path="pom.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.9</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.zhangziqi</groupId>
    <artifactId>online_course_mine</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>online_course_mine</name>
    <description>online_course_mine</description>
    <url/>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <scm>
        <connection/>
        <developerConnection/>
        <tag/>
        <url/>
    </scm>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.12.5</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>0.12.5</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>0.12.5</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>
        <!-- Swagger/OpenAPI -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.5.0</version>
        </dependency>
        <!-- 验证码 -->
        <dependency>
            <groupId>com.github.penggle</groupId>
            <artifactId>kaptcha</artifactId>
            <version>2.3.2</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>2.3.232</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <!-- MinIO 依赖 -->
        <dependency>
            <groupId>io.minio</groupId>
            <artifactId>minio</artifactId>
            <version>8.5.7</version>
        </dependency>
        <!-- AWS S3 依赖 -->
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>s3</artifactId>
            <version>2.20.68</version>
        </dependency>
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>aws-core</artifactId>
            <version>2.20.68</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
</file>

<file path="project-overview.md">
## Documentation for Online Course Platform Repository

### Overview

This repository contains the backend code for an online course platform. It is built using Spring Boot and implements features for user authentication, authorization, user and role management, and content management infrastructure. The repository is designed for AI consumption and provides a packed representation of the entire codebase for analysis and automation.

### Quick Start

1. **Prerequisites:**
    - Java 17
    - Maven
    - MySQL Database (for development environment)
    - Docker (optional, for MinIO)

2. **Clone the repository:**
   ```bash
   git clone <repository_url>
   cd online_course_mine
   ```

3. **Build the application:**
   ```bash
   ./mvnw clean install
   ```

4. **Run the application:**
   ```bash
   ./mvnw spring-boot:run -Dspring-boot.run.profiles=dev
   ```
   The application will be accessible at `http://localhost:8080`.

5. **Access API Documentation:**
   Visit Swagger UI at `http://localhost:8080/swagger-ui.html` to explore and test the API endpoints.

### Configuration

The application uses Spring Boot profiles for environment-specific configurations.

**Configuration Files:**

- `src/main/resources/application.yml`: Default application configuration.
- `src/main/resources/application-dev.yml`: Development environment configuration.
- `src/main/resources/application-test.yml`: Test environment configuration.

**Key Configuration Options:**

- **Database (MySQL & H2):**
    - Configuration in `application-dev.yml` and `application-test.yml`.
    - MySQL for development, H2 in-memory for testing.
    - JDBC URL, username, and password can be configured.

- **Redis:**
    - Configuration in `application-dev.yml` and `application-test.yml`.
    - Host, port, database, and password settings.
    - Used for caching, session management, and token blacklist.

- **JWT (JSON Web Token):**
    - Configuration in `src/main/java/com/zhangziqi/online_course_mine/config/security/JwtConfig.java`.
    - Secret key, access token expiration, and refresh token expiration.
    - Secret key should be securely managed, especially in production.

- **Email Service:**
    - Configuration in `application-dev.yml` and `application-test.yml`.
    - SMTP host, username, password, and properties.
    - Used for sending verification and email update codes.

- **File Storage (MinIO & AWS S3 compatible):**
    - Configuration in `src/main/java/com/zhangziqi/online_course_mine/config/MinioConfig.java` and `src/main/java/com/zhangziqi/online_course_mine/config/S3Config.java`.
    - Endpoint, access key, secret key, and bucket name for both MinIO and S3.
    - Choose between MinIO or S3 compatible storage using configuration profiles.

- **Verification Code (Captcha & Email):**
    - Captcha configuration in `src/main/java/com/zhangziqi/online_course_mine/config/KaptchaConfig.java`.
    - Email verification code settings (prefix, expiration) in `src/main/java/com/zhangziqi/online_course_mine/service/impl/EmailServiceImpl.java`.

**Environment Profiles:**

- **dev:** Development profile, using MySQL and detailed logging.
- **test:** Test profile, using H2 in-memory database and specific test configurations.

You can activate profiles using:
- `spring.profiles.active` property in `application.yml`.
- `-Dspring.profiles.active=dev` command line argument when running the application.
- `SPRING_PROFILES_ACTIVE=dev` environment variable.

### API Documentation

The API documentation is available in Swagger UI at `/swagger-ui.html` when the application is running.

**API Categories:**

#### Authentication API (`/api/auth`)

- **`GET /captcha/key`**:  Get captcha key.
- **`GET /captcha/image/{key}`**: Get captcha image by key.
- **`POST /email-verification-code`**: Send email verification code (for registration).
- **`POST /email-update-code`**: Send email update code (for email change).
- **`POST /register`**: Register a new user.
- **`POST /login`**: User login, retrieves JWT tokens.
- **`POST /refresh-token`**: Refresh JWT access token using refresh token.
- **`POST /logout`**: User logout.

#### User Management API (`/api/users`)

- **`GET /users`**: Get paginated user list (ADMIN role required).
- **`GET /users/{id}`**: Get user details by ID (ADMIN role required).
- **`POST /users`**: Create a new user (ADMIN role required).
- **`PUT /users/{id}`**: Update user information (ADMIN role required).
- **`DELETE /users/{id}`**: Delete user by ID (ADMIN role required).
- **`PATCH /users/{id}/status`**: Modify user status (ADMIN role required).
- **`PUT /users/{id}/roles`**: Assign roles to a user (ADMIN role required).
- **`DELETE /users/batch`**: Batch delete users (ADMIN role required).
- **`GET /users/current`**: Get current user information (authenticated user required).
- **`PUT /users/current`**: Update current user profile (authenticated user required).
- **`PUT /users/current/password`**: Change current user password (authenticated user required).
- **`PUT /users/current/email`**: Update current user email (authenticated user required).
- **`POST /users/current/avatar`**: Upload/update current user avatar (authenticated user required).
- **`GET /users/basic/{userId}`**: Get basic user information by ID (public access).

#### Role Management API (`/api/roles`)

- **`GET /roles`**: Get role list (ADMIN role required).
- **`GET /roles/{id}`**: Get role details by ID (ADMIN role required).
- **`POST /roles`**: Create a new role (ADMIN role required).
- **`PUT /roles/{id}`**: Update role information (ADMIN role required).
- **`DELETE /roles/{id}`**: Delete role by ID (ADMIN role required).
- **`PUT /roles/{id}/permissions`**: Assign permissions to a role (ADMIN role required).
- **`DELETE /roles/batch`**: Batch delete roles (ADMIN role required).

#### Permission Management API (`/api/permissions`)

- **`GET /permissions`**: Get permission list (ADMIN role required).
- **`GET /permissions/{id}`**: Get permission details by ID (ADMIN role required).
- **`POST /permissions`**: Create a new permission (ADMIN role required).
- **`PUT /permissions/{id}`**: Update permission information (ADMIN role required).
- **`DELETE /permissions/{id}`**: Delete permission by ID (ADMIN role required).
- **`DELETE /permissions/batch`**: Batch delete permissions (ADMIN role required).

### Dependencies and Requirements

- **Java:** 17
- **Maven:**  For build management.
- **Spring Boot:** 3.3.9
- **Spring Security:** For authentication and authorization.
- **Spring Data JPA:** For database interaction.
- **MySQL:** Relational database for development environment.
- **H2 Database:** In-memory database for testing environment.
- **Redis:** For caching, session management, and token blacklist.
- **JWT (JSON Web Token):** For secure API authentication.
- **Kaptcha:** For generating captcha images.
- **Thymeleaf:** For email templating.
- **MinIO/S3:** For file storage.
- **OpenAPI (Swagger):** For API documentation.
- **Lombok:** For reducing boilerplate code.

Dependencies are managed using Maven, refer to `pom.xml` for detailed versions.

### Advanced Usage Examples

1. **Setting up different environments:**
   - Utilize Spring Boot profiles to manage configurations for development, testing, and production environments.
   - Create separate `application-*.yml` files for each environment and activate them using profiles.

2. **Extending User Roles and Permissions:**
   - Define new roles in `src/main/java/com/zhangziqi/online_course_mine/model/enums/RoleEnum.java`.
   - Create new permissions using the Permission Management API.
   - Assign permissions to roles and roles to users via API or database.
   - Implement custom authorization logic using `@PreAuthorize` annotations or custom security components.

3. **Integrating with Frontend Application:**
   - Configure the frontend application to communicate with the backend API using the base URL (e.g., `http://localhost:8080/api`).
   - Implement JWT token handling in the frontend to authenticate API requests.
   - Use API documentation (`/swagger-ui.html`) to understand and integrate with backend endpoints.

4. **Using File Storage for Course Content:**
   - Configure either MinIO or AWS S3 compatible storage using application properties.
   - Use `MinioService` or `S3Service` (if implemented, based on `S3Config`) to upload, download, and manage course related files (videos, documents, etc.).
   - Store file URLs in the database and serve them to users as needed.

This documentation provides a comprehensive guide to understand, set up, and use the Online Course Platform Backend Repository. For detailed API usage, please refer to the Swagger UI documentation.
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/CacheConfig.java">
package com.zhangziqi.online_course_mine.config;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheConfiguration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.RedisSerializationContext;
import org.springframework.data.redis.serializer.StringRedisSerializer;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;
/**
 * 缓存配置
 */
@Configuration
@EnableCaching
public class CacheConfig {
    // 缓存名称常量
    public static final String USER_CACHE = "userCache";
    public static final String PERMISSION_CACHE = "permissions";
    public static final String ROLE_CACHE = "roles";
    // 缓存时间常量（分钟）
    private static final long DEFAULT_EXPIRE_MINUTES = 30;
    private static final long USER_EXPIRE_MINUTES = 60;
    private static final long PERMISSION_EXPIRE_MINUTES = 120; // 权限缓存2小时
    private static final long ROLE_EXPIRE_MINUTES = 120; // 角色缓存2小时
    /**
     * 配置Redis缓存管理器
     */
    @Bean
    public RedisCacheManager cacheManager(RedisConnectionFactory connectionFactory) {
        // 使用Jackson2JsonRedisSerializer作为序列化器
        Jackson2JsonRedisSerializer<Object> serializer = new Jackson2JsonRedisSerializer<>(Object.class);
        // 配置ObjectMapper，确保序列化时保留类型信息
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.registerModule(new JavaTimeModule()); // 支持Java 8时间类型
        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        objectMapper.activateDefaultTyping(
            LaissezFaireSubTypeValidator.instance,
            ObjectMapper.DefaultTyping.NON_FINAL
        );
        serializer.setObjectMapper(objectMapper);
        // 默认缓存配置
        RedisCacheConfiguration defaultCacheConfig = RedisCacheConfiguration.defaultCacheConfig()
                .entryTtl(Duration.ofMinutes(DEFAULT_EXPIRE_MINUTES))
                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer()))
                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(serializer))
                .disableCachingNullValues();
        // 自定义不同缓存名称的配置
        Map<String, RedisCacheConfiguration> cacheConfigurations = new HashMap<>();
        // 用户缓存配置
        cacheConfigurations.put(USER_CACHE, 
            defaultCacheConfig.entryTtl(Duration.ofMinutes(USER_EXPIRE_MINUTES)));
        // 权限缓存配置
        cacheConfigurations.put(PERMISSION_CACHE, 
            defaultCacheConfig.entryTtl(Duration.ofMinutes(PERMISSION_EXPIRE_MINUTES)));
        // 角色缓存配置
        cacheConfigurations.put(ROLE_CACHE, 
            defaultCacheConfig.entryTtl(Duration.ofMinutes(ROLE_EXPIRE_MINUTES)));
        // 构建缓存管理器
        return RedisCacheManager.builder(connectionFactory)
                .cacheDefaults(defaultCacheConfig)
                .withInitialCacheConfigurations(cacheConfigurations)
                .transactionAware()
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/JpaAuditingConfig.java">
package com.zhangziqi.online_course_mine.config;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.AuditorAware;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import java.util.Optional;
/**
 * JPA审计配置
 */
@Configuration
@EnableJpaAuditing
public class JpaAuditingConfig {
    /**
     * 当前操作用户
     */
    @Bean
    public AuditorAware<String> auditorProvider() {
        return () -> Optional.of("System");
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/KaptchaConfig.java">
package com.zhangziqi.online_course_mine.config;
import com.google.code.kaptcha.impl.DefaultKaptcha;
import com.google.code.kaptcha.util.Config;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import java.util.Properties;
/**
 * 验证码配置
 */
@Configuration
public class KaptchaConfig {
    /**
     * 图形验证码生成器
     */
    @Bean
    public DefaultKaptcha captchaProducer() {
        DefaultKaptcha defaultKaptcha = new DefaultKaptcha();
        Properties properties = new Properties();
        // 图片宽度
        properties.setProperty("kaptcha.image.width", "150");
        // 图片高度
        properties.setProperty("kaptcha.image.height", "50");
        // 字体大小
        properties.setProperty("kaptcha.textproducer.font.size", "38");
        // 字体颜色
        properties.setProperty("kaptcha.textproducer.font.color", "0,0,0");
        // 字体
        properties.setProperty("kaptcha.textproducer.font.names", "Arial,Courier");
        // 字符间距
        properties.setProperty("kaptcha.textproducer.char.space", "5");
        // 验证码长度
        properties.setProperty("kaptcha.textproducer.char.length", "4");
        // 干扰线颜色
        properties.setProperty("kaptcha.noise.color", "blue");
        // 图片边框
        properties.setProperty("kaptcha.border", "no");
        // 背景颜色渐变，开始颜色
        properties.setProperty("kaptcha.background.clear.from", "white");
        // 背景颜色渐变，结束颜色
        properties.setProperty("kaptcha.background.clear.to", "white");
        Config config = new Config(properties);
        defaultKaptcha.setConfig(config);
        return defaultKaptcha;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/MinioConfig.java">
package com.zhangziqi.online_course_mine.config;
import io.minio.MinioClient;
import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
@Data
@Configuration
@ConfigurationProperties(prefix = "minio")
public class MinioConfig {
    private String endpoint;
    private String accessKey;
    private String secretKey;
    private String bucketName;
    @Bean
    public MinioClient minioClient() {
        return MinioClient.builder()
                .endpoint(endpoint)
                .credentials(accessKey, secretKey)
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/OpenApiConfig.java">
package com.zhangziqi.online_course_mine.config;
import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
/**
 * OpenAPI配置
 */
@Configuration
public class OpenApiConfig {
    /**
     * 配置OpenAPI
     */
    @Bean
    public OpenAPI openAPI() {
        return new OpenAPI()
                .info(new Info()
                        .title("在线课程平台API")
                        .description("在线课程平台的RESTful API文档")
                        .version("1.0.0")
                        .contact(new Contact()
                                .name("在线课程平台团队")
                                .email("support@example.com")
                                .url("https://example.com"))
                        .license(new License()
                                .name("MIT License")
                                .url("https://opensource.org/licenses/MIT")))
                // 添加JWT认证
                .addSecurityItem(new SecurityRequirement().addList("Bearer Authentication"))
                .components(new Components()
                        .addSecuritySchemes("Bearer Authentication", createAPIKeyScheme()));
    }
    /**
     * 创建API密钥方案
     */
    private SecurityScheme createAPIKeyScheme() {
        return new SecurityScheme()
                .type(SecurityScheme.Type.HTTP)
                .bearerFormat("JWT")
                .scheme("bearer");
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/redis/RedisConfig.java">
package com.zhangziqi.online_course_mine.config.redis;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;
/**
 * Redis配置
 */
@Configuration
public class RedisConfig {
    /**
     * Redis模板
     */
    @Bean
    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory factory) {
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(factory);
        // 使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值
        Jackson2JsonRedisSerializer<Object> jacksonSerializer = new Jackson2JsonRedisSerializer<>(Object.class);
        ObjectMapper om = new ObjectMapper();
        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        // 指定序列化输入的类型，类必须是非final修饰的
        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);
        jacksonSerializer.setObjectMapper(om);
        // 值采用json序列化
        template.setValueSerializer(jacksonSerializer);
        // 使用StringRedisSerializer来序列化和反序列化redis的key值
        template.setKeySerializer(new StringRedisSerializer());
        template.setHashKeySerializer(new StringRedisSerializer());
        template.setHashValueSerializer(jacksonSerializer);
        template.afterPropertiesSet();
        return template;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/S3Config.java">
package com.zhangziqi.online_course_mine.config;
import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.AwsCredentials;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.S3Configuration;
import software.amazon.awssdk.services.s3.presigner.S3Presigner;
import java.net.URI;
@Data
@Configuration
@ConfigurationProperties(prefix = "aws.s3")
public class S3Config {
    private String endpoint;
    private String region;
    private String accessKey;
    private String secretKey;
    private String bucketName;
    private boolean pathStyleAccess;
    @Bean
    public S3Client s3Client() {
        AwsCredentials credentials = AwsBasicCredentials.create(accessKey, secretKey);
        S3Configuration serviceConfiguration = S3Configuration.builder()
            .pathStyleAccessEnabled(pathStyleAccess)
            .chunkedEncodingEnabled(true)
            .build();
        return S3Client.builder()
            .endpointOverride(URI.create(endpoint))
            .credentialsProvider(() -> credentials)
            .region(Region.of(region))
            .serviceConfiguration(serviceConfiguration)
            .build();
    }
    @Bean
    public S3Presigner s3Presigner() {
        AwsCredentials credentials = AwsBasicCredentials.create(accessKey, secretKey);
        S3Configuration serviceConfiguration = S3Configuration.builder()
            .pathStyleAccessEnabled(pathStyleAccess)
            .build();
        return S3Presigner.builder()
            .endpointOverride(URI.create(endpoint))
            .credentialsProvider(() -> credentials)
            .region(Region.of(region))
            .serviceConfiguration(serviceConfiguration)
            .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/security/JwtConfig.java">
package com.zhangziqi.online_course_mine.config.security;
import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;
/**
 * JWT配置
 */
@Data
@Configuration
@ConfigurationProperties(prefix = "jwt")
public class JwtConfig {
    /**
     * 密钥
     */
    private String secret;
    /**
     * 访问令牌过期时间（毫秒）
     */
    private long accessTokenExpiration;
    /**
     * 刷新令牌过期时间（毫秒）
     */
    private long refreshTokenExpiration;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/security/SecurityConfig.java">
package com.zhangziqi.online_course_mine.config.security;
import com.zhangziqi.online_course_mine.security.jwt.JwtAuthenticationFilter;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import java.util.Arrays;
/**
 * 安全配置
 */
@Configuration
@EnableWebSecurity
@EnableMethodSecurity
@RequiredArgsConstructor
public class SecurityConfig {
    private final JwtAuthenticationFilter jwtAuthenticationFilter;
    /**
     * 安全过滤器链
     */
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            // 禁用CSRF
            .csrf(AbstractHttpConfigurer::disable)
            // 启用CORS
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            // 设置Session管理策略为无状态
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            // 授权请求配置
            .authorizeHttpRequests(auth -> auth
                // 公开接口
                .requestMatchers("/api/auth/**", "/api/public/**", "/h2-console/**").permitAll()
                // Swagger相关接口
                .requestMatchers("/swagger-ui/**", "/v3/api-docs/**", "/swagger-resources/**").permitAll()
                // 其他所有请求需要认证
                .anyRequest().authenticated()
            )
            // 添加JWT过滤器
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }
    /**
     * 密码编码器
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
    /**
     * 认证管理器
     */
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }
    /**
     * CORS配置源
     */
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("*"));
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("authorization", "content-type", "x-auth-token"));
        configuration.setExposedHeaders(Arrays.asList("x-auth-token"));
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/config/StorageConfigProperties.java">
package com.zhangziqi.online_course_mine.config;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Configuration;
@Configuration
@EnableConfigurationProperties({MinioConfig.class, S3Config.class})
public class StorageConfigProperties {
    // 此类仅用于启用ConfigurationProperties注解的绑定
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/AuthController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.LoginDTO;
import com.zhangziqi.online_course_mine.model.dto.RefreshTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.dto.EmailVerificationDTO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.AuthService;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import com.zhangziqi.online_course_mine.service.EmailService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.ServletOutputStream;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.UUID;
/**
 * 认证控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/auth")
@Tag(name = "认证接口", description = "包括注册、登录、刷新令牌等接口")
public class AuthController {
    private final AuthService authService;
    private final CaptchaService captchaService;
    private final EmailService emailService;
    /**
     * 获取验证码key
     */
    @GetMapping("/captcha/key")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
        summary = "获取验证码key",
        description = "获取验证码key，用于后续获取验证码图片"
    )
    public Result<String> getCaptchaKey() {
        return Result.success(UUID.randomUUID().toString());
    }
    /**
     * 获取验证码图片
     */
    @GetMapping("/captcha/image/{key}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(
        summary = "获取验证码图片",
        description = "根据验证码key获取对应的验证码图片"
    )
    public void getCaptchaImage(
        @Parameter(description = "验证码key") 
        @PathVariable String key,
        HttpServletResponse response
    ) throws IOException {
        BufferedImage image = captchaService.generateCaptcha(key);
        response.setContentType(MediaType.IMAGE_JPEG_VALUE);
        response.setHeader(HttpHeaders.CACHE_CONTROL, "no-store, no-cache, must-revalidate");
        response.setHeader(HttpHeaders.PRAGMA, "no-cache");
        response.setDateHeader(HttpHeaders.EXPIRES, 0);
        ImageIO.write(image, "jpg", response.getOutputStream());
    }
    /**
     * 发送邮箱验证码
     *
     * @param emailVerificationDTO 邮箱验证码请求
     * @return 结果
     */
    @PostMapping("/email-verification-code")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "发送邮箱验证码", description = "发送邮箱验证码（用于用户注册）")
    public Result<Void> sendEmailVerificationCode(@Valid @RequestBody EmailVerificationDTO emailVerificationDTO) {
        // 验证图形验证码
        if (!captchaService.validateCaptcha(emailVerificationDTO.getCaptchaKey(), emailVerificationDTO.getCaptchaCode())) {
            return Result.fail("验证码错误");
        }
        // 生成邮箱验证码
        String code = emailService.generateVerificationCode();
        // 发送验证码
        emailService.sendVerificationCode(emailVerificationDTO.getEmail(), code);
        // 保存验证码到Redis
        emailService.saveVerificationCode(emailVerificationDTO.getEmail(), code);
        return Result.success();
    }
    /**
     * 发送邮箱更新验证码
     *
     * @param emailVerificationDTO 邮箱验证码请求
     * @return 结果
     */
    @PostMapping("/email-update-code")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "发送邮箱更新验证码", description = "发送邮箱更新验证码（用于更换邮箱）")
    public Result<Void> sendEmailUpdateCode(@Valid @RequestBody EmailVerificationDTO emailVerificationDTO) {
        // 验证图形验证码
        if (!captchaService.validateCaptcha(emailVerificationDTO.getCaptchaKey(), emailVerificationDTO.getCaptchaCode())) {
            return Result.fail("验证码错误");
        }
        // 生成邮箱验证码
        String code = emailService.generateVerificationCode();
        // 发送更新验证码邮件
        emailService.sendEmailUpdateCode(emailVerificationDTO.getEmail(), code);
        // 保存验证码到Redis
        emailService.saveVerificationCode(emailVerificationDTO.getEmail(), code);
        return Result.success();
    }
    /**
     * 用户注册
     *
     * @param registerDTO 注册请求
     * @return 结果
     */
    @PostMapping("/register")
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(summary = "用户注册", description = "注册新用户")
    public Result<Void> register(@Valid @RequestBody RegisterDTO registerDTO) {
        authService.register(registerDTO);
        return Result.success();
    }
    /**
     * 用户登录
     *
     * @param loginDTO 登录请求
     * @return JWT令牌
     */
    @PostMapping("/login")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "用户登录", description = "用户登录获取JWT令牌")
    public Result<JwtTokenDTO> login(@Valid @RequestBody LoginDTO loginDTO) {
        JwtTokenDTO jwtTokenDTO = authService.login(loginDTO);
        return Result.success(jwtTokenDTO);
    }
    /**
     * 刷新令牌
     *
     * @param refreshTokenDTO 刷新令牌请求
     * @return JWT令牌
     */
    @PostMapping("/refresh-token")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "刷新令牌", description = "刷新JWT令牌")
    public Result<JwtTokenDTO> refreshToken(@Valid @RequestBody RefreshTokenDTO refreshTokenDTO) {
        JwtTokenDTO jwtTokenDTO = authService.refreshToken(refreshTokenDTO);
        return Result.success(jwtTokenDTO);
    }
    /**
     * 注销
     *
     * @param request 请求
     * @return 结果
     */
    @PostMapping("/logout")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "注销", description = "用户注销")
    public Result<Void> logout(HttpServletRequest request) {
        // 从请求头中获取JWT令牌
        String bearerToken = request.getHeader("Authorization");
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            String token = bearerToken.substring(7);
            authService.logout(token);
        }
        return Result.success();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/InstitutionAuthController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.InstitutionRegisterDTO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import com.zhangziqi.online_course_mine.service.EmailService;
import com.zhangziqi.online_course_mine.service.InstitutionAuthService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
/**
 * 机构用户注册控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/auth/institution")
@Tag(name = "机构用户认证", description = "机构用户注册相关接口")
public class InstitutionAuthController {
    private final InstitutionAuthService institutionAuthService;
    private final CaptchaService captchaService;
    private final EmailService emailService;
    /**
     * 机构用户注册
     *
     * @param registerDTO 注册参数
     * @return 结果
     */
    @PostMapping("/register")
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(summary = "机构用户注册", description = "使用机构注册码注册机构用户")
    public Result<Void> registerInstitutionMember(@Valid @RequestBody InstitutionRegisterDTO registerDTO) {
        log.info("收到机构用户注册请求: username={}, email={}, institutionCode={}, captchaKey={}", 
                registerDTO.getUsername(), registerDTO.getEmail(), 
                registerDTO.getInstitutionCode(), registerDTO.getCaptchaKey());
        // 验证图形验证码
        boolean captchaValid = captchaService.validateCaptcha(registerDTO.getCaptchaKey(), registerDTO.getCaptchaCode());
        log.info("图形验证码验证结果: {}, key={}, code={}", captchaValid, registerDTO.getCaptchaKey(), registerDTO.getCaptchaCode());
        if (!captchaValid) {
            log.warn("图形验证码验证失败: key={}, code={}", registerDTO.getCaptchaKey(), registerDTO.getCaptchaCode());
            return Result.fail("验证码错误");
        }
        // 验证邮箱验证码
        boolean emailCodeValid = emailService.validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode());
        log.info("邮箱验证码验证结果: {}, email={}, code={}", emailCodeValid, registerDTO.getEmail(), registerDTO.getEmailCode());
        if (!emailCodeValid) {
            log.warn("邮箱验证码验证失败: email={}, code={}", registerDTO.getEmail(), registerDTO.getEmailCode());
            return Result.fail("邮箱验证码错误或已过期");
        }
        log.info("开始处理机构用户注册: username={}, institutionCode={}", registerDTO.getUsername(), registerDTO.getInstitutionCode());
        try {
            institutionAuthService.registerWithInstitutionCode(registerDTO);
            log.info("机构用户注册成功: username={}", registerDTO.getUsername());
            return Result.success();
        } catch (Exception e) {
            log.error("机构用户注册失败: username={}, 原因: {}", registerDTO.getUsername(), e.getMessage(), e);
            return Result.fail(e.getMessage());
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/InstitutionController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplyDTO;
import com.zhangziqi.online_course_mine.model.vo.InstitutionApplicationVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import com.zhangziqi.online_course_mine.service.InstitutionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
/**
 * 机构申请控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/institutions")
@Tag(name = "机构申请", description = "机构申请相关接口")
public class InstitutionController {
    private final InstitutionService institutionService;
    private final CaptchaService captchaService;
    /**
     * 申请创建机构
     *
     * @param applyDTO 申请参数
     * @return 申请ID
     */
    @PostMapping("/apply")
    @ResponseStatus(HttpStatus.CREATED)
    @Operation(summary = "申请创建机构", description = "提交机构入驻申请，需等待审核员审核")
    public Result<String> applyInstitution(@Valid @RequestBody InstitutionApplyDTO applyDTO) {
        // 验证图形验证码
        if (!captchaService.validateCaptcha(applyDTO.getCaptchaKey(), applyDTO.getCaptchaCode())) {
            return Result.fail("验证码错误");
        }
        log.info("申请创建机构: {}", applyDTO.getName());
        String applicationId = institutionService.applyInstitution(applyDTO);
        return Result.success(applicationId);
    }
    /**
     * 查询申请状态
     *
     * @param applicationId 申请ID
     * @param email 联系邮箱
     * @return 申请状态
     */
    @GetMapping("/application-status")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "查询申请状态", description = "通过申请ID和邮箱查询机构申请状态")
    public Result<InstitutionApplicationVO> getApplicationStatus(
            @Parameter(description = "申请ID") @RequestParam String applicationId,
            @Parameter(description = "联系邮箱") @RequestParam String email) {
        log.info("查询申请状态: {}, {}", applicationId, email);
        return Result.success(
            institutionService.getApplicationStatus(applicationId, email)
        );
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/InstitutionMemberController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.InstitutionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
/**
 * 机构成员管理控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/institutions/members")
@PreAuthorize("hasRole('INSTITUTION')")
@Tag(name = "机构成员管理", description = "机构成员管理相关接口")
public class InstitutionMemberController {
    private final InstitutionService institutionService;
    /**
     * 获取机构注册码
     *
     * @param authentication 认证信息
     * @return 注册码
     */
    @GetMapping("/register-code")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取机构注册码", description = "获取当前用户所属机构的注册码")
    public Result<String> getRegisterCode(Authentication authentication) {
        String username = authentication.getName();
        log.info("获取机构注册码: {}", username);
        return Result.success(institutionService.getInstitutionRegisterCode(username));
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/MediaController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.media.MediaUploadInitDTO;
import com.zhangziqi.online_course_mine.model.dto.media.PartCompletionDTO;
import com.zhangziqi.online_course_mine.model.dto.media.UploadInitiationVO;
import com.zhangziqi.online_course_mine.model.dto.media.UploadStatusVO;
import com.zhangziqi.online_course_mine.model.vo.MediaVO;
import com.zhangziqi.online_course_mine.model.vo.QuotaInfoVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.security.SecurityUtil;
import com.zhangziqi.online_course_mine.service.MediaService;
import com.zhangziqi.online_course_mine.service.StorageQuotaService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * 媒体控制器
 * 处理媒体上传和管理请求
 */
@Slf4j
@RestController
@RequestMapping("/api/media")
@RequiredArgsConstructor
@Tag(name = "媒体管理", description = "媒体文件上传、管理相关操作")
public class MediaController {
    private final MediaService mediaService;
    private final StorageQuotaService storageQuotaService;
    /**
     * 初始化上传
     */
    @PostMapping("/initiate-upload")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('INSTITUTION_ADMIN')")
    @Operation(summary = "初始化上传", description = "初始化分片上传，返回上传ID和预签名URL")
    public Result<UploadInitiationVO> initiateUpload(@Valid @RequestBody MediaUploadInitDTO dto) {
        // 获取当前用户ID和机构ID
        Long userId = SecurityUtil.getCurrentUserId();
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("初始化上传, 用户ID: {}, 机构ID: {}, 文件名: {}, 文件大小: {}", 
                userId, institutionId, dto.getFilename(), dto.getFileSize());
        UploadInitiationVO result = mediaService.initiateUpload(dto, institutionId, userId);
        return Result.success(result);
    }
    /**
     * 获取上传状态
     */
    @GetMapping("/upload-status/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('INSTITUTION_ADMIN')")
    @Operation(summary = "获取上传状态", description = "获取指定媒体的上传状态")
    public Result<UploadStatusVO> getUploadStatus(
            @Parameter(description = "媒体ID") @PathVariable("id") Long mediaId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        UploadStatusVO status = mediaService.getUploadStatus(mediaId, institutionId);
        return Result.success(status);
    }
    /**
     * 通知分片完成
     */
    @PostMapping("/{id}/parts")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('INSTITUTION_ADMIN')")
    @Operation(summary = "通知分片完成", description = "通知服务器某个分片已上传完成")
    public Result<UploadStatusVO> notifyPartCompleted(
            @Parameter(description = "媒体ID") @PathVariable("id") Long mediaId,
            @Valid @RequestBody PartCompletionDTO dto) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("通知分片完成, 媒体ID: {}, 分片编号: {}", mediaId, dto.getPartNumber());
        UploadStatusVO status = mediaService.notifyPartCompleted(mediaId, dto, institutionId);
        return Result.success(status);
    }
    /**
     * 完成上传
     */
    @PostMapping("/{id}/complete")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('INSTITUTION_ADMIN')")
    @Operation(summary = "完成上传", description = "通知服务器所有分片已上传完成，请求合并分片")
    public Result<MediaVO> completeUpload(
            @Parameter(description = "媒体ID") @PathVariable("id") Long mediaId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("完成上传, 媒体ID: {}, 机构ID: {}", mediaId, institutionId);
        MediaVO media = mediaService.completeUpload(mediaId, institutionId);
        return Result.success(media);
    }
    /**
     * 取消上传
     */
    @DeleteMapping("/{id}/cancel")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('INSTITUTION_ADMIN')")
    @Operation(summary = "取消上传", description = "取消上传并清理已上传的分片")
    public Result<Void> cancelUpload(
            @Parameter(description = "媒体ID") @PathVariable("id") Long mediaId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("取消上传, 媒体ID: {}, 机构ID: {}", mediaId, institutionId);
        mediaService.cancelUpload(mediaId, institutionId);
        return Result.success();
    }
    /**
     * 继续上传
     */
    @GetMapping("/{id}/resume")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('INSTITUTION_ADMIN')")
    @Operation(summary = "继续上传", description = "继续未完成的上传，获取未完成分片的预签名URL")
    public Result<UploadInitiationVO> resumeUpload(
            @Parameter(description = "媒体ID") @PathVariable("id") Long mediaId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        log.info("继续上传, 媒体ID: {}, 机构ID: {}", mediaId, institutionId);
        UploadInitiationVO result = mediaService.resumeUpload(mediaId, institutionId);
        return Result.success(result);
    }
    /**
     * 获取媒体信息
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('INSTITUTION_ADMIN')")
    @Operation(summary = "获取媒体信息", description = "获取指定媒体的详细信息")
    public Result<MediaVO> getMediaInfo(
            @Parameter(description = "媒体ID") @PathVariable("id") Long mediaId) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        MediaVO media = mediaService.getMediaInfo(mediaId, institutionId);
        return Result.success(media);
    }
    /**
     * 获取媒体访问URL
     */
    @GetMapping("/{id}/access")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('INSTITUTION_ADMIN')")
    @Operation(summary = "获取媒体访问URL", description = "获取媒体文件的临时访问URL")
    public Result<Map<String, String>> getMediaAccessUrl(
            @Parameter(description = "媒体ID") @PathVariable("id") Long mediaId,
            @Parameter(description = "URL有效期（分钟）") @RequestParam(required = false, defaultValue = "60") Long expirationMinutes) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        String url = mediaService.getMediaAccessUrl(mediaId, institutionId, expirationMinutes);
        Map<String, String> result = new HashMap<>();
        result.put("accessUrl", url);
        return Result.success(result);
    }
    /**
     * 获取媒体列表
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('INSTITUTION_ADMIN')")
    @Operation(summary = "获取媒体列表", description = "分页获取机构的媒体文件列表")
    public Result<Page<MediaVO>> getMediaList(
            @PageableDefault(size = 10) Pageable pageable) {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        Page<MediaVO> mediaList = mediaService.getMediaList(institutionId, pageable);
        return Result.success(mediaList);
    }
    /**
     * 获取存储配额信息
     */
    @GetMapping("/quota")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('INSTITUTION_ADMIN')")
    @Operation(summary = "获取存储配额信息", description = "获取机构的存储配额使用情况")
    public Result<List<QuotaInfoVO>> getStorageQuota() {
        Long institutionId = SecurityUtil.getCurrentInstitutionId();
        List<QuotaInfoVO> quotaInfo = storageQuotaService.getAllQuotas(institutionId);
        return Result.success(quotaInfo);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/PermissionController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.PermissionDTO;
import com.zhangziqi.online_course_mine.model.vo.PermissionVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.PermissionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;
/**
 * 权限管理控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/permissions")
@Tag(name = "权限管理", description = "权限查询、创建、编辑、删除等功能")
public class PermissionController {
    private final PermissionService permissionService;
    /**
     * 获取权限列表
     *
     * @return 权限列表
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "获取权限列表", description = "获取所有权限列表")
    public Result<List<PermissionVO>> getPermissionList() {
        log.info("获取权限列表");
        List<PermissionVO> permissionList = permissionService.getPermissionList();
        return Result.success(permissionList);
    }
    /**
     * 获取权限详情
     *
     * @param id 权限ID
     * @return 权限详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "获取权限详情", description = "根据权限ID获取权限详情")
    public Result<PermissionVO> getPermissionById(@Parameter(description = "权限ID") @PathVariable("id") Long id) {
        log.info("获取权限详情: {}", id);
        PermissionVO permissionVO = permissionService.getPermissionById(id);
        return Result.success(permissionVO);
    }
    /**
     * 创建权限
     *
     * @param permissionDTO 权限信息
     * @return 创建后的权限信息
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "创建权限", description = "创建新权限")
    public Result<PermissionVO> createPermission(@Valid @RequestBody PermissionDTO permissionDTO) {
        log.info("创建权限: {}", permissionDTO);
        PermissionVO permissionVO = permissionService.createPermission(permissionDTO);
        return Result.success(permissionVO);
    }
    /**
     * 更新权限
     *
     * @param id            权限ID
     * @param permissionDTO 权限信息
     * @return 更新后的权限信息
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "更新权限", description = "更新权限信息")
    public Result<PermissionVO> updatePermission(
            @Parameter(description = "权限ID") @PathVariable("id") Long id,
            @Valid @RequestBody PermissionDTO permissionDTO) {
        log.info("更新权限: {}, {}", id, permissionDTO);
        PermissionVO permissionVO = permissionService.updatePermission(id, permissionDTO);
        return Result.success(permissionVO);
    }
    /**
     * 删除权限
     *
     * @param id 权限ID
     * @return 无
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "删除权限", description = "根据权限ID删除权限")
    public Result<Void> deletePermission(@Parameter(description = "权限ID") @PathVariable("id") Long id) {
        log.info("删除权限: {}", id);
        permissionService.deletePermission(id);
        return Result.success();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/ReviewerInstitutionController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplicationQueryDTO;
import com.zhangziqi.online_course_mine.model.vo.InstitutionApplicationVO;
import com.zhangziqi.online_course_mine.model.vo.InstitutionVO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.service.InstitutionService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;
/**
 * 审核员机构审核控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/reviewer/institutions")
@PreAuthorize("hasAnyRole('ADMIN', 'REVIEWER')")
@Tag(name = "机构审核", description = "机构申请审核相关接口")
public class ReviewerInstitutionController {
    private final InstitutionService institutionService;
    /**
     * 分页查询机构申请
     *
     * @param queryDTO 查询参数
     * @return 申请分页
     */
    @GetMapping("/applications")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "分页查询机构申请", description = "分页查询机构申请列表，可按状态筛选")
    public Result<Page<InstitutionApplicationVO>> getApplications(@Valid InstitutionApplicationQueryDTO queryDTO) {
        log.info("分页查询机构申请: {}", queryDTO);
        return Result.success(
            institutionService.getApplications(queryDTO)
        );
    }
    /**
     * 查询申请详情
     *
     * @param id 申请ID
     * @return 申请详情
     */
    @GetMapping("/applications/{id}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "查询申请详情", description = "根据ID查询机构申请详情")
    public Result<InstitutionApplicationVO> getApplicationDetail(
            @Parameter(description = "申请ID") @PathVariable Long id) {
        log.info("查询申请详情: {}", id);
        return Result.success(
            institutionService.getApplicationDetail(id)
        );
    }
    /**
     * 审核通过申请
     *
     * @param id 申请ID
     * @param authentication 认证信息
     * @return 机构信息
     */
    @PostMapping("/applications/{id}/approve")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "审核通过", description = "通过机构申请，自动创建机构并生成注册码")
    public Result<InstitutionVO> approveApplication(
            @Parameter(description = "申请ID") @PathVariable Long id,
            Authentication authentication) {
        String username = authentication.getName();
        log.info("审核通过申请: {}, 审核人: {}", id, username);
        return Result.success(
            institutionService.approveApplication(id, username)
        );
    }
    /**
     * 审核拒绝申请
     *
     * @param id 申请ID
     * @param reason 拒绝原因
     * @param authentication 认证信息
     * @return 结果
     */
    @PostMapping("/applications/{id}/reject")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "审核拒绝", description = "拒绝机构申请")
    public Result<Void> rejectApplication(
            @Parameter(description = "申请ID") @PathVariable Long id,
            @Parameter(description = "拒绝原因") @RequestParam String reason,
            Authentication authentication) {
        String username = authentication.getName();
        log.info("审核拒绝申请: {}, 审核人: {}, 原因: {}", id, username, reason);
        institutionService.rejectApplication(id, reason, username);
        return Result.success();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/RoleController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.model.dto.RoleDTO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.model.vo.RoleVO;
import com.zhangziqi.online_course_mine.service.RoleService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Set;
/**
 * 角色管理控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/roles")
@Tag(name = "角色管理", description = "角色查询、创建、编辑、删除等功能")
public class RoleController {
    private final RoleService roleService;
    /**
     * 获取角色列表
     *
     * @return 角色列表
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "获取角色列表", description = "获取所有角色列表")
    public Result<List<RoleVO>> getRoleList() {
        log.info("获取角色列表");
        List<RoleVO> roleList = roleService.getRoleList();
        return Result.success(roleList);
    }
    /**
     * 获取角色详情
     *
     * @param id 角色ID
     * @return 角色详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "获取角色详情", description = "根据角色ID获取角色详情")
    public Result<RoleVO> getRoleById(@Parameter(description = "角色ID") @PathVariable("id") Long id) {
        log.info("获取角色详情: {}", id);
        RoleVO roleVO = roleService.getRoleById(id);
        return Result.success(roleVO);
    }
    /**
     * 创建角色
     *
     * @param roleDTO 角色信息
     * @return 创建后的角色信息
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "创建角色", description = "创建新角色")
    public Result<RoleVO> createRole(@Valid @RequestBody RoleDTO roleDTO) {
        log.info("创建角色: {}", roleDTO);
        RoleVO roleVO = roleService.createRole(roleDTO);
        return Result.success(roleVO);
    }
    /**
     * 更新角色
     *
     * @param id      角色ID
     * @param roleDTO 角色信息
     * @return 更新后的角色信息
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "更新角色", description = "更新角色信息")
    public Result<RoleVO> updateRole(
            @Parameter(description = "角色ID") @PathVariable("id") Long id,
            @Valid @RequestBody RoleDTO roleDTO) {
        log.info("更新角色: {}, {}", id, roleDTO);
        RoleVO roleVO = roleService.updateRole(id, roleDTO);
        return Result.success(roleVO);
    }
    /**
     * 删除角色
     *
     * @param id 角色ID
     * @return 无
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "删除角色", description = "根据角色ID删除角色")
    public Result<Void> deleteRole(@Parameter(description = "角色ID") @PathVariable("id") Long id) {
        log.info("删除角色: {}", id);
        roleService.deleteRole(id);
        return Result.success();
    }
    /**
     * 给角色分配权限
     *
     * @param id            角色ID
     * @param permissionIds 权限ID列表
     * @return 更新后的角色信息
     */
    @PutMapping("/{id}/permissions")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "给角色分配权限", description = "给角色分配权限")
    public Result<RoleVO> assignPermissions(
            @Parameter(description = "角色ID") @PathVariable("id") Long id,
            @Parameter(description = "权限ID列表") @RequestBody Set<Long> permissionIds) {
        log.info("给角色分配权限: {}, {}", id, permissionIds);
        RoleVO roleVO = roleService.assignPermissions(id, permissionIds);
        return Result.success(roleVO);
    }
    /**
     * 批量删除角色
     *
     * @param ids 角色ID列表
     * @return 无
     */
    @DeleteMapping("/batch")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "批量删除角色", description = "批量删除角色")
    public Result<Void> batchDeleteRoles(@Parameter(description = "角色ID列表") @RequestBody List<Long> ids) {
        log.info("批量删除角色: {}", ids);
        roleService.batchDeleteRoles(ids);
        return Result.success();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/controller/UserController.java">
package com.zhangziqi.online_course_mine.controller;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.ChangePasswordDTO;
import com.zhangziqi.online_course_mine.model.dto.EmailUpdateDTO;
import com.zhangziqi.online_course_mine.model.dto.UserDTO;
import com.zhangziqi.online_course_mine.model.dto.UserProfileDTO;
import com.zhangziqi.online_course_mine.model.dto.UserQueryDTO;
import com.zhangziqi.online_course_mine.model.vo.Result;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import com.zhangziqi.online_course_mine.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
/**
 * 用户管理控制器
 */
@Slf4j
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/users")
@Tag(name = "用户管理", description = "用户查询、创建、编辑、删除等功能")
public class UserController {
    private final UserService userService;
    /**
     * 分页查询用户列表
     *
     * @param queryDTO 查询条件
     * @return 用户列表（分页）
     */
    @GetMapping
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "分页查询用户列表", description = "根据条件分页查询用户列表")
    public Result<Page<UserVO>> getUserList(@Valid UserQueryDTO queryDTO) {
        log.info("分页查询用户列表: {}", queryDTO);
        Page<UserVO> page = userService.getUserList(queryDTO);
        return Result.success(page);
    }
    /**
     * 获取用户详情
     *
     * @param id 用户ID
     * @return 用户详情
     */
    @GetMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "获取用户详情", description = "根据用户ID获取用户详情")
    public Result<UserVO> getUserById(@Parameter(description = "用户ID") @PathVariable("id") Long id) {
        log.info("获取用户详情: {}", id);
        UserVO userVO = userService.getUserById(id);
        return Result.success(userVO);
    }
    /**
     * 创建用户
     *
     * @param userDTO 用户信息
     * @return 创建后的用户信息
     */
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "创建用户", description = "创建新用户")
    public Result<UserVO> createUser(@Valid @RequestBody UserDTO userDTO) {
        log.info("创建用户: {}", userDTO);
        UserVO userVO = userService.createUser(userDTO);
        return Result.success(userVO);
    }
    /**
     * 更新用户
     *
     * @param id 用户ID
     * @param userDTO 用户信息
     * @return 更新后的用户信息
     */
    @PutMapping("/{id}")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "更新用户", description = "更新用户信息")
    public Result<UserVO> updateUser(
            @Parameter(description = "用户ID") @PathVariable("id") Long id,
            @Valid @RequestBody UserDTO userDTO) {
        log.info("更新用户: {}, {}", id, userDTO);
        UserVO userVO = userService.updateUser(id, userDTO);
        return Result.success(userVO);
    }
    /**
     * 删除用户
     *
     * @param id 用户ID
     * @return 无
     */
    @DeleteMapping("/{id}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "删除用户", description = "根据用户ID删除用户")
    public Result<Void> deleteUser(@Parameter(description = "用户ID") @PathVariable("id") Long id) {
        log.info("删除用户: {}", id);
        userService.deleteUser(id);
        return Result.success();
    }
    /**
     * 修改用户状态
     *
     * @param id 用户ID
     * @param status 状态（0-禁用，1-正常）
     * @return 更新后的用户信息
     */
    @PatchMapping("/{id}/status")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "修改用户状态", description = "修改用户状态（0-禁用，1-正常）")
    public Result<UserVO> updateUserStatus(
            @Parameter(description = "用户ID") @PathVariable("id") Long id,
            @Parameter(description = "状态（0-禁用，1-正常）") @RequestParam("status") Integer status) {
        log.info("修改用户状态: {}, {}", id, status);
        UserVO userVO = userService.updateUserStatus(id, status);
        return Result.success(userVO);
    }
    /**
     * 给用户分配角色
     *
     * @param id 用户ID
     * @param roleIds 角色ID列表
     * @return 更新后的用户信息
     */
    @PutMapping("/{id}/roles")
    @ResponseStatus(HttpStatus.OK)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "给用户分配角色", description = "给用户分配角色")
    public Result<UserVO> assignRoles(
            @Parameter(description = "用户ID") @PathVariable("id") Long id,
            @Parameter(description = "角色ID列表") @RequestBody Set<Long> roleIds) {
        log.info("给用户分配角色: {}, {}", id, roleIds);
        UserVO userVO = userService.assignRoles(id, roleIds);
        return Result.success(userVO);
    }
    /**
     * 批量删除用户
     *
     * @param ids 用户ID列表
     * @return 无
     */
    @DeleteMapping("/batch")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    @PreAuthorize("hasRole('ADMIN')")
    @Operation(summary = "批量删除用户", description = "批量删除用户")
    public Result<Void> batchDeleteUsers(@Parameter(description = "用户ID列表") @RequestBody List<Long> ids) {
        log.info("批量删除用户: {}", ids);
        userService.batchDeleteUsers(ids);
        return Result.success();
    }
    /**
     * 获取当前用户信息
     *
     * @return 当前用户信息
     */
    @GetMapping("/current")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取当前用户信息", description = "获取当前登录用户的详细信息")
    public Result<UserVO> getCurrentUser() {
        String username = getCurrentUsername();
        log.info("获取当前用户信息: {}", username);
        UserVO userVO = userService.getCurrentUser(username);
        return Result.success(userVO);
    }
    /**
     * 更新当前用户信息
     *
     * @param profileDTO 用户个人信息
     * @return 更新后的用户信息
     */
    @PutMapping("/current")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "更新当前用户信息", description = "更新当前登录用户的个人信息")
    public Result<UserVO> updateCurrentUser(@Valid @RequestBody UserProfileDTO profileDTO) {
        String username = getCurrentUsername();
        log.info("更新当前用户信息: {}, {}", username, profileDTO);
        UserVO userVO = userService.updateCurrentUserProfile(username, profileDTO.getNickname(), profileDTO.getPhone());
        return Result.success(userVO);
    }
    /**
     * 修改当前用户密码
     *
     * @param changePasswordDTO 密码修改请求
     * @return 操作结果
     */
    @PutMapping("/current/password")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "修改密码", description = "修改当前用户密码")
    public Result<Void> changePassword(@Valid @RequestBody ChangePasswordDTO changePasswordDTO) {
        String username = getCurrentUsername();
        // 校验新密码与确认密码是否一致
        if (!changePasswordDTO.getNewPassword().equals(changePasswordDTO.getConfirmPassword())) {
            return Result.fail(400, "新密码与确认密码不一致");
        }
        log.info("修改当前用户密码: {}", username);
        boolean result = userService.changePassword(username, 
                changePasswordDTO.getOldPassword(), 
                changePasswordDTO.getNewPassword());
        return result ? Result.success() : Result.fail(400, "密码修改失败");
    }
    /**
     * 更新当前用户邮箱
     *
     * @param emailUpdateDTO 邮箱更新请求
     * @return 操作结果
     */
    @PutMapping("/current/email")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "更新邮箱", description = "更新当前用户邮箱（需验证码）")
    public Result<UserVO> updateEmail(@Valid @RequestBody EmailUpdateDTO emailUpdateDTO) {
        String username = getCurrentUsername();
        log.info("更新当前用户邮箱: {}, 新邮箱: {}", username, emailUpdateDTO.getNewEmail());
        UserVO userVO = userService.updateEmail(username, 
                emailUpdateDTO.getNewEmail(), 
                emailUpdateDTO.getEmailCode(), 
                emailUpdateDTO.getPassword());
        return Result.success(userVO);
    }
    /**
     * 上传头像
     *
     * @param file 头像文件
     * @return 头像URL
     */
    @PostMapping(value = "/current/avatar", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "上传头像", description = "上传当前用户头像")
    public Result<Map<String, String>> uploadAvatar(@RequestParam("file") MultipartFile file) {
        String username = getCurrentUsername();
        log.info("上传头像: {}, 文件大小: {}", username, file.getSize());
        try {
            // 调用服务层方法上传并更新头像
            Map<String, String> result = userService.uploadAndUpdateAvatar(username, file);
            return Result.success(result);
        } catch (BusinessException e) {
            return Result.fail(e.getCode(), e.getMessage());
        } catch (IOException e) {
            log.error("头像上传失败", e);
            return Result.fail(500, "头像上传失败: " + e.getMessage());
        }
    }
    /**
     * 获取用户基本信息（用于前端展示）
     *
     * @param userId 用户ID
     * @return 用户基本信息
     */
    @GetMapping("/basic/{userId}")
    @ResponseStatus(HttpStatus.OK)
    @Operation(summary = "获取用户基本信息", description = "获取用户基本信息（用于前端展示）")
    public Result<UserVO> getBasicUserInfo(@PathVariable("userId") Long userId) {
        log.info("获取用户基本信息: {}", userId);
        UserVO userVO = userService.getBasicUserInfo(userId);
        return Result.success(userVO);
    }
    /**
     * 获取当前登录用户名
     *
     * @return 当前登录用户名
     */
    private String getCurrentUsername() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        return authentication.getName();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/exception/BusinessException.java">
package com.zhangziqi.online_course_mine.exception;
import lombok.Getter;
/**
 * 业务异常
 */
@Getter
public class BusinessException extends RuntimeException {
    /**
     * 错误码
     */
    private final int code;
    /**
     * 错误消息
     */
    private final String message;
    public BusinessException(int code, String message) {
        super(message);
        this.code = code;
        this.message = message;
    }
    public BusinessException(String message) {
        this(500, message);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/exception/GlobalExceptionHandler.java">
package com.zhangziqi.online_course_mine.exception;
import com.zhangziqi.online_course_mine.model.vo.Result;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.AuthenticationException;
import org.springframework.validation.BindException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
/**
 * 全局异常处理器
 */
@Slf4j
@RestControllerAdvice
public class GlobalExceptionHandler {
    /**
     * 处理业务异常
     */
    @ExceptionHandler(BusinessException.class)
    public ResponseEntity<Map<String, String>> handleBusinessException(BusinessException e) {
        log.error("业务异常: {}", e.getMessage());
        Map<String, String> response = new HashMap<>();
        response.put("error", e.getMessage());
        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
    }
    /**
     * 处理认证异常
     */
    @ResponseStatus(HttpStatus.UNAUTHORIZED)
    @ExceptionHandler(AuthenticationException.class)
    public Result<Void> handleAuthenticationException(AuthenticationException e) {
        log.error("认证异常: {}", e.getMessage());
        String message = e instanceof BadCredentialsException ? "用户名或密码错误" : "认证失败";
        return Result.fail(401, message);
    }
    /**
     * 处理授权异常
     */
    @ResponseStatus(HttpStatus.FORBIDDEN)
    @ExceptionHandler(AccessDeniedException.class)
    public Result<Void> handleAccessDeniedException(AccessDeniedException e) {
        log.error("权限不足: {}", e.getMessage());
        return Result.fail(403, "权限不足");
    }
    /**
     * 处理参数校验异常
     */
    @ExceptionHandler({MethodArgumentNotValidException.class, BindException.class})
    public Result<Void> handleValidationException(Exception e) {
        List<FieldError> fieldErrors;
        if (e instanceof MethodArgumentNotValidException) {
            fieldErrors = ((MethodArgumentNotValidException) e).getBindingResult().getFieldErrors();
        } else {
            fieldErrors = ((BindException) e).getBindingResult().getFieldErrors();
        }
        String message = fieldErrors.stream()
                .map(error -> error.getField() + ": " + error.getDefaultMessage())
                .collect(Collectors.joining(", "));
        log.error("参数校验异常: {}", message);
        return Result.fail(400, message);
    }
    /**
     * 处理其他异常
     */
    @ExceptionHandler(Exception.class)
    public Result<Void> handleException(Exception e) {
        log.error("系统异常", e);
        return Result.fail(500, "系统异常，请联系管理员");
    }
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<Map<String, String>> handleResourceNotFoundException(ResourceNotFoundException e) {
        log.error("资源未找到: {}", e.getMessage());
        Map<String, String> response = new HashMap<>();
        response.put("error", e.getMessage());
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
    }
    @ExceptionHandler(BadCredentialsException.class)
    public ResponseEntity<Map<String, String>> handleBadCredentialsException(BadCredentialsException e) {
        log.error("认证失败: {}", e.getMessage());
        Map<String, String> response = new HashMap<>();
        response.put("error", "用户名或密码错误");
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/exception/ResourceNotFoundException.java">
package com.zhangziqi.online_course_mine.exception;
/**
 * 资源未找到异常
 */
public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
    public ResourceNotFoundException(String message, Throwable cause) {
        super(message, cause);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/converter/InstitutionApplicationConverter.java">
package com.zhangziqi.online_course_mine.model.converter;
import com.zhangziqi.online_course_mine.model.entity.InstitutionApplication;
import com.zhangziqi.online_course_mine.model.vo.InstitutionApplicationVO;
import org.springframework.beans.BeanUtils;
/**
 * 机构申请转换器
 */
public class InstitutionApplicationConverter {
    /**
     * 将实体转换为VO
     *
     * @param application 机构申请实体
     * @return 机构申请VO
     */
    public static InstitutionApplicationVO toVO(InstitutionApplication application) {
        if (application == null) {
            return null;
        }
        InstitutionApplicationVO vo = new InstitutionApplicationVO();
        BeanUtils.copyProperties(application, vo);
        return vo;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/converter/InstitutionConverter.java">
package com.zhangziqi.online_course_mine.model.converter;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.vo.InstitutionVO;
import org.springframework.beans.BeanUtils;
/**
 * 机构转换器
 */
public class InstitutionConverter {
    /**
     * 将实体转换为VO
     *
     * @param institution 机构实体
     * @return 机构VO
     */
    public static InstitutionVO toVO(Institution institution) {
        if (institution == null) {
            return null;
        }
        InstitutionVO vo = new InstitutionVO();
        BeanUtils.copyProperties(institution, vo);
        return vo;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/ChangePasswordDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 密码修改DTO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "密码修改请求")
public class ChangePasswordDTO {
    @NotBlank(message = "旧密码不能为空")
    @Schema(description = "旧密码", example = "oldPassword123")
    private String oldPassword;
    @NotBlank(message = "新密码不能为空")
    @Pattern(regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,20}$", 
            message = "密码必须包含大小写字母和数字，长度为8-20位")
    @Schema(description = "新密码", example = "newPassword123")
    private String newPassword;
    @NotBlank(message = "确认密码不能为空")
    @Schema(description = "确认密码", example = "newPassword123")
    private String confirmPassword;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/EmailUpdateDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 邮箱更新DTO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "邮箱更新请求")
public class EmailUpdateDTO {
    @NotBlank(message = "新邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "新邮箱", example = "newemail@example.com")
    private String newEmail;
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "邮箱验证码", example = "123456")
    private String emailCode;
    @NotBlank(message = "当前密码不能为空")
    @Schema(description = "当前密码", example = "password123")
    private String password;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/EmailVerificationDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
/**
 * 邮箱验证码请求DTO
 */
@Data
@Schema(description = "邮箱验证码请求")
public class EmailVerificationDTO {
    /**
     * 邮箱
     */
    @NotBlank(message = "邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "邮箱", example = "zhangsan@example.com")
    private String email;
    /**
     * 验证码Key
     */
    @NotBlank(message = "验证码Key不能为空")
    @Schema(description = "验证码Key", example = "123456")
    private String captchaKey;
    /**
     * 验证码
     */
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "验证码", example = "1234")
    private String captchaCode;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/InstitutionApplicationQueryDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Data;
/**
 * 机构申请查询DTO
 */
@Data
@Schema(description = "机构申请查询参数")
public class InstitutionApplicationQueryDTO {
    @Schema(description = "申请ID", example = "APP123456")
    private String applicationId;
    @Schema(description = "机构名称", example = "示例教育机构")
    private String name;
    @Schema(description = "联系人", example = "张三")
    private String contactPerson;
    @Schema(description = "联系邮箱", example = "contact@example.com")
    private String contactEmail;
    @Schema(description = "状态：0-待审核，1-已通过，2-已拒绝", example = "0")
    private Integer status;
    @Schema(description = "页码", defaultValue = "1")
    private Integer pageNum = 1;
    @Schema(description = "每页条数", defaultValue = "10")
    private Integer pageSize = 10;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/InstitutionApplyDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Data;
/**
 * 机构申请DTO
 */
@Data
@Schema(description = "机构申请参数")
public class InstitutionApplyDTO {
    @NotBlank(message = "机构名称不能为空")
    @Schema(description = "机构名称", example = "示例教育机构")
    private String name;
    @Schema(description = "机构Logo", example = "https://example.com/logo.png")
    private String logo;
    @Size(max = 500, message = "机构描述最多500字")
    @Schema(description = "机构描述", example = "专注于提供高质量的在线课程...")
    private String description;
    @NotBlank(message = "联系人不能为空")
    @Schema(description = "联系人", example = "张三")
    private String contactPerson;
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    @Schema(description = "联系电话", example = "13800138000")
    private String contactPhone;
    @NotBlank(message = "联系邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "联系邮箱", example = "contact@example.com")
    private String contactEmail;
    @Schema(description = "地址", example = "北京市朝阳区xxx街道xxx号")
    private String address;
    @NotBlank(message = "验证码Key不能为空")
    @Schema(description = "验证码Key", example = "7d8f3e")
    private String captchaKey;
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "验证码", example = "A2B3")
    private String captchaCode;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/InstitutionRegisterDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Data;
/**
 * 机构用户注册DTO
 */
@Data
@Schema(description = "机构用户注册参数")
public class InstitutionRegisterDTO {
    @NotBlank(message = "用户名不能为空")
    @Size(min = 4, max = 20, message = "用户名长度为4-20位")
    @Pattern(regexp = "^[a-zA-Z0-9_]+$", message = "用户名只能包含字母、数字和下划线")
    @Schema(description = "用户名", example = "institution_user")
    private String username;
    @NotBlank(message = "密码不能为空")
    @Size(min = 6, max = 20, message = "密码长度为6-20位")
    @Schema(description = "密码", example = "password123")
    private String password;
    @NotBlank(message = "邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "邮箱", example = "user@example.com")
    private String email;
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    @Schema(description = "手机号", example = "13800138000")
    private String phone;
    @NotBlank(message = "机构注册码不能为空")
    @Schema(description = "机构注册码", example = "ABC12345")
    private String institutionCode;
    @NotBlank(message = "验证码Key不能为空")
    @Schema(description = "验证码Key", example = "7d8f3e")
    private String captchaKey;
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "验证码", example = "A2B3")
    private String captchaCode;
    @NotBlank(message = "邮箱验证码不能为空")
    @Size(min = 6, max = 6, message = "邮箱验证码长度必须为6位")
    @Pattern(regexp = "^\\d{6}$", message = "邮箱验证码必须为6位数字")
    @Schema(description = "邮箱验证码", example = "123456")
    private String emailCode;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/JwtTokenDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * JWT令牌数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class JwtTokenDTO {
    /**
     * 访问令牌
     */
    private String accessToken;
    /**
     * 刷新令牌
     */
    private String refreshToken;
    /**
     * 令牌类型
     */
    @Builder.Default
    private String tokenType = "Bearer";
    /**
     * 过期时间（毫秒）
     */
    private long expiresIn;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/LoginDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
/**
 * 登录请求DTO
 */
@Data
@Schema(description = "登录请求")
public class LoginDTO {
    /**
     * 用户名
     */
    @NotBlank(message = "用户名不能为空")
    @Schema(description = "用户名", example = "zhangsan")
    private String username;
    /**
     * 密码
     */
    @NotBlank(message = "密码不能为空")
    @Schema(description = "密码", example = "password123")
    private String password;
    /**
     * 验证码Key
     */
    @NotBlank(message = "验证码Key不能为空")
    @Schema(description = "验证码Key", example = "123456")
    private String captchaKey;
    /**
     * 验证码
     */
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "验证码", example = "1234")
    private String captchaCode;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/media/MediaUploadInitDTO.java">
package com.zhangziqi.online_course_mine.model.dto.media;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 媒体上传初始化DTO
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class MediaUploadInitDTO {
    @NotBlank(message = "标题不能为空")
    private String title;                // 媒体标题
    private String description;          // 媒体描述（可选）
    @NotBlank(message = "文件名不能为空")
    private String filename;             // 原始文件名
    @NotBlank(message = "内容类型不能为空")
    private String contentType;          // 内容类型
    @NotNull(message = "文件大小不能为空")
    @Min(value = 1, message = "文件大小必须大于0")
    private Long fileSize;               // 文件大小（字节）
    private Integer chunkSize;           // 分片大小（字节，可选）
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/media/PartCompletionDTO.java">
package com.zhangziqi.online_course_mine.model.dto.media;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 分片完成通知DTO
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class PartCompletionDTO {
    @NotNull(message = "分片编号不能为空")
    @Min(value = 1, message = "分片编号必须大于0")
    private Integer partNumber;  // 分片编号
    @NotBlank(message = "ETag不能为空")
    private String eTag;         // 分片ETag
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/media/PresignedUrlInfo.java">
package com.zhangziqi.online_course_mine.model.dto.media;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 预签名URL信息
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class PresignedUrlInfo {
    private Integer partNumber; // 分片编号
    private String url;         // 预签名URL
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/media/UploadInitiationVO.java">
package com.zhangziqi.online_course_mine.model.dto.media;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.List;
/**
 * 上传初始化响应VO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class UploadInitiationVO {
    private Long mediaId;                        // 媒体ID
    private String uploadId;                     // 上传ID
    private Integer totalParts;                  // 总分片数
    private Long chunkSize;                      // 分片大小（字节）
    private List<PresignedUrlInfo> presignedUrls; // 预签名URL列表
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/media/UploadStatusInfo.java">
package com.zhangziqi.online_course_mine.model.dto.media;
import com.zhangziqi.online_course_mine.model.enums.MediaStatus;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
/**
 * 上传状态信息
 * 用于在Redis中保存分片上传的状态
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class UploadStatusInfo {
    private Long mediaId;            // 媒体ID
    private Long institutionId;      // 机构ID
    private Long uploaderId;         // 上传者ID
    private String uploadId;         // S3上传ID
    private String objectKey;        // S3对象键
    private String filename;         // 原始文件名
    private String contentType;      // 内容类型
    private Long fileSize;           // 文件总大小
    private MediaStatus status;      // 上传状态
    private Integer totalParts;      // 总分片数
    @Builder.Default
    private List<PartInfo> completedParts = new ArrayList<>(); // 已完成的分片信息
    private LocalDateTime initiatedAt;     // 初始化时间
    private LocalDateTime lastUpdatedAt;   // 最后更新时间
    private LocalDateTime expiresAt;       // 过期时间
    /**
     * 分片信息
     */
    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class PartInfo {
        private Integer partNumber;  // 分片编号
        private String eTag;         // 分片ETag
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/media/UploadStatusVO.java">
package com.zhangziqi.online_course_mine.model.dto.media;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
import java.util.List;
/**
 * 上传状态响应VO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class UploadStatusVO {
    private Long mediaId;                    // 媒体ID
    private String status;                   // 上传状态
    private Integer totalParts;              // 总分片数
    private Integer completedParts;          // 已完成分片数
    private Double progressPercentage;       // 上传进度百分比
    private List<Integer> completedPartNumbers; // 已完成的分片编号列表
    private LocalDateTime initiatedAt;       // 初始化时间
    private LocalDateTime lastUpdatedAt;     // 最后更新时间
    private LocalDateTime expiresAt;         // 过期时间
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/PermissionDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 权限数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "权限数据")
public class PermissionDTO {
    @Schema(description = "权限ID")
    private Long id;
    @NotBlank(message = "权限名称不能为空")
    @Size(min = 2, max = 50, message = "权限名称长度为2-50个字符")
    @Schema(description = "权限名称", example = "用户查询")
    private String name;
    @NotBlank(message = "权限编码不能为空")
    @Size(min = 4, max = 50, message = "权限编码长度为4-50个字符")
    @Pattern(regexp = "^[A-Z0-9_]+$", message = "权限编码只能包含大写字母、数字和下划线")
    @Schema(description = "权限编码", example = "USER_QUERY")
    private String code;
    @Schema(description = "权限描述")
    private String description;
    @Schema(description = "资源URL")
    private String url;
    @Schema(description = "HTTP方法", example = "GET")
    private String method;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/RefreshTokenDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import lombok.Data;
/**
 * 刷新令牌请求DTO
 */
@Data
@Schema(description = "刷新令牌请求")
public class RefreshTokenDTO {
    /**
     * 刷新令牌
     */
    @NotBlank(message = "刷新令牌不能为空")
    @Schema(description = "刷新令牌", example = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...")
    private String refreshToken;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/RegisterDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.Data;
/**
 * 注册请求DTO
 */
@Data
@Schema(description = "注册请求")
public class RegisterDTO {
    /**
     * 用户名
     */
    @NotBlank(message = "用户名不能为空")
    @Size(min = 4, max = 20, message = "用户名长度为4-20位")
    @Pattern(regexp = "^[a-zA-Z0-9_]+$", message = "用户名只能包含字母、数字和下划线")
    @Schema(description = "用户名", example = "zhangsan")
    private String username;
    /**
     * 密码
     */
    @NotBlank(message = "密码不能为空")
    @Size(min = 6, max = 20, message = "密码长度为6-20位")
    @Schema(description = "密码", example = "password123")
    private String password;
    /**
     * 邮箱
     */
    @NotBlank(message = "邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "邮箱", example = "zhangsan@example.com")
    private String email;
    /**
     * 手机号
     */
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    @Schema(description = "手机号", example = "13812345678")
    private String phone;
    /**
     * 验证码Key
     */
    @NotBlank(message = "验证码Key不能为空")
    @Schema(description = "验证码Key", example = "123456")
    private String captchaKey;
    /**
     * 验证码
     */
    @NotBlank(message = "验证码不能为空")
    @Schema(description = "验证码", example = "1234")
    private String captchaCode;
    /**
     * 邮箱验证码
     */
    @NotBlank(message = "邮箱验证码不能为空")
    @Size(min = 6, max = 6, message = "邮箱验证码长度必须为6位")
    @Pattern(regexp = "^\\d{6}$", message = "邮箱验证码必须为6位数字")
    @Schema(description = "邮箱验证码", example = "123456")
    private String emailCode;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/RoleDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.Set;
/**
 * 角色数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "角色数据")
public class RoleDTO {
    @Schema(description = "角色ID")
    private Long id;
    @NotBlank(message = "角色名称不能为空")
    @Size(min = 2, max = 50, message = "角色名称长度为2-50个字符")
    @Schema(description = "角色名称", example = "系统管理员")
    private String name;
    @NotBlank(message = "角色编码不能为空")
    @Size(min = 4, max = 50, message = "角色编码长度为4-50个字符")
    @Pattern(regexp = "^ROLE_[A-Z0-9_]+$", message = "角色编码必须以ROLE_开头，且只能包含大写字母、数字和下划线")
    @Schema(description = "角色编码", example = "ROLE_ADMIN")
    private String code;
    @Schema(description = "角色描述")
    private String description;
    @Schema(description = "权限ID列表")
    private Set<Long> permissionIds;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/UserDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.Set;
/**
 * 用户数据传输对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "用户数据")
public class UserDTO {
    @Schema(description = "用户ID")
    private Long id;
    @NotBlank(message = "用户名不能为空")
    @Size(min = 4, max = 20, message = "用户名长度为4-20位")
    @Pattern(regexp = "^[a-zA-Z0-9_]+$", message = "用户名只能包含字母、数字和下划线")
    @Schema(description = "用户名", example = "zhangsan")
    private String username;
    @Schema(description = "密码")
    private String password;
    @NotBlank(message = "邮箱不能为空")
    @Email(message = "邮箱格式不正确")
    @Schema(description = "邮箱", example = "zhangsan@example.com")
    private String email;
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    @Schema(description = "手机号", example = "13812345678")
    private String phone;
    @Schema(description = "头像")
    private String avatar;
    @Schema(description = "昵称")
    private String nickname;
    @Schema(description = "状态：0-禁用，1-正常")
    private Integer status;
    @Schema(description = "机构ID")
    private Long institutionId;
    @Schema(description = "角色ID列表")
    private Set<Long> roleIds;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/UserProfileDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.Pattern;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 用户个人信息更新DTO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "用户个人信息更新请求")
public class UserProfileDTO {
    @Schema(description = "昵称", example = "张三")
    private String nickname;
    @Schema(description = "手机号", example = "13800138000")
    @Pattern(regexp = "^1[3-9]\\d{9}$", message = "手机号格式不正确")
    private String phone;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/dto/UserQueryDTO.java">
package com.zhangziqi.online_course_mine.model.dto;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Data;
/**
 * 用户查询参数
 */
@Data
@Schema(description = "用户查询参数")
public class UserQueryDTO {
    @Schema(description = "用户名")
    private String username;
    @Schema(description = "邮箱")
    private String email;
    @Schema(description = "手机号")
    private String phone;
    @Schema(description = "状态：0-禁用，1-正常")
    private Integer status;
    @Schema(description = "机构ID")
    private Long institutionId;
    @Schema(description = "角色ID")
    private Long roleId;
    @Schema(description = "页码", defaultValue = "1")
    private Integer pageNum = 1;
    @Schema(description = "每页条数", defaultValue = "10")
    private Integer pageSize = 10;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/BaseEntity.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;
import java.time.LocalDateTime;
/**
 * 基础实体类
 */
@Data
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
public abstract class BaseEntity {
    /**
     * 主键ID
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    /**
     * 创建时间
     */
    @CreatedDate
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;
    /**
     * 更新时间
     */
    @LastModifiedDate
    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Institution.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.util.ArrayList;
import java.util.List;
/**
 * 机构实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "institutions")
public class Institution extends BaseEntity {
    /**
     * 机构名称
     */
    @Column(nullable = false, length = 100)
    private String name;
    /**
     * 机构Logo
     */
    private String logo;
    /**
     * 机构描述
     */
    @Column(length = 500)
    private String description;
    /**
     * 状态（0-待审核，1-正常，2-禁用）
     */
    @Builder.Default
    private Integer status = 0;
    /**
     * 机构注册码
     */
    @Column(unique = true, length = 20)
    private String registerCode;
    /**
     * 联系人
     */
    @Column(length = 50)
    private String contactPerson;
    /**
     * 联系电话
     */
    @Column(length = 20)
    private String contactPhone;
    /**
     * 联系邮箱
     */
    private String contactEmail;
    /**
     * 地址
     */
    @Column(length = 255)
    private String address;
    /**
     * 机构媒体资源
     */
    @OneToMany(mappedBy = "institution", cascade = CascadeType.ALL, orphanRemoval = true)
    @Builder.Default
    private List<Media> mediaList = new ArrayList<>();
    /**
     * 机构存储配额
     */
    @OneToMany(mappedBy = "institution", cascade = CascadeType.ALL, orphanRemoval = true)
    @Builder.Default
    private List<StorageQuota> quotas = new ArrayList<>();
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/InstitutionApplication.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.time.LocalDateTime;
/**
 * 机构申请实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "institution_applications")
public class InstitutionApplication extends BaseEntity {
    /**
     * 申请ID（业务编号）
     */
    @Column(unique = true, length = 20)
    private String applicationId;
    /**
     * 机构名称
     */
    @Column(nullable = false, length = 100)
    private String name;
    /**
     * 机构Logo
     */
    private String logo;
    /**
     * 机构描述
     */
    @Column(length = 500)
    private String description;
    /**
     * 联系人
     */
    @Column(length = 50)
    private String contactPerson;
    /**
     * 联系电话
     */
    @Column(length = 20)
    private String contactPhone;
    /**
     * 联系邮箱
     */
    private String contactEmail;
    /**
     * 地址
     */
    @Column(length = 255)
    private String address;
    /**
     * 状态（0-待审核，1-已通过，2-已拒绝）
     */
    @Builder.Default
    private Integer status = 0;
    /**
     * 审核结果备注
     */
    @Column(length = 500)
    private String reviewComment;
    /**
     * 审核人ID
     */
    private Long reviewerId;
    /**
     * 审核时间
     */
    private LocalDateTime reviewedAt;
    /**
     * 关联的机构ID（审核通过后）
     */
    private Long institutionId;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Media.java">
package com.zhangziqi.online_course_mine.model.entity;
import com.zhangziqi.online_course_mine.model.enums.MediaStatus;
import com.zhangziqi.online_course_mine.model.enums.MediaType;
import jakarta.persistence.*;
import lombok.Data;
import lombok.EqualsAndHashCode;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import java.time.LocalDateTime;
/**
 * 媒体资源实体
 */
@Entity
@Table(name = "media")
@Data
@EqualsAndHashCode(callSuper = false)
public class Media {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    /**
     * 媒体标题
     */
    private String title;
    /**
     * 媒体描述
     */
    private String description;
    /**
     * 媒体类型（视频、音频、文档）
     */
    @Enumerated(EnumType.STRING)
    private MediaType type;
    /**
     * 文件大小（字节）
     */
    private Long size;
    /**
     * 原始文件名
     */
    private String originalFilename;
    /**
     * 存储路径
     */
    private String storagePath;
    /**
     * 媒体状态
     */
    @Enumerated(EnumType.STRING)
    private MediaStatus status;
    /**
     * 所属机构
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "institution_id", nullable = false)
    private Institution institution;
    /**
     * 上传者ID（只记录ID，不做实体关联）
     */
    @Column(name = "uploader_id")
    private Long uploaderId;
    /**
     * 上传时间
     */
    @CreationTimestamp
    private LocalDateTime uploadTime;
    /**
     * 最后访问时间
     */
    @UpdateTimestamp
    private LocalDateTime lastAccessTime;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Permission.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
/**
 * 权限实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "permissions")
@EqualsAndHashCode(callSuper = true)
public class Permission extends BaseEntity {
    /**
     * 权限名称
     */
    @Column(nullable = false, length = 50)
    private String name;
    /**
     * 权限编码
     */
    @Column(nullable = false, unique = true, length = 50)
    private String code;
    /**
     * 权限描述
     */
    @Column(length = 255)
    private String description;
    /**
     * 资源路径
     */
    @Column(length = 255)
    private String url;
    /**
     * HTTP方法
     */
    @Column(length = 10)
    private String method;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/Role.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import java.util.HashSet;
import java.util.Set;
/**
 * 角色实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "roles")
@EqualsAndHashCode(callSuper = true)
public class Role extends BaseEntity {
    /**
     * 角色名称
     */
    @Column(nullable = false, unique = true, length = 50)
    private String name;
    /**
     * 角色编码
     */
    @Column(nullable = false, unique = true, length = 50)
    private String code;
    /**
     * 角色描述
     */
    @Column(length = 255)
    private String description;
    /**
     * 角色权限
     */
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
        name = "role_permissions",
        joinColumns = @JoinColumn(name = "role_id"),
        inverseJoinColumns = @JoinColumn(name = "permission_id")
    )
    @Builder.Default
    private Set<Permission> permissions = new HashSet<>();
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/StorageQuota.java">
package com.zhangziqi.online_course_mine.model.entity;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import jakarta.persistence.*;
import lombok.Data;
import lombok.EqualsAndHashCode;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import java.time.LocalDateTime;
/**
 * 存储配额实体
 */
@Entity
@Table(name = "storage_quota")
@Data
@EqualsAndHashCode(callSuper = false)
public class StorageQuota {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    /**
     * 配额类型
     */
    @Enumerated(EnumType.STRING)
    private QuotaType type;
    /**
     * 总配额(字节)
     */
    private Long totalQuota;
    /**
     * 已使用配额(字节)
     */
    private Long usedQuota;
    /**
     * 存储空间是否启用
     */
    private Boolean enabled;
    /**
     * 所属机构
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "institution_id", nullable = false)
    private Institution institution;
    /**
     * 创建时间
     */
    @CreationTimestamp
    private LocalDateTime createdAt;
    /**
     * 更新时间
     */
    @UpdateTimestamp
    private LocalDateTime updatedAt;
    /**
     * 过期时间(可选)
     */
    private LocalDateTime expiresAt;
    /**
     * 获取机构ID
     */
    public Long getInstitutionId() {
        return institution != null ? institution.getId() : null;
    }
    /**
     * 设置机构ID
     */
    public void setInstitutionId(Long institutionId) {
        if (institutionId != null) {
            this.institution = Institution.builder().id(institutionId).build();
        } else {
            this.institution = null;
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/entity/User.java">
package com.zhangziqi.online_course_mine.model.entity;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import org.hibernate.annotations.DynamicUpdate;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;
/**
 * 用户实体类
 */
@Data
@Entity
@SuperBuilder
@NoArgsConstructor
@AllArgsConstructor
@DynamicUpdate
@Table(name = "users")
public class User extends BaseEntity {
    /**
     * 用户名
     */
    @Column(nullable = false, unique = true, length = 50)
    private String username;
    /**
     * 密码
     */
    @Column(nullable = false)
    private String password;
    /**
     * 姓名
     */
    @Column(length = 50)
    private String name;
    /**
     * 邮箱
     */
    @Column(unique = true)
    private String email;
    /**
     * 手机号
     */
    @Column(unique = true)
    private String phone;
    /**
     * 头像
     */
    @Column(length = 255)
    private String avatar;
    /**
     * 昵称
     */
    @Column(length = 50)
    private String nickname;
    /**
     * 状态（0-禁用，1-正常）
     */
    @Builder.Default
    private Integer status = 1;
    /**
     * 所属机构（仅机构用户）
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "institution_id")
    private Institution institution;
    /**
     * 最后登录时间
     */
    private LocalDateTime lastLoginAt;
    /**
     * 用户角色
     */
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
        name = "user_roles",
        joinColumns = @JoinColumn(name = "user_id"),
        inverseJoinColumns = @JoinColumn(name = "role_id")
    )
    @Builder.Default
    private Set<Role> roles = new HashSet<>();
    /**
     * 获取机构ID
     */
    public Long getInstitutionId() {
        return institution != null ? institution.getId() : null;
    }
    /**
     * 设置机构ID
     */
    public void setInstitutionId(Long institutionId) {
        if (institutionId != null) {
            this.institution = Institution.builder().id(institutionId).build();
        } else {
            this.institution = null;
        }
    }
    /**
     * 判断用户是否启用
     */
    public boolean getEnabled() {
        return status != null && status == 1;
    }
    /**
     * 用于Builder模式的机构ID设置
     */
    public abstract static class UserBuilder<C extends User, B extends UserBuilder<C, B>> extends BaseEntity.BaseEntityBuilder<C, B> {
        /**
         * 设置机构ID
         */
        public B institutionId(Long institutionId) {
            if (institutionId != null) {
                this.institution(Institution.builder().id(institutionId).build());
            }
            return self();
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/MediaStatus.java">
package com.zhangziqi.online_course_mine.model.enums;
/**
 * 媒体状态枚举
 */
public enum MediaStatus {
    /**
     * 上传中
     */
    UPLOADING,
    /**
     * 处理中（如转码）
     */
    PROCESSING,
    /**
     * 已完成
     */
    COMPLETED,
    /**
     * 失败
     */
    FAILED
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/MediaType.java">
package com.zhangziqi.online_course_mine.model.enums;
/**
 * 媒体类型枚举
 */
public enum MediaType {
    /**
     * 视频
     */
    VIDEO,
    /**
     * 音频
     */
    AUDIO,
    /**
     * 文档
     */
    DOCUMENT
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/QuotaType.java">
package com.zhangziqi.online_course_mine.model.enums;
/**
 * 配额类型枚举
 */
public enum QuotaType {
    /**
     * 视频配额
     */
    VIDEO,
    /**
     * 文档配额
     */
    DOCUMENT,
    /**
     * 总配额
     */
    TOTAL
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/enums/RoleEnum.java">
package com.zhangziqi.online_course_mine.model.enums;
import lombok.Getter;
/**
 * 角色枚举
 */
@Getter
public enum RoleEnum {
    /**
     * 普通用户
     */
    USER("普通用户", "ROLE_USER"),
    /**
     * 管理员
     */
    ADMIN("管理员", "ROLE_ADMIN"),
    /**
     * 审核人员
     */
    REVIEWER("审核人员", "ROLE_REVIEWER"),
    /**
     * 机构用户
     */
    INSTITUTION("机构用户", "ROLE_INSTITUTION");
    /**
     * 角色名称
     */
    private final String name;
    /**
     * 角色编码
     */
    private final String code;
    RoleEnum(String name, String code) {
        this.name = name;
        this.code = code;
    }
    /**
     * 根据编码获取角色枚举
     *
     * @param code 编码
     * @return 角色枚举
     */
    public static RoleEnum getByCode(String code) {
        for (RoleEnum role : RoleEnum.values()) {
            if (role.getCode().equals(code)) {
                return role;
            }
        }
        return null;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/InstitutionApplicationVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Data;
import java.time.LocalDateTime;
/**
 * 机构申请VO
 */
@Data
@Schema(description = "机构申请信息")
public class InstitutionApplicationVO {
    @Schema(description = "ID")
    private Long id;
    @Schema(description = "申请ID")
    private String applicationId;
    @Schema(description = "机构名称")
    private String name;
    @Schema(description = "机构Logo")
    private String logo;
    @Schema(description = "机构描述")
    private String description;
    @Schema(description = "联系人")
    private String contactPerson;
    @Schema(description = "联系电话")
    private String contactPhone;
    @Schema(description = "联系邮箱")
    private String contactEmail;
    @Schema(description = "地址")
    private String address;
    @Schema(description = "状态：0-待审核，1-已通过，2-已拒绝")
    private Integer status;
    @Schema(description = "审核结果备注")
    private String reviewComment;
    @Schema(description = "审核人ID")
    private Long reviewerId;
    @Schema(description = "审核时间")
    private LocalDateTime reviewedAt;
    @Schema(description = "关联的机构ID")
    private Long institutionId;
    @Schema(description = "创建时间")
    private LocalDateTime createdAt;
    @Schema(description = "更新时间")
    private LocalDateTime updatedAt;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/InstitutionVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Data;
import java.time.LocalDateTime;
/**
 * 机构VO
 */
@Data
@Schema(description = "机构信息")
public class InstitutionVO {
    @Schema(description = "ID")
    private Long id;
    @Schema(description = "机构名称")
    private String name;
    @Schema(description = "机构Logo")
    private String logo;
    @Schema(description = "机构描述")
    private String description;
    @Schema(description = "状态：0-待审核，1-正常，2-禁用")
    private Integer status;
    @Schema(description = "联系人")
    private String contactPerson;
    @Schema(description = "联系电话")
    private String contactPhone;
    @Schema(description = "联系邮箱")
    private String contactEmail;
    @Schema(description = "地址")
    private String address;
    @Schema(description = "创建时间")
    private LocalDateTime createdAt;
    @Schema(description = "更新时间")
    private LocalDateTime updatedAt;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/MediaVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
/**
 * 媒体信息VO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class MediaVO {
    private Long id;                // 媒体ID
    private String title;           // 标题
    private String description;     // 描述
    private String type;            // 媒体类型
    private Long size;              // 文件大小
    private String originalFilename; // 原始文件名
    private String status;          // 状态
    private Long institutionId;     // 机构ID
    private Long uploaderId;        // 上传者ID
    private LocalDateTime uploadTime; // 上传时间
    private LocalDateTime lastAccessTime; // 最后访问时间
    private String accessUrl;       // 访问URL（可能为空，需要单独请求）
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/PermissionVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
/**
 * 权限视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "权限信息")
public class PermissionVO {
    @Schema(description = "权限ID")
    private Long id;
    @Schema(description = "权限名称")
    private String name;
    @Schema(description = "权限编码")
    private String code;
    @Schema(description = "权限描述")
    private String description;
    @Schema(description = "资源URL")
    private String url;
    @Schema(description = "HTTP方法")
    private String method;
    @Schema(description = "创建时间")
    private LocalDateTime createdAt;
    @Schema(description = "更新时间")
    private LocalDateTime updatedAt;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/QuotaInfoVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
/**
 * 存储配额信息VO
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class QuotaInfoVO {
    /**
     * 配额类型
     */
    private String type;
    /**
     * 配额类型名称
     */
    private String typeName;
    /**
     * 总配额（字节）
     */
    private Long totalQuota;
    /**
     * 已用配额（字节）
     */
    private Long usedQuota;
    /**
     * 最后更新时间
     */
    private LocalDateTime lastUpdatedTime;
    /**
     * 获取可用配额
     */
    public Long getAvailableQuota() {
        return totalQuota - usedQuota;
    }
    /**
     * 获取使用百分比
     */
    public Double getUsagePercentage() {
        if (totalQuota == null || totalQuota == 0) {
            return 0.0;
        }
        return (double) usedQuota / totalQuota * 100.0;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/Result.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 统一返回结果
 * @param <T> 数据类型
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Result<T> {
    /**
     * 状态码
     */
    private Integer code;
    /**
     * 消息
     */
    private String message;
    /**
     * 数据
     */
    private T data;
    /**
     * 成功
     */
    public static <T> Result<T> success() {
        return success(null);
    }
    /**
     * 成功
     * @param data 数据
     */
    public static <T> Result<T> success(T data) {
        return Result.<T>builder()
                .code(200)
                .message("操作成功")
                .data(data)
                .build();
    }
    /**
     * 失败
     * @param code 状态码
     * @param message 消息
     */
    public static <T> Result<T> fail(Integer code, String message) {
        return Result.<T>builder()
                .code(code)
                .message(message)
                .build();
    }
    /**
     * 失败
     * @param message 消息
     */
    public static <T> Result<T> fail(String message) {
        return fail(500, message);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/RoleVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
import java.util.Set;
/**
 * 角色视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "角色信息")
public class RoleVO {
    @Schema(description = "角色ID")
    private Long id;
    @Schema(description = "角色名称")
    private String name;
    @Schema(description = "角色编码")
    private String code;
    @Schema(description = "角色描述")
    private String description;
    @Schema(description = "创建时间")
    private LocalDateTime createdAt;
    @Schema(description = "更新时间")
    private LocalDateTime updatedAt;
    @Schema(description = "权限列表")
    private Set<Permission> permissions;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/StorageQuotaVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import lombok.Data;
import java.time.LocalDateTime;
/**
 * 存储配额VO
 */
@Data
public class StorageQuotaVO {
    /**
     * 配额ID
     */
    private Long id;
    /**
     * 配额类型
     */
    private String type;
    /**
     * 总配额大小(字节)
     */
    private Long totalQuota;
    /**
     * 已使用配额(字节)
     */
    private Long usedQuota;
    /**
     * 可用配额(字节)
     */
    private Long availableQuota;
    /**
     * 使用百分比
     */
    private double usagePercentage;
    /**
     * 过期时间
     */
    private LocalDateTime expiresAt;
    /**
     * 机构ID
     */
    private Long institutionId;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/model/vo/UserVO.java">
package com.zhangziqi.online_course_mine.model.vo;
import com.zhangziqi.online_course_mine.model.entity.Role;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.time.LocalDateTime;
import java.util.Set;
/**
 * 用户视图对象
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "用户信息")
public class UserVO {
    @Schema(description = "用户ID")
    private Long id;
    @Schema(description = "用户名")
    private String username;
    @Schema(description = "邮箱")
    private String email;
    @Schema(description = "手机号")
    private String phone;
    @Schema(description = "头像")
    private String avatar;
    @Schema(description = "昵称")
    private String nickname;
    @Schema(description = "状态：0-禁用，1-正常")
    private Integer status;
    @Schema(description = "机构ID")
    private Long institutionId;
    @Schema(description = "创建时间")
    private LocalDateTime createdAt;
    @Schema(description = "更新时间")
    private LocalDateTime updatedAt;
    @Schema(description = "最后登录时间")
    private LocalDateTime lastLoginAt;
    @Schema(description = "角色列表")
    private Set<Role> roles;
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/OnlineCourseMineApplication.java">
package com.zhangziqi.online_course_mine;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
@SpringBootApplication
public class OnlineCourseMineApplication {
    public static void main(String[] args) {
        SpringApplication.run(OnlineCourseMineApplication.class, args);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/InstitutionApplicationRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.InstitutionApplication;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 机构申请Repository
 */
@Repository
public interface InstitutionApplicationRepository extends JpaRepository<InstitutionApplication, Long> {
    /**
     * 根据申请ID查找申请
     *
     * @param applicationId 申请ID
     * @return 申请
     */
    Optional<InstitutionApplication> findByApplicationId(String applicationId);
    /**
     * 根据申请ID和联系邮箱查找申请
     *
     * @param applicationId 申请ID
     * @param contactEmail 联系邮箱
     * @return 申请
     */
    Optional<InstitutionApplication> findByApplicationIdAndContactEmail(String applicationId, String contactEmail);
    /**
     * 根据状态查找申请列表
     *
     * @param status 状态
     * @return 申请列表
     */
    List<InstitutionApplication> findByStatus(Integer status);
    /**
     * 根据状态分页查询申请
     *
     * @param status 状态
     * @param pageable 分页
     * @return 申请分页
     */
    Page<InstitutionApplication> findByStatus(Integer status, Pageable pageable);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/InstitutionRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 机构Repository
 */
@Repository
public interface InstitutionRepository extends JpaRepository<Institution, Long> {
    /**
     * 根据机构名称查找机构
     *
     * @param name 机构名称
     * @return 机构
     */
    Optional<Institution> findByName(String name);
    /**
     * 根据状态查找机构列表
     *
     * @param status 状态
     * @return 机构列表
     */
    List<Institution> findByStatus(Integer status);
    /**
     * 根据注册码查找机构
     *
     * @param registerCode 注册码
     * @return 机构
     */
    Optional<Institution> findByRegisterCode(String registerCode);
    /**
     * 检查注册码是否存在
     *
     * @param registerCode 注册码
     * @return 是否存在
     */
    boolean existsByRegisterCode(String registerCode);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/MediaRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Media;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 媒体资源Repository
 */
@Repository
public interface MediaRepository extends JpaRepository<Media, Long> {
    /**
     * 根据机构查找媒体资源
     *
     * @param institution 机构实体
     * @param pageable 分页参数
     * @return 媒体资源分页
     */
    Page<Media> findByInstitution(Institution institution, Pageable pageable);
    /**
     * 根据ID和机构查找媒体资源
     *
     * @param id 媒体资源ID
     * @param institution 机构实体
     * @return 媒体资源
     */
    Optional<Media> findByIdAndInstitution(Long id, Institution institution);
    /**
     * 计算机构的媒体资源总大小
     *
     * @param institution 机构实体
     * @return 总大小(字节)
     */
    @Query("SELECT SUM(m.size) FROM Media m WHERE m.institution = :institution")
    Long sumSizeByInstitution(@Param("institution") Institution institution);
    /**
     * 根据机构ID计算媒体资源总大小
     *
     * @param institutionId 机构ID
     * @return 总大小(字节)
     */
    @Query("SELECT SUM(m.size) FROM Media m WHERE m.institution.id = :institutionId")
    Long sumSizeByInstitutionId(@Param("institutionId") Long institutionId);
    /**
     * 根据上传者ID查找媒体资源
     *
     * @param uploaderId 上传者ID
     * @param pageable 分页参数
     * @return 媒体资源分页
     */
    Page<Media> findByUploaderId(Long uploaderId, Pageable pageable);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/PermissionRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.Optional;
/**
 * 权限Repository
 */
@Repository
public interface PermissionRepository extends JpaRepository<Permission, Long> {
    /**
     * 根据权限编码查找权限
     *
     * @param code 权限编码
     * @return 权限
     */
    Optional<Permission> findByCode(String code);
    /**
     * 根据URL和请求方法查找权限
     *
     * @param url URL
     * @param method 请求方法
     * @return 权限
     */
    Optional<Permission> findByUrlAndMethod(String url, String method);
    /**
     * 根据权限编码查询，排除指定ID的权限
     * 
     * @param code 权限编码
     * @param id 要排除的权限ID
     * @return 权限
     */
    Optional<Permission> findByCodeAndIdNot(String code, Long id);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/RoleRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 角色Repository
 */
@Repository
public interface RoleRepository extends JpaRepository<Role, Long> {
    /**
     * 根据角色编码查找角色
     *
     * @param code 角色编码
     * @return 角色
     */
    Optional<Role> findByCode(String code);
    /**
     * 根据角色名称查找角色
     *
     * @param name 角色名称
     * @return 角色
     */
    Optional<Role> findByName(String name);
    /**
     * 查找包含指定权限的所有角色
     * 
     * @param permission 权限
     * @return 角色列表
     */
    List<Role> findByPermissionsContaining(Permission permission);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/StorageQuotaRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.StorageQuota;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import java.util.List;
import java.util.Optional;
/**
 * 存储配额Repository
 */
@Repository
public interface StorageQuotaRepository extends JpaRepository<StorageQuota, Long> {
    /**
     * 根据机构和配额类型查找配额
     *
     * @param institution 机构
     * @param type 配额类型
     * @return 存储配额
     */
    Optional<StorageQuota> findByInstitutionAndType(Institution institution, QuotaType type);
    /**
     * 根据机构查找所有配额
     *
     * @param institution 机构
     * @return 配额列表
     */
    List<StorageQuota> findByInstitution(Institution institution);
    /**
     * 查找机构的有效配额（未过期或无过期时间）
     *
     * @param institution 机构
     * @return 有效配额列表
     */
    @Query("SELECT sq FROM StorageQuota sq WHERE sq.institution = :institution AND (sq.expiresAt IS NULL OR sq.expiresAt > CURRENT_TIMESTAMP)")
    List<StorageQuota> findActiveQuotasByInstitution(@Param("institution") Institution institution);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/repository/UserRepository.java">
package com.zhangziqi.online_course_mine.repository;
import com.zhangziqi.online_course_mine.model.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.stereotype.Repository;
import java.util.Optional;
/**
 * 用户Repository
 */
@Repository
public interface UserRepository extends JpaRepository<User, Long>, JpaSpecificationExecutor<User> {
    /**
     * 根据用户名查找用户
     *
     * @param username 用户名
     * @return 用户
     */
    Optional<User> findByUsername(String username);
    /**
     * 根据邮箱查找用户
     *
     * @param email 邮箱
     * @return 用户
     */
    Optional<User> findByEmail(String email);
    /**
     * 根据手机号查找用户
     *
     * @param phone 手机号
     * @return 用户
     */
    Optional<User> findByPhone(String phone);
    /**
     * 判断用户名是否存在
     *
     * @param username 用户名
     * @return 是否存在
     */
    boolean existsByUsername(String username);
    /**
     * 判断邮箱是否存在
     *
     * @param email 邮箱
     * @return 是否存在
     */
    boolean existsByEmail(String email);
    /**
     * 判断手机号是否存在
     *
     * @param phone 手机号
     * @return 是否存在
     */
    boolean existsByPhone(String phone);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/security/jwt/JwtAuthenticationFilter.java">
package com.zhangziqi.online_course_mine.security.jwt;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;
import java.io.IOException;
/**
 * JWT认证过滤器
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class JwtAuthenticationFilter extends OncePerRequestFilter {
    private final JwtTokenProvider tokenProvider;
    private final TokenBlacklistService tokenBlacklistService;
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        try {
            String jwt = resolveToken(request);
            if (StringUtils.hasText(jwt) && validateToken(jwt)) {
                Authentication authentication = tokenProvider.getAuthentication(jwt);
                SecurityContextHolder.getContext().setAuthentication(authentication);
                log.debug("已设置认证 '{}' 到安全上下文", authentication.getName());
            }
        } catch (Exception e) {
            log.error("无法设置用户认证到安全上下文", e);
        }
        filterChain.doFilter(request, response);
    }
    /**
     * 从请求头中获取令牌
     */
    private String resolveToken(HttpServletRequest request) {
        String bearerToken = request.getHeader("Authorization");
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7);
        }
        return null;
    }
    /**
     * 验证令牌
     */
    private boolean validateToken(String token) {
        // 先检查令牌是否在黑名单中
        if (tokenBlacklistService.isBlacklisted(token)) {
            log.warn("令牌已被注销: {}", token);
            return false;
        }
        // 再验证令牌有效性
        return tokenProvider.validateToken(token);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/security/jwt/JwtTokenProvider.java">
package com.zhangziqi.online_course_mine.security.jwt;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.UnsupportedJwtException;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;
import javax.crypto.SecretKey;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.stream.Collectors;
/**
 * JWT令牌提供者
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class JwtTokenProvider {
    private final JwtConfig jwtConfig;
    /**
     * 获取密钥
     */
    private SecretKey getSigningKey() {
        return Keys.hmacShaKeyFor(jwtConfig.getSecret().getBytes());
    }
    /**
     * 创建令牌
     *
     * @param authentication 认证信息
     * @return JWT令牌
     */
    public JwtTokenDTO createToken(Authentication authentication) {
        String username = authentication.getName();
        Collection<? extends GrantedAuthority> authorities = authentication.getAuthorities();
        // 只保留角色信息，不包含具体权限
        String roles = authorities.stream()
                .filter(authority -> authority.getAuthority().startsWith("ROLE_"))
                .map(GrantedAuthority::getAuthority)
                .findFirst() // 只取第一个角色
                .orElse("ROLE_USER"); // 默认为普通用户角色
        log.debug("为用户 {} 创建令牌，角色: {}", username, roles);
        long now = System.currentTimeMillis();
        // 创建访问令牌
        String accessToken = Jwts.builder()
                .subject(username)
                .claim("auth", roles)
                .issuedAt(new Date(now))
                .expiration(new Date(now + jwtConfig.getAccessTokenExpiration()))
                .signWith(getSigningKey())
                .compact();
        // 创建刷新令牌，同样包含角色信息
        String refreshToken = Jwts.builder()
                .subject(username)
                .claim("auth", roles)
                .issuedAt(new Date(now))
                .expiration(new Date(now + jwtConfig.getRefreshTokenExpiration()))
                .signWith(getSigningKey())
                .compact();
        return JwtTokenDTO.builder()
                .accessToken(accessToken)
                .refreshToken(refreshToken)
                .expiresIn(jwtConfig.getAccessTokenExpiration())
                .build();
    }
    /**
     * 刷新令牌
     *
     * @param refreshToken 刷新令牌
     * @return JWT令牌
     */
    public JwtTokenDTO refreshToken(String refreshToken) {
        // 验证token并获取信息
        Claims claims = parseToken(refreshToken);
        String username = claims.getSubject();
        String roles = claims.get("auth", String.class);
        log.debug("刷新令牌，用户: {}, 角色: {}", username, roles);
        long now = System.currentTimeMillis();
        // 使用refresh token中的信息创建新的access token
        String accessToken = Jwts.builder()
                .subject(username)
                .claim("auth", roles)
                .issuedAt(new Date(now))
                .expiration(new Date(now + jwtConfig.getAccessTokenExpiration()))
                .signWith(getSigningKey())
                .compact();
        return JwtTokenDTO.builder()
                .accessToken(accessToken)
                .refreshToken(refreshToken)
                .expiresIn(jwtConfig.getAccessTokenExpiration())
                .build();
    }
    /**
     * 从令牌中获取用户信息
     *
     * @param token 令牌
     * @return 认证信息
     */
    public Authentication getAuthentication(String token) {
        Claims claims = parseToken(token);
        String auth = claims.get("auth", String.class);
        Collection<? extends GrantedAuthority> authorities;
        // 确保角色正确解析，即使只有一个角色
        if (auth != null && !auth.isEmpty()) {
            authorities = Arrays.stream(auth.split(","))
                    .filter(role -> !role.isEmpty())
                    .map(SimpleGrantedAuthority::new)
                    .collect(Collectors.toList());
        } else {
            authorities = java.util.Collections.emptyList();
        }
        // 添加日志
        log.debug("从token中提取角色信息: {}", authorities);
        UserDetails principal = org.springframework.security.core.userdetails.User.builder()
                .username(claims.getSubject())
                .password("")
                .authorities(authorities)
                .build();
        return new UsernamePasswordAuthenticationToken(principal, token, authorities);
    }
    /**
     * 解析令牌
     *
     * @param token 令牌
     * @return 声明
     */
    private Claims parseToken(String token) {
        return Jwts.parser()
                .verifyWith(getSigningKey())
                .build()
                .parseSignedClaims(token)
                .getPayload();
    }
    /**
     * 从令牌中获取用户名
     *
     * @param token 令牌
     * @return 用户名
     */
    public String getUsernameFromToken(String token) {
        return parseToken(token).getSubject();
    }
    /**
     * 验证令牌
     *
     * @param token 令牌
     * @return 是否有效
     */
    public boolean validateToken(String token) {
        try {
            Jwts.parser().verifyWith(getSigningKey()).build().parseSignedClaims(token);
            return true;
        } catch (io.jsonwebtoken.security.SecurityException | MalformedJwtException e) {
            log.error("无效的JWT签名: {}", e.getMessage());
        } catch (ExpiredJwtException e) {
            log.error("JWT令牌已过期: {}", e.getMessage());
        } catch (UnsupportedJwtException e) {
            log.error("不支持的JWT令牌: {}", e.getMessage());
        } catch (IllegalArgumentException e) {
            log.error("JWT令牌为空: {}", e.getMessage());
        }
        return false;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/security/jwt/TokenBlacklistService.java">
package com.zhangziqi.online_course_mine.security.jwt;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import java.util.Date;
import java.util.concurrent.TimeUnit;
/**
 * Token黑名单服务
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class TokenBlacklistService {
    private final RedisTemplate<String, String> redisTemplate;
    private final JwtConfig jwtConfig;
    private static final String TOKEN_BLACKLIST_PREFIX = "token:blacklist:";
    private static final String USER_BLACKLIST_PREFIX = "token:blacklist:user:";
    private static final long BLACKLIST_RETENTION_DAYS = 7;
    /**
     * 将令牌加入黑名单
     *
     * @param token 令牌
     * @param expirationMs 过期时间（毫秒）
     */
    public void addToBlacklist(String token, long expirationMs) {
        String key = TOKEN_BLACKLIST_PREFIX + token;
        redisTemplate.opsForValue().set(key, "1", expirationMs, TimeUnit.MILLISECONDS);
        log.debug("令牌已加入黑名单: {}", token);
    }
    /**
     * 使用户的所有令牌失效
     * 通常在用户角色变更、密码修改等安全敏感操作时调用
     *
     * @param username 用户名
     */
    public void invalidateUserTokens(String username) {
        String key = USER_BLACKLIST_PREFIX + username;
        String timestamp = String.valueOf(System.currentTimeMillis());
        redisTemplate.opsForValue().set(key, timestamp, BLACKLIST_RETENTION_DAYS, TimeUnit.DAYS);
        log.debug("用户 {} 的所有令牌已失效", username);
    }
    /**
     * 检查令牌是否在黑名单中
     *
     * @param token 令牌
     * @return 是否在黑名单中
     */
    public boolean isBlacklisted(String token) {
        // 首先检查token是否直接在黑名单中
        String tokenKey = TOKEN_BLACKLIST_PREFIX + token;
        Boolean isDirectlyBlacklisted = redisTemplate.hasKey(tokenKey);
        if (Boolean.TRUE.equals(isDirectlyBlacklisted)) {
            log.debug("令牌在黑名单中: {}", token);
            return true;
        }
        try {
            // 解析token获取信息
            Claims claims = Jwts.parser()
                    .verifyWith(Keys.hmacShaKeyFor(jwtConfig.getSecret().getBytes()))
                    .build()
                    .parseSignedClaims(token)
                    .getPayload();
            String username = claims.getSubject();
            Date issuedAt = claims.getIssuedAt();
            // 检查用户级别的黑名单
            String userBlacklistKey = USER_BLACKLIST_PREFIX + username;
            String blacklistedTime = redisTemplate.opsForValue().get(userBlacklistKey);
            if (blacklistedTime != null) {
                long blacklistedTimestamp = Long.parseLong(blacklistedTime);
                boolean isBlacklisted = issuedAt.getTime() < blacklistedTimestamp;
                if (isBlacklisted) {
                    log.debug("用户 {} 的令牌已在黑名单中，发布时间: {}, 失效时间: {}", 
                            username, issuedAt, new Date(blacklistedTimestamp));
                }
                return isBlacklisted;
            }
        } catch (Exception e) {
            log.error("检查令牌黑名单状态时出错", e);
            return true; // 如果解析出错，出于安全考虑，将token视为无效
        }
        return false;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/security/SecurityUtil.java">
package com.zhangziqi.online_course_mine.security;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import java.util.Set;
import java.util.stream.Collectors;
/**
 * 安全工具类
 * 用于从安全上下文中获取当前用户信息
 */
@Slf4j
public class SecurityUtil {
    /**
     * 获取当前认证用户
     *
     * @return 用户主体对象
     */
    public static UserPrincipal getCurrentUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !authentication.isAuthenticated() || 
                authentication.getPrincipal().equals("anonymousUser")) {
            throw new BusinessException(401, "用户未认证");
        }
        if (!(authentication.getPrincipal() instanceof UserPrincipal)) {
            throw new BusinessException(401, "认证主体类型错误");
        }
        return (UserPrincipal) authentication.getPrincipal();
    }
    /**
     * 获取当前用户ID
     *
     * @return 用户ID
     */
    public static Long getCurrentUserId() {
        return getCurrentUser().getId();
    }
    /**
     * 获取当前用户的用户名
     *
     * @return 用户名
     */
    public static String getCurrentUsername() {
        return getCurrentUser().getUsername();
    }
    /**
     * 获取当前用户的机构ID
     *
     * @return 机构ID
     */
    public static Long getCurrentInstitutionId() {
        return getCurrentUser().getInstitutionId();
    }
    /**
     * 获取当前用户的权限列表
     *
     * @return 权限集合
     */
    public static Set<String> getCurrentUserAuthorities() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !authentication.isAuthenticated()) {
            return Set.of();
        }
        return authentication.getAuthorities().stream()
                .map(GrantedAuthority::getAuthority)
                .collect(Collectors.toSet());
    }
    /**
     * 检查当前用户是否有指定角色
     *
     * @param role 角色名称
     * @return 是否有该角色
     */
    public static boolean hasRole(String role) {
        String roleWithPrefix = role.startsWith("ROLE_") ? role : "ROLE_" + role;
        return getCurrentUserAuthorities().contains(roleWithPrefix);
    }
    /**
     * 检查当前用户是否有指定权限
     *
     * @param permission 权限编码
     * @return 是否有该权限
     */
    public static boolean hasPermission(String permission) {
        return getCurrentUserAuthorities().contains(permission);
    }
    /**
     * 检查当前用户是否是超级管理员
     *
     * @return 是否是超级管理员
     */
    public static boolean isAdmin() {
        return hasRole("ADMIN");
    }
    /**
     * 检查当前用户是否是机构管理员
     *
     * @return 是否是机构管理员
     */
    public static boolean isInstitutionAdmin() {
        return hasRole("INSTITUTION_ADMIN");
    }
    /**
     * 检查当前用户是否是机构教师
     *
     * @return 是否是机构教师
     */
    public static boolean isInstitutionTeacher() {
        return hasRole("INSTITUTION_TEACHER");
    }
    /**
     * 检查当前用户是否属于指定机构
     *
     * @param institutionId 机构ID
     * @return 是否属于该机构
     */
    public static boolean belongsToInstitution(Long institutionId) {
        Long currentInstitutionId = getCurrentInstitutionId();
        return currentInstitutionId != null && currentInstitutionId.equals(institutionId);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/security/UserDetailsServiceImpl.java">
package com.zhangziqi.online_course_mine.security;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
/**
 * 用户详情服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class UserDetailsServiceImpl implements UserDetailsService {
    private final UserRepository userRepository;
    /**
     * 根据用户名加载用户
     *
     * @param username 用户名
     * @return 用户详情
     * @throws UsernameNotFoundException 用户名不存在
     */
    @Override
    @Transactional(readOnly = true)
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        log.debug("根据用户名查询用户: {}", username);
        // 查询用户
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("用户不存在: " + username));
        // 状态检查
        if (user.getStatus() != 1) {
            log.warn("用户已被禁用: {}", username);
            throw new UsernameNotFoundException("用户已被禁用");
        }
        // 获取用户的角色和权限
        List<SimpleGrantedAuthority> authorities = new ArrayList<>();
        // 只处理第一个角色（每个用户只使用一个主要角色）
        if (!user.getRoles().isEmpty()) {
            Role role = user.getRoles().iterator().next();
            String roleCode = role.getCode();
            // 确保角色以ROLE_开头
            if (!roleCode.startsWith("ROLE_")) {
                roleCode = "ROLE_" + roleCode;
            }
            // 添加角色
            authorities.add(new SimpleGrantedAuthority(roleCode));
            // 添加该角色拥有的所有权限
            role.getPermissions().forEach(permission -> 
                authorities.add(new SimpleGrantedAuthority(permission.getCode()))
            );
            log.debug("用户 '{}' 使用角色: {}", username, roleCode);
        }
        log.debug("用户 '{}' 拥有的权限: {}", username, authorities);
        // 构建UserDetails对象
        return org.springframework.security.core.userdetails.User.builder()
                .username(user.getUsername())
                .password(user.getPassword())
                .accountLocked(false)
                .credentialsExpired(false)
                .disabled(false)
                .accountExpired(false)
                .authorities(authorities)
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/security/UserPrincipal.java">
package com.zhangziqi.online_course_mine.security;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.zhangziqi.online_course_mine.model.entity.User;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
/**
 * 认证用户主体类
 * 实现Spring Security的UserDetails接口
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class UserPrincipal implements UserDetails {
    private Long id;
    private String username;
    @JsonIgnore
    private String password;
    private String email;
    private String phone;
    private Long institutionId;
    private String institutionName;
    private Integer status;
    private Collection<? extends GrantedAuthority> authorities;
    /**
     * 从用户实体创建UserPrincipal
     * 
     * @param user 用户实体
     * @return UserPrincipal
     */
    public static UserPrincipal create(User user) {
        List<GrantedAuthority> authorities = Stream.concat(
                // 添加角色，使用ROLE_前缀
                user.getRoles().stream()
                        .map(role -> new SimpleGrantedAuthority("ROLE_" + role.getCode())),
                // 添加权限
                user.getRoles().stream()
                        .flatMap(role -> role.getPermissions().stream())
                        .map(permission -> new SimpleGrantedAuthority(permission.getCode()))
        ).collect(Collectors.toList());
        return UserPrincipal.builder()
                .id(user.getId())
                .username(user.getUsername())
                .password(user.getPassword())
                .email(user.getEmail())
                .phone(user.getPhone())
                .institutionId(user.getInstitution() != null ? user.getInstitution().getId() : null)
                .institutionName(user.getInstitution() != null ? user.getInstitution().getName() : null)
                .status(user.getStatus())
                .authorities(authorities)
                .build();
    }
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return authorities;
    }
    @Override
    public String getPassword() {
        return password;
    }
    @Override
    public String getUsername() {
        return username;
    }
    @Override
    public boolean isAccountNonExpired() {
        return true;
    }
    @Override
    public boolean isAccountNonLocked() {
        return true;
    }
    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }
    @Override
    public boolean isEnabled() {
        return status != null && status == 1;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/AuthService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.LoginDTO;
import com.zhangziqi.online_course_mine.model.dto.RefreshTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
/**
 * 认证服务接口
 */
public interface AuthService {
    /**
     * 用户注册
     *
     * @param registerDTO 注册请求
     */
    void register(RegisterDTO registerDTO);
    /**
     * 用户登录
     *
     * @param loginDTO 登录请求
     * @return JWT令牌
     */
    JwtTokenDTO login(LoginDTO loginDTO);
    /**
     * 刷新令牌
     *
     * @param refreshTokenDTO 刷新令牌请求
     * @return 新的JWT令牌
     */
    JwtTokenDTO refreshToken(RefreshTokenDTO refreshTokenDTO);
    /**
     * 注销
     *
     * @param token 访问令牌
     */
    void logout(String token);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/CaptchaService.java">
package com.zhangziqi.online_course_mine.service;
import java.awt.image.BufferedImage;
/**
 * 验证码服务接口
 */
public interface CaptchaService {
    /**
     * 生成验证码
     *
     * @param captchaKey 验证码标识
     * @return 验证码图片
     */
    BufferedImage generateCaptcha(String captchaKey);
    /**
     * 验证验证码
     *
     * @param captchaKey   验证码标识
     * @param captchaCode 验证码
     * @return 是否验证成功
     */
    boolean validateCaptcha(String captchaKey, String captchaCode);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/EmailService.java">
package com.zhangziqi.online_course_mine.service;
/**
 * 邮件服务接口
 */
public interface EmailService {
    /**
     * 发送验证码邮件
     *
     * @param to 收件人邮箱
     * @param code 验证码
     */
    void sendVerificationCode(String to, String code);
    /**
     * 发送邮箱更新验证码邮件
     *
     * @param to 新邮箱地址
     * @param code 验证码
     */
    void sendEmailUpdateCode(String to, String code);
    /**
     * 生成验证码
     *
     * @return 6位数字验证码
     */
    String generateVerificationCode();
    /**
     * 保存验证码到Redis
     *
     * @param email 邮箱
     * @param code 验证码
     */
    void saveVerificationCode(String email, String code);
    /**
     * 验证邮箱验证码
     *
     * @param email 邮箱
     * @param code 验证码
     * @return 是否验证通过
     */
    boolean validateVerificationCode(String email, String code);
    /**
     * 发送机构申请确认邮件
     *
     * @param to 收件人邮箱
     * @param applicationId 申请ID
     * @param institutionName 机构名称
     */
    void sendApplicationConfirmationEmail(String to, String applicationId, String institutionName);
    /**
     * 发送机构申请通过邮件
     *
     * @param to 收件人邮箱
     * @param institutionName 机构名称
     * @param registerCode 注册码
     */
    void sendApplicationApprovedEmail(String to, String institutionName, String registerCode);
    /**
     * 发送机构申请拒绝邮件
     *
     * @param to 收件人邮箱
     * @param institutionName 机构名称
     * @param reason 拒绝原因
     */
    void sendApplicationRejectedEmail(String to, String institutionName, String reason);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/AuthServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.LoginDTO;
import com.zhangziqi.online_course_mine.model.dto.RefreshTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import com.zhangziqi.online_course_mine.security.jwt.JwtTokenProvider;
import com.zhangziqi.online_course_mine.security.jwt.TokenBlacklistService;
import com.zhangziqi.online_course_mine.service.AuthService;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import com.zhangziqi.online_course_mine.service.EmailService;
import com.zhangziqi.online_course_mine.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
/**
 * 认证服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class AuthServiceImpl implements AuthService {
    private final AuthenticationManager authenticationManager;
    private final JwtTokenProvider tokenProvider;
    private final UserService userService;
    private final CaptchaService captchaService;
    private final EmailService emailService;
    private final TokenBlacklistService tokenBlacklistService;
    private final JwtConfig jwtConfig;
    /**
     * 用户注册
     *
     * @param registerDTO 注册请求
     */
    @Override
    @Transactional
    public void register(RegisterDTO registerDTO) {
        // 验证邮箱验证码
        if (!emailService.validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode())) {
            throw new BusinessException("邮箱验证码错误或已过期");
        }
        // 注册用户
        userService.register(registerDTO);
        log.info("用户注册成功: {}", registerDTO.getUsername());
    }
    /**
     * 用户登录
     *
     * @param loginDTO 登录请求
     * @return JWT令牌
     */
    @Override
    @Transactional
    public JwtTokenDTO login(LoginDTO loginDTO) {
        // 验证验证码
        if (!captchaService.validateCaptcha(loginDTO.getCaptchaKey(), loginDTO.getCaptchaCode())) {
            throw new BusinessException("验证码错误");
        }
        // 认证用户
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(loginDTO.getUsername(), loginDTO.getPassword())
        );
        SecurityContextHolder.getContext().setAuthentication(authentication);
        // 更新最后登录时间
        userService.updateLastLoginTime(loginDTO.getUsername());
        // 生成JWT令牌
        JwtTokenDTO jwtTokenDTO = tokenProvider.createToken(authentication);
        log.info("用户登录成功: {}", loginDTO.getUsername());
        return jwtTokenDTO;
    }
    /**
     * 刷新令牌
     *
     * @param refreshTokenDTO 刷新令牌请求
     * @return 新的JWT令牌
     */
    @Override
    @Transactional
    public JwtTokenDTO refreshToken(RefreshTokenDTO refreshTokenDTO) {
        String refreshToken = refreshTokenDTO.getRefreshToken();
        // 验证刷新令牌
        if (!tokenProvider.validateToken(refreshToken)) {
            throw new BusinessException("刷新令牌无效或已过期");
        }
        // 检查刷新令牌是否在黑名单中
        if (tokenBlacklistService.isBlacklisted(refreshToken)) {
            throw new BusinessException("刷新令牌已被注销");
        }
        // 从令牌中获取用户名
        String username = tokenProvider.getUsernameFromToken(refreshToken);
        log.debug("刷新令牌，用户: {}", username);
        // 刷新令牌
        JwtTokenDTO jwtTokenDTO = tokenProvider.refreshToken(refreshToken);
        log.info("刷新令牌成功: {}", username);
        return jwtTokenDTO;
    }
    /**
     * 注销
     *
     * @param token 访问令牌
     */
    @Override
    public void logout(String token) {
        if (token == null || token.isEmpty()) {
            return;
        }
        // 从令牌中提取用户名
        String username = tokenProvider.getUsernameFromToken(token);
        // 将令牌加入黑名单
        tokenBlacklistService.addToBlacklist(token, jwtConfig.getAccessTokenExpiration());
        log.info("用户注销成功: {}", username);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/CaptchaServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.google.code.kaptcha.impl.DefaultKaptcha;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import java.awt.image.BufferedImage;
import java.util.concurrent.TimeUnit;
/**
 * 验证码服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class CaptchaServiceImpl implements CaptchaService {
    private final DefaultKaptcha captchaProducer;
    private final RedisTemplate<String, Object> redisTemplate;
    private static String CAPTCHA_PREFIX = "captcha:";
    private static long CAPTCHA_EXPIRATION = 5 * 60; // 5分钟
    /**
     * 生成验证码
     *
     * @param captchaKey 验证码标识
     * @return 验证码图片
     */
    @Override
    public BufferedImage generateCaptcha(String captchaKey) {
        // 生成验证码文本
        String captchaText = captchaProducer.createText();
        log.debug("生成验证码: {} -> {}", captchaKey, captchaText);
        // 保存验证码到Redis
        String redisKey = CAPTCHA_PREFIX + captchaKey;
        redisTemplate.opsForValue().set(redisKey, captchaText, CAPTCHA_EXPIRATION, TimeUnit.SECONDS);
        // 生成验证码图片
        return captchaProducer.createImage(captchaText);
    }
    /**
     * 验证验证码
     *
     * @param captchaKey   验证码标识
     * @param captchaCode 验证码
     * @return 是否验证成功
     */
    @Override
    public boolean validateCaptcha(String captchaKey, String captchaCode) {
        if (!StringUtils.hasText(captchaKey) || !StringUtils.hasText(captchaCode)) {
            return false;
        }
        // 从Redis获取验证码
        String redisKey = CAPTCHA_PREFIX + captchaKey;
        Object value = redisTemplate.opsForValue().get(redisKey);
        if (value == null) {
            log.debug("验证码不存在或已过期: {}", captchaKey);
            return false;
        }
        // 验证后删除验证码
        redisTemplate.delete(redisKey);
        // 忽略大小写比较
        boolean result = captchaCode.equalsIgnoreCase(value.toString());
        log.debug("验证码校验: {} -> {} vs {}, 结果: {}", captchaKey, captchaCode, value, result);
        return result;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/EmailServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.service.EmailService;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import java.util.Random;
import java.util.concurrent.TimeUnit;
/**
 * 邮件服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class EmailServiceImpl implements EmailService {
    private final JavaMailSender mailSender;
    private final StringRedisTemplate redisTemplate;
    private final TemplateEngine templateEngine;
    @Value("${spring.mail.username}")
    private String emailFrom;
    /**
     * Redis中验证码的key前缀
     */
    @Setter
    private String verificationCodePrefix = "email:verification:";
    /**
     * 验证码有效期（分钟）
     */
    @Setter
    private long verificationCodeExpiration = 5;
    @Override
    public void sendVerificationCode(String to, String code) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true);
            helper.setFrom(emailFrom);
            helper.setTo(to);
            helper.setSubject("在线课程平台 - 邮箱验证码");
            // 使用Thymeleaf模板引擎渲染邮件内容
            Context context = new Context();
            context.setVariable("code", code);
            context.setVariable("expirationMinutes", verificationCodeExpiration);
            String content = templateEngine.process("email/verification-code", context);
            helper.setText(content, true);
            mailSender.send(message);
            log.info("验证码邮件发送成功: {}", to);
        } catch (MessagingException e) {
            log.error("验证码邮件发送失败: {}", to, e);
            throw new RuntimeException("验证码邮件发送失败", e);
        }
    }
    @Override
    public void sendEmailUpdateCode(String to, String code) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true);
            helper.setFrom(emailFrom);
            helper.setTo(to);
            helper.setSubject("在线课程平台 - 邮箱更新验证码");
            // 使用Thymeleaf模板引擎渲染邮件内容
            Context context = new Context();
            context.setVariable("code", code);
            context.setVariable("expirationMinutes", verificationCodeExpiration);
            String content = templateEngine.process("email/email-update-code", context);
            helper.setText(content, true);
            mailSender.send(message);
            log.info("邮箱更新验证码邮件发送成功: {}", to);
        } catch (MessagingException e) {
            log.error("邮箱更新验证码邮件发送失败: {}", to, e);
            throw new RuntimeException("邮箱更新验证码邮件发送失败", e);
        }
    }
    @Override
    public String generateVerificationCode() {
        Random random = new Random();
        // 生成6位数字验证码
        return String.format("%06d", random.nextInt(1000000));
    }
    @Override
    public void saveVerificationCode(String email, String code) {
        String key = verificationCodePrefix + email;
        redisTemplate.opsForValue().set(key, code, verificationCodeExpiration, TimeUnit.MINUTES);
        log.info("验证码已保存到Redis: {}", email);
    }
    @Override
    public boolean validateVerificationCode(String email, String code) {
        String key = verificationCodePrefix + email;
        String savedCode = redisTemplate.opsForValue().get(key);
        if (savedCode != null && savedCode.equals(code)) {
            // 验证成功后删除验证码
            redisTemplate.delete(key);
            return true;
        }
        return false;
    }
    @Override
    public void sendApplicationConfirmationEmail(String to, String applicationId, String institutionName) {
        Context context = new Context();
        context.setVariable("applicationId", applicationId);
        context.setVariable("institutionName", institutionName);
        String content = templateEngine.process("email/application-confirmation", context);
        sendHtmlMail(to, "机构入驻申请确认", content);
    }
    @Override
    public void sendApplicationApprovedEmail(String to, String institutionName, String registerCode) {
        Context context = new Context();
        context.setVariable("registerCode", registerCode);
        context.setVariable("institutionName", institutionName);
        String content = templateEngine.process("email/application-approved", context);
        sendHtmlMail(to, "机构入驻申请已通过", content);
    }
    @Override
    public void sendApplicationRejectedEmail(String to, String institutionName, String reason) {
        Context context = new Context();
        context.setVariable("institutionName", institutionName);
        context.setVariable("reason", reason);
        String content = templateEngine.process("email/application-rejected", context);
        sendHtmlMail(to, "机构入驻申请未通过", content);
    }
    /**
     * 发送HTML格式邮件
     *
     * @param to 收件人
     * @param subject 主题
     * @param content HTML内容
     */
    private void sendHtmlMail(String to, String subject, String content) {
        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true);
            helper.setFrom(emailFrom);
            helper.setTo(to);
            helper.setSubject(subject);
            helper.setText(content, true);
            mailSender.send(message);
            log.info("HTML邮件发送成功: {}, 主题: {}", to, subject);
        } catch (MessagingException e) {
            log.error("HTML邮件发送失败: {}, 主题: {}", to, subject, e);
            throw new RuntimeException("HTML邮件发送失败", e);
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/InstitutionAuthServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.InstitutionRegisterDTO;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.RoleEnum;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.EmailService;
import com.zhangziqi.online_course_mine.service.InstitutionAuthService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.HashSet;
/**
 * 机构用户注册服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class InstitutionAuthServiceImpl implements InstitutionAuthService {
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final InstitutionRepository institutionRepository;
    private final PasswordEncoder passwordEncoder;
    private final EmailService emailService;
    @Override
    @Transactional
    public void registerWithInstitutionCode(InstitutionRegisterDTO registerDTO) {
        log.info("开始处理机构用户注册流程: username={}, email={}, institutionCode={}", 
                registerDTO.getUsername(), registerDTO.getEmail(), registerDTO.getInstitutionCode());
        // 验证机构注册码
        log.debug("正在验证机构注册码: {}", registerDTO.getInstitutionCode());
        Institution institution = institutionRepository.findByRegisterCode(registerDTO.getInstitutionCode())
                .orElseThrow(() -> {
                    log.warn("机构注册码无效: {}", registerDTO.getInstitutionCode());
                    return new BusinessException("机构注册码无效");
                });
        log.info("机构注册码验证成功: code={}, institutionId={}, institutionName={}", 
                registerDTO.getInstitutionCode(), institution.getId(), institution.getName());
        if (institution.getStatus() != 1) {
            log.warn("机构状态异常，无法注册: institutionId={}, status={}", institution.getId(), institution.getStatus());
            throw new BusinessException("机构状态异常，无法注册");
        }
        // 检查用户名是否存在
        log.debug("检查用户名是否已存在: {}", registerDTO.getUsername());
        boolean usernameExists = userRepository.existsByUsername(registerDTO.getUsername());
        if (usernameExists) {
            log.warn("用户名已存在: {}", registerDTO.getUsername());
            throw new BusinessException("用户名已存在");
        }
        // 检查邮箱是否存在
        log.debug("检查邮箱是否已被注册: {}", registerDTO.getEmail());
        boolean emailExists = userRepository.existsByEmail(registerDTO.getEmail());
        if (emailExists) {
            log.warn("邮箱已被注册: {}", registerDTO.getEmail());
            throw new BusinessException("邮箱已被注册");
        }
        log.info("用户验证通过，开始创建用户: username={}, email={}, institutionId={}", 
                registerDTO.getUsername(), registerDTO.getEmail(), institution.getId());
        // 创建用户
        User user = User.builder()
                .username(registerDTO.getUsername())
                .password(passwordEncoder.encode(registerDTO.getPassword()))
                .email(registerDTO.getEmail())
                .phone(registerDTO.getPhone())
                .institutionId(institution.getId()) // 设置机构ID
                .status(1) // 正常状态
                .roles(new HashSet<>())
                .build();
        // 获取角色
        log.debug("正在获取机构角色: {}", RoleEnum.INSTITUTION.getCode());
        Role institutionRole = roleRepository.findByCode(RoleEnum.INSTITUTION.getCode())
                .orElseThrow(() -> {
                    log.error("机构角色不存在: {}", RoleEnum.INSTITUTION.getCode());
                    return new BusinessException("机构角色不存在");
                });
        // 设置角色 - 只分配机构角色，不再额外分配USER角色
        user.getRoles().add(institutionRole);
        log.debug("正在保存用户信息...");
        try {
            User savedUser = userRepository.save(user);
            log.info("机构用户注册成功: userId={}, username={}, institutionId={}", 
                    savedUser.getId(), savedUser.getUsername(), savedUser.getInstitutionId());
        } catch (Exception e) {
            log.error("保存用户信息失败: {}", e.getMessage(), e);
            throw new BusinessException("注册失败: " + e.getMessage());
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/InstitutionServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.converter.InstitutionApplicationConverter;
import com.zhangziqi.online_course_mine.model.converter.InstitutionConverter;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplyDTO;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplicationQueryDTO;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.InstitutionApplication;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import com.zhangziqi.online_course_mine.model.vo.InstitutionApplicationVO;
import com.zhangziqi.online_course_mine.model.vo.InstitutionVO;
import com.zhangziqi.online_course_mine.repository.InstitutionApplicationRepository;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.EmailService;
import com.zhangziqi.online_course_mine.service.InstitutionService;
import com.zhangziqi.online_course_mine.service.StorageQuotaService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.RandomStringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.time.LocalDateTime;
/**
 * 机构服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class InstitutionServiceImpl implements InstitutionService {
    private final InstitutionRepository institutionRepository;
    private final InstitutionApplicationRepository applicationRepository;
    private final UserRepository userRepository;
    private final EmailService emailService;
    private final StorageQuotaService storageQuotaService;
    @Override
    @Transactional
    public String applyInstitution(InstitutionApplyDTO applyDTO) {
        log.info("申请创建机构: {}", applyDTO.getName());
        // 生成申请ID
        String applicationId = generateApplicationId();
        // 创建申请记录
        InstitutionApplication application = InstitutionApplication.builder()
                .applicationId(applicationId)
                .name(applyDTO.getName())
                .logo(applyDTO.getLogo())
                .description(applyDTO.getDescription())
                .contactPerson(applyDTO.getContactPerson())
                .contactPhone(applyDTO.getContactPhone())
                .contactEmail(applyDTO.getContactEmail())
                .address(applyDTO.getAddress())
                .status(0) // 待审核
                .build();
        applicationRepository.save(application);
        // 发送确认邮件
        emailService.sendApplicationConfirmationEmail(
                applyDTO.getContactEmail(),
                applicationId,
                applyDTO.getName()
        );
        return applicationId;
    }
    @Override
    public InstitutionApplicationVO getApplicationStatus(String applicationId, String email) {
        log.info("查询申请状态: applicationId={}, email={}", applicationId, email);
        InstitutionApplication application = applicationRepository
                .findByApplicationIdAndContactEmail(applicationId, email)
                .orElseThrow(() -> new BusinessException("申请不存在或邮箱不匹配"));
        return InstitutionApplicationConverter.toVO(application);
    }
    @Override
    public Page<InstitutionApplicationVO> getApplications(InstitutionApplicationQueryDTO queryDTO) {
        log.info("分页查询机构申请: {}", queryDTO);
        Pageable pageable = PageRequest.of(
                queryDTO.getPageNum() - 1,
                queryDTO.getPageSize(),
                Sort.by(Sort.Direction.DESC, "createdAt")
        );
        Page<InstitutionApplication> page;
        if (queryDTO.getStatus() != null) {
            page = applicationRepository.findByStatus(queryDTO.getStatus(), pageable);
        } else {
            page = applicationRepository.findAll(pageable);
        }
        return page.map(InstitutionApplicationConverter::toVO);
    }
    @Override
    public InstitutionApplicationVO getApplicationDetail(Long id) {
        log.info("查询申请详情: {}", id);
        InstitutionApplication application = applicationRepository.findById(id)
                .orElseThrow(() -> new BusinessException("申请不存在"));
        return InstitutionApplicationConverter.toVO(application);
    }
    @Override
    @Transactional
    public InstitutionVO approveApplication(Long id, String reviewerUsername) {
        log.info("审核通过申请: id={}, reviewer={}", id, reviewerUsername);
        // 查找申请
        InstitutionApplication application = applicationRepository.findById(id)
                .orElseThrow(() -> new BusinessException("申请不存在"));
        if (application.getStatus() != 0) {
            throw new BusinessException("申请状态不是待审核");
        }
        // 查找审核人
        User reviewer = userRepository.findByUsername(reviewerUsername)
                .orElseThrow(() -> new BusinessException("审核人不存在"));
        // 生成唯一注册码
        String registerCode = generateInstitutionCode();
        // 创建机构
        Institution institution = Institution.builder()
                .name(application.getName())
                .logo(application.getLogo())
                .description(application.getDescription())
                .contactPerson(application.getContactPerson())
                .contactPhone(application.getContactPhone())
                .contactEmail(application.getContactEmail())
                .address(application.getAddress())
                .registerCode(registerCode)
                .status(1) // 正常状态
                .build();
        institution = institutionRepository.save(institution);
        // 初始化存储配额
        initializeStorageQuotas(institution.getId());
        // 更新申请状态
        application.setStatus(1); // 已通过
        application.setReviewerId(reviewer.getId());
        application.setReviewedAt(LocalDateTime.now());
        application.setInstitutionId(institution.getId());
        applicationRepository.save(application);
        // 发送通知邮件
        emailService.sendApplicationApprovedEmail(
                application.getContactEmail(),
                institution.getName(),
                registerCode
        );
        return InstitutionConverter.toVO(institution);
    }
    /**
     * 初始化机构的存储配额
     *
     * @param institutionId 机构ID
     */
    private void initializeStorageQuotas(Long institutionId) {
        // 设置视频配额（5GB）
        storageQuotaService.setQuota(
                institutionId,
                QuotaType.VIDEO,
                5L * 1024 * 1024 * 1024,
                null
        );
        // 设置文档配额（2GB）
        storageQuotaService.setQuota(
                institutionId,
                QuotaType.DOCUMENT,
                2L * 1024 * 1024 * 1024,
                null
        );
        // 设置总配额（10GB）
        storageQuotaService.setQuota(
                institutionId,
                QuotaType.TOTAL,
                10L * 1024 * 1024 * 1024,
                null
        );
        log.info("已为机构{}初始化存储配额", institutionId);
    }
    @Override
    @Transactional
    public void rejectApplication(Long id, String reason, String reviewerUsername) {
        log.info("审核拒绝申请: id={}, reviewer={}, reason={}", id, reviewerUsername, reason);
        // 查找申请
        InstitutionApplication application = applicationRepository.findById(id)
                .orElseThrow(() -> new BusinessException("申请不存在"));
        if (application.getStatus() != 0) {
            throw new BusinessException("申请状态不是待审核");
        }
        // 查找审核人
        User reviewer = userRepository.findByUsername(reviewerUsername)
                .orElseThrow(() -> new BusinessException("审核人不存在"));
        // 更新申请状态
        application.setStatus(2); // 已拒绝
        application.setReviewerId(reviewer.getId());
        application.setReviewedAt(LocalDateTime.now());
        application.setReviewComment(reason);
        applicationRepository.save(application);
        // 发送通知邮件
        emailService.sendApplicationRejectedEmail(
                application.getContactEmail(),
                application.getName(),
                reason
        );
    }
    @Override
    public String getInstitutionRegisterCode(String username) {
        log.info("获取机构注册码: {}", username);
        // 查找用户
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        if (user.getInstitutionId() == null) {
            throw new BusinessException("用户未关联机构");
        }
        // 查找机构
        Institution institution = institutionRepository.findById(user.getInstitutionId())
                .orElseThrow(() -> new BusinessException("机构不存在"));
        return institution.getRegisterCode();
    }
    // 生成唯一的机构注册码
    private String generateInstitutionCode() {
        String code;
        boolean exists;
        do {
            // 生成8位随机字母数字组合
            code = RandomStringUtils.randomAlphanumeric(8).toUpperCase();
            exists = institutionRepository.existsByRegisterCode(code);
        } while (exists);
        return code;
    }
    // 生成申请ID
    private String generateApplicationId() {
        return "APP" + System.currentTimeMillis() % 10000000 + 
               RandomStringUtils.randomNumeric(4);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/MediaServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.media.*;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Media;
import com.zhangziqi.online_course_mine.model.enums.MediaStatus;
import com.zhangziqi.online_course_mine.model.enums.MediaType;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import com.zhangziqi.online_course_mine.model.vo.MediaVO;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.MediaRepository;
import com.zhangziqi.online_course_mine.service.MediaService;
import com.zhangziqi.online_course_mine.service.StorageQuotaService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import software.amazon.awssdk.services.s3.model.CompleteMultipartUploadResponse;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;
/**
 * 媒体服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class MediaServiceImpl implements MediaService {
    private final MediaRepository mediaRepository;
    private final InstitutionRepository institutionRepository;
    private final StorageQuotaService storageQuotaService;
    private final S3MultipartUploadManager s3UploadManager;
    private final UploadStatusService uploadStatusService;
    // 默认分片大小：10MB
    private static final long DEFAULT_CHUNK_SIZE = 10 * 1024 * 1024;
    @Override
    @Transactional
    public UploadInitiationVO initiateUpload(MediaUploadInitDTO dto, Long institutionId, Long uploaderId) {
        // 验证机构是否存在
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        // 验证文件类型
        MediaType mediaType = determineMediaType(dto.getContentType());
        // 验证配额并更新使用的配额
        QuotaType quotaType = mediaTypeToQuotaType(mediaType);
        boolean hasQuota = storageQuotaService.hasEnoughQuota(institutionId, quotaType, dto.getFileSize());
        if (!hasQuota) {
            throw new BusinessException(400, "存储配额不足，无法上传文件");
        } else {
            // 预分配配额
            storageQuotaService.updateUsedQuota(institutionId, quotaType, dto.getFileSize());
        }
        try {
            // 生成对象键
            String objectKey = generateObjectKey(institutionId, dto.getFilename(), mediaType);
            // 创建Media记录
            Media media = new Media();
            media.setTitle(dto.getTitle());
            media.setDescription(dto.getDescription());
            media.setType(mediaType);
            media.setSize(dto.getFileSize());
            media.setOriginalFilename(dto.getFilename());
            media.setStoragePath(objectKey);
            media.setStatus(MediaStatus.UPLOADING);
            media.setInstitution(institution);
            media.setUploaderId(uploaderId);
            media.setUploadTime(LocalDateTime.now());
            media.setLastAccessTime(LocalDateTime.now());
            // 保存Media记录
            Media savedMedia = mediaRepository.save(media);
            // 确定分片大小和分片数量
            long chunkSize = dto.getChunkSize() != null ? dto.getChunkSize() : DEFAULT_CHUNK_SIZE;
            int totalParts = calculateTotalParts(dto.getFileSize(), chunkSize);
            // 初始化S3分片上传
            String uploadId = s3UploadManager.initiateMultipartUpload(objectKey, dto.getContentType());
            // 生成所有分片的预签名URL
            List<PresignedUrlInfo> presignedUrls = s3UploadManager.batchGeneratePresignedUrls(
                    uploadId, objectKey, 1, totalParts);
            // 创建并保存上传状态
            UploadStatusInfo statusInfo = UploadStatusInfo.builder()
                    .mediaId(savedMedia.getId())
                    .institutionId(institutionId)
                    .uploaderId(uploaderId)
                    .uploadId(uploadId)
                    .objectKey(objectKey)
                    .filename(dto.getFilename())
                    .contentType(dto.getContentType())
                    .fileSize(dto.getFileSize())
                    .status(MediaStatus.UPLOADING)
                    .totalParts(totalParts)
                    .completedParts(new ArrayList<>())
                    .initiatedAt(LocalDateTime.now())
                    .lastUpdatedAt(LocalDateTime.now())
                    .build();
            uploadStatusService.saveUploadStatus(statusInfo);
            // 构建返回结果
            return UploadInitiationVO.builder()
                    .mediaId(savedMedia.getId())
                    .uploadId(uploadId)
                    .totalParts(totalParts)
                    .chunkSize(chunkSize)
                    .presignedUrls(presignedUrls)
                    .build();
        } catch (Exception e) {
            // 发生异常时释放预分配的配额
            storageQuotaService.updateUsedQuota(institutionId, quotaType, -dto.getFileSize());
            log.error("初始化上传失败", e);
            throw new BusinessException(500, "初始化上传失败: " + e.getMessage());
        }
    }
    @Override
    public UploadStatusVO getUploadStatus(Long mediaId, Long institutionId) {
        // 验证Media记录
        Media media = getMediaForInstitution(mediaId, institutionId);
        try {
            // 获取上传状态
            UploadStatusInfo statusInfo = uploadStatusService.getUploadStatus(mediaId);
            // 构建返回结果
            return buildUploadStatusVO(statusInfo);
        } catch (ResourceNotFoundException e) {
            // 状态可能已过期，但Media记录仍然存在
            return UploadStatusVO.builder()
                    .mediaId(mediaId)
                    .status(media.getStatus().name())
                    .totalParts(0)
                    .completedParts(0)
                    .progressPercentage(0.0)
                    .completedPartNumbers(new ArrayList<>())
                    .build();
        }
    }
    @Override
    @Transactional
    public UploadStatusVO notifyPartCompleted(Long mediaId, PartCompletionDTO dto, Long institutionId) {
        // 验证Media记录
        getMediaForInstitution(mediaId, institutionId);
        // 更新分片信息
        UploadStatusInfo.PartInfo partInfo = new UploadStatusInfo.PartInfo(
                dto.getPartNumber(), dto.getETag());
        UploadStatusInfo updatedStatus = uploadStatusService.updatePartInfo(mediaId, partInfo);
        // 构建返回结果
        return buildUploadStatusVO(updatedStatus);
    }
    @Override
    @Transactional
    public MediaVO completeUpload(Long mediaId, Long institutionId) {
        // 验证Media记录
        Media media = getMediaForInstitution(mediaId, institutionId);
        // 获取上传状态
        UploadStatusInfo statusInfo = uploadStatusService.getUploadStatus(mediaId);
        // 检查是否已上传全部分片
        if (statusInfo.getCompletedParts().size() != statusInfo.getTotalParts()) {
            throw new BusinessException(400, "无法完成上传，还有分片未上传完成");
        }
        try {
            // 完成分片上传
            CompleteMultipartUploadResponse response = s3UploadManager.completeMultipartUpload(
                    statusInfo.getUploadId(), statusInfo.getObjectKey(), statusInfo.getCompletedParts());
            // 更新Media状态
            media.setStatus(MediaStatus.COMPLETED);
            media.setLastAccessTime(LocalDateTime.now());
            Media updatedMedia = mediaRepository.save(media);
            // 更新上传状态
            statusInfo.setStatus(MediaStatus.COMPLETED);
            uploadStatusService.saveUploadStatus(statusInfo);
            // 返回媒体信息
            return mapToMediaVO(updatedMedia, null);
        } catch (Exception e) {
            log.error("完成上传失败", e);
            // 更新Media状态为失败
            media.setStatus(MediaStatus.FAILED);
            mediaRepository.save(media);
            // 更新上传状态
            statusInfo.setStatus(MediaStatus.FAILED);
            uploadStatusService.saveUploadStatus(statusInfo);
            throw new BusinessException(500, "完成上传失败: " + e.getMessage());
        }
    }
    @Override
    @Transactional
    public void cancelUpload(Long mediaId, Long institutionId) {
        // 验证Media记录
        Media media = getMediaForInstitution(mediaId, institutionId);
        try {
            // 获取上传状态
            UploadStatusInfo statusInfo = uploadStatusService.getUploadStatusOrNull(mediaId);
            if (statusInfo != null) {
                // 取消S3分片上传
                s3UploadManager.abortMultipartUpload(
                        statusInfo.getUploadId(), statusInfo.getObjectKey());
                // 删除上传状态
                uploadStatusService.deleteUploadStatus(mediaId);
            }
            // 计算要释放的配额
            MediaType mediaType = media.getType();
            QuotaType quotaType = mediaTypeToQuotaType(mediaType);
            Long fileSize = media.getSize();
            // 释放预分配的配额
            storageQuotaService.updateUsedQuota(institutionId, quotaType, -fileSize);
            // 删除Media记录
            mediaRepository.delete(media);
        } catch (Exception e) {
            log.error("取消上传失败", e);
            throw new BusinessException(500, "取消上传失败: " + e.getMessage());
        }
    }
    @Override
    @Transactional(readOnly = true)
    public String getMediaAccessUrl(Long mediaId, Long institutionId, Long expirationMinutes) {
        // 验证Media记录
        Media media = getMediaForInstitution(mediaId, institutionId);
        // 检查媒体状态
        if (media.getStatus() != MediaStatus.COMPLETED) {
            throw new BusinessException(400, "媒体文件未上传完成，无法获取访问URL");
        }
        // 生成预签名URL
        String url = s3UploadManager.generatePresignedGetUrl(
                media.getStoragePath(), expirationMinutes);
        // 更新最后访问时间
        media.setLastAccessTime(LocalDateTime.now());
        mediaRepository.save(media);
        return url;
    }
    @Override
    @Transactional(readOnly = true)
    public MediaVO getMediaInfo(Long mediaId, Long institutionId) {
        // 验证Media记录
        Media media = getMediaForInstitution(mediaId, institutionId);
        // 转换为VO
        return mapToMediaVO(media, null);
    }
    @Override
    @Transactional(readOnly = true)
    public Page<MediaVO> getMediaList(Long institutionId, Pageable pageable) {
        // 验证机构是否存在
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        // 查询机构的媒体列表
        Page<Media> mediaPage = mediaRepository.findByInstitution(institution, pageable);
        // 转换为VO
        return mediaPage.map(media -> mapToMediaVO(media, null));
    }
    @Override
    @Transactional
    public UploadInitiationVO resumeUpload(Long mediaId, Long institutionId) {
        // 验证Media记录
        Media media = getMediaForInstitution(mediaId, institutionId);
        // 检查媒体状态
        if (media.getStatus() != MediaStatus.UPLOADING) {
            throw new BusinessException(400, "媒体文件不处于上传中状态，无法继续上传");
        }
        try {
            // 获取上传状态
            UploadStatusInfo statusInfo = uploadStatusService.getUploadStatus(mediaId);
            // 获取已完成的分片编号
            List<Integer> completedPartNumbers = statusInfo.getCompletedParts().stream()
                    .map(UploadStatusInfo.PartInfo::getPartNumber)
                    .collect(Collectors.toList());
            // 计算未完成的分片编号
            List<Integer> pendingPartNumbers = new ArrayList<>();
            for (int i = 1; i <= statusInfo.getTotalParts(); i++) {
                if (!completedPartNumbers.contains(i)) {
                    pendingPartNumbers.add(i);
                }
            }
            // 生成未完成分片的预签名URL
            List<PresignedUrlInfo> presignedUrls = new ArrayList<>();
            for (Integer partNumber : pendingPartNumbers) {
                String url = s3UploadManager.generatePresignedUrlForPart(
                        statusInfo.getUploadId(), statusInfo.getObjectKey(), partNumber);
                presignedUrls.add(new PresignedUrlInfo(partNumber, url));
            }
            // 计算分片大小
            long chunkSize = statusInfo.getFileSize() / statusInfo.getTotalParts();
            if (statusInfo.getFileSize() % statusInfo.getTotalParts() != 0) {
                chunkSize++;
            }
            // 构建返回结果
            return UploadInitiationVO.builder()
                    .mediaId(mediaId)
                    .uploadId(statusInfo.getUploadId())
                    .totalParts(statusInfo.getTotalParts())
                    .chunkSize(chunkSize)
                    .presignedUrls(presignedUrls)
                    .build();
        } catch (Exception e) {
            log.error("继续上传失败", e);
            throw new BusinessException(500, "继续上传失败: " + e.getMessage());
        }
    }
    /**
     * 获取机构的Media记录
     * 
     * @param mediaId 媒体ID
     * @param institutionId 机构ID
     * @return Media记录
     */
    private Media getMediaForInstitution(Long mediaId, Long institutionId) {
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        return mediaRepository.findByIdAndInstitution(mediaId, institution)
                .orElseThrow(() -> new ResourceNotFoundException("媒体文件不存在或不属于该机构，ID: " + mediaId));
    }
    /**
     * 根据内容类型确定媒体类型
     * 
     * @param contentType 内容类型
     * @return 媒体类型
     */
    private MediaType determineMediaType(String contentType) {
        if (contentType.startsWith("video/")) {
            return MediaType.VIDEO;
        } else if (contentType.startsWith("audio/")) {
            return MediaType.AUDIO;
        } else {
            return MediaType.DOCUMENT;
        }
    }
    /**
     * 媒体类型转换为配额类型
     * 
     * @param mediaType 媒体类型
     * @return 配额类型
     */
    private QuotaType mediaTypeToQuotaType(MediaType mediaType) {
        if (mediaType == MediaType.VIDEO) {
            return QuotaType.VIDEO;
        } else {
            return QuotaType.DOCUMENT;
        }
    }
    /**
     * 生成对象键
     * 
     * @param institutionId 机构ID
     * @param originalFilename 原始文件名
     * @param mediaType 媒体类型
     * @return 对象键
     */
    private String generateObjectKey(Long institutionId, String originalFilename, MediaType mediaType) {
        String type = mediaType.name().toLowerCase();
        String uuid = UUID.randomUUID().toString();
        return String.format("%s/%s/%s/%s", type, institutionId, uuid, originalFilename);
    }
    /**
     * 计算总分片数
     * 
     * @param fileSize 文件大小
     * @param chunkSize 分片大小
     * @return 总分片数
     */
    private int calculateTotalParts(Long fileSize, Long chunkSize) {
        int totalParts = (int) (fileSize / chunkSize);
        if (fileSize % chunkSize != 0) {
            totalParts++;
        }
        return totalParts;
    }
    /**
     * 构建上传状态VO
     * 
     * @param statusInfo 上传状态信息
     * @return 上传状态VO
     */
    private UploadStatusVO buildUploadStatusVO(UploadStatusInfo statusInfo) {
        // 计算进度百分比
        double progressPercentage = 0.0;
        if (statusInfo.getTotalParts() > 0) {
            progressPercentage = (double) statusInfo.getCompletedParts().size() / statusInfo.getTotalParts() * 100;
        }
        // 获取已完成的分片编号
        List<Integer> completedPartNumbers = statusInfo.getCompletedParts().stream()
                .map(UploadStatusInfo.PartInfo::getPartNumber)
                .collect(Collectors.toList());
        // 构建返回结果
        return UploadStatusVO.builder()
                .mediaId(statusInfo.getMediaId())
                .status(statusInfo.getStatus().name())
                .totalParts(statusInfo.getTotalParts())
                .completedParts(statusInfo.getCompletedParts().size())
                .progressPercentage(progressPercentage)
                .completedPartNumbers(completedPartNumbers)
                .initiatedAt(statusInfo.getInitiatedAt())
                .lastUpdatedAt(statusInfo.getLastUpdatedAt())
                .expiresAt(statusInfo.getExpiresAt())
                .build();
    }
    /**
     * 将Media实体转换为VO
     * 
     * @param media 媒体实体
     * @param accessUrl 访问URL（可选）
     * @return 媒体VO
     */
    private MediaVO mapToMediaVO(Media media, String accessUrl) {
        return MediaVO.builder()
                .id(media.getId())
                .title(media.getTitle())
                .description(media.getDescription())
                .type(media.getType() != null ? media.getType().name() : null)
                .size(media.getSize())
                .originalFilename(media.getOriginalFilename())
                .status(media.getStatus() != null ? media.getStatus().name() : null)
                .institutionId(media.getInstitution() != null ? media.getInstitution().getId() : null)
                .uploaderId(media.getUploaderId())
                .uploadTime(media.getUploadTime())
                .lastAccessTime(media.getLastAccessTime())
                .accessUrl(accessUrl)
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/MinioServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.config.MinioConfig;
import com.zhangziqi.online_course_mine.service.MinioService;
import io.minio.*;
import io.minio.http.Method;
import io.minio.messages.Item;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
@Slf4j
@Service
@RequiredArgsConstructor
public class MinioServiceImpl implements MinioService {
    private final MinioClient minioClient;
    private final MinioConfig minioConfig;
    @Override
    public String uploadFile(String objectName, InputStream inputStream, String contentType) {
        try {
            checkAndCreateBucket();
            // 上传文件
            minioClient.putObject(
                    PutObjectArgs.builder()
                            .bucket(minioConfig.getBucketName())
                            .object(objectName)
                            .stream(inputStream, inputStream.available(), -1)
                            .contentType(contentType)
                            .build()
            );
            return getFileUrl(objectName);
        } catch (Exception e) {
            log.error("文件上传失败: {}", e.getMessage(), e);
            throw new RuntimeException("文件上传失败", e);
        }
    }
    @Override
    public boolean deleteFile(String objectName) {
        try {
            minioClient.removeObject(
                    RemoveObjectArgs.builder()
                            .bucket(minioConfig.getBucketName())
                            .object(objectName)
                            .build()
            );
            return true;
        } catch (Exception e) {
            log.error("文件删除失败: {}", e.getMessage(), e);
            return false;
        }
    }
    @Override
    public String getFileUrl(String objectName) {
        try {
            // 返回直接访问URL，而不是预签名URL
            return minioConfig.getEndpoint() + "/" + minioConfig.getBucketName() + "/" + objectName;
        } catch (Exception e) {
            log.error("获取文件URL失败: {}", e.getMessage(), e);
            throw new RuntimeException("获取文件URL失败", e);
        }
    }
    @Override
    public List<String> listAllFiles() {
        List<String> files = new ArrayList<>();
        try {
            Iterable<Result<Item>> results = minioClient.listObjects(
                    ListObjectsArgs.builder()
                            .bucket(minioConfig.getBucketName())
                            .build()
            );
            for (Result<Item> result : results) {
                Item item = result.get();
                files.add(item.objectName());
            }
            return files;
        } catch (Exception e) {
            log.error("列出所有文件失败: {}", e.getMessage(), e);
            throw new RuntimeException("列出所有文件失败", e);
        }
    }
    @Override
    public void checkAndCreateBucket() {
        try {
            boolean bucketExists = minioClient.bucketExists(
                    BucketExistsArgs.builder()
                            .bucket(minioConfig.getBucketName())
                            .build()
            );
            if (!bucketExists) {
                minioClient.makeBucket(
                        MakeBucketArgs.builder()
                                .bucket(minioConfig.getBucketName())
                                .build()
                );
                log.info("Bucket '{}' 创建成功", minioConfig.getBucketName());
            }
        } catch (Exception e) {
            log.error("检查或创建存储桶失败: {}", e.getMessage(), e);
            throw new RuntimeException("检查或创建存储桶失败", e);
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/PermissionServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.PermissionDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.vo.PermissionVO;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.service.PermissionService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.CacheConfig;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import java.util.List;
import java.util.stream.Collectors;
/**
 * 权限服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
@CacheConfig(cacheNames = "permissions") // 指定缓存名称
public class PermissionServiceImpl implements PermissionService {
    private final PermissionRepository permissionRepository;
    private final RoleRepository roleRepository;
    /**
     * 获取权限列表
     *
     * @return 权限列表
     */
    @Override
    @Transactional(readOnly = true)
    @Cacheable(key = "'all'") // 缓存所有权限列表
    public List<PermissionVO> getPermissionList() {
        List<Permission> permissions = permissionRepository.findAll();
        return permissions.stream()
                .map(this::convertToPermissionVO)
                .collect(Collectors.toList());
    }
    /**
     * 获取权限详情
     *
     * @param id 权限ID
     * @return 权限详情
     */
    @Override
    @Transactional(readOnly = true)
    @Cacheable(key = "#id") // 缓存单个权限
    public PermissionVO getPermissionById(Long id) {
        Permission permission = permissionRepository.findById(id)
                .orElseThrow(() -> new BusinessException("权限不存在"));
        return convertToPermissionVO(permission);
    }
    /**
     * 获取权限（根据编码）
     *
     * @param code 权限编码
     * @return 权限
     */
    @Override
    @Transactional(readOnly = true)
    @Cacheable(key = "'code:' + #code") // 缓存根据code查询的权限
    public Permission getPermissionByCode(String code) {
        return permissionRepository.findByCode(code)
                .orElseThrow(() -> new BusinessException("权限不存在"));
    }
    /**
     * 创建权限
     *
     * @param permissionDTO 权限信息
     * @return 创建后的权限信息
     */
    @Override
    @Transactional
    @CacheEvict(allEntries = true) // 清除所有权限缓存
    public PermissionVO createPermission(PermissionDTO permissionDTO) {
        // 检查权限编码是否存在
        if (permissionRepository.findByCode(permissionDTO.getCode()).isPresent()) {
            throw new BusinessException("权限编码已存在");
        }
        // 检查URL和方法是否已存在权限
        if (StringUtils.hasText(permissionDTO.getUrl()) && StringUtils.hasText(permissionDTO.getMethod())) {
            if (permissionRepository.findByUrlAndMethod(permissionDTO.getUrl(), permissionDTO.getMethod()).isPresent()) {
                throw new BusinessException("该URL和请求方法的权限已存在");
            }
        }
        // 创建权限
        Permission permission = Permission.builder()
                .name(permissionDTO.getName())
                .code(permissionDTO.getCode())
                .description(permissionDTO.getDescription())
                .url(permissionDTO.getUrl())
                .method(permissionDTO.getMethod())
                .build();
        // 保存权限
        Permission savedPermission = permissionRepository.save(permission);
        log.info("创建权限成功: {}", savedPermission.getName());
        return convertToPermissionVO(savedPermission);
    }
    /**
     * 更新权限
     *
     * @param id            权限ID
     * @param permissionDTO 权限信息
     * @return 更新后的权限信息
     */
    @Override
    @Transactional
    @CacheEvict(allEntries = true) // 清除所有权限缓存
    public PermissionVO updatePermission(Long id, PermissionDTO permissionDTO) {
        Permission permission = permissionRepository.findById(id)
                .orElseThrow(() -> new BusinessException("权限不存在"));
        // 检查权限编码是否存在
        if (StringUtils.hasText(permissionDTO.getCode()) &&
                !permission.getCode().equals(permissionDTO.getCode()) &&
                permissionRepository.findByCode(permissionDTO.getCode()).isPresent()) {
            throw new BusinessException("权限编码已存在");
        }
        // 检查URL和方法是否已存在权限
        if (StringUtils.hasText(permissionDTO.getUrl()) && StringUtils.hasText(permissionDTO.getMethod())) {
            if (!permission.getUrl().equals(permissionDTO.getUrl()) || 
                !permission.getMethod().equals(permissionDTO.getMethod())) {
                if (permissionRepository.findByUrlAndMethod(permissionDTO.getUrl(), permissionDTO.getMethod()).isPresent()) {
                    throw new BusinessException("该URL和请求方法的权限已存在");
                }
            }
        }
        // 更新基本信息
        if (StringUtils.hasText(permissionDTO.getName())) {
            permission.setName(permissionDTO.getName());
        }
        if (StringUtils.hasText(permissionDTO.getCode())) {
            permission.setCode(permissionDTO.getCode());
        }
        if (permissionDTO.getDescription() != null) {
            permission.setDescription(permissionDTO.getDescription());
        }
        if (StringUtils.hasText(permissionDTO.getUrl())) {
            permission.setUrl(permissionDTO.getUrl());
        }
        if (StringUtils.hasText(permissionDTO.getMethod())) {
            permission.setMethod(permissionDTO.getMethod());
        }
        // 保存权限
        Permission savedPermission = permissionRepository.save(permission);
        log.info("更新权限成功: {}", savedPermission.getName());
        return convertToPermissionVO(savedPermission);
    }
    /**
     * 删除权限
     *
     * @param id 权限ID
     */
    @Override
    @Transactional
    @CacheEvict(allEntries = true) // 清除所有权限缓存
    public void deletePermission(Long id) {
        Permission permission = permissionRepository.findById(id)
                .orElseThrow(() -> new BusinessException("权限不存在"));
        // 检查权限是否被角色引用
        List<Role> roles = roleRepository.findAll();
        for (Role role : roles) {
            if (role.getPermissions().contains(permission)) {
                throw new BusinessException("权限已被角色引用，无法删除");
            }
        }
        permissionRepository.delete(permission);
        log.info("删除权限成功: {}", permission.getName());
    }
    /**
     * 转换为权限VO
     *
     * @param permission 权限实体
     * @return 权限VO
     */
    private PermissionVO convertToPermissionVO(Permission permission) {
        return PermissionVO.builder()
                .id(permission.getId())
                .name(permission.getName())
                .code(permission.getCode())
                .description(permission.getDescription())
                .url(permission.getUrl())
                .method(permission.getMethod())
                .createdAt(permission.getCreatedAt())
                .updatedAt(permission.getUpdatedAt())
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/RoleServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.RoleDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.vo.RoleVO;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.RoleService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
/**
 * 角色服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class RoleServiceImpl implements RoleService {
    private final RoleRepository roleRepository;
    private final PermissionRepository permissionRepository;
    private final UserRepository userRepository;
    /**
     * 获取角色列表
     *
     * @return 角色列表
     */
    @Override
    @Transactional(readOnly = true)
    public List<RoleVO> getRoleList() {
        List<Role> roles = roleRepository.findAll();
        return roles.stream()
                .map(this::convertToRoleVO)
                .collect(Collectors.toList());
    }
    /**
     * 获取角色详情
     *
     * @param id 角色ID
     * @return 角色详情
     */
    @Override
    @Transactional(readOnly = true)
    public RoleVO getRoleById(Long id) {
        Role role = roleRepository.findById(id)
                .orElseThrow(() -> new BusinessException("角色不存在"));
        return convertToRoleVO(role);
    }
    /**
     * 获取角色（根据编码）
     *
     * @param code 角色编码
     * @return 角色
     */
    @Override
    @Transactional(readOnly = true)
    public Role getRoleByCode(String code) {
        return roleRepository.findByCode(code)
                .orElseThrow(() -> new BusinessException("角色不存在"));
    }
    /**
     * 创建角色
     *
     * @param roleDTO 角色信息
     * @return 创建后的角色信息
     */
    @Override
    @Transactional
    public RoleVO createRole(RoleDTO roleDTO) {
        // 检查角色编码是否存在
        if (roleRepository.findByCode(roleDTO.getCode()).isPresent()) {
            throw new BusinessException("角色编码已存在");
        }
        // 检查角色名称是否存在
        if (roleRepository.findByName(roleDTO.getName()).isPresent()) {
            throw new BusinessException("角色名称已存在");
        }
        // 获取权限
        Set<Permission> permissions = new HashSet<>();
        if (roleDTO.getPermissionIds() != null && !roleDTO.getPermissionIds().isEmpty()) {
            permissions = roleDTO.getPermissionIds().stream()
                    .map(permissionId -> permissionRepository.findById(permissionId)
                            .orElseThrow(() -> new BusinessException("权限不存在: " + permissionId)))
                    .collect(Collectors.toSet());
        }
        // 创建角色
        Role role = Role.builder()
                .name(roleDTO.getName())
                .code(roleDTO.getCode())
                .description(roleDTO.getDescription())
                .permissions(permissions)
                .build();
        // 保存角色
        Role savedRole = roleRepository.save(role);
        log.info("创建角色成功: {}", savedRole.getName());
        return convertToRoleVO(savedRole);
    }
    /**
     * 更新角色
     *
     * @param id      角色ID
     * @param roleDTO 角色信息
     * @return 更新后的角色信息
     */
    @Override
    @Transactional
    public RoleVO updateRole(Long id, RoleDTO roleDTO) {
        Role role = roleRepository.findById(id)
                .orElseThrow(() -> new BusinessException("角色不存在"));
        // 检查角色编码是否存在
        if (StringUtils.hasText(roleDTO.getCode()) &&
                !role.getCode().equals(roleDTO.getCode()) &&
                roleRepository.findByCode(roleDTO.getCode()).isPresent()) {
            throw new BusinessException("角色编码已存在");
        }
        // 检查角色名称是否存在
        if (StringUtils.hasText(roleDTO.getName()) &&
                !role.getName().equals(roleDTO.getName()) &&
                roleRepository.findByName(roleDTO.getName()).isPresent()) {
            throw new BusinessException("角色名称已存在");
        }
        // 更新权限
        if (roleDTO.getPermissionIds() != null) {
            Set<Permission> permissions = roleDTO.getPermissionIds().stream()
                    .map(permissionId -> permissionRepository.findById(permissionId)
                            .orElseThrow(() -> new BusinessException("权限不存在: " + permissionId)))
                    .collect(Collectors.toSet());
            role.setPermissions(permissions);
        }
        // 更新基本信息
        if (StringUtils.hasText(roleDTO.getName())) {
            role.setName(roleDTO.getName());
        }
        if (StringUtils.hasText(roleDTO.getCode())) {
            role.setCode(roleDTO.getCode());
        }
        if (StringUtils.hasText(roleDTO.getDescription())) {
            role.setDescription(roleDTO.getDescription());
        }
        // 保存角色
        Role savedRole = roleRepository.save(role);
        log.info("更新角色成功: {}", savedRole.getName());
        return convertToRoleVO(savedRole);
    }
    /**
     * 删除角色
     *
     * @param id 角色ID
     */
    @Override
    @Transactional
    public void deleteRole(Long id) {
        Role role = roleRepository.findById(id)
                .orElseThrow(() -> new BusinessException("角色不存在"));
        // 检查角色是否被用户引用
        if (userRepository.findAll().stream().anyMatch(user -> user.getRoles().contains(role))) {
            throw new BusinessException("角色已被用户引用，无法删除");
        }
        roleRepository.delete(role);
        log.info("删除角色成功: {}", role.getName());
    }
    /**
     * 给角色分配权限
     *
     * @param roleId        角色ID
     * @param permissionIds 权限ID列表
     * @return 更新后的角色信息
     */
    @Override
    @Transactional
    public RoleVO assignPermissions(Long roleId, Set<Long> permissionIds) {
        Role role = roleRepository.findById(roleId)
                .orElseThrow(() -> new BusinessException("角色不存在"));
        if (permissionIds == null || permissionIds.isEmpty()) {
            throw new BusinessException("权限ID列表不能为空");
        }
        Set<Permission> permissions = permissionIds.stream()
                .map(permissionId -> permissionRepository.findById(permissionId)
                        .orElseThrow(() -> new BusinessException("权限不存在: " + permissionId)))
                .collect(Collectors.toSet());
        role.setPermissions(permissions);
        Role savedRole = roleRepository.save(role);
        log.info("给角色分配权限成功: {}, 权限IDs: {}", savedRole.getName(), permissionIds);
        return convertToRoleVO(savedRole);
    }
    /**
     * 批量删除角色
     *
     * @param ids 角色ID列表
     */
    @Override
    @Transactional
    public void batchDeleteRoles(List<Long> ids) {
        if (ids == null || ids.isEmpty()) {
            throw new BusinessException("角色ID列表不能为空");
        }
        for (Long id : ids) {
            deleteRole(id);
        }
    }
    /**
     * 转换为角色VO
     *
     * @param role 角色实体
     * @return 角色VO
     */
    private RoleVO convertToRoleVO(Role role) {
        return RoleVO.builder()
                .id(role.getId())
                .name(role.getName())
                .code(role.getCode())
                .description(role.getDescription())
                .createdAt(role.getCreatedAt())
                .updatedAt(role.getUpdatedAt())
                .permissions(role.getPermissions())
                .build();
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/S3MultipartUploadManager.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.config.S3Config;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.media.PresignedUrlInfo;
import com.zhangziqi.online_course_mine.model.dto.media.UploadStatusInfo;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.*;
import software.amazon.awssdk.services.s3.presigner.S3Presigner;
import software.amazon.awssdk.services.s3.presigner.model.PresignedPutObjectRequest;
import software.amazon.awssdk.services.s3.presigner.model.PutObjectPresignRequest;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
/**
 * S3分片上传管理器
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class S3MultipartUploadManager {
    private final S3Client s3Client;
    private final S3Presigner s3Presigner;
    private final S3Config s3Config;
    /**
     * 初始化分片上传
     * 
     * @param objectKey 对象键
     * @param contentType 内容类型
     * @return 上传ID
     */
    public String initiateMultipartUpload(String objectKey, String contentType) {
        try {
            // 确保存储桶存在
            checkAndCreateBucket();
            // 初始化分片上传请求
            CreateMultipartUploadRequest createRequest = CreateMultipartUploadRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .key(objectKey)
                    .contentType(contentType)
                    .build();
            // 发送请求
            CreateMultipartUploadResponse response = s3Client.createMultipartUpload(createRequest);
            log.info("已初始化分片上传: uploadId={}, objectKey={}", response.uploadId(), objectKey);
            return response.uploadId();
        } catch (Exception e) {
            log.error("初始化分片上传失败", e);
            throw new BusinessException(500, "初始化上传失败: " + e.getMessage());
        }
    }
    /**
     * 为分片生成预签名上传URL
     * 
     * @param uploadId 上传ID
     * @param objectKey 对象键
     * @param partNumber 分片编号
     * @return 预签名URL
     */
    public String generatePresignedUrlForPart(String uploadId, String objectKey, int partNumber) {
        try {
            // 构建上传分片请求
            UploadPartRequest uploadPartRequest = UploadPartRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .key(objectKey)
                    .uploadId(uploadId)
                    .partNumber(partNumber)
                    .build();
            // 构建预签名请求
            software.amazon.awssdk.services.s3.presigner.model.UploadPartPresignRequest presignRequest = 
                    software.amazon.awssdk.services.s3.presigner.model.UploadPartPresignRequest.builder()
                    .signatureDuration(Duration.ofMinutes(15))
                    .uploadPartRequest(uploadPartRequest)
                    .build();
            // 获取预签名URL
            software.amazon.awssdk.services.s3.presigner.model.PresignedUploadPartRequest presignedRequest = 
                    s3Presigner.presignUploadPart(presignRequest);
            String url = presignedRequest.url().toString();
            log.debug("生成分片预签名URL: part={}, uploadId={}", partNumber, uploadId);
            return url;
        } catch (Exception e) {
            log.error("生成分片预签名URL失败", e);
            throw new BusinessException(500, "生成分片上传URL失败: " + e.getMessage());
        }
    }
    /**
     * 批量生成分片预签名URL
     * 
     * @param uploadId 上传ID
     * @param objectKey 对象键
     * @param partStart 起始分片编号
     * @param partEnd 结束分片编号
     * @return 预签名URL信息列表
     */
    public List<PresignedUrlInfo> batchGeneratePresignedUrls(
            String uploadId, String objectKey, int partStart, int partEnd) {
        List<PresignedUrlInfo> urlInfos = new ArrayList<>();
        for (int i = partStart; i <= partEnd; i++) {
            String url = generatePresignedUrlForPart(uploadId, objectKey, i);
            urlInfos.add(new PresignedUrlInfo(i, url));
        }
        return urlInfos;
    }
    /**
     * 完成分片上传
     * 
     * @param uploadId 上传ID
     * @param objectKey 对象键
     * @param parts 已完成的分片信息
     * @return 完成上传的响应
     */
    public CompleteMultipartUploadResponse completeMultipartUpload(
            String uploadId, String objectKey, List<UploadStatusInfo.PartInfo> parts) {
        try {
            // 将分片信息转换为AWS SDK所需格式
            List<CompletedPart> completedParts = parts.stream()
                    .map(part -> CompletedPart.builder()
                            .partNumber(part.getPartNumber())
                            .eTag(part.getETag())
                            .build())
                    .sorted(Comparator.comparing(CompletedPart::partNumber))
                    .collect(Collectors.toList());
            // 构建完成请求
            CompleteMultipartUploadRequest completeRequest = CompleteMultipartUploadRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .key(objectKey)
                    .uploadId(uploadId)
                    .multipartUpload(CompletedMultipartUpload.builder()
                            .parts(completedParts)
                            .build())
                    .build();
            // 完成上传
            CompleteMultipartUploadResponse response = s3Client.completeMultipartUpload(completeRequest);
            log.info("分片上传完成: uploadId={}, objectKey={}, location={}", 
                    uploadId, objectKey, response.location());
            return response;
        } catch (Exception e) {
            log.error("完成分片上传失败", e);
            throw new BusinessException(500, "完成上传失败: " + e.getMessage());
        }
    }
    /**
     * 取消分片上传
     * 
     * @param uploadId 上传ID
     * @param objectKey 对象键
     */
    public void abortMultipartUpload(String uploadId, String objectKey) {
        try {
            AbortMultipartUploadRequest abortRequest = AbortMultipartUploadRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .key(objectKey)
                    .uploadId(uploadId)
                    .build();
            s3Client.abortMultipartUpload(abortRequest);
            log.info("已取消分片上传: uploadId={}, objectKey={}", uploadId, objectKey);
        } catch (Exception e) {
            log.error("取消分片上传失败", e);
            throw new BusinessException(500, "取消上传失败: " + e.getMessage());
        }
    }
    /**
     * 获取上传分片状态
     * 
     * @param uploadId 上传ID
     * @param objectKey 对象键
     * @return 已上传的分片信息
     */
    public List<UploadStatusInfo.PartInfo> listParts(String uploadId, String objectKey) {
        try {
            ListPartsRequest listPartsRequest = ListPartsRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .key(objectKey)
                    .uploadId(uploadId)
                    .build();
            ListPartsResponse response = s3Client.listParts(listPartsRequest);
            return response.parts().stream()
                    .map(part -> new UploadStatusInfo.PartInfo(
                            part.partNumber(), 
                            part.eTag()))
                    .collect(Collectors.toList());
        } catch (Exception e) {
            log.error("获取分片信息失败", e);
            throw new BusinessException(500, "获取上传状态失败: " + e.getMessage());
        }
    }
    /**
     * 检查并创建存储桶
     */
    private void checkAndCreateBucket() {
        try {
            s3Client.headBucket(HeadBucketRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .build());
        } catch (NoSuchBucketException e) {
            log.info("存储桶 {} 不存在，正在创建...", s3Config.getBucketName());
            s3Client.createBucket(CreateBucketRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .build());
            log.info("存储桶 {} 创建成功", s3Config.getBucketName());
        }
    }
    /**
     * 获取对象的预签名访问URL
     * 
     * @param objectKey 对象键
     * @param expirationMinutes URL有效期（分钟）
     * @return 预签名URL
     */
    public String generatePresignedGetUrl(String objectKey, long expirationMinutes) {
        try {
            // 构建请求
            software.amazon.awssdk.services.s3.presigner.model.GetObjectPresignRequest presignRequest = 
                    software.amazon.awssdk.services.s3.presigner.model.GetObjectPresignRequest.builder()
                    .signatureDuration(Duration.ofMinutes(expirationMinutes))
                    .getObjectRequest(GetObjectRequest.builder()
                            .bucket(s3Config.getBucketName())
                            .key(objectKey)
                            .build())
                    .build();
            // 获取预签名URL
            software.amazon.awssdk.services.s3.presigner.model.PresignedGetObjectRequest presignedRequest = 
                    s3Presigner.presignGetObject(presignRequest);
            return presignedRequest.url().toString();
        } catch (Exception e) {
            log.error("生成预签名访问URL失败", e);
            throw new BusinessException(500, "生成访问链接失败: " + e.getMessage());
        }
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/StorageQuotaServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.StorageQuota;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import com.zhangziqi.online_course_mine.model.vo.QuotaInfoVO;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.StorageQuotaRepository;
import com.zhangziqi.online_course_mine.service.StorageQuotaService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
/**
 * 存储配额服务实现类
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class StorageQuotaServiceImpl implements StorageQuotaService {
    private final StorageQuotaRepository quotaRepository;
    private final InstitutionRepository institutionRepository;
    @Override
    @Transactional(readOnly = true)
    public boolean hasEnoughQuota(Long institutionId, QuotaType quotaType, Long requiredSize) {
        StorageQuota quota = findQuotaByType(institutionId, quotaType);
        // 如果剩余配额大于等于所需大小，则有足够配额
        return (quota.getTotalQuota() - quota.getUsedQuota()) >= requiredSize;
    }
    @Override
    @Transactional
    public void updateUsedQuota(Long institutionId, QuotaType type, Long sizeDelta) {
        // 验证机构存在
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        StorageQuota quota = quotaRepository.findByInstitutionAndType(institution, type)
                .orElseGet(() -> {
                    List<StorageQuota> quotas = initializeQuotas(institution);
                    return quotas.stream()
                            .filter(q -> q.getType() == type)
                            .findFirst()
                            .orElseThrow(() -> new BusinessException(500, "初始化配额失败"));
                });
        // 计算新的已用配额
        long newUsedQuota = quota.getUsedQuota() + sizeDelta;
        // 已用配额不能小于0
        if (newUsedQuota < 0) {
            newUsedQuota = 0;
        }
        // 已用配额不能超过总配额
        if (newUsedQuota > quota.getTotalQuota()) {
            throw new BusinessException(400, "存储配额不足，无法分配空间");
        }
        // 更新已用配额
        quota.setUsedQuota(newUsedQuota);
        // 保存配额
        quotaRepository.save(quota);
        // 如果更新的是特定类型，也要更新TOTAL类型
        if (type != QuotaType.TOTAL) {
            updateUsedQuota(institutionId, QuotaType.TOTAL, sizeDelta);
        }
        log.info("更新机构{}的{}配额，变化: {}字节，当前已用: {}字节", 
                institutionId, type, sizeDelta, quota.getUsedQuota());
    }
    @Override
    @Transactional(readOnly = true)
    public QuotaInfoVO getQuotaInfo(Long institutionId) {
        // 获取所有配额信息
        List<QuotaInfoVO> allQuotas = getAllQuotas(institutionId);
        // 计算总配额和已用总配额
        long totalQuota = 0;
        long usedQuota = 0;
        for (QuotaInfoVO info : allQuotas) {
            totalQuota += info.getTotalQuota();
            usedQuota += info.getUsedQuota();
        }
        // 构建总配额信息
        return QuotaInfoVO.builder()
                .type(QuotaType.TOTAL.name())
                .typeName("总配额")
                .totalQuota(totalQuota)
                .usedQuota(usedQuota)
                .lastUpdatedTime(LocalDateTime.now())
                .build();
    }
    @Override
    @Transactional(readOnly = true)
    public List<QuotaInfoVO> getAllQuotas(Long institutionId) {
        // 验证机构是否存在
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        // 获取机构的所有配额
        List<StorageQuota> quotas = quotaRepository.findByInstitution(institution);
        // 如果配额列表为空，则初始化配额
        if (quotas.isEmpty()) {
            quotas = initializeQuotas(institution);
        }
        // 转换为VO
        return quotas.stream()
                .map(this::mapToQuotaInfoVO)
                .collect(Collectors.toList());
    }
    /**
     * 按类型查找配额
     * 
     * @param institutionId 机构ID
     * @param quotaType 配额类型
     * @return 配额
     */
    private StorageQuota findQuotaByType(Long institutionId, QuotaType quotaType) {
        // 验证机构是否存在
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        // 查找指定类型的配额
        StorageQuota quota = quotaRepository.findByInstitutionAndType(institution, quotaType)
                .orElse(null);
        // 如果配额不存在，则初始化配额
        if (quota == null) {
            List<StorageQuota> quotas = initializeQuotas(institution);
            quota = quotas.stream()
                    .filter(q -> q.getType() == quotaType)
                    .findFirst()
                    .orElseThrow(() -> new BusinessException(500, "初始化配额失败"));
        }
        return quota;
    }
    /**
     * 初始化机构的配额
     * 
     * @param institution 机构
     * @return 初始化的配额列表
     */
    private List<StorageQuota> initializeQuotas(Institution institution) {
        List<StorageQuota> quotas = new ArrayList<>();
        // 初始化各种类型的配额
        // 视频配额：默认10GB
        StorageQuota videoQuota = new StorageQuota();
        videoQuota.setInstitution(institution);
        videoQuota.setType(QuotaType.VIDEO);
        videoQuota.setTotalQuota(10L * 1024 * 1024 * 1024); // 10GB
        videoQuota.setUsedQuota(0L);
        quotas.add(videoQuota);
        // 文档配额：默认5GB
        StorageQuota docQuota = new StorageQuota();
        docQuota.setInstitution(institution);
        docQuota.setType(QuotaType.DOCUMENT);
        docQuota.setTotalQuota(5L * 1024 * 1024 * 1024); // 5GB
        docQuota.setUsedQuota(0L);
        quotas.add(docQuota);
        // 总配额：默认等于各类型配额之和
        StorageQuota totalQuota = new StorageQuota();
        totalQuota.setInstitution(institution);
        totalQuota.setType(QuotaType.TOTAL);
        totalQuota.setTotalQuota(videoQuota.getTotalQuota() + docQuota.getTotalQuota());
        totalQuota.setUsedQuota(0L);
        quotas.add(totalQuota);
        // 保存所有配额
        List<StorageQuota> savedQuotas = quotaRepository.saveAll(quotas);
        log.info("初始化配额成功: {}", savedQuotas);
        for (StorageQuota quota : savedQuotas) {
            log.info("保存的配额: ID={}, 类型={}, 总配额={}, 已用配额={}", 
                    quota.getId(), quota.getType(), quota.getTotalQuota(), quota.getUsedQuota());
        }
        return savedQuotas;
    }
    /**
     * 将StorageQuota实体转换为VO
     * 
     * @param quota 配额实体
     * @return 配额VO
     */
    private QuotaInfoVO mapToQuotaInfoVO(StorageQuota quota) {
        return QuotaInfoVO.builder()
                .type(quota.getType().name())
                .typeName(getQuotaTypeName(quota.getType()))
                .totalQuota(quota.getTotalQuota())
                .usedQuota(quota.getUsedQuota())
                .lastUpdatedTime(quota.getUpdatedAt())
                .build();
    }
    /**
     * 获取配额类型的中文名称
     * 
     * @param type 配额类型
     * @return 类型名称
     */
    private String getQuotaTypeName(QuotaType type) {
        switch (type) {
            case VIDEO:
                return "视频配额";
            case DOCUMENT:
                return "文档配额";
            case TOTAL:
                return "总配额";
            default:
                return "未知配额";
        }
    }
    @Override
    @Transactional
    public void setQuota(Long institutionId, QuotaType type, Long totalQuota, LocalDateTime expiresAt) {
        Institution institution = institutionRepository.findById(institutionId)
                .orElseThrow(() -> new ResourceNotFoundException("机构不存在，ID: " + institutionId));
        StorageQuota quota = quotaRepository.findByInstitutionAndType(institution, type)
                .orElse(new StorageQuota());
        quota.setInstitution(institution);
        quota.setType(type);
        quota.setTotalQuota(totalQuota);
        quota.setExpiresAt(expiresAt);
        quota.setEnabled(true); // 设置为启用状态
        quotaRepository.save(quota);
        log.info("设置配额: 机构ID: {}, 类型: {}, 总配额: {}", institutionId, type, totalQuota);
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/UploadStatusService.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.dto.media.UploadStatusInfo;
import com.zhangziqi.online_course_mine.model.enums.MediaStatus;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.concurrent.TimeUnit;
/**
 * 上传状态服务
 * 用于管理媒体上传状态信息
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class UploadStatusService {
    private final RedisTemplate<String, Object> redisTemplate;
    private final ObjectMapper objectMapper;
    // 上传状态在Redis中的过期时间（小时）
    private static final int STATUS_EXPIRATION_HOURS = 24;
    // Redis键前缀
    private static final String UPLOAD_STATUS_KEY_PREFIX = "upload_status:";
    /**
     * 保存上传状态
     * 
     * @param statusInfo 上传状态信息
     */
    public void saveUploadStatus(UploadStatusInfo statusInfo) {
        String key = generateKey(statusInfo.getMediaId());
        // 计算过期时间
        LocalDateTime expiresAt = LocalDateTime.now().plus(STATUS_EXPIRATION_HOURS, ChronoUnit.HOURS);
        statusInfo.setExpiresAt(expiresAt);
        // 保存状态
        redisTemplate.opsForValue().set(key, statusInfo);
        redisTemplate.expire(key, STATUS_EXPIRATION_HOURS, TimeUnit.HOURS);
        log.info("Saved upload status for media ID: {}, upload ID: {}", statusInfo.getMediaId(), statusInfo.getUploadId());
    }
    /**
     * 获取上传状态
     * 
     * @param mediaId 媒体ID
     * @return 上传状态信息
     */
    public UploadStatusInfo getUploadStatus(Long mediaId) {
        String key = generateKey(mediaId);
        Object value = redisTemplate.opsForValue().get(key);
        if (value == null) {
            throw new ResourceNotFoundException("上传状态不存在，媒体ID: " + mediaId);
        }
        UploadStatusInfo statusInfo;
        if (value instanceof UploadStatusInfo) {
            statusInfo = (UploadStatusInfo) value;
        } else {
            // 处理可能的序列化/反序列化问题
            try {
                String json = objectMapper.writeValueAsString(value);
                statusInfo = objectMapper.readValue(json, UploadStatusInfo.class);
            } catch (Exception e) {
                log.error("Failed to convert Redis value to UploadStatusInfo", e);
                throw new ResourceNotFoundException("上传状态格式错误，媒体ID: " + mediaId);
            }
        }
        return statusInfo;
    }
    /**
     * 获取上传状态，如果不存在则返回null
     * 
     * @param mediaId 媒体ID
     * @return 上传状态信息或null
     */
    public UploadStatusInfo getUploadStatusOrNull(Long mediaId) {
        try {
            return getUploadStatus(mediaId);
        } catch (ResourceNotFoundException e) {
            return null;
        }
    }
    /**
     * 删除上传状态
     * 
     * @param mediaId 媒体ID
     */
    public void deleteUploadStatus(Long mediaId) {
        String key = generateKey(mediaId);
        redisTemplate.delete(key);
        log.info("Deleted upload status for media ID: {}", mediaId);
    }
    /**
     * 更新分片信息
     * 
     * @param mediaId 媒体ID
     * @param partInfo 分片信息
     * @return 更新后的上传状态信息
     */
    public UploadStatusInfo updatePartInfo(Long mediaId, UploadStatusInfo.PartInfo partInfo) {
        UploadStatusInfo statusInfo = getUploadStatus(mediaId);
        // 检查分片是否已存在
        boolean exists = statusInfo.getCompletedParts().stream()
                .anyMatch(part -> part.getPartNumber() == partInfo.getPartNumber());
        if (!exists) {
            // 添加新完成的分片
            statusInfo.getCompletedParts().add(partInfo);
            statusInfo.setLastUpdatedAt(LocalDateTime.now());
            // 重新保存状态
            saveUploadStatus(statusInfo);
            log.info("Updated part info for media ID: {}, part number: {}, total completed parts: {}", 
                    mediaId, partInfo.getPartNumber(), statusInfo.getCompletedParts().size());
        }
        return statusInfo;
    }
    /**
     * 更新上传状态
     * 
     * @param mediaId 媒体ID
     * @param status 新状态
     * @return 更新后的上传状态信息
     */
    public UploadStatusInfo updateStatus(Long mediaId, MediaStatus status) {
        UploadStatusInfo statusInfo = getUploadStatus(mediaId);
        statusInfo.setStatus(status);
        statusInfo.setLastUpdatedAt(LocalDateTime.now());
        // 保存更新后的状态
        saveUploadStatus(statusInfo);
        log.debug("已更新上传状态: mediaId={}, newStatus={}", mediaId, status);
        return statusInfo;
    }
    /**
     * 生成Redis键
     * 
     * @param mediaId 媒体ID
     * @return Redis键
     */
    private String generateKey(Long mediaId) {
        return UPLOAD_STATUS_KEY_PREFIX + mediaId;
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/impl/UserServiceImpl.java">
package com.zhangziqi.online_course_mine.service.impl;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.dto.UserDTO;
import com.zhangziqi.online_course_mine.model.dto.UserQueryDTO;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.RoleEnum;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.security.jwt.TokenBlacklistService;
import com.zhangziqi.online_course_mine.service.EmailService;
import com.zhangziqi.online_course_mine.service.MinioService;
import com.zhangziqi.online_course_mine.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;
import jakarta.persistence.criteria.Predicate;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;
/**
 * 用户服务实现
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;
    private final EmailService emailService;
    private final MinioService minioService;
    private final TokenBlacklistService tokenBlacklistService;
    /**
     * 注册用户
     *
     * @param registerDTO 注册请求
     * @return 用户信息
     */
    @Override
    @Transactional
    public User register(RegisterDTO registerDTO) {
        // 检查用户名是否存在
        if (userRepository.existsByUsername(registerDTO.getUsername())) {
            throw new BusinessException("用户名已存在");
        }
        // 检查邮箱是否存在
        if (registerDTO.getEmail() != null && userRepository.existsByEmail(registerDTO.getEmail())) {
            throw new BusinessException("邮箱已存在");
        }
        // 检查手机号是否存在
        if (registerDTO.getPhone() != null && userRepository.existsByPhone(registerDTO.getPhone())) {
            throw new BusinessException("手机号已存在");
        }
        // 获取普通用户角色
        Role userRole = roleRepository.findByCode(RoleEnum.USER.getCode())
                .orElseThrow(() -> new BusinessException("角色不存在"));
        // 创建用户
        User user = User.builder()
                .username(registerDTO.getUsername())
                .password(passwordEncoder.encode(registerDTO.getPassword()))
                .email(registerDTO.getEmail())
                .phone(registerDTO.getPhone())
                .status(1) // 正常状态
                .roles(Collections.singleton(userRole))
                .build();
        // 保存用户
        User savedUser = userRepository.save(user);
        log.info("用户注册成功: {}", savedUser.getUsername());
        return savedUser;
    }
    /**
     * 根据用户名查询用户
     *
     * @param username 用户名
     * @return 用户信息
     */
    @Override
    @Transactional(readOnly = true)
    public User getUserByUsername(String username) {
        return userRepository.findByUsername(username)
                .orElseThrow(() -> new BusinessException("用户不存在"));
    }
    /**
     * 检查用户名是否存在
     *
     * @param username 用户名
     * @return 是否存在
     */
    @Override
    @Transactional(readOnly = true)
    public boolean existsByUsername(String username) {
        return userRepository.existsByUsername(username);
    }
    /**
     * 检查邮箱是否存在
     *
     * @param email 邮箱
     * @return 是否存在
     */
    @Override
    @Transactional(readOnly = true)
    public boolean existsByEmail(String email) {
        return userRepository.existsByEmail(email);
    }
    /**
     * 检查手机号是否存在
     *
     * @param phone 手机号
     * @return 是否存在
     */
    @Override
    @Transactional(readOnly = true)
    public boolean existsByPhone(String phone) {
        return userRepository.existsByPhone(phone);
    }
    /**
     * 更新最后登录时间
     *
     * @param username 用户名
     */
    @Override
    @Transactional
    public void updateLastLoginTime(String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        user.setLastLoginAt(LocalDateTime.now());
        userRepository.save(user);
        log.debug("更新用户最后登录时间: {}", username);
    }
    /**
     * 分页查询用户列表
     *
     * @param queryDTO 查询条件
     * @return 用户列表（分页）
     */
    @Override
    @Transactional(readOnly = true)
    public Page<UserVO> getUserList(UserQueryDTO queryDTO) {
        Pageable pageable = PageRequest.of(queryDTO.getPageNum() - 1, queryDTO.getPageSize());
        // 构建查询条件
        Specification<User> spec = (root, query, cb) -> {
            var predicates = new HashSet<Predicate>();
            // 按用户名模糊查询
            if (StringUtils.hasText(queryDTO.getUsername())) {
                predicates.add(cb.like(root.get("username"), "%" + queryDTO.getUsername() + "%"));
            }
            // 按邮箱模糊查询
            if (StringUtils.hasText(queryDTO.getEmail())) {
                predicates.add(cb.like(root.get("email"), "%" + queryDTO.getEmail() + "%"));
            }
            // 按手机号模糊查询
            if (StringUtils.hasText(queryDTO.getPhone())) {
                predicates.add(cb.like(root.get("phone"), "%" + queryDTO.getPhone() + "%"));
            }
            // 按状态精确查询
            if (queryDTO.getStatus() != null) {
                predicates.add(cb.equal(root.get("status"), queryDTO.getStatus()));
            }
            // 按机构ID精确查询
            if (queryDTO.getInstitutionId() != null) {
                predicates.add(cb.equal(root.get("institutionId"), queryDTO.getInstitutionId()));
            }
            // 按角色ID查询
            if (queryDTO.getRoleId() != null) {
                var join = root.join("roles");
                predicates.add(cb.equal(join.get("id"), queryDTO.getRoleId()));
            }
            return cb.and(predicates.toArray(new Predicate[0]));
        };
        // 执行查询
        Page<User> userPage = userRepository.findAll(spec, pageable);
        // 转换为VO
        List<UserVO> userVOList = userPage.getContent().stream()
                .map(this::convertToUserVO)
                .collect(Collectors.toList());
        return new PageImpl<>(userVOList, pageable, userPage.getTotalElements());
    }
    /**
     * 获取用户详情
     *
     * @param id 用户ID
     * @return 用户详情
     */
    @Override
    @Transactional(readOnly = true)
    public UserVO getUserById(Long id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        return convertToUserVO(user, true);
    }
    /**
     * 创建用户
     *
     * @param userDTO 用户信息
     * @return 创建后的用户信息
     */
    @Override
    @Transactional
    public UserVO createUser(UserDTO userDTO) {
        // 检查用户名是否存在
        if (userRepository.existsByUsername(userDTO.getUsername())) {
            throw new BusinessException("用户名已存在");
        }
        // 检查邮箱是否存在
        if (userDTO.getEmail() != null && userRepository.existsByEmail(userDTO.getEmail())) {
            throw new BusinessException("邮箱已存在");
        }
        // 检查手机号是否存在
        if (userDTO.getPhone() != null && userRepository.existsByPhone(userDTO.getPhone())) {
            throw new BusinessException("手机号已存在");
        }
        // 获取角色
        Set<Role> roles = new HashSet<>();
        if (userDTO.getRoleIds() != null && !userDTO.getRoleIds().isEmpty()) {
            roles = userDTO.getRoleIds().stream()
                    .map(roleId -> roleRepository.findById(roleId)
                            .orElseThrow(() -> new BusinessException("角色不存在: " + roleId)))
                    .collect(Collectors.toSet());
        } else {
            // 默认分配普通用户角色
            Role userRole = roleRepository.findByCode(RoleEnum.USER.getCode())
                    .orElseThrow(() -> new BusinessException("角色不存在"));
            roles.add(userRole);
        }
        // 创建用户
        User user = User.builder()
                .username(userDTO.getUsername())
                .password(passwordEncoder.encode(userDTO.getPassword()))
                .email(userDTO.getEmail())
                .phone(userDTO.getPhone())
                .avatar(userDTO.getAvatar())
                .nickname(userDTO.getNickname())
                .status(userDTO.getStatus() != null ? userDTO.getStatus() : 1)
                .institutionId(userDTO.getInstitutionId())
                .roles(roles)
                .build();
        // 保存用户
        User savedUser = userRepository.save(user);
        log.info("创建用户成功: {}", savedUser.getUsername());
        return convertToUserVO(savedUser);
    }
    /**
     * 更新用户
     *
     * @param id 用户ID
     * @param userDTO 用户信息
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO updateUser(Long id, UserDTO userDTO) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        // 检查用户名是否存在
        if (StringUtils.hasText(userDTO.getUsername()) && 
                !user.getUsername().equals(userDTO.getUsername()) && 
                userRepository.existsByUsername(userDTO.getUsername())) {
            throw new BusinessException("用户名已存在");
        }
        // 检查邮箱是否存在
        if (StringUtils.hasText(userDTO.getEmail()) && 
                (user.getEmail() == null || !user.getEmail().equals(userDTO.getEmail())) && 
                userRepository.existsByEmail(userDTO.getEmail())) {
            throw new BusinessException("邮箱已存在");
        }
        // 检查手机号是否存在
        if (StringUtils.hasText(userDTO.getPhone()) && 
                (user.getPhone() == null || !user.getPhone().equals(userDTO.getPhone())) && 
                userRepository.existsByPhone(userDTO.getPhone())) {
            throw new BusinessException("手机号已存在");
        }
        // 更新角色
        if (userDTO.getRoleIds() != null && !userDTO.getRoleIds().isEmpty()) {
            Set<Role> roles = userDTO.getRoleIds().stream()
                    .map(roleId -> roleRepository.findById(roleId)
                            .orElseThrow(() -> new BusinessException("角色不存在: " + roleId)))
                    .collect(Collectors.toSet());
            user.setRoles(roles);
        }
        // 更新基本信息
        if (StringUtils.hasText(userDTO.getUsername())) {
            user.setUsername(userDTO.getUsername());
        }
        if (StringUtils.hasText(userDTO.getPassword())) {
            user.setPassword(passwordEncoder.encode(userDTO.getPassword()));
        }
        if (StringUtils.hasText(userDTO.getEmail())) {
            user.setEmail(userDTO.getEmail());
        }
        if (StringUtils.hasText(userDTO.getPhone())) {
            user.setPhone(userDTO.getPhone());
        }
        if (StringUtils.hasText(userDTO.getAvatar())) {
            user.setAvatar(userDTO.getAvatar());
        }
        if (StringUtils.hasText(userDTO.getNickname())) {
            user.setNickname(userDTO.getNickname());
        }
        if (userDTO.getStatus() != null) {
            user.setStatus(userDTO.getStatus());
        }
        if (userDTO.getInstitutionId() != null) {
            user.setInstitutionId(userDTO.getInstitutionId());
        }
        // 保存用户
        User savedUser = userRepository.save(user);
        log.info("更新用户成功: {}", savedUser.getUsername());
        return convertToUserVO(savedUser);
    }
    /**
     * 删除用户
     *
     * @param id 用户ID
     */
    @Override
    @Transactional
    public void deleteUser(Long id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        userRepository.delete(user);
        log.info("删除用户成功: {}", user.getUsername());
    }
    /**
     * 修改用户状态
     *
     * @param id 用户ID
     * @param status 状态（0-禁用，1-正常）
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO updateUserStatus(Long id, Integer status) {
        // 获取用户
        User user = userRepository.findById(id)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        // 更新状态
        user.setStatus(status);
        User savedUser = userRepository.save(user);
        // 如果用户被禁用，使其所有token失效
        if (status != 1) {
            tokenBlacklistService.invalidateUserTokens(user.getUsername());
            log.info("用户 {} 已被禁用，所有token已失效", user.getUsername());
        }
        return convertToUserVO(savedUser);
    }
    /**
     * 给用户分配角色
     *
     * @param userId 用户ID
     * @param roleIds 角色ID列表
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO assignRoles(Long userId, Set<Long> roleIds) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        if (roleIds == null || roleIds.isEmpty()) {
            throw new BusinessException("角色ID列表不能为空");
        }
        Set<Role> roles = roleIds.stream()
                .map(roleId -> roleRepository.findById(roleId)
                        .orElseThrow(() -> new BusinessException("角色不存在: " + roleId)))
                .collect(Collectors.toSet());
        user.setRoles(roles);
        User savedUser = userRepository.save(user);
        log.info("给用户分配角色成功: {}, 角色IDs: {}", savedUser.getUsername(), roleIds);
        return convertToUserVO(savedUser);
    }
    /**
     * 批量删除用户
     *
     * @param ids 用户ID列表
     */
    @Override
    @Transactional
    public void batchDeleteUsers(List<Long> ids) {
        for (Long id : ids) {
            deleteUser(id);
        }
    }
    /**
     * 转换为用户VO（不包含角色信息）
     *
     * @param user 用户实体
     * @return 用户VO
     */
    private UserVO convertToUserVO(User user) {
        return convertToUserVO(user, false);
    }
    /**
     * 转换为用户VO
     *
     * @param user 用户实体
     * @param includeRoles 是否包含角色信息
     * @return 用户VO
     */
    private UserVO convertToUserVO(User user, boolean includeRoles) {
        UserVO.UserVOBuilder builder = UserVO.builder()
                .id(user.getId())
                .username(user.getUsername())
                .email(user.getEmail())
                .phone(user.getPhone())
                .avatar(user.getAvatar())
                .nickname(user.getNickname())
                .status(user.getStatus())
                .institutionId(user.getInstitutionId())
                .createdAt(user.getCreatedAt())
                .updatedAt(user.getUpdatedAt())
                .lastLoginAt(user.getLastLoginAt());
        if (includeRoles) {
            builder.roles(user.getRoles());
        }
        return builder.build();
    }
    /**
     * 获取当前登录用户信息
     *
     * @param username 当前登录用户名
     * @return 用户详细信息
     */
    @Override
    @Transactional(readOnly = true)
    public UserVO getCurrentUser(String username) {
        User user = getUserByUsername(username);
        // 创建基本的UserVO（不包含角色信息）
        UserVO.UserVOBuilder builder = UserVO.builder()
                .id(user.getId())
                .username(user.getUsername())
                .email(user.getEmail())
                .phone(user.getPhone())
                .avatar(user.getAvatar())
                .nickname(user.getNickname())
                .status(user.getStatus())
                .institutionId(user.getInstitutionId())
                .createdAt(user.getCreatedAt())
                .updatedAt(user.getUpdatedAt())
                .lastLoginAt(user.getLastLoginAt());
        // 从SecurityContext获取当前用户的角色信息
        org.springframework.security.core.Authentication authentication = 
            org.springframework.security.core.context.SecurityContextHolder.getContext().getAuthentication();
        if (authentication != null) {
            // 直接从Authentication中获取角色信息
            Set<Role> roles = authentication.getAuthorities().stream()
                .filter(authority -> authority.getAuthority().startsWith("ROLE_"))
                .map(authority -> {
                    String roleName = authority.getAuthority().substring(5); // 去掉"ROLE_"前缀
                    return Role.builder()
                            .name(roleName)
                            .code(roleName)
                            .build();
                })
                .collect(java.util.stream.Collectors.toSet());
            builder.roles(roles);
        }
        return builder.build();
    }
    /**
     * 更新当前用户个人信息
     *
     * @param username 当前登录用户名
     * @param nickname 昵称
     * @param phone 手机号
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO updateCurrentUserProfile(String username, String nickname, String phone) {
        User user = getUserByUsername(username);
        // 检查手机号是否已被其他用户使用
        if (StringUtils.hasText(phone) && !phone.equals(user.getPhone()) && existsByPhone(phone)) {
            throw new BusinessException("手机号已存在");
        }
        // 更新用户信息
        if (StringUtils.hasText(nickname)) {
            user.setNickname(nickname);
        }
        if (StringUtils.hasText(phone)) {
            user.setPhone(phone);
        }
        User updatedUser = userRepository.save(user);
        log.info("用户个人信息更新成功: {}", username);
        return convertToUserVO(updatedUser);
    }
    /**
     * 修改当前用户密码
     *
     * @param username 当前登录用户名
     * @param oldPassword 旧密码
     * @param newPassword 新密码
     * @return 是否修改成功
     */
    @Override
    @Transactional
    public boolean changePassword(String username, String oldPassword, String newPassword) {
        User user = getUserByUsername(username);
        // 验证旧密码
        if (!passwordEncoder.matches(oldPassword, user.getPassword())) {
            throw new BusinessException("旧密码不正确");
        }
        // 验证新旧密码不能相同
        if (passwordEncoder.matches(newPassword, user.getPassword())) {
            throw new BusinessException("新密码不能与旧密码相同");
        }
        // 更新密码
        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);
        log.info("用户密码修改成功: {}", username);
        return true;
    }
    /**
     * 更新当前用户头像
     *
     * @param username 当前登录用户名
     * @param avatarUrl 头像URL
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO updateAvatar(String username, String avatarUrl) {
        User user = getUserByUsername(username);
        // 获取旧头像URL
        String oldAvatarUrl = user.getAvatar();
        // 更新头像
        user.setAvatar(avatarUrl);
        User updatedUser = userRepository.save(user);
        log.info("用户头像更新成功: {}", username);
        // 删除旧头像
        if (oldAvatarUrl != null && !oldAvatarUrl.isEmpty()) {
            try {
                // 从URL中提取对象名
                String objectName = extractObjectNameFromUrl(oldAvatarUrl);
                if (objectName != null) {
                    boolean deleted = minioService.deleteFile(objectName);
                    if (deleted) {
                        log.info("删除旧头像成功: {}", objectName);
                    } else {
                        log.warn("删除旧头像失败: {}", objectName);
                    }
                }
            } catch (Exception e) {
                log.error("删除旧头像出错: {}", e.getMessage(), e);
                // 继续执行，不影响头像更新
            }
        }
        return convertToUserVO(updatedUser);
    }
    /**
     * 从URL中提取对象名
     * 例如：http://localhost:8999/media/avatars/username/uuid-filename.jpg
     * 提取为：avatars/username/uuid-filename.jpg
     */
    private String extractObjectNameFromUrl(String url) {
        if (url == null || url.isEmpty()) {
            return null;
        }
        try {
            // 查找桶名在URL中的位置
            String bucketName = "media"; // MinIO配置中的桶名
            int bucketIndex = url.indexOf("/" + bucketName + "/");
            if (bucketIndex != -1) {
                // +桶名长度+2，是为了跳过"/桶名/"
                return url.substring(bucketIndex + bucketName.length() + 2);
            }
            // 如果使用特殊格式，尝试直接从路径中提取
            String[] parts = url.split("/");
            if (parts.length >= 2) {
                // 假设最后两部分是路径，如：avatars/username/uuid-filename.jpg
                return String.join("/", parts[parts.length - 3], parts[parts.length - 2], parts[parts.length - 1]);
            }
            log.warn("无法从URL中提取对象名: {}", url);
            return null;
        } catch (Exception e) {
            log.error("提取对象名出错: {}", e.getMessage());
            return null;
        }
    }
    /**
     * 上传并更新用户头像
     */
    @Override
    @Transactional
    public Map<String, String> uploadAndUpdateAvatar(String username, MultipartFile file) throws IOException {
        // 检查文件类型
        String contentType = file.getContentType();
        if (contentType == null || !contentType.startsWith("image/")) {
            throw new BusinessException(400, "只支持上传图片文件");
        }
        // 检查文件大小（最大2MB）
        if (file.getSize() > 2 * 1024 * 1024) {
            throw new BusinessException(400, "文件大小不能超过2MB");
        }
        // 生成唯一的对象名
        String objectName = "avatars/" + username + "/" + UUID.randomUUID() + "-" + file.getOriginalFilename();
        // 上传到MinIO
        String avatarUrl = minioService.uploadFile(objectName, file.getInputStream(), file.getContentType());
        // 更新用户头像
        updateAvatar(username, avatarUrl);
        Map<String, String> result = new HashMap<>();
        result.put("avatarUrl", avatarUrl);
        return result;
    }
    /**
     * 更新当前用户邮箱
     *
     * @param username 当前登录用户名
     * @param newEmail 新邮箱
     * @param emailCode 邮箱验证码
     * @param password 当前密码 (用于安全验证)
     * @return 更新后的用户信息
     */
    @Override
    @Transactional
    public UserVO updateEmail(String username, String newEmail, String emailCode, String password) {
        User user = getUserByUsername(username);
        // 验证用户密码
        if (!passwordEncoder.matches(password, user.getPassword())) {
            throw new BusinessException("密码不正确");
        }
        // 检查邮箱是否已被其他用户使用
        if (existsByEmail(newEmail)) {
            throw new BusinessException("邮箱已存在");
        }
        // 验证邮箱验证码
        boolean isValid = emailService.validateVerificationCode(newEmail, emailCode);
        if (!isValid) {
            throw new BusinessException("邮箱验证码不正确或已过期");
        }
        // 更新邮箱
        user.setEmail(newEmail);
        User updatedUser = userRepository.save(user);
        log.info("用户邮箱更新成功: {}, 新邮箱: {}", username, newEmail);
        return convertToUserVO(updatedUser);
    }
    /**
     * 获取用户基本信息（用于前端展示）
     *
     * @param userId 用户ID
     * @return 用户基本信息
     */
    @Override
    @Transactional(readOnly = true)
    public UserVO getBasicUserInfo(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        // 创建基本信息VO，不包含敏感信息
        return UserVO.builder()
                .id(user.getId())
                .username(user.getUsername())
                .nickname(user.getNickname())
                .avatar(user.getAvatar())
                .build();
    }
    /**
     * 更新用户角色
     *
     * @param userId 用户ID
     * @param roleIds 角色ID列表
     */
    @Override
    @Transactional
    public void updateUserRoles(Long userId, Set<Long> roleIds) {
        // 获取用户
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        // 获取角色
        Set<Role> roles = roleIds.stream()
                .map(roleId -> roleRepository.findById(roleId)
                        .orElseThrow(() -> new BusinessException("角色不存在: " + roleId)))
                .collect(Collectors.toSet());
        // 更新用户角色
        user.setRoles(roles);
        userRepository.save(user);
        // 使该用户的所有token失效
        tokenBlacklistService.invalidateUserTokens(user.getUsername());
        log.info("用户 {} 的角色已更新，所有token已失效", user.getUsername());
    }
    /**
     * 更新用户密码
     *
     * @param userId 用户ID
     * @param oldPassword 旧密码
     * @param newPassword 新密码
     */
    @Override
    @Transactional
    public void updatePassword(Long userId, String oldPassword, String newPassword) {
        // 获取用户
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new BusinessException("用户不存在"));
        // 验证旧密码
        if (!passwordEncoder.matches(oldPassword, user.getPassword())) {
            throw new BusinessException("旧密码错误");
        }
        // 更新密码
        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);
        // 使该用户的所有token失效
        tokenBlacklistService.invalidateUserTokens(user.getUsername());
        log.info("用户 {} 的密码已更新，所有token已失效", user.getUsername());
    }
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/InstitutionAuthService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.InstitutionRegisterDTO;
/**
 * 机构用户注册服务接口
 */
public interface InstitutionAuthService {
    /**
     * 使用机构注册码注册用户
     *
     * @param registerDTO 注册参数
     */
    void registerWithInstitutionCode(InstitutionRegisterDTO registerDTO);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/InstitutionService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplyDTO;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplicationQueryDTO;
import com.zhangziqi.online_course_mine.model.vo.InstitutionApplicationVO;
import com.zhangziqi.online_course_mine.model.vo.InstitutionVO;
import org.springframework.data.domain.Page;
/**
 * 机构服务接口
 */
public interface InstitutionService {
    /**
     * 申请创建机构
     *
     * @param applyDTO 申请参数
     * @return 申请ID
     */
    String applyInstitution(InstitutionApplyDTO applyDTO);
    /**
     * 查询申请状态
     *
     * @param applicationId 申请ID
     * @param email 联系邮箱
     * @return 申请状态
     */
    InstitutionApplicationVO getApplicationStatus(String applicationId, String email);
    /**
     * 分页查询机构申请
     *
     * @param queryDTO 查询参数
     * @return 申请分页
     */
    Page<InstitutionApplicationVO> getApplications(InstitutionApplicationQueryDTO queryDTO);
    /**
     * 查询申请详情
     *
     * @param id 申请ID
     * @return 申请详情
     */
    InstitutionApplicationVO getApplicationDetail(Long id);
    /**
     * 审核通过申请
     *
     * @param id 申请ID
     * @param reviewerUsername 审核人用户名
     * @return 机构信息
     */
    InstitutionVO approveApplication(Long id, String reviewerUsername);
    /**
     * 拒绝申请
     *
     * @param id 申请ID
     * @param reason 拒绝原因
     * @param reviewerUsername 审核人用户名
     */
    void rejectApplication(Long id, String reason, String reviewerUsername);
    /**
     * 获取机构注册码
     *
     * @param username 用户名
     * @return 注册码
     */
    String getInstitutionRegisterCode(String username);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/MediaService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.media.MediaUploadInitDTO;
import com.zhangziqi.online_course_mine.model.dto.media.PartCompletionDTO;
import com.zhangziqi.online_course_mine.model.dto.media.UploadInitiationVO;
import com.zhangziqi.online_course_mine.model.dto.media.UploadStatusVO;
import com.zhangziqi.online_course_mine.model.vo.MediaVO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
/**
 * 媒体服务接口
 */
public interface MediaService {
    /**
     * 初始化上传（返回所有分片的预签名URL）
     *
     * @param dto 上传初始化参数
     * @param institutionId 机构ID
     * @param uploaderId 上传者ID
     * @return 上传初始化结果
     */
    UploadInitiationVO initiateUpload(
            MediaUploadInitDTO dto, Long institutionId, Long uploaderId);
    /**
     * 获取上传状态
     *
     * @param mediaId 媒体ID
     * @param institutionId 机构ID
     * @return 上传状态
     */
    UploadStatusVO getUploadStatus(Long mediaId, Long institutionId);
    /**
     * 通知分片上传完成
     *
     * @param mediaId 媒体ID
     * @param dto 分片完成信息
     * @param institutionId 机构ID
     * @return 更新后的上传状态
     */
    UploadStatusVO notifyPartCompleted(
            Long mediaId, PartCompletionDTO dto, Long institutionId);
    /**
     * 完成上传
     *
     * @param mediaId 媒体ID
     * @param institutionId 机构ID
     * @return 媒体信息
     */
    MediaVO completeUpload(Long mediaId, Long institutionId);
    /**
     * 取消上传
     *
     * @param mediaId 媒体ID
     * @param institutionId 机构ID
     */
    void cancelUpload(Long mediaId, Long institutionId);
    /**
     * 获取媒体访问URL
     *
     * @param mediaId 媒体ID
     * @param institutionId 机构ID
     * @param expirationMinutes URL有效期（分钟）
     * @return 预签名URL
     */
    String getMediaAccessUrl(Long mediaId, Long institutionId, Long expirationMinutes);
    /**
     * 获取媒体信息
     *
     * @param mediaId 媒体ID
     * @param institutionId 机构ID
     * @return 媒体信息
     */
    MediaVO getMediaInfo(Long mediaId, Long institutionId);
    /**
     * 分页获取机构媒体列表
     *
     * @param institutionId 机构ID
     * @param pageable 分页参数
     * @return 媒体列表
     */
    Page<MediaVO> getMediaList(Long institutionId, Pageable pageable);
    /**
     * 请求继续上传（获取未完成分片的预签名URL）
     *
     * @param mediaId 媒体ID
     * @param institutionId 机构ID
     * @return 上传初始化信息
     */
    UploadInitiationVO resumeUpload(Long mediaId, Long institutionId);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/MinioService.java">
package com.zhangziqi.online_course_mine.service;
import java.io.InputStream;
import java.util.List;
public interface MinioService {
    /**
     * 上传文件
     * 
     * @param objectName 对象名称
     * @param inputStream 文件输入流
     * @param contentType 文件类型
     * @return 文件访问URL
     */
    String uploadFile(String objectName, InputStream inputStream, String contentType);
    /**
     * 删除文件
     * 
     * @param objectName 对象名称
     * @return 是否删除成功
     */
    boolean deleteFile(String objectName);
    /**
     * 获取文件URL
     * 
     * @param objectName 对象名称
     * @return 文件访问URL
     */
    String getFileUrl(String objectName);
    /**
     * 列出所有文件
     * 
     * @return 文件名列表
     */
    List<String> listAllFiles();
    /**
     * 检查存储桶是否存在，不存在则创建
     */
    void checkAndCreateBucket();
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/PermissionService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.PermissionDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.vo.PermissionVO;
import java.util.List;
/**
 * 权限服务接口
 */
public interface PermissionService {
    /**
     * 获取权限列表
     *
     * @return 权限列表
     */
    List<PermissionVO> getPermissionList();
    /**
     * 获取权限详情
     *
     * @param id 权限ID
     * @return 权限详情
     */
    PermissionVO getPermissionById(Long id);
    /**
     * 获取权限（根据编码）
     *
     * @param code 权限编码
     * @return 权限
     */
    Permission getPermissionByCode(String code);
    /**
     * 创建权限
     *
     * @param permissionDTO 权限信息
     * @return 创建后的权限信息
     */
    PermissionVO createPermission(PermissionDTO permissionDTO);
    /**
     * 更新权限
     *
     * @param id 权限ID
     * @param permissionDTO 权限信息
     * @return 更新后的权限信息
     */
    PermissionVO updatePermission(Long id, PermissionDTO permissionDTO);
    /**
     * 删除权限
     *
     * @param id 权限ID
     */
    void deletePermission(Long id);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/RoleService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.RoleDTO;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.vo.RoleVO;
import java.util.List;
import java.util.Set;
/**
 * 角色服务接口
 */
public interface RoleService {
    /**
     * 获取角色列表
     *
     * @return 角色列表
     */
    List<RoleVO> getRoleList();
    /**
     * 获取角色详情
     *
     * @param id 角色ID
     * @return 角色详情
     */
    RoleVO getRoleById(Long id);
    /**
     * 获取角色（根据编码）
     *
     * @param code 角色编码
     * @return 角色
     */
    Role getRoleByCode(String code);
    /**
     * 创建角色
     *
     * @param roleDTO 角色信息
     * @return 创建后的角色信息
     */
    RoleVO createRole(RoleDTO roleDTO);
    /**
     * 更新角色
     *
     * @param id 角色ID
     * @param roleDTO 角色信息
     * @return 更新后的角色信息
     */
    RoleVO updateRole(Long id, RoleDTO roleDTO);
    /**
     * 删除角色
     *
     * @param id 角色ID
     */
    void deleteRole(Long id);
    /**
     * 给角色分配权限
     *
     * @param roleId 角色ID
     * @param permissionIds 权限ID列表
     * @return 更新后的角色信息
     */
    RoleVO assignPermissions(Long roleId, Set<Long> permissionIds);
    /**
     * 批量删除角色
     *
     * @param ids 角色ID列表
     */
    void batchDeleteRoles(List<Long> ids);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/StorageQuotaService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import com.zhangziqi.online_course_mine.model.vo.QuotaInfoVO;
import java.time.LocalDateTime;
import java.util.List;
/**
 * 存储配额服务接口
 * 用于管理机构的存储配额
 */
public interface StorageQuotaService {
    /**
     * 检查是否有足够的配额
     * 
     * @param institutionId 机构ID
     * @param quotaType 配额类型
     * @param requiredSize 所需空间大小（字节）
     * @return 是否有足够配额
     */
    boolean hasEnoughQuota(Long institutionId, QuotaType quotaType, Long requiredSize);
    /**
     * 更新已使用配额
     * 
     * @param institutionId 机构ID
     * @param quotaType 配额类型
     * @param deltaSize 变化量（字节，正数为增加，负数为减少）
     */
    void updateUsedQuota(Long institutionId, QuotaType quotaType, Long deltaSize);
    /**
     * 获取机构配额信息
     * 
     * @param institutionId 机构ID
     * @return 配额信息
     */
    QuotaInfoVO getQuotaInfo(Long institutionId);
    /**
     * 获取机构所有类型的配额
     *
     * @param institutionId 机构ID
     * @return 配额列表
     */
    List<QuotaInfoVO> getAllQuotas(Long institutionId);
    /**
     * 设置配额大小
     *
     * @param institutionId 机构ID
     * @param type 配额类型
     * @param totalQuota 总配额(字节)
     * @param expiresAt 过期时间(可选)
     */
    void setQuota(Long institutionId, QuotaType type, Long totalQuota, LocalDateTime expiresAt);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/service/UserService.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.dto.UserDTO;
import com.zhangziqi.online_course_mine.model.dto.UserQueryDTO;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import org.springframework.data.domain.Page;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Set;
/**
 * 用户服务接口
 */
public interface UserService {
    /**
     * 注册用户
     *
     * @param registerDTO 注册请求
     * @return 用户信息
     */
    User register(RegisterDTO registerDTO);
    /**
     * 根据用户名查询用户
     *
     * @param username 用户名
     * @return 用户信息
     */
    User getUserByUsername(String username);
    /**
     * 检查用户名是否存在
     *
     * @param username 用户名
     * @return 是否存在
     */
    boolean existsByUsername(String username);
    /**
     * 检查邮箱是否存在
     *
     * @param email 邮箱
     * @return 是否存在
     */
    boolean existsByEmail(String email);
    /**
     * 检查手机号是否存在
     *
     * @param phone 手机号
     * @return 是否存在
     */
    boolean existsByPhone(String phone);
    /**
     * 更新最后登录时间
     *
     * @param username 用户名
     */
    void updateLastLoginTime(String username);
    /**
     * 分页查询用户列表
     *
     * @param queryDTO 查询条件
     * @return 用户列表（分页）
     */
    Page<UserVO> getUserList(UserQueryDTO queryDTO);
    /**
     * 获取用户详情
     *
     * @param id 用户ID
     * @return 用户详情
     */
    UserVO getUserById(Long id);
    /**
     * 创建用户
     *
     * @param userDTO 用户信息
     * @return 创建后的用户信息
     */
    UserVO createUser(UserDTO userDTO);
    /**
     * 更新用户
     *
     * @param id 用户ID
     * @param userDTO 用户信息
     * @return 更新后的用户信息
     */
    UserVO updateUser(Long id, UserDTO userDTO);
    /**
     * 删除用户
     *
     * @param id 用户ID
     */
    void deleteUser(Long id);
    /**
     * 更新用户角色
     *
     * @param userId 用户ID
     * @param roleIds 角色ID列表
     */
    @Transactional
    void updateUserRoles(Long userId, Set<Long> roleIds);
    /**
     * 更新用户状态
     *
     * @param id 用户ID
     * @param status 状态
     * @return 更新后的用户信息
     */
    @Transactional
    UserVO updateUserStatus(Long id, Integer status);
    /**
     * 给用户分配角色
     *
     * @param userId 用户ID
     * @param roleIds 角色ID列表
     * @return 更新后的用户信息
     */
    UserVO assignRoles(Long userId, Set<Long> roleIds);
    /**
     * 批量删除用户
     *
     * @param ids 用户ID列表
     */
    void batchDeleteUsers(List<Long> ids);
    /**
     * 获取当前登录用户信息
     *
     * @param username 当前登录用户名
     * @return 用户详细信息
     */
    UserVO getCurrentUser(String username);
    /**
     * 更新当前用户个人信息
     *
     * @param username 当前登录用户名
     * @param nickname 昵称
     * @param phone 手机号
     * @return 更新后的用户信息
     */
    UserVO updateCurrentUserProfile(String username, String nickname, String phone);
    /**
     * 修改当前用户密码
     *
     * @param username 当前登录用户名
     * @param oldPassword 旧密码
     * @param newPassword 新密码
     * @return 是否修改成功
     */
    boolean changePassword(String username, String oldPassword, String newPassword);
    /**
     * 更新当前用户头像
     *
     * @param username 当前登录用户名
     * @param avatarUrl 头像URL
     * @return 更新后的用户信息
     */
    UserVO updateAvatar(String username, String avatarUrl);
    /**
     * 上传并更新用户头像
     *
     * @param username 当前登录用户名
     * @param file 头像文件
     * @return 头像URL和用户信息的映射
     * @throws IOException 文件处理异常
     */
    Map<String, String> uploadAndUpdateAvatar(String username, MultipartFile file) throws IOException;
    /**
     * 更新当前用户邮箱
     *
     * @param username 当前登录用户名
     * @param newEmail 新邮箱
     * @param emailCode 邮箱验证码
     * @param password 当前密码 (用于安全验证)
     * @return 更新后的用户信息
     */
    UserVO updateEmail(String username, String newEmail, String emailCode, String password);
    /**
     * 获取用户基本信息（用于前端展示）
     *
     * @param userId 用户ID
     * @return 用户基本信息
     */
    UserVO getBasicUserInfo(Long userId);
    /**
     * 更新用户密码
     *
     * @param userId 用户ID
     * @param oldPassword 旧密码
     * @param newPassword 新密码
     */
    @Transactional
    void updatePassword(Long userId, String oldPassword, String newPassword);
}
</file>

<file path="src/main/java/com/zhangziqi/online_course_mine/util/DataInitializer.java">
package com.zhangziqi.online_course_mine.util;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.RoleEnum;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Profile;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
/**
 * 数据初始化
 * 用于初始化角色和权限数据
 */
@Slf4j
@Component
@RequiredArgsConstructor
@Profile({"dev", "test"}) // 仅在开发和测试环境下运行
public class DataInitializer {
    private final RoleRepository roleRepository;
    private final PermissionRepository permissionRepository;
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    /**
     * 初始化数据
     */
    @PostConstruct
    @Transactional
    public void init() {
        log.info("开始初始化角色和权限数据");
        // 初始化角色
        initRoles();
        // 初始化权限
        initPermissions();
        // 初始化角色权限关系
        initRolePermissions();
        // 初始化管理员
        initAdmin();
        log.info("角色和权限数据初始化完成");
    }
    /**
     * 初始化角色
     */
    private void initRoles() {
        // 检查角色是否已存在
        if (roleRepository.count() > 0) {
            log.info("角色数据已存在，跳过初始化");
            return;
        }
        // 创建角色
        List<Role> roles = (List<Role>) Arrays.stream(RoleEnum.values())
                .map(roleEnum -> Role.builder()
                        .name(roleEnum.getName())
                        .code(roleEnum.getCode())
                        .description(roleEnum.getName() + "角色")
                        .build())
                .toList();
        // 保存角色
        roleRepository.saveAll(roles);
        log.info("角色数据初始化完成，共{}条", roles.size());
    }
    /**
     * 初始化权限
     */
    private void initPermissions() {
        // 检查权限是否已存在
        if (permissionRepository.count() > 0) {
            log.info("权限数据已存在，跳过初始化");
            return;
        }
        // 创建权限
        List<Permission> permissions = Arrays.asList(
                Permission.builder().name("用户查询").code("user:read").url("/api/users/**").method("GET").build(),
                Permission.builder().name("用户创建").code("user:create").url("/api/users").method("POST").build(),
                Permission.builder().name("用户修改").code("user:update").url("/api/users/**").method("PUT").build(),
                Permission.builder().name("用户删除").code("user:delete").url("/api/users/**").method("DELETE").build(),
                Permission.builder().name("角色查询").code("role:read").url("/api/roles/**").method("GET").build(),
                Permission.builder().name("角色创建").code("role:create").url("/api/roles").method("POST").build(),
                Permission.builder().name("角色修改").code("role:update").url("/api/roles/**").method("PUT").build(),
                Permission.builder().name("角色删除").code("role:delete").url("/api/roles/**").method("DELETE").build(),
                Permission.builder().name("权限查询").code("permission:read").url("/api/permissions/**").method("GET").build(),
                Permission.builder().name("权限创建").code("permission:create").url("/api/permissions").method("POST").build(),
                Permission.builder().name("权限修改").code("permission:update").url("/api/permissions/**").method("PUT").build(),
                Permission.builder().name("权限删除").code("permission:delete").url("/api/permissions/**").method("DELETE").build(),
                Permission.builder().name("课程查询").code("course:read").url("/api/courses/**").method("GET").build(),
                Permission.builder().name("课程创建").code("course:create").url("/api/courses").method("POST").build(),
                Permission.builder().name("课程修改").code("course:update").url("/api/courses/**").method("PUT").build(),
                Permission.builder().name("课程删除").code("course:delete").url("/api/courses/**").method("DELETE").build(),
                Permission.builder().name("课程审核").code("course:review").url("/api/courses/*/review").method("POST").build()
        );
        // 保存权限
        permissionRepository.saveAll(permissions);
        log.info("权限数据初始化完成，共{}条", permissions.size());
    }
    /**
     * 初始化角色权限关系
     */
    private void initRolePermissions() {
        // 获取角色
        Role adminRole = roleRepository.findByCode(RoleEnum.ADMIN.getCode())
                .orElseThrow(() -> new RuntimeException("管理员角色不存在"));
        Role userRole = roleRepository.findByCode(RoleEnum.USER.getCode())
                .orElseThrow(() -> new RuntimeException("普通用户角色不存在"));
        Role reviewerRole = roleRepository.findByCode(RoleEnum.REVIEWER.getCode())
                .orElseThrow(() -> new RuntimeException("审核人员角色不存在"));
        Role institutionRole = roleRepository.findByCode(RoleEnum.INSTITUTION.getCode())
                .orElseThrow(() -> new RuntimeException("机构用户角色不存在"));
        // 获取所有权限
        List<Permission> allPermissions = permissionRepository.findAll();
        if (allPermissions.isEmpty()) {
            log.warn("权限数据为空，跳过初始化角色权限关系");
            return;
        }
        // 如果角色已经有权限，则跳过
        if (!adminRole.getPermissions().isEmpty()) {
            log.info("角色权限关系已存在，跳过初始化");
            return;
        }
        // 设置管理员角色的权限（所有权限）
        adminRole.setPermissions(new HashSet<>(allPermissions));
        // 设置普通用户角色的权限（查询权限）
        userRole.setPermissions(allPermissions.stream()
                .filter(permission -> permission.getCode().endsWith(":read"))
                .filter(permission -> !permission.getCode().startsWith("role:") && !permission.getCode().startsWith("permission:"))
                .collect(java.util.stream.Collectors.toSet()));
        // 设置审核人员角色的权限（查询权限 + 课程审核权限）
        reviewerRole.setPermissions(allPermissions.stream()
                .filter(permission -> permission.getCode().endsWith(":read") || permission.getCode().equals("course:review"))
                .collect(java.util.stream.Collectors.toSet()));
        // 设置机构用户角色的权限（查询权限 + 课程管理权限）
        institutionRole.setPermissions(allPermissions.stream()
                .filter(permission -> permission.getCode().endsWith(":read") || 
                                      permission.getCode().startsWith("course:"))
                .collect(java.util.stream.Collectors.toSet()));
        // 保存角色
        roleRepository.saveAll(Arrays.asList(adminRole, userRole, reviewerRole, institutionRole));
        log.info("角色权限关系初始化完成");
    }
    /**
     * 初始化管理员
     */
    private void initAdmin() {
        // 检查管理员是否已存在
        if (userRepository.findByUsername("admin").isPresent()) {
            log.info("管理员已存在，跳过初始化");
            return;
        }
        // 获取管理员角色
        Role adminRole = roleRepository.findByCode(RoleEnum.ADMIN.getCode())
                .orElseThrow(() -> new RuntimeException("管理员角色不存在"));
        // 创建管理员
        User admin = User.builder()
                .username("admin")
                .password(passwordEncoder.encode("admin123"))
                .email("admin@example.com")
                .status(1)
                .roles(Collections.singleton(adminRole))
                .build();
        // 保存管理员
        userRepository.save(admin);
        log.info("管理员初始化完成");
    }
}
</file>

<file path="src/main/resources/application-dev.yml">
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/online_course?useSSL=false&serverTimezone=Asia/Shanghai&characterEncoding=utf-8
    username: root
    password: Zzq664450274
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.MySQL8Dialect
  data:
    redis:
      port: 6379
      host: localhost
      database: 0
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
  mail:
    # 163邮箱的地址为smtp.163.com，直接填写即可
    host: smtp.163.com
    # 你申请的163邮箱
    username: madpsycho@163.com
    # 注意密码是在开启smtp/pop3时自动生成的，记得保存一下，不然就找不到了
    password: PFVIMQPDCKMNWZHI
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          from: madpsycho@163.com
    default-encoding: UTF-8
    protocol: smtp
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    com.zhangziqi: DEBUG
jwt:
  secret: ZGV2and0c2VjcmV0a2V5aGVyZW1ha2VpdGxvbmdhbmRzZWN1cmVhdGxlYXN0MjU2Yml0cw==
  access-token-expiration: 3600000  # 1小时
  refresh-token-expiration: 604800000 # 7天
server:
  port: 8080 
# MinIO配置
minio:
  endpoint: http://localhost:8999
  accessKey: double2and9
  secretKey: Zzq664450274
  bucketName: media
# AWS S3配置
aws:
  s3:
    endpoint: http://localhost:8999
    region: us-east-1
    access-key: double2and9
    secret-key: Zzq664450274
    bucket-name: media
    path-style-access: true
</file>

<file path="src/main/resources/application-test.yml">
spring:
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password: 
    driver-class-name: org.h2.Driver
  h2:
    console:
      enabled: true
      path: /h2-console
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.H2Dialect
  data:
    redis:
      host: localhost
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-wait: -1
          max-idle: 8
          min-idle: 0
  mail:
    host: smtp.qq.com
    port: 587
    username: test@qq.com
    password: test-password
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          from: test@qq.com
    default-encoding: UTF-8
    protocol: smtp
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    com.zhangziqi: DEBUG
jwt:
  secret: dGVzdGp3dHNlY3JldGtleWhlcmVtYWtlaXRsb25nYW5kc2VjdXJlYXRsZWFzdDI1NmJpdHM=
  access-token-expiration: 3600000  # 1小时
  refresh-token-expiration: 604800000 # 7天
server:
  port: 8081 
# MinIO配置
minio:
  endpoint: http://localhost:8999
  accessKey: double2and9
  secretKey: Zzq664450274
  bucketName: media
# AWS S3配置
aws:
  s3:
    endpoint: http://localhost:8999
    region: us-east-1
    access-key: double2and9
    secret-key: Zzq664450274
    bucket-name: media
    path-style-access: true
</file>

<file path="src/main/resources/application.yml">
spring:
  profiles:
    active: dev
</file>

<file path="src/main/resources/templates/email/application-approved.html">
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>机构入驻申请已通过</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 20px;
            margin-top: 20px;
        }
        .code {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
            letter-spacing: 2px;
            text-align: center;
            padding: 10px;
            background-color: #e9ecef;
            border-radius: 3px;
            margin: 20px 0;
        }
        .important {
            font-weight: bold;
            color: #28a745;
        }
        .warning {
            color: #dc3545;
            font-size: 14px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>机构入驻申请已通过</h2>
        <p>尊敬的用户，</p>
        <p>恭喜您！您的机构 <span class="important" th:text="${institutionName}">示例教育机构</span> 入驻申请已通过审核。</p>
        <p>您的机构注册码如下：</p>
        <div class="code" th:text="${registerCode}">ABC12345</div>
        <p><strong>请妥善保管此注册码，您可以将此注册码分享给贵机构的成员。他们可以使用此注册码注册成为机构用户。</strong></p>
        <p>机构用户注册时：</p>
        <ol>
            <li>访问注册页面选择"机构用户注册"</li>
            <li>填写个人信息及此注册码</li>
            <li>完成验证后即可成为贵机构的用户</li>
        </ol>
        <p class="warning">
            注意：请仅将注册码分享给您的机构成员，避免外泄导致非授权人员加入您的机构。
        </p>
        <p>
            如有任何问题，请随时联系我们的客服团队。<br>
            祝您使用愉快！<br>
            在线课程平台团队
        </p>
    </div>
</body>
</html>
</file>

<file path="src/main/resources/templates/email/application-confirmation.html">
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>机构入驻申请确认</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 20px;
            margin-top: 20px;
        }
        .info {
            font-size: 16px;
            background-color: #e9ecef;
            border-radius: 3px;
            padding: 15px;
            margin: 20px 0;
        }
        .highlight {
            font-weight: bold;
            color: #007bff;
        }
        .warning {
            color: #dc3545;
            font-size: 14px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>机构入驻申请确认</h2>
        <p>您好！</p>
        <p>我们已收到您的机构入驻申请，您的申请信息如下：</p>
        <div class="info">
            <p><strong>机构名称：</strong> <span th:text="${institutionName}">示例教育机构</span></p>
            <p><strong>申请编号：</strong> <span class="highlight" th:text="${applicationId}">APP123456</span></p>
            <p><strong>申请时间：</strong> <span th:text="${#temporals.format(#temporals.createNow(), 'yyyy-MM-dd HH:mm:ss')}">2023-03-15 10:30:00</span></p>
        </div>
        <p>我们将尽快对您的申请进行审核，请保留此申请编号以便查询申请状态。</p>
        <p>您可以通过以下信息查询申请状态：</p>
        <ul>
            <li>申请编号：<span class="highlight" th:text="${applicationId}">APP123456</span></li>
            <li>联系邮箱：您提交申请时使用的邮箱</li>
        </ul>
        <p class="warning">
            注意：请勿将申请编号泄露给他人，如果这不是您的操作，请忽略此邮件。
        </p>
        <p>
            感谢您对我们平台的信任与支持！<br>
            在线课程平台团队
        </p>
    </div>
</body>
</html>
</file>

<file path="src/main/resources/templates/email/application-rejected.html">
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>机构入驻申请未通过</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 20px;
            margin-top: 20px;
        }
        .reason {
            font-size: 16px;
            background-color: #e9ecef;
            border-radius: 3px;
            padding: 15px;
            margin: 20px 0;
        }
        .institution {
            font-weight: bold;
            color: #007bff;
        }
        .note {
            color: #28a745;
            font-size: 14px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>机构入驻申请未通过</h2>
        <p>尊敬的用户，</p>
        <p>很遗憾地通知您，您的机构 <span class="institution" th:text="${institutionName}">示例教育机构</span> 入驻申请未能通过我们的审核。</p>
        <p>未通过原因：</p>
        <div class="reason">
            <p th:text="${reason}">提供的机构资质材料不完整，请补充XXX证明材料。</p>
        </div>
        <p>您可以根据以上原因修改信息后重新提交申请。</p>
        <p class="note">
            如需帮助或有任何疑问，请通过以下方式联系我们的客服团队：<br>
            - 客服电话：400-XXX-XXXX<br>
            - 客服邮箱：support@example.com
        </p>
        <p>
            感谢您的理解与支持！<br>
            在线课程平台团队
        </p>
    </div>
</body>
</html>
</file>

<file path="src/main/resources/templates/email/email-update-code.html">
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>邮箱更新验证码</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 20px;
            margin-top: 20px;
        }
        .code {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
            letter-spacing: 2px;
            text-align: center;
            padding: 10px;
            background-color: #e9ecef;
            border-radius: 3px;
            margin: 20px 0;
        }
        .warning {
            color: #dc3545;
            font-size: 14px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>邮箱更新验证码</h2>
        <p>您好！</p>
        <p>您正在进行邮箱更新操作，以下是您的验证码：</p>
        <div class="code" th:text="${code}">123456</div>
        <p>此验证码将在 <span th:text="${expirationMinutes}">5</span> 分钟后失效。</p>
        <p class="warning">
            注意：如果这不是您的操作，请忽略此邮件并考虑修改您的账户密码以确保账户安全。
        </p>
        <p>
            祝您使用愉快！<br>
            在线课程平台团队
        </p>
    </div>
</body>
</html>
</file>

<file path="src/main/resources/templates/email/verification-code.html">
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>邮箱验证码</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 20px;
            margin-top: 20px;
        }
        .code {
            font-size: 24px;
            font-weight: bold;
            color: #007bff;
            letter-spacing: 2px;
            text-align: center;
            padding: 10px;
            background-color: #e9ecef;
            border-radius: 3px;
            margin: 20px 0;
        }
        .warning {
            color: #dc3545;
            font-size: 14px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>邮箱验证码</h2>
        <p>您好！</p>
        <p>感谢您注册在线课程平台。您的验证码是：</p>
        <div class="code" th:text="${code}">123456</div>
        <p>此验证码将在 <span th:text="${expirationMinutes}">5</span> 分钟后失效。</p>
        <p class="warning">
            注意：请勿将验证码泄露给他人。如果这不是您的操作，请忽略此邮件。
        </p>
        <p>
            祝您使用愉快！<br>
            在线课程平台团队
        </p>
    </div>
</body>
</html>
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/config/TestSecurityConfig.java">
package com.zhangziqi.online_course_mine.config;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import com.zhangziqi.online_course_mine.security.jwt.JwtAuthenticationFilter;
import com.zhangziqi.online_course_mine.security.jwt.JwtTokenProvider;
import com.zhangziqi.online_course_mine.security.jwt.TokenBlacklistService;
import org.mockito.ArgumentMatchers;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.Profile;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
/**
 * 测试环境安全配置
 * 用于集成测试，提供尽可能接近生产环境的配置
 */
@TestConfiguration
@EnableWebSecurity
@Profile("test") // 确保只在测试环境下激活
public class TestSecurityConfig {
    @Bean
    @Primary
    public JwtTokenProvider jwtTokenProvider() {
        JwtTokenProvider mockProvider = mock(JwtTokenProvider.class);
        // 可以在这里添加一些基本的行为
        when(mockProvider.validateToken(ArgumentMatchers.anyString())).thenReturn(true);
        return mockProvider;
    }
    @Bean
    @Primary
    public TokenBlacklistService tokenBlacklistService() {
        TokenBlacklistService mockService = mock(TokenBlacklistService.class);
        // 可以在这里添加一些基本的行为
        when(mockService.isBlacklisted(ArgumentMatchers.anyString())).thenReturn(false);
        return mockService;
    }
    @Bean
    @Primary
    public JwtConfig jwtConfig() {
        JwtConfig config = new JwtConfig();
        config.setSecret("test-secret-key-for-testing-purposes-only");
        config.setAccessTokenExpiration(3600000L); // 1小时
        config.setRefreshTokenExpiration(86400000L); // 24小时
        return config;
    }
    @Bean
    @Primary
    public AuthenticationManager authenticationManager() {
        return mock(AuthenticationManager.class);
    }
    @Bean
    @Primary
    public UserDetailsService userDetailsService() {
        // 不再使用mock实现，而是返回一个实际能查询到测试用户的UserDetailsService
        return username -> {
            // 为集成测试创建一个简单的UserDetails实现
            if ("admin_test".equals(username)) {
                return org.springframework.security.core.userdetails.User.builder()
                    .username("admin_test")
                    .password("$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG") // "password"的加密值
                    .roles("ADMIN")
                    .authorities("ROLE_ADMIN", "TEST_READ")
                    .build();
            } else if ("user_test".equals(username)) {
                return org.springframework.security.core.userdetails.User.builder()
                    .username("user_test")
                    .password("$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG") // "password"的加密值
                    .roles("USER")
                    .build();
            }
            throw new org.springframework.security.core.userdetails.UsernameNotFoundException("用户不存在: " + username);
        };
    }
    @Bean
    @Primary
    public JwtAuthenticationFilter jwtAuthenticationFilter(JwtTokenProvider tokenProvider, TokenBlacklistService blacklistService) {
        return new JwtAuthenticationFilter(tokenProvider, blacklistService);
    }
    @Bean
    @Primary
    public SecurityFilterChain securityFilterChain(HttpSecurity http, JwtAuthenticationFilter jwtAuthenticationFilter) throws Exception {
        http
            .csrf(AbstractHttpConfigurer::disable)
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/auth/**").permitAll() // 开放认证相关接口
                .anyRequest().authenticated() // 其他接口需要认证
            )
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/controller/AuthControllerTest.java">
package com.zhangziqi.online_course_mine.controller;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zhangziqi.online_course_mine.OnlineCourseMineApplication;
import com.zhangziqi.online_course_mine.model.dto.*;
import com.zhangziqi.online_course_mine.security.jwt.JwtTokenProvider;
import com.zhangziqi.online_course_mine.security.jwt.TokenBlacklistService;
import com.zhangziqi.online_course_mine.service.AuthService;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import com.zhangziqi.online_course_mine.service.EmailService;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatchers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import java.awt.image.BufferedImage;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
/**
 * 认证控制器测试
 */
@SpringBootTest
@AutoConfigureMockMvc(addFilters = false) // 禁用Spring Security过滤器
@ActiveProfiles("test") // 使用测试环境配置
public class AuthControllerTest {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;
    @MockBean
    private AuthService authService;
    @MockBean
    private CaptchaService captchaService;
    @MockBean
    private EmailService emailService;
    @MockBean
    private JwtTokenProvider jwtTokenProvider;
    @MockBean
    private TokenBlacklistService tokenBlacklistService;
    @Test
    public void testGetCaptchaKey() throws Exception {
        mockMvc.perform(get("/api/auth/captcha/key"))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data").isString());
    }
    @Test
    public void testGetCaptchaImage() throws Exception {
        // 模拟验证码服务
        BufferedImage mockImage = new BufferedImage(150, 50, BufferedImage.TYPE_INT_RGB);
        given(captchaService.generateCaptcha("test-key")).willReturn(mockImage);
        // 执行请求
        mockMvc.perform(get("/api/auth/captcha/image/{key}", "test-key"))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(header().string(HttpHeaders.CONTENT_TYPE, MediaType.IMAGE_JPEG_VALUE))
                .andExpect(header().string(HttpHeaders.CACHE_CONTROL, "no-store, no-cache, must-revalidate"));
        verify(captchaService).generateCaptcha("test-key");
    }
    @Test
    public void testSendEmailVerificationCode() throws Exception {
        // 创建邮箱验证码请求
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("test@example.com");
        emailVerificationDTO.setCaptchaKey("test-key");
        emailVerificationDTO.setCaptchaCode("1234");
        // 模拟验证码验证通过
        when(captchaService.validateCaptcha(emailVerificationDTO.getCaptchaKey(), emailVerificationDTO.getCaptchaCode()))
                .thenReturn(true);
        // 模拟生成验证码
        when(emailService.generateVerificationCode()).thenReturn("123456");
        // 执行请求
        mockMvc.perform(post("/api/auth/email-verification-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.message").value("操作成功"));
        verify(captchaService).validateCaptcha(emailVerificationDTO.getCaptchaKey(), emailVerificationDTO.getCaptchaCode());
        verify(emailService).generateVerificationCode();
        verify(emailService).sendVerificationCode(eq(emailVerificationDTO.getEmail()), any());
        verify(emailService).saveVerificationCode(eq(emailVerificationDTO.getEmail()), any());
    }
    @Test
    public void testSendEmailVerificationCodeWithInvalidCaptcha() throws Exception {
        // 创建邮箱验证码请求
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("test@example.com");
        emailVerificationDTO.setCaptchaKey("test-key");
        emailVerificationDTO.setCaptchaCode("1234");
        // 模拟验证码验证失败
        when(captchaService.validateCaptcha(emailVerificationDTO.getCaptchaKey(), emailVerificationDTO.getCaptchaCode()))
                .thenReturn(false);
        // 执行请求
        mockMvc.perform(post("/api/auth/email-verification-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(500))
                .andExpect(jsonPath("$.message").value("验证码错误"));
        verify(captchaService).validateCaptcha(emailVerificationDTO.getCaptchaKey(), emailVerificationDTO.getCaptchaCode());
        verify(emailService, never()).generateVerificationCode();
        verify(emailService, never()).sendVerificationCode(any(), any());
        verify(emailService, never()).saveVerificationCode(any(), any());
    }
    @Test
    public void testRegister() throws Exception {
        // 创建注册请求
        RegisterDTO registerDTO = new RegisterDTO();
        registerDTO.setUsername("testuser");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("test@example.com");
        registerDTO.setPhone("13812345678");
        registerDTO.setCaptchaKey("test-key");
        registerDTO.setCaptchaCode("1234");
        registerDTO.setEmailCode("123456");
        // 模拟服务
        doNothing().when(authService).register(any(RegisterDTO.class));
        // 执行请求
        mockMvc.perform(post("/api/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(registerDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.message").value("操作成功"));
        verify(authService, times(1)).register(any(RegisterDTO.class));
    }
    @Test
    public void testLogin() throws Exception {
        // 创建登录请求
        LoginDTO loginDTO = new LoginDTO();
        loginDTO.setUsername("testuser");
        loginDTO.setPassword("password123");
        loginDTO.setCaptchaKey("test-key");
        loginDTO.setCaptchaCode("1234");
        // 模拟JWT令牌
        JwtTokenDTO jwtTokenDTO = JwtTokenDTO.builder()
                .accessToken("access-token")
                .refreshToken("refresh-token")
                .expiresIn(3600000)
                .build();
        // 模拟服务
        given(authService.login(any(LoginDTO.class))).willReturn(jwtTokenDTO);
        // 执行请求
        mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginDTO)))
                .andDo(MockMvcResultHandlers.print()) // 打印结果
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.accessToken").value("access-token"))
                .andExpect(jsonPath("$.data.refreshToken").value("refresh-token"))
                .andExpect(jsonPath("$.data.expiresIn").value(3600000));
        verify(authService, times(1)).login(any(LoginDTO.class));
    }
    @Test
    public void testRefreshToken() throws Exception {
        // 创建刷新令牌请求
        RefreshTokenDTO refreshTokenDTO = new RefreshTokenDTO();
        refreshTokenDTO.setRefreshToken("refresh-token");
        // 模拟JWT令牌
        JwtTokenDTO jwtTokenDTO = JwtTokenDTO.builder()
                .accessToken("new-access-token")
                .refreshToken("refresh-token")
                .expiresIn(3600000)
                .build();
        // 模拟服务
        given(authService.refreshToken(any(RefreshTokenDTO.class))).willReturn(jwtTokenDTO);
        // 执行请求
        mockMvc.perform(post("/api/auth/refresh-token")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(refreshTokenDTO)))
                .andDo(MockMvcResultHandlers.print()) // 打印结果
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.accessToken").value("new-access-token"))
                .andExpect(jsonPath("$.data.refreshToken").value("refresh-token"))
                .andExpect(jsonPath("$.data.expiresIn").value(3600000));
        verify(authService, times(1)).refreshToken(any(RefreshTokenDTO.class));
    }
    @Test
    public void testLogout() throws Exception {
        // 模拟服务
        doNothing().when(authService).logout(anyString());
        // 执行请求
        mockMvc.perform(post("/api/auth/logout")
                        .header("Authorization", "Bearer test-token"))
                .andDo(MockMvcResultHandlers.print()) // 打印结果
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.message").value("操作成功"));
        verify(authService, times(1)).logout(eq("test-token"));
    }
    @Test
    public void testSendEmailUpdateCode() throws Exception {
        // 准备
        EmailVerificationDTO dto = new EmailVerificationDTO();
        dto.setEmail("newemail@example.com");
        dto.setCaptchaKey("123456");
        dto.setCaptchaCode("1234");
        String code = "654321";
        when(captchaService.validateCaptcha("123456", "1234")).thenReturn(true);
        when(emailService.generateVerificationCode()).thenReturn(code);
        doNothing().when(emailService).sendEmailUpdateCode(eq("newemail@example.com"), eq(code));
        doNothing().when(emailService).saveVerificationCode(eq("newemail@example.com"), eq(code));
        // 执行 & 验证
        mockMvc.perform(post("/api/auth/email-update-code")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(dto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200));
        verify(captchaService, times(1)).validateCaptcha("123456", "1234");
        verify(emailService, times(1)).generateVerificationCode();
        verify(emailService, times(1)).sendEmailUpdateCode("newemail@example.com", code);
        verify(emailService, times(1)).saveVerificationCode("newemail@example.com", code);
    }
    @Test
    public void testSendEmailUpdateCodeWithInvalidCaptcha() throws Exception {
        // 准备
        EmailVerificationDTO dto = new EmailVerificationDTO();
        dto.setEmail("newemail@example.com");
        dto.setCaptchaKey("123456");
        dto.setCaptchaCode("1234");
        when(captchaService.validateCaptcha("123456", "1234")).thenReturn(false);
        // 执行 & 验证
        mockMvc.perform(post("/api/auth/email-update-code")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(dto)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(500))
                .andExpect(jsonPath("$.message").value("验证码错误"));
        verify(captchaService, times(1)).validateCaptcha("123456", "1234");
        verify(emailService, times(0)).generateVerificationCode();
        verify(emailService, times(0)).sendEmailUpdateCode(anyString(), anyString());
        verify(emailService, times(0)).saveVerificationCode(anyString(), anyString());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/controller/PermissionControllerTest.java">
package com.zhangziqi.online_course_mine.controller;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zhangziqi.online_course_mine.model.dto.PermissionDTO;
import com.zhangziqi.online_course_mine.model.vo.PermissionVO;
import com.zhangziqi.online_course_mine.service.PermissionService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;
import java.util.Arrays;
import java.util.List;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;
import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
@SpringBootTest
@AutoConfigureMockMvc(addFilters = false) // 不启用过滤器以便只测试控制器逻辑
@ActiveProfiles("test")
public class PermissionControllerTest {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private WebApplicationContext context;
    @Autowired
    private ObjectMapper objectMapper;
    @MockBean
    private PermissionService permissionService;
    private final String BASE_URL = "/api/permissions";
    private PermissionVO testPermission;
    @BeforeEach
    void setUp() {
        mockMvc = MockMvcBuilders
                .webAppContextSetup(context)
                .apply(springSecurity())
                .build();
        testPermission = PermissionVO.builder()
                .id(1L)
                .name("测试权限")
                .code("TEST_READ")
                .url("/api/test/**")
                .method("GET")
                .description("测试权限描述")
                .build();
    }
    @Test
    @WithMockUser(roles = "ADMIN") // 使用ADMIN角色进行测试
    void getPermissionListShouldReturnPermissionListWhenUserHasAdminRole() throws Exception {
        // 准备测试数据
        List<PermissionVO> permissions = Arrays.asList(testPermission);
        // 模拟服务方法
        when(permissionService.getPermissionList()).thenReturn(permissions);
        // 执行测试
        mockMvc.perform(get(BASE_URL))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.message").exists())
                .andExpect(jsonPath("$.data[0].id").value(1))
                .andExpect(jsonPath("$.data[0].name").value("测试权限"));
    }
    @Test
    @WithMockUser(roles = "USER") // 使用普通用户角色进行测试
    void getPermissionListShouldReturnForbiddenWhenUserDoesNotHaveAdminRole() throws Exception {
        // 执行测试，期望返回403
        mockMvc.perform(get(BASE_URL))
                .andExpect(status().isForbidden());
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    void getPermissionByIdShouldReturnPermissionWhenUserHasAdminRole() throws Exception {
        // 模拟服务方法
        when(permissionService.getPermissionById(anyLong())).thenReturn(testPermission);
        // 执行测试
        mockMvc.perform(get(BASE_URL + "/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.id").value(1))
                .andExpect(jsonPath("$.data.name").value("测试权限"));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    void createPermissionShouldReturnCreatedPermissionWhenUserHasAdminRole() throws Exception {
        // 准备请求数据
        PermissionDTO permissionDTO = new PermissionDTO();
        permissionDTO.setName("新权限");
        permissionDTO.setCode("NEW_CREATE");
        permissionDTO.setUrl("/api/new");
        permissionDTO.setMethod("POST");
        permissionDTO.setDescription("新权限描述");
        // 模拟服务方法
        when(permissionService.createPermission(any(PermissionDTO.class))).thenReturn(testPermission);
        // 执行测试
        mockMvc.perform(post(BASE_URL)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(permissionDTO)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.data.id").value(1));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    void updatePermissionShouldReturnUpdatedPermissionWhenUserHasAdminRole() throws Exception {
        // 准备请求数据
        PermissionDTO permissionDTO = new PermissionDTO();
        permissionDTO.setName("更新权限");
        permissionDTO.setCode("TEST_UPDATE");
        permissionDTO.setUrl("/api/test/**");
        permissionDTO.setMethod("PUT");
        permissionDTO.setDescription("更新权限描述");
        // 模拟服务方法
        when(permissionService.updatePermission(anyLong(), any(PermissionDTO.class))).thenReturn(testPermission);
        // 执行测试
        mockMvc.perform(put(BASE_URL + "/1")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(permissionDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.id").value(1));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    void deletePermissionShouldReturnNoContentWhenUserHasAdminRole() throws Exception {
        // 模拟服务方法
        doNothing().when(permissionService).deletePermission(anyLong());
        // 执行测试
        mockMvc.perform(delete(BASE_URL + "/1"))
                .andExpect(status().isNoContent());
        // 验证服务方法被调用
        verify(permissionService, times(1)).deletePermission(1L);
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/controller/RoleControllerTest.java">
package com.zhangziqi.online_course_mine.controller;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zhangziqi.online_course_mine.model.dto.RoleDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.vo.RoleVO;
import com.zhangziqi.online_course_mine.service.RoleService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;
import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
@SpringBootTest
@AutoConfigureMockMvc(addFilters = false) // 不启用过滤器以便只测试控制器逻辑
@ActiveProfiles("test")
public class RoleControllerTest {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private WebApplicationContext context;
    @Autowired
    private ObjectMapper objectMapper;
    @MockBean
    private RoleService roleService;
    private final String BASE_URL = "/api/roles";
    private RoleVO testRole;
    private Permission testPermission;
    @BeforeEach
    void setUp() {
        mockMvc = MockMvcBuilders
                .webAppContextSetup(context)
                .apply(springSecurity())
                .build();
        testPermission = Permission.builder()
                .id(1L)
                .name("测试权限")
                .code("TEST_READ")
                .url("/api/test/**")
                .method("GET")
                .description("测试权限描述")
                .build();
        testRole = RoleVO.builder()
                .id(1L)
                .name("测试角色")
                .code("ROLE_TEST")
                .description("测试角色描述")
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .permissions(new HashSet<>(Collections.singletonList(testPermission)))
                .build();
    }
    @Test
    @WithMockUser(roles = "ADMIN") // 使用ADMIN角色进行测试
    void getRoleListShouldReturnRoleListWhenUserHasAdminRole() throws Exception {
        // 准备测试数据
        List<RoleVO> roles = Arrays.asList(testRole);
        // 模拟服务方法
        when(roleService.getRoleList()).thenReturn(roles);
        // 执行测试
        mockMvc.perform(get(BASE_URL))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.message").exists())
                .andExpect(jsonPath("$.data[0].id").value(1))
                .andExpect(jsonPath("$.data[0].name").value("测试角色"));
    }
    @Test
    @WithMockUser(roles = "USER") // 使用普通用户角色进行测试
    void getRoleListShouldReturnForbiddenWhenUserDoesNotHaveAdminRole() throws Exception {
        // 执行测试，期望返回403
        mockMvc.perform(get(BASE_URL))
                .andExpect(status().isForbidden());
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    void getRoleByIdShouldReturnRoleWhenUserHasAdminRole() throws Exception {
        // 模拟服务方法
        when(roleService.getRoleById(anyLong())).thenReturn(testRole);
        // 执行测试
        mockMvc.perform(get(BASE_URL + "/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.id").value(1))
                .andExpect(jsonPath("$.data.name").value("测试角色"));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    void createRoleShouldReturnCreatedRoleWhenUserHasAdminRole() throws Exception {
        // 准备请求数据
        RoleDTO roleDTO = new RoleDTO();
        roleDTO.setName("新角色");
        roleDTO.setCode("ROLE_NEW");
        roleDTO.setDescription("新角色描述");
        // 模拟服务方法
        when(roleService.createRole(any(RoleDTO.class))).thenReturn(testRole);
        // 执行测试
        mockMvc.perform(post(BASE_URL)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(roleDTO)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.data.id").value(1));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    void updateRoleShouldReturnUpdatedRoleWhenUserHasAdminRole() throws Exception {
        // 准备请求数据
        RoleDTO roleDTO = new RoleDTO();
        roleDTO.setName("更新角色");
        roleDTO.setCode("ROLE_UPDATE");
        roleDTO.setDescription("更新角色描述");
        // 模拟服务方法
        when(roleService.updateRole(anyLong(), any(RoleDTO.class))).thenReturn(testRole);
        // 执行测试
        mockMvc.perform(put(BASE_URL + "/1")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(roleDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.id").value(1));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    void deleteRoleShouldReturnNoContentWhenUserHasAdminRole() throws Exception {
        // 模拟服务方法
        doNothing().when(roleService).deleteRole(anyLong());
        // 执行测试
        mockMvc.perform(delete(BASE_URL + "/1"))
                .andExpect(status().isNoContent());
        // 验证服务方法被调用
        verify(roleService, times(1)).deleteRole(1L);
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    void assignPermissionsShouldReturnUpdatedRoleWhenUserHasAdminRole() throws Exception {
        // 准备权限ID列表
        List<Long> permissionIds = Collections.singletonList(1L);
        // 模拟服务方法
        when(roleService.assignPermissions(anyLong(), any())).thenReturn(testRole);
        // 执行测试
        mockMvc.perform(put(BASE_URL + "/1/permissions")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(permissionIds)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.id").value(1));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    void batchDeleteRolesShouldReturnNoContentWhenUserHasAdminRole() throws Exception {
        // 准备角色ID列表
        List<Long> roleIds = Arrays.asList(1L, 2L);
        // 模拟服务方法
        doNothing().when(roleService).batchDeleteRoles(any());
        // 执行测试
        mockMvc.perform(delete(BASE_URL + "/batch")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(roleIds)))
                .andExpect(status().isNoContent());
        // 验证服务方法被调用
        verify(roleService, times(1)).batchDeleteRoles(any());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/controller/UserControllerTest.java">
package com.zhangziqi.online_course_mine.controller;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zhangziqi.online_course_mine.model.dto.ChangePasswordDTO;
import com.zhangziqi.online_course_mine.model.dto.EmailUpdateDTO;
import com.zhangziqi.online_course_mine.model.dto.UserDTO;
import com.zhangziqi.online_course_mine.model.dto.UserProfileDTO;
import com.zhangziqi.online_course_mine.model.dto.UserQueryDTO;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import com.zhangziqi.online_course_mine.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import java.time.LocalDateTime;
import java.util.*;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
/**
 * 用户控制器测试
 */
@SpringBootTest
@AutoConfigureMockMvc(addFilters = false)
@ActiveProfiles("test")
public class UserControllerTest {
    @Autowired
    private MockMvc mockMvc;
    @MockBean
    private UserService userService;
    @Autowired
    private ObjectMapper objectMapper;
    private UserVO userVO;
    private UserDTO userDTO;
    private List<UserVO> userVOList;
    private UserProfileDTO profileDTO;
    private ChangePasswordDTO changePasswordDTO;
    private EmailUpdateDTO emailUpdateDTO;
    @BeforeEach
    public void setup() {
        // 模拟角色
        Set<Role> roles = new HashSet<>();
        roles.add(Role.builder()
                .id(1L)
                .name("普通用户")
                .code("ROLE_USER")
                .permissions(new HashSet<>())
                .build());
        // 模拟用户VO
        userVO = UserVO.builder()
                .id(1L)
                .username("testuser")
                .email("test@example.com")
                .phone("13800138000")
                .avatar("avatar.jpg")
                .nickname("测试用户")
                .status(1)
                .institutionId(null)
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .lastLoginAt(LocalDateTime.now())
                .roles(roles)
                .build();
        // 模拟用户列表
        userVOList = new ArrayList<>();
        userVOList.add(userVO);
        userVOList.add(UserVO.builder()
                .id(2L)
                .username("testuser2")
                .email("test2@example.com")
                .phone("13800138001")
                .avatar("avatar2.jpg")
                .nickname("测试用户2")
                .status(1)
                .institutionId(null)
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .lastLoginAt(LocalDateTime.now())
                .roles(roles)
                .build());
        // 模拟用户DTO
        userDTO = UserDTO.builder()
                .username("testuser")
                .password("password123")
                .email("test@example.com")
                .phone("13800138000")
                .avatar("avatar.jpg")
                .nickname("测试用户")
                .status(1)
                .roleIds(Set.of(1L))
                .build();
        // 模拟个人信息DTO
        profileDTO = new UserProfileDTO();
        profileDTO.setNickname("新昵称");
        profileDTO.setPhone("13900001111");
        // 模拟密码修改DTO
        changePasswordDTO = new ChangePasswordDTO();
        changePasswordDTO.setOldPassword("oldPassword");
        changePasswordDTO.setNewPassword("newPassword123");
        changePasswordDTO.setConfirmPassword("newPassword123");
        // 模拟邮箱更新DTO
        emailUpdateDTO = new EmailUpdateDTO();
        emailUpdateDTO.setNewEmail("newemail@example.com");
        emailUpdateDTO.setEmailCode("123456");
        emailUpdateDTO.setPassword("password123");
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testGetUserList() throws Exception {
        // 构建分页结果
        Page<UserVO> page = new PageImpl<>(userVOList);
        when(userService.getUserList(any(UserQueryDTO.class))).thenReturn(page);
        // 执行测试
        mockMvc.perform(get("/api/users")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.content", hasSize(2)))
                .andExpect(jsonPath("$.data.content[0].username", is("testuser")))
                .andExpect(jsonPath("$.data.content[1].username", is("testuser2")));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testGetUserById() throws Exception {
        when(userService.getUserById(1L)).thenReturn(userVO);
        mockMvc.perform(get("/api/users/1")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.username", is("testuser")))
                .andExpect(jsonPath("$.data.email", is("test@example.com")));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testCreateUser() throws Exception {
        when(userService.createUser(any(UserDTO.class))).thenReturn(userVO);
        mockMvc.perform(post("/api/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(userDTO)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.username", is("testuser")));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testUpdateUser() throws Exception {
        when(userService.updateUser(eq(1L), any(UserDTO.class))).thenReturn(userVO);
        mockMvc.perform(put("/api/users/1")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(userDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.username", is("testuser")));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testDeleteUser() throws Exception {
        doNothing().when(userService).deleteUser(1L);
        mockMvc.perform(delete("/api/users/1")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNoContent());
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testUpdateUserStatus() throws Exception {
        UserVO updatedUserVO = UserVO.builder()
                .id(1L)
                .username("testuser")
                .email("test@example.com")
                .status(0) // 禁用状态
                .build();
        when(userService.updateUserStatus(eq(1L), eq(0))).thenReturn(updatedUserVO);
        mockMvc.perform(patch("/api/users/1/status")
                .param("status", "0")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.status", is(0)));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testAssignRoles() throws Exception {
        Set<Long> roleIds = Set.of(1L, 2L);
        when(userService.assignRoles(eq(1L), eq(roleIds))).thenReturn(userVO);
        mockMvc.perform(put("/api/users/1/roles")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(roleIds)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)));
    }
    @Test
    @WithMockUser(roles = "ADMIN")
    public void testBatchDeleteUsers() throws Exception {
        List<Long> ids = List.of(1L, 2L);
        doNothing().when(userService).batchDeleteUsers(ids);
        mockMvc.perform(delete("/api/users/batch")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(ids)))
                .andExpect(status().isNoContent());
    }
    @Test
    @WithMockUser(username = "testuser")
    public void testGetCurrentUser() throws Exception {
        when(userService.getCurrentUser("testuser")).thenReturn(userVO);
        mockMvc.perform(get("/api/users/current")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.username", is("testuser")))
                .andExpect(jsonPath("$.data.email", is("test@example.com")))
                .andExpect(jsonPath("$.data.nickname", is("测试用户")));
    }
    @Test
    @WithMockUser(username = "testuser")
    public void testUpdateCurrentUser() throws Exception {
        when(userService.updateCurrentUserProfile(eq("testuser"), anyString(), anyString())).thenReturn(userVO);
        mockMvc.perform(put("/api/users/current")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(profileDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.username", is("testuser")));
    }
    @Test
    @WithMockUser(username = "testuser")
    public void testChangePassword() throws Exception {
        when(userService.changePassword(eq("testuser"), eq("oldPassword"), eq("newPassword123"))).thenReturn(true);
        mockMvc.perform(put("/api/users/current/password")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(changePasswordDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)));
    }
    @Test
    @WithMockUser(username = "testuser")
    public void testChangePasswordWithMismatchConfirmation() throws Exception {
        // 设置确认密码不一致
        changePasswordDTO.setConfirmPassword("differentPassword");
        mockMvc.perform(put("/api/users/current/password")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(changePasswordDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(400)))
                .andExpect(jsonPath("$.message", is("新密码与确认密码不一致")));
    }
    @Test
    @WithMockUser(username = "testuser")
    public void testUpdateEmail() throws Exception {
        when(userService.updateEmail(
                eq("testuser"), 
                eq("newemail@example.com"), 
                eq("123456"), 
                eq("password123")
        )).thenReturn(userVO);
        mockMvc.perform(put("/api/users/current/email")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(emailUpdateDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.username", is("testuser")));
    }
    @Test
    @WithMockUser(username = "testuser")
    public void testUploadAvatar() throws Exception {
        String avatarUrl = "https://example.com/avatars/testuser/avatar.jpg";
        MockMultipartFile file = new MockMultipartFile(
                "file",
                "avatar.jpg",
                "image/jpeg",
                "test image content".getBytes()
        );
        // 模拟上传并更新头像的服务方法
        Map<String, String> resultMap = new HashMap<>();
        resultMap.put("avatarUrl", avatarUrl);
        when(userService.uploadAndUpdateAvatar(eq("testuser"), any())).thenReturn(resultMap);
        mockMvc.perform(multipart("/api/users/current/avatar")
                .file(file))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.avatarUrl", is(avatarUrl)));
    }
    @Test
    public void testGetBasicUserInfo() throws Exception {
        when(userService.getBasicUserInfo(1L)).thenReturn(userVO);
        mockMvc.perform(get("/api/users/basic/1")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code", is(200)))
                .andExpect(jsonPath("$.data.username", is("testuser")))
                .andExpect(jsonPath("$.data.nickname", is("测试用户")));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/integration/AuthControllerIntegrationTest.java">
package com.zhangziqi.online_course_mine.integration;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zhangziqi.online_course_mine.config.TestSecurityConfig;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.*;
import com.zhangziqi.online_course_mine.service.AuthService;
import com.zhangziqi.online_course_mine.service.CaptchaService;
import com.zhangziqi.online_course_mine.service.EmailService;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Import;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;
import java.awt.image.BufferedImage;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.BDDMockito.given;
import static org.mockito.Mockito.*;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
/**
 * 认证控制器集成测试
 * 使用实际的安全过滤器链，但模拟了业务服务组件
 */
@SpringBootTest(
    // 可以在这里指定特定的配置属性
    properties = {
        "spring.main.allow-bean-definition-overriding=true"
    }
)
@AutoConfigureMockMvc
@ActiveProfiles("test") // 使用测试环境配置
@Import(TestSecurityConfig.class)
public class AuthControllerIntegrationTest {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private ObjectMapper objectMapper;
    @MockBean
    private AuthService authService;
    @MockBean
    private CaptchaService captchaService;
    @MockBean
    private EmailService emailService;
    @Test
    public void testGetCaptcha() throws Exception {
        // 模拟验证码服务
        BufferedImage mockImage = new BufferedImage(150, 50, BufferedImage.TYPE_INT_RGB);
        given(captchaService.generateCaptcha(any())).willReturn(mockImage);
        // 1. 获取验证码key
        String result = mockMvc.perform(get("/api/auth/captcha/key"))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data").isString())
                .andReturn()
                .getResponse()
                .getContentAsString();
        // 从响应中提取验证码key
        String captchaKey = new ObjectMapper().readTree(result).get("data").asText();
        // 2. 使用key获取验证码图片
        mockMvc.perform(get("/api/auth/captcha/image/{key}", captchaKey))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(header().string(HttpHeaders.CONTENT_TYPE, MediaType.IMAGE_JPEG_VALUE))
                .andExpect(header().string(HttpHeaders.CACHE_CONTROL, "no-store, no-cache, must-revalidate"));
        verify(captchaService, times(1)).generateCaptcha(eq(captchaKey));
    }
    @Test
    public void testCompleteRegistrationFlow() throws Exception {
        // 1. 获取图形验证码key
        String result = mockMvc.perform(get("/api/auth/captcha/key"))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andReturn()
                .getResponse()
                .getContentAsString();
        String captchaKey = new ObjectMapper().readTree(result).get("data").asText();
        // 2. 获取验证码图片
        BufferedImage mockImage = new BufferedImage(150, 50, BufferedImage.TYPE_INT_RGB);
        given(captchaService.generateCaptcha(any())).willReturn(mockImage);
        mockMvc.perform(get("/api/auth/captcha/image/{key}", captchaKey))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(header().string(HttpHeaders.CONTENT_TYPE, MediaType.IMAGE_JPEG_VALUE));
        // 3. 发送邮箱验证码
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("test@example.com");
        emailVerificationDTO.setCaptchaKey(captchaKey);
        emailVerificationDTO.setCaptchaCode("1234");
        given(captchaService.validateCaptcha(eq(captchaKey), eq("1234"))).willReturn(true);
        given(emailService.generateVerificationCode()).willReturn("123456");
        doNothing().when(emailService).sendVerificationCode(anyString(), anyString());
        doNothing().when(emailService).saveVerificationCode(anyString(), anyString());
        mockMvc.perform(post("/api/auth/email-verification-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200));
        // 4. 完成注册
        RegisterDTO registerDTO = new RegisterDTO();
        registerDTO.setUsername("testuser");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("test@example.com");
        registerDTO.setPhone("13812345678");
        registerDTO.setCaptchaKey(captchaKey);
        registerDTO.setCaptchaCode("1234");
        registerDTO.setEmailCode("123456");
        // 注册时会先调用 emailService.validateVerificationCode，然后调用 userService
        doAnswer(invocation -> {
            RegisterDTO dto = invocation.getArgument(0);
            // 这会触发 emailService.validateVerificationCode 的调用
            emailService.validateVerificationCode(dto.getEmail(), dto.getEmailCode());
            return null;
        }).when(authService).register(any(RegisterDTO.class));
        given(emailService.validateVerificationCode(eq("test@example.com"), eq("123456"))).willReturn(true);
        mockMvc.perform(post("/api/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(registerDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.code").value(200));
        // 验证所有服务调用
        verify(captchaService).validateCaptcha(eq(captchaKey), eq("1234")); // 只在发送邮箱验证码时验证
        verify(emailService).generateVerificationCode();
        verify(emailService).sendVerificationCode(eq("test@example.com"), eq("123456"));
        verify(emailService).saveVerificationCode(eq("test@example.com"), eq("123456"));
        verify(emailService).validateVerificationCode(eq("test@example.com"), eq("123456"));
        verify(authService).register(any(RegisterDTO.class));
    }
    @Test
    public void testRegistrationWithInvalidEmailCode() throws Exception {
        // 准备注册数据
        RegisterDTO registerDTO = new RegisterDTO();
        registerDTO.setUsername("testuser");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("test@example.com");
        registerDTO.setCaptchaKey("test-key");
        registerDTO.setCaptchaCode("1234");
        registerDTO.setEmailCode("123456");
        // 模拟邮箱验证码验证失败
        given(emailService.validateVerificationCode(eq("test@example.com"), eq("123456"))).willReturn(false);
        doThrow(new BusinessException("邮箱验证码错误或已过期"))
            .when(authService).register(any(RegisterDTO.class));
        mockMvc.perform(post("/api/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(registerDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.error").value("邮箱验证码错误或已过期"));
        verify(emailService, never()).validateVerificationCode(eq("test@example.com"), eq("123456"));
        verify(authService).register(any(RegisterDTO.class));
    }
    @Test
    public void testSendEmailVerificationCodeWithInvalidCaptcha() throws Exception {
        // 准备邮箱验证码请求数据
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("test@example.com");
        emailVerificationDTO.setCaptchaKey("test-key");
        emailVerificationDTO.setCaptchaCode("1234");
        // 模拟图形验证码验证失败
        given(captchaService.validateCaptcha("test-key", "1234")).willReturn(false);
        mockMvc.perform(post("/api/auth/email-verification-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(500))
                .andExpect(jsonPath("$.message").value("验证码错误"));
        verify(captchaService).validateCaptcha(eq("test-key"), eq("1234"));
        verify(emailService, never()).generateVerificationCode();
        verify(emailService, never()).sendVerificationCode(any(), any());
        verify(emailService, never()).saveVerificationCode(any(), any());
    }
    @Test
    public void testSendEmailUpdateCode() throws Exception {
        // 准备邮箱更新验证码请求数据
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("newemail@example.com");
        emailVerificationDTO.setCaptchaKey("test-key");
        emailVerificationDTO.setCaptchaCode("1234");
        String verificationCode = "654321";
        // 模拟图形验证码验证通过
        given(captchaService.validateCaptcha("test-key", "1234")).willReturn(true);
        // 模拟验证码生成
        given(emailService.generateVerificationCode()).willReturn(verificationCode);
        // 模拟邮件发送
        doNothing().when(emailService).sendEmailUpdateCode(eq("newemail@example.com"), eq(verificationCode));
        // 模拟验证码保存
        doNothing().when(emailService).saveVerificationCode(eq("newemail@example.com"), eq(verificationCode));
        mockMvc.perform(post("/api/auth/email-update-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.message").value("操作成功"));
        verify(captchaService).validateCaptcha(eq("test-key"), eq("1234"));
        verify(emailService).generateVerificationCode();
        verify(emailService).sendEmailUpdateCode(eq("newemail@example.com"), eq(verificationCode));
        verify(emailService).saveVerificationCode(eq("newemail@example.com"), eq(verificationCode));
    }
    @Test
    public void testSendEmailUpdateCodeWithInvalidCaptcha() throws Exception {
        // 准备邮箱更新验证码请求数据
        EmailVerificationDTO emailVerificationDTO = new EmailVerificationDTO();
        emailVerificationDTO.setEmail("newemail@example.com");
        emailVerificationDTO.setCaptchaKey("test-key");
        emailVerificationDTO.setCaptchaCode("1234");
        // 模拟图形验证码验证失败
        given(captchaService.validateCaptcha("test-key", "1234")).willReturn(false);
        mockMvc.perform(post("/api/auth/email-update-code")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(emailVerificationDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(500))
                .andExpect(jsonPath("$.message").value("验证码错误"));
        verify(captchaService).validateCaptcha(eq("test-key"), eq("1234"));
        verify(emailService, never()).generateVerificationCode();
        verify(emailService, never()).sendEmailUpdateCode(any(), any());
        verify(emailService, never()).saveVerificationCode(any(), any());
    }
    @Test
    public void testLogin() throws Exception {
        // 创建登录请求
        LoginDTO loginDTO = new LoginDTO();
        loginDTO.setUsername("testuser");
        loginDTO.setPassword("password123");
        loginDTO.setCaptchaKey("test-key");
        loginDTO.setCaptchaCode("1234");
        // 模拟JWT令牌
        JwtTokenDTO jwtTokenDTO = JwtTokenDTO.builder()
                .accessToken("access-token")
                .refreshToken("refresh-token")
                .expiresIn(3600000)
                .build();
        // 模拟服务
        given(authService.login(any(LoginDTO.class))).willReturn(jwtTokenDTO);
        // 执行请求
        mockMvc.perform(post("/api/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(loginDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.accessToken").value("access-token"))
                .andExpect(jsonPath("$.data.refreshToken").value("refresh-token"))
                .andExpect(jsonPath("$.data.expiresIn").value(3600000));
        verify(authService, times(1)).login(any(LoginDTO.class));
    }
    @Test
    public void testRefreshToken() throws Exception {
        // 创建刷新令牌请求
        RefreshTokenDTO refreshTokenDTO = new RefreshTokenDTO();
        refreshTokenDTO.setRefreshToken("refresh-token");
        // 模拟JWT令牌
        JwtTokenDTO jwtTokenDTO = JwtTokenDTO.builder()
                .accessToken("new-access-token")
                .refreshToken("refresh-token")
                .expiresIn(3600000)
                .build();
        // 模拟服务
        given(authService.refreshToken(any(RefreshTokenDTO.class))).willReturn(jwtTokenDTO);
        // 执行请求
        mockMvc.perform(post("/api/auth/refresh-token")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(refreshTokenDTO)))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.accessToken").value("new-access-token"))
                .andExpect(jsonPath("$.data.refreshToken").value("refresh-token"))
                .andExpect(jsonPath("$.data.expiresIn").value(3600000));
        verify(authService, times(1)).refreshToken(any(RefreshTokenDTO.class));
    }
    @Test
    public void testLogout() throws Exception {
        // 模拟服务
        doNothing().when(authService).logout(anyString());
        // 执行请求
        mockMvc.perform(post("/api/auth/logout")
                        .header("Authorization", "Bearer test-token"))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.message").value("操作成功"));
        verify(authService, times(1)).logout(eq("test-token"));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/integration/MinioIntegrationTest.java">
package com.zhangziqi.online_course_mine.integration;
import com.zhangziqi.online_course_mine.service.MinioService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.ActiveProfiles;
import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assumptions.assumeTrue;
@SpringBootTest
@ActiveProfiles("test")
class MinioIntegrationTest {
    @Autowired
    private MinioService minioService;
    /**
     * 这个测试只有在MINIO_ENABLED环境变量为true时才会运行
     * 可以在运行测试前设置环境变量：MINIO_ENABLED=true
     */
    @Test
    @EnabledIfEnvironmentVariable(named = "MINIO_ENABLED", matches = "true")
    void testMinioOperations() throws Exception {
        // 要测试的文件数据
        String objectName = "test-integration-" + System.currentTimeMillis() + ".txt";
        String content = "Hello MinIO Integration Test!";
        ByteArrayInputStream inputStream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));
        String contentType = "text/plain";
        try {
            // 1. 上传文件
            String url = minioService.uploadFile(objectName, inputStream, contentType);
            assertNotNull(url);
            // 永久URL应该包含对象名
            assertTrue(url.contains(objectName));
            // 2. 获取文件URL
            String fileUrl = minioService.getFileUrl(objectName);
            assertNotNull(fileUrl);
            // 两个URL应该完全相同，因为都是用相同方式构建的永久URL
            assertEquals(url, fileUrl);
            // 3. 列出所有文件
            List<String> files = minioService.listAllFiles();
            assertNotNull(files);
            assertTrue(files.contains(objectName));
        } finally {
            // 4. 删除测试文件（清理）
            boolean deleted = minioService.deleteFile(objectName);
            assertTrue(deleted);
            // 验证文件已被删除
            List<String> filesAfterDelete = minioService.listAllFiles();
            assertFalse(filesAfterDelete.contains(objectName));
        }
    }
    /**
     * 一个总是跳过的测试，用于演示如何运行集成测试
     */
    @Test
    void testSkippedByDefault() {
        // 默认跳过这个测试
        assumeTrue(false, "手动跳过的测试，需要正确配置MinIO才能运行");
        fail("这个测试不应该被执行");
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/integration/PermissionControllerIntegrationTest.java">
package com.zhangziqi.online_course_mine.integration;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zhangziqi.online_course_mine.config.TestSecurityConfig;
import com.zhangziqi.online_course_mine.model.dto.PermissionDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.test.context.support.WithUserDetails;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import java.util.Collections;
import java.util.Set;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
@SpringBootTest(properties = {"spring.main.allow-bean-definition-overriding=true"})
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Import(TestSecurityConfig.class)
public class PermissionControllerIntegrationTest {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private RoleRepository roleRepository;
    @Autowired
    private PermissionRepository permissionRepository;
    @Autowired
    private PasswordEncoder passwordEncoder;
    @Autowired
    private ObjectMapper objectMapper;
    private Role adminRole;
    private Role userRole;
    private User adminUser;
    private User normalUser;
    private Permission testPermission;
    private final String BASE_URL = "/api/permissions";
    @BeforeEach
    void setUp() {
        // 清理数据
        userRepository.deleteAll();
        roleRepository.deleteAll();
        permissionRepository.deleteAll();
        // 创建测试权限 - 使用与TestUserDetailsService一致的权限代码
        testPermission = permissionRepository.save(Permission.builder()
                .name("测试权限")
                .code("TEST_READ")  // 与TestUserDetailsService中的权限代码一致
                .url("/api/test/**")
                .method("GET")
                .description("测试权限描述")
                .build());
        // 创建角色 - 使用与TestUserDetailsService一致的角色代码
        adminRole = roleRepository.save(Role.builder()
                .name("管理员")
                .code("ROLE_ADMIN") // 与TestUserDetailsService中的角色代码一致
                .description("管理员角色")
                .build());
        userRole = roleRepository.save(Role.builder()
                .name("普通用户")
                .code("ROLE_USER") // 与TestUserDetailsService中的角色代码一致
                .description("普通用户角色")
                .build());
        // 给角色分配权限
        adminRole.setPermissions(Set.of(testPermission));
        roleRepository.save(adminRole);
        // 创建测试用户 - 用户名与TestUserDetailsService中的一致
        adminUser = User.builder()
                .username("admin_test") // 与TestUserDetailsService中的用户名一致
                .password(passwordEncoder.encode("password"))
                .email("admin@test.com")
                .status(1)
                .roles(Set.of(adminRole))
                .build();
        userRepository.save(adminUser);
        normalUser = User.builder()
                .username("user_test") // 与TestUserDetailsService中的用户名一致
                .password(passwordEncoder.encode("password"))
                .email("user@test.com")
                .status(1)
                .roles(Set.of(userRole))
                .build();
        userRepository.save(normalUser);
    }
    @AfterEach
    void tearDown() {
        userRepository.deleteAll();
        roleRepository.deleteAll();
        permissionRepository.deleteAll();
    }
    @Test
    @WithUserDetails(value = "admin_test", userDetailsServiceBeanName = "userDetailsService")
    void getPermissionListShouldReturnPermissionListWhenUserIsAdmin() throws Exception {
        mockMvc.perform(get(BASE_URL))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data[0].id").value(testPermission.getId()));
    }
    @Test
    @WithUserDetails(value = "user_test", userDetailsServiceBeanName = "userDetailsService")
    void getPermissionListShouldReturnForbiddenWhenUserIsNotAdmin() throws Exception {
        mockMvc.perform(get(BASE_URL))
                .andExpect(status().isForbidden());
    }
    @Test
    @WithUserDetails(value = "admin_test", userDetailsServiceBeanName = "userDetailsService")
    void createPermissionShouldSucceedWhenUserIsAdmin() throws Exception {
        PermissionDTO permissionDTO = new PermissionDTO();
        permissionDTO.setName("新权限");
        permissionDTO.setCode("NEW_CREATE");  // 修改为大写字母、数字、下划线格式
        permissionDTO.setUrl("/api/new");
        permissionDTO.setMethod("POST");
        permissionDTO.setDescription("新权限描述");
        mockMvc.perform(post(BASE_URL)
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(permissionDTO)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.data.name").value("新权限"));
    }
    @Test
    @WithUserDetails(value = "admin_test", userDetailsServiceBeanName = "userDetailsService")
    void updatePermissionShouldSucceedWhenUserIsAdmin() throws Exception {
        PermissionDTO permissionDTO = new PermissionDTO();
        permissionDTO.setName("更新权限");
        permissionDTO.setCode("TEST_UPDATE");  // 修改为大写字母、数字、下划线格式
        permissionDTO.setUrl("/api/test/**");
        permissionDTO.setMethod("PUT");
        permissionDTO.setDescription("更新权限描述");
        mockMvc.perform(put(BASE_URL + "/" + testPermission.getId())
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(permissionDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.data.name").value("更新权限"));
    }
    @Test
    @WithUserDetails(value = "admin_test", userDetailsServiceBeanName = "userDetailsService")
    void deletePermissionShouldSucceedWhenUserIsAdmin() throws Exception {
        // 在删除权限前先解除权限与角色的关联
        adminRole.setPermissions(Collections.emptySet());
        roleRepository.save(adminRole);
        // 然后再测试删除权限
        mockMvc.perform(delete(BASE_URL + "/" + testPermission.getId()))
                .andExpect(status().isNoContent());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/integration/RoleControllerIntegrationTest.java">
package com.zhangziqi.online_course_mine.integration;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.zhangziqi.online_course_mine.config.TestSecurityConfig;
import com.zhangziqi.online_course_mine.model.dto.RoleDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.http.MediaType;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.test.context.support.WithUserDetails;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
@SpringBootTest(properties = {"spring.main.allow-bean-definition-overriding=true"})
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Import(TestSecurityConfig.class)
public class RoleControllerIntegrationTest {
    @Autowired
    private MockMvc mockMvc;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private RoleRepository roleRepository;
    @Autowired
    private PermissionRepository permissionRepository;
    @Autowired
    private PasswordEncoder passwordEncoder;
    @Autowired
    private ObjectMapper objectMapper;
    private Role adminRole;
    private Role userRole;
    private User adminUser;
    private User normalUser;
    private Permission testPermission;
    private Role testRole;
    private final String BASE_URL = "/api/roles";
    @BeforeEach
    void setUp() {
        // 清理数据
        userRepository.deleteAll();
        roleRepository.deleteAll();
        permissionRepository.deleteAll();
        // 创建测试权限
        testPermission = Permission.builder()
                .name("测试权限")
                .code("TEST_READ")
                .url("/api/test/**")
                .method("GET")
                .description("测试权限描述")
                .build();
        testPermission = permissionRepository.save(testPermission);
        // 创建管理员角色
        adminRole = Role.builder()
                .name("管理员")
                .code("ROLE_ADMIN")
                .description("管理员角色")
                .permissions(new HashSet<>(Collections.singletonList(testPermission)))
                .build();
        adminRole = roleRepository.save(adminRole);
        // 创建普通用户角色
        userRole = Role.builder()
                .name("普通用户")
                .code("ROLE_USER")
                .description("普通用户角色")
                .build();
        userRole = roleRepository.save(userRole);
        // 创建测试角色
        testRole = Role.builder()
                .name("测试角色")
                .code("ROLE_TEST")
                .description("测试角色描述")
                .build();
        testRole = roleRepository.save(testRole);
        // 创建管理员用户
        adminUser = User.builder()
                .username("admin_test")
                .password(passwordEncoder.encode("password"))
                .email("admin@test.com")
                .status(1)
                .roles(Set.of(adminRole))
                .build();
        adminUser = userRepository.save(adminUser);
        // 创建普通用户
        normalUser = User.builder()
                .username("user_test")
                .password(passwordEncoder.encode("password"))
                .email("user@test.com")
                .status(1)
                .roles(Set.of(userRole))
                .build();
        normalUser = userRepository.save(normalUser);
    }
    @AfterEach
    void tearDown() {
        // 清理测试数据
        userRepository.deleteAll();
        roleRepository.deleteAll();
        permissionRepository.deleteAll();
    }
    @Test
    @WithUserDetails("admin_test")
    void getRoleListShouldReturnRoleListWhenUserIsAdmin() throws Exception {
        mockMvc.perform(get(BASE_URL))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data").isArray())
                .andExpect(jsonPath("$.data.length()").value(3)); // 包含3个角色
    }
    @Test
    @WithUserDetails("user_test")
    void getRoleListShouldReturnForbiddenWhenUserIsNotAdmin() throws Exception {
        mockMvc.perform(get(BASE_URL))
                .andExpect(status().isForbidden());
    }
    @Test
    @WithUserDetails("admin_test")
    void getRoleByIdShouldReturnRoleWhenUserIsAdmin() throws Exception {
        mockMvc.perform(get(BASE_URL + "/" + testRole.getId()))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.name").value("测试角色"))
                .andExpect(jsonPath("$.data.code").value("ROLE_TEST"));
    }
    @Test
    @WithUserDetails("admin_test")
    void createRoleShouldSucceedWhenUserIsAdmin() throws Exception {
        // 准备创建角色的数据
        RoleDTO roleDTO = new RoleDTO();
        roleDTO.setName("新角色");
        roleDTO.setCode("ROLE_NEW");
        roleDTO.setDescription("新角色描述");
        mockMvc.perform(post(BASE_URL)
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(roleDTO)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.name").value("新角色"))
                .andExpect(jsonPath("$.data.code").value("ROLE_NEW"));
    }
    @Test
    @WithUserDetails("admin_test")
    void updateRoleShouldSucceedWhenUserIsAdmin() throws Exception {
        // 准备更新角色的数据
        RoleDTO roleDTO = new RoleDTO();
        roleDTO.setName("更新的测试角色");
        roleDTO.setCode("ROLE_TEST");
        roleDTO.setDescription("更新的测试角色描述");
        mockMvc.perform(put(BASE_URL + "/" + testRole.getId())
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(roleDTO)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.name").value("更新的测试角色"))
                .andExpect(jsonPath("$.data.description").value("更新的测试角色描述"));
    }
    @Test
    @WithUserDetails("admin_test")
    void deleteRoleShouldSucceedWhenUserIsAdmin() throws Exception {
        mockMvc.perform(delete(BASE_URL + "/" + testRole.getId()))
                .andExpect(status().isNoContent());
        // 确认角色已被删除
        mockMvc.perform(get(BASE_URL + "/" + testRole.getId()))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.error").value("角色不存在"));
    }
    @Test
    @WithUserDetails("admin_test")
    void assignPermissionsShouldSucceedWhenUserIsAdmin() throws Exception {
        // 准备权限ID列表
        List<Long> permissionIds = Collections.singletonList(testPermission.getId());
        mockMvc.perform(put(BASE_URL + "/" + testRole.getId() + "/permissions")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(permissionIds)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.code").value(200))
                .andExpect(jsonPath("$.data.permissions[0].id").value(testPermission.getId()));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/integration/S3IntegrationTest.java">
package com.zhangziqi.online_course_mine.integration;
import com.zhangziqi.online_course_mine.config.S3Config;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.EnabledIfEnvironmentVariable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.*;
import software.amazon.awssdk.services.s3.presigner.S3Presigner;
import software.amazon.awssdk.services.s3.presigner.model.GetObjectPresignRequest;
import software.amazon.awssdk.services.s3.presigner.model.PresignedGetObjectRequest;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import static org.junit.jupiter.api.Assumptions.assumeTrue;
@SpringBootTest
@ActiveProfiles("test")
class S3IntegrationTest {
    @Autowired
    private S3Client s3Client;
    @Autowired
    private S3Presigner s3Presigner;
    @Autowired
    private S3Config s3Config;
    /**
     * 这个测试只有在S3_ENABLED环境变量为true时才会运行
     * 可以在运行测试前设置环境变量：S3_ENABLED=true
     */
    @Test
    @EnabledIfEnvironmentVariable(named = "S3_ENABLED", matches = "true")
    void testS3Operations() {
        // 要测试的文件数据
        String objectKey = "test-s3-integration-" + System.currentTimeMillis() + ".txt";
        String content = "Hello S3 Integration Test!";
        byte[] contentBytes = content.getBytes(StandardCharsets.UTF_8);
        try {
            // 1. 检查存储桶是否存在，不存在则创建
            createBucketIfNotExists();
            // 2. 上传文件
            PutObjectResponse putResponse = s3Client.putObject(
                    PutObjectRequest.builder()
                            .bucket(s3Config.getBucketName())
                            .key(objectKey)
                            .contentType("text/plain")
                            .build(),
                    RequestBody.fromBytes(contentBytes)
            );
            assertNotNull(putResponse.eTag());
            // 3. 获取文件的预签名URL
            PresignedGetObjectRequest presignedRequest = s3Presigner.presignGetObject(GetObjectPresignRequest.builder()
                    .getObjectRequest(GetObjectRequest.builder()
                            .bucket(s3Config.getBucketName())
                            .key(objectKey)
                            .build())
                    .signatureDuration(Duration.ofDays(7))
                    .build());
            String presignedUrl = presignedRequest.url().toString();
            assertNotNull(presignedUrl);
            assertTrue(presignedUrl.contains(objectKey));
            // 4. 列出所有文件
            ListObjectsV2Response listResponse = s3Client.listObjectsV2(
                    ListObjectsV2Request.builder()
                            .bucket(s3Config.getBucketName())
                            .build()
            );
            List<S3Object> objects = listResponse.contents();
            assertNotNull(objects);
            assertTrue(objects.stream().anyMatch(obj -> obj.key().equals(objectKey)));
            // 5. 获取文件元数据
            HeadObjectResponse headResponse = s3Client.headObject(
                    HeadObjectRequest.builder()
                            .bucket(s3Config.getBucketName())
                            .key(objectKey)
                            .build()
            );
            assertEquals("text/plain", headResponse.contentType());
            assertEquals(contentBytes.length, headResponse.contentLength());
        } finally {
            // 6. 删除测试文件（清理）
            DeleteObjectResponse deleteResponse = s3Client.deleteObject(
                    DeleteObjectRequest.builder()
                            .bucket(s3Config.getBucketName())
                            .key(objectKey)
                            .build()
            );
            assertNotNull(deleteResponse);
            // 验证文件已被删除
            ListObjectsV2Response listResponse = s3Client.listObjectsV2(
                    ListObjectsV2Request.builder()
                            .bucket(s3Config.getBucketName())
                            .build()
            );
            assertFalse(listResponse.contents().stream().anyMatch(obj -> obj.key().equals(objectKey)));
        }
    }
    private void createBucketIfNotExists() {
        try {
            s3Client.headBucket(HeadBucketRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .build());
        } catch (NoSuchBucketException e) {
            s3Client.createBucket(CreateBucketRequest.builder()
                    .bucket(s3Config.getBucketName())
                    .build());
        }
    }
    /**
     * 一个总是跳过的测试，用于演示如何运行集成测试
     */
    @Test
    void testSkippedByDefault() {
        // 默认跳过这个测试
        assumeTrue(false, "手动跳过的测试，需要正确配置MinIO和S3才能运行");
        fail("这个测试不应该被执行");
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/OnlineCourseMineApplicationTests.java">
package com.zhangziqi.online_course_mine;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
@SpringBootTest
@ActiveProfiles("test")
class OnlineCourseMineApplicationTests {
    @Test
    void contextLoads() {
        // 测试应用上下文是否正常加载
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/security/jwt/JwtTokenProviderTest.java">
package com.zhangziqi.online_course_mine.security.jwt;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.test.util.ReflectionTestUtils;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
public class JwtTokenProviderTest {
    @Mock
    private UserRepository userRepository;
    @Spy
    private JwtConfig jwtConfig;
    @InjectMocks
    private JwtTokenProvider tokenProvider;
    private Authentication authentication;
    private User testUser;
    private Role adminRole;
    @BeforeEach
    void setUp() {
        // 设置JWT配置
        ReflectionTestUtils.setField(jwtConfig, "secret", "testSecretKeyWithMinimum32Characters1234567890");
        ReflectionTestUtils.setField(jwtConfig, "accessTokenExpiration", 3600000L);
        ReflectionTestUtils.setField(jwtConfig, "refreshTokenExpiration", 86400000L);
        // 创建测试用户
        testUser = new User();
        testUser.setId(1L);
        testUser.setUsername("testuser");
        testUser.setEmail("test@example.com");
        // 创建角色
        adminRole = new Role();
        adminRole.setId(1L);
        adminRole.setName("管理员");
        adminRole.setCode("ROLE_ADMIN");
        Set<Role> roles = new HashSet<>();
        roles.add(adminRole);
        testUser.setRoles(roles);
        // 创建认证对象
        Set<SimpleGrantedAuthority> authorities = Collections.singleton(
                new SimpleGrantedAuthority("ROLE_ADMIN"));
        authentication = new UsernamePasswordAuthenticationToken(
                "testuser", "password", authorities);
    }
    @Test
    void createTokenShouldGenerateValidTokens() {
        // 执行
        JwtTokenDTO result = tokenProvider.createToken(authentication);
        // 验证
        assertNotNull(result);
        assertNotNull(result.getAccessToken());
        assertNotNull(result.getRefreshToken());
        assertEquals("Bearer", result.getTokenType());
        assertEquals(jwtConfig.getAccessTokenExpiration(), result.getExpiresIn());
        // 验证令牌有效性
        assertTrue(tokenProvider.validateToken(result.getAccessToken()));
        assertTrue(tokenProvider.validateToken(result.getRefreshToken()));
        // 验证用户名
        assertEquals("testuser", tokenProvider.getUsernameFromToken(result.getAccessToken()));
        assertEquals("testuser", tokenProvider.getUsernameFromToken(result.getRefreshToken()));
    }
    @Test
    void refreshTokenShouldCreateNewAccessTokenWithUserRoles() {
        // 准备
        JwtTokenDTO originalTokens = tokenProvider.createToken(authentication);
        String refreshToken = originalTokens.getRefreshToken();
        // 执行
        JwtTokenDTO result = tokenProvider.refreshToken(refreshToken);
        // 验证
        assertNotNull(result);
        assertNotNull(result.getAccessToken());
        assertEquals(refreshToken, result.getRefreshToken());
        // 验证从新访问令牌中获取的认证包含正确的角色
        Authentication newAuth = tokenProvider.getAuthentication(result.getAccessToken());
        assertTrue(newAuth.getAuthorities().stream()
                .anyMatch(a -> a.getAuthority().equals("ROLE_ADMIN")));
        // 不再验证用户仓库调用，因为现在直接从令牌中提取角色信息
    }
    @Test
    void refreshTokenShouldThrowExceptionWhenUserNotFound() {
        // 重命名测试方法，因为新逻辑不再从数据库获取用户
        // 转为测试令牌解析异常
        // 准备
        String invalidRefreshToken = "invalid.token.string";
        // 执行和验证 - 应该抛出JWT解析异常
        assertThrows(io.jsonwebtoken.JwtException.class, () -> {
            tokenProvider.refreshToken(invalidRefreshToken);
        });
        // 不再验证用户仓库调用
    }
    @Test
    void validateTokenShouldReturnTrueForValidToken() {
        // 准备
        JwtTokenDTO tokens = tokenProvider.createToken(authentication);
        // 执行和验证
        assertTrue(tokenProvider.validateToken(tokens.getAccessToken()));
    }
    @Test
    void validateTokenShouldReturnFalseForInvalidToken() {
        // 执行和验证
        assertFalse(tokenProvider.validateToken("invalid-token"));
    }
    @Test
    void getAuthenticationShouldReturnValidAuthentication() {
        // 准备
        JwtTokenDTO tokens = tokenProvider.createToken(authentication);
        // 执行
        Authentication result = tokenProvider.getAuthentication(tokens.getAccessToken());
        // 验证
        assertNotNull(result);
        assertEquals("testuser", result.getName());
        assertTrue(result.getAuthorities().stream()
                .anyMatch(a -> a.getAuthority().equals("ROLE_ADMIN")));
    }
    @Test
    void getUsernameFromTokenShouldReturnCorrectUsername() {
        // 准备
        JwtTokenDTO tokens = tokenProvider.createToken(authentication);
        // 执行和验证
        assertEquals("testuser", tokenProvider.getUsernameFromToken(tokens.getAccessToken()));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/security/TestUserDetailsService.java">
package com.zhangziqi.online_course_mine.security;
import org.springframework.context.annotation.Primary;
import org.springframework.context.annotation.Profile;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
/**
 * 测试环境专用的UserDetailsService实现
 * 用于集成测试中加载测试用户
 */
@Service("userDetailsService")
@Profile("test")
@Primary
public class TestUserDetailsService implements UserDetailsService {
    /**
     * 根据用户名加载用户
     *
     * @param username 用户名
     * @return 用户详情
     * @throws UsernameNotFoundException 用户名不存在
     */
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        // 为集成测试创建固定的测试用户
        if ("admin_test".equals(username)) {
            List<SimpleGrantedAuthority> authorities = Arrays.asList(
                "ROLE_ADMIN", "ADMIN", "TEST_READ"
            ).stream()
            .map(SimpleGrantedAuthority::new)
            .collect(Collectors.toList());
            return new User(
                "admin_test", 
                "$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG", // "password"的BCrypt加密值
                true, true, true, true,
                authorities
            );
        } else if ("user_test".equals(username)) {
            List<SimpleGrantedAuthority> authorities = Arrays.asList(
                "ROLE_USER", "USER"
            ).stream()
            .map(SimpleGrantedAuthority::new)
            .collect(Collectors.toList());
            return new User(
                "user_test", 
                "$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG", // "password"的BCrypt加密值
                true, true, true, true,
                authorities
            );
        }
        throw new UsernameNotFoundException("用户不存在: " + username);
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/AuthServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.config.security.JwtConfig;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.JwtTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.LoginDTO;
import com.zhangziqi.online_course_mine.model.dto.RefreshTokenDTO;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.security.jwt.JwtTokenProvider;
import com.zhangziqi.online_course_mine.security.jwt.TokenBlacklistService;
import com.zhangziqi.online_course_mine.service.impl.AuthServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.test.context.ActiveProfiles;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;
import static org.mockito.BDDMockito.given;
/**
 * 认证服务测试
 */
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test") // 使用测试环境配置
public class AuthServiceTest {
    @Mock
    private AuthenticationManager authenticationManager;
    @Mock
    private JwtTokenProvider tokenProvider;
    @Mock
    private UserService userService;
    @Mock
    private CaptchaService captchaService;
    @Mock
    private EmailService emailService;
    @Mock
    private TokenBlacklistService tokenBlacklistService;
    @Mock
    private JwtConfig jwtConfig;
    @Mock
    private Authentication authentication;
    @Mock
    private UserRepository userRepository;
    @InjectMocks
    private AuthServiceImpl authService;
    private RegisterDTO registerDTO;
    private LoginDTO loginDTO;
    private RefreshTokenDTO refreshTokenDTO;
    private JwtTokenDTO jwtTokenDTO;
    private User testUser;
    @BeforeEach
    void setUp() {
        // 初始化注册DTO
        registerDTO = new RegisterDTO();
        registerDTO.setUsername("testuser");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("test@example.com");
        registerDTO.setCaptchaKey("captcha-key");
        registerDTO.setCaptchaCode("1234");
        registerDTO.setEmailCode("123456");
        // 初始化登录DTO
        loginDTO = new LoginDTO();
        loginDTO.setUsername("testuser");
        loginDTO.setPassword("password123");
        loginDTO.setCaptchaKey("captcha-key");
        loginDTO.setCaptchaCode("1234");
        // 初始化刷新令牌DTO
        refreshTokenDTO = new RefreshTokenDTO();
        refreshTokenDTO.setRefreshToken("refresh-token");
        // 初始化JWT令牌
        jwtTokenDTO = JwtTokenDTO.builder()
                .accessToken("access-token")
                .refreshToken("refresh-token")
                .tokenType("Bearer")
                .expiresIn(3600000)
                .build();
        // 初始化测试用户
        testUser = new User();
        testUser.setId(1L);
        testUser.setUsername("testuser");
        testUser.setEmail("test@example.com");
    }
    @Test
    void registerShouldSucceedWhenAllValidationsPass() {
        // 模拟验证通过
        given(emailService.validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode())).willReturn(true);
        // 模拟用户注册
        given(userService.register(registerDTO)).willReturn(new User());
        // 执行注册
        authService.register(registerDTO);
        // 验证调用
        verify(emailService).validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode());
        verify(userService).register(registerDTO);
    }
    @Test
    void registerShouldThrowExceptionWhenEmailCodeInvalid() {
        // 模拟邮箱验证码验证失败
        given(emailService.validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode())).willReturn(false);
        // 执行注册并验证异常
        BusinessException exception = assertThrows(BusinessException.class, () -> {
            authService.register(registerDTO);
        });
        // 验证异常消息
        assertEquals("邮箱验证码错误或已过期", exception.getMessage());
        // 验证调用
        verify(emailService).validateVerificationCode(registerDTO.getEmail(), registerDTO.getEmailCode());
        verify(userService, never()).register(registerDTO);
    }
    @Test
    void loginShouldSucceedWhenCredentialsValid() {
        // 准备
        when(captchaService.validateCaptcha(loginDTO.getCaptchaKey(), loginDTO.getCaptchaCode())).thenReturn(true);
        when(authenticationManager.authenticate(any(UsernamePasswordAuthenticationToken.class))).thenReturn(authentication);
        when(tokenProvider.createToken(authentication)).thenReturn(jwtTokenDTO);
        // 执行
        JwtTokenDTO result = authService.login(loginDTO);
        // 验证
        assertNotNull(result);
        assertEquals(jwtTokenDTO.getAccessToken(), result.getAccessToken());
        assertEquals(jwtTokenDTO.getRefreshToken(), result.getRefreshToken());
        verify(captchaService).validateCaptcha(loginDTO.getCaptchaKey(), loginDTO.getCaptchaCode());
        verify(authenticationManager).authenticate(any(UsernamePasswordAuthenticationToken.class));
        verify(userService).updateLastLoginTime(loginDTO.getUsername());
        verify(tokenProvider).createToken(authentication);
    }
    @Test
    void loginShouldThrowExceptionWhenCaptchaInvalid() {
        // 准备
        when(captchaService.validateCaptcha(loginDTO.getCaptchaKey(), loginDTO.getCaptchaCode())).thenReturn(false);
        // 执行并验证
        assertThrows(BusinessException.class, () -> authService.login(loginDTO));
        verify(captchaService).validateCaptcha(loginDTO.getCaptchaKey(), loginDTO.getCaptchaCode());
        verify(authenticationManager, never()).authenticate(any());
    }
    @Test
    void refreshTokenShouldSucceedWhenTokenValid() {
        // 准备
        when(tokenProvider.validateToken(refreshTokenDTO.getRefreshToken())).thenReturn(true);
        when(tokenBlacklistService.isBlacklisted(refreshTokenDTO.getRefreshToken())).thenReturn(false);
        when(tokenProvider.refreshToken(refreshTokenDTO.getRefreshToken())).thenReturn(jwtTokenDTO);
        // 执行
        JwtTokenDTO result = authService.refreshToken(refreshTokenDTO);
        // 验证
        assertNotNull(result);
        assertEquals(jwtTokenDTO.getAccessToken(), result.getAccessToken());
        assertEquals(jwtTokenDTO.getRefreshToken(), result.getRefreshToken());
        verify(tokenProvider).validateToken(refreshTokenDTO.getRefreshToken());
        verify(tokenBlacklistService).isBlacklisted(refreshTokenDTO.getRefreshToken());
        verify(tokenProvider).refreshToken(refreshTokenDTO.getRefreshToken());
    }
    @Test
    void refreshTokenShouldThrowExceptionWhenTokenInvalid() {
        // 准备
        when(tokenProvider.validateToken(refreshTokenDTO.getRefreshToken())).thenReturn(false);
        // 执行并验证
        assertThrows(BusinessException.class, () -> authService.refreshToken(refreshTokenDTO));
        verify(tokenProvider).validateToken(refreshTokenDTO.getRefreshToken());
        verify(tokenBlacklistService, never()).isBlacklisted(any());
    }
    @Test
    void refreshTokenShouldThrowExceptionWhenTokenBlacklisted() {
        // 准备
        when(tokenProvider.validateToken(refreshTokenDTO.getRefreshToken())).thenReturn(true);
        when(tokenBlacklistService.isBlacklisted(refreshTokenDTO.getRefreshToken())).thenReturn(true);
        // 执行并验证
        assertThrows(BusinessException.class, () -> authService.refreshToken(refreshTokenDTO));
        verify(tokenProvider).validateToken(refreshTokenDTO.getRefreshToken());
        verify(tokenBlacklistService).isBlacklisted(refreshTokenDTO.getRefreshToken());
        verify(tokenProvider, never()).refreshToken(any());
    }
    @Test
    void logoutShouldAddTokenToBlacklist() {
        // 准备
        String token = "test-token";
        when(tokenProvider.getUsernameFromToken(token)).thenReturn("testuser");
        when(jwtConfig.getAccessTokenExpiration()).thenReturn(3600000L);
        // 执行
        authService.logout(token);
        // 验证
        verify(tokenProvider).getUsernameFromToken(token);
        verify(tokenBlacklistService).addToBlacklist(token, jwtConfig.getAccessTokenExpiration());
    }
    @Test
    void logoutShouldDoNothingWhenTokenEmpty() {
        // 执行
        authService.logout("");
        // 验证
        verify(tokenProvider, never()).getUsernameFromToken(any());
        verify(tokenBlacklistService, never()).addToBlacklist(any(), anyLong());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/CaptchaServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.google.code.kaptcha.impl.DefaultKaptcha;
import com.zhangziqi.online_course_mine.service.impl.CaptchaServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.util.ReflectionTestUtils;
import java.awt.image.BufferedImage;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
/**
 * 验证码服务测试
 */
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test") // 使用测试环境配置
public class CaptchaServiceTest {
    @Mock
    private DefaultKaptcha captchaProducer;
    @Mock
    private RedisTemplate<String, Object> redisTemplate;
    @Mock
    private ValueOperations<String, Object> valueOperations;
    @InjectMocks
    private CaptchaServiceImpl captchaService;
    @BeforeEach
    void setUp() {
        // 只在需要使用到的测试方法中进行模拟，避免不必要的模拟
        // when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        // 设置私有常量字段的值
        ReflectionTestUtils.setField(captchaService, "CAPTCHA_PREFIX", "captcha:");
        ReflectionTestUtils.setField(captchaService, "CAPTCHA_EXPIRATION", 300L); // 5分钟
    }
    @Test
    void generateCaptchaShouldReturnImageAndSaveToRedis() {
        // 准备
        String captchaKey = "test-key";
        String captchaText = "1234";
        BufferedImage mockImage = new BufferedImage(150, 50, BufferedImage.TYPE_INT_RGB);
        // 在这个测试中才需要模拟opsForValue
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(captchaProducer.createText()).thenReturn(captchaText);
        when(captchaProducer.createImage(captchaText)).thenReturn(mockImage);
        // 使用when-thenReturn代替doNothing
        // doNothing().when(valueOperations).set(anyString(), anyString(), anyLong(), any(TimeUnit.class));
        // 执行
        BufferedImage result = captchaService.generateCaptcha(captchaKey);
        // 验证
        assertNotNull(result);
        assertEquals(mockImage, result);
        verify(captchaProducer).createText();
        verify(captchaProducer).createImage(captchaText);
        verify(valueOperations).set(eq("captcha:" + captchaKey), eq(captchaText), eq(300L), eq(TimeUnit.SECONDS));
    }
    @Test
    void validateCaptchaShouldReturnTrueWhenCaptchaValid() {
        // 准备
        String captchaKey = "test-key";
        String captchaCode = "1234";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("captcha:" + captchaKey)).thenReturn(captchaCode);
        // 对于返回值的方法，使用when-thenReturn而不是doNothing
        when(redisTemplate.delete(anyString())).thenReturn(Boolean.TRUE);
        // 执行
        boolean result = captchaService.validateCaptcha(captchaKey, captchaCode);
        // 验证
        assertTrue(result);
        verify(valueOperations).get("captcha:" + captchaKey);
        verify(redisTemplate).delete("captcha:" + captchaKey);
    }
    @Test
    void validateCaptchaShouldReturnFalseWhenCaptchaInvalid() {
        // 准备
        String captchaKey = "test-key";
        String captchaCode = "1234";
        String storedCaptchaCode = "5678";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("captcha:" + captchaKey)).thenReturn(storedCaptchaCode);
        // 对于返回值的方法，使用when-thenReturn而不是doNothing
        when(redisTemplate.delete(anyString())).thenReturn(Boolean.TRUE);
        // 执行
        boolean result = captchaService.validateCaptcha(captchaKey, captchaCode);
        // 验证
        assertFalse(result);
        verify(valueOperations).get("captcha:" + captchaKey);
        verify(redisTemplate).delete("captcha:" + captchaKey);
    }
    @Test
    void validateCaptchaShouldReturnFalseWhenCaptchaExpired() {
        // 准备
        String captchaKey = "test-key";
        String captchaCode = "1234";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("captcha:" + captchaKey)).thenReturn(null);
        // 执行
        boolean result = captchaService.validateCaptcha(captchaKey, captchaCode);
        // 验证
        assertFalse(result);
        verify(valueOperations).get("captcha:" + captchaKey);
        verify(redisTemplate, never()).delete(anyString());
    }
    @Test
    void validateCaptchaShouldReturnFalseWhenKeyOrCodeEmpty() {
        // 执行 - 空key
        boolean result1 = captchaService.validateCaptcha("", "1234");
        // 执行 - 空code
        boolean result2 = captchaService.validateCaptcha("test-key", "");
        // 执行 - 都为空
        boolean result3 = captchaService.validateCaptcha("", "");
        // 验证
        assertFalse(result1);
        assertFalse(result2);
        assertFalse(result3);
        verify(valueOperations, never()).get(anyString());
        verify(redisTemplate, never()).delete(anyString());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/EmailServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.service.impl.EmailServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.test.context.ActiveProfiles;
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;
import org.mockito.ArgumentCaptor;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import java.util.concurrent.TimeUnit;
import java.lang.reflect.Field;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
/**
 * 邮件服务测试
 */
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test")
public class EmailServiceTest {
    @Mock
    private JavaMailSender mailSender;
    @Mock
    private StringRedisTemplate redisTemplate;
    @Mock
    private TemplateEngine templateEngine;
    @Mock
    private ValueOperations<String, String> valueOperations;
    @Mock
    private MimeMessage mimeMessage;
    @InjectMocks
    private EmailServiceImpl emailService;
    @BeforeEach
    void setUp() {
        emailService.setVerificationCodePrefix("email:verification:");
        emailService.setVerificationCodeExpiration(5L);
        // 使用反射设置私有字段emailFrom
        try {
            Field emailFromField = EmailServiceImpl.class.getDeclaredField("emailFrom");
            emailFromField.setAccessible(true);
            emailFromField.set(emailService, "test@example.com");
        } catch (Exception e) {
            fail("无法设置emailFrom字段: " + e.getMessage());
        }
    }
    @Test
    void sendVerificationCodeShouldSendEmail() throws MessagingException {
        // 准备
        String email = "test@example.com";
        String code = "123456";
        String processedTemplate = "<html>验证码是: 123456</html>";
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);
        when(templateEngine.process(eq("email/verification-code"), any(Context.class))).thenReturn(processedTemplate);
        // 执行
        emailService.sendVerificationCode(email, code);
        // 验证
        verify(mailSender).createMimeMessage();
        verify(templateEngine).process(eq("email/verification-code"), any(Context.class));
        verify(mailSender).send(mimeMessage);
    }
    @Test
    void generateVerificationCodeShouldReturnSixDigitCode() {
        // 执行
        String code = emailService.generateVerificationCode();
        // 验证
        assertNotNull(code);
        assertEquals(6, code.length());
        assertTrue(code.matches("^\\d{6}$"));
    }
    @Test
    void saveVerificationCodeShouldSaveToRedis() {
        // 准备
        String email = "test@example.com";
        String code = "123456";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        // 执行
        emailService.saveVerificationCode(email, code);
        // 验证
        verify(valueOperations).set(
            eq("email:verification:test@example.com"),
            eq(code),
            eq(5L),
            eq(TimeUnit.MINUTES)
        );
    }
    @Test
    void validateVerificationCodeShouldReturnTrueWhenValid() {
        // 准备
        String email = "test@example.com";
        String code = "123456";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("email:verification:test@example.com")).thenReturn(code);
        // 执行
        boolean result = emailService.validateVerificationCode(email, code);
        // 验证
        assertTrue(result);
        verify(valueOperations).get("email:verification:test@example.com");
        verify(redisTemplate).delete("email:verification:test@example.com");
    }
    @Test
    void validateVerificationCodeShouldReturnFalseWhenInvalid() {
        // 准备
        String email = "test@example.com";
        String code = "123456";
        String wrongCode = "654321";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("email:verification:test@example.com")).thenReturn(wrongCode);
        // 执行
        boolean result = emailService.validateVerificationCode(email, code);
        // 验证
        assertFalse(result);
        verify(valueOperations).get("email:verification:test@example.com");
        verify(redisTemplate, never()).delete(anyString());
    }
    @Test
    void validateVerificationCodeShouldReturnFalseWhenExpired() {
        // 准备
        String email = "test@example.com";
        String code = "123456";
        when(redisTemplate.opsForValue()).thenReturn(valueOperations);
        when(valueOperations.get("email:verification:test@example.com")).thenReturn(null);
        // 执行
        boolean result = emailService.validateVerificationCode(email, code);
        // 验证
        assertFalse(result);
        verify(valueOperations).get("email:verification:test@example.com");
        verify(redisTemplate, never()).delete(anyString());
    }
    @Test
    public void testSendEmailUpdateCode() throws MessagingException {
        // 准备
        String to = "test@example.com";
        String code = "123456";
        String emailContent = "<div>邮箱更新验证码：123456</div>";
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);
        when(templateEngine.process(eq("email/email-update-code"), any(Context.class))).thenReturn(emailContent);
        // 执行
        emailService.sendEmailUpdateCode(to, code);
        // 验证
        verify(mailSender, times(1)).createMimeMessage();
        verify(mailSender, times(1)).send(any(MimeMessage.class));
        verify(templateEngine, times(1)).process(eq("email/email-update-code"), any(Context.class));
        // 验证上下文参数
        ArgumentCaptor<Context> contextCaptor = ArgumentCaptor.forClass(Context.class);
        verify(templateEngine).process(eq("email/email-update-code"), contextCaptor.capture());
        Context context = contextCaptor.getValue();
        assertNotNull(context);
    }
    @Test
    public void testSendApplicationConfirmationEmail() throws MessagingException {
        // 准备
        String to = "test@example.com";
        String applicationId = "APP12345678";
        String institutionName = "测试机构";
        String emailContent = "<div>机构入驻申请确认</div>";
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);
        when(templateEngine.process(eq("email/application-confirmation"), any(Context.class))).thenReturn(emailContent);
        // 执行
        emailService.sendApplicationConfirmationEmail(to, applicationId, institutionName);
        // 验证
        verify(mailSender, times(1)).createMimeMessage();
        verify(mailSender, times(1)).send(any(MimeMessage.class));
        verify(templateEngine, times(1)).process(eq("email/application-confirmation"), any(Context.class));
        // 验证上下文参数
        ArgumentCaptor<Context> contextCaptor = ArgumentCaptor.forClass(Context.class);
        verify(templateEngine).process(eq("email/application-confirmation"), contextCaptor.capture());
        Context context = contextCaptor.getValue();
        assertNotNull(context);
    }
    @Test
    public void testSendApplicationApprovedEmail() throws MessagingException {
        // 准备
        String to = "test@example.com";
        String institutionName = "测试机构";
        String registerCode = "ABC12345";
        String emailContent = "<div>机构入驻申请已通过</div>";
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);
        when(templateEngine.process(eq("email/application-approved"), any(Context.class))).thenReturn(emailContent);
        // 执行
        emailService.sendApplicationApprovedEmail(to, institutionName, registerCode);
        // 验证
        verify(mailSender, times(1)).createMimeMessage();
        verify(mailSender, times(1)).send(any(MimeMessage.class));
        verify(templateEngine, times(1)).process(eq("email/application-approved"), any(Context.class));
        // 验证上下文参数
        ArgumentCaptor<Context> contextCaptor = ArgumentCaptor.forClass(Context.class);
        verify(templateEngine).process(eq("email/application-approved"), contextCaptor.capture());
        Context context = contextCaptor.getValue();
        assertNotNull(context);
    }
    @Test
    public void testSendApplicationRejectedEmail() throws MessagingException {
        // 准备
        String to = "test@example.com";
        String institutionName = "测试机构";
        String reason = "资质不符合要求";
        String emailContent = "<div>机构入驻申请未通过</div>";
        when(mailSender.createMimeMessage()).thenReturn(mimeMessage);
        when(templateEngine.process(eq("email/application-rejected"), any(Context.class))).thenReturn(emailContent);
        // 执行
        emailService.sendApplicationRejectedEmail(to, institutionName, reason);
        // 验证
        verify(mailSender, times(1)).createMimeMessage();
        verify(mailSender, times(1)).send(any(MimeMessage.class));
        verify(templateEngine, times(1)).process(eq("email/application-rejected"), any(Context.class));
        // 验证上下文参数
        ArgumentCaptor<Context> contextCaptor = ArgumentCaptor.forClass(Context.class);
        verify(templateEngine).process(eq("email/application-rejected"), contextCaptor.capture());
        Context context = contextCaptor.getValue();
        assertNotNull(context);
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/InstitutionAuthServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.InstitutionRegisterDTO;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.RoleEnum;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.impl.InstitutionAuthServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.ActiveProfiles;
import java.time.LocalDateTime;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
@ActiveProfiles("test")
@ExtendWith(MockitoExtension.class)
class InstitutionAuthServiceTest {
    @Mock
    private UserRepository userRepository;
    @Mock
    private RoleRepository roleRepository;
    @Mock
    private InstitutionRepository institutionRepository;
    @Mock
    private PasswordEncoder passwordEncoder;
    @Mock
    private EmailService emailService;
    @InjectMocks
    private InstitutionAuthServiceImpl institutionAuthService;
    private InstitutionRegisterDTO registerDTO;
    private Institution institution;
    private Role institutionRole;
    @BeforeEach
    void setUp() {
        // 设置注册DTO
        registerDTO = new InstitutionRegisterDTO();
        registerDTO.setUsername("institution_user");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("user@example.com");
        registerDTO.setPhone("13800138000");
        registerDTO.setInstitutionCode("ABC12345");
        // 设置机构
        institution = Institution.builder()
                .id(1L)
                .name("测试机构")
                .description("这是一个测试机构")
                .contactPerson("张三")
                .contactPhone("13800138000")
                .contactEmail("contact@example.com")
                .address("北京市海淀区")
                .registerCode("ABC12345")
                .status(1) // 正常状态
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build();
        // 设置机构角色
        institutionRole = Role.builder()
                .id(2L)
                .name("机构用户")
                .code(RoleEnum.INSTITUTION.getCode())
                .build();
    }
    @Test
    void registerWithInstitutionCode_Success() {
        // Arrange
        when(institutionRepository.findByRegisterCode(anyString())).thenReturn(Optional.of(institution));
        when(userRepository.existsByUsername(anyString())).thenReturn(false);
        when(userRepository.existsByEmail(anyString())).thenReturn(false);
        when(passwordEncoder.encode(anyString())).thenReturn("encoded_password");
        when(roleRepository.findByCode(RoleEnum.INSTITUTION.getCode())).thenReturn(Optional.of(institutionRole));
        when(userRepository.save(any(User.class))).thenAnswer(invocation -> invocation.getArgument(0));
        // Act
        institutionAuthService.registerWithInstitutionCode(registerDTO);
        // Assert
        verify(institutionRepository).findByRegisterCode(registerDTO.getInstitutionCode());
        verify(userRepository).existsByUsername(registerDTO.getUsername());
        verify(userRepository).existsByEmail(registerDTO.getEmail());
        verify(roleRepository).findByCode(RoleEnum.INSTITUTION.getCode());
        verify(userRepository).save(any(User.class));
    }
    @Test
    void registerWithInstitutionCode_InvalidCode() {
        // Arrange
        when(institutionRepository.findByRegisterCode(anyString())).thenReturn(Optional.empty());
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionAuthService.registerWithInstitutionCode(registerDTO));
    }
    @Test
    void registerWithInstitutionCode_InactiveInstitution() {
        // Arrange
        institution.setStatus(0); // 待审核状态
        when(institutionRepository.findByRegisterCode(anyString())).thenReturn(Optional.of(institution));
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionAuthService.registerWithInstitutionCode(registerDTO));
    }
    @Test
    void registerWithInstitutionCode_UsernameExists() {
        // Arrange
        when(institutionRepository.findByRegisterCode(anyString())).thenReturn(Optional.of(institution));
        when(userRepository.existsByUsername(anyString())).thenReturn(true);
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionAuthService.registerWithInstitutionCode(registerDTO));
    }
    @Test
    void registerWithInstitutionCode_EmailExists() {
        // Arrange
        when(institutionRepository.findByRegisterCode(anyString())).thenReturn(Optional.of(institution));
        when(userRepository.existsByUsername(anyString())).thenReturn(false);
        when(userRepository.existsByEmail(anyString())).thenReturn(true);
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionAuthService.registerWithInstitutionCode(registerDTO));
    }
    @Test
    void registerWithInstitutionCode_RoleNotFound() {
        // Arrange
        when(institutionRepository.findByRegisterCode(anyString())).thenReturn(Optional.of(institution));
        when(userRepository.existsByUsername(anyString())).thenReturn(false);
        when(userRepository.existsByEmail(anyString())).thenReturn(false);
        when(roleRepository.findByCode(anyString())).thenReturn(Optional.empty());
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionAuthService.registerWithInstitutionCode(registerDTO));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/InstitutionServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplyDTO;
import com.zhangziqi.online_course_mine.model.dto.InstitutionApplicationQueryDTO;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.InstitutionApplication;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import com.zhangziqi.online_course_mine.model.vo.InstitutionApplicationVO;
import com.zhangziqi.online_course_mine.model.vo.InstitutionVO;
import com.zhangziqi.online_course_mine.repository.InstitutionApplicationRepository;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.impl.InstitutionServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.test.context.ActiveProfiles;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
@ActiveProfiles("test")
@ExtendWith(MockitoExtension.class)
class InstitutionServiceTest {
    @Mock
    private InstitutionRepository institutionRepository;
    @Mock
    private InstitutionApplicationRepository applicationRepository;
    @Mock
    private UserRepository userRepository;
    @Mock
    private EmailService emailService;
    @Mock
    private StorageQuotaService storageQuotaService;
    @InjectMocks
    private InstitutionServiceImpl institutionService;
    private InstitutionApplyDTO applyDTO;
    private InstitutionApplication application;
    private InstitutionApplicationQueryDTO queryDTO;
    private User user;
    private Institution institution;
    @BeforeEach
    void setUp() {
        // 设置申请DTO
        applyDTO = new InstitutionApplyDTO();
        applyDTO.setName("测试机构");
        applyDTO.setDescription("这是一个测试机构");
        applyDTO.setContactPerson("张三");
        applyDTO.setContactPhone("13800138000");
        applyDTO.setContactEmail("test@example.com");
        applyDTO.setAddress("北京市海淀区");
        // 设置申请实体
        application = InstitutionApplication.builder()
                .id(1L)
                .applicationId("APP12345678")
                .name("测试机构")
                .description("这是一个测试机构")
                .contactPerson("张三")
                .contactPhone("13800138000")
                .contactEmail("test@example.com")
                .address("北京市海淀区")
                .status(0)
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build();
        // 设置查询DTO
        queryDTO = new InstitutionApplicationQueryDTO();
        queryDTO.setPageNum(1);
        queryDTO.setPageSize(10);
        queryDTO.setStatus(0);
        // 设置用户
        user = User.builder()
                .id(1L)
                .username("admin")
                .password("password")
                .email("admin@example.com")
                .build();
        // 设置机构
        institution = Institution.builder()
                .id(1L)
                .name("测试机构")
                .description("这是一个测试机构")
                .contactPerson("张三")
                .contactPhone("13800138000")
                .contactEmail("test@example.com")
                .address("北京市海淀区")
                .registerCode("ABC12345")
                .status(1)
                .createdAt(LocalDateTime.now())
                .updatedAt(LocalDateTime.now())
                .build();
    }
    @Test
    void applyInstitution_Success() {
        // Arrange
        when(applicationRepository.save(any(InstitutionApplication.class))).thenReturn(application);
        doNothing().when(emailService).sendApplicationConfirmationEmail(anyString(), anyString(), anyString());
        // Act
        String applicationId = institutionService.applyInstitution(applyDTO);
        // Assert
        assertNotNull(applicationId);
        verify(applicationRepository, times(1)).save(any(InstitutionApplication.class));
        verify(emailService, times(1)).sendApplicationConfirmationEmail(anyString(), anyString(), anyString());
    }
    @Test
    void getApplicationStatus_Success() {
        // Arrange
        when(applicationRepository.findByApplicationIdAndContactEmail(anyString(), anyString()))
                .thenReturn(Optional.of(application));
        // Act
        InstitutionApplicationVO result = institutionService.getApplicationStatus("APP12345678", "test@example.com");
        // Assert
        assertNotNull(result);
        assertEquals(application.getId(), result.getId());
        assertEquals(application.getApplicationId(), result.getApplicationId());
        assertEquals(application.getName(), result.getName());
    }
    @Test
    void getApplicationStatus_NotFound() {
        // Arrange
        when(applicationRepository.findByApplicationIdAndContactEmail(anyString(), anyString()))
                .thenReturn(Optional.empty());
        // Act & Assert
        assertThrows(BusinessException.class, () ->
                institutionService.getApplicationStatus("APP12345678", "test@example.com"));
    }
    @Test
    void getApplications_Success() {
        // Arrange
        Page<InstitutionApplication> page = new PageImpl<>(Collections.singletonList(application));
        when(applicationRepository.findByStatus(anyInt(), any(Pageable.class))).thenReturn(page);
        // Act
        Page<InstitutionApplicationVO> result = institutionService.getApplications(queryDTO);
        // Assert
        assertNotNull(result);
        assertEquals(1, result.getTotalElements());
    }
    @Test
    void getApplicationDetail_Success() {
        // Arrange
        when(applicationRepository.findById(anyLong())).thenReturn(Optional.of(application));
        // Act
        InstitutionApplicationVO result = institutionService.getApplicationDetail(1L);
        // Assert
        assertNotNull(result);
        assertEquals(application.getId(), result.getId());
        assertEquals(application.getName(), result.getName());
    }
    @Test
    void getApplicationDetail_NotFound() {
        // Arrange
        when(applicationRepository.findById(anyLong())).thenReturn(Optional.empty());
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionService.getApplicationDetail(1L));
    }
    @Test
    void approveApplication_Success() {
        // Arrange
        when(applicationRepository.findById(anyLong())).thenReturn(Optional.of(application));
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.of(user));
        when(institutionRepository.save(any(Institution.class))).thenReturn(institution);
        when(applicationRepository.save(any(InstitutionApplication.class))).thenReturn(application);
        doNothing().when(emailService).sendApplicationApprovedEmail(anyString(), anyString(), anyString());
        doNothing().when(storageQuotaService).setQuota(anyLong(), any(QuotaType.class), anyLong(), any());
        // Act
        InstitutionVO result = institutionService.approveApplication(1L, "admin");
        // Assert
        assertNotNull(result);
        assertEquals(institution.getId(), result.getId());
        assertEquals(institution.getName(), result.getName());
        // 验证存储配额初始化
        verify(storageQuotaService, times(1)).setQuota(
                eq(institution.getId()),
                eq(QuotaType.VIDEO),
                eq(5L * 1024 * 1024 * 1024),
                isNull()
        );
        verify(storageQuotaService, times(1)).setQuota(
                eq(institution.getId()),
                eq(QuotaType.DOCUMENT),
                eq(2L * 1024 * 1024 * 1024),
                isNull()
        );
        verify(storageQuotaService, times(1)).setQuota(
                eq(institution.getId()),
                eq(QuotaType.TOTAL),
                eq(10L * 1024 * 1024 * 1024),
                isNull()
        );
        verify(emailService, times(1)).sendApplicationApprovedEmail(anyString(), anyString(), anyString());
    }
    @Test
    void approveApplication_ApplicationNotFound() {
        // Arrange
        when(applicationRepository.findById(anyLong())).thenReturn(Optional.empty());
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionService.approveApplication(1L, "admin"));
    }
    @Test
    void approveApplication_WrongStatus() {
        // Arrange
        application.setStatus(1); // 已通过状态
        when(applicationRepository.findById(anyLong())).thenReturn(Optional.of(application));
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionService.approveApplication(1L, "admin"));
    }
    @Test
    void rejectApplication_Success() {
        // Arrange
        when(applicationRepository.findById(anyLong())).thenReturn(Optional.of(application));
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.of(user));
        when(applicationRepository.save(any(InstitutionApplication.class))).thenReturn(application);
        doNothing().when(emailService).sendApplicationRejectedEmail(anyString(), anyString(), anyString());
        // Act
        institutionService.rejectApplication(1L, "原因", "admin");
        // Assert
        verify(applicationRepository, times(1)).save(any(InstitutionApplication.class));
        verify(emailService, times(1)).sendApplicationRejectedEmail(anyString(), anyString(), anyString());
    }
    @Test
    void getInstitutionRegisterCode_Success() {
        // Arrange
        user.setInstitutionId(1L);
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.of(user));
        when(institutionRepository.findById(anyLong())).thenReturn(Optional.of(institution));
        // Act
        String result = institutionService.getInstitutionRegisterCode("admin");
        // Assert
        assertEquals(institution.getRegisterCode(), result);
    }
    @Test
    void getInstitutionRegisterCode_UserNotAssociatedWithInstitution() {
        // Arrange
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.of(user));
        // Act & Assert
        assertThrows(BusinessException.class, () -> institutionService.getInstitutionRegisterCode("admin"));
    }
    @Test
    void approveApplication_ShouldRollbackOnQuotaError() {
        // Arrange
        when(applicationRepository.findById(anyLong())).thenReturn(Optional.of(application));
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.of(user));
        when(institutionRepository.save(any(Institution.class))).thenReturn(institution);
        doThrow(new RuntimeException("配额设置失败")).when(storageQuotaService)
                .setQuota(anyLong(), any(QuotaType.class), anyLong(), any());
        // Act & Assert
        assertThrows(RuntimeException.class, () -> institutionService.approveApplication(1L, "admin"));
        // 验证事务回滚
        verify(emailService, never()).sendApplicationApprovedEmail(anyString(), anyString(), anyString());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/MediaServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.model.dto.media.*;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.Media;
import com.zhangziqi.online_course_mine.model.enums.MediaStatus;
import com.zhangziqi.online_course_mine.model.enums.MediaType;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import com.zhangziqi.online_course_mine.model.vo.MediaVO;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.MediaRepository;
import com.zhangziqi.online_course_mine.service.impl.MediaServiceImpl;
import com.zhangziqi.online_course_mine.service.impl.S3MultipartUploadManager;
import com.zhangziqi.online_course_mine.service.impl.UploadStatusService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import software.amazon.awssdk.services.s3.model.CompleteMultipartUploadResponse;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
public class MediaServiceTest {
    @Mock
    private MediaRepository mediaRepository;
    @Mock
    private InstitutionRepository institutionRepository;
    @Mock
    private StorageQuotaService storageQuotaService;
    @Mock
    private S3MultipartUploadManager s3UploadManager;
    @Mock
    private UploadStatusService uploadStatusService;
    @InjectMocks
    private MediaServiceImpl mediaService;
    private Institution institution;
    private Media media;
    private MediaUploadInitDTO uploadInitDTO;
    private UploadStatusInfo uploadStatusInfo;
    private Long institutionId = 1L;
    private Long uploaderId = 2L;
    private Long mediaId = 3L;
    @BeforeEach
    void setUp() {
        // 设置测试数据
        institution = new Institution();
        institution.setId(institutionId);
        institution.setName("测试机构");
        media = new Media();
        media.setId(mediaId);
        media.setTitle("测试视频");
        media.setDescription("测试描述");
        media.setType(MediaType.VIDEO);
        media.setSize(1024 * 1024 * 10L); // 10MB
        media.setOriginalFilename("test.mp4");
        media.setStoragePath("video/1/123/test.mp4");
        media.setStatus(MediaStatus.UPLOADING);
        media.setInstitution(institution);
        media.setUploaderId(uploaderId);
        media.setUploadTime(LocalDateTime.now());
        media.setLastAccessTime(LocalDateTime.now());
        uploadInitDTO = new MediaUploadInitDTO();
        uploadInitDTO.setTitle("测试视频");
        uploadInitDTO.setDescription("测试描述");
        uploadInitDTO.setFilename("test.mp4");
        uploadInitDTO.setContentType("video/mp4");
        uploadInitDTO.setFileSize(1024 * 1024 * 10L); // 10MB
        uploadInitDTO.setChunkSize((int) (1024 * 1024 * 2L)); // 2MB
        // 计算总分片数
        int totalParts = (int) ((1024 * 1024 * 10L) / (1024 * 1024 * 2L));
        if ((1024 * 1024 * 10L) % (1024 * 1024 * 2L) != 0) {
            totalParts++;
        }
        uploadStatusInfo = UploadStatusInfo.builder()
                .mediaId(mediaId)
                .institutionId(institutionId)
                .uploaderId(uploaderId)
                .uploadId("test-upload-id")
                .objectKey("video/1/123/test.mp4")
                .filename("test.mp4")
                .contentType("video/mp4")
                .fileSize(1024 * 1024 * 10L)
                .status(MediaStatus.UPLOADING)
                .totalParts(totalParts)
                .completedParts(new ArrayList<>())
                .initiatedAt(LocalDateTime.now())
                .lastUpdatedAt(LocalDateTime.now())
                .expiresAt(LocalDateTime.now().plusHours(24))
                .build();
    }
    @Test
    void testInitiateUpload() {
        // Mock 方法调用
        when(institutionRepository.findById(institutionId)).thenReturn(Optional.of(institution));
        when(storageQuotaService.hasEnoughQuota(eq(institutionId), any(QuotaType.class), anyLong())).thenReturn(true);
        when(mediaRepository.save(any(Media.class))).thenAnswer(i -> {
            Media m = i.getArgument(0);
            m.setId(mediaId);
            return m;
        });
        when(s3UploadManager.initiateMultipartUpload(anyString(), anyString())).thenReturn("test-upload-id");
        when(s3UploadManager.batchGeneratePresignedUrls(anyString(), anyString(), anyInt(), anyInt()))
                .thenReturn(List.of(new PresignedUrlInfo(1, "https://test-url.com")));
        // 执行测试
        UploadInitiationVO result = mediaService.initiateUpload(uploadInitDTO, institutionId, uploaderId);
        // 验证结果
        assertNotNull(result);
        assertEquals(mediaId, result.getMediaId());
        assertEquals("test-upload-id", result.getUploadId());
        assertEquals(5, result.getTotalParts());
        assertEquals(1, result.getPresignedUrls().size());
        // 验证调用
        verify(mediaRepository).save(any(Media.class));
        verify(uploadStatusService).saveUploadStatus(any(UploadStatusInfo.class));
        verify(storageQuotaService, times(1)).updateUsedQuota(eq(institutionId), any(QuotaType.class), anyLong());
    }
    @Test
    void testGetUploadStatus() {
        // Mock 方法调用
        when(institutionRepository.findById(institutionId)).thenReturn(Optional.of(institution));
        when(mediaRepository.findByIdAndInstitution(mediaId, institution)).thenReturn(Optional.of(media));
        when(uploadStatusService.getUploadStatus(mediaId)).thenReturn(uploadStatusInfo);
        // 执行测试
        UploadStatusVO result = mediaService.getUploadStatus(mediaId, institutionId);
        // 验证结果
        assertNotNull(result);
        assertEquals(mediaId, result.getMediaId());
        assertEquals(MediaStatus.UPLOADING.name(), result.getStatus());
        assertEquals(5, result.getTotalParts());
        assertEquals(0, result.getCompletedParts());
        assertEquals(0.0, result.getProgressPercentage());
    }
    @Test
    void testNotifyPartCompleted() {
        // 准备测试数据
        PartCompletionDTO dto = new PartCompletionDTO(1, "test-etag");
        uploadStatusInfo.getCompletedParts().add(new UploadStatusInfo.PartInfo(1, "test-etag"));
        // Mock 方法调用
        when(institutionRepository.findById(institutionId)).thenReturn(Optional.of(institution));
        when(mediaRepository.findByIdAndInstitution(mediaId, institution)).thenReturn(Optional.of(media));
        when(uploadStatusService.updatePartInfo(eq(mediaId), any(UploadStatusInfo.PartInfo.class)))
                .thenReturn(uploadStatusInfo);
        // 执行测试
        UploadStatusVO result = mediaService.notifyPartCompleted(mediaId, dto, institutionId);
        // 验证结果
        assertNotNull(result);
        assertEquals(mediaId, result.getMediaId());
        assertEquals(1, result.getCompletedParts());
    }
    @Test
    void testCompleteUpload() {
        // 准备测试数据
        for (int i = 1; i <= 5; i++) {
            uploadStatusInfo.getCompletedParts().add(new UploadStatusInfo.PartInfo(i, "test-etag-" + i));
        }
        // Mock 方法调用
        when(institutionRepository.findById(institutionId)).thenReturn(Optional.of(institution));
        when(mediaRepository.findByIdAndInstitution(mediaId, institution)).thenReturn(Optional.of(media));
        when(uploadStatusService.getUploadStatus(mediaId)).thenReturn(uploadStatusInfo);
        when(s3UploadManager.completeMultipartUpload(anyString(), anyString(), anyList()))
                .thenReturn(CompleteMultipartUploadResponse.builder().build());
        when(mediaRepository.save(any(Media.class))).thenReturn(media);
        // 执行测试
        MediaVO result = mediaService.completeUpload(mediaId, institutionId);
        // 验证结果
        assertNotNull(result);
        assertEquals(mediaId, result.getId());
        assertEquals("测试视频", result.getTitle());
        // 验证调用
        verify(mediaRepository).save(any(Media.class));
        verify(uploadStatusService).saveUploadStatus(any(UploadStatusInfo.class));
    }
    @Test
    void testGetMediaAccessUrl() {
        // 准备测试数据
        media.setStatus(MediaStatus.COMPLETED);
        // Mock 方法调用
        when(institutionRepository.findById(institutionId)).thenReturn(Optional.of(institution));
        when(mediaRepository.findByIdAndInstitution(mediaId, institution)).thenReturn(Optional.of(media));
        when(s3UploadManager.generatePresignedGetUrl(anyString(), anyLong())).thenReturn("https://test-access-url.com");
        // 执行测试
        String result = mediaService.getMediaAccessUrl(mediaId, institutionId, 60L);
        // 验证结果
        assertNotNull(result);
        assertEquals("https://test-access-url.com", result);
        // 验证调用
        verify(mediaRepository).save(any(Media.class));
    }
    @Test
    void testGetMediaList() {
        // 准备测试数据
        List<Media> mediaList = List.of(media);
        Page<Media> mediaPage = new PageImpl<>(mediaList);
        // Mock 方法调用
        when(institutionRepository.findById(institutionId)).thenReturn(Optional.of(institution));
        when(mediaRepository.findByInstitution(eq(institution), any(Pageable.class))).thenReturn(mediaPage);
        // 执行测试
        Page<MediaVO> result = mediaService.getMediaList(institutionId, Pageable.unpaged());
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.getContent().size());
        assertEquals(mediaId, result.getContent().get(0).getId());
    }
    @Test
    void testResumeUpload() {
        // Mock 方法调用
        when(institutionRepository.findById(institutionId)).thenReturn(Optional.of(institution));
        when(mediaRepository.findByIdAndInstitution(mediaId, institution)).thenReturn(Optional.of(media));
        when(uploadStatusService.getUploadStatus(mediaId)).thenReturn(uploadStatusInfo);
        when(s3UploadManager.generatePresignedUrlForPart(anyString(), anyString(), anyInt()))
                .thenReturn("https://test-presigned-url.com");
        // 执行测试
        UploadInitiationVO result = mediaService.resumeUpload(mediaId, institutionId);
        // 验证结果
        assertNotNull(result);
        assertEquals(mediaId, result.getMediaId());
        assertEquals(5, result.getTotalParts());
        assertEquals(5, result.getPresignedUrls().size());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/MinioServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.config.MinioConfig;
import com.zhangziqi.online_course_mine.service.impl.MinioServiceImpl;
import io.minio.*;
import io.minio.messages.Item;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
class MinioServiceTest {
    @Mock
    private MinioClient minioClient;
    @Mock
    private MinioConfig minioConfig;
    private MinioService minioService;
    @BeforeEach
    void setUp() {
        minioService = new MinioServiceImpl(minioClient, minioConfig);
        when(minioConfig.getBucketName()).thenReturn("media-test");
    }
    @Test
    void uploadFile_Success() throws Exception {
        // 准备测试数据
        String objectName = "test-file.txt";
        String content = "Hello MinIO!";
        ByteArrayInputStream inputStream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8));
        String contentType = "text/plain";
        // 模拟MinIO客户端行为
        when(minioClient.bucketExists(any(BucketExistsArgs.class))).thenReturn(true);
        // 模拟配置
        String endpoint = "http://localhost:8999";
        String bucketName = "media-test";
        when(minioConfig.getEndpoint()).thenReturn(endpoint);
        when(minioConfig.getBucketName()).thenReturn(bucketName);
        // 预期的永久URL
        String expectedUrl = endpoint + "/" + bucketName + "/" + objectName;
        // 执行测试
        String url = minioService.uploadFile(objectName, inputStream, contentType);
        // 验证结果
        assertNotNull(url);
        assertEquals(expectedUrl, url);
        // 验证MinIO客户端的方法被调用
        verify(minioClient).bucketExists(any(BucketExistsArgs.class));
        verify(minioClient).putObject(any(PutObjectArgs.class));
        // 不再验证getPresignedObjectUrl，因为我们不再使用它
    }
    @Test
    void deleteFile_Success() throws Exception {
        // 准备测试数据
        String objectName = "test-file.txt";
        // 执行测试
        boolean result = minioService.deleteFile(objectName);
        // 验证结果
        assertTrue(result);
        // 验证MinIO客户端的方法被调用
        verify(minioClient).removeObject(any(RemoveObjectArgs.class));
    }
    @Test
    void listAllFiles_Success() throws Exception {
        // 准备测试数据
        List<String> expectedFiles = List.of("file1.txt", "file2.txt");
        // 创建模拟的Result<Item>
        List<Result<Item>> mockResults = new ArrayList<>();
        for (String fileName : expectedFiles) {
            Result<Item> mockResult = mock(Result.class);
            Item mockItem = mock(Item.class);
            when(mockItem.objectName()).thenReturn(fileName);
            when(mockResult.get()).thenReturn(mockItem);
            mockResults.add(mockResult);
        }
        // 创建一个可迭代的对象
        Iterable<Result<Item>> mockIterable = () -> mockResults.iterator();
        // 模拟MinIO客户端行为
        when(minioClient.listObjects(any(ListObjectsArgs.class))).thenReturn(mockIterable);
        // 执行测试
        List<String> files = minioService.listAllFiles();
        // 验证结果
        assertNotNull(files);
        assertEquals(expectedFiles.size(), files.size());
        assertTrue(files.containsAll(expectedFiles));
        // 验证MinIO客户端的方法被调用
        verify(minioClient).listObjects(any(ListObjectsArgs.class));
    }
    @Test
    void checkAndCreateBucket_BucketExists() throws Exception {
        // 模拟MinIO客户端行为
        when(minioClient.bucketExists(any(BucketExistsArgs.class))).thenReturn(true);
        // 执行测试
        minioService.checkAndCreateBucket();
        // 验证MinIO客户端的方法被调用
        verify(minioClient).bucketExists(any(BucketExistsArgs.class));
        verify(minioClient, never()).makeBucket(any(MakeBucketArgs.class));
    }
    @Test
    void checkAndCreateBucket_BucketDoesNotExist() throws Exception {
        // 模拟MinIO客户端行为
        when(minioClient.bucketExists(any(BucketExistsArgs.class))).thenReturn(false);
        // 执行测试
        minioService.checkAndCreateBucket();
        // 验证MinIO客户端的方法被调用
        verify(minioClient).bucketExists(any(BucketExistsArgs.class));
        verify(minioClient).makeBucket(any(MakeBucketArgs.class));
    }
    @Test
    void getFileUrl_Success() {
        // 准备测试数据
        String objectName = "test-file.txt";
        String endpoint = "http://localhost:8999";
        String bucketName = "media-test";
        // 模拟配置
        when(minioConfig.getEndpoint()).thenReturn(endpoint);
        when(minioConfig.getBucketName()).thenReturn(bucketName);
        // 预期的永久URL
        String expectedUrl = endpoint + "/" + bucketName + "/" + objectName;
        // 执行测试
        String url = minioService.getFileUrl(objectName);
        // 验证结果
        assertNotNull(url);
        assertEquals(expectedUrl, url);
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/PermissionServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.PermissionDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.vo.PermissionVO;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.service.impl.PermissionServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.ActiveProfiles;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test")
public class PermissionServiceTest {
    @Mock
    private PermissionRepository permissionRepository;
    @Mock
    private RoleRepository roleRepository;
    @InjectMocks
    private PermissionServiceImpl permissionService;
    private Permission testPermission;
    private PermissionDTO testPermissionDTO;
    @BeforeEach
    void setUp() {
        testPermission = Permission.builder()
                .id(1L)
                .name("测试权限")
                .code("test:read")
                .url("/api/test/**")
                .method("GET")
                .description("测试权限描述")
                .build();
        testPermissionDTO = new PermissionDTO();
        testPermissionDTO.setName("测试权限");
        testPermissionDTO.setCode("test:read");
        testPermissionDTO.setUrl("/api/test/**");
        testPermissionDTO.setMethod("GET");
        testPermissionDTO.setDescription("测试权限描述");
    }
    @Test
    void getPermissionListShouldReturnAllPermissions() {
        // 准备测试数据
        List<Permission> permissions = Arrays.asList(testPermission);
        // 模拟Repository方法
        when(permissionRepository.findAll()).thenReturn(permissions);
        // 执行测试
        List<PermissionVO> result = permissionService.getPermissionList();
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(testPermission.getId(), result.get(0).getId());
        assertEquals(testPermission.getName(), result.get(0).getName());
        assertEquals(testPermission.getCode(), result.get(0).getCode());
    }
    @Test
    void getPermissionByIdShouldReturnPermissionWhenExists() {
        // 模拟Repository方法
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.of(testPermission));
        // 执行测试
        PermissionVO result = permissionService.getPermissionById(1L);
        // 验证结果
        assertNotNull(result);
        assertEquals(testPermission.getId(), result.getId());
        assertEquals(testPermission.getName(), result.getName());
    }
    @Test
    void getPermissionByIdShouldThrowExceptionWhenNotExists() {
        // 模拟Repository方法
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> permissionService.getPermissionById(1L));
    }
    @Test
    void createPermissionShouldReturnCreatedPermission() {
        // 模拟Repository方法
        when(permissionRepository.save(any(Permission.class))).thenReturn(testPermission);
        when(permissionRepository.findByCode(anyString())).thenReturn(Optional.empty());
        // 执行测试
        PermissionVO result = permissionService.createPermission(testPermissionDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(testPermission.getId(), result.getId());
        assertEquals(testPermission.getName(), result.getName());
        assertEquals(testPermission.getCode(), result.getCode());
        // 验证仓库方法被调用
        verify(permissionRepository, times(1)).save(any(Permission.class));
    }
    @Test
    void updatePermissionShouldReturnUpdatedPermission() {
        // 准备更新数据
        PermissionDTO updateDTO = new PermissionDTO();
        updateDTO.setName("更新权限");
        updateDTO.setCode("test:update");
        updateDTO.setUrl("/api/test/update");
        updateDTO.setMethod("PUT");
        updateDTO.setDescription("更新权限描述");
        // 准备更新后的权限
        Permission updatedPermission = Permission.builder()
                .id(1L)
                .name("更新权限")
                .code("test:update")
                .url("/api/test/update")
                .method("PUT")
                .description("更新权限描述")
                .build();
        // 模拟Repository方法 - 只模拟真正需要的方法
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.of(testPermission));
        when(permissionRepository.save(any(Permission.class))).thenReturn(updatedPermission);
        // 执行测试
        PermissionVO result = permissionService.updatePermission(1L, updateDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(updatedPermission.getId(), result.getId());
        assertEquals(updatedPermission.getName(), result.getName());
        assertEquals(updatedPermission.getCode(), result.getCode());
        // 验证仓库方法被调用
        verify(permissionRepository, times(1)).save(any(Permission.class));
    }
    @Test
    void deletePermissionShouldSucceedWhenPermissionExists() {
        // 准备测试数据
        // 模拟Repository方法 - 只模拟真正需要的方法
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.of(testPermission));
        doNothing().when(permissionRepository).delete(any(Permission.class));
        // 执行测试
        permissionService.deletePermission(1L);
        // 验证方法被调用
        verify(permissionRepository, times(1)).delete(any(Permission.class));
    }
    @Test
    void deletePermissionShouldThrowExceptionWhenPermissionNotExists() {
        // 模拟Repository方法
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> permissionService.deletePermission(1L));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/RoleServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.RoleDTO;
import com.zhangziqi.online_course_mine.model.entity.Permission;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.vo.RoleVO;
import com.zhangziqi.online_course_mine.repository.PermissionRepository;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.impl.RoleServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.ActiveProfiles;
import java.util.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test")
public class RoleServiceTest {
    @Mock
    private RoleRepository roleRepository;
    @Mock
    private PermissionRepository permissionRepository;
    @Mock
    private UserRepository userRepository;
    @InjectMocks
    private RoleServiceImpl roleService;
    private Role testRole;
    private RoleDTO testRoleDTO;
    private Permission testPermission;
    @BeforeEach
    void setUp() {
        // 创建测试权限
        testPermission = Permission.builder()
                .id(1L)
                .name("测试权限")
                .code("TEST_READ")
                .url("/api/test/**")
                .method("GET")
                .description("测试权限描述")
                .build();
        // 创建测试角色
        testRole = Role.builder()
                .id(1L)
                .name("测试角色")
                .code("ROLE_TEST")
                .description("测试角色描述")
                .permissions(new HashSet<>(Collections.singletonList(testPermission)))
                .build();
        // 创建测试角色DTO
        testRoleDTO = new RoleDTO();
        testRoleDTO.setName("测试角色");
        testRoleDTO.setCode("ROLE_TEST");
        testRoleDTO.setDescription("测试角色描述");
        testRoleDTO.setPermissionIds(new HashSet<>(Collections.singletonList(1L)));
    }
    @Test
    void getRoleListShouldReturnAllRoles() {
        // 准备测试数据
        List<Role> roles = Arrays.asList(testRole);
        // 模拟Repository方法
        when(roleRepository.findAll()).thenReturn(roles);
        // 执行测试
        List<RoleVO> result = roleService.getRoleList();
        // 验证结果
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(testRole.getId(), result.get(0).getId());
        assertEquals(testRole.getName(), result.get(0).getName());
        assertEquals(testRole.getCode(), result.get(0).getCode());
    }
    @Test
    void getRoleByIdShouldReturnRoleWhenExists() {
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.of(testRole));
        // 执行测试
        RoleVO result = roleService.getRoleById(1L);
        // 验证结果
        assertNotNull(result);
        assertEquals(testRole.getId(), result.getId());
        assertEquals(testRole.getName(), result.getName());
    }
    @Test
    void getRoleByIdShouldThrowExceptionWhenNotExists() {
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.getRoleById(1L));
    }
    @Test
    void getRoleByCodeShouldReturnRoleWhenExists() {
        // 模拟Repository方法
        when(roleRepository.findByCode(anyString())).thenReturn(Optional.of(testRole));
        // 执行测试
        Role result = roleService.getRoleByCode("ROLE_TEST");
        // 验证结果
        assertNotNull(result);
        assertEquals(testRole.getId(), result.getId());
        assertEquals(testRole.getCode(), result.getCode());
    }
    @Test
    void getRoleByCodeShouldThrowExceptionWhenNotExists() {
        // 模拟Repository方法
        when(roleRepository.findByCode(anyString())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.getRoleByCode("ROLE_NOT_EXISTS"));
    }
    @Test
    void createRoleShouldReturnCreatedRole() {
        // 模拟Repository方法
        when(roleRepository.findByCode(anyString())).thenReturn(Optional.empty());
        when(roleRepository.findByName(anyString())).thenReturn(Optional.empty());
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.of(testPermission));
        when(roleRepository.save(any(Role.class))).thenReturn(testRole);
        // 执行测试
        RoleVO result = roleService.createRole(testRoleDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(testRole.getId(), result.getId());
        assertEquals(testRole.getName(), result.getName());
        assertEquals(testRole.getCode(), result.getCode());
        // 验证仓库方法被调用
        verify(roleRepository, times(1)).save(any(Role.class));
    }
    @Test
    void createRoleShouldThrowExceptionWhenCodeExists() {
        // 模拟Repository方法
        when(roleRepository.findByCode(anyString())).thenReturn(Optional.of(testRole));
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.createRole(testRoleDTO));
    }
    @Test
    void createRoleShouldThrowExceptionWhenNameExists() {
        // 模拟Repository方法
        when(roleRepository.findByCode(anyString())).thenReturn(Optional.empty());
        when(roleRepository.findByName(anyString())).thenReturn(Optional.of(testRole));
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.createRole(testRoleDTO));
    }
    @Test
    void updateRoleShouldReturnUpdatedRole() {
        // 准备更新数据
        RoleDTO updateDTO = new RoleDTO();
        updateDTO.setName("更新角色");
        updateDTO.setCode("ROLE_UPDATE");
        updateDTO.setDescription("更新角色描述");
        Set<Long> permissionIds = new HashSet<>(Collections.singletonList(1L));
        updateDTO.setPermissionIds(permissionIds);
        // 准备更新后的角色
        Role updatedRole = Role.builder()
                .id(1L)
                .name("更新角色")
                .code("ROLE_UPDATE")
                .description("更新角色描述")
                .permissions(new HashSet<>(Collections.singletonList(testPermission)))
                .build();
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.of(testRole));
        when(roleRepository.findByCode(anyString())).thenReturn(Optional.empty());
        when(roleRepository.findByName(anyString())).thenReturn(Optional.empty());
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.of(testPermission));
        when(roleRepository.save(any(Role.class))).thenReturn(updatedRole);
        // 执行测试
        RoleVO result = roleService.updateRole(1L, updateDTO);
        // 验证结果
        assertNotNull(result);
        assertEquals(updatedRole.getId(), result.getId());
        assertEquals(updatedRole.getName(), result.getName());
        assertEquals(updatedRole.getCode(), result.getCode());
        // 验证仓库方法被调用
        verify(roleRepository, times(1)).save(any(Role.class));
    }
    @Test
    void updateRoleShouldThrowExceptionWhenRoleNotExists() {
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.updateRole(1L, testRoleDTO));
    }
    @Test
    void updateRoleShouldThrowExceptionWhenCodeExists() {
        // 创建另一个角色
        Role anotherRole = Role.builder()
                .id(2L)
                .name("另一个角色")
                .code("ROLE_ANOTHER")
                .build();
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.of(testRole));
        when(roleRepository.findByCode("ROLE_ANOTHER")).thenReturn(Optional.of(anotherRole));
        // 准备更新数据
        RoleDTO updateDTO = new RoleDTO();
        updateDTO.setCode("ROLE_ANOTHER");
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.updateRole(1L, updateDTO));
    }
    @Test
    void deleteRoleShouldSucceedWhenRoleExists() {
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.of(testRole));
        when(userRepository.findAll()).thenReturn(Collections.emptyList());
        doNothing().when(roleRepository).delete(any(Role.class));
        // 执行测试
        roleService.deleteRole(1L);
        // 验证方法被调用
        verify(roleRepository, times(1)).delete(any(Role.class));
    }
    @Test
    void deleteRoleShouldThrowExceptionWhenRoleNotExists() {
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.deleteRole(1L));
    }
    @Test
    void deleteRoleShouldThrowExceptionWhenRoleIsReferenced() {
        // 模拟Repository方法 - 角色被用户引用
        when(roleRepository.findById(anyLong())).thenReturn(Optional.of(testRole));
        when(userRepository.findAll()).thenReturn(Collections.singletonList(mock(com.zhangziqi.online_course_mine.model.entity.User.class)));
        // 设置mock用户引用了角色
        when(userRepository.findAll().get(0).getRoles()).thenReturn(Set.of(testRole));
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.deleteRole(1L));
    }
    @Test
    void assignPermissionsShouldReturnUpdatedRole() {
        // 准备权限ID
        Set<Long> permissionIds = new HashSet<>(Collections.singletonList(1L));
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.of(testRole));
        when(permissionRepository.findById(anyLong())).thenReturn(Optional.of(testPermission));
        when(roleRepository.save(any(Role.class))).thenReturn(testRole);
        // 执行测试
        RoleVO result = roleService.assignPermissions(1L, permissionIds);
        // 验证结果
        assertNotNull(result);
        assertEquals(testRole.getId(), result.getId());
        // 验证仓库方法被调用
        verify(roleRepository, times(1)).save(any(Role.class));
    }
    @Test
    void assignPermissionsShouldThrowExceptionWhenRoleNotExists() {
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.empty());
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.assignPermissions(1L, Set.of(1L)));
    }
    @Test
    void assignPermissionsShouldThrowExceptionWhenPermissionIdsIsEmpty() {
        // 模拟Repository方法
        when(roleRepository.findById(anyLong())).thenReturn(Optional.of(testRole));
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.assignPermissions(1L, Collections.emptySet()));
    }
    @Test
    void batchDeleteRolesShouldSucceedWhenRolesExist() {
        // 准备测试数据
        List<Long> ids = Arrays.asList(1L, 2L);
        Role role1 = Role.builder().id(1L).name("角色1").code("ROLE_1").build();
        Role role2 = Role.builder().id(2L).name("角色2").code("ROLE_2").build();
        // 模拟Repository方法
        when(roleRepository.findById(1L)).thenReturn(Optional.of(role1));
        when(roleRepository.findById(2L)).thenReturn(Optional.of(role2));
        when(userRepository.findAll()).thenReturn(Collections.emptyList());
        doNothing().when(roleRepository).delete(any(Role.class));
        // 执行测试
        roleService.batchDeleteRoles(ids);
        // 验证方法被调用
        verify(roleRepository, times(2)).delete(any(Role.class));
    }
    @Test
    void batchDeleteRolesShouldThrowExceptionWhenIdsIsEmpty() {
        // 执行测试并验证异常
        assertThrows(BusinessException.class, () -> roleService.batchDeleteRoles(Collections.emptyList()));
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/StorageQuotaServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.ResourceNotFoundException;
import com.zhangziqi.online_course_mine.model.entity.Institution;
import com.zhangziqi.online_course_mine.model.entity.StorageQuota;
import com.zhangziqi.online_course_mine.model.enums.QuotaType;
import com.zhangziqi.online_course_mine.model.vo.QuotaInfoVO;
import com.zhangziqi.online_course_mine.repository.InstitutionRepository;
import com.zhangziqi.online_course_mine.repository.StorageQuotaRepository;
import com.zhangziqi.online_course_mine.service.impl.StorageQuotaServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
@ExtendWith(MockitoExtension.class)
class StorageQuotaServiceTest {
    @Mock
    private StorageQuotaRepository storageQuotaRepository;
    @Mock
    private InstitutionRepository institutionRepository;
    @InjectMocks
    private StorageQuotaServiceImpl storageQuotaService;
    private Institution testInstitution;
    private StorageQuota testQuota;
    private static final Long INSTITUTION_ID = 1L;
    @BeforeEach
    void setUp() {
        testInstitution = Institution.builder()
                .id(INSTITUTION_ID)
                .name("测试机构")
                .status(1)
                .build();
        testQuota = new StorageQuota();
        testQuota.setId(1L);
        testQuota.setInstitution(testInstitution);
        testQuota.setType(QuotaType.VIDEO);
        testQuota.setTotalQuota(5L * 1024 * 1024 * 1024); // 5GB
        testQuota.setUsedQuota(1L * 1024 * 1024 * 1024);  // 1GB
        testQuota.setCreatedAt(LocalDateTime.now());
        testQuota.setUpdatedAt(LocalDateTime.now());
    }
    @Test
    void hasEnoughQuota_WhenInstitutionNotExists_ThrowsException() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () ->
                storageQuotaService.hasEnoughQuota(INSTITUTION_ID, QuotaType.VIDEO, 1024L));
    }
    @Test
    void hasEnoughQuota_WhenNotEnoughSpace_ReturnsFalse() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.of(testInstitution));
        when(storageQuotaRepository.findByInstitutionAndType(testInstitution, QuotaType.VIDEO))
                .thenReturn(Optional.of(testQuota));
        // 尝试上传超过剩余配额的文件
        long remainingQuota = testQuota.getTotalQuota() - testQuota.getUsedQuota();
        boolean result = storageQuotaService.hasEnoughQuota(INSTITUTION_ID, QuotaType.VIDEO, remainingQuota + 1024L);
        assertFalse(result);
    }
    @Test
    void hasEnoughQuota_WhenEnoughSpace_ReturnsTrue() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.of(testInstitution));
        when(storageQuotaRepository.findByInstitutionAndType(testInstitution, QuotaType.VIDEO))
                .thenReturn(Optional.of(testQuota));
        // 尝试上传小于剩余配额的文件
        long remainingQuota = testQuota.getTotalQuota() - testQuota.getUsedQuota();
        boolean result = storageQuotaService.hasEnoughQuota(INSTITUTION_ID, QuotaType.VIDEO, remainingQuota - 1024L);
        assertTrue(result);
    }
    @Test
    void getQuotaInfo_WhenInstitutionNotExists_ThrowsException() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () ->
                storageQuotaService.getQuotaInfo(INSTITUTION_ID));
    }
    @Test
    void getQuotaInfo_WhenQuotaExists_ReturnsQuotaInfo() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.of(testInstitution));
        when(storageQuotaRepository.findByInstitution(testInstitution))
                .thenReturn(Arrays.asList(testQuota));
        QuotaInfoVO result = storageQuotaService.getQuotaInfo(INSTITUTION_ID);
        assertNotNull(result);
        assertEquals(QuotaType.TOTAL.name(), result.getType());
        assertEquals(testQuota.getTotalQuota(), result.getTotalQuota());
        assertEquals(testQuota.getUsedQuota(), result.getUsedQuota());
        assertEquals(testQuota.getTotalQuota() - testQuota.getUsedQuota(), result.getAvailableQuota());
    }
    @Test
    void getAllQuotas_WhenInstitutionNotExists_ThrowsException() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () ->
                storageQuotaService.getAllQuotas(INSTITUTION_ID));
    }
    @Test
    void getAllQuotas_WhenQuotasExist_ReturnsAllQuotas() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.of(testInstitution));
        StorageQuota documentQuota = new StorageQuota();
        documentQuota.setId(2L);
        documentQuota.setInstitution(testInstitution);
        documentQuota.setType(QuotaType.DOCUMENT);
        documentQuota.setTotalQuota(2L * 1024 * 1024 * 1024);
        documentQuota.setUsedQuota(512L * 1024 * 1024);
        when(storageQuotaRepository.findByInstitution(testInstitution))
                .thenReturn(Arrays.asList(testQuota, documentQuota));
        List<QuotaInfoVO> results = storageQuotaService.getAllQuotas(INSTITUTION_ID);
        assertEquals(2, results.size());
        assertTrue(results.stream().anyMatch(q -> q.getType().equals(QuotaType.VIDEO.name())));
        assertTrue(results.stream().anyMatch(q -> q.getType().equals(QuotaType.DOCUMENT.name())));
    }
    @Test
    void updateUsedQuota_WhenInstitutionNotExists_ThrowsException() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () ->
                storageQuotaService.updateUsedQuota(INSTITUTION_ID, QuotaType.VIDEO, 1024L));
    }
    @Test
    void updateUsedQuota_WhenQuotaExists_UpdatesSuccessfully() {
        // Arrange
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.of(testInstitution));
        long initialVideoQuota = 1L * 1024 * 1024 * 1024; // 1GB
        testQuota.setUsedQuota(initialVideoQuota);
        System.out.println("Initial usedQuota: " + testQuota.getUsedQuota()); // 调试信息
        when(storageQuotaRepository.findByInstitutionAndType(testInstitution, QuotaType.VIDEO))
                .thenReturn(Optional.of(testQuota));
        when(storageQuotaRepository.save(any(StorageQuota.class)))
                .thenAnswer(invocation -> invocation.getArgument(0));
        long sizeDelta = 1024L * 1024; // 1MB
        storageQuotaService.updateUsedQuota(INSTITUTION_ID, QuotaType.VIDEO, sizeDelta);
        // 验证调用次数
        verify(institutionRepository, times(2)).findById(INSTITUTION_ID);
        verify(storageQuotaRepository, times(1)).findByInstitutionAndType(testInstitution, QuotaType.VIDEO);
        verify(storageQuotaRepository, times(1)).findByInstitutionAndType(testInstitution, QuotaType.TOTAL);
        ArgumentCaptor<StorageQuota> quotaCaptor = ArgumentCaptor.forClass(StorageQuota.class);
        verify(storageQuotaRepository).save(quotaCaptor.capture());
        StorageQuota savedQuota = quotaCaptor.getValue();
        assertEquals(testQuota.getUsedQuota() + sizeDelta, savedQuota.getUsedQuota());
    }
    @Test
    void setQuota_WhenInstitutionNotExists_ThrowsException() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.empty());
        assertThrows(ResourceNotFoundException.class, () ->
                storageQuotaService.setQuota(INSTITUTION_ID, QuotaType.VIDEO, 1024L, null));
    }
    @Test
    void testSetQuota_WhenSettingNewQuota_CreatesSuccessfully() {
        when(institutionRepository.findById(INSTITUTION_ID)).thenReturn(Optional.of(testInstitution));
        when(storageQuotaRepository.findByInstitutionAndType(testInstitution, QuotaType.VIDEO))
                .thenReturn(Optional.empty());
        when(storageQuotaRepository.save(any(StorageQuota.class)))
                .thenAnswer(invocation -> invocation.getArgument(0));
        long totalQuota = 5L * 1024 * 1024 * 1024; // 5GB
        LocalDateTime expiresAt = LocalDateTime.now().plusDays(30);
        storageQuotaService.setQuota(INSTITUTION_ID, QuotaType.VIDEO, totalQuota, expiresAt);
        ArgumentCaptor<StorageQuota> quotaCaptor = ArgumentCaptor.forClass(StorageQuota.class);
        verify(storageQuotaRepository).save(quotaCaptor.capture());
        StorageQuota savedQuota = quotaCaptor.getValue();
        assertEquals(QuotaType.VIDEO, savedQuota.getType());
        assertEquals(totalQuota, savedQuota.getTotalQuota());
        assertEquals(0L, savedQuota.getUsedQuota());
        assertEquals(expiresAt, savedQuota.getExpiresAt());
        assertTrue(savedQuota.getEnabled());
    }
}
</file>

<file path="src/test/java/com/zhangziqi/online_course_mine/service/UserServiceTest.java">
package com.zhangziqi.online_course_mine.service;
import com.zhangziqi.online_course_mine.exception.BusinessException;
import com.zhangziqi.online_course_mine.model.dto.RegisterDTO;
import com.zhangziqi.online_course_mine.model.entity.Role;
import com.zhangziqi.online_course_mine.model.entity.User;
import com.zhangziqi.online_course_mine.model.enums.RoleEnum;
import com.zhangziqi.online_course_mine.model.vo.UserVO;
import com.zhangziqi.online_course_mine.repository.RoleRepository;
import com.zhangziqi.online_course_mine.repository.UserRepository;
import com.zhangziqi.online_course_mine.service.impl.UserServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.contains;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;
/**
 * 用户服务测试
 */
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test") // 使用测试环境配置
public class UserServiceTest {
    @Mock
    private UserRepository userRepository;
    @Mock
    private RoleRepository roleRepository;
    @Mock
    private PasswordEncoder passwordEncoder;
    @Mock
    private EmailService emailService;
    @Mock
    private MinioService minioService;
    @InjectMocks
    private UserServiceImpl userService;
    private RegisterDTO registerDTO;
    private User user;
    private Role userRole;
    @BeforeEach
    void setUp() {
        // 初始化注册DTO
        registerDTO = new RegisterDTO();
        registerDTO.setUsername("testuser");
        registerDTO.setPassword("password123");
        registerDTO.setEmail("test@example.com");
        registerDTO.setPhone("13812345678");
        // 初始化角色
        userRole = new Role();
        userRole.setName("普通用户");
        userRole.setCode(RoleEnum.USER.getCode());
        // 初始化用户
        user = User.builder()
                .username(registerDTO.getUsername())
                .password("encodedPassword")
                .email(registerDTO.getEmail())
                .phone(registerDTO.getPhone())
                .status(1)
                .roles(Collections.singleton(userRole))
                .build();
    }
    @Test
    void registerShouldSucceedWhenUserInfoValid() {
        // 准备
        when(userRepository.existsByUsername(registerDTO.getUsername())).thenReturn(false);
        when(userRepository.existsByEmail(registerDTO.getEmail())).thenReturn(false);
        when(userRepository.existsByPhone(registerDTO.getPhone())).thenReturn(false);
        when(roleRepository.findByCode(RoleEnum.USER.getCode())).thenReturn(Optional.of(userRole));
        when(passwordEncoder.encode(registerDTO.getPassword())).thenReturn("encodedPassword");
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        User result = userService.register(registerDTO);
        // 验证
        assertNotNull(result);
        assertEquals(registerDTO.getUsername(), result.getUsername());
        verify(userRepository).existsByUsername(registerDTO.getUsername());
        verify(userRepository).existsByEmail(registerDTO.getEmail());
        verify(userRepository).existsByPhone(registerDTO.getPhone());
        verify(roleRepository).findByCode(RoleEnum.USER.getCode());
        verify(passwordEncoder).encode(registerDTO.getPassword());
        verify(userRepository).save(any(User.class));
    }
    @Test
    void registerShouldThrowExceptionWhenUsernameExists() {
        // 准备
        when(userRepository.existsByUsername(registerDTO.getUsername())).thenReturn(true);
        // 执行并验证
        assertThrows(BusinessException.class, () -> userService.register(registerDTO));
        verify(userRepository).existsByUsername(registerDTO.getUsername());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void registerShouldThrowExceptionWhenEmailExists() {
        // 准备
        when(userRepository.existsByUsername(registerDTO.getUsername())).thenReturn(false);
        when(userRepository.existsByEmail(registerDTO.getEmail())).thenReturn(true);
        // 执行并验证
        assertThrows(BusinessException.class, () -> userService.register(registerDTO));
        verify(userRepository).existsByUsername(registerDTO.getUsername());
        verify(userRepository).existsByEmail(registerDTO.getEmail());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void registerShouldThrowExceptionWhenPhoneExists() {
        // 准备
        when(userRepository.existsByUsername(registerDTO.getUsername())).thenReturn(false);
        when(userRepository.existsByEmail(registerDTO.getEmail())).thenReturn(false);
        when(userRepository.existsByPhone(registerDTO.getPhone())).thenReturn(true);
        // 执行并验证
        assertThrows(BusinessException.class, () -> userService.register(registerDTO));
        verify(userRepository).existsByUsername(registerDTO.getUsername());
        verify(userRepository).existsByEmail(registerDTO.getEmail());
        verify(userRepository).existsByPhone(registerDTO.getPhone());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void getUserByUsernameShouldReturnUserWhenUserExists() {
        // 准备
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        // 执行
        User result = userService.getUserByUsername(user.getUsername());
        // 验证
        assertNotNull(result);
        assertEquals(user.getUsername(), result.getUsername());
        verify(userRepository).findByUsername(user.getUsername());
    }
    @Test
    void getUserByUsernameShouldThrowExceptionWhenUserNotExists() {
        // 准备
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.empty());
        // 执行并验证
        assertThrows(BusinessException.class, () -> userService.getUserByUsername("nonexistentuser"));
        verify(userRepository).findByUsername("nonexistentuser");
    }
    @Test
    void existsByUsernameShouldReturnTrueWhenUserExists() {
        // 准备
        when(userRepository.existsByUsername(user.getUsername())).thenReturn(true);
        // 执行
        boolean result = userService.existsByUsername(user.getUsername());
        // 验证
        assertTrue(result);
        verify(userRepository).existsByUsername(user.getUsername());
    }
    @Test
    void existsByEmailShouldReturnTrueWhenEmailExists() {
        // 准备
        when(userRepository.existsByEmail(user.getEmail())).thenReturn(true);
        // 执行
        boolean result = userService.existsByEmail(user.getEmail());
        // 验证
        assertTrue(result);
        verify(userRepository).existsByEmail(user.getEmail());
    }
    @Test
    void existsByPhoneShouldReturnTrueWhenPhoneExists() {
        // 准备
        when(userRepository.existsByPhone(user.getPhone())).thenReturn(true);
        // 执行
        boolean result = userService.existsByPhone(user.getPhone());
        // 验证
        assertTrue(result);
        verify(userRepository).existsByPhone(user.getPhone());
    }
    @Test
    void updateLastLoginTimeShouldUpdateTimeWhenUserExists() {
        // 准备
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        userService.updateLastLoginTime(user.getUsername());
        // 验证
        verify(userRepository).findByUsername(user.getUsername());
        verify(userRepository).save(any(User.class));
        assertNotNull(user.getLastLoginAt());
    }
    @Test
    void updateLastLoginTimeShouldThrowExceptionWhenUserNotExists() {
        // 准备
        when(userRepository.findByUsername(anyString())).thenReturn(Optional.empty());
        // 执行并验证
        assertThrows(BusinessException.class, () -> userService.updateLastLoginTime("nonexistentuser"));
        verify(userRepository).findByUsername("nonexistentuser");
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void getCurrentUserShouldReturnUserInfoWhenUserExists() {
        // 准备
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        // 执行
        UserVO result = userService.getCurrentUser(user.getUsername());
        // 验证
        assertNotNull(result);
        assertEquals(user.getUsername(), result.getUsername());
        assertEquals(user.getEmail(), result.getEmail());
        assertEquals(user.getPhone(), result.getPhone());
        verify(userRepository).findByUsername(user.getUsername());
    }
    @Test
    void updateCurrentUserProfileShouldUpdateUserInfoWhenValid() {
        // 准备
        String nickname = "新昵称";
        String phone = "13900001111";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(userRepository.existsByPhone(phone)).thenReturn(false);
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        UserVO result = userService.updateCurrentUserProfile(user.getUsername(), nickname, phone);
        // 验证
        assertNotNull(result);
        assertEquals(nickname, user.getNickname());
        assertEquals(phone, user.getPhone());
        verify(userRepository).findByUsername(user.getUsername());
        verify(userRepository).existsByPhone(phone);
        verify(userRepository).save(user);
    }
    @Test
    void updateCurrentUserProfileShouldThrowExceptionWhenPhoneExists() {
        // 准备
        String nickname = "新昵称";
        String phone = "13900001111";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(userRepository.existsByPhone(phone)).thenReturn(true);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.updateCurrentUserProfile(user.getUsername(), nickname, phone)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(userRepository).existsByPhone(phone);
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void changePasswordShouldSucceedWhenOldPasswordCorrect() {
        // 准备
        String oldPassword = "oldPassword";
        String newPassword = "newPassword";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(oldPassword, user.getPassword())).thenReturn(true);
        when(passwordEncoder.matches(newPassword, user.getPassword())).thenReturn(false);
        when(passwordEncoder.encode(newPassword)).thenReturn("encodedNewPassword");
        // 执行
        boolean result = userService.changePassword(user.getUsername(), oldPassword, newPassword);
        // 验证
        assertTrue(result);
        assertEquals("encodedNewPassword", user.getPassword());
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder).encode(newPassword);
        verify(userRepository).save(user);
    }
    @Test
    void changePasswordShouldThrowExceptionWhenOldPasswordIncorrect() {
        // 准备
        String oldPassword = "wrongPassword";
        String newPassword = "newPassword";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(oldPassword, user.getPassword())).thenReturn(false);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.changePassword(user.getUsername(), oldPassword, newPassword)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder, never()).encode(any(String.class));
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void changePasswordShouldThrowExceptionWhenNewPasswordSameAsOld() {
        // 准备
        String oldPassword = "oldPassword";
        String newPassword = "oldPassword"; // 新密码与旧密码相同
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(oldPassword, user.getPassword())).thenReturn(true);
        when(passwordEncoder.matches(newPassword, user.getPassword())).thenReturn(true);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.changePassword(user.getUsername(), oldPassword, newPassword)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder, never()).encode(any(String.class));
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void updateAvatarShouldUpdateAvatarUrlWhenUserExists() {
        // 准备
        String avatarUrl = "https://example.com/avatar.jpg";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        UserVO result = userService.updateAvatar(user.getUsername(), avatarUrl);
        // 验证
        assertNotNull(result);
        assertEquals(avatarUrl, user.getAvatar());
        verify(userRepository).findByUsername(user.getUsername());
        verify(userRepository).save(user);
    }
    @Test
    void updateEmailShouldUpdateEmailWhenValid() {
        // 准备
        String newEmail = "newemail@example.com";
        String emailCode = "123456";
        String password = "password123";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(password, user.getPassword())).thenReturn(true);
        when(userRepository.existsByEmail(newEmail)).thenReturn(false);
        when(emailService.validateVerificationCode(newEmail, emailCode)).thenReturn(true);
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        UserVO result = userService.updateEmail(user.getUsername(), newEmail, emailCode, password);
        // 验证
        assertNotNull(result);
        assertEquals(newEmail, user.getEmail());
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder).matches(password, user.getPassword());
        verify(userRepository).existsByEmail(newEmail);
        verify(emailService).validateVerificationCode(newEmail, emailCode);
        verify(userRepository).save(user);
    }
    @Test
    void updateEmailShouldThrowExceptionWhenPasswordIncorrect() {
        // 准备
        String newEmail = "newemail@example.com";
        String emailCode = "123456";
        String password = "wrongPassword";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(password, user.getPassword())).thenReturn(false);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.updateEmail(user.getUsername(), newEmail, emailCode, password)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder).matches(password, user.getPassword());
        verify(userRepository, never()).existsByEmail(any());
        verify(emailService, never()).validateVerificationCode(any(), any());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void updateEmailShouldThrowExceptionWhenEmailExists() {
        // 准备
        String newEmail = "newemail@example.com";
        String emailCode = "123456";
        String password = "password123";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(password, user.getPassword())).thenReturn(true);
        when(userRepository.existsByEmail(newEmail)).thenReturn(true);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.updateEmail(user.getUsername(), newEmail, emailCode, password)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder).matches(password, user.getPassword());
        verify(userRepository).existsByEmail(newEmail);
        verify(emailService, never()).validateVerificationCode(any(), any());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void updateEmailShouldThrowExceptionWhenEmailCodeInvalid() {
        // 准备
        String newEmail = "newemail@example.com";
        String emailCode = "123456";
        String password = "password123";
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(passwordEncoder.matches(password, user.getPassword())).thenReturn(true);
        when(userRepository.existsByEmail(newEmail)).thenReturn(false);
        when(emailService.validateVerificationCode(newEmail, emailCode)).thenReturn(false);
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.updateEmail(user.getUsername(), newEmail, emailCode, password)
        );
        verify(userRepository).findByUsername(user.getUsername());
        verify(passwordEncoder).matches(password, user.getPassword());
        verify(userRepository).existsByEmail(newEmail);
        verify(emailService).validateVerificationCode(newEmail, emailCode);
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void getBasicUserInfoShouldReturnBasicInfoWhenUserExists() {
        // 准备
        Long userId = 1L;
        user.setId(userId);
        user.setNickname("测试用户");
        user.setAvatar("https://example.com/avatar.jpg");
        when(userRepository.findById(userId)).thenReturn(Optional.of(user));
        // 执行
        UserVO result = userService.getBasicUserInfo(userId);
        // 验证
        assertNotNull(result);
        assertEquals(userId, result.getId());
        assertEquals(user.getUsername(), result.getUsername());
        assertEquals(user.getNickname(), result.getNickname());
        assertEquals(user.getAvatar(), result.getAvatar());
        verify(userRepository).findById(userId);
    }
    @Test
    void getBasicUserInfoShouldThrowExceptionWhenUserNotExists() {
        // 准备
        Long userId = 1L;
        when(userRepository.findById(userId)).thenReturn(Optional.empty());
        // 执行与验证
        assertThrows(BusinessException.class, () -> 
            userService.getBasicUserInfo(userId)
        );
        verify(userRepository).findById(userId);
    }
    @Test
    void uploadAndUpdateAvatarShouldSucceedWhenFileValid() throws IOException {
        // 准备
        String avatarUrl = "http://localhost:8999/media/avatars/testuser/uuid-test.jpg";
        String objectName = "avatars/testuser/uuid-test.jpg";
        MultipartFile mockFile = mock(MultipartFile.class);
        when(mockFile.getContentType()).thenReturn("image/jpeg");
        when(mockFile.getSize()).thenReturn(1024L); // 1KB
        when(mockFile.getOriginalFilename()).thenReturn("test.jpg");
        when(userRepository.findByUsername(user.getUsername())).thenReturn(Optional.of(user));
        when(minioService.uploadFile(contains("avatars/" + user.getUsername()), any(), eq("image/jpeg"))).thenReturn(avatarUrl);
        when(userRepository.save(any(User.class))).thenReturn(user);
        // 执行
        Map<String, String> result = userService.uploadAndUpdateAvatar(user.getUsername(), mockFile);
        // 验证
        assertNotNull(result);
        assertTrue(result.containsKey("avatarUrl"));
        assertEquals(avatarUrl, result.get("avatarUrl"));
        verify(userRepository).findByUsername(user.getUsername());
        verify(minioService).uploadFile(anyString(), any(), anyString());
        verify(userRepository).save(user);
    }
    @Test
    void uploadAndUpdateAvatarShouldThrowExceptionWhenFileTypeInvalid() {
        // 准备
        MultipartFile mockFile = mock(MultipartFile.class);
        when(mockFile.getContentType()).thenReturn("application/pdf");
        // 执行和验证
        BusinessException exception = assertThrows(BusinessException.class, () -> {
            userService.uploadAndUpdateAvatar(user.getUsername(), mockFile);
        });
        assertEquals(400, exception.getCode());
        assertTrue(exception.getMessage().contains("只支持上传图片文件"));
        verify(minioService, never()).uploadFile(anyString(), any(), anyString());
        verify(userRepository, never()).save(any(User.class));
    }
    @Test
    void uploadAndUpdateAvatarShouldThrowExceptionWhenFileSizeTooLarge() {
        // 准备
        MultipartFile mockFile = mock(MultipartFile.class);
        when(mockFile.getContentType()).thenReturn("image/jpeg");
        when(mockFile.getSize()).thenReturn(3 * 1024 * 1024L); // 3MB
        // 执行和验证
        BusinessException exception = assertThrows(BusinessException.class, () -> {
            userService.uploadAndUpdateAvatar(user.getUsername(), mockFile);
        });
        assertEquals(400, exception.getCode());
        assertTrue(exception.getMessage().contains("文件大小不能超过2MB"));
        verify(minioService, never()).uploadFile(anyString(), any(), anyString());
        verify(userRepository, never()).save(any(User.class));
    }
}
</file>

</files>
